{
  "address": "0x4fd3d880aa1927af77f85e08e72c0bd38818c7da",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BLLNToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-13\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract CanReclaimToken is Ownable {\n    /**\n    * @dev Reclaim all ERC20Basic compatible tokens\n    * @param token ERC20Basic The address of the token contract\n    */\n    function reclaimToken(ERC20Basic token) external onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n    }\n}\n\n/**\n* @title Basic token\n* @dev Basic version of StandardToken, with no allowances.\n*/\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* @dev https://github.com/ethereum/EIPs/issues/20\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n*/\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n* @title Mintable token\n* @dev Simple ERC20 Token example, with mintable token creation\n* @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n*/\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ninterface BLLNDividendInterface {\n    function setTokenAddress(address _tokenAddress) external;\n    function buyToken() external payable;\n    function withdraw(uint256 _amount) external;\n    function withdrawTo(address _to, uint256 _amount) external;\n    function updateDividendBalance(uint256 _totalSupply, address _address, uint256 _tokensAmount) external;\n    function transferTokens(address _from, address _to, uint256 _amount) external returns (bool);\n    function shareDividends() external payable;\n    function getDividendBalance(address _address) external view returns (uint256);\n}\n\ncontract BLLNToken is MintableToken, CanReclaimToken {\n    string public constant name = \"Billion Token\";\n    string public constant symbol = \"BLLN\";\n    uint32 public constant decimals = 0;\n    uint256 public constant maxTotalSupply = 250*(10**6);\n    BLLNDividendInterface public dividend;\n\n    constructor(address _dividendAddress) public {\n        require(_dividendAddress != address(0));\n        dividend = BLLNDividendInterface(_dividendAddress);\n    }\n\n    modifier canMint() {\n        require(totalSupply_ < maxTotalSupply);\n        _;\n    }\n\n    modifier onlyDividend() {\n        require(msg.sender == address(dividend));\n        _;\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length == size + 4);\n        _;\n    }\n\n    function () public {}\n\n    function mint(address _to, uint256 _amount) public onlyDividend canMint returns (bool) {\n        require(_to != address(0));\n        require(_amount != 0);\n        uint256 newTotalSupply = totalSupply_.add(_amount);\n        require(newTotalSupply <= maxTotalSupply);\n\n        totalSupply_ = newTotalSupply;\n        balances[_to] = balances[_to].add(_amount);\n\n        dividend.updateDividendBalance(totalSupply_, _to, _amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2*32) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        require(dividend.transferTokens(msg.sender, _to, _value));\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b50604051602080610f2e833981016040525160038054600160a060020a03191633179055600160a060020a038116151561005957600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055610ea6806100886000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011557806306fdde031461013e578063095ea7b3146101c85780630ff8cf9b146101ec57806317ffc3201461021d57806318160ddd1461024057806323b872dd146102675780632ab4d05214610291578063313ce567146102a657806340c10f19146102d457806366188463146102f857806370a082311461031c5780637d64bcb41461033d5780638da5cb5b1461035257806395d89b4114610367578063a9059cbb1461037c578063d73dd623146103a0578063dd62ed3e146103c4578063f2fde38b146103eb575b34801561011257600080fd5b50005b34801561012157600080fd5b5061012a61040c565b604080519115158252519081900360200190f35b34801561014a57600080fd5b5061015361042d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018d578181015183820152602001610175565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d457600080fd5b5061012a600160a060020a0360043516602435610464565b3480156101f857600080fd5b506102016104ca565b60408051600160a060020a039092168252519081900360200190f35b34801561022957600080fd5b5061023e600160a060020a03600435166104d9565b005b34801561024c57600080fd5b50610255610622565b60408051918252519081900360200190f35b34801561027357600080fd5b5061012a600160a060020a0360043581169060243516604435610628565b34801561029d57600080fd5b5061025561079f565b3480156102b257600080fd5b506102bb6107a7565b6040805163ffffffff9092168252519081900360200190f35b3480156102e057600080fd5b5061012a600160a060020a03600435166024356107ac565b34801561030457600080fd5b5061012a600160a060020a0360043516602435610978565b34801561032857600080fd5b50610255600160a060020a0360043516610a68565b34801561034957600080fd5b5061012a610a83565b34801561035e57600080fd5b50610201610b13565b34801561037357600080fd5b50610153610b22565b34801561038857600080fd5b5061012a600160a060020a0360043516602435610b59565b3480156103ac57600080fd5b5061012a600160a060020a0360043516602435610cf9565b3480156103d057600080fd5b50610255600160a060020a0360043581169060243516610d92565b3480156103f757600080fd5b5061023e600160a060020a0360043516610dbd565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152600d81527f42696c6c696f6e20546f6b656e00000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600454600160a060020a031681565b600354600090600160a060020a031633146104f357600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b505050506040513d602081101561057e57600080fd5b5051600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b1580156105f257600080fd5b505af1158015610606573d6000803e3d6000fd5b505050506040513d602081101561061c57600080fd5b50505050565b60015490565b6000600160a060020a038316151561063f57600080fd5b600160a060020a03841660009081526020819052604090205482111561066457600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561069457600080fd5b600160a060020a0384166000908152602081905260409020546106bd908363ffffffff610e5216565b600160a060020a0380861660009081526020819052604080822093909355908516815220546106f2908363ffffffff610e6416565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610734908363ffffffff610e5216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b630ee6b28081565b600081565b6004546000908190600160a060020a031633146107c857600080fd5b600154630ee6b280116107da57600080fd5b600160a060020a03841615156107ef57600080fd5b8215156107fb57600080fd5b60015461080e908463ffffffff610e6416565b9050630ee6b28081111561082157600080fd5b6001819055600160a060020a03841660009081526020819052604090205461084f908463ffffffff610e6416565b600160a060020a03808616600081815260208190526040808220949094556004805460015486517f3b5b07870000000000000000000000000000000000000000000000000000000081529283015260248201939093526044810188905293519190921692633b5b078792606480830193919282900301818387803b1580156108d657600080fd5b505af11580156108ea573d6000803e3d6000fd5b5050604080518681529051600160a060020a03881693507f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592509081900360200190a2604080518481529051600160a060020a038616916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019392505050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156109cd57336000908152600260209081526040808320600160a060020a0388168452909152812055610a02565b6109dd818463ffffffff610e5216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a03163314610a9d57600080fd5b600154630ee6b28011610aaf57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b60408051808201909152600481527f424c4c4e00000000000000000000000000000000000000000000000000000000602082015281565b6000604036604414610b6a57600080fd5b600160a060020a0384161515610b7f57600080fd5b33600090815260208190526040902054831115610b9b57600080fd5b33600090815260208190526040902054610bbb908463ffffffff610e5216565b3360009081526020819052604080822092909255600160a060020a03861681522054610bed908463ffffffff610e6416565b600160a060020a03808616600081815260208181526040808320959095556004805486517fa64b6e5f00000000000000000000000000000000000000000000000000000000815233928101929092526024820194909452604481018990529451929093169363a64b6e5f93606480830194919391928390030190829087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b505050506040513d6020811015610ca257600080fd5b50511515610caf57600080fd5b604080518481529051600160a060020a0386169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019392505050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d2d908363ffffffff610e6416565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610dd457600080fd5b600160a060020a0381161515610de957600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610e5e57fe5b50900390565b600082820183811015610e7357fe5b93925050505600a165627a7a72305820179d373070b2ea406a3e2f27d8275881dc2faf251c70239206151bc537eff55e0029000000000000000000000000458362891159a0b2f1ef781f05ab52c145cee859",
  "constructorArguments": "000000000000000000000000458362891159a0b2f1ef781f05ab52c145cee859"
}