{
  "address": "0xd7290307c040f4089f8650b7f7aac3cfe39cd6bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UEXCloudToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-27\n*/\n\n/**\n * UEX cloud is a real-time market observation platform focused on the digital currency trading market\n * Website:http://uex.cloud\n * telgram:https://t.me/uexcloud\n */ \n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token {\n    function distr(address _to, uint256 _value) external returns (bool);\n    function totalSupply() constant external returns (uint256 supply);\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n}\n\ncontract UEXCloudToken is ERC20 {\n\n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"UEX Cloud\";\n    string public constant symbol = \"UEX\";\n    uint public constant decimals = 8;\n    uint256 public totalSupply = 10000000000e8;\n    uint256 public totalDistributed = 200000000e8;\n\tuint256 public totalPurchase = 200000000e8;\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed).sub(totalPurchase);\n\t\n    uint256 public value = 5000e8;\n\tuint256 public purchaseCardinal = 5000000e8;\n\t\n\t// Min ICO value 0.001 ETH\n\tuint256 public minPurchase = 0.001e18;\n\t// Max ICO value 10 ETH\n\tuint256 public maxPurchase = 10e18;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n\tevent Purchase(address indexed to, uint256 amount);\n\tevent PurchaseFinished();\n\n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n\tbool public purchaseFinished = false;\n\n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n\t\n\tmodifier canPurchase(){\n\t\trequire(!purchaseFinished);\n\t\t_;\n\t}\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n\n    function Constructor() public {\n        owner = msg.sender;\n        balances[owner] = totalDistributed;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n\t\n\tfunction finishedPurchase() onlyOwner canPurchase public returns (bool) {\n\t\tpurchaseFinished = true;\n\t\temit PurchaseFinished();\n\t\treturn true;\n\t}\n\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\t\n\tfunction purch(address _to,uint256 _amount) canPurchase private returns (bool){\n\t\ttotalPurchase = totalPurchase.sub(_amount);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\temit Purchase(_to, _amount);\n\t\temit Transfer(address(0), _to, _amount);\n\t\treturn true;\n\t}\n\n    function () external payable {\n\t\tif (msg.value >= minPurchase){\n\t\t\tpurchaseTokens();\n\t\t}else{\n\t\t\tairdropTokens();\n\t\t}\n    }\n\n\tfunction purchaseTokens() payable canPurchase public {\n\t\tuint256 recive = msg.value;\n\t\trequire(recive >= minPurchase && recive <= maxPurchase);\n\n        // 0.001 - 0.01 10%;\n\t\t// 0.01 - 0.05 20%;\n\t\t// 0.05 - 0.1 30%;\n\t\t// 0.1 - 0.5 50%;\n\t\t// 0.5 - 1 100%;\n\t\tuint256 amount;\n\t\tamount = recive.mul(purchaseCardinal);\n\t\tuint256 bonus;\n\t\tif (recive >= 0.001e18 && recive < 0.01e18){\n\t\t\tbonus = amount.mul(1).div(10);\n\t\t}else if(recive >= 0.01e18 && recive < 0.05e18){\n\t\t\tbonus = amount.mul(2).div(10);\n\t\t}else if(recive >= 0.05e18 && recive < 0.1e18){\n\t\t\tbonus = amount.mul(3).div(10);\n\t\t}else if(recive >= 0.1e18 && recive < 0.5e18){\n\t\t\tbonus = amount.mul(5).div(10);\n\t\t}else if(recive >= 0.5e18){\n\t\t\tbonus = amount;\n\t\t}\n\t\t\n\t\tamount = amount.add(bonus).div(1e18);\n\t\t\n\t\trequire(amount <= totalPurchase);\n\t\t\n\t\tpurch(msg.sender, amount);\n\t}\n\t\n    function airdropTokens() payable canDistr onlyWhitelist public {\n        if (value > totalRemaining) {\n            value = totalRemaining;\n        }\n\n        require(value <= totalRemaining);\n\n        address investor = msg.sender;\n        uint256 toGive = value;\n\t\t\n\t\tdistr(investor, toGive);\n\t\t\n\t\tif (toGive > 0) {\n\t\t\tblacklist[investor] = true;\n\t\t}\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n\n        value = value.div(100000).mul(99999);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n\n    function withdraw() onlyOwner public {\n        uint256 etherBalance = address(this).balance;\n        owner.transfer(etherBalance);\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        emit Burn(burner, _value);\n    }\n\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\t\n\tfunction withdrawToken(address _to,uint256 _amount) onlyOwner public returns(bool){\n        require(_amount <= totalRemaining);\n        \n        return distr(_to,_amount);\n    }\n}",
  "bytecode": "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060055566470de4df82000060065566470de4df820000600755620000b2600754620000956006546005546200012a6401000000000262002338179091906401000000009004565b6200012a6401000000000262002338179091906401000000009004565b60085564746a5288006009556601c6bf52634000600a5566038d7ea4c68000600b55678ac7230489e80000600c556000600d60006101000a81548160ff0219169083151502179055506000600d60016101000a81548160ff0219169083151502179055503480156200012357600080fd5b5062000144565b60008282111515156200013957fe5b818303905092915050565b61237d80620001546000396000f300608060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101a3578063095ea7b31461023357806318160ddd1461029857806323b872dd146102c3578063313ce567146103485780633290ce291461037357806333b5b62e1461037d5780633ccfd60b146103a85780633fa4f245146103bf57806342966c68146103ea57806370a08231146104175780637b2581c21461046e578063832a66a2146104995780638a3c44a5146104c457806390b9c31a146104db57806391152c5c1461050a57806395d89b4114610514578063977b055b146105a45780639b1cbccc146105cf5780639e281a98146105fe578063a9059cbb14610663578063c108d542146106c8578063c489744b146106f7578063c84ba84a1461076e578063d8a543601461079d578063dd62ed3e146107c8578063e58fc54c1461083f578063efca2eed1461089a578063f2fde38b146108c5578063f9f92be414610908575b600b543410151561019857610193610963565b6101a1565b6101a0610b69565b5b005b3480156101af57600080fd5b506101b8610ce5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f85780820151818401526020810190506101dd565b50505050905090810190601f1680156102255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023f57600080fd5b5061027e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d1e565b604051808215151515815260200191505060405180910390f35b3480156102a457600080fd5b506102ad610eac565b6040518082815260200191505060405180910390f35b3480156102cf57600080fd5b5061032e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eb2565b604051808215151515815260200191505060405180910390f35b34801561035457600080fd5b5061035d611288565b6040518082815260200191505060405180910390f35b61037b610963565b005b34801561038957600080fd5b5061039261128d565b6040518082815260200191505060405180910390f35b3480156103b457600080fd5b506103bd611293565b005b3480156103cb57600080fd5b506103d4611377565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b506104156004803603810190808035906020019092919050505061137d565b005b34801561042357600080fd5b50610458600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611549565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b50610483611592565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae611598565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b506104d961159e565b005b3480156104e757600080fd5b506104f0611649565b604051808215151515815260200191505060405180910390f35b610512610b69565b005b34801561052057600080fd5b5061052961165c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056957808201518184015260208101905061054e565b50505050905090810190601f1680156105965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105b057600080fd5b506105b9611695565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b506105e461169b565b604051808215151515815260200191505060405180910390f35b34801561060a57600080fd5b50610649600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611763565b604051808215151515815260200191505060405180910390f35b34801561066f57600080fd5b506106ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117e4565b604051808215151515815260200191505060405180910390f35b3480156106d457600080fd5b506106dd611a1f565b604051808215151515815260200191505060405180910390f35b34801561070357600080fd5b50610758600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a32565b6040518082815260200191505060405180910390f35b34801561077a57600080fd5b50610783611b1d565b604051808215151515815260200191505060405180910390f35b3480156107a957600080fd5b506107b2611be5565b6040518082815260200191505060405180910390f35b3480156107d457600080fd5b50610829600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611beb565b6040518082815260200191505060405180910390f35b34801561084b57600080fd5b50610880600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c72565b604051808215151515815260200191505060405180910390f35b3480156108a657600080fd5b506108af611eb7565b6040518082815260200191505060405180910390f35b3480156108d157600080fd5b50610906600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ebd565b005b34801561091457600080fd5b50610949600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f94565b604051808215151515815260200191505060405180910390f35b6000806000600d60019054906101000a900460ff1615151561098457600080fd5b349250600b54831015801561099b5750600c548311155b15156109a657600080fd5b6109bb600a5484611fb490919063ffffffff16565b915066038d7ea4c6800083101580156109da5750662386f26fc1000083105b15610a0d57610a06600a6109f8600185611fb490919063ffffffff16565b611fe790919063ffffffff16565b9050610b19565b662386f26fc100008310158015610a2a575066b1a2bc2ec5000083105b15610a5d57610a56600a610a48600285611fb490919063ffffffff16565b611fe790919063ffffffff16565b9050610b18565b66b1a2bc2ec500008310158015610a7b575067016345785d8a000083105b15610aae57610aa7600a610a99600385611fb490919063ffffffff16565b611fe790919063ffffffff16565b9050610b17565b67016345785d8a00008310158015610acd57506706f05b59d3b2000083105b15610b0057610af9600a610aeb600585611fb490919063ffffffff16565b611fe790919063ffffffff16565b9050610b16565b6706f05b59d3b2000083101515610b15578190505b5b5b5b5b610b46670de0b6b3a7640000610b38838561200290919063ffffffff16565b611fe790919063ffffffff16565b91506007548211151515610b5957600080fd5b610b633383612020565b50505050565b600080600d60009054906101000a900460ff16151515610b8857600080fd5b60001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610be757600080fd5b6008546009541115610bfd576008546009819055505b60085460095411151515610c1057600080fd5b3391506009549050610c2282826121ac565b506000811115610c85576001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600554600654101515610cae576001600d60006101000a81548160ff0219169083151502179055505b610cdb6201869f610ccd620186a0600954611fe790919063ffffffff16565b611fb490919063ffffffff16565b6009819055505050565b6040805190810160405280600981526020017f55455820436c6f7564000000000000000000000000000000000000000000000081525081565b6000808214158015610dad57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610dbb5760009050610ea6565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60055481565b6000606060048101600036905010151515610ec957fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610f0557600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610f5357600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610fde57600080fd5b61103083600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110283600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233890919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111d483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b600b5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112f157600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611373573d6000803e3d6000fd5b5050565b60095481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113db57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561142957600080fd5b33905061147e82600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233890919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114d68260055461233890919063ffffffff16565b6005819055506114f18260065461233890919063ffffffff16565b6006819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b600a5481565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060065460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600d60019054906101000a900460ff1681565b6040805190810160405280600381526020017f554558000000000000000000000000000000000000000000000000000000000081525081565b600c5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f957600080fd5b600d60009054906101000a900460ff1615151561171557600080fd5b6001600d60006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c157600080fd5b60085482111515156117d257600080fd5b6117dc83836121ac565b905092915050565b60006040600481016000369050101515156117fb57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561183757600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561188557600080fd5b6118d783600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061196c83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600d60009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ad557600080fd5b505af1158015611ae9573d6000803e3d6000fd5b505050506040513d6020811015611aff57600080fd5b81019080805190602001909291905050509050809250505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b7b57600080fd5b600d60019054906101000a900460ff16151515611b9757600080fd5b6001600d60016101000a81548160ff0219169083151502179055507f50ace3efca2a92281a35fee7cd1e1c67bde1444a6b9ad4b77aa30690af9640d860405160405180910390a16001905090565b60085481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cd357600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d7157600080fd5b505af1158015611d85573d6000803e3d6000fd5b505050506040513d6020811015611d9b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e7357600080fd5b505af1158015611e87573d6000803e3d6000fd5b505050506040513d6020811015611e9d57600080fd5b810190808051906020019092919050505092505050919050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f1957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611f915780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60046020528060005260406000206000915054906101000a900460ff1681565b60008082840290506000841480611fd55750828482811515611fd257fe5b04145b1515611fdd57fe5b8091505092915050565b6000808284811515611ff557fe5b0490508091505092915050565b600080828401905083811015151561201657fe5b8091505092915050565b6000600d60019054906101000a900460ff1615151561203e57600080fd5b6120538260075461233890919063ffffffff16565b6007819055506120ab82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200290919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600d60009054906101000a900460ff161515156121ca57600080fd5b6121df8260085461233890919063ffffffff16565b60088190555061223782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200290919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561234657fe5b8183039050929150505600a165627a7a7230582080679ce126d95fa88a6ace8dd27e4d3dc3e97e12460e8f93ad31c9a47328e8d20029"
}