{
  "address": "0x466c44812835f57b736ef9f63582b8a6693a14d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AccessoryData",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-29\n*/\n\npragma solidity ^0.4.17;\n\n\n\n\n  \n\n   \n\t\n\ncontract SafeMath {\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\n      uint z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n      assert(x >= y);\n      uint z = x - y;\n      return z;\n    }\n\n    function safeMult(uint x, uint y) pure internal returns(uint) {\n      uint z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n        return uint8(genNum % (maxRandom - min + 1)+min);\n    }\n}\n\ncontract Enums {\n    enum ResultCode {\n        SUCCESS,\n        ERROR_CLASS_NOT_FOUND,\n        ERROR_LOW_BALANCE,\n        ERROR_SEND_FAIL,\n        ERROR_NOT_OWNER,\n        ERROR_NOT_ENOUGH_MONEY,\n        ERROR_INVALID_AMOUNT\n    }\n\n    enum AngelAura { \n        Blue, \n        Yellow, \n        Purple, \n        Orange, \n        Red, \n        Green \n    }\n}\n\n\n\ncontract AccessControl {\n    address public creatorAddress;\n    uint16 public totalSeraphims = 0;\n    mapping (address => bool) public seraphims;\n\n    bool public isMaintenanceMode = true;\n \n    modifier onlyCREATOR() {\n        require(msg.sender == creatorAddress);\n        _;\n    }\n\n    modifier onlySERAPHIM() {\n        require(seraphims[msg.sender] == true);\n        _;\n    }\n    \n    modifier isContractActive {\n        require(!isMaintenanceMode);\n        _;\n    }\n    \n    // Constructor\n    function AccessControl() public {\n        creatorAddress = msg.sender;\n    }\n    \n\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n        if (seraphims[_newSeraphim] == false) {\n            seraphims[_newSeraphim] = true;\n            totalSeraphims += 1;\n        }\n    }\n    \n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n        if (seraphims[_oldSeraphim] == true) {\n            seraphims[_oldSeraphim] = false;\n            totalSeraphims -= 1;\n        }\n    }\n\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n        isMaintenanceMode = _isMaintaining;\n    }\n\n  \n} \ncontract IAccessoryData is AccessControl, Enums {\n    uint8 public totalAccessorySeries;    \n    uint32 public totalAccessories;\n    \n \n    /*** FUNCTIONS ***/\n    //*** Write Access ***//\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) ;\n\tfunction setAccessory(uint8 _AccessorySeriesId, address _owner) onlySERAPHIM external returns(uint64);\n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private;\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode);\n    function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public;\n    function updateAccessoryLock (uint64 _accessoryId, bool newValue) public;\n    function removeCreator() onlyCREATOR external;\n    \n    //*** Read Access ***//\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) ;\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner);\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint);\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) ;\n    function getTotalAccessorySeries() constant public returns (uint8) ;\n    function getTotalAccessories() constant public returns (uint);\n    function getAccessoryLockStatus(uint64 _acessoryId) constant public returns (bool);\n}\n\ncontract AccessoryData is IAccessoryData, SafeMath {\n    /*** EVENTS ***/\n    event CreatedAccessory (uint64 accessoryId);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /*** DATA TYPES ***/\n    struct AccessorySeries {\n        uint8 AccessorySeriesId;\n        uint32 currentTotal;\n        uint32 maxTotal;\n        uint price;\n    }\n\n    struct Accessory {\n        uint32 accessoryId;\n        uint8 accessorySeriesId;\n        address owner;\n        bool ownerLock;\n    }\n\n\n    /*** STORAGE ***/\n    mapping(uint8 => AccessorySeries) public AccessorySeriesCollection;\n    mapping(uint => Accessory) public AccessoryCollection;\n    mapping(address => uint64[]) public ownerAccessoryCollection;\n    \n    /*** FUNCTIONS ***/\n    //*** Write Access ***//\n    function AccessoryData() public {\n      \n    }\n\n    //*** Accessories***/\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) {\n        \n        if ((now > 1517189201) || (totalAccessorySeries >= 18)) {revert();}\n        //This confirms that no one, even the develoopers, can create any accessorySeries after JAN/29/2018 @ 1:26 am (UTC) or more than the original 18 series. \n        AccessorySeries storage accessorySeries = AccessorySeriesCollection[_AccessorySeriesId];\n        accessorySeries.AccessorySeriesId = _AccessorySeriesId;\n        accessorySeries.maxTotal = _maxTotal;\n        accessorySeries.price = _price;\n\n        totalAccessorySeries += 1;\n        return totalAccessorySeries;\n    }\n\t\n\tfunction setAccessory(uint8 _seriesIDtoCreate, address _owner) external onlySERAPHIM returns(uint64) { \n        AccessorySeries storage series = AccessorySeriesCollection[_seriesIDtoCreate];\n        if (series.maxTotal <= series.currentTotal) {revert();}\n        else {\n        totalAccessories += 1;\n        series.currentTotal +=1;\n       Accessory storage accessory = AccessoryCollection[totalAccessories];\n        accessory.accessoryId = totalAccessories;\n       accessory.accessorySeriesId = _seriesIDtoCreate;\n        accessory.owner = _owner;\n        accessory.ownerLock = true;\n        uint64[] storage owners = ownerAccessoryCollection[_owner];\n        owners.push(accessory.accessoryId);\n       }\n        \n    }\n\n    \n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private  {\n            uint64[] storage owners = ownerAccessoryCollection[_owner];\n          owners.push(_accessoryId);\n          Accessory storage accessory = AccessoryCollection[_accessoryId];\n          accessory.owner = _owner;\n    \n   }\n    \n\n\t\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode) {\n        Accessory storage accessory = AccessoryCollection[__accessoryId];\n        if (accessory.owner != _from) {\n            return ResultCode.ERROR_NOT_OWNER;\n        }\n        if (_from == _to) {revert();}\n        if (accessory.ownerLock == true) {revert();}\n     addAccessoryIdMapping(_to, __accessoryId);\n        return ResultCode.SUCCESS;\n    }\n  function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public  {\n     //Any owner of an accessory can call this function to transfer their accessory to any other address. \n     \n       if ((__accessoryId > totalAccessories) || ( __accessoryId == 0)) {revert();}\n         Accessory storage accessory = AccessoryCollection[__accessoryId];\n        if (msg.sender == _to) {revert();} //can't send an accessory to yourself\n        if (accessory.owner != msg.sender) {revert();} //can't send an accessory you don't own. \n        else {\n        accessory.owner = _to;\n      addAccessoryIdMapping(_to, __accessoryId);\n        }\n    }\n    \n       function updateAccessoryLock (uint64 _accessoryId, bool newValue) public {\n        if ((_accessoryId > totalAccessories) || (_accessoryId == 0)) {revert();}\n        Accessory storage accessory = AccessoryCollection[_accessoryId];\n        if (accessory.owner != msg.sender) { revert();}\n        accessory.ownerLock = newValue;\n    }\n    \n       function removeCreator() onlyCREATOR external {\n        //this function is meant to be called once all modules for the game are in place. It will remove our ability to add any new modules and make the game fully decentralized. \n        creatorAddress = address(0);\n    }\n\n    //*** Read Access ***//\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) {\n        AccessorySeries memory series = AccessorySeriesCollection[_accessorySeriesId];\n        accessorySeriesId = series.AccessorySeriesId;\n        currentTotal = series.currentTotal;\n        maxTotal = series.maxTotal;\n        price = series.price;\n    }\n\t\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner) {\n        Accessory memory accessory = AccessoryCollection[_accessoryId];\n        accessoryID = accessory.accessoryId;\n        AccessorySeriesID = accessory.accessorySeriesId;\n        owner = accessory.owner;\n  \n       \n    }\n\t\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint) {\n        return ownerAccessoryCollection[_owner].length;\n    }\n\t\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) {\n        if (_index >= ownerAccessoryCollection[_owner].length)\n            return 0;\n        return ownerAccessoryCollection[_owner][_index];\n    }\n\n    function getTotalAccessorySeries() constant public returns (uint8) {\n        return totalAccessorySeries;\n    }\n\n    function getTotalAccessories() constant public returns (uint) {\n        return totalAccessories;\n    }\n      function getAccessoryLockStatus(uint64 _acessoryId) constant public returns (bool) {\n        if ((_acessoryId > totalAccessories) || (_acessoryId == 0)) {revert();}\n       Accessory storage accessory = AccessoryCollection[_acessoryId];\n       return accessory.ownerLock;\n    }\n}",
  "bytecode": "606060405260008060146101000a81548161ffff021916908361ffff1602179055506001600260006101000a81548160ff021916908315150217905550341561004757600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c16806100966000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301637ff4146101595780631e442919146101d0578063277e1de7146102155780632ef0a28d146102a25780633721ee15146102f357806345e261051461035d5780635b1d0d1e146103825780635d40c0ae146103cf57806362161235146104275780636b6cc239146104935780637123691e146104c05780637f26fc7d146104f9578063918a2e0c1461050e578063976d16d51461059c578063a3d8fdd5146105c5578063ad344465146105f4578063bbc878c414610661578063bf6c277a14610692578063c64f9490146106c1578063d356a28b146106f9578063e771859414610732578063e927fc5c14610767578063edddb350146107bc578063eee59ccf14610829578063f048532814610875578063f44191f0146108e2575b600080fd5b341561016457600080fd5b61017a6004808035906020019091905050610938565b604051808481526020018360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b34156101db57600080fd5b6101fb600480803567ffffffffffffffff16906020019091905050610a3d565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b61027e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050610abc565b6040518082600681111561028e57fe5b60ff16815260200191505060405180910390f35b34156102ad57600080fd5b6102d9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c12565b604051808215151515815260200191505060405180910390f35b34156102fe57600080fd5b610333600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c32565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b341561036857600080fd5b61038060048080351515906020019091905050610c7e565b005b341561038d57600080fd5b6103b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cf6565b6040518082815260200191505060405180910390f35b34156103da57600080fd5b61040b600480803560ff1690602001909190803563ffffffff16906020019091908035906020019091905050610d42565b604051808260ff1660ff16815260200191505060405180910390f35b341561043257600080fd5b610477600480803561ffff1690602001909190803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e7b565b604051808260ff1660ff16815260200191505060405180910390f35b341561049e57600080fd5b6104a6610ec8565b604051808215151515815260200191505060405180910390f35b34156104cb57600080fd5b6104f7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610edb565b005b341561050457600080fd5b61050c61101c565b005b341561051957600080fd5b61052f60048080359060200190919050506110ba565b604051808563ffffffff1663ffffffff1681526020018460ff1660ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200194505050505060405180910390f35b34156105a757600080fd5b6105af611134565b6040518082815260200191505060405180910390f35b34156105d057600080fd5b6105d8611153565b604051808260ff1660ff16815260200191505060405180910390f35b34156105ff57600080fd5b610618600480803560ff16906020019091905050611166565b604051808560ff1660ff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390f35b341561066c57600080fd5b6106746111c3565b604051808261ffff1661ffff16815260200191505060405180910390f35b341561069d57600080fd5b6106a56111d7565b604051808260ff1660ff16815260200191505060405180910390f35b34156106cc57600080fd5b6106f7600480803567ffffffffffffffff1690602001909190803515159060200190919050506111ee565b005b341561070457600080fd5b610730600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112d1565b005b341561073d57600080fd5b610745611411565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561077257600080fd5b61077a611426565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c757600080fd5b6107e0600480803560ff1690602001909190505061144b565b604051808560ff1660ff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390f35b341561083457600080fd5b610873600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050611517565b005b341561088057600080fd5b6108b8600480803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611664565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34156108ed57600080fd5b610922600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061192a565b6040518082815260200191505060405180910390f35b6000806000610945611b09565b60046000868152602001908152602001600020608060405190810160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff1660ff1660ff1681526020016000820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160199054906101000a900460ff1615151515815250509050806000015163ffffffff1693508060200151925080604001519150509193909250565b6000806002809054906101000a900463ffffffff1663ffffffff168367ffffffffffffffff161180610a79575060008367ffffffffffffffff16145b15610a8357600080fd5b600460008467ffffffffffffffff16815260200190815260200160002090508060000160199054906101000a900460ff16915050919050565b60008060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610b1e57600080fd5b600460008467ffffffffffffffff16815260200190815260200160002090508473ffffffffffffffffffffffffffffffffffffffff168160000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610b9f5760049150610c0a565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610bd857600080fd5b600115158160000160199054906101000a900460ff1615151415610bfb57600080fd5b610c058484611a09565b600091505b509392505050565b60016020528060005260406000206000915054906101000a900460ff1681565b600560205281600052604060002081815481101515610c4d57fe5b9060005260206000209060049182820401919006600802915091509054906101000a900467ffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cd957600080fd5b80600260006101000a81548160ff02191690831515021790555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da057600080fd5b635a6e7851421180610dc557506012600260019054906101000a900460ff1660ff1610155b15610dcf57600080fd5b600360008660ff1660ff1681526020019081526020016000209050848160000160006101000a81548160ff021916908360ff160217905550838160000160056101000a81548163ffffffff021916908363ffffffff1602179055508281600101819055506001600260018282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550600260019054906101000a900460ff169150509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166001430340600190040190508360ff1660018560ff1687030161ffff1682811515610ebc57fe5b06019150509392505050565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3657600080fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611019576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107757600080fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60046020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160199054906101000a900460ff16905084565b60006002809054906101000a900463ffffffff1663ffffffff16905090565b600260019054906101000a900460ff1681565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900463ffffffff16908060010154905084565b600060149054906101000a900461ffff1681565b6000600260019054906101000a900460ff16905090565b60006002809054906101000a900463ffffffff1663ffffffff168367ffffffffffffffff161180611229575060008367ffffffffffffffff16145b1561123357600080fd5b600460008467ffffffffffffffff16815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156112b057600080fd5b818160000160196101000a81548160ff021916908315150217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132c57600080fd5b60001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561140e5760018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b50565b6002809054906101000a900463ffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080611459611b53565b600360008760ff1660ff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481525050905080600001519450806020015193508060400151925080606001519150509193509193565b60006002809054906101000a900463ffffffff1663ffffffff168267ffffffffffffffff161180611552575060008267ffffffffffffffff16145b1561155c57600080fd5b600460008367ffffffffffffffff16815260200190815260200160002090508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156115b457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561161257600080fd5b828160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061165f8383611a09565b505050565b60008060008060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156116c957600080fd5b600360008760ff1660ff16815260200190815260200160002092508260000160019054906101000a900463ffffffff1663ffffffff168360000160059054906101000a900463ffffffff1663ffffffff1611151561172657600080fd5b60016002808282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff16021790555060018360000160018282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff160217905550600460006002809054906101000a900463ffffffff1663ffffffff16815260200190815260200160002091506002809054906101000a900463ffffffff168260000160006101000a81548163ffffffff021916908363ffffffff160217905550858260000160046101000a81548160ff021916908360ff160217905550848260000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260000160196101000a81548160ff021916908315150217905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508080548060010182816118c69190611b8b565b91600052602060002090600491828204019190066008028460000160009054906101000a900463ffffffff1663ffffffff16909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015156119805760009050611a03565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156119cc57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b92915050565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150818054806001018281611a609190611b8b565b916000526020600020906004918282040191900660080285909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050600460008467ffffffffffffffff1681526020019081526020016000209050838160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b608060405190810160405280600063ffffffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b608060405190810160405280600060ff168152602001600063ffffffff168152602001600063ffffffff168152602001600081525090565b815481835581811511611bc0576003016004900481600301600490048360005260206000209182019101611bbf9190611bc5565b5b505050565b611be791905b80821115611be3576000816000905550600101611bcb565b5090565b905600a165627a7a723058205018fdda32b579c3b4d7d143223fce641419d445dfc59c7d9903ab9eff05ca510029"
}