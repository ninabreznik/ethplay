{
  "address": "0x6b8bb175c092de7d81860b18db360b734a2598e0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Orderbook",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract RepublicToken is PausableToken, BurnableToken {\n\n    string public constant name = \"Republic Token\";\n    string public constant symbol = \"REN\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(decimals);\n\n    /// @notice The RepublicToken Constructor.\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\n        /* solium-disable error-reason */\n        require(amount > 0);\n\n        balances[owner] = balances[owner].sub(amount);\n        balances[beneficiary] = balances[beneficiary].add(amount);\n        emit Transfer(owner, beneficiary, amount);\n\n        return true;\n    }\n}\n\n/**\n * @notice LinkedList is a library for a circular double linked list.\n */\nlibrary LinkedList {\n\n    /*\n    * @notice A permanent NULL node (0x0) in the circular double linked list.\n    * NULL.next is the head, and NULL.previous is the tail.\n    */\n    address public constant NULL = 0x0;\n\n    /**\n    * @notice A node points to the node before it, and the node after it. If\n    * node.previous = NULL, then the node is the head of the list. If\n    * node.next = NULL, then the node is the tail of the list.\n    */\n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    /**\n    * @notice LinkedList uses a mapping from address to nodes. Each address\n    * uniquely identifies a node, and in this way they are used like pointers.\n    */\n    struct List {\n        mapping (address => Node) list;\n    }\n\n    /**\n    * @notice Insert a new node before an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert before the target.\n    */\n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Insert a new node after an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert after the target.\n    */\n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Remove a node from the list, and fix the previous and next\n    * pointers that are pointing to the removed node. Removing anode that is not\n    * in the list will do nothing.\n    *\n    * @param self The list being using.\n    * @param node The node in the list to be removed.\n    */\n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"not in list\");\n        if (node == NULL) {\n            return;\n        }\n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        // Deleting the node should set this value to false, but we set it here for\n        // explicitness.\n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    /**\n    * @notice Insert a node at the beginning of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the beginning of the list.\n    */\n    function prepend(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertBefore(self, begin(self), node);\n    }\n\n    /**\n    * @notice Insert a node at the end of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the end of the list.\n    */\n    function append(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        // isInList(left) and isInList(right) are checked in remove\n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    /**\n    * @notice Get the node at the beginning of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the beginning of the double\n    * linked list.\n    */\n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    /**\n    * @notice Get the node at the end of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the end of the double linked\n    * list.\n    */\n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].previous;\n    }\n\n}\n\n/// @notice This contract stores data and funds for the DarknodeRegistry\n/// contract. The data / fund logic and storage have been separated to improve\n/// upgradability.\ncontract DarknodeRegistryStore is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknodes are stored in the darknode struct. The owner is the\n    /// address that registered the darknode, the bond is the amount of REN that\n    /// was transferred during registration, and the public key is the\n    /// encryption key that should be used when sending sensitive information to\n    /// the darknode.\n    struct Darknode {\n        // The owner of a Darknode is the address that called the register\n        // function. The owner is the only address that is allowed to\n        // deregister the Darknode, unless the Darknode is slashed for\n        // malicious behavior.\n        address owner;\n\n        // The bond is the amount of REN submitted as a bond by the Darknode.\n        // This amount is reduced when the Darknode is slashed for malicious\n        // behavior.\n        uint256 bond;\n\n        // The block number at which the Darknode is considered registered.\n        uint256 registeredAt;\n\n        // The block number at which the Darknode is considered deregistered.\n        uint256 deregisteredAt;\n\n        // The public key used by this Darknode for encrypting sensitive data\n        // off chain. It is assumed that the Darknode has access to the\n        // respective private key, and that there is an agreement on the format\n        // of the public key.\n        bytes publicKey;\n    }\n\n    /// Registry data.\n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    // RepublicToken.\n    RepublicToken public ren;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _ren The address of the RepublicToken contract.\n    constructor(\n        string _VERSION,\n        RepublicToken _ren\n    ) public {\n        VERSION = _VERSION;\n        ren = _ren;\n    }\n\n    /// @notice Instantiates a darknode and appends it to the darknodes\n    /// linked-list.\n    ///\n    /// @param _darknodeID The darknode's ID.\n    /// @param _darknodeOwner The darknode's owner's address\n    /// @param _bond The darknode's bond value\n    /// @param _publicKey The darknode's public key\n    /// @param _registeredAt The time stamp when the darknode is registered.\n    /// @param _deregisteredAt The time stamp when the darknode is deregistered.\n    function appendDarknode(\n        address _darknodeID,\n        address _darknodeOwner,\n        uint256 _bond,\n        bytes _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOwner,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    /// @notice Returns the address of the first darknode in the store\n    function begin() external view onlyOwner returns(address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    /// @notice Returns the address of the next darknode in the store after the\n    /// given address.\n    function next(address darknodeID) external view onlyOwner returns(address) {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    /// @notice Removes a darknode from the store and transfers its bond to the\n    /// owner of this contract.\n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(ren.transfer(owner, bond), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the bond of the darknode. If the bond is being\n    /// decreased, the difference is sent to the owner of this contract.\n    function updateDarknodeBond(address darknodeID, uint256 bond) external onlyOwner {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        darknodeRegistry[darknodeID].bond = bond;\n        if (previousBond > bond) {\n            require(ren.transfer(owner, previousBond - bond), \"cannot transfer bond\");\n        }\n    }\n\n    /// @notice Updates the deregistration timestamp of a darknode.\n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    /// @notice Returns the owner of a given darknode.\n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address) {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    /// @notice Returns the bond of a given darknode.\n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    /// @notice Returns the registration time of a given darknode.\n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    /// @notice Returns the deregistration time of a given darknode.\n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    /// @notice Returns the encryption public key of a given darknode.\n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes) {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\n/// @notice DarknodeRegistry is responsible for the registration and\n/// deregistration of Darknodes.\ncontract DarknodeRegistry is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknode pods are shuffled after a fixed number of blocks.\n    /// An Epoch stores an epoch hash used as an (insecure) RNG seed, and the\n    /// blocknumber which restricts when the next epoch can be called.\n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocknumber;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    /// Variables used to parameterize behavior.\n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n    address public slasher;\n\n    /// When one of the above variables is modified, it is only updated when the\n    /// next epoch is called. These variables store the values for the next epoch.\n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n    address public nextSlasher;\n\n    /// The current and previous epoch\n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    /// Republic ERC20 token contract used to transfer bonds.\n    RepublicToken public ren;\n\n    /// Darknode Registry Store is the storage contract for darknodes.\n    DarknodeRegistryStore public store;\n\n    /// @notice Emitted when a darknode is registered.\n    /// @param _darknodeID The darknode ID that was registered.\n    /// @param _bond The amount of REN that was transferred as bond.\n    event LogDarknodeRegistered(address _darknodeID, uint256 _bond);\n\n    /// @notice Emitted when a darknode is deregistered.\n    /// @param _darknodeID The darknode ID that was deregistered.\n    event LogDarknodeDeregistered(address _darknodeID);\n\n    /// @notice Emitted when a refund has been made.\n    /// @param _owner The address that was refunded.\n    /// @param _amount The amount of REN that was refunded.\n    event LogDarknodeOwnerRefunded(address _owner, uint256 _amount);\n\n    /// @notice Emitted when a new epoch has begun.\n    event LogNewEpoch();\n\n    /// @notice Emitted when a constructor parameter has been updated.\n    event LogMinimumBondUpdated(uint256 previousMinimumBond, uint256 nextMinimumBond);\n    event LogMinimumPodSizeUpdated(uint256 previousMinimumPodSize, uint256 nextMinimumPodSize);\n    event LogMinimumEpochIntervalUpdated(uint256 previousMinimumEpochInterval, uint256 nextMinimumEpochInterval);\n    event LogSlasherUpdated(address previousSlasher, address nextSlasher);\n\n    /// @notice Only allow the owner that registered the darknode to pass.\n    modifier onlyDarknodeOwner(address _darknodeID) {\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"must be darknode owner\");\n        _;\n    }\n\n    /// @notice Only allow unregistered darknodes.\n    modifier onlyRefunded(address _darknodeID) {\n        require(isRefunded(_darknodeID), \"must be refunded or never registered\");\n        _;\n    }\n\n    /// @notice Only allow refundable darknodes.\n    modifier onlyRefundable(address _darknodeID) {\n        require(isRefundable(_darknodeID), \"must be deregistered for at least one epoch\");\n        _;\n    }\n\n    /// @notice Only allowed registered nodes without a pending deregistration to\n    /// deregister\n    modifier onlyDeregisterable(address _darknodeID) {\n        require(isDeregisterable(_darknodeID), \"must be deregisterable\");\n        _;\n    }\n\n    /// @notice Only allow the Slasher contract.\n    modifier onlySlasher() {\n        require(slasher == msg.sender, \"must be slasher\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _renAddress The address of the RepublicToken contract.\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\n    ///        Darknode.\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\n    /// @param _minimumEpochInterval The minimum number of blocks between\n    ///        epochs.\n    constructor(\n        string _VERSION,\n        RepublicToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochInterval\n    ) public {\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochInterval;\n        nextMinimumEpochInterval = minimumEpochInterval;\n\n        currentEpoch = Epoch({\n            epochhash: uint256(blockhash(block.number - 1)),\n            blocknumber: block.number\n        });\n        numDarknodes = 0;\n        numDarknodesNextEpoch = 0;\n        numDarknodesPreviousEpoch = 0;\n    }\n\n    /// @notice Register a darknode and transfer the bond to this contract. The\n    /// caller must provide a public encryption key for the darknode as well as\n    /// a bond in REN. The bond must be provided as an ERC20 allowance. The dark\n    /// node will remain pending registration until the next epoch. Only after\n    /// this period can the darknode be deregistered. The caller of this method\n    /// will be stored as the owner of the darknode.\n    ///\n    /// @param _darknodeID The darknode ID that will be registered.\n    /// @param _publicKey The public key of the darknode. It is stored to allow\n    ///        other darknodes and traders to encrypt messages to the trader.\n    /// @param _bond The bond that will be paid. It must be greater than, or\n    ///        equal to, the minimum bond.\n    function register(address _darknodeID, bytes _publicKey, uint256 _bond) external onlyRefunded(_darknodeID) {\n        // REN allowance\n        require(_bond >= minimumBond, \"insufficient bond\");\n        // require(ren.allowance(msg.sender, address(this)) >= _bond);\n        require(ren.transferFrom(msg.sender, address(this), _bond), \"bond transfer failed\");\n        ren.transfer(address(store), _bond);\n\n        // Flag this darknode for registration\n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            _bond,\n            _publicKey,\n            currentEpoch.blocknumber + minimumEpochInterval,\n            0\n        );\n\n        numDarknodesNextEpoch += 1;\n\n        // Emit an event.\n        emit LogDarknodeRegistered(_darknodeID, _bond);\n    }\n\n    /// @notice Deregister a darknode. The darknode will not be deregistered\n    /// until the end of the epoch. After another epoch, the bond can be\n    /// refunded by calling the refund method.\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\n    ///        of this method store.darknodeRegisteredAt(_darknodeID) must be\n    //         the owner of this darknode.\n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\n        // Flag the darknode for deregistration\n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocknumber + minimumEpochInterval);\n        numDarknodesNextEpoch -= 1;\n\n        // Emit an event\n        emit LogDarknodeDeregistered(_darknodeID);\n    }\n\n    /// @notice Progress the epoch if it is possible to do so. This captures\n    /// the current timestamp and current blockhash and overrides the current\n    /// epoch.\n    function epoch() external {\n        if (previousEpoch.blocknumber == 0) {\n            // The first epoch must be called by the owner of the contract\n            require(msg.sender == owner, \"not authorized (first epochs)\");\n        }\n\n        // Require that the epoch interval has passed\n        require(block.number >= currentEpoch.blocknumber + minimumEpochInterval, \"epoch interval has not passed\");\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        // Update the epoch hash and timestamp\n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocknumber: block.number\n        });\n\n        // Update the registry information\n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        // If any update functions have been called, update the values now\n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(slasher, nextSlasher);\n        }\n\n        // Emit an event\n        emit LogNewEpoch();\n    }\n\n    /// @notice Allows the contract owner to transfer ownership of the\n    /// DarknodeRegistryStore.\n    /// @param _newOwner The address to transfer the ownership to.\n    function transferStoreOwnership(address _newOwner) external onlyOwner {\n        store.transferOwnership(_newOwner);\n    }\n\n    /// @notice Allows the contract owner to update the minimum bond.\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\n    ///        a darknode.\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    /// @notice Allows the contract owner to update the minimum pod size.\n    /// @param _nextMinimumPodSize The minimum size of a pod.\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    /// @notice Allows the contract owner to update the minimum epoch interval.\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\n    /// address.\n    /// @param _slasher The new slasher address.\n    function updateSlasher(address _slasher) external onlyOwner {\n        nextSlasher = _slasher;\n    }\n\n    /// @notice Allow the DarknodeSlasher contract to slash half of a darknode's\n    /// bond and deregister it. The bond is distributed as follows:\n    ///   1/2 is kept by the guilty prover\n    ///   1/8 is rewarded to the first challenger\n    ///   1/8 is rewarded to the second challenger\n    ///   1/4 becomes unassigned\n    /// @param _prover The guilty prover whose bond is being slashed\n    /// @param _challenger1 The first of the two darknodes who submitted the challenge\n    /// @param _challenger2 The second of the two darknodes who submitted the challenge\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlySlasher\n    {\n        uint256 penalty = store.darknodeBond(_prover) / 2;\n        uint256 reward = penalty / 4;\n\n        // Slash the bond of the failed prover in half\n        store.updateDarknodeBond(_prover, penalty);\n\n        // If the darknode has not been deregistered then deregister it\n        if (isDeregisterable(_prover)) {\n            store.updateDarknodeDeregisteredAt(_prover, currentEpoch.blocknumber + minimumEpochInterval);\n            numDarknodesNextEpoch -= 1;\n            emit LogDarknodeDeregistered(_prover);\n        }\n\n        // Reward the challengers with less than the penalty so that it is not\n        // worth challenging yourself\n        ren.transfer(store.darknodeOwner(_challenger1), reward);\n        ren.transfer(store.darknodeOwner(_challenger2), reward);\n    }\n\n    /// @notice Refund the bond of a deregistered darknode. This will make the\n    /// darknode available for registration again. Anyone can call this function\n    /// but the bond will always be refunded to the darknode owner.\n    ///\n    /// @param _darknodeID The darknode ID that will be refunded. The caller\n    ///        of this method must be the owner of this darknode.\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\n\n        // Remember the bond amount\n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        // Erase the darknode from the registry\n        store.removeDarknode(_darknodeID);\n\n        // Refund the owner by transferring REN\n        ren.transfer(darknodeOwner, amount);\n\n        // Emit an event.\n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\n    }\n\n    /// @notice Retrieves the address of the account that registered a darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\n    function getDarknodeOwner(address _darknodeID) external view returns (address) {\n        return store.darknodeOwner(_darknodeID);\n    }\n\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    /// @notice Retrieves the encryption public key of the darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes) {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    /// @notice Retrieves a list of darknodes which are registered for the\n    /// current epoch.\n    /// @param _start A darknode ID used as an offset for the list. If _start is\n    ///        0x0, the first dark node will be used. _start won't be\n    ///        included it is not registered for the epoch.\n    /// @param _count The number of darknodes to retrieve starting from _start.\n    ///        If _count is 0, all of the darknodes from _start are\n    ///        retrieved. If _count is more than the remaining number of\n    ///        registered darknodes, the rest of the list will contain\n    ///        0x0s.\n    function getDarknodes(address _start, uint256 _count) external view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    /// @notice Retrieves a list of darknodes which were registered for the\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    /// @notice Returns whether a darknode is scheduled to become registered\n    /// at next epoch.\n    /// @param _darknodeID The ID of the darknode to return\n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the pending deregistered state. In\n    /// this state a darknode is still considered registered.\n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the deregistered state.\n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode can be deregistered. This is true if the\n    /// darknodes is in the registered state and has not attempted to\n    /// deregister yet.\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        // The Darknode is currently in the registered state and has not been\n        // transitioned to the pending deregistration, or deregistered, state\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is in the refunded state. This is true\n    /// for darknodes that have never been registered, or darknodes that have\n    /// been deregistered and refunded.\n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\n    /// that have been in the deregistered state for one full epoch.\n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the registered state.\n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state last epoch.\n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state for a given\n    /// epoch.\n    /// @param _darknodeID The ID of the darknode\n    /// @param _epoch One of currentEpoch, previousEpoch\n    function isRegisteredInEpoch(address _darknodeID, Epoch _epoch) private view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;\n        // The Darknode has been registered and has not yet been deregistered,\n        // although it might be pending deregistration\n        return registered && notDeregistered;\n    }\n\n    /// @notice Returns a list of darknodes registered for either the current\n    /// or the previous epoch. See `getDarknodes` for documentation on the\n    /// parameters `_start` and `_count`.\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\n    ///        the current epoch.\n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[]) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        // Begin with the first node in the list\n        uint256 n = 0;\n        address next = _start;\n        if (next == 0x0) {\n            next = store.begin();\n        }\n\n        // Iterate until all registered Darknodes have been collected\n        while (n < count) {\n            if (next == 0x0) {\n                break;\n            }\n            // Only include Darknodes that are currently registered\n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n}\n\n/// @notice The BrokerVerifier interface defines the functions that a settlement\n/// layer's broker verifier contract must implement.\ninterface BrokerVerifier {\n\n    /// @notice The function signature that will be called when a trader opens\n    /// an order.\n    ///\n    /// @param _trader The trader requesting the withdrawal.\n    /// @param _signature The 65-byte signature from the broker.\n    /// @param _orderID The 32-byte order ID.\n    function verifyOpenSignature(\n        address _trader,\n        bytes _signature,\n        bytes32 _orderID\n    ) external returns (bool);\n}\n\n/// @notice The Settlement interface defines the functions that a settlement\n/// layer must implement.\n/// Docs: https://github.com/republicprotocol/republic-sol/blob/nightly/docs/05-settlement.md\ninterface Settlement {\n    function submitOrder(\n        bytes _details,\n        uint64 _settlementID,\n        uint64 _tokens,\n        uint256 _price,\n        uint256 _volume,\n        uint256 _minimumVolume\n    ) external;\n\n    function submissionGasPriceLimit() external view returns (uint256);\n\n    function settle(\n        bytes32 _buyID,\n        bytes32 _sellID\n    ) external;\n\n    /// @notice orderStatus should return the status of the order, which should\n    /// be:\n    ///     0  - Order not seen before\n    ///     1  - Order details submitted\n    ///     >1 - Order settled, or settlement no longer possible\n    function orderStatus(bytes32 _orderID) external view returns (uint8);\n}\n\n/// @notice SettlementRegistry allows a Settlement layer to register the\n/// contracts used for match settlement and for broker signature verification.\ncontract SettlementRegistry is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    struct SettlementDetails {\n        bool registered;\n        Settlement settlementContract;\n        BrokerVerifier brokerVerifierContract;\n    }\n\n    // Settlement IDs are 64-bit unsigned numbers\n    mapping(uint64 => SettlementDetails) public settlementDetails;\n\n    // Events\n    event LogSettlementRegistered(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n    event LogSettlementUpdated(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n    event LogSettlementDeregistered(uint64 settlementID);\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(string _VERSION) public {\n        VERSION = _VERSION;\n    }\n\n    /// @notice Returns the settlement contract of a settlement layer.\n    function settlementRegistration(uint64 _settlementID) external view returns (bool) {\n        return settlementDetails[_settlementID].registered;\n    }\n\n    /// @notice Returns the settlement contract of a settlement layer.\n    function settlementContract(uint64 _settlementID) external view returns (Settlement) {\n        return settlementDetails[_settlementID].settlementContract;\n    }\n\n    /// @notice Returns the broker verifier contract of a settlement layer.\n    function brokerVerifierContract(uint64 _settlementID) external view returns (BrokerVerifier) {\n        return settlementDetails[_settlementID].brokerVerifierContract;\n    }\n\n    /// @param _settlementID A unique 64-bit settlement identifier.\n    /// @param _settlementContract The address to use for settling matches.\n    /// @param _brokerVerifierContract The decimals to use for verifying\n    ///        broker signatures.\n    function registerSettlement(uint64 _settlementID, Settlement _settlementContract, BrokerVerifier _brokerVerifierContract) public onlyOwner {\n        bool alreadyRegistered = settlementDetails[_settlementID].registered;\n        \n        settlementDetails[_settlementID] = SettlementDetails({\n            registered: true,\n            settlementContract: _settlementContract,\n            brokerVerifierContract: _brokerVerifierContract\n        });\n\n        if (alreadyRegistered) {\n            emit LogSettlementUpdated(_settlementID, _settlementContract, _brokerVerifierContract);\n        } else {\n            emit LogSettlementRegistered(_settlementID, _settlementContract, _brokerVerifierContract);\n        }\n    }\n\n    /// @notice Deregisteres a settlement layer, clearing the details.\n    /// @param _settlementID The unique 64-bit settlement identifier.\n    function deregisterSettlement(uint64 _settlementID) external onlyOwner {\n        require(settlementDetails[_settlementID].registered, \"not registered\");\n\n        delete settlementDetails[_settlementID];\n\n        emit LogSettlementDeregistered(_settlementID);\n    }\n}\n\n/**\n * @title Eliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n  }\n}\n\nlibrary Utils {\n\n    /**\n     * @notice Converts a number to its string/bytes representation\n     *\n     * @param _v the uint to convert\n     */\n    function uintToBytes(uint256 _v) internal pure returns (bytes) {\n        uint256 v = _v;\n        if (v == 0) {\n            return \"0\";\n        }\n\n        uint256 digits = 0;\n        uint256 v2 = v;\n        while (v2 > 0) {\n            v2 /= 10;\n            digits += 1;\n        }\n\n        bytes memory result = new bytes(digits);\n\n        for (uint256 i = 0; i < digits; i++) {\n            result[digits - i - 1] = bytes1((v % 10) + 48);\n            v /= 10;\n        }\n\n        return result;\n    }\n\n    /**\n     * @notice Retrieves the address from a signature\n     *\n     * @param _hash the message that was signed (any length of bytes)\n     * @param _signature the signature (65 bytes)\n     */\n    function addr(bytes _hash, bytes _signature) internal pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\n        bytes memory encoded = abi.encodePacked(prefix, uintToBytes(_hash.length), _hash);\n        bytes32 prefixedHash = keccak256(encoded);\n\n        return ECRecovery.recover(prefixedHash, _signature);\n    }\n\n}\n\n/// @notice The Orderbook contract stores the state and priority of orders and\n/// allows the Darknodes to easily reach consensus. Eventually, this contract\n/// will only store a subset of order states, such as cancellation, to improve\n/// the throughput of orders.\ncontract Orderbook is Ownable {\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice OrderState enumerates the possible states of an order. All\n    /// orders default to the Undefined state.\n    enum OrderState {Undefined, Open, Confirmed, Canceled}\n\n    /// @notice Order stores a subset of the public data associated with an order.\n    struct Order {\n        OrderState state;     // State of the order\n        address trader;       // Trader that owns the order\n        address confirmer;    // Darknode that confirmed the order in a match\n        uint64 settlementID;  // The settlement that signed the order opening\n        uint256 priority;     // Logical time priority of this order\n        uint256 blockNumber;  // Block number of the most recent state change\n        bytes32 matchedOrder; // Order confirmed in a match with this order\n    }\n\n    RepublicToken public ren;\n    DarknodeRegistry public darknodeRegistry;\n    SettlementRegistry public settlementRegistry;\n\n    bytes32[] private orderbook;\n\n    // Order details are exposed through directly accessing this mapping, or\n    // through the getter functions below for each of the order's fields.\n    mapping(bytes32 => Order) public orders;\n\n    event LogFeeUpdated(uint256 previousFee, uint256 nextFee);\n    event LogDarknodeRegistryUpdated(DarknodeRegistry previousDarknodeRegistry, DarknodeRegistry nextDarknodeRegistry);\n\n    /// @notice Only allow registered dark nodes.\n    modifier onlyDarknode(address _sender) {\n        require(darknodeRegistry.isRegistered(address(_sender)), \"must be registered darknode\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _renAddress The address of the RepublicToken contract.\n    /// @param _darknodeRegistry The address of the DarknodeRegistry contract.\n    /// @param _settlementRegistry The address of the SettlementRegistry\n    ///        contract.\n    constructor(\n        string _VERSION,\n        RepublicToken _renAddress,\n        DarknodeRegistry _darknodeRegistry,\n        SettlementRegistry _settlementRegistry\n    ) public {\n        VERSION = _VERSION;\n        ren = _renAddress;\n        darknodeRegistry = _darknodeRegistry;\n        settlementRegistry = _settlementRegistry;\n    }\n\n    /// @notice Allows the owner to update the address of the DarknodeRegistry\n    /// contract.\n    function updateDarknodeRegistry(DarknodeRegistry _newDarknodeRegistry) external onlyOwner {\n        emit LogDarknodeRegistryUpdated(darknodeRegistry, _newDarknodeRegistry);\n        darknodeRegistry = _newDarknodeRegistry;\n    }\n\n    /// @notice Open an order in the orderbook. The order must be in the\n    /// Undefined state.\n    ///\n    /// @param _signature Signature of the message that defines the trader. The\n    ///        message is \"Republic Protocol: open: {orderId}\".\n    /// @param _orderID The hash of the order.\n    function openOrder(uint64 _settlementID, bytes _signature, bytes32 _orderID) external {\n        require(orders[_orderID].state == OrderState.Undefined, \"invalid order status\");\n\n        address trader = msg.sender;\n\n        // Verify the order signature\n        require(settlementRegistry.settlementRegistration(_settlementID), \"settlement not registered\");\n        BrokerVerifier brokerVerifier = settlementRegistry.brokerVerifierContract(_settlementID);\n        require(brokerVerifier.verifyOpenSignature(trader, _signature, _orderID), \"invalid broker signature\");\n\n        orders[_orderID] = Order({\n            state: OrderState.Open,\n            trader: trader,\n            confirmer: 0x0,\n            settlementID: _settlementID,\n            priority: orderbook.length + 1,\n            blockNumber: block.number,\n            matchedOrder: 0x0\n        });\n\n        orderbook.push(_orderID);\n    }\n\n    /// @notice Confirm an order match between orders. The confirmer must be a\n    /// registered Darknode and the orders must be in the Open state. A\n    /// malicious confirmation by a Darknode will result in a bond slash of the\n    /// Darknode.\n    ///\n    /// @param _orderID The hash of the order.\n    /// @param _matchedOrderID The hashes of the matching order.\n    function confirmOrder(bytes32 _orderID, bytes32 _matchedOrderID) external onlyDarknode(msg.sender) {\n        require(orders[_orderID].state == OrderState.Open, \"invalid order status\");\n        require(orders[_matchedOrderID].state == OrderState.Open, \"invalid order status\");\n\n        orders[_orderID].state = OrderState.Confirmed;\n        orders[_orderID].confirmer = msg.sender;\n        orders[_orderID].matchedOrder = _matchedOrderID;\n        orders[_orderID].blockNumber = block.number;\n\n        orders[_matchedOrderID].state = OrderState.Confirmed;\n        orders[_matchedOrderID].confirmer = msg.sender;\n        orders[_matchedOrderID].matchedOrder = _orderID;\n        orders[_matchedOrderID].blockNumber = block.number;\n    }\n\n    /// @notice Cancel an open order in the orderbook. An order can be cancelled\n    /// by the trader who opened the order, or by the broker verifier contract.\n    /// This allows the settlement layer to implement their own logic for\n    /// cancelling orders without trader interaction (e.g. to ban a trader from\n    /// a specific darkpool, or to use multiple order-matching platforms)\n    ///\n    /// @param _orderID The hash of the order.\n    function cancelOrder(bytes32 _orderID) external {\n        require(orders[_orderID].state == OrderState.Open, \"invalid order state\");\n\n        // Require the msg.sender to be the trader or the broker verifier\n        address brokerVerifier = address(settlementRegistry.brokerVerifierContract(orders[_orderID].settlementID));\n        require(msg.sender == orders[_orderID].trader || msg.sender == brokerVerifier, \"not authorized\");\n\n        orders[_orderID].state = OrderState.Canceled;\n        orders[_orderID].blockNumber = block.number;\n    }\n\n    /// @notice returns status of the given orderID.\n    function orderState(bytes32 _orderID) external view returns (OrderState) {\n        return orders[_orderID].state;\n    }\n\n    /// @notice returns a list of matched orders to the given orderID.\n    function orderMatch(bytes32 _orderID) external view returns (bytes32) {\n        return orders[_orderID].matchedOrder;\n    }\n\n    /// @notice returns the priority of the given orderID.\n    /// The priority is the index of the order in the orderbook.\n    function orderPriority(bytes32 _orderID) external view returns (uint256) {\n        return orders[_orderID].priority;\n    }\n\n    /// @notice returns the trader of the given orderID.\n    /// Trader is the one who signs the message and does the actual trading.\n    function orderTrader(bytes32 _orderID) external view returns (address) {\n        return orders[_orderID].trader;\n    }\n\n    /// @notice returns the darknode address which confirms the given orderID.\n    function orderConfirmer(bytes32 _orderID) external view returns (address) {\n        return orders[_orderID].confirmer;\n    }\n\n    /// @notice returns the block number when the order being last modified.\n    function orderBlockNumber(bytes32 _orderID) external view returns (uint256) {\n        return orders[_orderID].blockNumber;\n    }\n\n    /// @notice returns the block depth of the orderId\n    function orderDepth(bytes32 _orderID) external view returns (uint256) {\n        if (orders[_orderID].blockNumber == 0) {\n            return 0;\n        }\n        return (block.number - orders[_orderID].blockNumber);\n    }\n\n    /// @notice returns the number of orders in the orderbook\n    function ordersCount() external view returns (uint256) {\n        return orderbook.length;\n    }\n\n    /// @notice returns order details of the orders starting from the offset.\n    function getOrders(uint256 _offset, uint256 _limit) external view returns (bytes32[], address[], uint8[]) {\n        if (_offset >= orderbook.length) {\n            return;\n        }\n\n        // If the provided limit is more than the number of orders after the offset,\n        // decrease the limit\n        uint256 limit = _limit;\n        if (_offset + limit > orderbook.length) {\n            limit = orderbook.length - _offset;\n        }\n\n        bytes32[] memory orderIDs = new bytes32[](limit);\n        address[] memory traderAddresses = new address[](limit);\n        uint8[] memory states = new uint8[](limit);\n\n        for (uint256 i = 0; i < limit; i++) {\n            bytes32 order = orderbook[i + _offset];\n            orderIDs[i] = order;\n            traderAddresses[i] = orders[order].trader;\n            states[i] = uint8(orders[order].state);\n        }\n\n        return (orderIDs, traderAddresses, states);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620014f1380380620014f1833981016040908152815160208084015192840151606085015160008054600160a060020a03191633179055929094018051909492916200006791600191870190620000ac565b5060028054600160a060020a03948516600160a060020a0319918216179091556003805493851693821693909317909255600480549190931691161790555062000151565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ef57805160ff19168380011785556200011f565b828001600101855582156200011f579182015b828111156200011f57825182559160200191906001019062000102565b506200012d92915062000131565b5090565b6200014e91905b808211156200012d576000815560010162000138565b90565b61139080620001616000396000f30060806040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631107c3f781146101215780632a0401f01461015557806335daa73114610172578063715018a6146101995780637489ec23146101ae57806389895d53146101c65780638a9b4067146101de5780638da5cb5b146101f35780638f72fc77146102085780639c3f1e90146103015780639e45e0d01461037c578063a188fcb814610391578063a1ce7e03146103a9578063aab14d04146103da578063aaff096d14610416578063af3e8a4014610437578063b1a080101461044f578063b248e4e114610467578063d09812e11461047f578063f2fde38b14610494578063ffa1ad74146104b5575b600080fd5b34801561012d57600080fd5b5061013960043561053f565b60408051600160a060020a039092168252519081900360200190f35b34801561016157600080fd5b50610170600435602435610560565b005b34801561017e57600080fd5b506101876107b1565b60408051918252519081900360200190f35b3480156101a557600080fd5b506101706107b7565b3480156101ba57600080fd5b50610170600435610823565b3480156101d257600080fd5b50610187600435610a0b565b3480156101ea57600080fd5b50610139610a20565b3480156101ff57600080fd5b50610139610a2f565b34801561021457600080fd5b50610223600435602435610a3e565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561026b578181015183820152602001610253565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156102aa578181015183820152602001610292565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156102e95781810151838201526020016102d1565b50505050905001965050505050505060405180910390f35b34801561030d57600080fd5b50610319600435610be8565b6040518088600381111561032957fe5b60ff168152600160a060020a0397881660208201529590961660408087019190915267ffffffffffffffff9094166060860152608085019290925260a084015260c0830152519081900360e00192509050f35b34801561038857600080fd5b50610139610c4e565b34801561039d57600080fd5b50610187600435610c5d565b3480156103b557600080fd5b506101706004803567ffffffffffffffff169060248035908101910135604435610c95565b3480156103e657600080fd5b506103f260043561113b565b6040518082600381111561040257fe5b60ff16815260200191505060405180910390f35b34801561042257600080fd5b50610170600160a060020a0360043516611150565b34801561044357600080fd5b506101876004356111de565b34801561045b57600080fd5b506101396004356111f3565b34801561047357600080fd5b50610187600435611213565b34801561048b57600080fd5b50610139611228565b3480156104a057600080fd5b50610170600160a060020a0360043516611237565b3480156104c157600080fd5b506104ca61125a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105045781810151838201526020016104ec565b50505050905090810190601f1680156105315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600081815260066020526040902060010154600160a060020a03165b919050565b600354604080517fc3c5a547000000000000000000000000000000000000000000000000000000008152336004820181905291519192600160a060020a03169163c3c5a547916024808201926020929091908290030181600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506040513d60208110156105f257600080fd5b5051151561064a576040805160e560020a62461bcd02815260206004820152601b60248201527f6d7573742062652072656769737465726564206461726b6e6f64650000000000604482015290519081900360640190fd5b600160008481526006602052604090205460ff16600381111561066957fe5b146106be576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c6964206f7264657220737461747573000000000000000000000000604482015290519081900360640190fd5b600160008381526006602052604090205460ff1660038111156106dd57fe5b14610732576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c6964206f7264657220737461747573000000000000000000000000604482015290519081900360640190fd5b50600082815260066020526040808220805460ff1990811660029081178355600180840180543373ffffffffffffffffffffffffffffffffffffffff19918216811790925560048087018a9055436003978801819055998952969097208054909416909217835582018054909516179093559082019390935590910155565b60055490565b600054600160a060020a031633146107ce57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000600160008381526006602052604090205460ff16600381111561084457fe5b14610899576040805160e560020a62461bcd02815260206004820152601360248201527f696e76616c6964206f7264657220737461746500000000000000000000000000604482015290519081900360640190fd5b6004805460008481526006602090815260408083206001015481517fa6065c960000000000000000000000000000000000000000000000000000000081527401000000000000000000000000000000000000000090910467ffffffffffffffff169581019590955251600160a060020a039093169363a6065c969360248083019491928390030190829087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b505050506040513d602081101561095c57600080fd5b50516000838152600660205260409020549091506101009004600160a060020a0316331480610993575033600160a060020a038216145b15156109e9576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b506000908152600660205260409020805460ff19166003908117825543910155565b60009081526006602052604090206003015490565b600254600160a060020a031681565b600054600160a060020a031681565b6060806060600060608060606000806005805490508b101515610a6057610bdb565b6005548a96508b87011115610a78576005548b900395505b85604051908082528060200260200182016040528015610aa2578160200160208202803883390190505b50945085604051908082528060200260200182016040528015610acf578160200160208202803883390190505b50935085604051908082528060200260200182016040528015610afc578160200160208202803883390190505b509250600091505b85821015610bd15760058054838d01908110610b1c57fe5b90600052602060002001549050808583815181101515610b3857fe5b6020908102919091018101919091526000828152600690915260409020548451610100909104600160a060020a031690859084908110610b7457fe5b600160a060020a03909216602092830290910182015260008281526006909152604090205460ff166003811115610ba757fe5b8383815181101515610bb557fe5b60ff909216602092830290910190910152600190910190610b04565b8484849850985098505b5050505050509250925092565b6006602052600090815260409020805460018201546002830154600384015460049094015460ff841694600160a060020a0361010090950485169484169367ffffffffffffffff7401000000000000000000000000000000000000000090910416929187565b600354600160a060020a031681565b6000818152600660205260408120600301541515610c7d5750600061055b565b50600090815260066020526040902060030154430390565b6000808060008481526006602052604090205460ff166003811115610cb657fe5b14610d0b576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c6964206f7264657220737461747573000000000000000000000000604482015290519081900360640190fd5b60048054604080517ff8f9be3600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a169381019390935251339450600160a060020a039091169163f8f9be369160248083019260209291908290030181600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050506040513d6020811015610da957600080fd5b50511515610e01576040805160e560020a62461bcd02815260206004820152601960248201527f736574746c656d656e74206e6f74207265676973746572656400000000000000604482015290519081900360640190fd5b60048054604080517fa6065c9600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a169381019390935251600160a060020a039091169163a6065c969160248083019260209291908290030181600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d6020811015610e9c57600080fd5b50516040517f472e1910000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830190815260448301879052606060248401908152606484018990529394509084169263472e19109286928a928a928a929190608401858580828437820191505095505050505050602060405180830381600087803b158015610f3357600080fd5b505af1158015610f47573d6000803e3d6000fd5b505050506040513d6020811015610f5d57600080fd5b50511515610fb5576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c69642062726f6b6572207369676e61747572650000000000000000604482015290519081900360640190fd5b6040805160e0810182526001808252600160a060020a038516602080840191909152600083850181905267ffffffffffffffff8b166060850152600554830160808501524360a085015260c0840181905287815260069091529290922081518154929391929091839160ff19169083600381111561102f57fe5b021790555060208201518154600160a060020a039182166101000274ffffffffffffffffffffffffffffffffffffffff0019909116178255604083015160018084018054606087015167ffffffffffffffff1674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9490951673ffffffffffffffffffffffffffffffffffffffff1990911617929092169290921790556080830151600283015560a0830151600383015560c0909201516004909101556005805491820181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001929092555050505050565b60009081526006602052604090205460ff1690565b600054600160a060020a0316331461116757600080fd5b60035460408051600160a060020a039283168152918316602083015280517ff9f6dd5c784f63cc27c1079c73574a73485a6c2e7f7e2181c5eb2be8c693cfb79281900390910190a16003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60009081526006602052604090206004015490565b6000908152600660205260409020546101009004600160a060020a031690565b60009081526006602052604090206002015490565b600454600160a060020a031681565b600054600160a060020a0316331461124e57600080fd5b611257816112e7565b50565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156112df5780601f106112b4576101008083540402835291602001916112df565b820191906000526020600020905b8154815290600101906020018083116112c257829003601f168201915b505050505081565b600160a060020a03811615156112fc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058208b46a2bab2e2b6a785006632716bf3b77d037ec2efa43ecc423884670681d95b0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000021c482f153d0317fe85c60be1f7fa079019fcebd0000000000000000000000003799006a87fde3ccfc7666b3e6553b03ed341c2f000000000000000000000000119da7a8500ade0766f758d934808179dc551036000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000021c482f153d0317fe85c60be1f7fa079019fcebd0000000000000000000000003799006a87fde3ccfc7666b3e6553b03ed341c2f000000000000000000000000119da7a8500ade0766f758d934808179dc551036000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000"
}