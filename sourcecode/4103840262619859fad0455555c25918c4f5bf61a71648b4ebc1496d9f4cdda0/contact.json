{
  "address": "0x263679bcbfd9b051629c1a56472ba9377e9175b4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DIC Resort Token",
  "contractName": "DicToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\npragma solidity ^0.5.1;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract AdminRole {\n    using Roles for Roles.Role;\n\n    event AdminAdded(address indexed account);\n    event AdminRemoved(address indexed account);\n\n    Roles.Role private _admins;\n\n    constructor () internal {\n        _addAdmin(msg.sender);\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return _admins.has(account);\n    }\n\n    function addAdmin(address account) public onlyAdmin {\n        _addAdmin(account);\n    }\n\n    function renounceAdmin() public {\n        _removeAdmin(msg.sender);\n    }\n\n    function _addAdmin(address account) internal {\n        _admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    function _removeAdmin(address account) internal {\n        _admins.remove(account);\n        emit AdminRemoved(account);\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is ERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract ERC20Traceable is ERC20Detailed {\n    address[] internal holdersSet;\n    mapping(address => uint256) internal holdersIndices;\n\n    function _traceRecipient(address to) internal {\n        if(holdersIndices[to] == 0) {\n            holdersSet.push(to);\n            holdersIndices[to] = holdersSet.length;\n        }\n    }\n\n    function _traceSender(address from, uint256 value) internal {\n        if(balanceOf(from) == value) {\n            if(holdersIndices[from] != 0) {\n                uint256 senderIndex = holdersIndices[from];\n                if(senderIndex < holdersSet.length) {\n                    address lastHolder = holdersSet[holdersSet.length - 1];\n                    uint256 lastHolderIndex = holdersIndices[lastHolder];\n                    holdersSet[senderIndex - 1] = holdersSet[lastHolderIndex - 1];\n                }\n                delete holdersSet[holdersSet.length - 1];\n                holdersSet.length = holdersSet.length - 1;\n                holdersIndices[from] = 0;\n            }\n\n        }\n    }\n\n    function _trace(address from, address to, uint256 value) internal {\n        _traceRecipient(to);\n        if(from != address(0) && from != to) {\n            _traceSender(from, value);\n        }\n    }\n\n    function _mint(address account, uint256 value) internal {\n        _traceRecipient(account);\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        _traceSender(account, value);\n        super._burn(account, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        _traceSender(account, value);\n        super._burn(account, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _trace(from, to, value);\n        return super.transferFrom(from, to, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _trace(msg.sender, to, value);\n        return super.transfer(to, value);\n    }\n\n    function getHolders() public view returns (address[] memory) {\n        return holdersSet;\n    }\n}\n\n/**\n * @title Whitelist ERC20 token\n *\n * @dev Whitelisted-only token holders.\n */\ncontract WhitelistToken is ERC20Traceable, AdminRole {\n    mapping(address => bool) public whitelisted;\n\n    function _mint(address account, uint256 value) internal {\n        require(whitelisted[account]);\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(whitelisted[account]);\n        super._burn(account, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        require(whitelisted[account]);\n        super._burn(account, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(whitelisted[to]);\n        return super.transferFrom(from, to, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(whitelisted[to]);\n        return super.transfer(to, value);\n    }\n\n    function setWhitelisted(address _address, bool _whitelisted) public onlyAdmin {\n        whitelisted[_address] = _whitelisted;\n    }\n}\n\n/**\n * @title Blacklist ERC20 token\n *\n * @dev Any address can be a token holder, unless blacklisted.\n */\ncontract BlacklistToken is ERC20Traceable, AdminRole {\n    mapping(address => bool) public blacklisted;\n\n    function _mint(address account, uint256 value) internal {\n        require(!blacklisted[account]);\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(!blacklisted[account]);\n        super._burn(account, value);\n    }\n\n    function _burnFrom(address account, uint256 value) internal {\n        require(!blacklisted[account]);\n        super._burn(account, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(!blacklisted[to]);\n        return super.transferFrom(from, to, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(!blacklisted[to]);\n        return super.transfer(to, value);\n    }\n\n    function setBlacklisted(address _address, bool _blacklisted) public onlyAdmin {\n        blacklisted[_address] = _blacklisted;\n    }\n}\n\n\ncontract DicToken is WhitelistToken {\n    /// initial supply 35 million DIC\n    uint256 public INITIAL_SUPPLY;\n\n    address public saleTokensAddress;\n    address public marketingTokensAddress;\n    address public managementTokensAddress;\n    address public affiliateTokensAddress;\n    address public foundersTokensAddress;\n\n    bool public tradingEnabled;\n\n    constructor(address _saleTokensAddress,\n                address _marketingTokensAddress, address _managementTokensAddress, address _affiliateTokensAddress, address _foundersTokensAddress)\n                public ERC20Detailed(\"DIC Token\", \"DIC\", 18) {\n        require(_saleTokensAddress != address(0));\n        require(_marketingTokensAddress != address(0));\n        require(_managementTokensAddress != address(0));\n        require(_affiliateTokensAddress != address(0));\n        require(_foundersTokensAddress != address(0));\n\n        INITIAL_SUPPLY = 35000000 * 10**uint256(decimals());\n\n        saleTokensAddress = _saleTokensAddress;\n        marketingTokensAddress = _marketingTokensAddress;\n        managementTokensAddress = _managementTokensAddress;\n        affiliateTokensAddress = _affiliateTokensAddress;\n        foundersTokensAddress = _foundersTokensAddress;\n\n        setWhitelisted(saleTokensAddress, true);\n        setWhitelisted(marketingTokensAddress, true);\n        setWhitelisted(managementTokensAddress, true);\n        setWhitelisted(affiliateTokensAddress, true);\n        setWhitelisted(foundersTokensAddress, true);\n\n        /*\n        Token Distribution\t            %\t    DIC Tokens\n        Pre PTO Pre-Sale\t            31%\t    10,850,000\n        Private Token Offering\t        52%\t    18,200,000\n        Marketing & Bounty Programme\t1%\t    350,000\n        Advisors & Partners\t            0%\t    0\n        Management\t                    5%\t    1,750,000\n        Affiliate Programme\t            1%\t    350,000\n        Airdrop Programme\t            0%\t    0\n        Founders / Shareholders\t        10%\t    3,500,000\n        Total\t                        100%\t35,000,000\n        */\n\n        _mint(saleTokensAddress, 10850000 * (10 ** uint256(decimals()))); // Pre PTO Pre-Sale - 10,850,000 DIC\n        _mint(saleTokensAddress, 18200000 * (10 ** uint256(decimals()))); // Private Token Offering - 18,200,000 DIC\n        _mint(marketingTokensAddress, 350000 * (10 ** uint256(decimals()))); // Marketing & Bounty Programme - 350,000 DIC\n        _mint(managementTokensAddress, 1750000 * (10 ** uint256(decimals()))); // Management - 1,750,000 DIC\n        _mint(affiliateTokensAddress, 350000 * (10 ** uint256(decimals()))); // Affiliate Programme - 350,000 DIC\n        _mint(foundersTokensAddress, 3500000 * (10 ** uint256(decimals()))); // Founders / Shareholders - 3,500,000 DIC\n\n        require(totalSupply() == INITIAL_SUPPLY);\n    }\n\n    function setTradingEnabled(bool _enabled) external onlyAdmin {\n        tradingEnabled = _enabled;\n    }\n\n    function distribute(address to, uint256 value) external returns (bool) {\n        require(msg.sender == saleTokensAddress || msg.sender == marketingTokensAddress);\n        setWhitelisted(to, true);\n        return super.transfer(to, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        if(!tradingEnabled && !isAdmin(msg.sender)) return false;\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        if(!tradingEnabled) return false;\n        return super.transferFrom(from, to, value);\n    }\n\n    function transferBatch(address[] calldata _recipients, uint256[] calldata _amounts) external {\n        require(_recipients.length > 0);\n        require(_recipients.length == _amounts.length);\n\n        for(uint8 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]));\n        }\n    }\n\n    function mint(address account, uint256 amount) external onlyAdmin {\n        super._mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        super._burn(account, amount);\n    }\n\n    /// @dev Admin-only function to recover any tokens mistakenly sent to this contract\n    function recoverERC20Tokens(address _contractAddress) onlyAdmin external {\n        IERC20 erc20Token = IERC20(_contractAddress);\n        if(erc20Token.balanceOf(address(this)) > 0) {\n            require(erc20Token.transfer(msg.sender, erc20Token.balanceOf(address(this))));\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managementTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_saleTokensAddress\",\"type\":\"address\"},{\"name\":\"_marketingTokensAddress\",\"type\":\"address\"},{\"name\":\"_managementTokensAddress\",\"type\":\"address\"},{\"name\":\"_affiliateTokensAddress\",\"type\":\"address\"},{\"name\":\"_foundersTokensAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000a25f57e49aef54bff2069a8d8a91d90ceb957ff2000000000000000000000000fbde7609fc5915cc346b018cfb6e0eb0b64468f1000000000000000000000000fbde7609fc5915cc346b018cfb6e0eb0b64468f1000000000000000000000000fbde7609fc5915cc346b018cfb6e0eb0b64468f1000000000000000000000000fbde7609fc5915cc346b018cfb6e0eb0b64468f1"
}