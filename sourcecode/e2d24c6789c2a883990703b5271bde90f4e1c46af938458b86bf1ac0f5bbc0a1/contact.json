{
  "address": "0xfb2397daa1851ba306cee0bcad859959f63aa4f3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoVideoGamesToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-26\n*/\n\npragma solidity ^0.4.18;\n// inspired by\n// https://github.com/axiomzen/cryptokitties-bounty/blob/master/contracts/KittyAccessControl.sol\n\ncontract AccessControl {\n  /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles\n  address public ceoAddress;\n  address public cooAddress;\n\n  /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n  bool public paused = false;\n\n  /// @dev The AccessControl constructor sets the original C roles of the contract to the sender account\n  function AccessControl() public {\n    ceoAddress = msg.sender;\n    cooAddress = msg.sender;\n  }\n\n  /// @dev Access modifier for CEO-only functionality\n  modifier onlyCEO() {\n    require(msg.sender == ceoAddress);\n    _;\n  }\n\n  /// @dev Access modifier for COO-only functionality\n  modifier onlyCOO() {\n    require(msg.sender == cooAddress);\n    _;\n  }\n\n  /// @dev Access modifier for any CLevel functionality\n  modifier onlyCLevel() {\n    require(msg.sender == ceoAddress || msg.sender == cooAddress);\n    _;\n  }\n\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO\n  /// @param _newCEO The address of the new CEO\n  function setCEO(address _newCEO) public onlyCEO {\n    require(_newCEO != address(0));\n    ceoAddress = _newCEO;\n  }\n\n  /// @dev Assigns a new address to act as the COO. Only available to the current CEO\n  /// @param _newCOO The address of the new COO\n  function setCOO(address _newCOO) public onlyCEO {\n    require(_newCOO != address(0));\n    cooAddress = _newCOO;\n  }\n\n  /// @dev Modifier to allow actions only when the contract IS NOT paused\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /// @dev Modifier to allow actions only when the contract IS paused\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /// @dev Pause the smart contract. Only can be called by the CEO\n  function pause() public onlyCEO whenNotPaused {\n     paused = true;\n  }\n\n  /// @dev Unpauses the smart contract. Only can be called by the CEO\n  function unpause() public onlyCEO whenPaused {\n    paused = false;\n  }\n}\n\n\n// https://github.com/dharmaprotocol/NonFungibleToken/blob/master/contracts/ERC721.sol\n// https://github.com/dharmaprotocol/NonFungibleToken/blob/master/contracts/DetailedERC721.sol\n\n/**\n * Interface for required functionality in the ERC721 standard\n * for non-fungible tokens.\n *\n * Author: Nadav Hollander (nadav at dharma.io)\n */\ncontract ERC721 {\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// For querying totalSupply of token.\n    function totalSupply() public view returns (uint256 _totalSupply);\n\n    /// For querying balance of a particular account.\n    /// @param _owner The address for balance query.\n    /// @dev Required for ERC-721 compliance.\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n\n    /// For querying owner of token.\n    /// @param _tokenId The tokenID for owner inquiry.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom()\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(address _to, uint256 _tokenId) public;\n\n    // NOT IMPLEMENTED\n    // function getApproved(uint256 _tokenId) public view returns (address _approved);\n\n    /// Third-party initiates transfer of token from address _from to address _to.\n    /// @param _from The address for the token to be transferred from.\n    /// @param _to The address for the token to be transferred to.\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    /// Owner initates the transfer of the token to another account.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the token to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(address _to, uint256 _tokenId) public;\n\n    ///\n    function implementsERC721() public view returns (bool _implementsERC721);\n\n    // EXTRA\n    /// @notice Allow pre-approved user to take ownership of a token.\n    /// @param _tokenId The ID of the token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function takeOwnership(uint256 _tokenId) public;\n}\n\n/**\n * Interface for optional functionality in the ERC721 standard\n * for non-fungible tokens.\n *\n * Author: Nadav Hollander (nadav at dharma.io)\n */\ncontract DetailedERC721 is ERC721 {\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    // function tokenMetadata(uint256 _tokenId) public view returns (string _infoUrl);\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n}\n\n\ncontract CryptoVideoGamesToken is AccessControl, DetailedERC721 {\n  using SafeMath for uint256;\n\n  /// @dev The TokenCreated event is fired whenever a new token is created.\n  event TokenCreated(uint256 tokenId, string name, uint256 price, address owner);\n\n  /// @dev The TokenSold event is fired whenever a token is sold.\n  event TokenSold(uint256 indexed tokenId, string name, uint256 sellingPrice,\n   uint256 newPrice, address indexed oldOwner, address indexed newOwner);\n\n\n  /// @dev A mapping from tokenIds to the address that owns them. All tokens have\n  ///  some valid owner address.\n  mapping (uint256 => address) private tokenIdToOwner;\n\n  /// @dev A mapping from TokenIds to the price of the token.\n  mapping (uint256 => uint256) private tokenIdToPrice;\n\n  /// @dev A mapping from owner address to count of tokens that address owns.\n  ///  Used internally inside balanceOf() to resolve ownership count.\n  mapping (address => uint256) private ownershipTokenCount;\n\n  /// @dev A mapping from TokenIds to an address that has been approved to call\n  ///  transferFrom(). Each Token can only have one approved address for transfer\n  ///  at any time. A zero value means no approval is outstanding\n  mapping (uint256 => address) public tokenIdToApproved;\n\n\n  struct Game {\n    string name;\n  }\n  Game[] private games;\n\n  uint256 private startingPrice = 0.0125 ether;\n  bool private erc721Enabled = false;\n\n  modifier onlyERC721() {\n    require(erc721Enabled);\n    _;\n  }\n\n  /// @dev Creates a new token with the given name and _price and assignes it to an _owner.\n  function createPromoToken(string _name, address _owner, uint256 _price) public onlyCLevel {\n    require(_owner != address(0));\n    require(_price >= startingPrice);\n\n    _createToken(_name, _owner, _price);\n  }\n\n  /// @dev Creates a new token with the given name.\n  function createToken(string _name) public onlyCLevel {\n    _createToken(_name, address(this), startingPrice);\n  }\n\n  function _createToken(string _name, address _owner, uint256 _price) private {\n    Game memory _game = Game({\n      name: _name\n    });\n    uint256 newTokenId = games.push(_game) - 1;\n    tokenIdToPrice[newTokenId] = _price;\n\n    TokenCreated(newTokenId, _name, _price, _owner);\n\n    // This will assign ownership, and also emit the Transfer event as per ERC721 draft\n    _transfer(address(0), _owner, newTokenId);\n  }\n\n  function getToken(uint256 _tokenId) public view returns (\n    string _tokenName,\n    uint256 _price,\n    uint256 _nextPrice,\n    address _owner\n  ) {\n    _tokenName = games[_tokenId].name;\n    _price = tokenIdToPrice[_tokenId];\n    _nextPrice = nextPriceOf(_tokenId);\n    _owner = tokenIdToOwner[_tokenId];\n  }\n\n  function getAllTokens() public view returns (\n      uint256[],\n      uint256[],\n      address[]\n  ) {\n      uint256 total = totalSupply();\n      uint256[] memory prices = new uint256[](total);\n      uint256[] memory nextPrices = new uint256[](total);\n      address[] memory owners = new address[](total);\n\n      for (uint256 i = 0; i < total; i++) {\n          prices[i] = tokenIdToPrice[i];\n          nextPrices[i] = nextPriceOf(i);\n          owners[i] = tokenIdToOwner[i];\n      }\n\n      return (prices, nextPrices, owners);\n  }\n\n  function tokensOf(address _owner) public view returns(uint256[]) {\n    uint256 tokenCount = balanceOf(_owner);\n    if (tokenCount == 0) {\n        // Return an empty array\n      return new uint256[](0);\n    } else {\n      uint256[] memory result = new uint256[](tokenCount);\n      uint256 total = totalSupply();\n      uint256 resultIndex = 0;\n\n      for (uint256 i = 0; i < total; i++) {\n        if (tokenIdToOwner[i] == _owner) {\n          result[resultIndex] = i;\n          resultIndex++;\n        }\n      }\n      return result;\n    }\n  }\n\n  /// @dev This function withdraws the contract owner's cut.\n  /// Any amount may be withdrawn as there is no user funds.\n  /// User funds are immediately sent to the old owner in `purchase`\n  function withdrawBalance(address _to, uint256 _amount) public onlyCEO {\n    require(_amount <= this.balance);\n\n    if (_amount == 0) {\n      _amount = this.balance;\n    }\n\n    if (_to == address(0)) {\n      ceoAddress.transfer(_amount);\n    } else {\n      _to.transfer(_amount);\n    }\n  }\n\n  // Send ether and obtain the token\n  function purchase(uint256 _tokenId) public payable whenNotPaused {\n    address oldOwner = ownerOf(_tokenId);\n    address newOwner = msg.sender;\n    uint256 sellingPrice = priceOf(_tokenId);\n\n    // active tokens\n    require(oldOwner != address(0));\n    // maybe one day newOwner's logic allows this to happen\n    require(newOwner != address(0));\n    // don't buy from yourself\n    require(oldOwner != newOwner);\n    // don't sell to contracts\n    // but even this doesn't prevent bad contracts to become an owner of a token\n    require(!_isContract(newOwner));\n    // another check to be sure that token is active\n    require(sellingPrice > 0);\n    // min required amount check\n    require(msg.value >= sellingPrice);\n\n    // transfer to the new owner\n    _transfer(oldOwner, newOwner, _tokenId);\n    // update fields before emitting an event\n    tokenIdToPrice[_tokenId] = nextPriceOf(_tokenId);\n    // emit event\n    TokenSold(_tokenId, games[_tokenId].name, sellingPrice, priceOf(_tokenId), oldOwner, newOwner);\n\n    // extra ether which should be returned back to buyer\n    uint256 excess = msg.value.sub(sellingPrice);\n    // contract owner's cut which is left in contract and accesed by withdrawBalance\n    uint256 contractCut = sellingPrice.mul(6).div(100); // 6%\n\n    // no need to transfer if it's initial sell\n    if (oldOwner != address(this)) {\n      // transfer payment to seller minus the contract's cut\n      oldOwner.transfer(sellingPrice.sub(contractCut));\n    }\n\n    // return extra ether\n    if (excess > 0) {\n      newOwner.transfer(excess);\n    }\n  }\n\n  function priceOf(uint256 _tokenId) public view returns (uint256 _price) {\n    return tokenIdToPrice[_tokenId];\n  }\n\n  uint256 private increaseLimit1 = 1.7 ether;\n  uint256 private increaseLimit2 = 3 ether;\n  uint256 private increaseLimit3 = 6 ether;\n\n  function nextPriceOf(uint256 _tokenId) public view returns (uint256 _nextPrice) {\n    uint256 price = priceOf(_tokenId);\n    if (price < increaseLimit1) {\n      return price.mul(200).div(94);\n    } else if (price < increaseLimit2) {\n      return price.mul(135).div(94);\n    } else if (price < increaseLimit3) {\n      return price.mul(120).div(94);\n    } else {\n      return price.mul(118).div(94);\n    }\n  }\n\n\n  /*** ERC-721 ***/\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\n  function enableERC721() onlyCEO public {\n    erc721Enabled = true;\n  }\n\n  function totalSupply() public view returns (uint256 _totalSupply) {\n    _totalSupply = games.length;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 _balance) {\n    _balance = ownershipTokenCount[_owner];\n  }\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\n    _owner = tokenIdToOwner[_tokenId];\n    // require(_owner != address(0));\n  }\n\n  function approve(address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\n    require(_owns(msg.sender, _tokenId));\n\n    tokenIdToApproved[_tokenId] = _to;\n\n    Approval(msg.sender, _to, _tokenId);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\n    require(_to != address(0));\n    require(_owns(_from, _tokenId));\n    require(_approved(msg.sender, _tokenId));\n\n    _transfer(_from, _to, _tokenId);\n  }\n\n  function transfer(address _to, uint256 _tokenId) public whenNotPaused onlyERC721 {\n      require(_to != address(0));\n      require(_owns(msg.sender, _tokenId));\n\n      // Reassign ownership, clear pending approvals, emit Transfer event.\n      _transfer(msg.sender, _to, _tokenId);\n  }\n\n  function implementsERC721() public view whenNotPaused returns (bool) {\n    return erc721Enabled;\n  }\n\n  function takeOwnership(uint256 _tokenId) public whenNotPaused onlyERC721 {\n    require(_approved(msg.sender, _tokenId));\n\n    _transfer(tokenIdToOwner[_tokenId], msg.sender, _tokenId);\n  }\n\n  function name() public view returns (string _name) {\n    _name = \"CryptoVideoGames\";\n  }\n\n  function symbol() public view returns (string _symbol) {\n    _symbol = \"XGAME\";\n  }\n\n\n  /*** PRIVATES ***/\n  /// @dev Check for token ownership.\n  function _owns(address _claimant, uint256 _tokenId) private view returns (bool) {\n      return tokenIdToOwner[_tokenId] == _claimant;\n  }\n\n  /// @dev For checking approval of transfer for address _to.\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n    return tokenIdToApproved[_tokenId] == _to;\n  }\n\n  /// @dev Assigns ownership of a specific token to an address.\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\n    // Since the number of tokens is capped to 2^32 we can't overflow this\n    ownershipTokenCount[_to]++;\n    // Transfer ownership\n    tokenIdToOwner[_tokenId] = _to;\n\n    // When creating new token _from is 0x0, but we can't account that address.\n    if (_from != address(0)) {\n      ownershipTokenCount[_from]--;\n      // clear any previously approved ownership exchange\n      delete tokenIdToApproved[_tokenId];\n    }\n\n    // Emit the transfer event.\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /// @dev Checks if the address ia a contract or not\n  function _isContract(address addr) private view returns (bool) {\n    uint256 size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n}\n\n\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n// v1.6.0\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "606060405260018054662c68af0bb140006007556008805460ff191690556717979cfe362a00006009556729a2241af62c0000600a556753444835ec580000600b5560008054600160a060020a033316600160a060020a03199091168117909155600160a860020a03199091161790556117cd8061007e6000396000f3006060604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461016e578063095ea7b3146101f85780630a0f81681461021c5780630cf20cc91461024b5780631051db341461026d57806318160ddd1461029457806323b872dd146102b957806327d7874c146102e15780632a5c792a146103005780632ba73c15146103f15780633f4ba83a1461041057806345576f94146104235780635a3f2672146104745780635ba9e48e146104e65780635c975abb146104fc5780636352211e1461050f57806370a082311461052557806371dc761e146105445780638456cb591461055757806385bde2d31461056a57806395d89b41146105cb578063a9059cbb146105de578063b047fb5014610600578063b2e6ceeb14610613578063b9186d7d14610629578063e4b50cb81461063f578063eb5653d7146106ec578063efef39a114610702575b600080fd5b341561017957600080fd5b61018161070d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101bd5780820151838201526020016101a5565b50505050905090810190601f1680156101ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020357600080fd5b61021a600160a060020a036004351660243561074e565b005b341561022757600080fd5b61022f610802565b604051600160a060020a03909116815260200160405180910390f35b341561025657600080fd5b61021a600160a060020a0360043516602435610811565b341561027857600080fd5b6102806108d4565b604051901515815260200160405180910390f35b341561029f57600080fd5b6102a76108f9565b60405190815260200160405180910390f35b34156102c457600080fd5b61021a600160a060020a03600435811690602435166044356108ff565b34156102ec57600080fd5b61021a600160a060020a0360043516610976565b341561030b57600080fd5b6103136109d5565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561035b578082015183820152602001610343565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561039a578082015183820152602001610382565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156103d95780820151838201526020016103c1565b50505050905001965050505050505060405180910390f35b34156103fc57600080fd5b61021a600160a060020a0360043516610b1c565b341561041b57600080fd5b61021a610b7b565b341561042e57600080fd5b61021a60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610bce95505050505050565b341561047f57600080fd5b610493600160a060020a0360043516610c14565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156104d25780820151838201526020016104ba565b505050509050019250505060405180910390f35b34156104f157600080fd5b6102a7600435610cf6565b341561050757600080fd5b610280610d93565b341561051a57600080fd5b61022f600435610da3565b341561053057600080fd5b6102a7600160a060020a0360043516610dbe565b341561054f57600080fd5b61021a610dd9565b341561056257600080fd5b61021a610e03565b341561057557600080fd5b61021a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050600160a060020a0385351694602001359350610e5b92505050565b34156105d657600080fd5b610181610ec0565b34156105e957600080fd5b61021a600160a060020a0360043516602435610f01565b341561060b57600080fd5b61022f610f5e565b341561061e57600080fd5b61021a600435610f6d565b341561063457600080fd5b6102a7600435610fcd565b341561064a57600080fd5b610655600435610fdf565b6040516020810184905260408101839052600160a060020a038216606082015260808082528190810186818151815260200191508051906020019080838360005b838110156106ae578082015183820152602001610696565b50505050905090810190601f1680156106db5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156106f757600080fd5b61022f6004356110e7565b61021a600435611102565b610715611653565b60408051908101604052601081527f43727970746f566964656f47616d6573000000000000000000000000000000006020820152919050565b60015460a060020a900460ff161561076557600080fd5b60085460ff16151561077657600080fd5b610780338261138a565b151561078b57600080fd5b60008181526005602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038581169182179092559133909116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600054600160a060020a031681565b60005433600160a060020a0390811691161461082c57600080fd5b600160a060020a0330163181111561084357600080fd5b8015156108575750600160a060020a033016315b600160a060020a038216151561089f57600054600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561089a57600080fd5b6108d0565b600160a060020a03821681156108fc0282604051600060405180830381858888f1935050505015156108d057600080fd5b5050565b60015460009060a060020a900460ff16156108ee57600080fd5b5060085460ff165b90565b60065490565b60015460a060020a900460ff161561091657600080fd5b60085460ff16151561092757600080fd5b600160a060020a038216151561093c57600080fd5b610946838261138a565b151561095157600080fd5b61095b33826113aa565b151561096657600080fd5b6109718383836113ca565b505050565b60005433600160a060020a0390811691161461099157600080fd5b600160a060020a03811615156109a657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6109dd611653565b6109e5611653565b6109ed611653565b60006109f7611653565b6109ff611653565b610a07611653565b6000610a116108f9565b945084604051805910610a215750595b9080825280602002602001820160405250935084604051805910610a425750595b9080825280602002602001820160405250925084604051805910610a635750595b90808252806020026020018201604052509150600090505b84811015610b0e57600081815260036020526040902054848281518110610a9e57fe5b60209081029091010152610ab181610cf6565b838281518110610abd57fe5b6020908102909101810191909152600082815260029091526040902054600160a060020a0316828281518110610aef57fe5b600160a060020a03909216602092830290910190910152600101610a7b565b509196909550909350915050565b60005433600160a060020a03908116911614610b3757600080fd5b600160a060020a0381161515610b4c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610b9657600080fd5b60015460a060020a900460ff161515610bae57600080fd5b6001805474ff000000000000000000000000000000000000000019169055565b60005433600160a060020a0390811691161480610bf9575060015433600160a060020a039081169116145b1515610c0457600080fd5b610c1181306007546114b1565b50565b610c1c611653565b6000610c26611653565b6000806000610c3487610dbe565b9450841515610c64576000604051805910610c4c5750595b90808252806020026020018201604052509550610cec565b84604051805910610c725750595b90808252806020026020018201604052509350610c8d6108f9565b925060009150600090505b82811015610ce857600081815260026020526040902054600160a060020a0388811691161415610ce05780848381518110610ccf57fe5b602090810290910101526001909101905b600101610c98565b8395505b5050505050919050565b600080610d0283610fcd565b9050600954811015610d3757610d30605e610d248360c863ffffffff6115ec16565b9063ffffffff61162216565b9150610d8d565b600a54811015610d5757610d30605e610d2483608763ffffffff6115ec16565b600b54811015610d7757610d30605e610d2483607863ffffffff6115ec16565b610d30605e610d2483607663ffffffff6115ec16565b50919050565b60015460a060020a900460ff1681565b600090815260026020526040902054600160a060020a031690565b600160a060020a031660009081526004602052604090205490565b60005433600160a060020a03908116911614610df457600080fd5b6008805460ff19166001179055565b60005433600160a060020a03908116911614610e1e57600080fd5b60015460a060020a900460ff1615610e3557600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a179055565b60005433600160a060020a0390811691161480610e86575060015433600160a060020a039081169116145b1515610e9157600080fd5b600160a060020a0382161515610ea657600080fd5b600754811015610eb557600080fd5b6109718383836114b1565b610ec8611653565b60408051908101604052600581527f5847414d450000000000000000000000000000000000000000000000000000006020820152919050565b60015460a060020a900460ff1615610f1857600080fd5b60085460ff161515610f2957600080fd5b600160a060020a0382161515610f3e57600080fd5b610f48338261138a565b1515610f5357600080fd5b6108d03383836113ca565b600154600160a060020a031681565b60015460a060020a900460ff1615610f8457600080fd5b60085460ff161515610f9557600080fd5b610f9f33826113aa565b1515610faa57600080fd5b600081815260026020526040902054610c1190600160a060020a031633836113ca565b60009081526003602052604090205490565b610fe7611653565b6000806000600685815481101515610ffb57fe5b90600052602060002090016000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561109d5780601f106110725761010080835404028352916020019161109d565b820191906000526020600020905b81548152906001019060200180831161108057829003601f168201915b50505050509350600360008681526020019081526020016000205492506110c385610cf6565b600095865260026020526040909520549395929493600160a060020a031692915050565b600560205260009081526040902054600160a060020a031681565b6000806000806000600160149054906101000a900460ff1615151561112657600080fd5b61112f86610da3565b945033935061113d86610fcd565b9250600160a060020a038516151561115457600080fd5b600160a060020a038416151561116957600080fd5b600160a060020a03858116908516141561118257600080fd5b61118b84611639565b1561119557600080fd5b600083116111a257600080fd5b34839010156111b057600080fd5b6111bb8585886113ca565b6111c486610cf6565b60008781526003602052604090205560068054600160a060020a03808716929088169189917fef3f7c55f619f7c9178e080691f6d9bc90a74668d32c107dea7c87da023c9a0f918390811061121557fe5b60009182526020909120018761122a8c610fcd565b6040516020810183905260408101829052606080825284546002600019610100600184161502019091160490820181905281906080820190869080156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b505094505050505060405180910390a46112d1348463ffffffff61164116565b91506112e96064610d2485600663ffffffff6115ec16565b905030600160a060020a031685600160a060020a031614151561134857600160a060020a0385166108fc611323858463ffffffff61164116565b9081150290604051600060405180830381858888f19350505050151561134857600080fd5b600082111561138257600160a060020a03841682156108fc0283604051600060405180830381858888f19350505050151561138257600080fd5b505050505050565b600090815260026020526040902054600160a060020a0391821691161490565b600090815260056020526040902054600160a060020a0391821691161490565b600160a060020a0380831660008181526004602090815260408083208054600101905585835260029091529020805473ffffffffffffffffffffffffffffffffffffffff1916909117905583161561146557600160a060020a0383166000908152600460209081526040808320805460001901905583835260059091529020805473ffffffffffffffffffffffffffffffffffffffff191690555b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b6114b9611665565b60006020604051908101604052858152600680549193506001918083016114e0838261167e565b600092835260209092208591018151819080516115019291602001906116a2565b5050500390508260036000838152602001908152602001600020819055507fd306967beeb39489cb6724748118d29c59bd0f0e17a5dd711b4f4d3dea3a1c478186858760405184815260408101839052600160a060020a038216606082015260806020820181815290820185818151815260200191508051906020019080838360005b8381101561159c578082015183820152602001611584565b50505050905090810190601f1680156115c95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a16115e5600085836113ca565b5050505050565b6000808315156115ff576000915061161b565b5082820282848281151561160f57fe5b041461161757fe5b8091505b5092915050565b600080828481151561163057fe5b04949350505050565b6000903b1190565b60008282111561164d57fe5b50900390565b60206040519081016040526000815290565b602060405190810160405280611679611653565b905290565b81548183558181151161097157600083815260209020610971918101908301611720565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106116e357805160ff1916838001178555611710565b82800160010185558215611710579182015b828111156117105782518255916020019190600101906116f5565b5061171c929150611743565b5090565b6108f691905b8082111561171c57600061173a828261175d565b50600101611726565b6108f691905b8082111561171c5760008155600101611749565b50805460018160011615610100020316600290046000825580601f106117835750610c11565b601f016020900490600052602060002090810190610c1191906117435600a165627a7a72305820d9ba2436253f162dff408b7701c4e8a6a9448896dc46a9a5b0cd9361ca5854d00029"
}