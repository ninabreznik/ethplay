{
  "address": "0xc1a16e62db6369e1aa520d794026e611c6924b21",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CommunicationCreatesValueTokenLock",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.23;\n\n\ncontract EIP20Interface {\n\n    uint256 public totalSupply;\n\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n      // benefit is lost if 'b' is also tested.\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }   \n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      // uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract CommunicationCreatesValueToken is EIP20Interface {\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    \n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => uint256) public freezeOf;\n    mapping(address => mapping(address=> uint256)) allowed;\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    constructor (\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        uint256 _totalSupply\n    ) public {\n        balanceOf[msg.sender] = _totalSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n    }   \n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(_to != address(0));\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value); \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value && allowance >= _value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value); \n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n        return true;\n    }\n\n    function freeze(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n        require(_value>0);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\n        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);                                // Updates totalSupply\n        emit Freeze(msg.sender, _value);\n        return true;\n    }\n\n    function unfreeze(uint256 _value) public returns (bool success) {\n        require(freezeOf[msg.sender] >= _value);            // Check if the sender has enough\n\t    require(_value>0);\n        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\n        emit Unfreeze(msg.sender, _value);\n        return true;\n    }\n\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }   \n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balanceOf[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balanceOf[_who] = balanceOf[_who].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\ncontract CommunicationCreatesValueTokenLock {\n  // ERC20 basic token contract being held\n    CommunicationCreatesValueToken public token;\n\n  // beneficiary of tokens after they are released\n    address public beneficiary;\n\n  // timestamp when token release is enabled\n    uint256 public openingTime;\n    \n    uint256 public totalFreeze;\n\n    mapping(uint => uint) public unfreezed;\n\n    constructor(\n        CommunicationCreatesValueToken _token,\n        address _beneficiary,\n        uint256 _openingTime,\n        uint256 _totalFreeze\n    )\n        public\n    {\n        token = _token;\n        beneficiary = _beneficiary;\n        openingTime = _openingTime;\n        totalFreeze = _totalFreeze;\n    }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n    function release() public {\n        uint256 nowTime = block.timestamp;\n        uint256 passTime = nowTime - openingTime;\n        uint256 weeksnow = passTime/2419200;\n        require(unfreezed[weeksnow] != 1, \"This week we have unfreeze part of the token\");\n        uint256 amount = getPartReleaseAmount();\n        require(amount > 0, \"the token has finished released\");\n        unfreezed[weeksnow] = 1;\n        token.transfer(beneficiary, amount);\n    }\n\n    /**\n    *@dev getMonthRelease is the function to get todays month realse\n    *\n    */\n    function getPartReleaseAmount() public view returns(uint256){\n        uint stage = getStage();\n        for( uint i = 0; i <= stage; i++ ) {\n            uint256 stageAmount = totalFreeze/2;\n        }\n        uint256 amount = stageAmount*2419200/126230400;\n        return amount;\n    }\n    \n    /**\n    *@dev getStage is the function to get which stage the lock is on, four year will change the stage\n    *@return uint256\n    */\n    function getStage() public view returns(uint256) {\n        uint256 nowTime = block.timestamp;\n        uint256 passTime = nowTime - openingTime;\n        uint256 stage = passTime/126230400;       //stage is the lock is on, a day is 86400 seconds\n        return stage;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516080806106f383398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555050505050610600806100f36000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631c061fdc1461009357806338af3eed146100be578063443315da1461011557806386d1a69f1461015657806396b0e38b1461016d578063b7a8807c14610198578063fc0c546a146101c3578063fcaa76641461021a575b600080fd5b34801561009f57600080fd5b506100a8610245565b6040518082815260200191505060405180910390f35b3480156100ca57600080fd5b506100d36102a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012157600080fd5b50610140600480360381019080803590602001909291905050506102ca565b6040518082815260200191505060405180910390f35b34801561016257600080fd5b5061016b6102e2565b005b34801561017957600080fd5b50610182610578565b6040518082815260200191505060405180910390f35b3480156101a457600080fd5b506101ad61057e565b6040518082815260200191505060405180910390f35b3480156101cf57600080fd5b506101d8610584565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022657600080fd5b5061022f6105a9565b6040518082815260200191505060405180910390f35b60008060008060006102556105a9565b9350600092505b838311151561028357600260035481151561027357fe5b049150828060010193505061025c565b6307861f806224ea00830281151561029757fe5b0490508094505050505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600080600080429350600254840392506224ea008381151561030057fe5b04915060016004600084815260200190815260200160002054141515156103b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f54686973207765656b207765206861766520756e667265657a6520706172742081526020017f6f662074686520746f6b656e000000000000000000000000000000000000000081525060400191505060405180910390fd5b6103bd610245565b9050600081111515610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f74686520746f6b656e206861732066696e69736865642072656c65617365640081525060200191505060405180910390fd5b600160046000848152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561053657600080fd5b505af115801561054a573d6000803e3d6000fd5b505050506040513d602081101561056057600080fd5b81019080805190602001909291905050505050505050565b60035481565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080429250600254830391506307861f80828115156105c857fe5b049050809350505050905600a165627a7a7230582086f28ecbb25abc30fa7eca610212a09d2c445d748793612a27c3aaa8e9d0c9fb0029000000000000000000000000b4f0e4f499a04d529963fb35de9a0c2a89efcd0c000000000000000000000000ff70b6df9f9b5fd42694a6b5cd2cd094e4a9f33a000000000000000000000000000000000000000000000000000000005c0126400000000000000000000000000000000000000000169e43a85eb381aa58000000",
  "constructorArguments": "000000000000000000000000b4f0e4f499a04d529963fb35de9a0c2a89efcd0c000000000000000000000000ff70b6df9f9b5fd42694a6b5cd2cd094e4a9f33a000000000000000000000000000000000000000000000000000000005c0126400000000000000000000000000000000000000000169e43a85eb381aa58000000"
}