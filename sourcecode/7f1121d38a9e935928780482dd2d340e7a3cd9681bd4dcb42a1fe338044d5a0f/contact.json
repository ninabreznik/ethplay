{
  "address": "0x4330f5462583f38ab22dcbb2bbdc7fc0243fe1e0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DaoConfigsStorage",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.4.25;\n\n// File: @digix/cacp-contracts-dao/contracts/ACOwned.sol\n/// @title Owner based access control\n/// @author DigixGlobal\ncontract ACOwned {\n\n  address public owner;\n  address public new_owner;\n  bool is_ac_owned_init;\n\n  /// @dev Modifier to check if msg.sender is the contract owner\n  modifier if_owner() {\n    require(is_owner());\n    _;\n  }\n\n  function init_ac_owned()\n           internal\n           returns (bool _success)\n  {\n    if (is_ac_owned_init == false) {\n      owner = msg.sender;\n      is_ac_owned_init = true;\n    }\n    _success = true;\n  }\n\n  function is_owner()\n           private\n           constant\n           returns (bool _is_owner)\n  {\n    _is_owner = (msg.sender == owner);\n  }\n\n  function change_owner(address _new_owner)\n           if_owner()\n           public\n           returns (bool _success)\n  {\n    new_owner = _new_owner;\n    _success = true;\n  }\n\n  function claim_ownership()\n           public\n           returns (bool _success)\n  {\n    require(msg.sender == new_owner);\n    owner = new_owner;\n    _success = true;\n  }\n}\n\n// File: @digix/cacp-contracts-dao/contracts/Constants.sol\n/// @title Some useful constants\n/// @author DigixGlobal\ncontract Constants {\n  address constant NULL_ADDRESS = address(0x0);\n  uint256 constant ZERO = uint256(0);\n  bytes32 constant EMPTY = bytes32(0x0);\n}\n\n// File: @digix/cacp-contracts-dao/contracts/ContractResolver.sol\n/// @title Contract Name Registry\n/// @author DigixGlobal\ncontract ContractResolver is ACOwned, Constants {\n\n  mapping (bytes32 => address) contracts;\n  bool public locked_forever;\n\n  modifier unless_registered(bytes32 _key) {\n    require(contracts[_key] == NULL_ADDRESS);\n    _;\n  }\n\n  modifier if_owner_origin() {\n    require(tx.origin == owner);\n    _;\n  }\n\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n  /// @param _contract The resolver key\n  modifier if_sender_is(bytes32 _contract) {\n    require(msg.sender == get_contract(_contract));\n    _;\n  }\n\n  modifier if_not_locked() {\n    require(locked_forever == false);\n    _;\n  }\n\n  /// @dev ContractResolver constructor will perform the following: 1. Set msg.sender as the contract owner.\n  constructor() public\n  {\n    require(init_ac_owned());\n    locked_forever = false;\n  }\n\n  /// @dev Called at contract initialization\n  /// @param _key bytestring for CACP name\n  /// @param _contract_address The address of the contract to be registered\n  /// @return _success if the operation is successful\n  function init_register_contract(bytes32 _key, address _contract_address)\n           if_owner_origin()\n           if_not_locked()\n           unless_registered(_key)\n           public\n           returns (bool _success)\n  {\n    require(_contract_address != NULL_ADDRESS);\n    contracts[_key] = _contract_address;\n    _success = true;\n  }\n\n  /// @dev Lock the resolver from any further modifications.  This can only be called from the owner\n  /// @return _success if the operation is successful\n  function lock_resolver_forever()\n           if_owner\n           public\n           returns (bool _success)\n  {\n    locked_forever = true;\n    _success = true;\n  }\n\n  /// @dev Get address of a contract\n  /// @param _key the bytestring name of the contract to look up\n  /// @return _contract the address of the contract\n  function get_contract(bytes32 _key)\n           public\n           view\n           returns (address _contract)\n  {\n    require(contracts[_key] != NULL_ADDRESS);\n    _contract = contracts[_key];\n  }\n}\n\n// File: @digix/cacp-contracts-dao/contracts/ResolverClient.sol\n/// @title Contract Resolver Interface\n/// @author DigixGlobal\ncontract ResolverClient {\n\n  /// The address of the resolver contract for this project\n  address public resolver;\n  bytes32 public key;\n\n  /// Make our own address available to us as a constant\n  address public CONTRACT_ADDRESS;\n\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n  /// @param _contract The resolver key\n  modifier if_sender_is(bytes32 _contract) {\n    require(sender_is(_contract));\n    _;\n  }\n\n  function sender_is(bytes32 _contract) internal view returns (bool _isFrom) {\n    _isFrom = msg.sender == ContractResolver(resolver).get_contract(_contract);\n  }\n\n  modifier if_sender_is_from(bytes32[3] _contracts) {\n    require(sender_is_from(_contracts));\n    _;\n  }\n\n  function sender_is_from(bytes32[3] _contracts) internal view returns (bool _isFrom) {\n    uint256 _n = _contracts.length;\n    for (uint256 i = 0; i < _n; i++) {\n      if (_contracts[i] == bytes32(0x0)) continue;\n      if (msg.sender == ContractResolver(resolver).get_contract(_contracts[i])) {\n        _isFrom = true;\n        break;\n      }\n    }\n  }\n\n  /// Function modifier to check resolver's locking status.\n  modifier unless_resolver_is_locked() {\n    require(is_locked() == false);\n    _;\n  }\n\n  /// @dev Initialize new contract\n  /// @param _key the resolver key for this contract\n  /// @return _success if the initialization is successful\n  function init(bytes32 _key, address _resolver)\n           internal\n           returns (bool _success)\n  {\n    bool _is_locked = ContractResolver(_resolver).locked_forever();\n    if (_is_locked == false) {\n      CONTRACT_ADDRESS = address(this);\n      resolver = _resolver;\n      key = _key;\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n      _success = true;\n    }  else {\n      _success = false;\n    }\n  }\n\n  /// @dev Check if resolver is locked\n  /// @return _locked if the resolver is currently locked\n  function is_locked()\n           private\n           view\n           returns (bool _locked)\n  {\n    _locked = ContractResolver(resolver).locked_forever();\n  }\n\n  /// @dev Get the address of a contract\n  /// @param _key the resolver key to look up\n  /// @return _contract the address of the contract\n  function get_contract(bytes32 _key)\n           public\n           view\n           returns (address _contract)\n  {\n    _contract = ContractResolver(resolver).get_contract(_key);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/common/DaoConstants.sol\ncontract DaoConstants {\n    using SafeMath for uint256;\n    bytes32 EMPTY_BYTES = bytes32(0x0);\n    address EMPTY_ADDRESS = address(0x0);\n\n\n    bytes32 PROPOSAL_STATE_PREPROPOSAL = \"proposal_state_preproposal\";\n    bytes32 PROPOSAL_STATE_DRAFT = \"proposal_state_draft\";\n    bytes32 PROPOSAL_STATE_MODERATED = \"proposal_state_moderated\";\n    bytes32 PROPOSAL_STATE_ONGOING = \"proposal_state_ongoing\";\n    bytes32 PROPOSAL_STATE_CLOSED = \"proposal_state_closed\";\n    bytes32 PROPOSAL_STATE_ARCHIVED = \"proposal_state_archived\";\n\n    uint256 PRL_ACTION_STOP = 1;\n    uint256 PRL_ACTION_PAUSE = 2;\n    uint256 PRL_ACTION_UNPAUSE = 3;\n\n    uint256 COLLATERAL_STATUS_UNLOCKED = 1;\n    uint256 COLLATERAL_STATUS_LOCKED = 2;\n    uint256 COLLATERAL_STATUS_CLAIMED = 3;\n\n    bytes32 INTERMEDIATE_DGD_IDENTIFIER = \"inter_dgd_id\";\n    bytes32 INTERMEDIATE_MODERATOR_DGD_IDENTIFIER = \"inter_mod_dgd_id\";\n    bytes32 INTERMEDIATE_BONUS_CALCULATION_IDENTIFIER = \"inter_bonus_calculation_id\";\n\n    // interactive contracts\n    bytes32 CONTRACT_DAO = \"dao\";\n    bytes32 CONTRACT_DAO_SPECIAL_PROPOSAL = \"dao:special:proposal\";\n    bytes32 CONTRACT_DAO_STAKE_LOCKING = \"dao:stake-locking\";\n    bytes32 CONTRACT_DAO_VOTING = \"dao:voting\";\n    bytes32 CONTRACT_DAO_VOTING_CLAIMS = \"dao:voting:claims\";\n    bytes32 CONTRACT_DAO_SPECIAL_VOTING_CLAIMS = \"dao:svoting:claims\";\n    bytes32 CONTRACT_DAO_IDENTITY = \"dao:identity\";\n    bytes32 CONTRACT_DAO_REWARDS_MANAGER = \"dao:rewards-manager\";\n    bytes32 CONTRACT_DAO_REWARDS_MANAGER_EXTRAS = \"dao:rewards-extras\";\n    bytes32 CONTRACT_DAO_ROLES = \"dao:roles\";\n    bytes32 CONTRACT_DAO_FUNDING_MANAGER = \"dao:funding-manager\";\n    bytes32 CONTRACT_DAO_WHITELISTING = \"dao:whitelisting\";\n    bytes32 CONTRACT_DAO_INFORMATION = \"dao:information\";\n\n    // service contracts\n    bytes32 CONTRACT_SERVICE_ROLE = \"service:role\";\n    bytes32 CONTRACT_SERVICE_DAO_INFO = \"service:dao:info\";\n    bytes32 CONTRACT_SERVICE_DAO_LISTING = \"service:dao:listing\";\n    bytes32 CONTRACT_SERVICE_DAO_CALCULATOR = \"service:dao:calculator\";\n\n    // storage contracts\n    bytes32 CONTRACT_STORAGE_DAO = \"storage:dao\";\n    bytes32 CONTRACT_STORAGE_DAO_COUNTER = \"storage:dao:counter\";\n    bytes32 CONTRACT_STORAGE_DAO_UPGRADE = \"storage:dao:upgrade\";\n    bytes32 CONTRACT_STORAGE_DAO_IDENTITY = \"storage:dao:identity\";\n    bytes32 CONTRACT_STORAGE_DAO_POINTS = \"storage:dao:points\";\n    bytes32 CONTRACT_STORAGE_DAO_SPECIAL = \"storage:dao:special\";\n    bytes32 CONTRACT_STORAGE_DAO_CONFIG = \"storage:dao:config\";\n    bytes32 CONTRACT_STORAGE_DAO_STAKE = \"storage:dao:stake\";\n    bytes32 CONTRACT_STORAGE_DAO_REWARDS = \"storage:dao:rewards\";\n    bytes32 CONTRACT_STORAGE_DAO_WHITELISTING = \"storage:dao:whitelisting\";\n    bytes32 CONTRACT_STORAGE_INTERMEDIATE_RESULTS = \"storage:intermediate:results\";\n\n    bytes32 CONTRACT_DGD_TOKEN = \"t:dgd\";\n    bytes32 CONTRACT_DGX_TOKEN = \"t:dgx\";\n    bytes32 CONTRACT_BADGE_TOKEN = \"t:badge\";\n\n    uint8 ROLES_ROOT = 1;\n    uint8 ROLES_FOUNDERS = 2;\n    uint8 ROLES_PRLS = 3;\n    uint8 ROLES_KYC_ADMINS = 4;\n\n    uint256 QUARTER_DURATION = 90 days;\n\n    bytes32 CONFIG_MINIMUM_LOCKED_DGD = \"min_dgd_participant\";\n    bytes32 CONFIG_MINIMUM_DGD_FOR_MODERATOR = \"min_dgd_moderator\";\n    bytes32 CONFIG_MINIMUM_REPUTATION_FOR_MODERATOR = \"min_reputation_moderator\";\n\n    bytes32 CONFIG_LOCKING_PHASE_DURATION = \"locking_phase_duration\";\n    bytes32 CONFIG_QUARTER_DURATION = \"quarter_duration\";\n    bytes32 CONFIG_VOTING_COMMIT_PHASE = \"voting_commit_phase\";\n    bytes32 CONFIG_VOTING_PHASE_TOTAL = \"voting_phase_total\";\n    bytes32 CONFIG_INTERIM_COMMIT_PHASE = \"interim_voting_commit_phase\";\n    bytes32 CONFIG_INTERIM_PHASE_TOTAL = \"interim_voting_phase_total\";\n\n    bytes32 CONFIG_DRAFT_QUORUM_FIXED_PORTION_NUMERATOR = \"draft_quorum_fixed_numerator\";\n    bytes32 CONFIG_DRAFT_QUORUM_FIXED_PORTION_DENOMINATOR = \"draft_quorum_fixed_denominator\";\n    bytes32 CONFIG_DRAFT_QUORUM_SCALING_FACTOR_NUMERATOR = \"draft_quorum_sfactor_numerator\";\n    bytes32 CONFIG_DRAFT_QUORUM_SCALING_FACTOR_DENOMINATOR = \"draft_quorum_sfactor_denominator\";\n    bytes32 CONFIG_VOTING_QUORUM_FIXED_PORTION_NUMERATOR = \"vote_quorum_fixed_numerator\";\n    bytes32 CONFIG_VOTING_QUORUM_FIXED_PORTION_DENOMINATOR = \"vote_quorum_fixed_denominator\";\n    bytes32 CONFIG_VOTING_QUORUM_SCALING_FACTOR_NUMERATOR = \"vote_quorum_sfactor_numerator\";\n    bytes32 CONFIG_VOTING_QUORUM_SCALING_FACTOR_DENOMINATOR = \"vote_quorum_sfactor_denominator\";\n    bytes32 CONFIG_FINAL_REWARD_SCALING_FACTOR_NUMERATOR = \"final_reward_sfactor_numerator\";\n    bytes32 CONFIG_FINAL_REWARD_SCALING_FACTOR_DENOMINATOR = \"final_reward_sfactor_denominator\";\n\n    bytes32 CONFIG_DRAFT_QUOTA_NUMERATOR = \"draft_quota_numerator\";\n    bytes32 CONFIG_DRAFT_QUOTA_DENOMINATOR = \"draft_quota_denominator\";\n    bytes32 CONFIG_VOTING_QUOTA_NUMERATOR = \"voting_quota_numerator\";\n    bytes32 CONFIG_VOTING_QUOTA_DENOMINATOR = \"voting_quota_denominator\";\n\n    bytes32 CONFIG_MINIMAL_QUARTER_POINT = \"minimal_qp\";\n    bytes32 CONFIG_QUARTER_POINT_SCALING_FACTOR = \"quarter_point_scaling_factor\";\n    bytes32 CONFIG_REPUTATION_POINT_SCALING_FACTOR = \"rep_point_scaling_factor\";\n\n    bytes32 CONFIG_MODERATOR_MINIMAL_QUARTER_POINT = \"minimal_mod_qp\";\n    bytes32 CONFIG_MODERATOR_QUARTER_POINT_SCALING_FACTOR = \"mod_qp_scaling_factor\";\n    bytes32 CONFIG_MODERATOR_REPUTATION_POINT_SCALING_FACTOR = \"mod_rep_point_scaling_factor\";\n\n    bytes32 CONFIG_QUARTER_POINT_DRAFT_VOTE = \"quarter_point_draft_vote\";\n    bytes32 CONFIG_QUARTER_POINT_VOTE = \"quarter_point_vote\";\n    bytes32 CONFIG_QUARTER_POINT_INTERIM_VOTE = \"quarter_point_interim_vote\";\n\n    /// this is per 10000 ETHs\n    bytes32 CONFIG_QUARTER_POINT_MILESTONE_COMPLETION_PER_10000ETH = \"q_p_milestone_completion\";\n\n    bytes32 CONFIG_BONUS_REPUTATION_NUMERATOR = \"bonus_reputation_numerator\";\n    bytes32 CONFIG_BONUS_REPUTATION_DENOMINATOR = \"bonus_reputation_denominator\";\n\n    bytes32 CONFIG_SPECIAL_PROPOSAL_COMMIT_PHASE = \"special_proposal_commit_phase\";\n    bytes32 CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL = \"special_proposal_phase_total\";\n\n    bytes32 CONFIG_SPECIAL_QUOTA_NUMERATOR = \"config_special_quota_numerator\";\n    bytes32 CONFIG_SPECIAL_QUOTA_DENOMINATOR = \"config_special_quota_denominator\";\n\n    bytes32 CONFIG_SPECIAL_PROPOSAL_QUORUM_NUMERATOR = \"special_quorum_numerator\";\n    bytes32 CONFIG_SPECIAL_PROPOSAL_QUORUM_DENOMINATOR = \"special_quorum_denominator\";\n\n    bytes32 CONFIG_MAXIMUM_REPUTATION_DEDUCTION = \"config_max_reputation_deduction\";\n    bytes32 CONFIG_PUNISHMENT_FOR_NOT_LOCKING = \"config_punishment_not_locking\";\n\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_QP_NUM = \"config_rep_per_extra_qp_num\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_QP_DEN = \"config_rep_per_extra_qp_den\";\n\n    bytes32 CONFIG_MAXIMUM_MODERATOR_REPUTATION_DEDUCTION = \"config_max_m_rp_deduction\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_NUM = \"config_rep_per_extra_m_qp_num\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_DEN = \"config_rep_per_extra_m_qp_den\";\n\n    bytes32 CONFIG_PORTION_TO_MODERATORS_NUM = \"config_mod_portion_num\";\n    bytes32 CONFIG_PORTION_TO_MODERATORS_DEN = \"config_mod_portion_den\";\n\n    bytes32 CONFIG_DRAFT_VOTING_PHASE = \"config_draft_voting_phase\";\n\n    bytes32 CONFIG_REPUTATION_POINT_BOOST_FOR_BADGE = \"config_rp_boost_per_badge\";\n\n    bytes32 CONFIG_VOTE_CLAIMING_DEADLINE = \"config_claiming_deadline\";\n\n    bytes32 CONFIG_PREPROPOSAL_COLLATERAL = \"config_preproposal_collateral\";\n\n    bytes32 CONFIG_MAX_FUNDING_FOR_NON_DIGIX = \"config_max_funding_nonDigix\";\n    bytes32 CONFIG_MAX_MILESTONES_FOR_NON_DIGIX = \"config_max_milestones_nonDigix\";\n    bytes32 CONFIG_NON_DIGIX_PROPOSAL_CAP_PER_QUARTER = \"config_nonDigix_proposal_cap\";\n\n    bytes32 CONFIG_PROPOSAL_DEAD_DURATION = \"config_dead_duration\";\n    bytes32 CONFIG_CARBON_VOTE_REPUTATION_BONUS = \"config_cv_reputation\";\n}\n\n// File: contracts/storage/DaoConfigsStorage.sol\ncontract DaoConfigsStorage is ResolverClient, DaoConstants {\n\n    // mapping of config name to config value\n    // config names can be found in DaoConstants contract\n    mapping (bytes32 => uint256) public uintConfigs;\n\n    // mapping of config name to config value\n    // config names can be found in DaoConstants contract\n    mapping (bytes32 => address) public addressConfigs;\n\n    // mapping of config name to config value\n    // config names can be found in DaoConstants contract\n    mapping (bytes32 => bytes32) public bytesConfigs;\n\n    uint256 ONE_BILLION = 1000000000;\n    uint256 ONE_MILLION = 1000000;\n\n    constructor(address _resolver)\n        public\n    {\n        require(init(CONTRACT_STORAGE_DAO_CONFIG, _resolver));\n\n        uintConfigs[CONFIG_LOCKING_PHASE_DURATION] = 10 days;\n        uintConfigs[CONFIG_QUARTER_DURATION] = QUARTER_DURATION;\n        uintConfigs[CONFIG_VOTING_COMMIT_PHASE] = 14 days;\n        uintConfigs[CONFIG_VOTING_PHASE_TOTAL] = 21 days;\n        uintConfigs[CONFIG_INTERIM_COMMIT_PHASE] = 7 days;\n        uintConfigs[CONFIG_INTERIM_PHASE_TOTAL] = 14 days;\n\n\n\n        uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_NUMERATOR] = 5; // 5%\n        uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_DENOMINATOR] = 100; // 5%\n        uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_NUMERATOR] = 35; // 35%\n        uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_DENOMINATOR] = 100; // 35%\n\n\n        uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_NUMERATOR] = 5; // 5%\n        uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_DENOMINATOR] = 100; // 5%\n        uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_NUMERATOR] = 25; // 25%\n        uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_DENOMINATOR] = 100; // 25%\n\n        uintConfigs[CONFIG_DRAFT_QUOTA_NUMERATOR] = 1; // >50%\n        uintConfigs[CONFIG_DRAFT_QUOTA_DENOMINATOR] = 2; // >50%\n        uintConfigs[CONFIG_VOTING_QUOTA_NUMERATOR] = 1; // >50%\n        uintConfigs[CONFIG_VOTING_QUOTA_DENOMINATOR] = 2; // >50%\n\n\n        uintConfigs[CONFIG_QUARTER_POINT_DRAFT_VOTE] = ONE_BILLION;\n        uintConfigs[CONFIG_QUARTER_POINT_VOTE] = ONE_BILLION;\n        uintConfigs[CONFIG_QUARTER_POINT_INTERIM_VOTE] = ONE_BILLION;\n\n        uintConfigs[CONFIG_QUARTER_POINT_MILESTONE_COMPLETION_PER_10000ETH] = 20000 * ONE_BILLION;\n\n        uintConfigs[CONFIG_BONUS_REPUTATION_NUMERATOR] = 15; // 15% bonus for consistent votes\n        uintConfigs[CONFIG_BONUS_REPUTATION_DENOMINATOR] = 100; // 15% bonus for consistent votes\n\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_COMMIT_PHASE] = 28 days;\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL] = 35 days;\n\n\n\n        uintConfigs[CONFIG_SPECIAL_QUOTA_NUMERATOR] = 1; // >50%\n        uintConfigs[CONFIG_SPECIAL_QUOTA_DENOMINATOR] = 2; // >50%\n\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_NUMERATOR] = 40; // 40%\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_DENOMINATOR] = 100; // 40%\n\n        uintConfigs[CONFIG_MAXIMUM_REPUTATION_DEDUCTION] = 8334 * ONE_MILLION;\n\n        uintConfigs[CONFIG_PUNISHMENT_FOR_NOT_LOCKING] = 1666 * ONE_MILLION;\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_NUM] = 1; // 1 extra QP gains 1/1 RP\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_DEN] = 1;\n\n\n        uintConfigs[CONFIG_MINIMAL_QUARTER_POINT] = 2 * ONE_BILLION;\n        uintConfigs[CONFIG_QUARTER_POINT_SCALING_FACTOR] = 400 * ONE_BILLION;\n        uintConfigs[CONFIG_REPUTATION_POINT_SCALING_FACTOR] = 2000 * ONE_BILLION;\n\n        uintConfigs[CONFIG_MODERATOR_MINIMAL_QUARTER_POINT] = 4 * ONE_BILLION;\n        uintConfigs[CONFIG_MODERATOR_QUARTER_POINT_SCALING_FACTOR] = 400 * ONE_BILLION;\n        uintConfigs[CONFIG_MODERATOR_REPUTATION_POINT_SCALING_FACTOR] = 2000 * ONE_BILLION;\n\n        uintConfigs[CONFIG_PORTION_TO_MODERATORS_NUM] = 42; //4.2% of DGX to moderator voting activity\n        uintConfigs[CONFIG_PORTION_TO_MODERATORS_DEN] = 1000;\n\n        uintConfigs[CONFIG_DRAFT_VOTING_PHASE] = 10 days;\n\n        uintConfigs[CONFIG_REPUTATION_POINT_BOOST_FOR_BADGE] = 412500 * ONE_MILLION;\n\n        uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_NUMERATOR] = 7; // 7%\n        uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_DENOMINATOR] = 100; // 7%\n\n        uintConfigs[CONFIG_MAXIMUM_MODERATOR_REPUTATION_DEDUCTION] = 12500 * ONE_MILLION;\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_NUM] = 1;\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_DEN] = 1;\n\n        uintConfigs[CONFIG_VOTE_CLAIMING_DEADLINE] = 10 days;\n\n        uintConfigs[CONFIG_MINIMUM_LOCKED_DGD] = 10 * ONE_BILLION;\n        uintConfigs[CONFIG_MINIMUM_DGD_FOR_MODERATOR] = 842 * ONE_BILLION;\n        uintConfigs[CONFIG_MINIMUM_REPUTATION_FOR_MODERATOR] = 400 * ONE_BILLION;\n\n        uintConfigs[CONFIG_PREPROPOSAL_COLLATERAL] = 2 ether;\n\n        uintConfigs[CONFIG_MAX_FUNDING_FOR_NON_DIGIX] = 100 ether;\n        uintConfigs[CONFIG_MAX_MILESTONES_FOR_NON_DIGIX] = 5;\n        uintConfigs[CONFIG_NON_DIGIX_PROPOSAL_CAP_PER_QUARTER] = 80;\n\n        uintConfigs[CONFIG_PROPOSAL_DEAD_DURATION] = 90 days;\n        uintConfigs[CONFIG_CARBON_VOTE_REPUTATION_BONUS] = 10 * ONE_BILLION;\n    }\n\n    function updateUintConfigs(uint256[] _uintConfigs)\n        external\n    {\n        require(sender_is(CONTRACT_DAO_SPECIAL_VOTING_CLAIMS));\n        uintConfigs[CONFIG_LOCKING_PHASE_DURATION] = _uintConfigs[0];\n        /*\n        This used to be a config that can be changed. Now, _uintConfigs[1] is just a dummy config that doesnt do anything\n        uintConfigs[CONFIG_QUARTER_DURATION] = _uintConfigs[1];\n        */\n        uintConfigs[CONFIG_VOTING_COMMIT_PHASE] = _uintConfigs[2];\n        uintConfigs[CONFIG_VOTING_PHASE_TOTAL] = _uintConfigs[3];\n        uintConfigs[CONFIG_INTERIM_COMMIT_PHASE] = _uintConfigs[4];\n        uintConfigs[CONFIG_INTERIM_PHASE_TOTAL] = _uintConfigs[5];\n        uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_NUMERATOR] = _uintConfigs[6];\n        uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_DENOMINATOR] = _uintConfigs[7];\n        uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_NUMERATOR] = _uintConfigs[8];\n        uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_DENOMINATOR] = _uintConfigs[9];\n        uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_NUMERATOR] = _uintConfigs[10];\n        uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_DENOMINATOR] = _uintConfigs[11];\n        uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_NUMERATOR] = _uintConfigs[12];\n        uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_DENOMINATOR] = _uintConfigs[13];\n        uintConfigs[CONFIG_DRAFT_QUOTA_NUMERATOR] = _uintConfigs[14];\n        uintConfigs[CONFIG_DRAFT_QUOTA_DENOMINATOR] = _uintConfigs[15];\n        uintConfigs[CONFIG_VOTING_QUOTA_NUMERATOR] = _uintConfigs[16];\n        uintConfigs[CONFIG_VOTING_QUOTA_DENOMINATOR] = _uintConfigs[17];\n        uintConfigs[CONFIG_QUARTER_POINT_DRAFT_VOTE] = _uintConfigs[18];\n        uintConfigs[CONFIG_QUARTER_POINT_VOTE] = _uintConfigs[19];\n        uintConfigs[CONFIG_QUARTER_POINT_INTERIM_VOTE] = _uintConfigs[20];\n        uintConfigs[CONFIG_MINIMAL_QUARTER_POINT] = _uintConfigs[21];\n        uintConfigs[CONFIG_QUARTER_POINT_MILESTONE_COMPLETION_PER_10000ETH] = _uintConfigs[22];\n        uintConfigs[CONFIG_BONUS_REPUTATION_NUMERATOR] = _uintConfigs[23];\n        uintConfigs[CONFIG_BONUS_REPUTATION_DENOMINATOR] = _uintConfigs[24];\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_COMMIT_PHASE] = _uintConfigs[25];\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL] = _uintConfigs[26];\n        uintConfigs[CONFIG_SPECIAL_QUOTA_NUMERATOR] = _uintConfigs[27];\n        uintConfigs[CONFIG_SPECIAL_QUOTA_DENOMINATOR] = _uintConfigs[28];\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_NUMERATOR] = _uintConfigs[29];\n        uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_DENOMINATOR] = _uintConfigs[30];\n        uintConfigs[CONFIG_MAXIMUM_REPUTATION_DEDUCTION] = _uintConfigs[31];\n        uintConfigs[CONFIG_PUNISHMENT_FOR_NOT_LOCKING] = _uintConfigs[32];\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_NUM] = _uintConfigs[33];\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_DEN] = _uintConfigs[34];\n        uintConfigs[CONFIG_QUARTER_POINT_SCALING_FACTOR] = _uintConfigs[35];\n        uintConfigs[CONFIG_REPUTATION_POINT_SCALING_FACTOR] = _uintConfigs[36];\n        uintConfigs[CONFIG_MODERATOR_MINIMAL_QUARTER_POINT] = _uintConfigs[37];\n        uintConfigs[CONFIG_MODERATOR_QUARTER_POINT_SCALING_FACTOR] = _uintConfigs[38];\n        uintConfigs[CONFIG_MODERATOR_REPUTATION_POINT_SCALING_FACTOR] = _uintConfigs[39];\n        uintConfigs[CONFIG_PORTION_TO_MODERATORS_NUM] = _uintConfigs[40];\n        uintConfigs[CONFIG_PORTION_TO_MODERATORS_DEN] = _uintConfigs[41];\n        uintConfigs[CONFIG_DRAFT_VOTING_PHASE] = _uintConfigs[42];\n        uintConfigs[CONFIG_REPUTATION_POINT_BOOST_FOR_BADGE] = _uintConfigs[43];\n        uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_NUMERATOR] = _uintConfigs[44];\n        uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_DENOMINATOR] = _uintConfigs[45];\n        uintConfigs[CONFIG_MAXIMUM_MODERATOR_REPUTATION_DEDUCTION] = _uintConfigs[46];\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_NUM] = _uintConfigs[47];\n        uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_DEN] = _uintConfigs[48];\n        uintConfigs[CONFIG_VOTE_CLAIMING_DEADLINE] = _uintConfigs[49];\n        uintConfigs[CONFIG_MINIMUM_LOCKED_DGD] = _uintConfigs[50];\n        uintConfigs[CONFIG_MINIMUM_DGD_FOR_MODERATOR] = _uintConfigs[51];\n        uintConfigs[CONFIG_MINIMUM_REPUTATION_FOR_MODERATOR] = _uintConfigs[52];\n        uintConfigs[CONFIG_PREPROPOSAL_COLLATERAL] = _uintConfigs[53];\n        uintConfigs[CONFIG_MAX_FUNDING_FOR_NON_DIGIX] = _uintConfigs[54];\n        uintConfigs[CONFIG_MAX_MILESTONES_FOR_NON_DIGIX] = _uintConfigs[55];\n        uintConfigs[CONFIG_NON_DIGIX_PROPOSAL_CAP_PER_QUARTER] = _uintConfigs[56];\n        uintConfigs[CONFIG_PROPOSAL_DEAD_DURATION] = _uintConfigs[57];\n        uintConfigs[CONFIG_CARBON_VOTE_REPUTATION_BONUS] = _uintConfigs[58];\n    }\n\n    function readUintConfigs()\n        public\n        view\n        returns (uint256[])\n    {\n        uint256[] memory _uintConfigs = new uint256[](59);\n        _uintConfigs[0] = uintConfigs[CONFIG_LOCKING_PHASE_DURATION];\n        _uintConfigs[1] = uintConfigs[CONFIG_QUARTER_DURATION];\n        _uintConfigs[2] = uintConfigs[CONFIG_VOTING_COMMIT_PHASE];\n        _uintConfigs[3] = uintConfigs[CONFIG_VOTING_PHASE_TOTAL];\n        _uintConfigs[4] = uintConfigs[CONFIG_INTERIM_COMMIT_PHASE];\n        _uintConfigs[5] = uintConfigs[CONFIG_INTERIM_PHASE_TOTAL];\n        _uintConfigs[6] = uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_NUMERATOR];\n        _uintConfigs[7] = uintConfigs[CONFIG_DRAFT_QUORUM_FIXED_PORTION_DENOMINATOR];\n        _uintConfigs[8] = uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_NUMERATOR];\n        _uintConfigs[9] = uintConfigs[CONFIG_DRAFT_QUORUM_SCALING_FACTOR_DENOMINATOR];\n        _uintConfigs[10] = uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_NUMERATOR];\n        _uintConfigs[11] = uintConfigs[CONFIG_VOTING_QUORUM_FIXED_PORTION_DENOMINATOR];\n        _uintConfigs[12] = uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_NUMERATOR];\n        _uintConfigs[13] = uintConfigs[CONFIG_VOTING_QUORUM_SCALING_FACTOR_DENOMINATOR];\n        _uintConfigs[14] = uintConfigs[CONFIG_DRAFT_QUOTA_NUMERATOR];\n        _uintConfigs[15] = uintConfigs[CONFIG_DRAFT_QUOTA_DENOMINATOR];\n        _uintConfigs[16] = uintConfigs[CONFIG_VOTING_QUOTA_NUMERATOR];\n        _uintConfigs[17] = uintConfigs[CONFIG_VOTING_QUOTA_DENOMINATOR];\n        _uintConfigs[18] = uintConfigs[CONFIG_QUARTER_POINT_DRAFT_VOTE];\n        _uintConfigs[19] = uintConfigs[CONFIG_QUARTER_POINT_VOTE];\n        _uintConfigs[20] = uintConfigs[CONFIG_QUARTER_POINT_INTERIM_VOTE];\n        _uintConfigs[21] = uintConfigs[CONFIG_MINIMAL_QUARTER_POINT];\n        _uintConfigs[22] = uintConfigs[CONFIG_QUARTER_POINT_MILESTONE_COMPLETION_PER_10000ETH];\n        _uintConfigs[23] = uintConfigs[CONFIG_BONUS_REPUTATION_NUMERATOR];\n        _uintConfigs[24] = uintConfigs[CONFIG_BONUS_REPUTATION_DENOMINATOR];\n        _uintConfigs[25] = uintConfigs[CONFIG_SPECIAL_PROPOSAL_COMMIT_PHASE];\n        _uintConfigs[26] = uintConfigs[CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL];\n        _uintConfigs[27] = uintConfigs[CONFIG_SPECIAL_QUOTA_NUMERATOR];\n        _uintConfigs[28] = uintConfigs[CONFIG_SPECIAL_QUOTA_DENOMINATOR];\n        _uintConfigs[29] = uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_NUMERATOR];\n        _uintConfigs[30] = uintConfigs[CONFIG_SPECIAL_PROPOSAL_QUORUM_DENOMINATOR];\n        _uintConfigs[31] = uintConfigs[CONFIG_MAXIMUM_REPUTATION_DEDUCTION];\n        _uintConfigs[32] = uintConfigs[CONFIG_PUNISHMENT_FOR_NOT_LOCKING];\n        _uintConfigs[33] = uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_NUM];\n        _uintConfigs[34] = uintConfigs[CONFIG_REPUTATION_PER_EXTRA_QP_DEN];\n        _uintConfigs[35] = uintConfigs[CONFIG_QUARTER_POINT_SCALING_FACTOR];\n        _uintConfigs[36] = uintConfigs[CONFIG_REPUTATION_POINT_SCALING_FACTOR];\n        _uintConfigs[37] = uintConfigs[CONFIG_MODERATOR_MINIMAL_QUARTER_POINT];\n        _uintConfigs[38] = uintConfigs[CONFIG_MODERATOR_QUARTER_POINT_SCALING_FACTOR];\n        _uintConfigs[39] = uintConfigs[CONFIG_MODERATOR_REPUTATION_POINT_SCALING_FACTOR];\n        _uintConfigs[40] = uintConfigs[CONFIG_PORTION_TO_MODERATORS_NUM];\n        _uintConfigs[41] = uintConfigs[CONFIG_PORTION_TO_MODERATORS_DEN];\n        _uintConfigs[42] = uintConfigs[CONFIG_DRAFT_VOTING_PHASE];\n        _uintConfigs[43] = uintConfigs[CONFIG_REPUTATION_POINT_BOOST_FOR_BADGE];\n        _uintConfigs[44] = uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_NUMERATOR];\n        _uintConfigs[45] = uintConfigs[CONFIG_FINAL_REWARD_SCALING_FACTOR_DENOMINATOR];\n        _uintConfigs[46] = uintConfigs[CONFIG_MAXIMUM_MODERATOR_REPUTATION_DEDUCTION];\n        _uintConfigs[47] = uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_NUM];\n        _uintConfigs[48] = uintConfigs[CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_DEN];\n        _uintConfigs[49] = uintConfigs[CONFIG_VOTE_CLAIMING_DEADLINE];\n        _uintConfigs[50] = uintConfigs[CONFIG_MINIMUM_LOCKED_DGD];\n        _uintConfigs[51] = uintConfigs[CONFIG_MINIMUM_DGD_FOR_MODERATOR];\n        _uintConfigs[52] = uintConfigs[CONFIG_MINIMUM_REPUTATION_FOR_MODERATOR];\n        _uintConfigs[53] = uintConfigs[CONFIG_PREPROPOSAL_COLLATERAL];\n        _uintConfigs[54] = uintConfigs[CONFIG_MAX_FUNDING_FOR_NON_DIGIX];\n        _uintConfigs[55] = uintConfigs[CONFIG_MAX_MILESTONES_FOR_NON_DIGIX];\n        _uintConfigs[56] = uintConfigs[CONFIG_NON_DIGIX_PROPOSAL_CAP_PER_QUARTER];\n        _uintConfigs[57] = uintConfigs[CONFIG_PROPOSAL_DEAD_DURATION];\n        _uintConfigs[58] = uintConfigs[CONFIG_CARBON_VOTE_REPUTATION_BONUS];\n        return _uintConfigs;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000005f60ef7e1443f82ca7de947711f0966ca6e3b5"
}