{
  "address": "0x940d73c91db9f82440702f6cc8323a8c60583777",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TEFoods827Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-22\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract ERC20Interface {\n  function totalSupply() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n  function transfer(address to, uint tokens) public returns (bool success);\n  function approve(address spender, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract ERC827 {\n\n  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n\n}\n\n\ncontract TEFoodsToken is Ownable, ERC20Interface {\n\n  using SafeMath for uint;\n\n  string public constant name = \"TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN\";\n  string public constant symbol = \"TFOOD\";\n  uint8 public constant decimals = 18;\n  uint constant _totalSupply = 1000000000 * 1 ether;\n  uint public transferrableTime = 1521712800;\n  uint _vestedSupply;\n  uint _circulatingSupply;\n  mapping (address => uint) balances;\n  mapping (address => mapping(address => uint)) allowed;\n\n  struct vestedBalance {\n    address addr;\n    uint balance;\n  }\n  mapping (uint => vestedBalance[]) vestingMap;\n\n\n\n  function TEFoodsToken () public {\n    owner = msg.sender;\n    balances[0x00] = _totalSupply;\n  }\n\n  event VestedTokensReleased(address to, uint amount);\n\n  function allocateTokens (address addr, uint amount) public onlyOwner returns (bool) {\n    require (addr != 0x00);\n    require (amount > 0);\n    balances[0x00] = balances[0x00].sub(amount);\n    balances[addr] = balances[addr].add(amount);\n    _circulatingSupply = _circulatingSupply.add(amount);\n    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n    return true;\n  }\n\n  function allocateVestedTokens (address addr, uint amount, uint vestingPeriod) public onlyOwner returns (bool) {\n    require (addr != 0x00);\n    require (amount > 0);\n    require (vestingPeriod > 0);\n    balances[0x00] = balances[0x00].sub(amount);\n    vestingMap[vestingPeriod].push( vestedBalance (addr,amount) );\n    _vestedSupply = _vestedSupply.add(amount);\n    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n    return true;\n  }\n\n  function releaseVestedTokens (uint vestingPeriod) public {\n    require (now >= transferrableTime.add(vestingPeriod));\n    require (vestingMap[vestingPeriod].length > 0);\n    require (vestingMap[vestingPeriod][0].balance > 0);\n    var v = vestingMap[vestingPeriod];\n    for (uint8 i = 0; i < v.length; i++) {\n      balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\n      _circulatingSupply = _circulatingSupply.add(v[i].balance);\n      _vestedSupply = _vestedSupply.sub(v[i].balance);\n      v[i].balance = 0;\n      VestedTokensReleased(v[i].addr, v[i].balance);\n    }\n  }\n\n  function enableTransfers () public onlyOwner returns (bool) {\n    if (now.add(86400) < transferrableTime) {\n      transferrableTime = now.add(86400);\n    }\n    owner = 0x00;\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n  function totalSupply() public constant returns (uint) {\n    return _circulatingSupply;\n  }\n\n  function balanceOf(address tokenOwner) public constant returns (uint balance) {\n    return balances[tokenOwner];\n  }\n\n  function vestedBalanceOf(address tokenOwner, uint vestingPeriod) public constant returns (uint balance) {\n    var v = vestingMap[vestingPeriod];\n    for (uint8 i = 0; i < v.length; i++) {\n      if (v[i].addr == tokenOwner) return v[i].balance;\n    }\n    return 0;\n  }\n\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n    return allowed[tokenOwner][spender];\n  }\n\n  function transfer(address to, uint tokens) public returns (bool success) {\n    require (now >= transferrableTime);\n    require (to != address(this));\n    require (balances[msg.sender] >= tokens);\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    Transfer(msg.sender, to, tokens);\n    return true;\n  }\n\n  function approve(address spender, uint tokens) public returns (bool success) {\n    require (spender != address(this));\n    allowed[msg.sender][spender] = tokens;\n    Approval(msg.sender, spender, tokens);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n    require (now >= transferrableTime);\n    require (to != address(this));\n    require (allowed[from][msg.sender] >= tokens);\n    balances[from] = balances[from].sub(tokens);\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    Transfer(from, to, tokens);\n    return true;\n  }\n\n}\n\ncontract TEFoods827Token is TEFoodsToken, ERC827 {\n\n  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n    super.approve(_spender, _value);\n    require(_spender.call(_data));\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n    super.transfer(_to, _value);\n    require(_to.call(_data));\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n    super.transferFrom(_from, _to, _value);\n    require(_to.call(_data));\n    return true;\n  }\n\n}",
  "bytecode": "6060604052635ab37ea060015560008054600160a060020a033316600160a060020a03199182168117909116178155805260046020526b033b2e3c9fd0803ce80000007f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec556111df806100736000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063084bdabe146101a0578063095ea7b3146101d457806318160ddd1461020a57806323b872dd1461021d578063313ce567146102455780635c17f9f41461026e57806370a08231146102d35780637d2aeb8a146102f257806386ce02851461030a5780638da5cb5b1461032c57806395d89b411461035b578063a29cc6c81461036e578063a9059cbb14610393578063ab67aa58146103b5578063af35c6c714610421578063be45fd6214610434578063bf15ea7614610499578063dd62ed3e146104ac578063f2fde38b146104d1575b600080fd5b341561012157600080fd5b6101296104f0565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016557808201518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ab57600080fd5b6101c2600160a060020a0360043516602435610550565b60405190815260200160405180910390f35b34156101df57600080fd5b6101f6600160a060020a03600435166024356105e6565b604051901515815260200160405180910390f35b341561021557600080fd5b6101c2610672565b341561022857600080fd5b6101f6600160a060020a0360043581169060243516604435610679565b341561025057600080fd5b6102586107f3565b60405160ff909116815260200160405180910390f35b341561027957600080fd5b6101f660048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506107f895505050505050565b34156102de57600080fd5b6101c2600160a060020a0360043516610895565b34156102fd57600080fd5b6103086004356108b0565b005b341561031557600080fd5b6101f6600160a060020a0360043516602435610b32565b341561033757600080fd5b61033f610c5d565b604051600160a060020a03909116815260200160405180910390f35b341561036657600080fd5b610129610c6c565b341561037957600080fd5b6101f6600160a060020a0360043516602435604435610ca3565b341561039e57600080fd5b6101f6600160a060020a0360043516602435610e0a565b34156103c057600080fd5b6101f6600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f2295505050505050565b341561042c57600080fd5b6101f6610fc1565b341561043f57600080fd5b6101f660048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061103395505050505050565b34156104a457600080fd5b6101c261103f565b34156104b757600080fd5b6101c2600160a060020a0360043581169060243516611045565b34156104dc57600080fd5b610308600160a060020a0360043516611070565b606060405190810160405280603a81526020017f5445464f4f44204641524d20544f20464f524b20464f4f44205452414345414281526020017f494c4954592053595354454d204c4943454e534520544f4b454e00000000000081525081565b6000818152600660205260408120815b815460ff821610156105d95784600160a060020a0316828260ff1681548110151561058757fe5b6000918252602090912060029091020154600160a060020a031614156105d157818160ff168154811015156105b857fe5b90600052602060002090600202016001015492506105de565b600101610560565b600092505b505092915050565b600030600160a060020a031683600160a060020a03161415151561060957600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6003545b90565b60015460009042101561068b57600080fd5b30600160a060020a031683600160a060020a0316141515156106ac57600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054829010156106e057600080fd5b600160a060020a038416600090815260046020526040902054610709908363ffffffff61110b16565b600160a060020a038086166000908152600460209081526040808320949094556005815283822033909316825291909152205461074c908363ffffffff61110b16565b600160a060020a0380861660009081526005602090815260408083203385168452825280832094909455918616815260049091522054610792908363ffffffff61111d16565b600160a060020a03808516600081815260046020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b600061080484846105e6565b5083600160a060020a03168260405180828051906020019080838360005b8381101561083a578082015183820152602001610822565b50505050905090810190601f1680156108675780820380516001836020036101000a031916815260200191505b5091505060006040518083038160008661646e5a03f1915050151561088b57600080fd5b5060019392505050565b600160a060020a031660009081526004602052604090205490565b6000806108c88360015461111d90919063ffffffff16565b4210156108d457600080fd5b600083815260066020526040812054116108ed57600080fd5b600083815260066020526040812080548290811061090757fe5b90600052602060002090600202016001015411151561092557600080fd5b50506000818152600660205260408120905b815460ff82161015610b2d576109b4828260ff1681548110151561095757fe5b90600052602060002090600202016001015460046000858560ff1681548110151561097e57fe5b60009182526020808320600290920290910154600160a060020a031683528201929092526040019020549063ffffffff61111d16565b60046000848460ff168154811015156109c957fe5b60009182526020808320600290920290910154600160a060020a031683528201929092526040019020558154610a2b90839060ff8416908110610a0857fe5b90600052602060002090600202016001015460035461111d90919063ffffffff16565b6003558154610a6690839060ff8416908110610a4357fe5b90600052602060002090600202016001015460025461110b90919063ffffffff16565b6002558154600090839060ff8416908110610a7d57fe5b9060005260206000209060020201600101819055507f6bc5063c7239b75c8bf325a2a2238f726fada322163996bb6c93d5594fb119f0828260ff16815481101515610ac457fe5b60009182526020909120600290910201548354600160a060020a0390911690849060ff8516908110610af257fe5b906000526020600020906002020160010154604051600160a060020a03909216825260208201526040908101905180910390a1600101610937565b505050565b6000805433600160a060020a03908116911614610b4e57600080fd5b600160a060020a0383161515610b6357600080fd5b60008211610b7057600080fd5b60008052600460205260008051602061119483398151915254610b99908363ffffffff61110b16565b600460205260008051602061119483398151915255600160a060020a03831660009081526040902054610bd2908363ffffffff61111d16565b600160a060020a038416600090815260046020526040902055600354610bfe908363ffffffff61111d16565b6003819055600080526004602052600080516020611194833981519152546002546b033b2e3c9fd0803ce800000092610c4d9291610c419163ffffffff61111d16565b9063ffffffff61111d16565b14610c5457fe5b50600192915050565b600054600160a060020a031681565b60408051908101604052600581527f54464f4f44000000000000000000000000000000000000000000000000000000602082015281565b6000805433600160a060020a03908116911614610cbf57600080fd5b600160a060020a0384161515610cd457600080fd5b60008311610ce157600080fd5b60008211610cee57600080fd5b60008052600460205260008051602061119483398151915254610d17908463ffffffff61110b16565b600080516020611194833981519152556000828152600660205260409020805460018101610d458382611133565b9160005260206000209060020201600060408051908101604052600160a060020a0388168152602081018790529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201516001909101555050600254610dbf908463ffffffff61111d16565b6002819055600080526004602052600080516020611194833981519152546003546b033b2e3c9fd0803ce800000092610e039291610c41919063ffffffff61111d16565b1461088b57fe5b600154600090421015610e1c57600080fd5b30600160a060020a031683600160a060020a031614151515610e3d57600080fd5b600160a060020a03331660009081526004602052604090205482901015610e6357600080fd5b600160a060020a033316600090815260046020526040902054610e8c908363ffffffff61110b16565b600160a060020a033381166000908152600460205260408082209390935590851681522054610ec1908363ffffffff61111d16565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000610f2f858585610679565b5083600160a060020a03168260405180828051906020019080838360005b83811015610f65578082015183820152602001610f4d565b50505050905090810190601f168015610f925780820380516001836020036101000a031916815260200191505b5091505060006040518083038160008661646e5a03f19150501515610fb657600080fd5b506001949350505050565b6000805433600160a060020a03908116911614610fdd57600080fd5b600154610ff3426201518063ffffffff61111d16565b10156110105761100c426201518063ffffffff61111d16565b6001555b506000805473ffffffffffffffffffffffffffffffffffffffff19169055600190565b60006108048484610e0a565b60015481565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461108b57600080fd5b600160a060020a03811615156110a057600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561111757fe5b50900390565b60008282018381101561112c57fe5b9392505050565b815481835581811511610b2d57600083815260209020610b2d916106769160029182028101918502015b8082111561118f57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182015560020161115d565b5090560017ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3eca165627a7a72305820d5379aecd22d460c38a7096d55fe00093b947671deab5e8f6d575cd6d672266c0029"
}