{
  "address": "0x35223bc965dbd91b41ddf1f540e8c7e475853551",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Airdrop",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title -Airdrop\n * every erc20 token can doAirdrop here \n * Contact us for further cooperation [email protected]\n *\n *  █████╗  ██╗ ██████╗  ██████╗  ██████╗   ██████╗  ██████╗\n * ██╔══██╗ ██║ ██╔══██╗ ██╔══██╗ ██╔══██╗ ██╔═══██╗ ██╔══██╗\n * ███████║ ██║ ██████╔╝ ██║  ██║ ██████╔╝ ██║   ██║ ██████╔╝\n * ██╔══██║ ██║ ██╔══██╗ ██║  ██║ ██╔══██╗ ██║   ██║ ██╔═══╝\n * ██║  ██║ ██║ ██║  ██║ ██████╔╝ ██║  ██║ ╚██████╔╝ ██║\n * ╚═╝  ╚═╝ ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝  ╚═════╝  ╚═╝\n *\n * ---\n * POWERED BY\n * ╦   ╔═╗ ╦═╗ ╔╦╗ ╦   ╔═╗ ╔═╗ ╔═╗      ╔╦╗ ╔═╗ ╔═╗ ╔╦╗\n * ║   ║ ║ ╠╦╝  ║║ ║   ║╣  ╚═╗ ╚═╗       ║  ║╣  ╠═╣ ║║║\n * ╩═╝ ╚═╝ ╩╚═ ═╩╝ ╩═╝ ╚═╝ ╚═╝ ╚═╝       ╩  ╚═╝ ╩ ╩ ╩ ╩\n * game at http://lordless.games\n * code at https://github.com/lordlessio\n */\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n\n/**\n * @title Superuser\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\n * of a contract to a new address, even if he is not the owner.\n * A superuser can transfer his role to a new address.\n */\ncontract Superuser is Ownable, RBAC {\n  string public constant ROLE_SUPERUSER = \"superuser\";\n\n  constructor () public {\n    addRole(msg.sender, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Throws if called by any account that's not a superuser.\n   */\n  modifier onlySuperuser() {\n    checkRole(msg.sender, ROLE_SUPERUSER);\n    _;\n  }\n\n  modifier onlyOwnerOrSuperuser() {\n    require(msg.sender == owner || isSuperuser(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev getter to determine if address has superuser role\n   */\n  function isSuperuser(address _addr)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_addr, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\n   * @param _newSuperuser The address to transfer ownership to.\n   */\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\n    require(_newSuperuser != address(0));\n    removeRole(msg.sender, ROLE_SUPERUSER);\n    addRole(_newSuperuser, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\n    _transferOwnership(_newOwner);\n  }\n}\n\n\n/**\n * @title SafeMath\n */\nlibrary SafeMath {\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) \n      internal \n      pure \n      returns (uint256 c) \n  {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    require(c / a == b, \"SafeMath mul failed\");\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b)\n      internal\n      pure\n      returns (uint256) \n  {\n    require(b <= a, \"SafeMath sub failed\");\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b)\n      internal\n      pure\n      returns (uint256 c) \n  {\n    c = a + b;\n    require(c >= a, \"SafeMath add failed\");\n    return c;\n  }\n  \n  /**\n    * @dev gives square root of given x.\n    */\n  function sqrt(uint256 x)\n      internal\n      pure\n      returns (uint256 y) \n  {\n    uint256 z = ((add(x,1)) / 2);\n    y = x;\n    while (z < y) \n    {\n      y = z;\n      z = ((add((x / z),z)) / 2);\n    }\n  }\n  \n  /**\n    * @dev gives square. batchplies x by x\n    */\n  function sq(uint256 x)\n      internal\n      pure\n      returns (uint256)\n  {\n    return (mul(x,x));\n  }\n  \n  /**\n    * @dev x to the power of y \n    */\n  function pwr(uint256 x, uint256 y)\n      internal \n      pure \n      returns (uint256)\n  {\n    if (x==0)\n        return (0);\n    else if (y==0)\n        return (1);\n    else \n    {\n      uint256 z = x;\n      for (uint256 i=1; i < y; i++)\n        z = mul(z,x);\n      return (z);\n    }\n  }\n}\n\n\n/**\n * @title -airdrop Interface\n */\n\ninterface IAirdrop {\n\n  function isVerifiedUser(address user) external view returns (bool);\n  function isCollected(address user, bytes32 airdropId) external view returns (bool);\n  function getAirdropIds()external view returns(bytes32[]);\n  function getAirdropIdsByContractAddress(address contractAddress)external view returns(bytes32[]);\n  function getUser(address userAddress) external view returns (\n    address,\n    string,\n    uint256,\n    uint256\n  );\n  function getAirdrop(\n    bytes32 airdropId\n    ) external view returns (address, uint256, bool);\n  function updateVeifyFee(uint256 fee) external;\n  function verifyUser(string name) external payable;\n  function addAirdrop (address contractAddress, uint256 countPerUser, bool needVerifiedUser) external;\n  function claim(bytes32 airdropId) external;\n  function withdrawToken(address contractAddress, address to) external;\n  function withdrawEth(address to) external;\n\n  \n  \n\n  /* Events */\n\n  event UpdateVeifyFee (\n    uint256 indexed fee\n  );\n\n  event VerifyUser (\n    address indexed user\n  );\n\n  event AddAirdrop (\n    address indexed contractAddress,\n    uint256 countPerUser,\n    bool needVerifiedUser\n  );\n\n  event Claim (\n    bytes32 airdropId,\n    address user\n  );\n\n  event WithdrawToken (\n    address indexed contractAddress,\n    address to,\n    uint256 count\n  );\n\n  event WithdrawEth (\n    address to,\n    uint256 count\n  );\n}\n\n\n\n\n\n\n\ncontract ERC20Interface {\n  function transfer(address to, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n  function balanceOf(address tokenOwner) public view returns (uint balance);\n}\ncontract Airdrop is Superuser, Pausable, IAirdrop {\n\n  using SafeMath for *;\n\n  struct User {\n    address user;\n    string name;\n    uint256 verifytime;\n    uint256 verifyFee;\n  }\n\n  struct Airdrop {\n    address contractAddress;\n    uint256 countPerUser; // wei\n    bool needVerifiedUser;\n  }\n\n  uint256 public verifyFee = 2e16; // 0.02 eth\n  bytes32[] public airdropIds; //\n\n  mapping (address => User) public userAddressToUser;\n  mapping (address => bytes32[]) contractAddressToAirdropId;\n  mapping (bytes32 => Airdrop) airdropIdToAirdrop;\n  mapping (bytes32 => mapping (address => bool)) airdropIdToUserAddress;\n  mapping (address => uint256) contractAddressToAirdropCount;\n\n\n  function isVerifiedUser(address user) external view returns (bool){\n    return userAddressToUser[user].user == user;\n  }\n\n  function isCollected(address user, bytes32 airdropId) external view returns (bool) {\n    return airdropIdToUserAddress[airdropId][user];\n  }\n\n  function getAirdropIdsByContractAddress(address contractAddress)external view returns(bytes32[]){\n    return contractAddressToAirdropId[contractAddress];\n  }\n  function getAirdropIds()external view returns(bytes32[]){\n    return airdropIds;\n  }\n\n  function tokenTotalClaim(address contractAddress)external view returns(uint256){\n    return contractAddressToAirdropCount[contractAddress];\n  }\n\n  function getUser(\n    address userAddress\n    ) external view returns (address, string, uint256 ,uint256){\n    User storage user = userAddressToUser[userAddress];\n    return (user.user, user.name, user.verifytime, user.verifyFee);\n  }\n\n  function getAirdrop(\n    bytes32 airdropId\n    ) external view returns (address, uint256, bool){\n    Airdrop storage airdrop = airdropIdToAirdrop[airdropId];\n    return (airdrop.contractAddress, airdrop.countPerUser, airdrop.needVerifiedUser);\n  }\n  \n  function updateVeifyFee(uint256 fee) external onlyOwnerOrSuperuser{\n    verifyFee = fee;\n    emit UpdateVeifyFee(fee);\n  }\n\n  function verifyUser(string name) external payable whenNotPaused {\n    address sender = msg.sender;\n    require(!this.isVerifiedUser(sender), \"Is Verified User\");\n    uint256 _ethAmount = msg.value;\n    require(_ethAmount >= verifyFee, \"LESS FEE\");\n    uint256 payExcess = _ethAmount.sub(verifyFee);\n    if(payExcess > 0) {\n      sender.transfer(payExcess);\n    }\n    \n    User memory _user = User(\n      sender,\n      name,\n      block.timestamp,\n      verifyFee\n    );\n\n    userAddressToUser[sender] = _user;\n    emit VerifyUser(msg.sender);\n  }\n\n  function addAirdrop(address contractAddress, uint256 countPerUser, bool needVerifiedUser) external onlyOwnerOrSuperuser{\n    bytes32 airdropId = keccak256(\n      abi.encodePacked(block.timestamp, contractAddress, countPerUser, needVerifiedUser)\n    );\n\n    Airdrop memory _airdrop = Airdrop(\n      contractAddress,\n      countPerUser,\n      needVerifiedUser\n    );\n    airdropIdToAirdrop[airdropId] = _airdrop;\n    airdropIds.push(airdropId);\n    contractAddressToAirdropId[contractAddress].push(airdropId);\n    emit AddAirdrop(contractAddress, countPerUser, needVerifiedUser);\n  }\n\n  function claim(bytes32 airdropId) external whenNotPaused {\n\n    Airdrop storage _airdrop = airdropIdToAirdrop[airdropId];\n    if (_airdrop.needVerifiedUser) {\n      require(this.isVerifiedUser(msg.sender));\n    }\n    \n    require(!this.isCollected(msg.sender, airdropId), \"The same Airdrop can only be collected once per address.\");\n    ERC20Interface erc20 = ERC20Interface(_airdrop.contractAddress);\n    erc20.transfer(msg.sender, _airdrop.countPerUser);\n    airdropIdToUserAddress[airdropId][msg.sender] = true;\n    // update to\n    contractAddressToAirdropCount[_airdrop.contractAddress] = \n      contractAddressToAirdropCount[_airdrop.contractAddress].add(_airdrop.countPerUser);\n    emit Claim(airdropId, msg.sender);\n  }\n\n  function withdrawToken(address contractAddress, address to) external onlyOwnerOrSuperuser {\n    ERC20Interface erc20 = ERC20Interface(contractAddress);\n    uint256 balance = erc20.balanceOf(address(this));\n    erc20.transfer(to, balance);\n    emit WithdrawToken(contractAddress, to, balance);\n  }\n\n  function withdrawEth(address to) external onlySuperuser {\n    uint256 balance = address(this).balance;\n    to.transfer(balance);\n    emit WithdrawEth(to, balance);\n  }\n\n}",
  "bytecode": "6002805460ff1916905566470de4df82000060035560008054600160a060020a0319163390811790915560c0604052600960809081527f737570657275736572000000000000000000000000000000000000000000000060a0526200006e919064010000000062000074810204565b620001bf565b620000f0826001836040518082805190602001908083835b60208310620000ad5780518252601f1990920191602091820191016200008c565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506401000000006200019a810262001b031704565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b838110156200015b57818101518382015260200162000141565b50505050905090810190601f168015620001895780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b611c5e80620001cf6000396000f30060806040526004361061015e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630988ca8c8114610163578063217fe6c6146101cc57806325e16063146102475780633aeac4e1146102685780633da1c0c31461028f5780633f4ba83a146102b0578063559ac092146102c557806357c393fa146103365780635c975abb146103575780635ce32aca1461036c5780635e5fda85146103ae57806362f5aa4c146103d8578063669d43d4146103ed5780636f77926b14610402578063715018a6146104c25780638456cb59146104d757806389b61a85146104ec5780638ad8998c146105045780638da5cb5b1461052557806397eb0eab146105565780639977a1081461057f578063bceee05e146105a3578063bd66528a146105c4578063c1324de1146105dc578063e600c817146105fd578063ebb4f48414610610578063f2fde38b1461069a575b600080fd5b34801561016f57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ca958335600160a060020a03169536956044949193909101919081908401838280828437509497506106bb9650505050505050565b005b3480156101d857600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610233958335600160a060020a03169536956044949193909101919081908401838280828437509497506107299650505050505050565b604080519115158252519081900360200190f35b34801561025357600080fd5b506101ca600160a060020a036004351661079c565b34801561027457600080fd5b506101ca600160a060020a036004358116906024351661084e565b34801561029b57600080fd5b50610233600160a060020a03600435166109f0565b3480156102bc57600080fd5b506101ca610a11565b3480156102d157600080fd5b506102e6600160a060020a0360043516610a6e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561032257818101518382015260200161030a565b505050509050019250505060405180910390f35b34801561034257600080fd5b506101ca600160a060020a0360043516610adb565b34801561036357600080fd5b50610233610b7a565b34801561037857600080fd5b50610384600435610b83565b60408051600160a060020a0390941684526020840192909252151582820152519081900360600190f35b3480156103ba57600080fd5b506103c6600435610bb2565b60408051918252519081900360200190f35b3480156103e457600080fd5b506102e6610bd1565b3480156103f957600080fd5b506103c6610c2b565b34801561040e57600080fd5b50610423600160a060020a0360043516610c31565b6040518085600160a060020a0316600160a060020a0316815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561048457818101518382015260200161046c565b50505050905090810190601f1680156104b15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156104ce57600080fd5b506101ca610d05565b3480156104e357600080fd5b506101ca610d71565b3480156104f857600080fd5b506101ca600435610dd0565b34801561051057600080fd5b506103c6600160a060020a0360043516610e2b565b34801561053157600080fd5b5061053a610e46565b60408051600160a060020a039092168252519081900360200190f35b34801561056257600080fd5b506101ca600160a060020a03600435166024356044351515610e55565b34801561058b57600080fd5b50610233600160a060020a0360043516602435611055565b3480156105af57600080fd5b50610233600160a060020a036004351661107f565b3480156105d057600080fd5b506101ca6004356110b4565b3480156105e857600080fd5b50610423600160a060020a03600435166113c9565b6101ca6004803560248101910135611489565b34801561061c57600080fd5b5061062561173c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561065f578181015183820152602001610647565b50505050905090810190601f16801561068c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106a657600080fd5b506101ca600160a060020a0360043516611761565b610725826001836040518082805190602001908083835b602083106106f15780518252601f1990920191602091820191016106d2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611792565b5050565b6000610795836001846040518082805190602001908083835b602083106107615780518252601f199092019160209182019101610742565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506117a7565b9392505050565b60006107cb33604080519081016040528060098152602001600080516020611c138339815191528152506106bb565b50604051303190600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610805573d6000803e3d6000fd5b5060408051600160a060020a03841681526020810183905281517fccbd99ba6da8f29b2a4f65e474e3c3973564d356c162c08d45f3dc7f0cb5b3aa929181900390910190a15050565b600080548190600160a060020a031633148061086e575061086e3361107f565b151561087957600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050506040513d602081101561090757600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820184905291519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050506040513d60208110156109a257600080fd5b505060408051600160a060020a038581168252602082018490528251908716927f037238854fe57fbf51f09946f854fc3916fe83938d6521f09bd05463839f1304928290030190a250505050565b600160a060020a039081166000818152600560205260409020549091161490565b600054600160a060020a03163314610a2857600080fd5b60025460ff161515610a3957600080fd5b6002805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600160a060020a038116600090815260066020908152604091829020805483518184028101840190945280845260609392830182828015610acf57602002820191906000526020600020905b81548152600190910190602001808311610aba575b50505050509050919050565b610b0833604080519081016040528060098152602001600080516020611c138339815191528152506106bb565b600160a060020a0381161515610b1d57600080fd5b610b4a33604080519081016040528060098152602001600080516020611c138339815191528152506117c6565b610b7781604080519081016040528060098152602001600080516020611c138339815191528152506118d7565b50565b60025460ff1681565b600090815260076020526040902080546001820154600290920154600160a060020a039091169260ff90911690565b6004805482908110610bc057fe5b600091825260209091200154905081565b60606004805480602002602001604051908101604052809291908181526020018280548015610c2057602002820191906000526020600020905b81548152600190910190602001808311610c0b575b505050505090505b90565b60035481565b600160a060020a038181166000908152600560209081526040808320805460028083015460038401546001808601805488516101009382161593909302600019011694909404601f810189900489028201890190975286815297986060988a98899896909216959091859190830182828015610cee5780601f10610cc357610100808354040283529160200191610cee565b820191906000526020600020905b815481529060010190602001808311610cd157829003601f168201915b505050505092509450945094509450509193509193565b600054600160a060020a03163314610d1c57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610d8857600080fd5b60025460ff1615610d9857600080fd5b6002805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a0316331480610ded5750610ded3361107f565b1515610df857600080fd5b600381905560405181907f4c513053049823dd95156d0dbe75c250a1afe04b62dcaa8a8d2d099f2836029a90600090a250565b600160a060020a031660009081526009602052604090205490565b600054600160a060020a031681565b6000610e5f611b28565b600054600160a060020a0316331480610e7c5750610e7c3361107f565b1515610e8757600080fd5b60408051426020808301919091526c01000000000000000000000000600160a060020a0389160282840152605482018790527f010000000000000000000000000000000000000000000000000000000000000086151502607483015282516055818403018152607590920192839052815191929182918401908083835b60208310610f235780518252601f199092019160209182019101610f04565b51815160209384036101000a600019018019909216911617905260408051929094018290038220606083018552600160a060020a038c81168085528484018d81528c15158689018181526000868152600788528a81208951815473ffffffffffffffffffffffffffffffffffffffff19169716969096178655925160018087019190915590516002909501805460ff191695151595909517909455600480548086019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01859055828252600686528882208054948501815582529085902090920183905586518d81529384019190915285519199509297509195507faef626be1e9e10a1e186cebefba6f6f988afb2a7f04b3b489a38a01a74d7ab219450819003909201919050a25050505050565b6000908152600860209081526040808320600160a060020a03949094168352929052205460ff1690565b60006110ae82604080519081016040528060098152602001600080516020611c13833981519152815250610729565b92915050565b600254600090819060ff16156110c957600080fd5b6000838152600760205260409020600281015490925060ff161561117657604080517f3da1c0c300000000000000000000000000000000000000000000000000000000815233600482015290513091633da1c0c39160248083019260209291908290030181600087803b15801561113f57600080fd5b505af1158015611153573d6000803e3d6000fd5b505050506040513d602081101561116957600080fd5b5051151561117657600080fd5b604080517f9977a1080000000000000000000000000000000000000000000000000000000081523360048201526024810185905290513091639977a1089160448083019260209291908290030181600087803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b505050506040513d60208110156111ff57600080fd5b50511561127c576040805160e560020a62461bcd02815260206004820152603860248201527f5468652073616d652041697264726f702063616e206f6e6c7920626520636f6c60448201527f6c6563746564206f6e63652070657220616464726573732e0000000000000000606482015290519081900360840190fd5b5080546001820154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251600160a060020a0390921691829163a9059cbb9160448083019260209291908290030181600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d602081101561131957600080fd5b505060008381526008602090815260408083203384528252808320805460ff191660019081179091558501548554600160a060020a0316845260099092529091205461136a9163ffffffff6119a916565b8254600160a060020a0316600090815260096020908152604091829020929092558051858152339281019290925280517f15d625b4b35864ffb5bdbb3fc4b62ceb07b3c588af6945a1934ccb822a2397559281900390910190a1505050565b6005602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a039092169492939092908301828280156114735780601f1061144857610100808354040283529160200191611473565b820191906000526020600020905b81548152906001019060200180831161145657829003601f168201915b5050505050908060020154908060030154905084565b6000806000611496611b48565b60025460ff16156114a657600080fd5b604080517f3da1c0c3000000000000000000000000000000000000000000000000000000008152336004820181905291519195503091633da1c0c3916024808201926020929091908290030181600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b505050506040513d602081101561152e57600080fd5b505115611585576040805160e560020a62461bcd02815260206004820152601060248201527f4973205665726966696564205573657200000000000000000000000000000000604482015290519081900360640190fd5b6003543493508310156115e2576040805160e560020a62461bcd02815260206004820152600860248201527f4c45535320464545000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6003546115f690849063ffffffff611a0416565b9150600082111561163957604051600160a060020a0385169083156108fc029084906000818181858888f19350505050158015611637573d6000803e3d6000fd5b505b60806040519081016040528085600160a060020a0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437505050928452505042602080840191909152600354604093840152600160a060020a03888116600090815260058352939093208451815473ffffffffffffffffffffffffffffffffffffffff1916941693909317835583810151805194955085946116f3935060018501929190910190611b7a565b5060408281015160028301556060909201516003909101555133907f2a5effbcc0d15a981fe0f4b1e4d0c5a8cd604a70619f51f91898b3aa0344885790600090a2505050505050565b6040805180820190915260098152600080516020611c13833981519152602082015281565b600054600160a060020a031633148061177e575061177e3361107f565b151561178957600080fd5b610b7781611a64565b61179c82826117a7565b151561072557600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b611830826001836040518082805190602001908083835b602083106117fc5780518252601f1990920191602091820191016117dd565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611ae1565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015611899578181015183820152602001611881565b50505050905090810190601f1680156118c65780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b611941826001836040518082805190602001908083835b6020831061190d5780518252601f1990920191602091820191016118ee565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611b03565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015611899578181015183820152602001611881565b818101828110156110ae576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820616464206661696c656400000000000000000000000000604482015290519081900360640190fd5b600082821115611a5e576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b50900390565b600160a060020a0381161515611a7957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b604080516060810182526000808252602082018190529181019190915290565b6080604051908101604052806000600160a060020a031681526020016060815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611bbb57805160ff1916838001178555611be8565b82800160010185558215611be8579182015b82811115611be8578251825591602001919060010190611bcd565b50611bf4929150611bf8565b5090565b610c2891905b80821115611bf45760008155600101611bfe56007375706572757365720000000000000000000000000000000000000000000000a165627a7a7230582012db2134f69419dd28d602cad89d600d28ddd3c19d261f35f66768e9c983d39c0029"
}