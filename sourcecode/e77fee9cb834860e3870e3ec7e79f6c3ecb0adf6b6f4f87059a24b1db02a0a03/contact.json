{
  "address": "0x9fc07eacd9fabe1ac4cf3b4cf06b84b18eabdc4f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KitFutureToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-04\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract KitFutureToken {\n    address public owner;\n    mapping(address => uint256) balances;\n    using SafeMath for uint256;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    string public constant name = \"Karma Future Token\";\n    string public constant symbol = \"KIT-FUTURE\";\n    uint8 public constant decimals = 18;\n    \n    function KitFutureToken() public {\n        owner = msg.sender;\n    }\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function issueTokens(address[] _recipients, uint256[] _amounts) public onlyOwner {\n        require(_recipients.length != 0 && _recipients.length == _amounts.length);\n        \n        for (uint i = 0; i < _recipients.length; i++) {\n            balances[_recipients[i]] = balances[_recipients[i]].add(_amounts[i]);\n            emit Transfer(address(0), _recipients[i], _amounts[i]);\n        }\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061065d806100606000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461007d578063313ce5671461010d57806370a082311461013e5780637c8f76a1146101955780638da5cb5b1461023e57806395d89b4114610295575b600080fd5b34801561008957600080fd5b50610092610325565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d25780820151818401526020810190506100b7565b50505050905090810190601f1680156100ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011957600080fd5b5061012261035e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561014a57600080fd5b5061017f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610363565b6040518082815260200191505060405180910390f35b3480156101a157600080fd5b5061023c60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506103ac565b005b34801561024a57600080fd5b506102536105b5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a157600080fd5b506102aa6105da565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ea5780820151818401526020810190506102cf565b50505050905090810190601f1680156103175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805190810160405280601281526020017f4b61726d612046757475726520546f6b656e000000000000000000000000000081525081565b601281565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561040957600080fd5b600083511415801561041c575081518351145b151561042757600080fd5b600090505b82518110156105b0576104b5828281518110151561044657fe5b9060200190602002015160016000868581518110151561046257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461061390919063ffffffff16565b6001600085848151811015156104c757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828181518110151561051d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef848481518110151561058457fe5b906020019060200201516040518082815260200191505060405180910390a3808060010191505061042c565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600a81526020017f4b49542d4655545552450000000000000000000000000000000000000000000081525081565b600080828401905083811015151561062757fe5b80915050929150505600a165627a7a72305820f8ab2a9c74a2c10fc0893e331427e1ab7d4bac65f259c237a654690d2dda41770029"
}