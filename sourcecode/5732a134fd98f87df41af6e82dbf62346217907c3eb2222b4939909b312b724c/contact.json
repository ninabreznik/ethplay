{
  "address": "0xd894527f4c5eeffc75c393c3c835471ffe0f6d1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TuneTradeToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\npragma solidity 0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n/**\n * @title MinterRole\n * @dev Role who can mint the new tokens\n */\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n/**\n * @title TuneTradeToken burnable and mintable smart contract\n */\ncontract TuneTradeToken is ERC20Burnable, ERC20Mintable {\n    string private constant _name = \"TuneTradeX\";\n    string private constant _symbol = \"TXT\";\n    uint8 private constant _decimals = 18;\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n/**\n * @title WhitelistedRole\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n * it), and not Whitelisteds themselves.\n */\ncontract WhitelistedRole is WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(msg.sender);\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\n/**\n * @title TeamRole\n * @dev TeamRole should be able to swap tokens with other limits\n */\ncontract TeamRole is WhitelistedRole {\n    using Roles for Roles.Role;\n\n    event TeamMemberAdded(address indexed account);\n    event TeamMemberRemoved(address indexed account);\n\n    Roles.Role private _team;\n\n    modifier onlyTeamMember() {\n        require(isTeamMember(msg.sender));\n        _;\n    }\n\n    function isTeamMember(address account) public view returns (bool) {\n        return _team.has(account);\n    }\n\n    function _addTeam(address account) internal onlyWhitelistAdmin {\n        _team.add(account);\n        emit TeamMemberAdded(account);\n    }\n\n    function removeTeam(address account) public onlyWhitelistAdmin {\n        _team.remove(account);\n        emit TeamMemberRemoved(account);\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n}\n\n/**\n * @title SwapContract\n * @dev The ERC20 to ERC20 tokens swapping smart contract, which should replace the old TXT tokens with the new TXT tokens\n */\ncontract SwapContract is TeamRole {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private _remaining;\n    uint256 private _lastReset;\n\n    uint256 private constant _period = 1 days;\n    uint256 private constant _publicLimit = 10000 * 1 ether;\n    uint256 private constant _teamLimit = 30000 * 1 ether;\n    uint256 private constant _contractLimit = 100000 * 1 ether;\n\n    address private constant _swapMaster = 0x26a9f0b85db899237c6F07603475df43Eb366F8b;\n\n    struct SwapInfo {\n        bool alreadyWhitelisted;\n        uint256 availableTokens;\n        uint256 lastSwapTimestamp;\n    }\n\n    mapping (address => SwapInfo) private _infos;\n\n    IERC20 private _newToken;\n    IERC20 private _oldToken = IERC20(0xA57a2aD52AD6b1995F215b12fC037BffD990Bc5E);\n\n    event MasterTokensSwapped(uint256 amount);\n    event TokensSwapped(address swapper, uint256 amount);\n    event TeamTokensSwapped(address swapper, uint256 amount);\n    event SwapApproved(address swapper, uint256 amount);\n\n    /**\n     * @dev The constructor of SwapContract, which will deploy the TXT Token and can mint new tokens for swappers\n     */\n    constructor () public {\n        _newToken = IERC20(address(new TuneTradeToken()));\n        \n        _newToken.mint(_swapMaster, 50000010000000000000000010);\n        emit MasterTokensSwapped(50000010000000000000000010);\n            \n        _reset();\n    }\n\n    // -----------------------------------------\n    // EXTERNAL\n    // -----------------------------------------\n\n    function approveSwap(address swapper) public onlyWhitelistAdmin {\n        require(swapper != address(0), \"approveSwap: invalid swapper address\");\n\n        uint256 balance = _oldToken.balanceOf(swapper);\n        require(balance > 0, \"approveSwap: the swapper token balance is zero\");\n        require(_infos[swapper].alreadyWhitelisted == false, \"approveSwap: the user already swapped his tokens\");\n\n        _addWhitelisted(swapper);\n        _infos[swapper] = SwapInfo({\n            alreadyWhitelisted: true,\n            availableTokens: balance,\n            lastSwapTimestamp: 0\n        });\n\n        emit SwapApproved(swapper, balance);\n    }\n\n    function approveTeam(address member) external onlyWhitelistAdmin {\n        require(member != address(0), \"approveTeam: invalid team address\");\n\n        _addTeam(member);\n        approveSwap(member);\n    }\n\n    function swap() external onlyWhitelisted {\n        if (now >= _lastReset + _period) {\n            _reset();\n        }\n\n        require(_remaining != 0, \"swap: no tokens available\");\n        require(_infos[msg.sender].availableTokens != 0, \"swap: no tokens available for swap\");\n        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swap: msg.sender can not call this method now\");\n\n        uint256 toSwap = _infos[msg.sender].availableTokens;\n\n        if (toSwap > _publicLimit) {\n            toSwap = _publicLimit;\n        }\n\n        if (toSwap > _remaining) {\n            toSwap = _remaining;\n        }\n\n        if (toSwap > _oldToken.balanceOf(msg.sender)) {\n            toSwap = _oldToken.balanceOf(msg.sender);\n        }\n\n        _swap(toSwap);\n        _update(toSwap);\n        _remaining = _remaining.sub(toSwap);\n\n        emit TokensSwapped(msg.sender, toSwap);\n    }\n\n    function swapTeam() external onlyTeamMember {\n        require(_infos[msg.sender].availableTokens != 0, \"swapTeam: no tokens available for swap\");\n        require(now >= _infos[msg.sender].lastSwapTimestamp + _period, \"swapTeam: team member can not call this method now\");\n\n        uint256 toSwap = _infos[msg.sender].availableTokens;\n\n        if (toSwap > _teamLimit) {\n            toSwap = _teamLimit;\n        }\n\n        if (toSwap > _oldToken.balanceOf(msg.sender)) {\n            toSwap = _oldToken.balanceOf(msg.sender);\n        }\n\n        _swap(toSwap);\n        _update(toSwap);\n\n        emit TeamTokensSwapped(msg.sender, toSwap);\n    }\n\n    function swapMaster(uint256 amount) external {\n        require(msg.sender == _swapMaster, \"swapMaster: only swap master can call this methid\");\n        _swap(amount);\n        emit MasterTokensSwapped(amount);\n    }\n\n    // -----------------------------------------\n    // GETTERS\n    // -----------------------------------------\n\n    function getSwappableAmount(address swapper) external view returns (uint256) {\n        return _infos[swapper].availableTokens;\n    }\n\n    function getTimeOfLastSwap(address swapper) external view returns (uint256) {\n        return _infos[swapper].lastSwapTimestamp;\n    }\n\n    function getRemaining() external view returns (uint256) {\n        return _remaining;\n    }\n\n    function getLastReset() external view returns (uint256) {\n        return _lastReset;\n    }\n\n    function getTokenAddress() external view returns (address) {\n        return address(_newToken);\n    }\n\n    // -----------------------------------------\n    // INTERNAL\n    // -----------------------------------------\n\n    function _reset() private {\n        _lastReset = now;\n        _remaining = _contractLimit;\n    }\n\n    function _update(uint256 amountToSwap) private {\n        _infos[msg.sender].availableTokens = _infos[msg.sender].availableTokens.sub(amountToSwap);\n        _infos[msg.sender].lastSwapTimestamp = now;\n    }\n\n    function _swap(uint256 amountToSwap) private {\n        _oldToken.safeTransferFrom(msg.sender, address(this), amountToSwap);\n        _newToken.mint(msg.sender, amountToSwap);\n    }\n}",
  "bytecode": "60806040526100163364010000000061001b810204565b6100f8565b61003360038264010000000061091a61006a82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a038116151561007f57600080fd5b61009282826401000000006100c1810204565b1561009c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156100d857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610994806101076000396000f3fe608060405234801561001057600080fd5b5060043610610112576000357c01000000000000000000000000000000000000000000000000000000009004806342966c68116100b4578063a457c2d711610083578063a457c2d714610313578063a9059cbb1461033f578063aa271e1a1461036b578063dd62ed3e1461039157610112565b806342966c681461029a57806370a08231146102b957806379cc6790146102df57806395d89b411461030b57610112565b806323b872dd116100f057806323b872dd146101ee578063313ce56714610224578063395093511461024257806340c10f191461026e57610112565b806306fdde0314610117578063095ea7b31461019457806318160ddd146101d4575b600080fd5b61011f6103bf565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610159578181015183820152602001610141565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101c0600480360360408110156101aa57600080fd5b50600160a060020a0381351690602001356103f6565b604080519115158252519081900360200190f35b6101dc61040c565b60408051918252519081900360200190f35b6101c06004803603606081101561020457600080fd5b50600160a060020a03813581169160208101359091169060400135610412565b61022c610469565b6040805160ff9092168252519081900360200190f35b6101c06004803603604081101561025857600080fd5b50600160a060020a03813516906020013561046e565b6101c06004803603604081101561028457600080fd5b50600160a060020a0381351690602001356104aa565b6102b7600480360360208110156102b057600080fd5b50356104ca565b005b6101dc600480360360208110156102cf57600080fd5b5035600160a060020a03166104d7565b6102b7600480360360408110156102f557600080fd5b50600160a060020a0381351690602001356104f2565b61011f610500565b6101c06004803603604081101561032957600080fd5b50600160a060020a038135169060200135610537565b6101c06004803603604081101561035557600080fd5b50600160a060020a038135169060200135610573565b6101c06004803603602081101561038157600080fd5b5035600160a060020a0316610580565b6101dc600480360360408110156103a757600080fd5b50600160a060020a0381358116916020013516610599565b60408051808201909152600a81527f54756e6554726164655800000000000000000000000000000000000000000000602082015290565b60006104033384846105c4565b50600192915050565b60025490565b600061041f848484610650565b600160a060020a03841660009081526001602090815260408083203380855292529091205461045f91869161045a908663ffffffff61071d16565b6105c4565b5060019392505050565b601290565b336000818152600160209081526040808320600160a060020a0387168452909152812054909161040391859061045a908663ffffffff61073216565b60006104b533610580565b15156104c057600080fd5b610403838361074b565b6104d433826107f5565b50565b600160a060020a031660009081526020819052604090205490565b6104fc828261089e565b5050565b60408051808201909152600381527f5458540000000000000000000000000000000000000000000000000000000000602082015290565b336000818152600160209081526040808320600160a060020a0387168452909152812054909161040391859061045a908663ffffffff61071d16565b6000610403338484610650565b600061059360038363ffffffff6108e316565b92915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a03821615156105d957600080fd5b600160a060020a03831615156105ee57600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216151561066557600080fd5b600160a060020a03831660009081526020819052604090205461068e908263ffffffff61071d16565b600160a060020a0380851660009081526020819052604080822093909355908416815220546106c3908263ffffffff61073216565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561072c57600080fd5b50900390565b60008282018381101561074457600080fd5b9392505050565b600160a060020a038216151561076057600080fd5b600254610773908263ffffffff61073216565b600255600160a060020a03821660009081526020819052604090205461079f908263ffffffff61073216565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216151561080a57600080fd5b60025461081d908263ffffffff61071d16565b600255600160a060020a038216600090815260208190526040902054610849908263ffffffff61071d16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6108a882826107f5565b600160a060020a0382166000908152600160209081526040808320338085529252909120546104fc91849161045a908563ffffffff61071d16565b6000600160a060020a03821615156108fa57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a038116151561092f57600080fd5b61093982826108e3565b1561094357600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fea165627a7a723058202c3091c23a62624928e7912a251c2650f93b5d2bca1f1abaa45317a05ef2ee680029"
}