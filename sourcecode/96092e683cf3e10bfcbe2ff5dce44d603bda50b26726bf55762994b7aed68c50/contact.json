{
  "address": "0x1736ac66fe33030fe27805af041789ec2fde9925",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthBattle",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract EthBattle is Ownable {\n    using SafeMath for uint256;\n\n    uint256 constant TOKEN_USE_BONUS = 15; //%, adds weight of win on top of the market price\n    uint256 constant REFERRAL_REWARD = 2 ether; // GTA, 10*19\n    uint256 public MIN_PLAY_AMOUNT = 50 finney; //wei, equal 0.05 ETH\n\n    uint256 public META_BET_WEIGHT = 10 finney; //wei, equal to 0.01 ETH\n\n    uint256 public roundIndex = 0;\n    mapping(uint256 => address) public rounds;\n\n    address[] private currentRewardingAddresses;\n\n    PlaySeedInterface private playSeedGenerator;\n    GTAInterface public token;\n    AMUStoreInterface public store;\n\n    address public startersProxyAddress;\n\n    mapping(address => address) public referralBacklog; //backlog of players and their referrals\n\n    mapping(address => uint256) public tokens; //map of deposited tokens\n\n    event RoundCreated(address createdAddress, uint256 index);\n    event Deposit(address user, uint amount, uint balance);\n    event Withdraw(address user, uint amount, uint balance);\n\n    /**\n    * @dev Default fallback function, just deposits funds to the pot\n    */\n    function () public payable {\n        getLastRound().getDevWallet().transfer(msg.value);\n    }\n\n    /**\n    * @dev The EthBattle constructor\n    * @param _playSeedAddress address of the play seed generator\n    * @param _tokenAddress GTA address\n    * @param _storeAddress store contract address\n    */\n    constructor (address _playSeedAddress, address _tokenAddress, address _storeAddress, address _proxyAddress) public {\n        playSeedGenerator = PlaySeedInterface(_playSeedAddress);\n        token = GTAInterface(_tokenAddress);\n        store = AMUStoreInterface(_storeAddress);\n        startersProxyAddress = _proxyAddress;\n    }\n\n    modifier onlyProxy() {\n        require(msg.sender == startersProxyAddress);\n        _;\n    }\n\n    /**\n    * @dev Try (must be allowed by the seed generator itself) to claim ownership of the seed generator\n    */\n    function claimSeedOwnership() onlyOwner public {\n        playSeedGenerator.claimOwnership();\n    }\n\n    /**\n    * @dev Inject the new round contract, and sets the round with a new index\n    * NOTE! Injected round must have had transferred ownership to this EthBattle already\n    * @param _roundAddress address of the new round to use\n    */\n    function startRound(address _roundAddress) onlyOwner public {\n        RoundInterface round = RoundInterface(_roundAddress);\n\n        round.claimOwnership();\n\n        roundIndex++;\n        rounds[roundIndex] = round;\n        emit RoundCreated(round, roundIndex);\n    }\n\n    /**\n    * @dev Player starts a new play providing\n    * @param _referral (Optional) referral address is any\n    * @param _gtaBet (Optional) additional bet in GTA\n    */\n    function play(address _referral, uint256 _gtaBet) public payable {\n        address player = msg.sender;\n        uint256 weiAmount = msg.value;\n\n        require(player != address(0), \"Player's address is missing\");\n        require(weiAmount >= MIN_PLAY_AMOUNT, \"The bet is too low\");\n        require(_gtaBet <= balanceOf(player), \"Player's got not enough GTA\");\n\n        uint256 _bet = aggregateBet(weiAmount, _gtaBet);\n\n        playInternal(player, weiAmount, _bet, _referral, _gtaBet);\n    }\n\n    /**\n    * @dev Etherless player starts a new play, when actually the gas fee is payed\n    * by the sender and the bet is set by the proxy\n    * @param _player The actual player\n    * @param _referral (Optional) referral address is any\n    * @param _gtaBet (Optional) additional bet in GTA\n    */\n    function playMeta(address _player, address _referral, uint256 _gtaBet) onlyProxy public payable {\n        uint256 weiAmount = msg.value;\n\n        require(_player != address(0), \"Player's address is missing\");\n        require(_gtaBet <= balanceOf(_player), \"Player's got not enough GTA\");\n\n        //Important! For meta plays the 'weight' is not connected the the actual bet (since the bet comes from proxy)\n        //but static and equals META_BET_WEIGHT\n        uint256 _bet = aggregateBet(META_BET_WEIGHT, _gtaBet);\n\n        playInternal(_player, weiAmount, _bet, _referral, _gtaBet);\n    }\n\n    function playInternal(address _player, uint256 _weiBet, uint256 _betWeight, address _referral, uint256 _gtaBet) internal {\n        if (_referral != address(0) && referralBacklog[_player] == address(0)) {\n            //new referral for this _player\n            referralBacklog[_player] = _referral;\n            //reward the referral. Tokens remains in this contract\n            //but become available for withdrawal by _referral\n            transferInternally(owner, _referral, REFERRAL_REWARD);\n        }\n\n        playSeedGenerator.newPlaySeed(_player);\n\n        if (_gtaBet > 0) {\n            //player's using GTA\n            transferInternally(_player, owner, _gtaBet);\n        }\n\n        if (referralBacklog[_player] != address(0)) {\n            //ongoing round might not know about the _referral\n            //delegate the knowledge of the referral to the ongoing round\n            getLastRound().setReferral(_player, referralBacklog[_player]);\n        }\n        getLastRound().playRound.value(_weiBet)(_player, _betWeight);\n    }\n\n    /**\n    * @dev Player claims a win\n    * @param _seed secret seed\n    */\n    function win(bytes32 _seed) public {\n        address player = msg.sender;\n        winInternal(player, _seed);\n    }\n\n    /**\n    * @dev Player claims a win\n    * @param _player etherless player claims\n    * @param _seed secret seed\n    */\n    function winMeta(address _player, bytes32 _seed) onlyProxy public {\n        winInternal(_player, _seed);\n    }\n\n    function winInternal(address _player, bytes32 _seed) internal {\n        require(_player != address(0), \"Winner's address is missing\");\n        require(playSeedGenerator.findSeed(_player) == _seed, \"Wrong seed!\");\n        playSeedGenerator.cleanSeedUp(_player);\n\n        getLastRound().win(_player);\n    }\n\n    function findSeedAuthorized(address player) onlyOwner public view returns (bytes32){\n        return playSeedGenerator.findSeed(player);\n    }\n\n    function aggregateBet(uint256 _bet, uint256 _gtaBet) internal view returns (uint256) {\n        //get market price of the GTA, multiply by bet, and apply a bonus on it.\n        //since both 'price' and 'bet' are in 'wei', we need to drop 10*18 decimals at the end\n        uint256 _gtaValueWei = store.getTokenBuyPrice().mul(_gtaBet).div(1 ether).mul(100 + TOKEN_USE_BONUS).div(100);\n\n        //sum up with ETH bet\n        uint256 _resultBet = _bet.add(_gtaValueWei);\n\n        return _resultBet;\n    }\n\n    /**\n    * @dev Calculates the prize amount for this player by now\n    * Note: the result is not the final one and a subject to change once more plays/wins occur\n    * @return The prize in wei\n    */\n    function prizeByNow() public view returns (uint256) {\n        return getLastRound().currentPrize(msg.sender);\n    }\n\n    /**\n    * @dev Calculates the prediction on the prize amount for this player and this bet\n    * Note: the result is not the final one and a subject to change once more plays/wins occur\n    * @param _bet hypothetical bet in wei\n    * @param _gtaBet hypothetical bet in GTA\n    * @return The prediction in wei\n    */\n    function prizeProjection(uint256 _bet, uint256 _gtaBet) public view returns (uint256) {\n        return getLastRound().projectedPrizeForPlayer(msg.sender, aggregateBet(_bet, _gtaBet));\n    }\n\n\n    /**\n    * @dev Deposit GTA to the EthBattle contract so it can be spent (used) immediately\n    * Note: this call must follow the approve() call on the token itself\n    * @param _amount amount to deposit\n    */\n    function depositGTA(uint256 _amount) public {\n        require(token.transferFrom(msg.sender, this, _amount), \"Insufficient funds\");\n        tokens[msg.sender] = tokens[msg.sender].add(_amount);\n        emit Deposit(msg.sender, _amount, tokens[msg.sender]);\n    }\n\n    /**\n    * @dev Withdraw GTA from this contract to the own (caller) address\n    * @param _amount amount to withdraw\n    */\n    function withdrawGTA(uint256 _amount) public {\n        require(tokens[msg.sender] >= _amount, \"Amount exceeds the available balance\");\n        tokens[msg.sender] = tokens[msg.sender].sub(_amount);\n        require(token.transfer(msg.sender, _amount), \"Amount exceeds the available balance\");\n        emit Withdraw(msg.sender, _amount, tokens[msg.sender]);\n    }\n\n    /**\n    * @dev Internal transfer of the token.\n    * Funds remain in this contract but become available for withdrawal\n    */\n    function transferInternally(address _from, address _to, uint256 _amount) internal {\n        require(tokens[_from] >= _amount, \"Too much to transfer\");\n        tokens[_from] = tokens[_from].sub(_amount);\n        tokens[_to] = tokens[_to].add(_amount);\n    }\n\n    /**\n    * @dev Interrupts the round to enable participants to claim funds back\n    */\n    function interruptLastRound() onlyOwner public {\n        getLastRound().enableRefunds();\n    }\n\n    /**\n    * @dev End last round so no new plays is possible, but ongoing plays are fine to win\n    */\n    function finishLastRound() onlyOwner public {\n        getLastRound().coolDown();\n    }\n\n    function getLastRound() public view returns (RoundInterface){\n        return RoundInterface(rounds[roundIndex]);\n    }\n\n    function getLastRoundAddress() external view returns (address){\n        return rounds[roundIndex];\n    }\n\n    function balanceOf(address _user) public view returns (uint256) {\n        return tokens[_user];\n    }\n\n    function setPlaySeed(address _playSeedAddress) onlyOwner public {\n        playSeedGenerator = PlaySeedInterface(_playSeedAddress);\n    }\n\n    function setStore(address _storeAddress) onlyOwner public {\n        store = AMUStoreInterface(_storeAddress);\n    }\n\n    function getTokenBuyPrice() public view returns (uint256) {\n        return store.getTokenBuyPrice();\n    }\n\n    function getTokenSellPrice() public view returns (uint256) {\n        return store.getTokenSellPrice();\n    }\n\n    /**\n    * @dev Recover the history of referrals in case of the contract migration.\n    */\n    function setReferralsMap(address[] _players, address[] _referrals) onlyOwner public {\n        require(_players.length == _referrals.length, \"Size of players must be equal to the size of referrals\");\n        for (uint i = 0; i < _players.length; ++i) {\n            referralBacklog[_players[i]] = _referrals[i];\n        }\n    }\n\n    function getStartersProxyAddress() external view returns (address) {\n        return startersProxyAddress;\n    }\n\n    function setStartersProxyAddress(address _newProxyAddress) onlyOwner public  {\n        startersProxyAddress = _newProxyAddress;\n    }\n\n    function setMetaBetWeight(uint256 _newMetaBet) onlyOwner public {\n        META_BET_WEIGHT = _newMetaBet;\n    }\n\n    function setMinBet(uint256 _newMinBet) onlyOwner public {\n        MIN_PLAY_AMOUNT = _newMinBet;\n    }\n\n}\n/**\n * @title PlaySeed contract interface\n */\ninterface PlaySeedInterface {\n\n    function newPlaySeed(address _player) external;\n\n    function findSeed(address _player) external view returns (bytes32);\n\n    function cleanSeedUp(address _player) external;\n\n    function claimOwnership() external;\n\n}\n\n/**\n * @title GTA contract interface\n */\ninterface GTAInterface {\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n}\n\n/**\n * @title EthBattleRound contract interface\n */\ninterface RoundInterface {\n\n    function claimOwnership() external;\n\n    function setReferral(address _player, address _referral) external;\n\n    function playRound(address _player, uint256 _bet) external payable;\n\n    function enableRefunds() external;\n\n    function coolDown() external;\n\n    function currentPrize(address _player) external view returns (uint256);\n\n    function projectedPrizeForPlayer(address _player, uint256 _bet) external view returns (uint256);\n\n    function win(address _player) external;\n\n    function getDevWallet() external view returns (address);\n\n}\n\n/**\n * @title Ammu-Nation contract interface\n */\ninterface AMUStoreInterface {\n\n    function getTokenBuyPrice() external view returns (uint256);\n\n    function getTokenSellPrice() external view returns (uint256);\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_roundAddress\",\"type\":\"address\"}],\"name\":\"startRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimSeedOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newProxyAddress\",\"type\":\"address\"}],\"name\":\"setStartersProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storeAddress\",\"type\":\"address\"}],\"name\":\"setStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_players\",\"type\":\"address[]\"},{\"name\":\"_referrals\",\"type\":\"address[]\"}],\"name\":\"setReferralsMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"interruptLastRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"winMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_gtaBet\",\"type\":\"uint256\"}],\"name\":\"playMeta\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PLAY_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartersProxyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMetaBet\",\"type\":\"uint256\"}],\"name\":\"setMetaBetWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeByNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGTA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBacklog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"win\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playSeedAddress\",\"type\":\"address\"}],\"name\":\"setPlaySeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"META_BET_WEIGHT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startersProxyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositGTA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bet\",\"type\":\"uint256\"},{\"name\":\"_gtaBet\",\"type\":\"uint256\"}],\"name\":\"prizeProjection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"findSeedAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishLastRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRoundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_gtaBet\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_playSeedAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_storeAddress\",\"type\":\"address\"},{\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"createdAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405266b1a2bc2ec50000600155662386f26fc10000600255600060035534801561002b57600080fd5b50604051608080611cc883398101604090815281516020830151918301516060909301516000805433600160a060020a0319918216178255600680548216600160a060020a039586161790556007805482169585169590951790945560088054851695841695909517909455600980549093169116179055611c159081906100b390396000f3006080604052600436106101b35763ffffffff60e060020a600035041663037051eb811461025d578063067ade9f14610280578063078cc1cb14610295578063087cbd40146102b65780630cdbf3dd146102d75780631aa19567146103655780631c42daf71461037a5780632acf85511461039e578063325397ca146103bb5780634231a2c3146103e25780634760eee3146104135780634b9ee10614610428578063648036ae146104405780636b8c261e146104555780636ed5f8801461046a57806370a0823114610482578063715018a6146104a35780637c8c8e17146104b857806388550b6a146104d957806388ea41b9146104ee5780638c65c81f146105065780638da5cb5b1461051e57806393b155af14610533578063975057e71461054b57806397810850146105605780639a2ac05a146105815780639f96428614610596578063a4453336146105ab578063abcafdf8146105c3578063af58eda8146105de578063c9b3e736146105ff578063d9ba8ea414610614578063e486033914610629578063ee86eccc146103e2578063f0e10c0d1461064a578063f2fde38b14610661578063fc0c546a14610682575b6101bb610697565b600160a060020a031663453dd97f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156101f857600080fd5b505af115801561020c573d6000803e3d6000fd5b505050506040513d602081101561022257600080fd5b5051604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561025a573d6000803e3d6000fd5b50005b34801561026957600080fd5b5061027e600160a060020a03600435166106b5565b005b34801561028c57600080fd5b5061027e610798565b3480156102a157600080fd5b5061027e600160a060020a036004351661081c565b3480156102c257600080fd5b5061027e600160a060020a0360043516610855565b3480156102e357600080fd5b506040805160206004803580820135838102808601850190965280855261027e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061088e9650505050505050565b34801561037157600080fd5b5061027e6109a5565b34801561038657600080fd5b5061027e600160a060020a0360043516602435610a01565b61027e600160a060020a0360043581169060243516604435610a26565b3480156103c757600080fd5b506103d0610b27565b60408051918252519081900360200190f35b3480156103ee57600080fd5b506103f7610697565b60408051600160a060020a039092168252519081900360200190f35b34801561041f57600080fd5b506103f7610b2d565b34801561043457600080fd5b5061027e600435610b3c565b34801561044c57600080fd5b506103d0610b58565b34801561046157600080fd5b506103d0610b5e565b34801561047657600080fd5b5061027e600435610bf3565b34801561048e57600080fd5b506103d0600160a060020a0360043516610e15565b3480156104af57600080fd5b5061027e610e30565b3480156104c457600080fd5b506103f7600160a060020a0360043516610e8f565b3480156104e557600080fd5b506103d0610eaa565b3480156104fa57600080fd5b5061027e600435610f09565b34801561051257600080fd5b506103f7600435610f25565b34801561052a57600080fd5b506103f7610f40565b34801561053f57600080fd5b5061027e600435610f4f565b34801561055757600080fd5b506103f7610f5a565b34801561056c57600080fd5b5061027e600160a060020a0360043516610f69565b34801561058d57600080fd5b506103d0610fa2565b3480156105a257600080fd5b506103f7610fa8565b3480156105b757600080fd5b5061027e600435610fb7565b3480156105cf57600080fd5b506103d0600435602435611122565b3480156105ea57600080fd5b506103d0600160a060020a03600435166111cc565b34801561060b57600080fd5b506103d061127e565b34801561062057600080fd5b5061027e6112dd565b34801561063557600080fd5b506103d0600160a060020a0360043516611339565b61027e600160a060020a036004351660243561134b565b34801561066d57600080fd5b5061027e600160a060020a0360043516611479565b34801561068e57600080fd5b506103f761149c565b600354600090815260046020526040902054600160a060020a031690565b60008054600160a060020a031633146106cd57600080fd5b81905080600160a060020a0316634e71e0c86040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b5050600380546001018082556000908152600460209081526040918290208054600160a060020a031916600160a060020a038816908117909155925482519384529083015280517feab460c3c93e539eae1f40ce5dda73260499a0d82b7bd14c01dabb8147a756df945091829003019150a15050565b600054600160a060020a031633146107af57600080fd5b600660009054906101000a9004600160a060020a0316600160a060020a0316634e71e0c86040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b50505050565b600054600160a060020a0316331461083357600080fd5b60098054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331461086c57600080fd5b60088054600160a060020a031916600160a060020a0392909216919091179055565b60008054600160a060020a031633146108a657600080fd5b8151835114610925576040805160e560020a62461bcd02815260206004820152603660248201527f53697a65206f6620706c6179657273206d75737420626520657175616c20746f60448201527f207468652073697a65206f6620726566657272616c7300000000000000000000606482015290519081900360840190fd5b5060005b82518110156109a057818181518110151561094057fe5b90602001906020020151600a6000858481518110151561095c57fe5b602090810291909101810151600160a060020a039081168352908201929092526040016000208054600160a060020a03191692909116919091179055600101610929565b505050565b600054600160a060020a031633146109bc57600080fd5b6109c4610697565b600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561080257600080fd5b600954600160a060020a03163314610a1857600080fd5b610a2282826114ab565b5050565b6009546000908190600160a060020a03163314610a4257600080fd5b349150600160a060020a0385161515610aa5576040805160e560020a62461bcd02815260206004820152601b60248201527f506c6179657227732061646472657373206973206d697373696e670000000000604482015290519081900360640190fd5b610aae85610e15565b831115610b05576040805160e560020a62461bcd02815260206004820152601b60248201527f506c61796572277320676f74206e6f7420656e6f756768204754410000000000604482015290519081900360640190fd5b610b11600254846116f4565b9050610b2085838387876117d4565b5050505050565b60015481565b600954600160a060020a031690565b600054600160a060020a03163314610b5357600080fd5b600255565b60035481565b6000610b68610697565b600160a060020a031663e75bd44a336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b505050506040513d6020811015610bec57600080fd5b5051905090565b336000908152600b6020526040902054811115610c7f576040805160e560020a62461bcd028152602060048201526024808201527f416d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b6020526040902054610c9f908263ffffffff611a2d16565b336000818152600b602090815260408083209490945560075484517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810194909452602484018690529351600160a060020a039094169363a9059cbb93604480820194918390030190829087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b505050506040513d6020811015610d4757600080fd5b50511515610dc4576040805160e560020a62461bcd028152602060048201526024808201527f416d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000818152600b602090815260409182902054825193845290830184905282820152517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360600190a150565b600160a060020a03166000908152600b602052604090205490565b600054600160a060020a03163314610e4757600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600a60205260009081526040902054600160a060020a031681565b600854604080517f88550b6a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916388550b6a91600480830192602092919082900301818787803b158015610bc257600080fd5b600054600160a060020a03163314610f2057600080fd5b600155565b600460205260009081526040902054600160a060020a031681565b600054600160a060020a031681565b33610a2281836114ab565b600854600160a060020a031681565b600054600160a060020a03163314610f8057600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b60025481565b600954600160a060020a031681565b600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b505115156110ac576040805160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b336000908152600b60205260409020546110cc908263ffffffff611a3f16565b336000818152600b6020908152604091829020849055815192835282018490528181019290925290517f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360600190a150565b600061112c610697565b600160a060020a031663a4f154983361114586866116f4565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561119757600080fd5b505af11580156111ab573d6000803e3d6000fd5b505050506040513d60208110156111c157600080fd5b505190505b92915050565b60008054600160a060020a031633146111e457600080fd5b600654604080517f04ef161b000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916304ef161b9160248083019260209291908290030181600087803b15801561124c57600080fd5b505af1158015611260573d6000803e3d6000fd5b505050506040513d602081101561127657600080fd5b505192915050565b600854604080517fc9b3e7360000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163c9b3e73691600480830192602092919082900301818787803b158015610bc257600080fd5b600054600160a060020a031633146112f457600080fd5b6112fc610697565b600160a060020a0316634d056f6d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561080257600080fd5b600b6020526000908152604090205481565b333460008215156113a6576040805160e560020a62461bcd02815260206004820152601b60248201527f506c6179657227732061646472657373206973206d697373696e670000000000604482015290519081900360640190fd5b600154821015611400576040805160e560020a62461bcd02815260206004820152601260248201527f5468652062657420697320746f6f206c6f770000000000000000000000000000604482015290519081900360640190fd5b61140983610e15565b841115611460576040805160e560020a62461bcd02815260206004820152601b60248201527f506c61796572277320676f74206e6f7420656e6f756768204754410000000000604482015290519081900360640190fd5b61146a82856116f4565b9050610b2083838388886117d4565b600054600160a060020a0316331461149057600080fd5b61149981611a4c565b50565b600754600160a060020a031681565b600160a060020a038216151561150b576040805160e560020a62461bcd02815260206004820152601b60248201527f57696e6e657227732061646472657373206973206d697373696e670000000000604482015290519081900360640190fd5b600654604080517f04ef161b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151849392909216916304ef161b916024808201926020929091908290030181600087803b15801561157657600080fd5b505af115801561158a573d6000803e3d6000fd5b505050506040513d60208110156115a057600080fd5b5051146115f7576040805160e560020a62461bcd02815260206004820152600b60248201527f57726f6e67207365656421000000000000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517fb5eeee6e000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b5eeee6e91602480830192600092919082900301818387803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b5050505061167e610697565b600160a060020a031663a34cc845836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b1580156116d857600080fd5b505af11580156116ec573d6000803e3d6000fd5b505050505050565b60008060006117b960646117a1600f6064016117ad670de0b6b3a76400006117a18a600860009054906101000a9004600160a060020a0316600160a060020a03166388550b6a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561176957600080fd5b505af115801561177d573d6000803e3d6000fd5b505050506040513d602081101561179357600080fd5b50519063ffffffff611abc16565b9063ffffffff611ae516565b9063ffffffff611abc16565b91506117cb858363ffffffff611a3f16565b95945050505050565b600160a060020a038216158015906118045750600160a060020a038581166000908152600a602052604090205416155b1561184957600160a060020a038581166000908152600a602052604081208054600160a060020a03191685841617905554611849911683671bc16d674ec80000611afa565b600654604080517ffa006d87000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301529151919092169163fa006d8791602480830192600092919082900301818387803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b5050505060008111156118e9576000546118e9908690600160a060020a031683611afa565b600160a060020a038581166000908152600a602052604090205416156119a357611911610697565b600160a060020a038681166000818152600a60205260408082205481517f7543e3f0000000000000000000000000000000000000000000000000000000008152600481019490945284166024840152519390921692637543e3f09260448084019391929182900301818387803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b505050505b6119ab610697565b600160a060020a0316632e09c32f8587866040518463ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a03168152602001828152602001925050506000604051808303818588803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b50505050505050505050565b600082821115611a3957fe5b50900390565b818101828110156111c657fe5b600160a060020a0381161515611a6157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b6000821515611acd575060006111c6565b50818102818382811515611add57fe5b04146111c657fe5b60008183811515611af257fe5b049392505050565b600160a060020a0383166000908152600b6020526040902054811115611b6a576040805160e560020a62461bcd02815260206004820152601460248201527f546f6f206d75636820746f207472616e73666572000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383166000908152600b6020526040902054611b93908263ffffffff611a2d16565b600160a060020a038085166000908152600b60205260408082209390935590841681522054611bc8908263ffffffff611a3f16565b600160a060020a039092166000908152600b602052604090209190915550505600a165627a7a72305820b9a3bdc6218a2a1306e18329a2addfc83fcbf8d6ed8549bcf80b4a9fd79a59a00029000000000000000000000000db8f0bdd0d6bbe0d023fbd7adab833a9175e48d9000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20000000000000000000000000b06590e0b9fe47ff9abad84919a3e40bd59b16d4000000000000000000000000b08e657b0da89f2d7235d56f04a4ac3fed597d2a",
  "constructorArguments": "000000000000000000000000db8f0bdd0d6bbe0d023fbd7adab833a9175e48d9000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20000000000000000000000000b06590e0b9fe47ff9abad84919a3e40bd59b16d4000000000000000000000000b08e657b0da89f2d7235d56f04a4ac3fed597d2a"
}