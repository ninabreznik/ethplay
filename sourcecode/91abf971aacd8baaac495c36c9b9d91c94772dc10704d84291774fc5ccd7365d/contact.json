{
  "address": "0x9ffdfdfe44a0d101e165f4190d80e98c3b8bf079",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.5.7;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded \n to a wallet\n * as they arrive.\n */\ninterface token { \n  function transfer(address receiver, uint amount) external returns (bool) ; \n  function balanceOf(address holder) external view returns (uint) ;\n}\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n\n  // address where funds are collected\n  address payable public wallet;\n  // token address\n  address public addressOfTokenUsedAsReward;\n\n  uint256 public price = 75000;\n  uint256 public tokensSold;\n\n  token tokenReward;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  mapping (address => uint) public balances;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  constructor () public {\n    //You will change this to your wallet where you need the ETH \n    wallet = 0x41d5e81BFBCb4eB82F9d7Fda41b9FE2759C69564;\n    \n    //Here will come the checksum address we got\n    addressOfTokenUsedAsReward = 0x0B44547be0A0Df5dCd5327de8EA73680517c5a54;\n\n    tokenReward = token(addressOfTokenUsedAsReward);\n  }\n\n  bool public started = true;\n\n  function startSale() public {\n    require (msg.sender == wallet);\n    started = true;\n  }\n\n  function stopSale() public {\n    require(msg.sender == wallet);\n    started = false;\n  }\n\n  function setPrice(uint256 _price) public {\n    require(msg.sender == wallet);\n    price = _price;\n  }\n  function changeWallet(address payable _wallet) public {\n    require (msg.sender == wallet);\n    wallet = _wallet;\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () payable external {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable public {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n\n    // calculate token amount to be sent\n    uint256 tokens = (weiAmount) * price;//weiamount * price \n    // uint256 tokens = (weiAmount/10**(18-decimals)) * price;//weiamount * price \n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    // tokenReward.transfer(beneficiary, tokens);\n    tokensSold = tokensSold.add(tokens);\n\n    // ensure the smart contract has enough tokens to sell\n    require(tokenReward.balanceOf(address(this)).sub(tokensSold) >= tokens);\n\n    // allocate tokens to benefeciary\n    balances[beneficiary] = balances[beneficiary].add(tokens);\n\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  function claimTokens() public {\n    // ensure benefeciary has enough tokens\n    require(started == false && balances[msg.sender] > 0);\n\n    tokenReward.transfer(msg.sender, balances[msg.sender]);\n\n    // now benefeciary doesn't have any tokens\n    balances[msg.sender] = 0;\n  }\n\n  function myBalance() public view returns (uint) {\n    return balances[msg.sender];\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n     wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = started;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  function withdrawTokens(uint256 _amount) public {\n    \n    require (msg.sender == wallet && \n      tokenReward.balanceOf(address(this)).sub(tokensSold) >= _amount);\n\n    tokenReward.transfer(wallet,_amount);\n  }\n}",
  "bytecode": "6080604052620124f86002556001600760006101000a81548160ff02191690831515021790555034801561003257600080fd5b507341d5e81bfbcb4eb82f9d7fda41b9fe2759c695646000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730b44547be0a0df5dcd5327de8ea73680517c5a54600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610eab8061014e6000396000f3fe6080604052600436106100e85760003560e01c806388adbf8f1161008a578063b66a0e5d11610059578063b66a0e5d14610394578063c9116b69146103ab578063e36b0b37146103d6578063ec8ac4d8146103ed576100e8565b806388adbf8f1461028657806391b7f5ed146102dd57806398b9a2dc14610318578063a035b1fe14610369576100e8565b80634042b66f116100c65780634042b66f146101c257806348c54b9d146101ed578063518ab2a814610204578063521eb2731461022f576100e8565b80631f2698ab146100f357806327e235e314610122578063315a095d14610187575b6100f133610431565b005b3480156100ff57600080fd5b506101086106c9565b604051808215151515815260200191505060405180910390f35b34801561012e57600080fd5b506101716004803603602081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106dc565b6040518082815260200191505060405180910390f35b34801561019357600080fd5b506101c0600480360360208110156101aa57600080fd5b81019080803590602001909291905050506106f4565b005b3480156101ce57600080fd5b506101d761094f565b6040518082815260200191505060405180910390f35b3480156101f957600080fd5b50610202610955565b005b34801561021057600080fd5b50610219610b2b565b6040518082815260200191505060405180910390f35b34801561023b57600080fd5b50610244610b31565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029257600080fd5b5061029b610b56565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e957600080fd5b506103166004803603602081101561030057600080fd5b8101908080359060200190929190505050610b7c565b005b34801561032457600080fd5b506103676004803603602081101561033b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b005b34801561037557600080fd5b5061037e610c7b565b6040518082815260200191505060405180910390f35b3480156103a057600080fd5b506103a9610c81565b005b3480156103b757600080fd5b506103c0610cf7565b6040518082815260200191505060405180910390f35b3480156103e257600080fd5b506103eb610d3e565b005b61042f6004803603602081101561040357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610431565b005b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561046b57600080fd5b610473610db4565b61047c57600080fd5b600034905060006002548202905061049f82600554610de290919063ffffffff16565b6005819055506104ba81600354610de290919063ffffffff16565b600381905550806105af600354600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b8101908080519060200190929190505050610dfe90919063ffffffff16565b10156105ba57600080fd5b61060c81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610de290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a36106c4610e15565b505050565b600760009054906101000a900460ff1681565b60066020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561083d57508061083a600354600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d602081101561081b57600080fd5b8101908080519060200190929190505050610dfe90919063ffffffff16565b10155b61084657600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561091057600080fd5b505af1158015610924573d6000803e3d6000fd5b505050506040513d602081101561093a57600080fd5b81019080805190602001909291905050505050565b60055481565b60001515600760009054906101000a900460ff1615151480156109b757506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b6109c057600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610aa857600080fd5b505af1158015610abc573d6000803e3d6000fd5b505050506040513d6020811015610ad257600080fd5b8101908080519060200190929190505050506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bd557600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cda57600080fd5b6001600760006101000a81548160ff021916908315150217905550565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d9757600080fd5b6000600760006101000a81548160ff021916908315150217905550565b600080600760009054906101000a900460ff1690506000803414159050818015610ddb5750805b9250505090565b600080828401905083811015610df457fe5b8091505092915050565b600082821115610e0a57fe5b818303905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610e7c573d6000803e3d6000fd5b5056fea165627a7a72305820f62cccb57ced46e747ddbe4fb0a5c700ea21fff95406485ff1eea20073d477140029"
}