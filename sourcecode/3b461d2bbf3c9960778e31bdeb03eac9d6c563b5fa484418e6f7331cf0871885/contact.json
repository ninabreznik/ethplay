{
  "address": "0xdfbd6a960a55bcfcf59d5925351e05a51498bcef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "RockCoin",
  "contractName": "RockCoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-05\n*/\n\npragma solidity ^0.4.11;\n\nlibrary safeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf(address who) constant returns (uint value);\n    function allowance(address owner, address spender) constant returns (uint _allowance);\n\n    function transfer(address to, uint value) returns (bool ok);\n    function transferFrom(address from, address to, uint value) returns (bool ok);\n    function approve(address spender, uint value) returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract RockCoin is ERC20{\n        uint initialSupply = 16500000;\n        string name = \"RockCoin\";\n        string symbol = \"ROCK\";\n        uint USDExchangeRate = 300;\n        bool preSale = true;\n        bool burned = false;\n        uint saleTimeStart;\n\n        address ownerAddress;\n\n        mapping (address => uint256) balances;\n        mapping (address => mapping (address => uint256)) allowed;\n\n        event Burn(address indexed from, uint amount);\n\n        modifier onlyOwner{\n            if (msg.sender == ownerAddress) {\n                  _;\n                }\n        }\n\n        function totalSupply() constant returns (uint256) {\n                return initialSupply;\n    }\n\n        function balanceOf(address _owner) constant returns (uint256 balance) {\n                return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    if (balances[msg.sender] >= _value && _value > 0) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n      balances[_to] += _value;\n      balances[_from] -= _value;\n      allowed[_from][msg.sender] -= _value;\n      Transfer(_from, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function getCurrentModifier() returns (uint _modifier) {\n        if (preSale) return 5;\n\n        if (balances[ownerAddress] > 11500000) return 8;\n        if (balances[ownerAddress] > 6500000) return 10;\n        if (balances[ownerAddress] > 1500000) return 12;\n\n        return 0;\n}\n\n  function setUSDExchangeRate(uint _value) onlyOwner {\n            USDExchangeRate = _value;\n        }\n\n  function stopPreSale() onlyOwner {\n            if (preSale) {\n               saleTimeStart = now;\n            }\t\n            preSale = false;\n        }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n    function burnUnsold() returns (bool success) {\n            if (!preSale && saleTimeStart + 5 weeks < now && !burned) {\n                uint sold = initialSupply - balances[ownerAddress];\n                uint toHold = safeMath.div(sold, 10);\n                uint burningAmount = balances[ownerAddress] - toHold;\n                balances[ownerAddress] = toHold;\n                initialSupply -= burningAmount;\n                    Burn(ownerAddress, burningAmount);\n                    burned = true;\n            return burned;\n            }\n    }\n\n        function RockCoin() {\n        ownerAddress = msg.sender;\n            uint devFee = 7000;\n        balances[ownerAddress] = initialSupply - devFee;\n            address devAddr = 0xB0416874d4253E12C95C5FAC8F069F9BFf18D1bf;\n            balances[devAddr] = devFee;\n            Transfer(ownerAddress, devAddr, devFee);\n    }\n\n        function () payable{\n            uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\n            uint currentPriceModifier = getCurrentModifier();\n\n            if (currentPriceModifier>0) {\n                uint valueToPass = safeMath.div(safeMath.mul(amountInUSDollars, 10),currentPriceModifier);\n                if (preSale && balances[ownerAddress] < 14500000) {stopPreSale();}\n                if (balances[ownerAddress] >= valueToPass) {\n                balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\n                balances[ownerAddress] = safeMath.sub(balances[ownerAddress],valueToPass);\n                Transfer(ownerAddress, msg.sender, valueToPass);\n            } \n            }\n        }\n\n    function withdraw(uint amount) onlyOwner{\n        ownerAddress.transfer(amount);\n        }\t\n}",
  "bytecode": "62fbc52060005560a0604052600860608190527f526f636b436f696e00000000000000000000000000000000000000000000000060809081526100459160019190610171565b506040805180820190915260048082527f524f434b00000000000000000000000000000000000000000000000000000000602090920191825261008a91600291610171565b5061012c6003556004805461ff001960ff1990911660011716905534156100ad57fe5b5b60068054600160a060020a03191633600160a060020a0390811691909117808355600080549183168152600760209081526040808320611b571990940190935573b0416874d4253e12c95c5fac8f069f9bff18d1bf91829052611b587f238d4e6375aa2989cfca37b35bb0c2790dae5df5c75a099fa1aa3f8f65b8fecb819055945483518681529351929485949116927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35b5050610211565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b257805160ff19168380011785556101df565b828001600101855582156101df579182015b828111156101df5782518255916020019190600101906101c4565b5b506101ec9291506101f0565b5090565b61020e91905b808211156101ec57600081556001016101f6565b5090565b90565b61094c806102206000396000f300606060405236156100ac5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461021f578063151c61b61461025257806318160ddd146102675780631e519c4c1461028957806323b872dd146102ab5780632e1a7d4d146102e457806370a08231146102f9578063a9059cbb14610327578063b52a58511461035a578063dd62ed3e1461037e578063f8fb3366146103b2575b61021d5b6000600060006100d36100c5346003546103c4565b670de0b6b3a76400006103f3565b92506100dd610436565b91506000821115610216576100fc6100f684600a6103c4565b836103f3565b60045490915060ff16801561012e5750600654600160a060020a031660009081526007602052604090205462dd40a090105b1561013b5761013b6104dd565b5b600654600160a060020a031660009081526007602052604090205481901061021657600160a060020a0333166000908152600760205260409020546101819082610513565b600160a060020a0333811660009081526007602052604080822093909355600654909116815220546101b3908261052f565b60068054600160a060020a03908116600090815260076020908152604091829020949094559154825185815292513383169491909216927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35b5b5b505050565b005b341561022757fe5b61023e600160a060020a0360043516602435610548565b604080519115158252519081900360200190f35b341561025a57fe5b61021d6004356105b3565b005b341561026f57fe5b6102776105d5565b60408051918252519081900360200190f35b341561029157fe5b610277610436565b60408051918252519081900360200190f35b34156102b357fe5b61023e600160a060020a03600435811690602435166044356105dc565b604080519115158252519081900360200190f35b34156102ec57fe5b61021d6004356106d2565b005b341561030157fe5b610277600160a060020a0360043516610720565b60408051918252519081900360200190f35b341561032f57fe5b61023e600160a060020a036004351660243561073f565b604080519115158252519081900360200190f35b341561036257fe5b61023e6107eb565b604080519115158252519081900360200190f35b341561038657fe5b610277600160a060020a03600435811690602435166108e2565b60408051918252519081900360200190f35b34156103ba57fe5b61021d6104dd565b005b60008282026103e88415806103e357508385838115156103e057fe5b04145b61090f565b8091505b5092915050565b600060006104036000841161090f565b828481151561040e57fe5b0490506103e8838581151561041f57fe5b0682850201851461090f565b8091505b5092915050565b60045460009060ff161561044c575060056104da565b600654600160a060020a031660009081526007602052604090205462af79e090111561047a575060086104da565b600654600160a060020a031660009081526007602052604090205462632ea09011156104a85750600a6104da565b600654600160a060020a03166000908152600760205260409020546216e3609011156104d65750600c6104da565b5060005b90565b60065433600160a060020a039081169116141561050f5760045460ff161561050457426005555b6004805460ff191690555b5b5b565b60008282016103e88482101561090f565b8091505b5092915050565b600061053d8383111561090f565b508082035b92915050565b600160a060020a03338116600081815260086020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60065433600160a060020a03908116911614156105d05760038190555b5b5b50565b6000545b90565b600160a060020a03831660009081526007602052604081205482901080159061062c5750600160a060020a0380851660009081526008602090815260408083203390941683529290522054829010155b80156106385750600082115b156106c657600160a060020a03808416600081815260076020908152604080832080548801905588851680845281842080548990039055600883528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060016106ca565b5060005b5b9392505050565b60065433600160a060020a03908116911614156105d057600654604051600160a060020a039091169082156108fc029083906000818181858888f1935050505015156105d057fe5b5b5b5b50565b600160a060020a0381166000908152600760205260409020545b919050565b600160a060020a0333166000908152600760205260408120548290108015906107685750600082115b156107dc57600160a060020a03338116600081815260076020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3506001610542565b506000610542565b5b92915050565b60045460009081908190819060ff1615801561080d575042600554622e248001105b80156108215750600454610100900460ff16155b156108db57600654600160a060020a0316600090815260076020526040812054905403925061085183600a6103f3565b60068054600160a060020a039081166000908152600760209081526040808320805490879055835490879003908190039093559354845183815294519597509195509116927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a26004805461ff00191661010090811791829055900460ff1693505b5b50505090565b600160a060020a038083166000908152600860209081526040808320938516835292905220545b92915050565b8015156105d05760006000fd5b5b505600a165627a7a72305820db61a855a7b32319bf68a0ecff234bef75102d9a71f804c4a881635a2a5d522a0029"
}