{
  "address": "0xa4342c85a9a19b8d2c66e8b6821238cbacfa82c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-01\n*/\n\npragma solidity ^0.4.18;\n\ncontract useContractWeb {\n\n  ContractWeb internal web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7);\n\n}\n\ncontract Owned {\n\n  address public owner = msg.sender;\n\n  function transferOwner(address _newOwner) onlyOwner public returns (bool) {\n    owner = _newOwner;\n    return true;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n}\n\ncontract CheckPayloadSize {\n\n  modifier onlyPayloadSize(uint256 _size) {\n    require(msg.data.length >= _size + 4);\n    _;\n  }\n\n}\n\ncontract CanTransferTokens is CheckPayloadSize, Owned {\n\n  function transferCustomToken(address _token, address _to, uint256 _value) onlyPayloadSize(3 * 32) onlyOwner public returns (bool) {\n    Token tkn = Token(_token);\n    return tkn.transfer(_to, _value);\n  }\n\n}\n\ncontract SafeMath {\n\n  function add(uint256 x, uint256 y) pure internal returns (uint256) {\n    require(x <= x + y);\n    return x + y;\n  }\n\n  function sub(uint256 x, uint256 y) pure internal returns (uint256) {\n    require(x >= y);\n    return x - y;\n  }\n\n}\n\ncontract CheckIfContract {\n\n  function isContract(address _addr) view internal returns (bool) {\n    uint256 length;\n    if (_addr == address(0x0)) return false;\n    assembly {\n      length := extcodesize(_addr)\n    }\n    if(length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\ncontract ContractReceiver {\n\n  TKN internal fallback;\n\n  struct TKN {\n    address sender;\n    uint256 value;\n    bytes data;\n    bytes4 sig;\n  }\n\n  function getFallback() view public returns (TKN) {\n    return fallback;\n  }\n\n\n  function tokenFallback(address _from, uint256 _value, bytes _data) public returns (bool) {\n    TKN memory tkn;\n    tkn.sender = _from;\n    tkn.value = _value;\n    tkn.data = _data;\n    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n    tkn.sig = bytes4(u);\n    fallback = tkn;\n    return true;\n  }\n\n}\n\ncontract Token1st {\n\n  address public currentTradingSystem;\n  address public currentExchangeSystem;\n\n  mapping(address => uint) public balanceOf;\n  mapping(address => mapping (address => uint)) public allowance;\n  mapping(address => mapping (address => uint)) public tradingBalanceOf;\n  mapping(address => mapping (address => uint)) public exchangeBalanceOf;\n\n  /* @notice get balance of a specific address */\n  function getBalanceOf(address _address) view public returns (uint amount){\n    return balanceOf[_address];\n  }\n\n  event Transfer (address _to, address _from, uint _decimalAmount);\n\n  /* A contract or user attempts to get the coins */\n  function transferDecimalAmountFrom(address _from, address _to, uint _value) public returns (bool success) {\n    require(balanceOf[_from]\n      - tradingBalanceOf[_from][currentTradingSystem]\n      - exchangeBalanceOf[_from][currentExchangeSystem] >= _value);                 // Check if the sender has enough\n    require(balanceOf[_to] + (_value) >= balanceOf[_to]);  // Check for overflows\n    require(_value <= allowance[_from][msg.sender]);   // Check allowance\n    balanceOf[_from] -= _value;                          // Subtract from the sender\n    balanceOf[_to] += _value;                            // Add the same to the recipient\n    allowance[_from][msg.sender] -= _value;\n    Transfer(_to, _from, _value);\n    return true;\n  }\n\n    /* Allow another contract or user to spend some tokens in your behalf */\n  function approveSpenderDecimalAmount(address _spender, uint _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    return true;\n  }\n\n}\n\ncontract ContractWeb is CanTransferTokens, CheckIfContract {\n\n      //contract name | contract info\n  mapping(string => contractInfo) internal contracts;\n\n  event ContractAdded(string indexed _name, address indexed _referredTo);\n  event ContractEdited(string indexed _name, address indexed _referredTo);\n  event ContractMadePermanent(string indexed _name);\n\n  struct contractInfo {\n    address contractAddress;\n    bool isPermanent;\n  }\n\n  function getContractAddress(string _name) view public returns (address) {\n    return contracts[_name].contractAddress;\n  }\n\n  function isContractPermanent(string _name) view public returns (bool) {\n    return contracts[_name].isPermanent;\n  }\n\n  function setContract(string _name, address _address) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\n    require(isContract(_address));\n    require(this != _address);\n    require(contracts[_name].contractAddress != _address);\n    require(contracts[_name].isPermanent == false);\n    address oldAddress = contracts[_name].contractAddress;\n    contracts[_name].contractAddress = _address;\n    if(oldAddress == address(0x0)) {\n      ContractAdded(_name, _address);\n    } else {\n      ContractEdited(_name, _address);\n    }\n    return true;\n  }\n\n  function makeContractPermanent(string _name) onlyOwner public returns (bool) {\n    require(contracts[_name].contractAddress != address(0x0));\n    require(contracts[_name].isPermanent == false);\n    contracts[_name].isPermanent = true;\n    ContractMadePermanent(_name);\n    return true;\n  }\n\n  function tokenSetup(address _Tokens1st, address _Balancecs, address _Token, address _Conversion, address _Distribution) onlyPayloadSize(5 * 32) onlyOwner public returns (bool) {\n    setContract(\"Token1st\", _Tokens1st);\n    setContract(\"Balances\", _Balancecs);\n    setContract(\"Token\", _Token);\n    setContract(\"Conversion\", _Conversion);\n    setContract(\"Distribution\", _Distribution);\n    return true;\n  }\n\n}\n\ncontract Balances is CanTransferTokens, SafeMath, useContractWeb {\n\n  mapping(address => uint256) internal _balances;\n\n  function get(address _account) view public returns (uint256) {\n    return _balances[_account];\n  }\n\n  function tokenContract() view internal returns (address) {\n    return web.getContractAddress(\"Token\");\n  }\n\n  function Balances() public {\n    _balances[msg.sender] = 190 * 1000000 * 1000000000000000000;\n  }\n\n  modifier onlyToken {\n    require(msg.sender == tokenContract());\n    _;\n  }\n\n  function transfer(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) onlyToken public returns (bool success) {\n  _balances[_from] = sub(_balances[_from], _value);\n  _balances[_to] = add(_balances[_to], _value);\n  return true;\n  }\n\n}\n\ncontract Token is CanTransferTokens, SafeMath, CheckIfContract, useContractWeb {\n\n  string public symbol = \"SHC\";\n  string public name = \"ShineCoin\";\n  uint8 public decimals = 18;\n  uint256 public totalSupply = 190 * 1000000 * 1000000000000000000;\n\n  mapping (address => mapping (address => uint256)) internal _allowance;\n\n    // ERC20 Events\n  event Approval(address indexed from, address indexed to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // ERC223 Event\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n\n  function balanceOf(address _account) view public returns (uint256) {\n    return Balances(balancesContract()).get(_account);\n  }\n\n  function allowance(address _from, address _to) view public returns (uint256 remaining) {\n    return _allowance[_from][_to];\n  }\n\n  function balancesContract() view internal returns (address) {\n    return web.getContractAddress(\"Balances\");\n  }\n\n  function Token() public {\n    bytes memory empty;\n    Transfer(this, msg.sender, 190 * 1000000 * 1000000000000000000);\n    Transfer(this, msg.sender, 190 * 1000000 * 1000000000000000000, empty);\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) onlyPayloadSize(4 * 32) public returns (bool success) {\n    if(isContract(_to)) {\n      require(Balances(balancesContract()).get(msg.sender) >= _value);\n      Balances(balancesContract()).transfer(msg.sender, _to, _value);\n      ContractReceiver receiver = ContractReceiver(_to);\n      require(receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n      Transfer(msg.sender, _to, _value);\n      Transfer(msg.sender, _to, _value, _data);\n      return true;\n    } else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) onlyPayloadSize(3 * 32) public returns (bool success) {\n    if(isContract(_to)) {\n      return transferToContract(_to, _value, _data);\n    }\n    else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n    bytes memory empty;\n    if(isContract(_to)) {\n      return transferToContract(_to, _value, empty);\n    }\n    else {\n      return transferToAddress(_to, _value, empty);\n    }\n  }\n\n  function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool success) {\n    require(Balances(balancesContract()).get(msg.sender) >= _value);\n    Balances(balancesContract()).transfer(msg.sender, _to, _value);\n    Transfer(msg.sender, _to, _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool success) {\n    require(Balances(balancesContract()).get(msg.sender) >= _value);\n    Balances(balancesContract()).transfer(msg.sender, _to, _value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n    bytes memory empty;\n    require(_value > 0 && _allowance[_from][msg.sender] >= _value && Balances(balancesContract()).get(_from) >= _value);\n    _allowance[_from][msg.sender] = sub(_allowance[_from][msg.sender], _value);\n    if(msg.sender != _to && isContract(_to)) {\n      Balances(balancesContract()).transfer(_from, _to, _value);\n      ContractReceiver receiver = ContractReceiver(_to);\n      receiver.tokenFallback(_from, _value, empty);\n    } else {\n      Balances(balancesContract()).transfer(_from, _to, _value);\n    }\n    Transfer(_from, _to, _value);\n    Transfer(_from, _to, _value, empty);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n    _allowance[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n}\n\ncontract Conversion is CanTransferTokens, useContractWeb {\n\n  function token1stContract() view internal returns (address) {\n    return web.getContractAddress(\"Token1st\");\n  }\n\n  function tokenContract() view internal returns (address) {\n    return web.getContractAddress(\"Token\");\n  }\n\n  function deposit() onlyOwner public returns (bool) {\n    require(Token(tokenContract()).allowance(owner, this) > 0);\n    return Token(tokenContract()).transferFrom(owner, this, Token(tokenContract()).allowance(owner, this));\n  }\n\n  function convert() public returns (bool) {\n    uint256 senderBalance = Token1st(token1stContract()).getBalanceOf(msg.sender);\n    require(Token1st(token1stContract()).allowance(msg.sender, this) >= senderBalance);\n    Token1st(token1stContract()).transferDecimalAmountFrom(msg.sender, owner, senderBalance);\n    return Token(tokenContract()).transfer(msg.sender, senderBalance * 10000000000);\n  }\n\n}\n\ncontract Distribution is CanTransferTokens, SafeMath, useContractWeb {\n\n  uint256 public liveSince;\n  uint256 public withdrawn;\n\n  function withdrawnReadable() view public returns (uint256) {\n    return withdrawn / 1000000000000000000;\n  }\n\n  function secondsLive() view public returns (uint256) {\n    if(liveSince != 0) {\n      return now - liveSince;\n    }\n  }\n\n  function allowedSince() view public returns (uint256) {\n    return secondsLive() * 380265185769276972;\n  }\n\n  function allowedSinceReadable() view public returns (uint256) {\n    return secondsLive() * 380265185769276972 / 1000000000000000000;\n  }\n\n  function stillAllowed() view public returns (uint256) {\n    return allowedSince() - withdrawn;\n  }\n\n  function stillAllowedReadable() view public returns (uint256) {\n    uint256 _1 = allowedSince() - withdrawn;\n    return _1 / 1000000000000000000;\n  }\n\n  function tokenContract() view internal returns (address) {\n    return web.getContractAddress(\"Token\");\n  }\n\n  function makeLive() onlyOwner public returns (bool) {\n    require(liveSince == 0);\n    liveSince = now;\n    return true;\n  }\n\n  function deposit() onlyOwner public returns (bool) {\n    require(Token(tokenContract()).allowance(owner, this) > 0);\n    return Token(tokenContract()).transferFrom(owner, this, Token(tokenContract()).allowance(owner, this));\n  }\n\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\n    require(stillAllowed() >= _value && _value > 0 && liveSince != 0);\n    withdrawn = add(withdrawn, _value);\n    return Token(tokenContract()).transfer(_to, _value);\n  }\n\n  function transferReadable(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\n    require(stillAllowed() >= _value * 1000000000000000000 && stillAllowed() != 0 && liveSince != 0);\n    withdrawn = add(withdrawn, _value * 1000000000000000000);\n    return Token(tokenContract()).transfer(_to, _value * 1000000000000000000);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferCustomToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604090815260008054600160a060020a033316600160a060020a03199182161790915560018054909116735f9489d7ffc63ce0bdcd282d14e595a865b259d71790558051908101604052600381527f5348430000000000000000000000000000000000000000000000000000000000602082015260029080516200008a92916020019062000210565b5060408051908101604052600981527f5368696e65436f696e000000000000000000000000000000000000000000000060208201526003908051620000d492916020019062000210565b506004805460ff191660121790556a9d2a10a37c185d7e0000006005553415620000fd57600080fd5b6200010762000295565b33600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6a9d2a10a37c185d7e00000060405190815260200160405180910390a3806040518082805190602001908083835b602083106200018b5780518252601f1990920191602091820191016200016a565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902033600160a060020a031630600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c166a9d2a10a37c185d7e00000060405190815260200160405180910390a450620002c7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025357805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028357825182559160200191906001019062000266565b5062000291929150620002a7565b5090565b60206040519081016040526000815290565b620002c491905b80821115620002915760008155600101620002ae565b90565b61157780620002d76000396000f3006060604052600436106100b65763ffffffff60e060020a60003504166306fdde0381146100bb578063095ea7b31461014557806318160ddd1461017b57806323b872dd146101a0578063313ce567146101c85780634fb2e45d146101f157806370a08231146102105780638da5cb5b1461022f57806395d89b411461025e578063a9059cbb14610271578063be45fd6214610293578063dd62ed3e146102f8578063eee785951461031d578063f6368f8a14610345575b600080fd5b34156100c657600080fd5b6100ce6103ec565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010a5780820151838201526020016100f2565b50505050905090810190601f1680156101375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015057600080fd5b610167600160a060020a036004351660243561048a565b604051901515815260200160405180910390f35b341561018657600080fd5b61018e610506565b60405190815260200160405180910390f35b34156101ab57600080fd5b610167600160a060020a036004358116906024351660443561050c565b34156101d357600080fd5b6101db610948565b60405160ff909116815260200160405180910390f35b34156101fc57600080fd5b610167600160a060020a0360043516610951565b341561021b57600080fd5b61018e600160a060020a036004351661099f565b341561023a57600080fd5b610242610a1f565b604051600160a060020a03909116815260200160405180910390f35b341561026957600080fd5b6100ce610a2e565b341561027c57600080fd5b610167600160a060020a0360043516602435610a99565b341561029e57600080fd5b61016760048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ae695505050505050565b341561030357600080fd5b61018e600160a060020a0360043581169060243516610b2b565b341561032857600080fd5b610167600160a060020a0360043581169060243516604435610b56565b341561035057600080fd5b61016760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610c0895505050505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b505050505081565b60006040604436101561049c57600080fd5b600160a060020a03338116600081815260066020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35060019392505050565b60055481565b60006105166114f9565b60006060606436101561052857600080fd5b60008511801561055f5750600160a060020a0380881660009081526006602090815260408083203390941683529290522054859010155b80156105e357508461056f610f47565b600160a060020a031663c2bc2efc8960006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105c557600080fd5b6102c65a03f115156105d657600080fd5b5050506040518051905010155b15156105ee57600080fd5b600160a060020a038088166000908152600660209081526040808320339094168352929052205461061f9086610fe7565b600160a060020a03808916600090815260066020908152604080832033851680855292529091209290925587161480159061065e575061065e86610ffc565b156107e85761066b610f47565b600160a060020a031663beabacc888888860006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156106d457600080fd5b6102c65a03f115156106e557600080fd5b50505060405180515086925050600160a060020a03821663c0ee0b8a8887866000604051602001526040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561077a578082015183820152602001610762565b50505050905090810190601f1680156107a75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15156107c757600080fd5b6102c65a03f115156107d857600080fd5b5050506040518051905050610875565b6107f0610f47565b600160a060020a031663beabacc888888860006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561085957600080fd5b6102c65a03f1151561086a57600080fd5b505050604051805150505b85600160a060020a031687600160a060020a031660008051602061152c8339815191528760405190815260200160405180910390a3826040518082805190602001908083835b602083106108da5780518252601f1990920191602091820191016108bb565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902086600160a060020a031688600160a060020a031660008051602061150c8339815191528860405190815260200160405180910390a45060019695505050505050565b60045460ff1681565b6000805433600160a060020a0390811691161461096d57600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60006109a9610f47565b600160a060020a031663c2bc2efc8360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109ff57600080fd5b6102c65a03f11515610a1057600080fd5b50505060405180519392505050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104825780601f1061045757610100808354040283529160200191610482565b6000610aa36114f9565b60406044361015610ab357600080fd5b610abc85610ffc565b15610ad357610acc858584611038565b9250610ade565b610acc858584611313565b505092915050565b600060606064361015610af857600080fd5b610b0185610ffc565b15610b1857610b11858585611038565b9150610b23565b610b11858585611313565b509392505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60008060606064361015610b6957600080fd5b60005433600160a060020a03908116911614610b8457600080fd5b85915081600160a060020a031663a9059cbb868660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610be457600080fd5b6102c65a03f11515610bf557600080fd5b5050506040518051979650505050505050565b60008060806084361015610c1b57600080fd5b610c2487610ffc565b15610f2f5785610c32610f47565b600160a060020a031663c2bc2efc3360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c8857600080fd5b6102c65a03f11515610c9957600080fd5b5050506040518051905010151515610cb057600080fd5b610cb8610f47565b600160a060020a031663beabacc833898960006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610d2157600080fd5b6102c65a03f11515610d3257600080fd5b50505060405180515087925050600160a060020a0382166000856040518082805190602001908083835b60208310610d7b5780518252601f199092019160209182019101610d5c565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903389896040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b83811015610e0c578082015183820152602001610df4565b50505050905090810190601f168015610e395780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f193505050501515610e6057600080fd5b86600160a060020a031633600160a060020a031660008051602061152c8339815191528860405190815260200160405180910390a3846040518082805190602001908083835b60208310610ec55780518252601f199092019160209182019101610ea6565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902087600160a060020a031633600160a060020a031660008051602061150c8339815191528960405190815260200160405180910390a460019250610f3d565b610f3a878787611313565b92505b5050949350505050565b600154600090600160a060020a03166304433bbc826040516020015260405160e060020a63ffffffff8316028152602060048201819052600860248301527f42616c616e636573000000000000000000000000000000000000000000000000604483015260649091019060405180830381600087803b1515610fc857600080fd5b6102c65a03f11515610fd957600080fd5b505050604051805191505090565b600081831015610ff657600080fd5b50900390565b600080600160a060020a03831615156110185760009150611032565b50813b600081111561102d5760019150611032565b600091505b50919050565b60008083611044610f47565b600160a060020a031663c2bc2efc3360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561109a57600080fd5b6102c65a03f115156110ab57600080fd5b50505060405180519050101515156110c257600080fd5b6110ca610f47565b600160a060020a031663beabacc833878760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561113357600080fd5b6102c65a03f1151561114457600080fd5b50505060405180515085915050600160a060020a03811663c0ee0b8a3386866000604051602001526040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111d95780820151838201526020016111c1565b50505050905090810190601f1680156112065780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b151561122657600080fd5b6102c65a03f1151561123757600080fd5b505050604051805190505084600160a060020a031633600160a060020a031660008051602061152c8339815191528660405190815260200160405180910390a3826040518082805190602001908083835b602083106112a75780518252601f199092019160209182019101611288565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a031660008051602061150c8339815191528760405190815260200160405180910390a4506001949350505050565b60008261131e610f47565b600160a060020a031663c2bc2efc3360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561137457600080fd5b6102c65a03f1151561138557600080fd5b505050604051805190501015151561139c57600080fd5b6113a4610f47565b600160a060020a031663beabacc833868660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561140d57600080fd5b6102c65a03f1151561141e57600080fd5b505050604051805190505083600160a060020a031633600160a060020a031660008051602061152c8339815191528560405190815260200160405180910390a3816040518082805190602001908083835b6020831061148e5780518252601f19909201916020918201910161146f565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a031660008051602061150c8339815191528660405190815260200160405180910390a45060019392505050565b602060405190810160405260008152905600e19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204c7a2a9bedec622443db306b3c59d3b2147914f563a63ee32169da187750f9570029"
}