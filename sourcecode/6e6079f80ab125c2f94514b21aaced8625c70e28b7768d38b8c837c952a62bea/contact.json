{
  "address": "0x5e888b83b7287eed4fb7da7b7d0a0d4c735d94b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OAKToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-02\n*/\n\npragma solidity 0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/OAKToken.sol\n\ncontract OAKToken is MintableToken {\n  string public name = \"Acorn Collective Token\";\n  string public symbol = \"OAK\";\n  uint256 public decimals = 18;\n\n  mapping(address => bool) public kycRequired;\n\n  // overriding MintableToken#mint to add kyc logic\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    kycRequired[_to] = true;\n    return super.mint(_to, _amount);\n  }\n\n  // overriding MintableToken#transfer to add kyc logic\n  function transfer(address _to, uint _value) public returns (bool) {\n    require(!kycRequired[msg.sender]);\n\n    return super.transfer(_to, _value);\n  }\n\n  // overriding MintableToken#transferFrom to add kyc logic\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(!kycRequired[_from]);\n\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function kycVerify(address participant) onlyOwner public {\n    kycRequired[participant] = false;\n    KycVerified(participant);\n  }\n  event KycVerified(address indexed participant);\n}\n\n// File: contracts/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  OAKToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  event CrowdSaleTokenContractCreation();\n  // creates the token to be sold.\n  function createTokenContract() internal returns (OAKToken) {\n    OAKToken newToken = new OAKToken();\n    CrowdSaleTokenContractCreation();\n    return newToken;\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\n// File: contracts/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: contracts/OAKTokenCrowdsale.sol\n\ncontract OAKTokenCrowdsale is FinalizableCrowdsale, Pausable {\n\n  uint256 public restrictedPercent;\n  address public restricted;\n  uint256 public soldTokens;\n  uint256 public hardCap;\n  uint256 public vipRate;\n\n  uint256 public totalTokenSupply;\n\n  mapping(address => bool) public vip;\n\n  //TokenTimelock logic\n  uint256 public Y1_lockedTokenReleaseTime;\n  uint256 public Y1_lockedTokenAmount;\n\n  uint256 public Y2_lockedTokenReleaseTime;\n  uint256 public Y2_lockedTokenAmount;\n\n\n  // constructor\n  function OAKTokenCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public\n  Crowdsale(_startTime, _endTime, _rate, _wallet) {\n\n    // total token supply for sales\n    totalTokenSupply = 75000000 * 10 ** 18;\n\n    // hardCap for pre-sale\n    hardCap = 7000000 * 10 ** 18;\n\n    vipRate = _rate;\n    soldTokens = 0;\n\n    restrictedPercent = 20;\n    restricted = msg.sender;\n  }\n\n  // update hardCap for sale\n  function setHardCap(uint256 _hardCap) public onlyOwner {\n    require(!isFinalized);\n    require(_hardCap >= 0 && _hardCap <= totalTokenSupply);\n\n    hardCap = _hardCap;\n  }\n\n  // update address where funds are collected\n  function setWalletAddress(address _wallet) public onlyOwner {\n    require(!isFinalized);\n\n    wallet = _wallet;\n  }\n\n  // update token units a buyer gets per wei\n  function setRate(uint256 _rate) public onlyOwner {\n    require(!isFinalized);\n    require(_rate > 0);\n\n    rate = _rate;\n  }\n\n  // update token units a vip buyer gets per wei\n  function setVipRate(uint256 _vipRate) public onlyOwner {\n    require(!isFinalized);\n    require(_vipRate > 0);\n\n    vipRate = _vipRate;\n  }\n\n  // add VIP buyer address\n  function setVipAddress(address _address) public onlyOwner {\n    vip[_address] = true;\n  }\n\n  // remove VIP buyer address\n  function unsetVipAddress(address _address) public onlyOwner {\n    vip[_address] = false;\n  }\n\n  // update startTime, endTime for post-sales\n  function setSalePeriod(uint256 _startTime, uint256 _endTime) public onlyOwner {\n    require(!isFinalized);\n    require(_startTime > 0);\n    require(_endTime > _startTime);\n\n    startTime = _startTime;\n    endTime = _endTime;\n  }\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // overriding Crowdsale#buyTokens to add pausable sales and vip logic\n  function buyTokens(address beneficiary) public whenNotPaused payable {\n    require(beneficiary != address(0));\n    require(!isFinalized);\n\n    uint256 weiAmount = msg.value;\n    uint tokens;\n\n    if(vip[msg.sender] == true){\n      tokens = weiAmount.mul(vipRate);\n    }else{\n      tokens = weiAmount.mul(rate);\n    }\n    require(validPurchase(tokens));\n    soldTokens = soldTokens.add(tokens);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // overriding Crowdsale#validPurchase to add capped sale logic\n  // @return true if the transaction can buy tokens\n  function validPurchase(uint256 tokens) internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool withinCap = soldTokens.add(tokens) <= hardCap;\n    bool withinTotalSupply = soldTokens.add(tokens) <= totalTokenSupply;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase && withinCap && withinTotalSupply;\n  }\n\n  // overriding FinalizableCrowdsale#finalization to add 20% of sold token for owner\n  function finalization() internal {\n    // mint locked token to Crowdsale contract\n    uint256 restrictedTokens = soldTokens.div(100).mul(restrictedPercent);\n    token.mint(this, restrictedTokens);\n    token.kycVerify(this);\n\n    Y1_lockedTokenReleaseTime = now + 1 years;\n    Y1_lockedTokenAmount = restrictedTokens.div(2);\n\n    Y2_lockedTokenReleaseTime = now + 2 years;\n    Y2_lockedTokenAmount = restrictedTokens.div(2);\n\n    // stop minting new tokens\n    token.finishMinting();\n\n    // transfer the contract ownership to OAKTokenCrowdsale.owner\n    token.transferOwnership(owner);\n\n  }\n\n  // release the 1st year locked token\n  function Y1_release() onlyOwner public {\n    require(Y1_lockedTokenAmount > 0);\n    require(now > Y1_lockedTokenReleaseTime);\n\n    // transfer the locked token to restricted\n    token.transfer(restricted, Y1_lockedTokenAmount);\n\n    Y1_lockedTokenAmount = 0;\n  }\n\n  // release the 2nd year locked token\n  function Y2_release() onlyOwner public {\n    require(Y1_lockedTokenAmount == 0);\n    require(Y2_lockedTokenAmount > 0);\n    require(now > Y2_lockedTokenReleaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    // transfer the locked token to restricted\n    token.transfer(restricted, amount);\n\n    Y2_lockedTokenAmount = 0;\n  }\n\n  function kycVerify(address participant) onlyOwner public {\n    token.kycVerify(participant);\n  }\n\n  function addPrecommitment(address participant, uint balance) onlyOwner public {\n    require(!isFinalized);\n    require(balance > 0);\n    // Check if the total token supply will be exceeded\n    require(soldTokens.add(balance) <= totalTokenSupply);\n\n    soldTokens = soldTokens.add(balance);\n    token.mint(participant, balance);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"kycVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kycRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"KycVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052601681527f41636f726e20436f6c6c65637469766520546f6b656e000000000000000000006020820152600490805161005b9291602001906100c9565b5060408051908101604052600381527f4f414b0000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100c9565b50601260065560038054600160a060020a03191633600160a060020a0316179055610164565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010a57805160ff1916838001178555610137565b82800160010185558215610137579182015b8281111561013757825182559160200191906001019061011c565b50610143929150610147565b5090565b61016191905b80821115610143576000815560010161014d565b90565b610d86806101736000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010057806306fdde0314610127578063095ea7b3146101b157806318160ddd146101d35780631881b0f0146101f857806323b872dd14610219578063313ce5671461024157806340c10f1914610254578063661884631461027657806370a08231146102985780637d64bcb4146102b75780638da5cb5b146102ca57806395d89b41146102f9578063a9059cbb1461030c578063b7121da41461032e578063d73dd6231461034d578063dd62ed3e1461036f578063f2fde38b14610394575b600080fd5b341561010b57600080fd5b6101136103b3565b604051901515815260200160405180910390f35b341561013257600080fd5b61013a6103c3565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017657808201518382015260200161015e565b50505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bc57600080fd5b610113600160a060020a0360043516602435610461565b34156101de57600080fd5b6101e66104cd565b60405190815260200160405180910390f35b341561020357600080fd5b610217600160a060020a03600435166104d3565b005b341561022457600080fd5b610113600160a060020a036004358116906024351660443561053e565b341561024c57600080fd5b6101e6610577565b341561025f57600080fd5b610113600160a060020a036004351660243561057d565b341561028157600080fd5b610113600160a060020a03600435166024356105e6565b34156102a357600080fd5b6101e6600160a060020a03600435166106e0565b34156102c257600080fd5b6101136106fb565b34156102d557600080fd5b6102dd610786565b604051600160a060020a03909116815260200160405180910390f35b341561030457600080fd5b61013a610795565b341561031757600080fd5b610113600160a060020a0360043516602435610800565b341561033957600080fd5b610113600160a060020a0360043516610830565b341561035857600080fd5b610113600160a060020a0360043516602435610845565b341561037a57600080fd5b6101e6600160a060020a03600435811690602435166108e9565b341561039f57600080fd5b610217600160a060020a0360043516610914565b60035460a060020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60035433600160a060020a039081169116146104ee57600080fd5b600160a060020a03811660008181526007602052604090819020805460ff191690557fb3e6054663369578ee4831fc6c8ee9486db04e6f78b939250094785f6b6a430b905160405180910390a250565b600160a060020a03831660009081526007602052604081205460ff161561056457600080fd5b61056f8484846109af565b949350505050565b60065481565b60035460009033600160a060020a0390811691161461059b57600080fd5b60035460a060020a900460ff16156105b257600080fd5b600160a060020a0383166000908152600760205260409020805460ff191660011790556105df8383610b31565b9392505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561064357600160a060020a03338116600090815260026020908152604080832093881683529290529081205561067a565b610653818463ffffffff610c3e16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461071957600080fd5b60035460a060020a900460ff161561073057600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104595780601f1061042e57610100808354040283529160200191610459565b600160a060020a03331660009081526007602052604081205460ff161561082657600080fd5b6105df8383610c50565b60076020526000908152604090205460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461087d908363ffffffff610d4b16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461092f57600080fd5b600160a060020a038116151561094457600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156109c657600080fd5b600160a060020a0384166000908152600160205260409020548211156109eb57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a1e57600080fd5b600160a060020a038416600090815260016020526040902054610a47908363ffffffff610c3e16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a7c908363ffffffff610d4b16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610ac4908363ffffffff610c3e16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60035460009033600160a060020a03908116911614610b4f57600080fd5b60035460a060020a900460ff1615610b6657600080fd5b600054610b79908363ffffffff610d4b16565b6000908155600160a060020a038416815260016020526040902054610ba4908363ffffffff610d4b16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082821115610c4a57fe5b50900390565b6000600160a060020a0383161515610c6757600080fd5b600160a060020a033316600090815260016020526040902054821115610c8c57600080fd5b600160a060020a033316600090815260016020526040902054610cb5908363ffffffff610c3e16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610cea908363ffffffff610d4b16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828201838110156105df57fe00a165627a7a72305820aaa7e612ecd9fd4488cc5a2ca9129daa46f3b3cd3e8b5e5df2271ef1d0d042a10029"
}