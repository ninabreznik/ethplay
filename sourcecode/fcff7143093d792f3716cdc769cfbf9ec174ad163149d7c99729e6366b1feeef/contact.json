{
  "address": "0x8f4d305a521a45b72b44cf96740f87a634e85143",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpaceWar",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-16\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * SpaceWar\n * ETH Idle Game\n * spacewar.etherfun.net\n */\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n}\n\nlibrary NumericSequence\n{\n    using SafeMath for uint256;\n    function sumOfN(uint256 basePrice, uint256 pricePerLevel, uint256 owned, uint256 count) internal pure returns (uint256 price)\n    {\n        require(count > 0);\n\n        price = 0;\n        price += SafeMath.mul((basePrice + pricePerLevel * owned), count);\n        price += pricePerLevel * (count.mul((count-1))) / 2;\n    }\n}\n\n//-----------------------------------------------------------------------\ncontract SpaceWar  {\n    using NumericSequence for uint;\n    using SafeMath for uint;\n\n    struct MinerData\n    {\n        uint256[9]   spaces; // space types and their upgrades\n        uint8[3]     hasUpgrade;\n        uint256      money;\n        uint256      lastUpdateTime;\n        uint256      premamentMineBonusPct;\n        uint256      unclaimedPot;\n        uint256      lastPotClaimIndex;\n    }\n\n    struct SpaceData\n    {\n        uint256 basePrice;\n        uint256 baseOutput;\n        uint256 pricePerLevel;\n        uint256 priceInETH;\n        uint256 limit;\n    }\n\n    struct BoostData\n    {\n        uint256 percentBonus;\n        uint256 priceInWEI;\n    }\n\n    struct PVPData\n    {\n        uint256[6] troops;\n        uint256    immunityTime;\n        uint256    exhaustTime;\n    }\n\n    struct TroopData\n    {\n        uint256 attackPower;\n        uint256 defensePower;\n        uint256 priceGold;\n        uint256 priceETH;\n    }\n\n    uint8 private constant NUMBER_OF_RIG_TYPES = 9;\n    SpaceData[9]  private spaceData;\n\n    uint8 private constant NUMBER_OF_UPGRADES = 3;\n    BoostData[3] private boostData;\n\n    uint8 private constant NUMBER_OF_TROOPS = 6;\n    uint8 private constant ATTACKER_START_IDX = 0;\n    uint8 private constant ATTACKER_END_IDX = 3;\n    uint8 private constant DEFENDER_START_IDX = 3;\n    uint8 private constant DEFENDER_END_IDX = 6;\n    TroopData[6] private troopData;\n\n    // honey pot variables\n    uint256 private honeyPotAmount;\n    uint256 private honeyPotSharePct; // 90%\n    uint256 private jackPot;\n    uint256 private devFund;\n    uint256 private nextPotDistributionTime;\n    mapping(address => mapping(uint256 => uint256)) private minerICOPerCycle;\n    uint256[] private honeyPotPerCycle;\n    uint256[] private globalICOPerCycle;\n    uint256 private cycleCount;\n\n    //booster info\n    uint256 private constant NUMBER_OF_BOOSTERS = 5;\n    uint256 private boosterIndex;\n    uint256 private nextBoosterPrice;\n    address[5] private boosterHolders;\n\n    mapping(address => MinerData) private miners;\n    mapping(address => PVPData)   private pvpMap;\n    mapping(uint256 => address)   private indexes;\n    uint256 private topindex;\n\n    address private owner;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function SpaceWar() public {\n        owner = msg.sender;\n\n        //                   price,           prod.     upgrade,        priceETH, limit\n        spaceData[0] = SpaceData(500,             1,        5,               0,          999);\n        spaceData[1] = SpaceData(50000,           10,       500,             0,          999);\n        spaceData[2] = SpaceData(5000000,         100,      50000,           0,          999);\n        spaceData[3] = SpaceData(80000000,        1000,     800000,          0,          999);\n        spaceData[4] = SpaceData(500000000,       20000,    5000000,         0.01 ether, 999);\n        spaceData[5] = SpaceData(10000000000,     100000,   100000000,       0,          999);\n        spaceData[6] = SpaceData(100000000000,    1000000,  1000000000,      0,          999);\n        spaceData[7] = SpaceData(1000000000000,   50000000, 10000000000,     0.1 ether,  999);\n        spaceData[8] = SpaceData(10000000000000,  100000000,100000000000,    0,          999);\n\n        boostData[0] = BoostData(30,  0.01 ether);\n        boostData[1] = BoostData(50,  0.1 ether);\n        boostData[2] = BoostData(100, 1 ether);\n\n        topindex = 0;\n        honeyPotAmount = 0;\n        devFund = 0;\n        jackPot = 0;\n        nextPotDistributionTime = block.timestamp;\n        honeyPotSharePct = 90;\n\n        // has to be set to a value\n        boosterHolders[0] = owner;\n        boosterHolders[1] = owner;\n        boosterHolders[2] = owner;\n        boosterHolders[3] = owner;\n        boosterHolders[4] = owner;\n\n        boosterIndex = 0;\n        nextBoosterPrice = 0.1 ether;\n\n        //pvp\n        troopData[0] = TroopData(10,     0,      100000,   0);\n        troopData[1] = TroopData(1000,   0,      80000000, 0);\n        troopData[2] = TroopData(100000, 0,      1000000000,   0.01 ether);\n        troopData[3] = TroopData(0,      15,     100000,   0);\n        troopData[4] = TroopData(0,      1500,   80000000, 0);\n        troopData[5] = TroopData(0,      150000, 1000000000,   0.01 ether);\n\n        honeyPotPerCycle.push(0);\n        globalICOPerCycle.push(1);\n        cycleCount = 0;\n    }\n\n    //--------------------------------------------------------------------------\n    // Data access functions\n    //--------------------------------------------------------------------------\n    function GetMinerData(address minerAddr) public constant returns\n        (uint256 money, uint256 lastupdate, uint256 prodPerSec,\n         uint256[9] spaces, uint[3] upgrades, uint256 unclaimedPot, bool hasBooster, uint256 unconfirmedMoney)\n    {\n        uint8 i = 0;\n\n        money = miners[minerAddr].money;\n        lastupdate = miners[minerAddr].lastUpdateTime;\n        prodPerSec = GetProductionPerSecond(minerAddr);\n\n        for(i = 0; i < NUMBER_OF_RIG_TYPES; ++i)\n        {\n            spaces[i] = miners[minerAddr].spaces[i];\n        }\n\n        for(i = 0; i < NUMBER_OF_UPGRADES; ++i)\n        {\n            upgrades[i] = miners[minerAddr].hasUpgrade[i];\n        }\n\n        unclaimedPot = miners[minerAddr].unclaimedPot;\n        hasBooster = HasBooster(minerAddr);\n\n        unconfirmedMoney = money + (prodPerSec * (now - lastupdate));\n    }\n\n    function GetTotalMinerCount() public constant returns (uint256 count)\n    {\n        count = topindex;\n    }\n\n    function GetMinerAt(uint256 idx) public constant returns (address minerAddr)\n    {\n        require(idx < topindex);\n        minerAddr = indexes[idx];\n    }\n\n    function GetPotInfo() public constant returns (uint256 _honeyPotAmount, uint256 _devFunds, uint256 _jackPot, uint256 _nextDistributionTime)\n    {\n        _honeyPotAmount = honeyPotAmount;\n        _devFunds = devFund;\n        _jackPot = jackPot;\n        _nextDistributionTime = nextPotDistributionTime;\n    }\n\n    function GetProductionPerSecond(address minerAddr) public constant returns (uint256 personalProduction)\n    {\n        MinerData storage m = miners[minerAddr];\n\n        personalProduction = 0;\n        uint256 productionSpeed = 100 + m.premamentMineBonusPct;\n\n        if(HasBooster(minerAddr)) // 100% bonus\n            productionSpeed += 100;\n\n        for(uint8 j = 0; j < NUMBER_OF_RIG_TYPES; ++j)\n        {\n            personalProduction += m.spaces[j] * spaceData[j].baseOutput;\n        }\n\n        personalProduction = personalProduction * productionSpeed / 100;\n    }\n\n    function GetGlobalProduction() public constant returns (uint256 globalMoney, uint256 globalHashRate)\n    {\n        globalMoney = 0;\n        globalHashRate = 0;\n        uint i = 0;\n        for(i = 0; i < topindex; ++i)\n        {\n            MinerData storage m = miners[indexes[i]];\n            globalMoney += m.money;\n            globalHashRate += GetProductionPerSecond(indexes[i]);\n        }\n    }\n\n    function GetBoosterData() public constant returns (address[5] _boosterHolders, uint256 currentPrice, uint256 currentIndex)\n    {\n        for(uint i = 0; i < NUMBER_OF_BOOSTERS; ++i)\n        {\n            _boosterHolders[i] = boosterHolders[i];\n        }\n        currentPrice = nextBoosterPrice;\n        currentIndex = boosterIndex;\n    }\n\n    function HasBooster(address addr) public constant returns (bool hasBoost)\n    {\n        for(uint i = 0; i < NUMBER_OF_BOOSTERS; ++i)\n        {\n           if(boosterHolders[i] == addr)\n            return true;\n        }\n        return false;\n    }\n\n    function GetPVPData(address addr) public constant returns (uint256 attackpower, uint256 defensepower, uint256 immunityTime, uint256 exhaustTime,\n    uint256[6] troops)\n    {\n        PVPData storage a = pvpMap[addr];\n\n        immunityTime = a.immunityTime;\n        exhaustTime = a.exhaustTime;\n\n        attackpower = 0;\n        defensepower = 0;\n        for(uint i = 0; i < NUMBER_OF_TROOPS; ++i)\n        {\n            attackpower  += a.troops[i] * troopData[i].attackPower;\n            defensepower += a.troops[i] * troopData[i].defensePower;\n\n            troops[i] = a.troops[i];\n        }\n    }\n\n    function GetCurrentICOCycle() public constant returns (uint256)\n    {\n        return cycleCount;\n    }\n\n    function GetICOData(uint256 idx) public constant returns (uint256 ICOFund, uint256 ICOPot)\n    {\n        require(idx <= cycleCount);\n        ICOFund = globalICOPerCycle[idx];\n        if(idx < cycleCount)\n        {\n            ICOPot = honeyPotPerCycle[idx];\n        } else\n        {\n            ICOPot =  honeyPotAmount / 10; // actual day estimate\n        }\n    }\n\n    function GetMinerICOData(address miner, uint256 idx) public constant returns (uint256 ICOFund, uint256 ICOShare, uint256 lastClaimIndex)\n    {\n        require(idx <= cycleCount);\n        ICOFund = minerICOPerCycle[miner][idx];\n        if(idx < cycleCount)\n        {\n            ICOShare = (honeyPotPerCycle[idx] * minerICOPerCycle[miner][idx]) / globalICOPerCycle[idx];\n        } else\n        {\n            ICOShare = (honeyPotAmount / 10) * minerICOPerCycle[miner][idx] / globalICOPerCycle[idx];\n        }\n        lastClaimIndex = miners[miner].lastPotClaimIndex;\n    }\n\n    function GetMinerUnclaimedICOShare(address miner) public constant returns (uint256 unclaimedPot)\n    {\n        MinerData storage m = miners[miner];\n\n        require(m.lastUpdateTime != 0);\n        require(m.lastPotClaimIndex < cycleCount);\n\n        uint256 i = m.lastPotClaimIndex;\n        uint256 limit = cycleCount;\n\n        if((limit - i) > 30) // more than 30 iterations(days) afk\n            limit = i + 30;\n\n        unclaimedPot = 0;\n        for(; i < cycleCount; ++i)\n        {\n            if(minerICOPerCycle[miner][i] > 0)\n                unclaimedPot += (honeyPotPerCycle[i] * minerICOPerCycle[miner][i]) / globalICOPerCycle[i];\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // SpaceWars game handler functions\n    // -------------------------------------------------------------------------\n    function StartNewMiner() external\n    {\n        require(miners[msg.sender].lastUpdateTime == 0);\n\n        miners[msg.sender].lastUpdateTime = block.timestamp;\n        miners[msg.sender].money = 0;\n        miners[msg.sender].spaces[0] = 1;\n        miners[msg.sender].unclaimedPot = 0;\n        miners[msg.sender].lastPotClaimIndex = cycleCount;\n\n        pvpMap[msg.sender].immunityTime = block.timestamp + 14400;\n        pvpMap[msg.sender].exhaustTime  = block.timestamp;\n\n        indexes[topindex] = msg.sender;\n        ++topindex;\n    }\n\n    function UpgradeSpace(uint8 spaceIdx, uint16 count) external\n    {\n        require(spaceIdx < NUMBER_OF_RIG_TYPES);\n        require(count > 0);\n        require(count <= 999);\n        require(spaceData[spaceIdx].priceInETH == 0);\n        MinerData storage m = miners[msg.sender];\n\n        require(spaceData[spaceIdx].limit >= (m.spaces[spaceIdx] + count));\n\n        UpdateMoney();\n\n        // the base of geometrical sequence\n        uint256 price = NumericSequence.sumOfN(spaceData[spaceIdx].basePrice, spaceData[spaceIdx].pricePerLevel, m.spaces[spaceIdx], count);\n\n        require(m.money >= price);\n\n        m.spaces[spaceIdx] = m.spaces[spaceIdx] + count;\n\n        if(m.spaces[spaceIdx] > spaceData[spaceIdx].limit)\n            m.spaces[spaceIdx] = spaceData[spaceIdx].limit;\n\n        m.money -= price;\n    }\n\n    function UpgradeSpaceETH(uint8 spaceIdx, uint256 count) external payable\n    {\n        require(spaceIdx < NUMBER_OF_RIG_TYPES);\n        require(count > 0);\n        require(count <= 999);\n        require(spaceData[spaceIdx].priceInETH > 0);\n\n        MinerData storage m = miners[msg.sender];\n\n        require(spaceData[spaceIdx].limit >= (m.spaces[spaceIdx] + count));\n\n        uint256 price = (spaceData[spaceIdx].priceInETH).mul(count);\n\n        uint256 priceCoin = NumericSequence.sumOfN(spaceData[spaceIdx].basePrice, spaceData[spaceIdx].pricePerLevel, m.spaces[spaceIdx], count);\n\n        UpdateMoney();\n        require(msg.value >= price);\n        require(m.money >= priceCoin);\n\n        BuyHandler(msg.value);\n\n        m.spaces[spaceIdx] = m.spaces[spaceIdx] + count;\n\n        if(m.spaces[spaceIdx] > spaceData[spaceIdx].limit)\n            m.spaces[spaceIdx] = spaceData[spaceIdx].limit;\n\n        m.money -= priceCoin;\n    }\n\n    function UpdateMoney() private\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(block.timestamp >= miners[msg.sender].lastUpdateTime);\n\n        MinerData storage m = miners[msg.sender];\n        uint256 diff = block.timestamp - m.lastUpdateTime;\n        uint256 revenue = GetProductionPerSecond(msg.sender);\n\n        m.lastUpdateTime = block.timestamp;\n        if(revenue > 0)\n        {\n            revenue *= diff;\n\n            m.money += revenue;\n        }\n    }\n\n    function UpdateMoneyAt(address addr) private\n    {\n        require(miners[addr].lastUpdateTime != 0);\n        require(block.timestamp >= miners[addr].lastUpdateTime);\n\n        MinerData storage m = miners[addr];\n        uint256 diff = block.timestamp - m.lastUpdateTime;\n        uint256 revenue = GetProductionPerSecond(addr);\n\n        m.lastUpdateTime = block.timestamp;\n        if(revenue > 0)\n        {\n            revenue *= diff;\n\n            m.money += revenue;\n        }\n    }\n\n    function BuyUpgrade(uint256 idx) external payable\n    {\n        require(idx < NUMBER_OF_UPGRADES);\n        require(msg.value >= boostData[idx].priceInWEI);\n        require(miners[msg.sender].hasUpgrade[idx] == 0);\n        require(miners[msg.sender].lastUpdateTime != 0);\n\n        BuyHandler(msg.value);\n\n        UpdateMoney();\n\n        miners[msg.sender].hasUpgrade[idx] = 1;\n        miners[msg.sender].premamentMineBonusPct +=  boostData[idx].percentBonus;\n    }\n\n    //--------------------------------------------------------------------------\n    // BOOSTER handlers\n    //--------------------------------------------------------------------------\n    function BuyBooster() external payable\n    {\n        require(msg.value >= nextBoosterPrice);\n        require(miners[msg.sender].lastUpdateTime != 0);\n\n        for(uint i = 0; i < NUMBER_OF_BOOSTERS; ++i)\n            if(boosterHolders[i] == msg.sender)\n                revert();\n\n        address beneficiary = boosterHolders[boosterIndex];\n\n        MinerData storage m = miners[beneficiary];\n\n        // 20% interest after 5 buys\n        m.unclaimedPot += (msg.value * 9403) / 10000;\n\n        // distribute the rest\n        honeyPotAmount += (msg.value * 597) / 20000;\n        devFund += (msg.value * 597) / 20000;\n\n        // increase price by 5%\n        nextBoosterPrice += nextBoosterPrice / 20;\n\n        UpdateMoney();\n        UpdateMoneyAt(beneficiary);\n\n        // transfer ownership\n        boosterHolders[boosterIndex] = msg.sender;\n\n        // increase booster index\n        boosterIndex += 1;\n        if(boosterIndex >= 5)\n            boosterIndex = 0;\n    }\n\n    //--------------------------------------------------------------------------\n    // PVP handler\n    //--------------------------------------------------------------------------\n    // 0 for attacker 1 for defender\n    function BuyTroop(uint256 idx, uint256 count) external payable\n    {\n        require(idx < NUMBER_OF_TROOPS);\n        require(count > 0);\n        require(count <= 1000);\n\n        PVPData storage pvp = pvpMap[msg.sender];\n        MinerData storage m = miners[msg.sender];\n\n        uint256 owned = pvp.troops[idx];\n\n        uint256 priceGold = NumericSequence.sumOfN(troopData[idx].priceGold, troopData[idx].priceGold / 100, owned, count);\n        uint256 priceETH = (troopData[idx].priceETH).mul(count);\n\n        UpdateMoney();\n\n        require(m.money >= priceGold);\n        require(msg.value >= priceETH);\n\n        if(priceGold > 0)\n            m.money -= priceGold;\n\n        if(msg.value > 0)\n            BuyHandler(msg.value);\n\n        pvp.troops[idx] += count;\n    }\n\n    function Attack(address defenderAddr) external\n    {\n        require(msg.sender != defenderAddr);\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(miners[defenderAddr].lastUpdateTime != 0);\n\n        PVPData storage attacker = pvpMap[msg.sender];\n        PVPData storage defender = pvpMap[defenderAddr];\n        uint i = 0;\n        uint256 count = 0;\n\n        require(block.timestamp > attacker.exhaustTime);\n        require(block.timestamp > defender.immunityTime);\n\n        // the aggressor loses immunity\n        if(attacker.immunityTime > block.timestamp)\n            attacker.immunityTime = block.timestamp - 1;\n\n        attacker.exhaustTime = block.timestamp + 3600;\n\n        uint256 attackpower = 0;\n        uint256 defensepower = 0;\n        for(i = 0; i < ATTACKER_END_IDX; ++i)\n        {\n            attackpower  += attacker.troops[i] * troopData[i].attackPower;\n            defensepower += defender.troops[i + DEFENDER_START_IDX] * troopData[i + DEFENDER_START_IDX].defensePower;\n        }\n\n        if(attackpower > defensepower)\n        {\n            if(defender.immunityTime < block.timestamp + 14400)\n                defender.immunityTime = block.timestamp + 14400;\n\n            UpdateMoneyAt(defenderAddr);\n\n            MinerData storage m = miners[defenderAddr];\n            MinerData storage m2 = miners[msg.sender];\n            uint256 moneyStolen = m.money / 2;\n\n            for(i = DEFENDER_START_IDX; i < DEFENDER_END_IDX; ++i)\n            {\n                defender.troops[i] = defender.troops[i]/2;\n            }\n\n            for(i = ATTACKER_START_IDX; i < ATTACKER_END_IDX; ++i)\n            {\n                if(troopData[i].attackPower > 0)\n                {\n                    count = attacker.troops[i];\n\n                    // if the troops overpower the total defense power only a fraction is lost\n                    if((count * troopData[i].attackPower) > defensepower)\n                        {\n                            count = count * defensepower / attackpower / 2;\n                        }\n                    else\n                         {\n                             count =  count/2;\n                         }\n                    attacker.troops[i] = SafeMath.sub(attacker.troops[i],count);\n                    defensepower -= count * troopData[i].attackPower;\n                }\n            }\n\n            m.money -= moneyStolen;\n            m2.money += moneyStolen;\n        } else\n        {\n            for(i = ATTACKER_START_IDX; i < ATTACKER_END_IDX; ++i)\n            {\n                attacker.troops[i] = attacker.troops[i] / 2;\n            }\n\n            for(i = DEFENDER_START_IDX; i < DEFENDER_END_IDX; ++i)\n            {\n                if(troopData[i].defensePower > 0)\n                {\n                    count = defender.troops[i];\n\n                    // if the troops overpower the total defense power only a fraction is lost\n                    if((count * troopData[i].defensePower) > attackpower)\n                        count = count * attackpower / defensepower / 2;\n\n                    defender.troops[i] -= count;\n                    attackpower -= count * troopData[i].defensePower;\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // ICO/Pot share functions\n    //--------------------------------------------------------------------------\n    function ReleaseICO() external\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(nextPotDistributionTime <= block.timestamp);\n        require(honeyPotAmount > 0);\n        require(globalICOPerCycle[cycleCount] > 0);\n\n        nextPotDistributionTime = block.timestamp + 86400;\n\n        honeyPotPerCycle[cycleCount] = honeyPotAmount / 10; // 10% of the pot\n\n        honeyPotAmount -= honeyPotAmount / 10;\n\n        honeyPotPerCycle.push(0);\n        globalICOPerCycle.push(0);\n        cycleCount = cycleCount + 1;\n\n        MinerData storage jakpotWinner = miners[msg.sender];\n        jakpotWinner.unclaimedPot += jackPot;\n        jackPot = 0;\n    }\n\n    function FundICO(uint amount) external\n    {\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(amount > 0);\n\n        MinerData storage m = miners[msg.sender];\n\n        UpdateMoney();\n\n        require(m.money >= amount);\n\n        m.money = (m.money).sub(amount);\n\n        globalICOPerCycle[cycleCount] = globalICOPerCycle[cycleCount].add(uint(amount));\n        minerICOPerCycle[msg.sender][cycleCount] = minerICOPerCycle[msg.sender][cycleCount].add(uint(amount));\n    }\n\n    function WithdrawICOEarnings() external\n    {\n        MinerData storage m = miners[msg.sender];\n\n        require(miners[msg.sender].lastUpdateTime != 0);\n        require(miners[msg.sender].lastPotClaimIndex < cycleCount);\n\n        uint256 i = m.lastPotClaimIndex;\n        uint256 limit = cycleCount;\n\n        if((limit - i) > 30) // more than 30 iterations(days) afk\n            limit = i + 30;\n\n        m.lastPotClaimIndex = limit;\n        for(; i < cycleCount; ++i)\n        {\n            if(minerICOPerCycle[msg.sender][i] > 0)\n                m.unclaimedPot += (honeyPotPerCycle[i] * minerICOPerCycle[msg.sender][i]) / globalICOPerCycle[i];\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // ETH handler functions\n    //--------------------------------------------------------------------------\n    function BuyHandler(uint amount) private\n    {\n        // add 90% to honeyPot\n        honeyPotAmount += (amount * honeyPotSharePct) / 100;\n        jackPot += amount / 100;\n        devFund += (amount * (100-(honeyPotSharePct+1))) / 100;\n    }\n\n    function WithdrawPotShare() public\n    {\n        MinerData storage m = miners[msg.sender];\n\n        require(m.unclaimedPot > 0);\n        require(m.lastUpdateTime != 0);\n\n        uint256 amntToSend = m.unclaimedPot;\n        m.unclaimedPot = 0;\n\n        if(msg.sender.send(amntToSend))\n        {\n            m.unclaimedPot = 0;\n        }\n    }\n\n    function WithdrawDevFunds() public\n    {\n        require(msg.sender == owner);\n\n        if(owner.send(devFund))\n        {\n            devFund = 0;\n        }\n    }\n\n    // fallback payment to pot\n    function() public payable {\n         devFund += msg.value;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50605f8054600160a060020a031916331790556040805160a080820183526101f4808352600160208085018290526005858701819052600060608088018290526103e7608098890181905286835594805560028390556003829055600485905588518088018a5261c350808252600a828701819052828c01899052828401859052918a018790529384905560068190556007969096556008829055600985905588518088018a52624c4b408082526064828701819052828c01869052828401859052918a0187905296879055600b55600c92909255600d819055600e849055875180870189526304c4b4008082526103e8828601819052620c3500838c01819052838601859052928a01879052600f919091556010556011556012819055601384905587518087018952631dcd6500808252614e20828601819052828b01889052662386f26fc10000838601819052928a0187905260149190915560155560169590955560178590556018849055875180870189526402540be400808252620186a08286018190526305f5e100838c01819052838601859052928a018790526019829055601a55601b829055601c839055601d86905589518089018b5264174876e800808252620f4240828801819052633b9aca00838e01819052838801879052928c01899052601e828155601f91909155918755602185905560228890558b51808b018d5264e8d4a510008082526302faf080828a01819052828f0186905267016345785d8a0000838a01819052928e018b905260239190915560245560259390935560269290925560278790558a519889018b526509184e72a000808a52898701849052898c0183905294890184905297909801859052602892909255602991909155602a95909555602b859055602c91909155845180860190955291845290830152602d90825160029190910291909101908155602091820151600191820155604080518082018252603280825267016345785d8a0000918501829052602f8190556030829055825180840184526064808252670de0b6b3a764000091870182905260315590556000605e819055604b819055604e819055604d81905542604f55605a604c819055605f5460568054600160a060020a0319908116600160a060020a039093169283179091556057805482168317905560588054821683179055605980548216831790558254161790556054819055605591909155815160808082018452600a808352828701849052620186a08386018190526060938401859052603391909155603484905560358190556036849055845180830186526103e88082528189018690526304c4b40082880181905291850186905260375560388590556039819055603a85905585518084018752828152808901869052633b9aca00818801819052662386f26fc10000918601829052603b849055603c879055603d819055603e82905587518086018952878152600f818c01819052818a01869052908701889052603f88905588556041939093556042869055865180850188528681526105dc818b018190528189018490529086018790526043879055604455604591909155604685905585519283018652848352620249f097830188905294820181905291018390526047829055604894909455604993909355604a55605180548083019091557f994a4b4eddb300691ee19901712848b1114bad8a1a4ae195e5abe0ec38021b94018290556052805480830182559083527fa9144a5e7efd259b8b0d55467f4696ed47ec83317d61501b76366dbcca65ce7301556053819055611e3490819061054490396000f3006080604052600436106101485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630116bfc08114610152578063036a66eb1461015f5780631fd86a6a1461019257806333ad9495146101aa5780633a70eabd146101bf5780634c780596146101e057806356a4e7f9146102025780635b1fef12146102305780636e4dd931146102a85780637eb4b376146102e35780638357417d146102f4578063996f7602146103095780639f0eed0f1461031e578063af29951014610333578063b4beff8a14610368578063b4e6f92b146103aa578063bc346c9c146103b8578063bd1f7d52146103d9578063cb68780f14610432578063cc0f65f71461044a578063d291fa8114610500578063d511beec14610534578063dee8bd5114610549578063f362b9af1461055e578063fdade29f14610573575b604e805434019055005b61015d60043561057b565b005b34801561016b57600080fd5b50610180600160a060020a0360043516610687565b60408051918252519081900360200190f35b34801561019e57600080fd5b5061015d600435610718565b3480156101b657600080fd5b5061015d61081e565b3480156101cb57600080fd5b50610180600160a060020a036004351661088b565b3480156101ec57600080fd5b5061015d60ff6004351661ffff60243516610993565b34801561020e57600080fd5b50610217610b46565b6040805192835260208301919091528051918290030190f35b34801561023c57600080fd5b50610251600160a060020a0360043516610bac565b6040518086815260200185815260200184815260200183815260200182600660200280838360005b83811015610291578181015183820152602001610279565b505050509050019550505050505060405180910390f35b3480156102b457600080fd5b506102bd610c78565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61015d60ff60043516602435610c8c565b34801561030057600080fd5b5061015d610e6d565b34801561031557600080fd5b50610180610ebc565b34801561032a57600080fd5b50610180610ec2565b34801561033f57600080fd5b50610354600160a060020a0360043516610ec8565b604080519115158252519081900360200190f35b34801561037457600080fd5b5061038c600160a060020a0360043516602435610f19565b60408051938452602084019290925282820152519081900360600190f35b61015d600435602435611039565b3480156103c457600080fd5b5061015d600160a060020a036004351661116f565b3480156103e557600080fd5b506103ee61152e565b604051808460a080838360005b838110156104135781810151838201526020016103fb565b5050505091909101938452505060208201526040805191829003019150f35b34801561043e57600080fd5b50610217600435611593565b34801561045657600080fd5b5061046b600160a060020a03600435166115fa565b6040518089815260200188815260200187815260200186600960200280838360005b838110156104a557818101518382015260200161048d565b5050505090500185600360200280838360005b838110156104d05781810151838201526020016104b8565b50505050905001848152602001831515151581526020018281526020019850505050505050505060405180910390f35b34801561050c57600080fd5b50610518600435611744565b60408051600160a060020a039092168252519081900360200190f35b34801561054057600080fd5b5061015d611771565b34801561055557600080fd5b5061015d611877565b34801561056a57600080fd5b5061015d6119a5565b61015d611a43565b6003811061058857600080fd5b602d816003811061059557fe5b600202016001015434101515156105ab57600080fd5b336000908152605b6020526040902060090181600381106105c857fe5b602081049091015460ff601f9092166101000a900416156105e857600080fd5b336000908152605b60205260409020600b0154151561060657600080fd5b61060f34611b90565b610617611bc3565b336000908152605b60205260409020600190600901826003811061063757fe5b602091828204019190066101000a81548160ff021916908360ff160217905550602d8160038110151561066657fe5b6002020154336000908152605b60205260409020600c018054909101905550565b600160a060020a0381166000908152605b60205260408120600c810154606401826106b185610ec8565b156106bd576064820191505b5060005b600960ff8216101561070957600060ff8216600981106106dd57fe5b6005020160010154836000018260ff166009811015156106f957fe5b01540293909301926001016106c1565b60648483020495945050505050565b336000908152605b60205260408120600b0154151561073657600080fd5b6000821161074357600080fd5b50336000908152605b6020526040902061075b611bc3565b600a81015482111561076c57600080fd5b600a810154610781908363ffffffff611c4a16565b600a820155605354605280546107b592859291811061079c57fe5b9060005260206000200154611c5f90919063ffffffff16565b60526053548154811015156107c657fe5b6000918252602080832090910192909255338152605082526040808220605354835290925220546107fd908363ffffffff611c5f16565b33600090815260506020908152604080832060535484529091529020555050565b336000908152605b60205260408120600d810154909190811061084057600080fd5b600b820154151561085057600080fd5b50600d810180546000918290556040519091339183156108fc0291849190818181858888f1935050505015610887576000600d8301555b5050565b600160a060020a0381166000908152605b60205260408120600b8101548290819015156108b757600080fd5b605354600e840154106108c957600080fd5b5050600e810154605354601e82820311156108e45750601e81015b600093505b60535482101561098b57600160a060020a0385166000908152605060209081526040808320858452909152812054111561098057605280548390811061092b57fe5b6000918252602080832090910154600160a060020a0388168352605082526040808420868552909252912054605180548590811061096557fe5b90600052602060002001540281151561097a57fe5b04840193505b8160010191506108e9565b505050919050565b600080600960ff8516106109a657600080fd5b600061ffff8416116109b757600080fd5b6103e761ffff841611156109ca57600080fd5b600060ff8516600981106109da57fe5b600502016003015460001415156109f057600080fd5b336000908152605b60205260409020915061ffff83168260ff861660098110610a1557fe5b015401600060ff861660098110610a2857fe5b600502016004015410151515610a3d57600080fd5b610a45611bc3565b610a95600060ff861660098110610a5857fe5b6005020154600060ff871660098110610a6d57fe5b6005020160020154846000018760ff16600981101515610a8957fe5b01548661ffff16611c75565b90508082600a015410151515610aaa57600080fd5b61ffff83168260ff861660098110610abe57fe5b0154018260ff861660098110610ad057fe5b0155600060ff851660098110610ae257fe5b6005020160040154826000018560ff16600981101515610afe57fe5b01541115610b3557600060ff851660098110610b1657fe5b6005020160040154826000018560ff16600981101515610b3257fe5b01555b600a90910180549190910390555050565b60008080805b605e54821015610ba657506000818152605d6020818152604080842054600160a060020a0316808552605b8352908420600a81015494869052929091529490910193610b9790610687565b83019250816001019150610b4c565b50509091565b600080600080610bba611d8b565b600160a060020a0386166000908152605c60205260408120600681015460078201549297508796509450909250845b6006811015610c6d5760338160068110610bff57fe5b6004020154828260068110610c1057fe5b015402969096019560338160068110610c2557fe5b60040201600101548260000182600681101515610c3e57fe5b0154029590950194818160068110610c5257fe5b0154838260068110610c6057fe5b6020020152600101610be9565b505091939590929450565b604b54604e54604d54604f54929391929091565b60008080600960ff861610610ca057600080fd5b60008411610cad57600080fd5b6103e7841115610cbc57600080fd5b60008060ff871660098110610ccd57fe5b6005020160030154111515610ce157600080fd5b336000908152605b602052604090209250838360ff871660098110610d0257fe5b015401600060ff871660098110610d1557fe5b600502016004015410151515610d2a57600080fd5b610d5484600060ff881660098110610d3e57fe5b6005020160030154611cc090919063ffffffff16565b9150610da2600060ff871660098110610d6957fe5b6005020154600060ff881660098110610d7e57fe5b6005020160020154856000018860ff16600981101515610d9a57fe5b015487611c75565b9050610dac611bc3565b34821115610db957600080fd5b600a830154811115610dca57600080fd5b610dd334611b90565b838360ff871660098110610de357fe5b0154018360ff871660098110610df557fe5b0155600060ff861660098110610e0757fe5b6005020160040154836000018660ff16600981101515610e2357fe5b01541115610e5a57600060ff861660098110610e3b57fe5b6005020160040154836000018660ff16600981101515610e5757fe5b01555b600a909201805492909203909155505050565b605f54600160a060020a03163314610e8457600080fd5b605f54604e54604051600160a060020a039092169181156108fc0291906000818181858888f1935050505015610eba576000604e555b565b605e5490565b60535490565b6000805b6005811015610f0e57600160a060020a03831660568260058110610eec57fe5b0154600160a060020a03161415610f065760019150610f13565b600101610ecc565b600091505b50919050565b60008060006053548411151515610f2f57600080fd5b600160a060020a0385166000908152605060209081526040808320878452909152902054605354909350841015610fc5576052805485908110610f6e57fe5b6000918252602080832090910154600160a060020a03881683526050825260408084208885529092529120546051805487908110610fa857fe5b906000526020600020015402811515610fbd57fe5b049150611014565b6052805485908110610fd357fe5b6000918252602080832090910154600160a060020a0388168352605082526040808420888552909252912054604b54600a90040281151561101057fe5b0491505b50600160a060020a039093166000908152605b60205260409020600e01549093909150565b6000808080806006871061104c57600080fd5b6000861161105957600080fd5b6103e886111561106857600080fd5b336000908152605c60209081526040808320605b909252909120909550935084876006811061109357fe5b015492506110d9603388600681106110a757fe5b6004020160020154606460338a6006811015156110c057fe5b60040201600201548115156110d157fe5b048589611c75565b915061110286603389600681106110ec57fe5b6004020160030154611cc090919063ffffffff16565b905061110c611bc3565b600a84015482111561111d57600080fd5b3481111561112a57600080fd5b600082111561113f57600a8401805483900390555b60003411156111515761115134611b90565b8585886006811061115e57fe5b018054909101905550505050505050565b6000808080808080808033600160a060020a038b16141561118f57600080fd5b336000908152605b60205260409020600b015415156111ad57600080fd5b600160a060020a038a166000908152605b60205260409020600b015415156111d457600080fd5b336000908152605c6020526040808220600160a060020a038d1683529082206007820154919b509950909750879650421161120e57600080fd5b6006880154421161121e57600080fd5b428960060154111561123557600019420160068a01555b610e10420160078a0155600096508694508493505b60038710156112ba576033876006811061126057fe5b600402015489886006811061127157fe5b01540294909401936033600388016006811061128957fe5b600402016001015488600001600360ff1689016006811015156112a857fe5b0154028401935086600101965061124a565b8385111561142e574261384001886006015410156112dd57613840420160068901555b6112e68a611ce5565b505050600160a060020a0387166000908152605b60205260408082203383529120600a82015460039650600290045b600687101561135157600288886006811061132c57fe5b015481151561133757fe5b0488886006811061134457fe5b0155600190960195611315565b600096505b60038710156114155760006033886006811061136e57fe5b6004020154111561140a5788876006811061138557fe5b01549550836033886006811061139757fe5b6004020154870211156113c5576002858588028115156113b357fe5b048115156113bd57fe5b0495506113cc565b6002860495505b6113e38988600681106113db57fe5b015487611c4a565b8988600681106113ef57fe5b0155603387600681106113fe57fe5b60040201548602909303925b866001019650611356565b600a808401805483900390558201805482019055611522565b600096505b600387101561146f57600289886006811061144a57fe5b015481151561145557fe5b0489886006811061146257fe5b0155600190960195611433565b600396505b60068710156115225760006033886006811061148c57fe5b60040201600101541115611517578787600681106114a657fe5b0154955084603388600681106114b857fe5b6004020160010154870211156114e5576002848688028115156114d757fe5b048115156114e157fe5b0495505b858888600681106114f257fe5b0180549190910390556033876006811061150857fe5b60040201600101548602850394505b866001019650611474565b50505050505050505050565b611536611daa565b600080805b6005811015611583576056816005811061155157fe5b0154600160a060020a031684826005811061156857fe5b600160a060020a03909216602092909202015260010161153b565b6055549250605454915050909192565b60008060535483111515156115a757600080fd5b60528054849081106115b557fe5b906000526020600020015491506053548310156115ec5760518054849081106115da57fe5b906000526020600020015490506115f5565b50604b54600a90045b915091565b6000806000611607611dc9565b61160f611de9565b600160a060020a0386166000908152605b60205260408120600a810154600b9091015490965094508080806116438a610687565b9650600090505b600960ff8216101561169a57600160a060020a038a166000908152605b6020526040902060ff82166009811061167c57fe5b01548660ff83166009811061168d57fe5b602002015260010161164a565b5060005b600360ff8216101561170657600160a060020a038a166000908152605b6020526040902060090160ff8216600381106116d357fe5b602081049091015460ff601f9092166101000a900481169086908316600381106116f957fe5b602002015260010161169e565b600160a060020a038a166000908152605b60205260409020600d0154935061172d8a610ec8565b925087420387028901915050919395975091939597565b605e54600090821061175557600080fd5b506000908152605d6020526040902054600160a060020a031690565b336000908152605b60205260408120600b8101549091908190151561179557600080fd5b605354336000908152605b60205260409020600e0154106117b557600080fd5b5050600e810154605354601e82820311156117d05750601e81015b600e83018190555b60535482101561187257336000908152605060209081526040808320858452909152812054111561186757605280548390811061181157fe5b6000918252602080832090910154338352605082526040808420868552909252912054605180548590811061184257fe5b90600052602060002001540281151561185757fe5b600d850180549290910490910190555b8160010191506117d8565b505050565b336000908152605b60205260408120600b0154151561189557600080fd5b604f544210156118a457600080fd5b604b546000106118b357600080fd5b600060526053548154811015156118c657fe5b90600052602060002001541115156118dd57600080fd5b620151804201604f55604b54600a900460516053548154811015156118fe57fe5b6000918252602080832090910192909255604b8054600a8104900390556051805460018181019092557f994a4b4eddb300691ee19901712848b1114bad8a1a4ae195e5abe0ec38021b9401829055605280548083019091557fa9144a5e7efd259b8b0d55467f4696ed47ec83317d61501b76366dbcca65ce7301829055605380549091019055338152605b90915260408120604d8054600d90920180549092019091555550565b336000908152605b60205260409020600b0154156119c257600080fd5b336000818152605b6020908152604080832042600b8201819055600a82018590556001808355600d8301869055605354600e90930192909255605c84528285206138408201600682015560070155605e80548552605d9093529220805473ffffffffffffffffffffffffffffffffffffffff19169093179092558154019055565b60008060006055543410151515611a5957600080fd5b336000908152605b60205260409020600b01541515611a7757600080fd5b600092505b6005831015611ab4573360568460058110611a9357fe5b0154600160a060020a03161415611aa957600080fd5b826001019250611a7c565b60545460569060058110611ac457fe5b0154600160a060020a03166000818152605b60205260409020600d81018054612710346124bb810291909104909101909155604b8054614e20610255909302929092049182019055604e8054909101905560558054601481040190559092509050611b2d611bc3565b611b3682611ce5565b336056605454600581101515611b4857fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556054805460010190819055600511611872576000605455505050565b604c54604b80546064848402819004909101909155604d8054828504019055604e80549282036000190190930204019055565b336000908152605b60205260408120600b0154819081901515611be557600080fd5b336000908152605b60205260409020600b0154421015611c0457600080fd5b336000818152605b60205260409020600b81015490945042039250611c2890610687565b42600b8501559050600081111561187257600a92909201805491909202019055565b600082821115611c5957600080fd5b50900390565b81810182811015611c6f57600080fd5b92915050565b6000808211611c8357600080fd5b506000611c94848402860183611cc0565b016002611cab83600019810163ffffffff611cc016565b8502811515611cb657fe5b0401949350505050565b818102821580611cda5750818382811515611cd757fe5b04145b1515611c6f57600080fd5b600160a060020a0381166000908152605b60205260408120600b0154819081901515611d1057600080fd5b600160a060020a0384166000908152605b60205260409020600b0154421015611d3857600080fd5b600160a060020a0384166000908152605b60205260409020600b81015490935042039150611d6584610687565b42600b85015590506000811115611d8557600a8301805491830291820190555b50505050565b60c0604051908101604052806006906020820280388339509192915050565b60a0604051908101604052806005906020820280388339509192915050565b610120604051908101604052806009906020820280388339509192915050565b60606040519081016040528060039060208202803883395091929150505600a165627a7a72305820bf78e7d2a135c37536670e981f529019a0f860768ccb0135b9c3d174b49ab8e90029"
}