{
  "address": "0x2e7570255ac8c449217fb15405fac01f5408d114",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoRome: Centurion Token",
  "contractName": "Centurions",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity ^0.4.19;\n\ncontract Ownable {\n  address public owner;\n  address public ceoWallet;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n    ceoWallet = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n// Interface for contracts conforming to ERC-721: Non-Fungible Tokens\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n  function totalSupply() public view returns (uint256 total);\n}\n\n\ncontract CryptoRomeControl is Ownable {\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function transferWalletOwnership(address newWalletAddress) onlyOwner public {\n      require(newWalletAddress != address(0));\n      ceoWallet = newWalletAddress;\n    }\n\n    function pause() external onlyOwner whenNotPaused {\n        paused = true;\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n    }\n}\n\ncontract Centurions is ERC721, CryptoRomeControl {\n\n    // Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"CryptoRomeCenturion\";\n    string public constant symbol = \"CROMEC\";\n\n    struct Centurion {\n        uint256 level;\n        uint256 experience;\n        uint256 askingPrice;\n    }\n\n    uint256[50] public expForLevels = [\n        0,   // 0\n        20,\n        50,\n        100,\n        200,\n        400,  // 5\n        800,\n        1400,\n        2100,\n        3150,\n        4410,  // 10\n        5740,\n        7460,\n        8950,\n        10740,\n        12880,\n        15460,\n        18550,\n        22260,\n        26710,\n        32050, // 20\n        38500,\n        46200,\n        55400,\n        66500,\n        79800,\n        95700,\n        115000,\n        138000,\n        166000,\n        200000, // 30\n        240000,\n        290000,\n        350000,\n        450000,\n        580000,\n        820000,\n        1150000,\n        1700000,\n        2600000,\n        3850000, // 40\n        5800000,\n        8750000,\n        13000000,\n        26000000,\n        52000000,\n        104000000,\n        208000000,\n        416000000,\n        850000000 // 49\n    ];\n\n    Centurion[] internal allCenturionTokens;\n\n    string internal tokenURIs;\n\n    // Map of Centurion to the owner\n    mapping (uint256 => address) public centurionIndexToOwner;\n    mapping (address => uint256) ownershipTokenCount;\n    mapping (uint256 => address) centurionIndexToApproved;\n\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(centurionIndexToOwner[_tokenId] == msg.sender);\n        _;\n    }\n\n    function getCenturion(uint256 _tokenId) external view\n        returns (\n            uint256 level,\n            uint256 experience,\n            uint256 askingPrice\n        ) {\n        Centurion storage centurion = allCenturionTokens[_tokenId];\n\n        level = centurion.level;\n        experience = centurion.experience;\n        askingPrice = centurion.askingPrice;\n    }\n\n    function updateTokenUri(uint256 _tokenId, string _tokenURI) public whenNotPaused onlyOwner {\n        _setTokenURI(_tokenId, _tokenURI);\n    }\n\n    function createCenturion() public whenNotPaused onlyOwner returns (uint256) {\n        uint256 finalId = _createCenturion(msg.sender);\n        return finalId;\n    }\n\n    function issueCenturion(address _to) public whenNotPaused onlyOwner returns (uint256) {\n        uint256 finalId = _createCenturion(msg.sender);\n        _transfer(msg.sender, _to, finalId);\n        return finalId;\n    }\n\n    function listCenturion(uint256 _askingPrice) public whenNotPaused onlyOwner returns (uint256) {\n        uint256 finalId = _createCenturion(msg.sender);\n        allCenturionTokens[finalId].askingPrice = _askingPrice;\n        return finalId;\n    }\n\n    function sellCenturion(uint256 _tokenId, uint256 _askingPrice) onlyOwnerOf(_tokenId) whenNotPaused public {\n        allCenturionTokens[_tokenId].askingPrice = _askingPrice;\n    }\n\n    function cancelCenturionSale(uint256 _tokenId) onlyOwnerOf(_tokenId) whenNotPaused public {\n        allCenturionTokens[_tokenId].askingPrice = 0;\n    }\n\n    function purchaseCenturion(uint256 _tokenId) whenNotPaused public payable {\n        require(allCenturionTokens[_tokenId].askingPrice > 0);\n        require(msg.value >= allCenturionTokens[_tokenId].askingPrice);\n        allCenturionTokens[_tokenId].askingPrice = 0;\n        uint256 fee = devFee(msg.value);\n        ceoWallet.transfer(fee);\n        centurionIndexToOwner[_tokenId].transfer(SafeMath.sub(address(this).balance, fee));\n        _transfer(centurionIndexToOwner[_tokenId], msg.sender, _tokenId);\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to] = SafeMath.add(ownershipTokenCount[_to], 1);\n        centurionIndexToOwner[_tokenId] = _to;\n        if (_from != address(0)) {\n            // clear any previously approved ownership exchange\n            ownershipTokenCount[_from] = SafeMath.sub(ownershipTokenCount[_from], 1);\n            delete centurionIndexToApproved[_tokenId];\n        }\n    }\n\n    function _createCenturion(address _owner) internal returns (uint) {\n        Centurion memory _centurion = Centurion({\n            level: 1,\n            experience: 0,\n            askingPrice: 0\n        });\n        uint256 newCenturionId = allCenturionTokens.push(_centurion) - 1;\n\n        // Only 1000 centurions should ever exist (0-999)\n        require(newCenturionId < 1000);\n        _transfer(0, _owner, newCenturionId);\n        return newCenturionId;\n    }\n\n    function devFee(uint256 amount) internal pure returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount, 3), 100);\n    }\n\n    // Functions for ERC721 Below:\n\n    // Check is address has approval to transfer centurion.\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return centurionIndexToApproved[_tokenId] == _claimant;\n    }\n\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = centurionIndexToOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    function addExperience(uint256 _tokenId, uint256 _exp) public whenNotPaused onlyOwner returns (uint256) {\n        require(exists(_tokenId));\n        allCenturionTokens[_tokenId].experience = SafeMath.add(allCenturionTokens[_tokenId].experience, _exp);\n        for (uint256 i = allCenturionTokens[_tokenId].level; i < 50; i++) {\n            if (allCenturionTokens[_tokenId].experience >= expForLevels[i]) {\n               allCenturionTokens[_tokenId].level = allCenturionTokens[_tokenId].level + 1;\n            } else {\n                break;\n            }\n        }\n        return allCenturionTokens[_tokenId].level;\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return tokenURIs;\n    }\n\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n        require(exists(_tokenId));\n        tokenURIs = _uri;\n    }\n\n    // Sets a centurion as approved for transfer to another address.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        centurionIndexToApproved[_tokenId] = _approved;\n    }\n\n    // Returns the number of Centurions owned by a specific address.\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    // Transfers a Centurion to another address. If transferring to a smart\n    // contract ensure that it is aware of ERC-721.\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n        require(_to != address(0));\n        require(_to != address(this));\n\n        _transfer(msg.sender, _to, _tokenId);\n        emit Transfer(msg.sender, _to, _tokenId);\n    }\n\n    //  Permit another address the right to transfer a specific Centurion via\n    //  transferFrom().\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n        _approve(_tokenId, _to);\n\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    // Transfer a Centurion owned by another address, for which the calling address\n    // has previously been granted transfer approval by the owner.\n    function takeOwnership(uint256 _tokenId) public {\n        require(centurionIndexToApproved[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n        emit Transfer(owner, msg.sender, _tokenId);\n  }\n\n    // 1000 Centurions will ever exist\n    function totalSupply() public view returns (uint) {\n        return allCenturionTokens.length;\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\n    {\n        owner = centurionIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n\n    // List of all Centurion IDs assigned to an address.\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCenturions = totalSupply();\n            uint256 resultIndex = 0;\n            uint256 centurionId;\n\n            for (centurionId = 0; centurionId < totalCenturions; centurionId++) {\n                if (centurionIndexToOwner[centurionId] == _owner) {\n                    result[resultIndex] = centurionId;\n                    resultIndex++;\n                }\n            }\n            return result;\n        }\n    }\n}\n\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelCenturionSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issueCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expForLevels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_exp\",\"type\":\"uint256\"}],\"name\":\"addExperience\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCenturion\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"experience\",\"type\":\"uint256\"},{\"name\":\"askingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseCenturion\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"sellCenturion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"listCenturion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"centurionIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6001805460a060020a60ff02191690556106c060405260006080908152601460a052603260c0819052606460e05260c861010052610190610120526103206101408190526105786101605261083461018052610c4e6101a05261113a6101c05261166c6101e052611d24610200526122f6610220526129f46102405261325061026052613c64610280526148766102a0526156f46102c0526168566102e052617d3261030052619664905261b4786103405261d86861036052620103c461038052620137b86103a052620175d46103c0526201c1386103e05262021b1061040052620288706104205262030d40610440526203a9806104605262046cd061048052620557306104a0526206ddd06104c0526208d9a06104e052620c83206105005262118c30610520526219f0a0610540526227ac4061056052623abf1061058052625880406105a052628583b06105c05262c65d406105e05263018cba8061060052630319750061062052630632ea0061064052630c65d400610660526318cba800610680526332a9f8806106a05261019a916002916101c2565b506000805433600160a060020a03199182168117909255600180549091169091179055610225565b82603281019282156101f8579160200282015b828111156101f8578251829063ffffffff169055916020019190600101906101d5565b50610204929150610208565b5090565b61022291905b80821115610204576000815560010161020e565b90565b61143880620002356000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610179578063095ea7b3146102035780630f74a5cc1461022957806318160ddd14610241578063205c7cf514610268578063224f3a1414610289578063389cabee146102a15780633f4ba83a146102d25780634f558e79146102e75780635c975abb146103135780635d240c58146103285780636352211e1461034357806370a082311461035b578063832f64121461037c5780638348fe61146103b25780638456cb59146103c75780638462151c146103dc5780638da5cb5b1461044d57806395d89b4114610462578063a9059cbb14610477578063b2e6ceeb1461049b578063b73114b9146104b3578063ba6f30e4146104be578063baa28752146104d9578063bf3b1101146104f1578063c87b56dd14610512578063c9fafbb81461052a578063d31af48414610542578063f2fde38b146105a0575b600080fd5b34801561018557600080fd5b5061018e6105c1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c85781810151838201526020016101b0565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020f57600080fd5b50610227600160a060020a03600435166024356105f8565b005b34801561023557600080fd5b50610227600435610683565b34801561024d57600080fd5b506102566106e9565b60408051918252519081900360200190f35b34801561027457600080fd5b50610256600160a060020a03600435166106f0565b34801561029557600080fd5b5061025660043561073f565b3480156102ad57600080fd5b506102b6610753565b60408051600160a060020a039092168252519081900360200190f35b3480156102de57600080fd5b50610227610762565b3480156102f357600080fd5b506102ff6004356107b1565b604080519115158252519081900360200190f35b34801561031f57600080fd5b506102ff6107ce565b34801561033457600080fd5b506102566004356024356107de565b34801561034f57600080fd5b506102b6600435610952565b34801561036757600080fd5b50610256600160a060020a036004351661097b565b34801561038857600080fd5b50610394600435610996565b60408051938452602084019290925282820152519081900360600190f35b3480156103be57600080fd5b506102566109d5565b3480156103d357600080fd5b50610227610a1b565b3480156103e857600080fd5b506103fd600160a060020a0360043516610a6f565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610439578181015183820152602001610421565b505050509050019250505060405180910390f35b34801561045957600080fd5b506102b6610b42565b34801561046e57600080fd5b5061018e610b51565b34801561048357600080fd5b50610227600160a060020a0360043516602435610b88565b3480156104a757600080fd5b50610227600435610c3f565b610227600435610cbc565b3480156104ca57600080fd5b50610227600435602435610e14565b3480156104e557600080fd5b50610256600435610e7a565b3480156104fd57600080fd5b50610227600160a060020a0360043516610ee2565b34801561051e57600080fd5b5061018e600435610f3d565b34801561053657600080fd5b506102b6600435610fe5565b34801561054e57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102279583359536956044949193909101919081908401838280828437509497506110009650505050505050565b3480156105ac57600080fd5b50610227600160a060020a0360043516611038565b60408051808201909152601381527f43727970746f526f6d6543656e747572696f6e00000000000000000000000000602082015281565b6000818152603660205260409020548190600160a060020a0316331461061d57600080fd5b60015460a060020a900460ff161561063457600080fd5b61063e82846110cc565b604080518381529051600160a060020a0385169133917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a3505050565b6000818152603660205260409020548190600160a060020a031633146106a857600080fd5b60015460a060020a900460ff16156106bf57600080fd5b60006034838154811015156106d057fe5b9060005260206000209060030201600201819055505050565b6034545b90565b600154600090819060a060020a900460ff161561070c57600080fd5b600054600160a060020a0316331461072357600080fd5b61072c33611107565b90506107393384836111da565b92915050565b6002816032811061074c57fe5b0154905081565b600154600160a060020a031681565b600054600160a060020a0316331461077957600080fd5b60015460a060020a900460ff16151561079157600080fd5b6001805474ff000000000000000000000000000000000000000019169055565b600090815260366020526040902054600160a060020a0316151590565b60015460a060020a900460ff1681565b600154600090819060a060020a900460ff16156107fa57600080fd5b600054600160a060020a0316331461081157600080fd5b61081a846107b1565b151561082557600080fd5b61084f60348581548110151561083757fe5b906000526020600020906003020160010154846112bb565b603480548690811061085d57fe5b6000918252602090912060016003909202010155603480548590811061087f57fe5b90600052602060002090600302016000015490505b603281101561092857600281603281106108aa57fe5b015460348054869081106108ba57fe5b90600052602060002090600302016001015410151561091b5760348054859081106108e157fe5b90600052602060002090600302016000015460010160348581548110151561090557fe5b6000918252602090912060039091020155610920565b610928565b600101610894565b603480548590811061093657fe5b90600052602060002090600302016000015491505b5092915050565b600081815260366020526040902054600160a060020a031680151561097657600080fd5b919050565b600160a060020a031660009081526037602052604090205490565b6000806000806034858154811015156109ab57fe5b60009182526020909120600390910201805460018201546002909201549097919650945092505050565b600154600090819060a060020a900460ff16156109f157600080fd5b600054600160a060020a03163314610a0857600080fd5b610a1133611107565b90508091505b5090565b600054600160a060020a03163314610a3257600080fd5b60015460a060020a900460ff1615610a4957600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600060606000806000610a838761097b565b9450841515610aa2576040805160008152602081019091529550610b38565b84604051908082528060200260200182016040528015610acc578160200160208202803883390190505b509350610ad76106e9565b925060009150600090505b82811015610b3457600081815260366020526040902054600160a060020a0388811691161415610b2c57808483815181101515610b1b57fe5b602090810290910101526001909101905b600101610ae2565b8395505b5050505050919050565b600054600160a060020a031681565b60408051808201909152600681527f43524f4d45430000000000000000000000000000000000000000000000000000602082015281565b6000818152603660205260409020548190600160a060020a03163314610bad57600080fd5b60015460a060020a900460ff1615610bc457600080fd5b600160a060020a0383161515610bd957600080fd5b600160a060020a038316301415610bef57600080fd5b610bfa3384846111da565b604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600081815260386020526040812054600160a060020a03163314610c6257600080fd5b610c6b82610952565b9050610c788133846111da565b6040805183815290513391600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60015460009060a060020a900460ff1615610cd657600080fd5b6000603483815481101515610ce757fe5b906000526020600020906003020160020154111515610d0557600080fd5b6034805483908110610d1357fe5b9060005260206000209060030201600201543410151515610d3357600080fd5b6000603483815481101515610d4457fe5b906000526020600020906003020160020181905550610d62346112ca565b600154604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015610d9d573d6000803e3d6000fd5b50600082815260366020526040902054600160a060020a03166108fc610dc43031846112e1565b6040518115909202916000818181858888f19350505050158015610dec573d6000803e3d6000fd5b50600082815260366020526040902054610e1090600160a060020a031633846111da565b5050565b6000828152603660205260409020548290600160a060020a03163314610e3957600080fd5b60015460a060020a900460ff1615610e5057600080fd5b81603484815481101515610e6057fe5b906000526020600020906003020160020181905550505050565b600154600090819060a060020a900460ff1615610e9657600080fd5b600054600160a060020a03163314610ead57600080fd5b610eb633611107565b905082603482815481101515610ec857fe5b600091825260209091206002600390920201015592915050565b600054600160a060020a03163314610ef957600080fd5b600160a060020a0381161515610f0e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6060610f48826107b1565b1515610f5357600080fd5b6035805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610fd95780601f10610fae57610100808354040283529160200191610fd9565b820191906000526020600020905b815481529060010190602001808311610fbc57829003601f168201915b50505050509050919050565b603660205260009081526040902054600160a060020a031681565b60015460a060020a900460ff161561101757600080fd5b600054600160a060020a0316331461102e57600080fd5b610e1082826112f3565b600054600160a060020a0316331461104f57600080fd5b600160a060020a038116151561106457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600091825260386020526040909120805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600061111161135c565b506040805160608101825260018082526000602083018181529383018181526034805493840181559091528251600383027f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c181019190915593517f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c2850155517f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c390930192909255906103e881106111c757600080fd5b6111d3600085836111da565b9392505050565b600160a060020a0382166000908152603760205260409020546111fe9060016112bb565b600160a060020a038084166000818152603760209081526040808320959095558582526036905292909220805473ffffffffffffffffffffffffffffffffffffffff19169092179091558316156112b657600160a060020a0383166000908152603760205260409020546112739060016112e1565b600160a060020a0384166000908152603760209081526040808320939093558382526038905220805473ffffffffffffffffffffffffffffffffffffffff191690555b505050565b6000828201838110156111d357fe5b60006107396112da83600361131a565b6064611345565b6000828211156112ed57fe5b50900390565b6112fc826107b1565b151561130757600080fd5b80516112b690603590602084019061137e565b60008083151561132d576000915061094b565b5082820282848281151561133d57fe5b04146111d357fe5b600080828481151561135357fe5b04949350505050565b6060604051908101604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113bf57805160ff19168380011785556113ec565b828001600101855582156113ec579182015b828111156113ec5782518255916020019190600101906113d1565b50610a17926106ed9250905b80821115610a1757600081556001016113f85600a165627a7a723058204bcfbe4759d949bc305b9bf34d6220b6bcf15f921d66bc397b1dfd5e697a446f0029"
}