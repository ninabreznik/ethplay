{
  "address": "0x749012523b5c0f634537736202e233f12e9e66bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GodPowerCoin",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\n// CryptoGods Copyright (c) 2018. All rights reserved.\n\npragma solidity ^0.4.20;\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n}\ncontract Owned {\n    address public ceoAddress;\n    address public cooAddress;\n    address private newCeoAddress;\n    address private newCooAddress;\n    function Owned() public {\n        ceoAddress = msg.sender;\n        cooAddress = msg.sender;\n    }\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n    modifier onlyCLevel() {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == cooAddress\n        );\n        _;\n    }\n    function setCEO(address _newCEO) public onlyCEO {\n        require(_newCEO != address(0));\n        newCeoAddress = _newCEO;\n    }\n    function setCOO(address _newCOO) public onlyCEO {\n        require(_newCOO != address(0));\n        newCooAddress = _newCOO;\n    }\n    function acceptCeoOwnership() public {\n        require(msg.sender == newCeoAddress);\n        require(address(0) != newCeoAddress);\n        ceoAddress = newCeoAddress;\n        newCeoAddress = address(0);\n    }\n    function acceptCooOwnership() public {\n        require(msg.sender == newCooAddress);\n        require(address(0) != newCooAddress);\n        cooAddress = newCooAddress;\n        newCooAddress = address(0);\n    }\n}\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\ncontract ERC20 is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public constant symbol = \"GPC\";\n    string public constant name = \"God Power Coin\";\n    uint8 public constant decimals = 18;\n    uint constant WAD = 10 ** 18;\n    uint public _totalSupply = (10 ** 9) * WAD;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n    function () public payable {\n        revert();\n    }\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCLevel returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(ceoAddress, tokens);\n    }\n    \n    // Payout\n    function payout(uint amount) public onlyCLevel {\n        if (amount > this.balance)\n            amount = this.balance;\n        ceoAddress.transfer(amount);\n    }\n}\n\ncontract ERC721 is ERC20 {\n\n    function _addressNotNull(address _to) private pure returns(bool) {\n        return _to != address(0);\n    }\n    function _approved(address _to, uint _tokenId) private view returns(bool) {\n        return token[_tokenId].approved == _to;\n    }\n    function _ownsToken(address user, uint _tokenId) public view returns(bool) {\n        return user == token[_tokenId].owner;\n    }\n    function _transferToken(address _from, address _to, uint _tokenId) internal {\n        token[_tokenId].owner = _to;\n        token[_tokenId].approved = address(0);\n        TransferToken(_from, _to, _tokenId);\n    }\n\n    uint[] public tokenList;\n    \n    struct TOKEN {\n        \n        address owner;\n        address approved;\n        \n        uint price;\n        uint lastPrice;\n        \n        uint mSpeed;\n\n        uint mLastPayoutBlock;\n    }\n\n    mapping(uint => TOKEN) public token;\n    \n    event Birth(uint indexed tokenId, uint startPrice);\n    event TokenSold(uint indexed tokenId, uint price, address indexed prevOwner, address indexed winner);\n    event TransferToken(address indexed from, address indexed to, uint indexed tokenId);\n    event ApprovalToken(address indexed owner, address indexed approved, uint indexed tokenId);\n    \n    function approveToken(address _to, uint _tokenId) public {\n        require(_ownsToken(msg.sender, _tokenId));\n        token[_tokenId].approved = _to;\n        ApprovalToken(msg.sender, _to, _tokenId);\n    }\n    function getTotalTokenSupply() public view returns(uint) {\n        return tokenList.length;\n    }\n    function ownerOf(uint _tokenId) public view returns (address owner) {\n        owner = token[_tokenId].owner;\n    }\n    function priceOf(uint _tokenId) public view returns (uint price) {\n        price = token[_tokenId].price;\n    }\n    function takeOwnership(uint _tokenId) public {\n        address newOwner = msg.sender;\n        address oldOwner = token[_tokenId].owner;\n\n        require(_addressNotNull(newOwner));\n        require(_approved(newOwner, _tokenId));\n\n        _transferToken(oldOwner, newOwner, _tokenId);\n    }\n    function transferToken(address _to, uint _tokenId) public {\n        require(_ownsToken(msg.sender, _tokenId));\n        require(_addressNotNull(_to));\n        _transferToken(msg.sender, _to, _tokenId);\n    }\n    function transferTokenFrom(address _from, address _to, uint _tokenId) public {\n        require(_ownsToken(_from, _tokenId));\n        require(_approved(_to, _tokenId));\n        require(_addressNotNull(_to));\n        _transferToken(_from, _to, _tokenId);\n    }\n    function tokenBalanceOf(address _owner) public view returns(uint result) {\n        uint totalTokens = tokenList.length;\n        uint tokenIndex;\n        uint tokenId;\n        result = 0;\n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n            tokenId = tokenList[tokenIndex];\n            if (token[tokenId].owner == _owner) {\n                result = result.add(1);\n            }\n        }\n        return result;\n    }\n    function tokensOfOwner(address _owner) public view returns(uint[] ownerTokens) {\n        uint tokenCount = tokenBalanceOf(_owner);\n        \n        if (tokenCount == 0) return new uint[](0);\n\n        uint[] memory result = new uint[](tokenCount);\n        uint totalTokens = tokenList.length;\n        uint resultIndex = 0;\n        uint tokenIndex;\n        uint tokenId;\n        \n        for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n            tokenId = tokenList[tokenIndex];\n            if (token[tokenId].owner == _owner) {\n                result[resultIndex] = tokenId;\n                resultIndex = resultIndex.add(1);\n            }\n        }\n        return result;\n    }\n    function getTokenIds() public view returns(uint[]) {\n        return tokenList;\n    }\n\n    // MIN(A * PRICE, MAX(B * PRICE, 100*PRICE + C)) / 100\n    \n    uint public priceFactorA = 200;\n    uint public priceFactorB = 120;\n    uint public priceFactorC = 16 * (10**18);\n    \n    function changePriceFactor(uint a_, uint b_, uint c_) public onlyCLevel {\n        priceFactorA = a_;\n        priceFactorB = b_;\n        priceFactorC = c_;\n    }\n    \n    function getMaxPrice(uint _tokenId) public view returns (uint) {\n        uint price = token[_tokenId].lastPrice.mul(priceFactorB);\n        uint priceLow = token[_tokenId].lastPrice.mul(100).add(priceFactorC);\n        uint priceHigh = token[_tokenId].lastPrice.mul(priceFactorA);\n        if (price < priceLow)\n            price = priceLow;\n        if (price > priceHigh)\n            price = priceHigh;\n            \n        price = price / (10**18);\n        price = price.mul(10**16); // round to x.xx ETH\n        \n        return price;\n    }\n    \n    function changeTokenPrice(uint newPrice, uint _tokenId) public {\n        require(\n            (_ownsToken(msg.sender, _tokenId))\n            || \n            ((_ownsToken(address(0), _tokenId)) && ((msg.sender == ceoAddress) || (msg.sender == cooAddress)))\n        );\n        \n        newPrice = newPrice / (10**16);\n        newPrice = newPrice.mul(10**16); // round to x.xx ETH\n        \n        require(newPrice > 0);\n\n        require(newPrice <= getMaxPrice(_tokenId));\n        token[_tokenId].price = newPrice;\n    }\n}\n\ncontract GodPowerCoin is ERC721 {\n    \n    function GodPowerCoin() public {\n        balances[msg.sender] = _totalSupply;\n        Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n    uint public divCutPool = 0;\n    uint public divCutMaster = 10; // to master card\n    uint public divCutAdmin = 30;\n    \n    uint public divPoolAmt = 0;\n    uint public divMasterAmt = 0;\n    \n    mapping(address => uint) public dividend;\n    \n    function withdrawDividend() public {\n        require(dividend[msg.sender] > 0);\n        msg.sender.transfer(dividend[msg.sender]);\n        dividend[msg.sender] = 0;\n    }\n    \n    function setCut(uint admin_, uint pool_, uint master_) public onlyCLevel {\n        divCutAdmin = admin_;\n        divCutPool = pool_;\n        divCutMaster = master_;\n    }\n    \n    function purchase(uint _tokenId, uint _newPrice) public payable {\n        address oldOwner = token[_tokenId].owner;\n        uint sellingPrice = token[_tokenId].price;\n        \n        require(oldOwner != msg.sender);\n        require(msg.sender != address(0));\n\n        require(sellingPrice > 0); // can't purchase unreleased token\n\n        require(msg.value >= sellingPrice);\n        uint purchaseExcess = msg.value.sub(sellingPrice);\n\n        payoutMining(_tokenId); // must happen before owner change!!\n\n        uint payment = sellingPrice.mul(1000 - divCutPool - divCutAdmin - divCutMaster) / 1000;\n        if (divCutPool > 0)\n            divPoolAmt = divPoolAmt.add(sellingPrice.mul(divCutPool) / 1000);\n        \n        divMasterAmt = divMasterAmt.add(sellingPrice.mul(divCutMaster) / 1000);\n        \n        token[_tokenId].lastPrice = sellingPrice;\n\n        uint maxPrice = getMaxPrice(_tokenId);\n        if ((_newPrice > maxPrice) || (_newPrice == 0))\n            _newPrice = maxPrice;\n            \n        token[_tokenId].price = _newPrice;\n\n        _transferToken(oldOwner, msg.sender, _tokenId);\n        \n        if (_tokenId % 10000 > 0) {\n            address MASTER = token[(_tokenId / 10000).mul(10000)].owner;\n            dividend[MASTER] = dividend[MASTER].add(sellingPrice.mul(divCutMaster) / 1000);\n        }\n        \n        oldOwner.transfer(payment);\n\n        if (purchaseExcess > 0)\n            msg.sender.transfer(purchaseExcess);\n\n        TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\n    }\n    \n    function _createToken(uint tokenId, uint _price, address _owner, uint _mBaseSpeed) internal {\n        \n        token[tokenId].owner = _owner;\n        token[tokenId].price = _price;\n        token[tokenId].lastPrice = _price;\n        \n        token[tokenId].mSpeed = _mBaseSpeed;\n\n        token[tokenId].mLastPayoutBlock = block.number;\n        \n        mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(tokenId));\n        \n        Birth(tokenId, _price);\n        tokenList.push(tokenId);\n    }\n    function createToken(uint tokenId, uint _price, address _owner, uint _mBaseSpeed) public onlyCLevel {\n        require(_price != 0);\n        if (_owner == address(0))\n            _owner = ceoAddress;\n\n        require(token[tokenId].price == 0);\n        _createToken(tokenId, _price, _owner, _mBaseSpeed);\n        TransferToken(0, _owner, tokenId);\n    }\n    function createSimilarTokens(uint[] tokenId, uint _price, address _owner, uint _mBaseSpeed) public onlyCLevel {\n        require(_price != 0);\n        if (_owner == address(0))\n            _owner = ceoAddress;\n\n        for (uint i = 0; i < tokenId.length; i++) {\n            require(token[tokenId[i]].price == 0);\n            _createToken(tokenId[i], _price, _owner, _mBaseSpeed);\n            TransferToken(0, _owner, tokenId[i]);\n        }\n    }\n    function createMultipleTokens(uint[] tokenId, uint[] _price, address _owner, uint[] _mBaseSpeed) public onlyCLevel {\n        if (_owner == address(0))\n            _owner = ceoAddress;\n\n        for (uint i = 0; i < tokenId.length; i++) {\n            require(_price[i] != 0);\n            require(token[tokenId[i]].price == 0);\n            _createToken(tokenId[i], _price[i], _owner, _mBaseSpeed[i]);\n            TransferToken(0, _owner, tokenId[i]);\n        }\n    }\n    \n    event MiningUpgrade(address indexed sender, uint indexed token, uint newLevelSpeed);\n\n    // ETH: 6000 blocks per day, 5 ETH per block\n    \n    uint public mSumRawSpeed = 0;\n\n    uint public mCoinPerBlock = 50;\n    \n    uint public mUpgradeCostFactor = mCoinPerBlock * 6000 * WAD;\n    uint public mUpgradeSpeedup = 1040; // = * 1.04\n    \n    function adminSetMining(uint mCoinPerBlock_, uint mUpgradeCostFactor_, uint mUpgradeSpeedup_) public onlyCLevel {\n        mCoinPerBlock = mCoinPerBlock_;\n        mUpgradeCostFactor = mUpgradeCostFactor_;\n        mUpgradeSpeedup = mUpgradeSpeedup_;\n    }\n    \n    function getMiningRawSpeed(uint id) public view returns (uint) {\n        return token[id].mSpeed;\n    }\n    function getMiningRealSpeed(uint id) public view returns (uint) {\n        return getMiningRawSpeed(id).mul(mCoinPerBlock) / mSumRawSpeed;\n    }\n    function getMiningUpgradeCost(uint id) public view returns (uint) {\n        return getMiningRawSpeed(id).mul(mUpgradeCostFactor) / mSumRawSpeed;\n    }\n    function upgradeMining(uint id) public {\n        uint cost = getMiningUpgradeCost(id);\n        balances[msg.sender] = balances[msg.sender].sub(cost);\n        _totalSupply = _totalSupply.sub(cost);\n        \n        mSumRawSpeed = mSumRawSpeed.sub(getMiningRawSpeed(id));\n        token[id].mSpeed = token[id].mSpeed.mul(mUpgradeSpeedup) / 1000;\n        mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(id));\n        \n        MiningUpgrade(msg.sender, id, token[id].mSpeed);\n    }\n    function upgradeMiningMultipleTimes(uint id, uint n) public {\n        for (uint i = 0; i < n; i++) {\n            uint cost = getMiningUpgradeCost(id);\n            balances[msg.sender] = balances[msg.sender].sub(cost);\n            _totalSupply = _totalSupply.sub(cost);\n        \n            mSumRawSpeed = mSumRawSpeed.sub(getMiningRawSpeed(id));\n            token[id].mSpeed = token[id].mSpeed.mul(mUpgradeSpeedup) / 1000;\n            mSumRawSpeed = mSumRawSpeed.add(getMiningRawSpeed(id));\n        }\n        MiningUpgrade(msg.sender, id, token[id].mSpeed);\n    }\n    function payoutMiningAll(address owner, uint[] list) public {\n        uint sum = 0;\n        for (uint i = 0; i < list.length; i++) {\n            uint id = list[i];\n            require(token[id].owner == owner);\n            uint blocks = block.number.sub(token[id].mLastPayoutBlock);\n            token[id].mLastPayoutBlock = block.number;\n            sum = sum.add(getMiningRawSpeed(id).mul(mCoinPerBlock).mul(blocks).mul(WAD) / mSumRawSpeed); // mul WAD !\n        }\n        balances[owner] = balances[owner].add(sum);\n        _totalSupply = _totalSupply.add(sum);\n    }\n    function payoutMining(uint id) public {\n        require(token[id].mLastPayoutBlock > 0);\n        uint blocks = block.number.sub(token[id].mLastPayoutBlock);\n        token[id].mLastPayoutBlock = block.number;\n        address owner = token[id].owner;\n        uint coinsMined = getMiningRawSpeed(id).mul(mCoinPerBlock).mul(blocks).mul(WAD) / mSumRawSpeed; // mul WAD !\n        \n        balances[owner] = balances[owner].add(coinsMined);\n        _totalSupply = _totalSupply.add(coinsMined);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"mSpeed\",\"type\":\"uint256\"},{\"name\":\"mLastPayoutBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPoolAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256\"}],\"name\":\"createSimilarTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"upgradeMiningMultipleTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningRawSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_ownsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"list\",\"type\":\"uint256[]\"}],\"name\":\"payoutMiningAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningUpgradeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_mBaseSpeed\",\"type\":\"uint256[]\"}],\"name\":\"createMultipleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMiningRealSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"payoutMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"upgradeMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_\",\"type\":\"uint256\"},{\"name\":\"b_\",\"type\":\"uint256\"},{\"name\":\"c_\",\"type\":\"uint256\"}],\"name\":\"changePriceFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divCutMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"uint256\"},{\"name\":\"pool_\",\"type\":\"uint256\"},{\"name\":\"master_\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mCoinPerBlock_\",\"type\":\"uint256\"},{\"name\":\"mUpgradeCostFactor_\",\"type\":\"uint256\"},{\"name\":\"mUpgradeSpeedup_\",\"type\":\"uint256\"}],\"name\":\"adminSetMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUpgradeCostFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUpgradeSpeedup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mSumRawSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mCoinPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divMasterAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactorA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newLevelSpeed\",\"type\":\"uint256\"}],\"name\":\"MiningUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052670de0b6b3a7640000633b9aca000260045560c86009556078600a5567de0b6b3a76400000600b556000600c55600a600d55601e600e556000600f55600060105560006012556032601355670de0b6b3a76400006013546117700202601455610410601555341561007457600080fd5b60008054600160a060020a033316600160a060020a031991821681178355600180549092168117909155600454818352600560205260408084208290559192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a361274f806100f56000396000f3006060604052600436106102c65763ffffffff60e060020a600035041663015def5381146102cb578063022fc88b146102f0578063044215c614610314578063047087cc1461036c57806306d177c11461037f57806306fdde0314610392578063095ea7b31461041c5780630a0f8168146104525780630c83700a146104815780631072cbea1461049457806318160ddd146104b65780632325d5ec146104c957806323b872dd146104f157806327d7874c146105195780632ba73c15146105385780632dbe84aa14610557578063313ce567146105bc5780633289cb38146105e5578063349ab992146105fe5780633eaaf86b146106115780633fc1b5141461062457806343ca46dd1461063a578063478d12401461065c57806347bbac05146106b95780634c4c0efa146106d85780636028323c146106ee57806361e60b9d146107cf57806362e8e8ac146107e55780636352211e146107fe57806363fd420c1461081457806367f718a91461082a5780636a4740021461089057806370876c98146108a357806370a08231146108b1578063728f7a11146108d05780637f4da84f146108e657806384313086146109025780638462151c1461091557806386f7993e146109345780638ed95dfe14610947578063943052a41461096357806395d89b41146109795780639ead72221461098c578063a9059cbb146109a2578063ad221195146109c4578063b047fb50146109ec578063b2e6ceeb146109ff578063b7bfafed14610a15578063b9186d7d14610a31578063cae9ca5114610a47578063d887ac3514610aac578063dc39d06d14610abf578063dd62ed3e14610ae1578063dfee01d814610b06578063e115234314610b19578063e402712614610b2f578063e42c08f214610b42578063e6468b9f14610b61578063ea3367ae14610b74578063f35ba5d314610b87578063f49eee2014610b9a578063fd22188914610bad575b600080fd5b34156102d657600080fd5b6102de610bc0565b60405190815260200160405180910390f35b34156102fb57600080fd5b610312600160a060020a0360043516602435610bc6565b005b341561031f57600080fd5b61032a600435610c41565b604051600160a060020a0396871681529490951660208501526040808501939093526060840191909152608083015260a082019290925260c001905180910390f35b341561037757600080fd5b6102de610c83565b341561038a57600080fd5b6102de610c8a565b341561039d57600080fd5b6103a5610c90565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103e15780820151838201526020016103c9565b50505050905090810190601f16801561040e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042757600080fd5b61043e600160a060020a0360043516602435610cc7565b604051901515815260200160405180910390f35b341561045d57600080fd5b610465610d34565b604051600160a060020a03909116815260200160405180910390f35b341561048c57600080fd5b6102de610d43565b341561049f57600080fd5b610312600160a060020a0360043516602435610d49565b34156104c157600080fd5b6102de610d81565b34156104d457600080fd5b610312600435602435600160a060020a0360443516606435610db3565b34156104fc57600080fd5b61043e600160a060020a0360043581169060243516604435610e69565b341561052457600080fd5b610312600160a060020a0360043516610f7c565b341561054357600080fd5b610312600160a060020a0360043516610fce565b341561056257600080fd5b610312600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050843594600160a060020a036020820135169450604001359250611020915050565b34156105c757600080fd5b6105cf611133565b60405160ff909116815260200160405180910390f35b34156105f057600080fd5b610312600435602435611138565b341561060957600080fd5b6102de611292565b341561061c57600080fd5b6102de611298565b341561062f57600080fd5b6102de60043561129e565b341561064557600080fd5b61043e600160a060020a03600435166024356112b3565b341561066757600080fd5b61031260048035600160a060020a03169060446024803590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506112d395505050505050565b34156106c457600080fd5b6102de600160a060020a0360043516611417565b34156106e357600080fd5b6102de600435611429565b34156106f957600080fd5b610312600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035600160a060020a03169060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061144d95505050505050565b34156107da57600080fd5b6102de600435611598565b34156107f057600080fd5b6103126004356024356115ac565b341561080957600080fd5b61046560043561165f565b341561081f57600080fd5b61031260043561167a565b341561083557600080fd5b61083d611774565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561087c578082015183820152602001610864565b505050509050019250505060405180910390f35b341561089b57600080fd5b6103126117d2565b610312600435602435611850565b34156108bc57600080fd5b6102de600160a060020a0360043516611b39565b34156108db57600080fd5b610312600435611b54565b34156108f157600080fd5b610312600435602435604435611c77565b341561090d57600080fd5b6102de611cbb565b341561092057600080fd5b61083d600160a060020a0360043516611cc1565b341561093f57600080fd5b610312611dcf565b341561095257600080fd5b610312600435602435604435611e28565b341561096e57600080fd5b6102de600435611e6c565b341561098457600080fd5b6103a5611f40565b341561099757600080fd5b6102de600435611f77565b34156109ad57600080fd5b61043e600160a060020a0360043516602435611f96565b34156109cf57600080fd5b610312600160a060020a0360043581169060243516604435612055565b34156109f757600080fd5b6104656120a3565b3415610a0a57600080fd5b6103126004356120b2565b3415610a2057600080fd5b610312600435602435604435612100565b3415610a3c57600080fd5b6102de600435612144565b3415610a5257600080fd5b61043e60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061215995505050505050565b3415610ab757600080fd5b6102de6122c0565b3415610aca57600080fd5b61043e600160a060020a03600435166024356122c6565b3415610aec57600080fd5b6102de600160a060020a0360043581169060243516612384565b3415610b1157600080fd5b6102de6123af565b3415610b2457600080fd5b6103126004356123b5565b3415610b3a57600080fd5b6102de612440565b3415610b4d57600080fd5b6102de600160a060020a0360043516612446565b3415610b6c57600080fd5b6102de6124bf565b3415610b7f57600080fd5b6102de6124c5565b3415610b9257600080fd5b6103126124cb565b3415610ba557600080fd5b6102de612524565b3415610bb857600080fd5b6102de61252a565b600b5481565b610bd033826112b3565b1515610bdb57600080fd5b600081815260086020526040908190206001018054600160a060020a031916600160a060020a03858116918217909255839290913316907f87da9caddb81e318d228b26cc9d772df4360e0491da897fc677c4fce4625e7b3905160405180910390a45050565b600860205260009081526040902080546001820154600283015460038401546004850154600590950154600160a060020a039485169593909416939192909186565b6007545b90565b600f5481565b60408051908101604052600e81527f476f6420506f77657220436f696e000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260066020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600054600160a060020a031681565b600c5481565b610d5333826112b3565b1515610d5e57600080fd5b610d6782612530565b1515610d7257600080fd5b610d7d33838361253e565b5050565b6000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc546004540390565b60005433600160a060020a0390811691161480610dde575060015433600160a060020a039081169116145b1515610de957600080fd5b821515610df557600080fd5b600160a060020a0382161515610e1457600054600160a060020a031691505b60008481526008602052604090206002015415610e3057600080fd5b610e3c8484848461259c565b8382600160a060020a0316600060008051602061270483398151915260405160405180910390a450505050565b600160a060020a038316600090815260056020526040812054610e92908363ffffffff61264916565b600160a060020a0380861660009081526005602090815260408083209490945560068152838220339093168252919091522054610ed5908363ffffffff61264916565b600160a060020a0380861660009081526006602090815260408083203385168452825280832094909455918616815260059091522054610f1b908363ffffffff61265916565b600160a060020a03808516600081815260056020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60005433600160a060020a03908116911614610f9757600080fd5b600160a060020a0381161515610fac57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610fe957600080fd5b600160a060020a0381161515610ffe57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000805433600160a060020a039081169116148061104c575060015433600160a060020a039081169116145b151561105757600080fd5b83151561106357600080fd5b600160a060020a038316151561108257600054600160a060020a031692505b5060005b845181101561112c576008600086838151811061109f57fe5b906020019060200201518152602081019190915260400160002060020154156110c757600080fd5b6110e88582815181106110d657fe5b9060200190602002015185858561259c565b8481815181106110f457fe5b9060200190602002015183600160a060020a0316600060008051602061270483398151915260405160405180910390a4600101611086565b5050505050565b601281565b6000805b828210156112385761114d84611429565b600160a060020a033316600090815260056020526040902054909150611179908263ffffffff61264916565b600160a060020a0333166000908152600560205260409020556004546111a5908263ffffffff61264916565b6004556111c36111b48561129e565b6012549063ffffffff61264916565b6012556015546000858152600860205260409020600401546103e8916111ef919063ffffffff61266916565b8115156111f857fe5b600086815260086020526040902091900460049091015561122a61121b8561129e565b6012549063ffffffff61265916565b60125560019091019061113c565b8333600160a060020a03167f0b69544995a71d7750510b0fb0d24419cce514072098bcbd54d6cf67914da434600860008881526020019081526020016000206004015460405190815260200160405180910390a350505050565b600e5481565b60045481565b60009081526008602052604090206004015490565b600090815260086020526040902054600160a060020a0390811691161490565b60008080805b84518310156113b7578483815181106112ee57fe5b90602001906020020151600081815260086020526040902054909250600160a060020a0387811691161461132157600080fd5b60008281526008602052604090206005015461134490439063ffffffff61264916565b90504360086000848152602001908152602001600020600501819055506113aa601254611392670de0b6b3a7640000611386856113866013546113868a61129e565b9063ffffffff61266916565b81151561139b57fe5b8691900463ffffffff61265916565b93506001909201916112d9565b600160a060020a0386166000908152600560205260409020546113e0908563ffffffff61265916565b600160a060020a03871660009081526005602052604090205560045461140c908563ffffffff61265916565b600455505050505050565b60116020526000908152604090205481565b600060125461143d6014546113868561129e565b81151561144657fe5b0492915050565b6000805433600160a060020a0390811691161480611479575060015433600160a060020a039081169116145b151561148457600080fd5b600160a060020a03831615156114a357600054600160a060020a031692505b5060005b845181101561112c578381815181106114bc57fe5b9060200190602002015115156114d157600080fd5b600860008683815181106114e157fe5b9060200190602002015181526020810191909152604001600020600201541561150957600080fd5b61155485828151811061151857fe5b9060200190602002015185838151811061152e57fe5b906020019060200201518585858151811061154557fe5b9060200190602002015161259c565b84818151811061156057fe5b9060200190602002015183600160a060020a0316600060008051602061270483398151915260405160405180910390a46001016114a7565b600060125461143d6013546113868561129e565b6115b633826112b3565b806115f957506115c76000826112b3565b80156115f9575060005433600160a060020a03908116911614806115f9575060015433600160a060020a039081169116145b151561160457600080fd5b662386f26fc100008204915061162782662386f26fc1000063ffffffff61266916565b91506000821161163657600080fd5b61163f81611e6c565b82111561164b57600080fd5b600090815260086020526040902060020155565b600090815260086020526040902054600160a060020a031690565b6000818152600860205260408120600501548190819081901161169c57600080fd5b6000848152600860205260409020600501546116bf90439063ffffffff61264916565b600085815260086020526040902043600582015554601254601354929550600160a060020a0390911693509061170890670de0b6b3a7640000906113869087908290818b61129e565b81151561171157fe5b600160a060020a038416600090815260056020526040902054919004915061173f908263ffffffff61265916565b600160a060020a03831660009081526005602052604090205560045461176b908263ffffffff61265916565b60045550505050565b61177c6126b4565b60078054806020026020016040519081016040528092919081815260200182805480156117c857602002820191906000526020600020905b8154815260200190600101908083116117b4575b5050505050905090565b600160a060020a033316600090815260116020526040812054116117f557600080fd5b600160a060020a033316600081815260116020526040908190205480156108fc029151600060405180830381858888f19350505050151561183557600080fd5b600160a060020a033316600090815260116020526040812055565b60008281526008602052604081208054600290910154600160a060020a03918216929091819081908190331686141561188857600080fd5b33600160a060020a0316151561189d57600080fd5b600085116118aa57600080fd5b34859010156118b857600080fd5b6118c8348663ffffffff61264916565b93506118d38861167a565b6103e86118f7600d54600e54600c546103e80303038761266990919063ffffffff16565b81151561190057fe5b0492506000600c541115611947576119436103e8611929600c548861266990919063ffffffff16565b81151561193257fe5b600f5491900463ffffffff61265916565b600f555b61197c6103e8611962600d548861266990919063ffffffff16565b81151561196b57fe5b60105491900463ffffffff61265916565b601055600088815260086020526040902060030185905561199c88611e6c565b9150818711806119aa575086155b156119b3578196505b60008881526008602052604090206002018790556119d286338a61253e565b600061271089061115611a7c57600860006119f8612710808c049063ffffffff61266916565b8152602081019190915260400160002054600d54600160a060020a039091169150611a62906103e890611a3290889063ffffffff61266916565b811515611a3b57fe5b600160a060020a03841660009081526011602052604090205491900463ffffffff61265916565b600160a060020a0382166000908152601160205260409020555b600160a060020a03861683156108fc0284604051600060405180830381858888f193505050501515611aad57600080fd5b6000841115611ae757600160a060020a03331684156108fc0285604051600060405180830381858888f193505050501515611ae757600080fd5b33600160a060020a031686600160a060020a0316897fb45b7a510d22eabde36919bed5551eccad687e7b55e2d2aa3033dc0786a9877b8860405190815260200160405180910390a45050505050505050565b600160a060020a031660009081526005602052604090205490565b6000611b5f82611429565b600160a060020a033316600090815260056020526040902054909150611b8b908263ffffffff61264916565b600160a060020a033316600090815260056020526040902055600454611bb7908263ffffffff61264916565b600455611bc66111b48361129e565b6012556015546000838152600860205260409020600401546103e891611bf2919063ffffffff61266916565b811515611bfb57fe5b6000848152600860205260409020919004600490910155611c1e61121b8361129e565b60125560008281526008602052604090819020600401548391600160a060020a033316917f0b69544995a71d7750510b0fb0d24419cce514072098bcbd54d6cf67914da434915190815260200160405180910390a35050565b60005433600160a060020a0390811691161480611ca2575060015433600160a060020a039081169116145b1515611cad57600080fd5b600992909255600a55600b55565b600d5481565b611cc96126b4565b6000611cd36126b4565b600080600080611ce288612446565b9550851515611d12576000604051805910611cfa5750595b90808252806020026020018201604052509650611dc4565b85604051805910611d205750595b90808252806020026020018201604052506007549095509350600092508291505b83821015611dc0576007805483908110611d5757fe5b60009182526020808320909101548083526008909152604090912054909150600160a060020a039081169089161415611db55780858481518110611d9757fe5b60209081029091010152611db283600163ffffffff61265916565b92505b600190910190611d41565b8496505b505050505050919050565b60035433600160a060020a03908116911614611dea57600080fd5b600354600160a060020a03161515611e0157600080fd5b6003805460018054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a0390811691161480611e53575060015433600160a060020a039081169116145b1515611e5e57600080fd5b600e92909255600c55600d55565b600a546000828152600860205260408120600301549091829182918291611e989163ffffffff61266916565b600b54600087815260086020526040902060030154919450611ed191611ec590606463ffffffff61266916565b9063ffffffff61265916565b600954600087815260086020526040902060030154919350611ef9919063ffffffff61266916565b905081831015611f07578192505b80831115611f13578092505b670de0b6b3a764000083049250611f3783662386f26fc1000063ffffffff61266916565b95945050505050565b60408051908101604052600381527f4750430000000000000000000000000000000000000000000000000000000000602082015281565b6007805482908110611f8557fe5b600091825260209091200154905081565b600160a060020a033316600090815260056020526040812054611fbf908363ffffffff61264916565b600160a060020a033381166000908152600560205260408082209390935590851681522054611ff4908363ffffffff61265916565b600160a060020a0380851660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b61205f83826112b3565b151561206a57600080fd5b6120748282612691565b151561207f57600080fd5b61208882612530565b151561209357600080fd5b61209e83838361253e565b505050565b600154600160a060020a031681565b6000818152600860205260409020543390600160a060020a03166120d582612530565b15156120e057600080fd5b6120ea8284612691565b15156120f557600080fd5b61209e81838561253e565b60005433600160a060020a039081169116148061212b575060015433600160a060020a039081169116145b151561213657600080fd5b601392909255601455601555565b60009081526008602052604090206002015490565b600160a060020a03338116600081815260066020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561225457808201518382015260200161223c565b50505050905090810190601f1680156122815780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156122a257600080fd5b6102c65a03f115156122b357600080fd5b5060019695505050505050565b60145481565b6000805433600160a060020a03908116911614806122f2575060015433600160a060020a039081169116145b15156122fd57600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561236357600080fd5b6102c65a03f1151561237457600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60155481565b60005433600160a060020a03908116911614806123e0575060015433600160a060020a039081169116145b15156123eb57600080fd5b30600160a060020a03163181111561240a5750600160a060020a033016315b600054600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561243d57600080fd5b50565b60125481565b60075460009081805b828210156124b757600780548390811061246557fe5b60009182526020808320909101548083526008909152604090912054909150600160a060020a0390811690861614156124ac576124a984600163ffffffff61265916565b93505b60019091019061244f565b505050919050565b60135481565b60105481565b60025433600160a060020a039081169116146124e657600080fd5b600254600160a060020a031615156124fd57600080fd5b6002805460008054600160a060020a0319908116600160a060020a03841617909155169055565b600a5481565b60095481565b600160a060020a0316151590565b600081815260086020526040908190208054600160a060020a03808616600160a060020a03199283168117845560019093018054909216909155839290861690600080516020612704833981519152905160405180910390a4505050565b60008481526008602052604090208054600160a060020a031916600160a060020a038416178155600281018490556003810184905560048101829055436005909101556125eb61121b8561129e565b601255837f52de1b99e2a2ea05a5f0172a69113edb62e0063b92a251f693a7233a5a3a31338460405190815260200160405180910390a2600780546001810161263483826126c6565b50600091825260209091200193909355505050565b80820382811115610d2e57600080fd5b80820182811015610d2e57600080fd5b600081158061268657505080820282828281151561268357fe5b04145b1515610d2e57600080fd5b600090815260086020526040902060010154600160a060020a0391821691161490565b60206040519081016040526000815290565b81548183558181151161209e5760008381526020902061209e918101908301610c8791905b808211156126ff57600081556001016126eb565b509056003844b7075ed6e7d4b61342769cb2b1b325cba410a62932affaa90aee247dadf5a165627a7a723058208320ef3f5a3702e7a5a4b42f39a5c566d60edeb40580ee934a50512ed96fe8890029"
}