{
  "address": "0x19df418e86906c0fa594f175efbe2f706a9ef72f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthPixel",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\n/*----------------------------------------------------------------------------------------------------------\n                             Ethpixel - Ethereum based collaborative pixel art\n                             \n                                        Official site: ethpixel.io\n                                  Join us on Telegram: t.me/ethpixel\n----------------------------------------------------------------------------------------------------------*/\n\npragma solidity >=0.5.0 <0.6.0;\n\ncontract EthPixel {\n\n    /*------------------------------------------------------------------------------------------------------\n        * Variables\n    ------------------------------------------------------------------------------------------------------*/\n    /* Pixel attributes */\n    struct Pixel {                                  // Should fit into 256 bits\n        address owner;                              //                 160\n        uint8   color;                              //                +  8\n        uint88  price;                              //                + 88\n    }\n    \n    /* Player attributes */\n    struct Player {\n        uint32 holding;                             // Number of pixels the player owns\n        uint96 sub_total;\n        uint96 one_pixel_value_offset;\n    }\n    \n    mapping(uint    => Pixel)  canvas;              // The playing field\n    mapping(address => Player) players;             // Players\n    \n    /* Parameters */\n    uint32 constant width                = 400;             // Canvas width, 400 px\n    uint32 constant height               = 400;             // Canvas height, 400 px\n    uint88 constant new_price            =   0.0005 ether;  // Unmodified price of newly sold pixels\n    uint96 constant increment_percentage = 135;             // Increment in units of 1/100\n    uint96 constant pot_percentage       =  40;             // Purchase price percentage going to pot\n    uint96 constant payout_percentage    =  50;             // Purchase price percentage going to payout\n    uint96 constant revenue_percentage   =  80;             // Purchase price percentage going to previous owner\n    uint96 constant dev_percentage       =   2;             // Purchase price percentage going to developers\n    uint32 constant time_increment       =  60 seconds;     // Expiration deadline increment\n    \n    /* number of pixels */\n    uint32 constant playing_field = width * height;\n    \n    /* State variables */\n    uint32 public expiration;                       // End of the game unix timestamp\n    uint32 public sold_pixels;                      // Number of sold visible pixels\n    uint96 public pot;                              // Total pot to be divided between the last buyer and the most pixel owner\n    uint96 public payout;                           // Total payout to be divided between all pixel owners\n    \n    uint96 public revenues;                         // Pixel owner revenues resulting from pixel purchases and referrals\n    uint96 public one_pixel_value;\n    uint96 public withdrawals;                      // Total amount withdrawn so far by pixel owners\n    \n    bool last_buyer_cashed_out = false;\n    bool biggest_holder_cashed_out = false;\n    \n    address payable public last_buyer;              // Last buyer address\n    address payable public biggest_holder;          // Most pixel owner address\n    \n    address payable dev_account;\n    \n    /*------------------------------------------------------------------------------------------------------\n        * Events that will be emitted on changes\n    ------------------------------------------------------------------------------------------------------*/\n    event PixelBought(uint _index, address _owner, uint _color, uint _price);\n    event NewConditions(uint _expiration, uint _sold_pixels, uint _pot, uint _payout, address _last_buyer, uint32 _totalBuy, address _sender);\n    /*------------------------------------------------------------------------------------------------------\n        * Initialization of a new game\n    ------------------------------------------------------------------------------------------------------*/\n    constructor() public {\n        require(pot_percentage + payout_percentage <= 100, \"revert1\");\n        require(increment_percentage >= 100, \"revert2\");\n        require(revenue_percentage * increment_percentage >= 10000, \"revert3\");\n        require(revenue_percentage + dev_percentage <= 100, \"revert4\");\n        \n        dev_account = msg.sender;\n        expiration = uint32(now) + 1 days;\n        biggest_holder = dev_account;\n    }\n    /*------------------------------------------------------------------------------------------------------\n        * External functions\n    ------------------------------------------------------------------------------------------------------*/\n    /* Is the game still going? */\n    function isGameGoing() external view returns (bool _gameIsGoing) {\n        return (now < expiration);\n    }\n    \n    /* Get information of one particular pixel */\n    function getPixel(uint _index) external view returns (address owner, uint color, uint price) {\n        if (canvas[_index].price == 0) return (address(0),           0,                    new_price);\n        else                           return (canvas[_index].owner, canvas[_index].color, canvas[_index].price);\n    }\n    \n    /* Get information of a pixel array, starting from _indexFrom, at _len length */\n    function getPixel(uint _indexFrom, uint _len) external view returns (address[] memory owner, uint[] memory color, uint[] memory price) {\n        address[] memory _owner = new address[](_len);\n        uint[] memory _color = new uint[](_len);\n        uint[] memory _price = new uint[](_len);\n        uint counter = 0;\n        uint iLen = _indexFrom + _len;\n        for (uint i = _indexFrom; i < iLen; i++) {\n            if (canvas[i].price == 0) {_owner[counter] = address(0);      _color[counter] = 0;               _price[counter] = new_price;      } \n            else                      {_owner[counter] = canvas[i].owner; _color[counter] = canvas[i].color; _price[counter] = canvas[i].price;}\n            counter++; \n        }\n        return (_owner, _color, _price);\n    }\n    \n    /* Get color of every pixel super fast */\n    function getColor() external view returns (uint[] memory color) {\n        uint[] memory _color = new uint[](playing_field / 32);\n        uint temp;\n        for (uint i = 0; i < (playing_field / 32); i++) {\n            temp = 0;\n            for (uint j = 0; j < 32; j++) {\n                temp += uint(canvas[i * 32 + j].color) << (8 * j);\n            }\n            _color[i] = temp;\n        }\n        return (_color);\n    }\n    \n    /* Get price and owner of every pixel in a bandwidth saving way */\n    function getPriceOwner(uint _index, uint _len) external view returns (uint[] memory) {\n        uint[] memory result = new uint[](_len);\n        for (uint i = 0; i < _len; i++) {\n            if (canvas[_index + i].price == 0) result[i] = new_price;\n            else result[i] = (uint256(canvas[_index + i].owner) << 96) + canvas[_index + i].price;\n        }\n        return result;\n    }\n    \n    /* Number of pixels of a player */\n    function getHoldingOf(address _address) external view returns(uint32 _holding) {\n        return players[_address].holding;\n    }\n    \n    /* My balance */\n    function getBalanceOf(address _address) external view returns(uint96 _value) {\n        require(_address == msg.sender, \"revert5\");\n        return players[_address].sub_total + players[_address].holding * (one_pixel_value - players[_address].one_pixel_value_offset);\n    }\n    /*------------------------------------------------------------------------------------------------------\n        * Private functions\n    ------------------------------------------------------------------------------------------------------*/\n    /* Update pixel information */\n    function putPixel(uint _index, address _owner, uint8 _color, uint88 _price) private {\n        canvas[_index].owner = _owner;\n        canvas[_index].color = _color;\n        canvas[_index].price = _price;\n    }\n    \n    /* Update player information */\n    function putPlayer(address _player, uint32 _holding, uint96 _sub_total, uint96 _one_pixel_value_offset) private {\n        players[_player].holding                = _holding;\n        players[_player].sub_total              = _sub_total;\n        players[_player].one_pixel_value_offset = _one_pixel_value_offset;\n    }\n    \n    function putStateVariables(\n        uint32 _expiration,\n        uint32 _sold_pixels,\n        uint96 _pot,\n        uint96 _payout,\n        uint96 _revenues,\n        uint96 _one_pixel_value\n    )\n        private\n    {\n        expiration      = _expiration;\n        sold_pixels     = _sold_pixels;\n        pot             = _pot;\n        payout          = _payout;\n        revenues        = _revenues;\n        one_pixel_value = _one_pixel_value;\n    }\n    \n    function balanceOf(address _address) private view returns(uint96 _value) {\n        return players[_address].sub_total + players[_address].holding * (one_pixel_value - players[_address].one_pixel_value_offset);\n    }\n    /*------------------------------------------------------------------------------------------------------\n        * Public functions\n    ------------------------------------------------------------------------------------------------------*/\n    /* Purchase pixel */\n    function buy(uint[] memory _index, uint8[] memory _color, uint[] memory _price, address _referrar) public payable {\n        require(now < expiration, \"revert8\");                   // Is the game still going?\n        require(_index.length == _color.length, \"revert9\");\n        require(_index.length == _price.length, \"revert10\");\n        \n        uint96 spendETH         = 0;\n        uint32 f_sold_pixels    = 0;\n        uint32 f_holding        = 0;\n        uint96 f_sub_total      = 0;\n        uint96 f_revenues       = 0;\n        uint96 increase         = 0;\n        uint32 totalBuy         = 0;\n        uint96 pixel_price;\n\n        for(uint i = 0; i < _index.length; i++) {\n            if(_index[i] >= playing_field) continue;            // Must be a valid pixel\n            \n            address previous_owner = canvas[_index[i]].owner;\n            /* New pixel */\n            if(previous_owner == address(0)) {\n                pixel_price = new_price;\n                if(pixel_price != _price[i]) continue;\n                if((spendETH + pixel_price) > msg.value) continue;\n                spendETH += pixel_price;\n                \n                increase += pixel_price;\n                f_sold_pixels++;\n                f_holding++;\n            }\n            \n            /* Existing pixel */\n            else {\n                pixel_price = canvas[_index[i]].price;\n                if(pixel_price != _price[i]) continue;\n                if((spendETH + pixel_price) > msg.value) continue;\n                spendETH += pixel_price;\n                \n                uint96 to_previous_owner = (pixel_price * revenue_percentage) / 100;\n                f_revenues += to_previous_owner;\n                increase += pixel_price - to_previous_owner - ((pixel_price * dev_percentage) / 100);\n                \n                /* normal purchase */\n                if(previous_owner != msg.sender) {\n                    f_holding++;\n                    putPlayer(previous_owner, players[previous_owner].holding - 1, balanceOf(previous_owner) + to_previous_owner, one_pixel_value);\n                }\n                /* self purchase */\n                else f_sub_total += to_previous_owner;\n            }\n            \n            totalBuy++;\n            pixel_price = (pixel_price * increment_percentage) / 100;\n            putPixel(_index[i], msg.sender, _color[i], uint88(pixel_price));\n            emit PixelBought(_index[i], msg.sender, _color[i], pixel_price);\n        }\n        \n        /* Player */\n        if(spendETH < uint96(msg.value)) {\n            f_sub_total += uint96(msg.value) - spendETH;   // Add remaining ether to user balance\n        }\n        putPlayer(msg.sender, players[msg.sender].holding + f_holding, balanceOf(msg.sender) + f_sub_total, one_pixel_value);\n        \n        if(totalBuy != 0) {\n            /* Referral bonus */\n            uint96 f_payout = (increase * payout_percentage) / 100;\n            uint96 f_pot;\n            if((players[_referrar].holding > 0) && (_referrar != msg.sender)) {\n                f_pot = (increase * pot_percentage) / 100;\n                uint96 referral_bonus = increase - f_payout - f_pot;\n                /* Pay referrar */\n                f_revenues += referral_bonus;\n                players[_referrar].sub_total += referral_bonus;\n            }\n            else f_pot = increase - f_payout;             // If no referrar, bonus goes to the pot\n            \n            /* One pixel value */\n            uint96 f_one_pixel_value = f_payout / (sold_pixels + f_sold_pixels);\n            \n            /* Add more time, capped at 24h */\n            uint32 maxExpiration = uint32(now) + 1 days;\n            uint32 f_expiration = expiration + (totalBuy * time_increment);\n            if (f_expiration > maxExpiration) f_expiration = maxExpiration;\n            \n            /* Update state variables */\n            f_sold_pixels += sold_pixels;\n            f_pot += pot;\n            f_payout += payout;\n            f_revenues += revenues;\n            f_one_pixel_value += one_pixel_value;\n            putStateVariables(\n                f_expiration,\n                f_sold_pixels,\n                f_pot,\n                f_payout,\n                f_revenues,\n                f_one_pixel_value\n            );\n            \n            if(last_buyer != msg.sender) last_buyer = msg.sender;\n        }\n        \n        emit NewConditions(expiration, sold_pixels, pot, payout, last_buyer, totalBuy, msg.sender);\n    }\n    /*------------------------------------------------------------------------------------------------------\n        * Withdrawals\n    ------------------------------------------------------------------------------------------------------*/\n    modifier notFinalDeadline() {\n        require(now < expiration + 365 days, \"revert9\");\n        _;\n    }\n    \n    /* Player withdrawals */\n    function withdraw() public notFinalDeadline {\n        uint96 amount = balanceOf(msg.sender);\n        putPlayer(msg.sender, players[msg.sender].holding, 0, one_pixel_value);\n        withdrawals += amount;\n        msg.sender.transfer(amount);\n    }\n    \n    /* Developer withdrawals */\n    function dev_withdrawal(uint96 _amount) public {\n        require(msg.sender == dev_account);\n        \n        uint ether_paid = address(this).balance + withdrawals;\n        uint ether_used = payout + pot + revenues;\n        uint max = ether_paid - ether_used;\n        require(_amount <= max, \"revert10\");\n        dev_account.transfer(_amount);\n    }\n    \n    function final_dev_withdrawal() public {\n        require(now > expiration + 365 days, \"revert11\");\n        require(msg.sender == dev_account);\n        dev_account.transfer(address(this).balance);\n    }\n    /*------------------------------------------------------------------------------------------------------\n        * Awards\n    ------------------------------------------------------------------------------------------------------*/\n    /* Update the most pixel holder */\n    function update_biggest_holder(address payable _address) public notFinalDeadline returns(address _biggest_holder) {\n        require(biggest_holder != address(0));\n        if (players[_address].holding > players[biggest_holder].holding) biggest_holder = _address;\n        return biggest_holder;\n    }\n    \n    /* Awards */\n    function award_last_buyer() public notFinalDeadline {\n        require(now > expiration);\n        require(last_buyer_cashed_out == false);\n        \n        last_buyer_cashed_out = true;\n        uint96 half_award = pot / 2;\n        withdrawals += half_award;\n        last_buyer.transfer(half_award);\n    }\n    \n    function award_biggest_holder() public notFinalDeadline {\n        /* Biggest holder can cash out earliest 1 week after the game ends. */\n        /* This 1 week period is there to give enough time to update_biggest_holder() */\n        require(now > expiration + 7 days);\n        require(biggest_holder_cashed_out == false);\n\n        biggest_holder_cashed_out = true;\n        uint96 half_award = pot / 2;\n        withdrawals += half_award;\n        biggest_holder.transfer(half_award);\n    }\n}",
  "bytecode": ""
}