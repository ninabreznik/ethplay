{
  "address": "0x56E7d4520ABFECf10b38368b00723d9BD3c21ee1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "dYdX: Operation Impl",
  "contractName": "OperationImpl",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "10000",
  "evmVersion": "byzantium",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\n/*\n\n    Copyright 2019 dYdX Trading Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n*/\n\npragma solidity 0.5.7;\npragma experimental ABIEncoderV2;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/protocol/lib/Require.sol\n\n/**\n * @title Require\n * @author dYdX\n *\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\n */\nlibrary Require {\n\n    // ============ Constants ============\n\n    uint256 constant ASCII_ZERO = 48; // '0'\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\n    bytes2 constant COLON = 0x3a20; // ': '\n    bytes2 constant COMMA = 0x2c20; // ', '\n    bytes2 constant LPAREN = 0x203c; // ' <'\n    byte constant RPAREN = 0x3e; // '>'\n    uint256 constant FOUR_BIT_MASK = 0xf;\n\n    // ============ Library Functions ============\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason)\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        uint256 payloadA\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        uint256 payloadA,\n        uint256 payloadB\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA,\n        uint256 payloadB\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA,\n        uint256 payloadB,\n        uint256 payloadC\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringify(file),\n                        COLON,\n                        stringify(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        COMMA,\n                        stringify(payloadC),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    // ============ Private Functions ============\n\n    function stringify(\n        bytes32 input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        // put the input bytes into the result\n        bytes memory result = abi.encodePacked(input);\n\n        // determine the length of the input by finding the location of the last non-zero byte\n        for (uint256 i = 32; i > 0; ) {\n            // reverse-for-loops with unsigned integer\n            /* solium-disable-next-line security/no-modify-for-iter-var */\n            i--;\n\n            // find the last non-zero byte in order to determine the length\n            if (result[i] != 0) {\n                uint256 length = i + 1;\n\n                /* solium-disable-next-line security/no-inline-assembly */\n                assembly {\n                    mstore(result, length) // r.length = length;\n                }\n\n                return result;\n            }\n        }\n\n        // all bytes are zero\n        return new bytes(0);\n    }\n\n    function stringify(\n        uint256 input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        if (input == 0) {\n            return \"0\";\n        }\n\n        // get the final string length\n        uint256 j = input;\n        uint256 length;\n        while (j != 0) {\n            length++;\n            j /= 10;\n        }\n\n        // allocate the string\n        bytes memory bstr = new bytes(length);\n\n        // populate the string starting with the least-significant character\n        j = input;\n        for (uint256 i = length; i > 0; ) {\n            // reverse-for-loops with unsigned integer\n            /* solium-disable-next-line security/no-modify-for-iter-var */\n            i--;\n\n            // take last decimal digit\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\n\n            // remove the last decimal digit\n            j /= 10;\n        }\n\n        return bstr;\n    }\n\n    function stringify(\n        address input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        uint256 z = uint256(input);\n\n        // addresses are \"0x\" followed by 20 bytes of data which take up 2 characters each\n        bytes memory result = new bytes(42);\n\n        // populate the result with \"0x\"\n        result[0] = byte(uint8(ASCII_ZERO));\n        result[1] = byte(uint8(ASCII_LOWER_EX));\n\n        // for each byte (starting from the lowest byte), populate the result with two characters\n        for (uint256 i = 0; i < 20; i++) {\n            // each byte takes two characters\n            uint256 shift = i * 2;\n\n            // populate the least-significant character\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n\n            // populate the most-significant character\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n        }\n\n        return result;\n    }\n\n    function char(\n        uint256 input\n    )\n        private\n        pure\n        returns (byte)\n    {\n        // return ASCII digit (0-9)\n        if (input < 10) {\n            return byte(uint8(input + ASCII_ZERO));\n        }\n\n        // return ASCII letter (a-f)\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\n    }\n}\n\n// File: contracts/protocol/lib/Math.sol\n\n/**\n * @title Math\n * @author dYdX\n *\n * Library for non-standard Math functions\n */\nlibrary Math {\n    using SafeMath for uint256;\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Math\";\n\n    // ============ Library Functions ============\n\n    /*\n     * Return target * (numerator / denominator).\n     */\n    function getPartial(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.mul(numerator).div(denominator);\n    }\n\n    /*\n     * Return target * (numerator / denominator), but rounded up.\n     */\n    function getPartialRoundUp(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (target == 0 || numerator == 0) {\n            // SafeMath will check for zero denominator\n            return SafeMath.div(0, denominator);\n        }\n        return target.mul(numerator).sub(1).div(denominator).add(1);\n    }\n\n    function to128(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 result = uint128(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint128\"\n        );\n        return result;\n    }\n\n    function to96(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint96)\n    {\n        uint96 result = uint96(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint96\"\n        );\n        return result;\n    }\n\n    function to32(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint32)\n    {\n        uint32 result = uint32(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint32\"\n        );\n        return result;\n    }\n\n    function min(\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max(\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a > b ? a : b;\n    }\n}\n\n// File: contracts/protocol/lib/Types.sol\n\n/**\n * @title Types\n * @author dYdX\n *\n * Library for interacting with the basic structs used in Solo\n */\nlibrary Types {\n    using Math for uint256;\n\n    // ============ AssetAmount ============\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    // ============ Par (Principal Amount) ============\n\n    // Total borrow and supply values for a market\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    // Individual principal amount for an account\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    function zeroPar()\n        internal\n        pure\n        returns (Par memory)\n    {\n        return Par({\n            sign: false,\n            value: 0\n        });\n    }\n\n    function sub(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        return add(a, negative(b));\n    }\n\n    function add(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        Par memory result;\n        if (a.sign == b.sign) {\n            result.sign = a.sign;\n            result.value = SafeMath.add(a.value, b.value).to128();\n        } else {\n            if (a.value >= b.value) {\n                result.sign = a.sign;\n                result.value = SafeMath.sub(a.value, b.value).to128();\n            } else {\n                result.sign = b.sign;\n                result.value = SafeMath.sub(b.value, a.value).to128();\n            }\n        }\n        return result;\n    }\n\n    function equals(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        if (a.value == b.value) {\n            if (a.value == 0) {\n                return true;\n            }\n            return a.sign == b.sign;\n        }\n        return false;\n    }\n\n    function negative(\n        Par memory a\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        return Par({\n            sign: !a.sign,\n            value: a.value\n        });\n    }\n\n    function isNegative(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return !a.sign && a.value > 0;\n    }\n\n    function isPositive(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.sign && a.value > 0;\n    }\n\n    function isZero(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.value == 0;\n    }\n\n    // ============ Wei (Token Amount) ============\n\n    // Individual token amount for an account\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n\n    function zeroWei()\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return Wei({\n            sign: false,\n            value: 0\n        });\n    }\n\n    function sub(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return add(a, negative(b));\n    }\n\n    function add(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        Wei memory result;\n        if (a.sign == b.sign) {\n            result.sign = a.sign;\n            result.value = SafeMath.add(a.value, b.value);\n        } else {\n            if (a.value >= b.value) {\n                result.sign = a.sign;\n                result.value = SafeMath.sub(a.value, b.value);\n            } else {\n                result.sign = b.sign;\n                result.value = SafeMath.sub(b.value, a.value);\n            }\n        }\n        return result;\n    }\n\n    function equals(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        if (a.value == b.value) {\n            if (a.value == 0) {\n                return true;\n            }\n            return a.sign == b.sign;\n        }\n        return false;\n    }\n\n    function negative(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return Wei({\n            sign: !a.sign,\n            value: a.value\n        });\n    }\n\n    function isNegative(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return !a.sign && a.value > 0;\n    }\n\n    function isPositive(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.sign && a.value > 0;\n    }\n\n    function isZero(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.value == 0;\n    }\n}\n\n// File: contracts/protocol/lib/Account.sol\n\n/**\n * @title Account\n * @author dYdX\n *\n * Library of structs and functions that represent an account\n */\nlibrary Account {\n    // ============ Enums ============\n\n    /*\n     * Most-recently-cached account status.\n     *\n     * Normal: Can only be liquidated if the account values are violating the global margin-ratio.\n     * Liquid: Can be liquidated no matter the account values.\n     *         Can be vaporized if there are no more positive account values.\n     * Vapor:  Has only negative (or zeroed) account values. Can be vaporized.\n     *\n     */\n    enum Status {\n        Normal,\n        Liquid,\n        Vapor\n    }\n\n    // ============ Structs ============\n\n    // Represents the unique key that specifies an account\n    struct Info {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    // The complete storage for any account\n    struct Storage {\n        mapping (uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n\n    // ============ Library Functions ============\n\n    function equals(\n        Info memory a,\n        Info memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.owner == b.owner && a.number == b.number;\n    }\n}\n\n// File: contracts/protocol/interfaces/IAutoTrader.sol\n\n/**\n * @title IAutoTrader\n * @author dYdX\n *\n * Interface that Auto-Traders for Solo must implement in order to approve trades.\n */\ncontract IAutoTrader {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows traders to make trades approved by this smart contract. The active trader's account is\n     * the takerAccount and the passive account (for which this contract approves trades\n     * on-behalf-of) is the makerAccount.\n     *\n     * @param  inputMarketId   The market for which the trader specified the original amount\n     * @param  outputMarketId  The market for which the trader wants the resulting amount specified\n     * @param  makerAccount    The account for which this contract is making trades\n     * @param  takerAccount    The account requesting the trade\n     * @param  oldInputPar     The old principal amount for the makerAccount for the inputMarketId\n     * @param  newInputPar     The new principal amount for the makerAccount for the inputMarketId\n     * @param  inputWei        The change in token amount for the makerAccount for the inputMarketId\n     * @param  data            Arbitrary data passed in by the trader\n     * @return                 The AssetAmount for the makerAccount for the outputMarketId\n     */\n    function getTradeCost(\n        uint256 inputMarketId,\n        uint256 outputMarketId,\n        Account.Info memory makerAccount,\n        Account.Info memory takerAccount,\n        Types.Par memory oldInputPar,\n        Types.Par memory newInputPar,\n        Types.Wei memory inputWei,\n        bytes memory data\n    )\n        public\n        returns (Types.AssetAmount memory);\n}\n\n// File: contracts/protocol/interfaces/ICallee.sol\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ncontract ICallee {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    )\n        public;\n}\n\n// File: contracts/protocol/lib/Actions.sol\n\n/**\n * @title Actions\n * @author dYdX\n *\n * Library that defines and parses valid Actions\n */\nlibrary Actions {\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Actions\";\n\n    // ============ Enums ============\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    enum AccountLayout {\n        OnePrimary,\n        TwoPrimary,\n        PrimaryAndSecondary\n    }\n\n    enum MarketLayout {\n        ZeroMarkets,\n        OneMarket,\n        TwoMarkets\n    }\n\n    // ============ Structs ============\n\n    /*\n     * Arguments that are passed to Solo in an ordered list as part of a single operation.\n     * Each ActionArgs has an actionType which specifies which action struct that this data will be\n     * parsed into before being processed.\n     */\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    // ============ Action Types ============\n\n    /*\n     * Moves tokens from an address to Solo. Can either repay a borrow or provide additional supply.\n     */\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    /*\n     * Moves tokens from Solo to another address. Can either borrow tokens or reduce the amount\n     * previously supplied.\n     */\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    /*\n     * Transfers balance between two accounts. The msg.sender must be an operator for both accounts.\n     * The amount field applies to accountOne.\n     * This action does not require any token movement since the trade is done internally to Solo.\n     */\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    /*\n     * Acquires a certain amount of tokens by spending other tokens. Sends takerMarket tokens to the\n     * specified exchangeWrapper contract and expects makerMarket tokens in return. The amount field\n     * applies to the makerMarket.\n     */\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    /*\n     * Spends a certain amount of tokens to acquire other tokens. Sends takerMarket tokens to the\n     * specified exchangeWrapper and expects makerMarket tokens in return. The amount field applies\n     * to the takerMarket.\n     */\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    /*\n     * Trades balances between two accounts using any external contract that implements the\n     * AutoTrader interface. The AutoTrader contract must be an operator for the makerAccount (for\n     * which it is trading on-behalf-of). The amount field applies to the makerAccount and the\n     * inputMarket. This proposed change to the makerAccount is passed to the AutoTrader which will\n     * quote a change for the makerAccount in the outputMarket (or will disallow the trade).\n     * This action does not require any token movement since the trade is done internally to Solo.\n     */\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    /*\n     * Each account must maintain a certain margin-ratio (specified globally). If the account falls\n     * below this margin-ratio, it can be liquidated by any other account. This allows anyone else\n     * (arbitrageurs) to repay any borrowed asset (owedMarket) of the liquidating account in\n     * exchange for any collateral asset (heldMarket) of the liquidAccount. The ratio is determined\n     * by the price ratio (given by the oracles) plus a spread (specified globally). Liquidating an\n     * account also sets a flag on the account that the account is being liquidated. This allows\n     * anyone to continue liquidating the account until there are no more borrows being taken by the\n     * liquidating account. Liquidators do not have to liquidate the entire account all at once but\n     * can liquidate as much as they choose. The liquidating flag allows liquidators to continue\n     * liquidating the account even if it becomes collateralized through partial liquidation or\n     * price movement.\n     */\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    /*\n     * Similar to liquidate, but vaporAccounts are accounts that have only negative balances\n     * remaining. The arbitrageur pays back the negative asset (owedMarket) of the vaporAccount in\n     * exchange for a collateral asset (heldMarket) at a favorable spread. However, since the\n     * liquidAccount has no collateral assets, the collateral must come from Solo's excess tokens.\n     */\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    /*\n     * Passes arbitrary bytes of data to an external contract that implements the Callee interface.\n     * Does not change any asset amounts. This function may be useful for setting certain variables\n     * on layer-two contracts for certain accounts without having to make a separate Ethereum\n     * transaction for doing so. Also, the second-layer contracts can ensure that the call is coming\n     * from an operator of the particular account.\n     */\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n\n    // ============ Helper Functions ============\n\n    function getMarketLayout(\n        ActionType actionType\n    )\n        internal\n        pure\n        returns (MarketLayout)\n    {\n        if (\n            actionType == Actions.ActionType.Deposit\n            || actionType == Actions.ActionType.Withdraw\n            || actionType == Actions.ActionType.Transfer\n        ) {\n            return MarketLayout.OneMarket;\n        }\n        else if (actionType == Actions.ActionType.Call) {\n            return MarketLayout.ZeroMarkets;\n        }\n        return MarketLayout.TwoMarkets;\n    }\n\n    function getAccountLayout(\n        ActionType actionType\n    )\n        internal\n        pure\n        returns (AccountLayout)\n    {\n        if (\n            actionType == Actions.ActionType.Transfer\n            || actionType == Actions.ActionType.Trade\n        ) {\n            return AccountLayout.TwoPrimary;\n        } else if (\n            actionType == Actions.ActionType.Liquidate\n            || actionType == Actions.ActionType.Vaporize\n        ) {\n            return AccountLayout.PrimaryAndSecondary;\n        }\n        return AccountLayout.OnePrimary;\n    }\n\n    // ============ Parsing Functions ============\n\n    function parseDepositArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (DepositArgs memory)\n    {\n        assert(args.actionType == ActionType.Deposit);\n        return DepositArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            market: args.primaryMarketId,\n            from: args.otherAddress\n        });\n    }\n\n    function parseWithdrawArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (WithdrawArgs memory)\n    {\n        assert(args.actionType == ActionType.Withdraw);\n        return WithdrawArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            market: args.primaryMarketId,\n            to: args.otherAddress\n        });\n    }\n\n    function parseTransferArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (TransferArgs memory)\n    {\n        assert(args.actionType == ActionType.Transfer);\n        return TransferArgs({\n            amount: args.amount,\n            accountOne: accounts[args.accountId],\n            accountTwo: accounts[args.otherAccountId],\n            market: args.primaryMarketId\n        });\n    }\n\n    function parseBuyArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (BuyArgs memory)\n    {\n        assert(args.actionType == ActionType.Buy);\n        return BuyArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            makerMarket: args.primaryMarketId,\n            takerMarket: args.secondaryMarketId,\n            exchangeWrapper: args.otherAddress,\n            orderData: args.data\n        });\n    }\n\n    function parseSellArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (SellArgs memory)\n    {\n        assert(args.actionType == ActionType.Sell);\n        return SellArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            takerMarket: args.primaryMarketId,\n            makerMarket: args.secondaryMarketId,\n            exchangeWrapper: args.otherAddress,\n            orderData: args.data\n        });\n    }\n\n    function parseTradeArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (TradeArgs memory)\n    {\n        assert(args.actionType == ActionType.Trade);\n        return TradeArgs({\n            amount: args.amount,\n            takerAccount: accounts[args.accountId],\n            makerAccount: accounts[args.otherAccountId],\n            inputMarket: args.primaryMarketId,\n            outputMarket: args.secondaryMarketId,\n            autoTrader: args.otherAddress,\n            tradeData: args.data\n        });\n    }\n\n    function parseLiquidateArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (LiquidateArgs memory)\n    {\n        assert(args.actionType == ActionType.Liquidate);\n        return LiquidateArgs({\n            amount: args.amount,\n            solidAccount: accounts[args.accountId],\n            liquidAccount: accounts[args.otherAccountId],\n            owedMarket: args.primaryMarketId,\n            heldMarket: args.secondaryMarketId\n        });\n    }\n\n    function parseVaporizeArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (VaporizeArgs memory)\n    {\n        assert(args.actionType == ActionType.Vaporize);\n        return VaporizeArgs({\n            amount: args.amount,\n            solidAccount: accounts[args.accountId],\n            vaporAccount: accounts[args.otherAccountId],\n            owedMarket: args.primaryMarketId,\n            heldMarket: args.secondaryMarketId\n        });\n    }\n\n    function parseCallArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (CallArgs memory)\n    {\n        assert(args.actionType == ActionType.Call);\n        return CallArgs({\n            account: accounts[args.accountId],\n            callee: args.otherAddress,\n            data: args.data\n        });\n    }\n}\n\n// File: contracts/protocol/lib/Monetary.sol\n\n/**\n * @title Monetary\n * @author dYdX\n *\n * Library for types involving money\n */\nlibrary Monetary {\n\n    /*\n     * The price of a base-unit of an asset.\n     */\n    struct Price {\n        uint256 value;\n    }\n\n    /*\n     * Total value of an some amount of an asset. Equal to (price * amount).\n     */\n    struct Value {\n        uint256 value;\n    }\n}\n\n// File: contracts/protocol/lib/Cache.sol\n\n/**\n * @title Cache\n * @author dYdX\n *\n * Library for caching information about markets\n */\nlibrary Cache {\n    using Cache for MarketCache;\n    using Storage for Storage.State;\n\n    // ============ Structs ============\n\n    struct MarketInfo {\n        bool isClosing;\n        uint128 borrowPar;\n        Monetary.Price price;\n    }\n\n    struct MarketCache {\n        MarketInfo[] markets;\n    }\n\n    // ============ Setter Functions ============\n\n    /**\n     * Initialize an empty cache for some given number of total markets.\n     */\n    function create(\n        uint256 numMarkets\n    )\n        internal\n        pure\n        returns (MarketCache memory)\n    {\n        return MarketCache({\n            markets: new MarketInfo[](numMarkets)\n        });\n    }\n\n    /**\n     * Add market information (price and total borrowed par if the market is closing) to the cache.\n     * Return true if the market information did not previously exist in the cache.\n     */\n    function addMarket(\n        MarketCache memory cache,\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (bool)\n    {\n        if (cache.hasMarket(marketId)) {\n            return false;\n        }\n        cache.markets[marketId].price = state.fetchPrice(marketId);\n        if (state.markets[marketId].isClosing) {\n            cache.markets[marketId].isClosing = true;\n            cache.markets[marketId].borrowPar = state.getTotalPar(marketId).borrow;\n        }\n        return true;\n    }\n\n    // ============ Getter Functions ============\n\n    function getNumMarkets(\n        MarketCache memory cache\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return cache.markets.length;\n    }\n\n    function hasMarket(\n        MarketCache memory cache,\n        uint256 marketId\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return cache.markets[marketId].price.value != 0;\n    }\n\n    function getIsClosing(\n        MarketCache memory cache,\n        uint256 marketId\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return cache.markets[marketId].isClosing;\n    }\n\n    function getPrice(\n        MarketCache memory cache,\n        uint256 marketId\n    )\n        internal\n        pure\n        returns (Monetary.Price memory)\n    {\n        return cache.markets[marketId].price;\n    }\n\n    function getBorrowPar(\n        MarketCache memory cache,\n        uint256 marketId\n    )\n        internal\n        pure\n        returns (uint128)\n    {\n        return cache.markets[marketId].borrowPar;\n    }\n}\n\n// File: contracts/protocol/lib/Decimal.sol\n\n/**\n * @title Decimal\n * @author dYdX\n *\n * Library that defines a fixed-point number with 18 decimal places.\n */\nlibrary Decimal {\n    using SafeMath for uint256;\n\n    // ============ Constants ============\n\n    uint256 constant BASE = 10**18;\n\n    // ============ Structs ============\n\n    struct D256 {\n        uint256 value;\n    }\n\n    // ============ Functions ============\n\n    function one()\n        internal\n        pure\n        returns (D256 memory)\n    {\n        return D256({ value: BASE });\n    }\n\n    function onePlus(\n        D256 memory d\n    )\n        internal\n        pure\n        returns (D256 memory)\n    {\n        return D256({ value: d.value.add(BASE) });\n    }\n\n    function mul(\n        uint256 target,\n        D256 memory d\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return Math.getPartial(target, d.value, BASE);\n    }\n\n    function div(\n        uint256 target,\n        D256 memory d\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return Math.getPartial(target, BASE, d.value);\n    }\n}\n\n// File: contracts/protocol/lib/Time.sol\n\n/**\n * @title Time\n * @author dYdX\n *\n * Library for dealing with time, assuming timestamps fit within 32 bits (valid until year 2106)\n */\nlibrary Time {\n\n    // ============ Library Functions ============\n\n    function currentTime()\n        internal\n        view\n        returns (uint32)\n    {\n        return Math.to32(block.timestamp);\n    }\n}\n\n// File: contracts/protocol/lib/Interest.sol\n\n/**\n * @title Interest\n * @author dYdX\n *\n * Library for managing the interest rate and interest indexes of Solo\n */\nlibrary Interest {\n    using Math for uint256;\n    using SafeMath for uint256;\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Interest\";\n    uint64 constant BASE = 10**18;\n\n    // ============ Structs ============\n\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n\n    // ============ Library Functions ============\n\n    /**\n     * Get a new market Index based on the old index and market interest rate.\n     * Calculate interest for borrowers by using the formula rate * time. Approximates\n     * continuously-compounded interest when called frequently, but is much more\n     * gas-efficient to calculate. For suppliers, the interest rate is adjusted by the earningsRate,\n     * then prorated the across all suppliers.\n     *\n     * @param  index         The old index for a market\n     * @param  rate          The current interest rate of the market\n     * @param  totalPar      The total supply and borrow par values of the market\n     * @param  earningsRate  The portion of the interest that is forwarded to the suppliers\n     * @return               The updated index for a market\n     */\n    function calculateNewIndex(\n        Index memory index,\n        Rate memory rate,\n        Types.TotalPar memory totalPar,\n        Decimal.D256 memory earningsRate\n    )\n        internal\n        view\n        returns (Index memory)\n    {\n        (\n            Types.Wei memory supplyWei,\n            Types.Wei memory borrowWei\n        ) = totalParToWei(totalPar, index);\n\n        // get interest increase for borrowers\n        uint32 currentTime = Time.currentTime();\n        uint256 borrowInterest = rate.value.mul(uint256(currentTime).sub(index.lastUpdate));\n\n        // get interest increase for suppliers\n        uint256 supplyInterest;\n        if (Types.isZero(supplyWei)) {\n            supplyInterest = 0;\n        } else {\n            supplyInterest = Decimal.mul(borrowInterest, earningsRate);\n            if (borrowWei.value < supplyWei.value) {\n                supplyInterest = Math.getPartial(supplyInterest, borrowWei.value, supplyWei.value);\n            }\n        }\n        assert(supplyInterest <= borrowInterest);\n\n        return Index({\n            borrow: Math.getPartial(index.borrow, borrowInterest, BASE).add(index.borrow).to96(),\n            supply: Math.getPartial(index.supply, supplyInterest, BASE).add(index.supply).to96(),\n            lastUpdate: currentTime\n        });\n    }\n\n    function newIndex()\n        internal\n        view\n        returns (Index memory)\n    {\n        return Index({\n            borrow: BASE,\n            supply: BASE,\n            lastUpdate: Time.currentTime()\n        });\n    }\n\n    /*\n     * Convert a principal amount to a token amount given an index.\n     */\n    function parToWei(\n        Types.Par memory input,\n        Index memory index\n    )\n        internal\n        pure\n        returns (Types.Wei memory)\n    {\n        uint256 inputValue = uint256(input.value);\n        if (input.sign) {\n            return Types.Wei({\n                sign: true,\n                value: inputValue.getPartial(index.supply, BASE)\n            });\n        } else {\n            return Types.Wei({\n                sign: false,\n                value: inputValue.getPartialRoundUp(index.borrow, BASE)\n            });\n        }\n    }\n\n    /*\n     * Convert a token amount to a principal amount given an index.\n     */\n    function weiToPar(\n        Types.Wei memory input,\n        Index memory index\n    )\n        internal\n        pure\n        returns (Types.Par memory)\n    {\n        if (input.sign) {\n            return Types.Par({\n                sign: true,\n                value: input.value.getPartial(BASE, index.supply).to128()\n            });\n        } else {\n            return Types.Par({\n                sign: false,\n                value: input.value.getPartialRoundUp(BASE, index.borrow).to128()\n            });\n        }\n    }\n\n    /*\n     * Convert the total supply and borrow principal amounts of a market to total supply and borrow\n     * token amounts.\n     */\n    function totalParToWei(\n        Types.TotalPar memory totalPar,\n        Index memory index\n    )\n        internal\n        pure\n        returns (Types.Wei memory, Types.Wei memory)\n    {\n        Types.Par memory supplyPar = Types.Par({\n            sign: true,\n            value: totalPar.supply\n        });\n        Types.Par memory borrowPar = Types.Par({\n            sign: false,\n            value: totalPar.borrow\n        });\n        Types.Wei memory supplyWei = parToWei(supplyPar, index);\n        Types.Wei memory borrowWei = parToWei(borrowPar, index);\n        return (supplyWei, borrowWei);\n    }\n}\n\n// File: contracts/protocol/interfaces/IErc20.sol\n\n/**\n * @title IErc20\n * @author dYdX\n *\n * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\n * that we don't automatically revert when calling non-compliant tokens that have no return value for\n * transfer(), transferFrom(), or approve().\n */\ninterface IErc20 {\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply(\n    )\n        external\n        view\n        returns (uint256);\n\n    function balanceOf(\n        address who\n    )\n        external\n        view\n        returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    )\n        external\n        view\n        returns (uint256);\n\n    function transfer(\n        address to,\n        uint256 value\n    )\n        external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external;\n\n    function approve(\n        address spender,\n        uint256 value\n    )\n        external;\n\n    function name()\n        external\n        view\n        returns (string memory);\n\n    function symbol()\n        external\n        view\n        returns (string memory);\n\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n\n// File: contracts/protocol/lib/Token.sol\n\n/**\n * @title Token\n * @author dYdX\n *\n * This library contains basic functions for interacting with ERC20 tokens. Modified to work with\n * tokens that don't adhere strictly to the ERC20 standard (for example tokens that don't return a\n * boolean value on success).\n */\nlibrary Token {\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Token\";\n\n    // ============ Library Functions ============\n\n    function balanceOf(\n        address token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return IErc20(token).balanceOf(owner);\n    }\n\n    function allowance(\n        address token,\n        address owner,\n        address spender\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return IErc20(token).allowance(owner, spender);\n    }\n\n    function approve(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        IErc20(token).approve(spender, amount);\n\n        Require.that(\n            checkSuccess(),\n            FILE,\n            \"Approve failed\"\n        );\n    }\n\n    function approveMax(\n        address token,\n        address spender\n    )\n        internal\n    {\n        approve(\n            token,\n            spender,\n            uint256(-1)\n        );\n    }\n\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount == 0 || to == address(this)) {\n            return;\n        }\n\n        IErc20(token).transfer(to, amount);\n\n        Require.that(\n            checkSuccess(),\n            FILE,\n            \"Transfer failed\"\n        );\n    }\n\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount == 0 || to == from) {\n            return;\n        }\n\n        IErc20(token).transferFrom(from, to, amount);\n\n        Require.that(\n            checkSuccess(),\n            FILE,\n            \"TransferFrom failed\"\n        );\n    }\n\n    // ============ Private Functions ============\n\n    /**\n     * Check the return value of the previous function up to 32 bytes. Return true if the previous\n     * function returned 0 bytes or 32 bytes that are not all-zero.\n     */\n    function checkSuccess(\n    )\n        private\n        pure\n        returns (bool)\n    {\n        uint256 returnValue = 0;\n\n        /* solium-disable-next-line security/no-inline-assembly */\n        assembly {\n            // check number of bytes returned from last function call\n            switch returndatasize\n\n            // no bytes returned: assume success\n            case 0x0 {\n                returnValue := 1\n            }\n\n            // 32 bytes returned: check if non-zero\n            case 0x20 {\n                // copy 32 bytes into scratch space\n                returndatacopy(0x0, 0x0, 0x20)\n\n                // load those bytes into returnValue\n                returnValue := mload(0x0)\n            }\n\n            // not sure what was returned: don't mark as success\n            default { }\n        }\n\n        return returnValue != 0;\n    }\n}\n\n// File: contracts/protocol/interfaces/IInterestSetter.sol\n\n/**\n * @title IInterestSetter\n * @author dYdX\n *\n * Interface that Interest Setters for Solo must implement in order to report interest rates.\n */\ninterface IInterestSetter {\n\n    // ============ Public Functions ============\n\n    /**\n     * Get the interest rate of a token given some borrowed and supplied amounts\n     *\n     * @param  token        The address of the ERC20 token for the market\n     * @param  borrowWei    The total borrowed token amount for the market\n     * @param  supplyWei    The total supplied token amount for the market\n     * @return              The interest rate per second\n     */\n    function getInterestRate(\n        address token,\n        uint256 borrowWei,\n        uint256 supplyWei\n    )\n        external\n        view\n        returns (Interest.Rate memory);\n}\n\n// File: contracts/protocol/interfaces/IPriceOracle.sol\n\n/**\n * @title IPriceOracle\n * @author dYdX\n *\n * Interface that Price Oracles for Solo must implement in order to report prices.\n */\ncontract IPriceOracle {\n\n    // ============ Constants ============\n\n    uint256 public constant ONE_DOLLAR = 10 ** 36;\n\n    // ============ Public Functions ============\n\n    /**\n     * Get the price of a token\n     *\n     * @param  token  The ERC20 token address of the market\n     * @return        The USD price of a base unit of the token, then multiplied by 10^36.\n     *                So a USD-stable coin with 18 decimal places would return 10^18.\n     *                This is the price of the base unit rather than the price of a \"human-readable\"\n     *                token amount. Every ERC20 may have a different number of decimals.\n     */\n    function getPrice(\n        address token\n    )\n        public\n        view\n        returns (Monetary.Price memory);\n}\n\n// File: contracts/protocol/lib/Storage.sol\n\n/**\n * @title Storage\n * @author dYdX\n *\n * Functions for reading, writing, and verifying state in Solo\n */\nlibrary Storage {\n    using Cache for Cache.MarketCache;\n    using Storage for Storage.State;\n    using Math for uint256;\n    using Types for Types.Par;\n    using Types for Types.Wei;\n    using SafeMath for uint256;\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Storage\";\n\n    // ============ Structs ============\n\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n\n        // Interest index of the market\n        Interest.Index index;\n\n        // Contract address of the price oracle for this market\n        IPriceOracle priceOracle;\n\n        // Contract address of the interest setter for this market\n        IInterestSetter interestSetter;\n\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n\n        // marketId => Market\n        mapping (uint256 => Market) markets;\n\n        // owner => account number => Account\n        mapping (address => mapping (uint256 => Account.Storage)) accounts;\n\n        // Addresses that can control other users accounts\n        mapping (address => mapping (address => bool)) operators;\n\n        // Addresses that can control all users accounts\n        mapping (address => bool) globalOperators;\n\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n\n    // ============ Functions ============\n\n    function getToken(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (address)\n    {\n        return state.markets[marketId].token;\n    }\n\n    function getTotalPar(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Types.TotalPar memory)\n    {\n        return state.markets[marketId].totalPar;\n    }\n\n    function getIndex(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Interest.Index memory)\n    {\n        return state.markets[marketId].index;\n    }\n\n    function getNumExcessTokens(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Types.Wei memory)\n    {\n        Interest.Index memory index = state.getIndex(marketId);\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\n\n        address token = state.getToken(marketId);\n\n        Types.Wei memory balanceWei = Types.Wei({\n            sign: true,\n            value: Token.balanceOf(token, address(this))\n        });\n\n        (\n            Types.Wei memory supplyWei,\n            Types.Wei memory borrowWei\n        ) = Interest.totalParToWei(totalPar, index);\n\n        // borrowWei is negative, so subtracting it makes the value more positive\n        return balanceWei.sub(borrowWei).sub(supplyWei);\n    }\n\n    function getStatus(\n        Storage.State storage state,\n        Account.Info memory account\n    )\n        internal\n        view\n        returns (Account.Status)\n    {\n        return state.accounts[account.owner][account.number].status;\n    }\n\n    function getPar(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Types.Par memory)\n    {\n        return state.accounts[account.owner][account.number].balances[marketId];\n    }\n\n    function getWei(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Types.Wei memory)\n    {\n        Types.Par memory par = state.getPar(account, marketId);\n\n        if (par.isZero()) {\n            return Types.zeroWei();\n        }\n\n        Interest.Index memory index = state.getIndex(marketId);\n        return Interest.parToWei(par, index);\n    }\n\n    function getLiquidationSpreadForPair(\n        Storage.State storage state,\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    )\n        internal\n        view\n        returns (Decimal.D256 memory)\n    {\n        uint256 result = state.riskParams.liquidationSpread.value;\n        result = Decimal.mul(result, Decimal.onePlus(state.markets[heldMarketId].spreadPremium));\n        result = Decimal.mul(result, Decimal.onePlus(state.markets[owedMarketId].spreadPremium));\n        return Decimal.D256({\n            value: result\n        });\n    }\n\n    function fetchNewIndex(\n        Storage.State storage state,\n        uint256 marketId,\n        Interest.Index memory index\n    )\n        internal\n        view\n        returns (Interest.Index memory)\n    {\n        Interest.Rate memory rate = state.fetchInterestRate(marketId, index);\n\n        return Interest.calculateNewIndex(\n            index,\n            rate,\n            state.getTotalPar(marketId),\n            state.riskParams.earningsRate\n        );\n    }\n\n    function fetchInterestRate(\n        Storage.State storage state,\n        uint256 marketId,\n        Interest.Index memory index\n    )\n        internal\n        view\n        returns (Interest.Rate memory)\n    {\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\n        (\n            Types.Wei memory supplyWei,\n            Types.Wei memory borrowWei\n        ) = Interest.totalParToWei(totalPar, index);\n\n        Interest.Rate memory rate = state.markets[marketId].interestSetter.getInterestRate(\n            state.getToken(marketId),\n            borrowWei.value,\n            supplyWei.value\n        );\n\n        return rate;\n    }\n\n    function fetchPrice(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        view\n        returns (Monetary.Price memory)\n    {\n        IPriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle);\n        Monetary.Price memory price = oracle.getPrice(state.getToken(marketId));\n        Require.that(\n            price.value != 0,\n            FILE,\n            \"Price cannot be zero\",\n            marketId\n        );\n        return price;\n    }\n\n    function getAccountValues(\n        Storage.State storage state,\n        Account.Info memory account,\n        Cache.MarketCache memory cache,\n        bool adjustForLiquidity\n    )\n        internal\n        view\n        returns (Monetary.Value memory, Monetary.Value memory)\n    {\n        Monetary.Value memory supplyValue;\n        Monetary.Value memory borrowValue;\n\n        uint256 numMarkets = cache.getNumMarkets();\n        for (uint256 m = 0; m < numMarkets; m++) {\n            if (!cache.hasMarket(m)) {\n                continue;\n            }\n\n            Types.Wei memory userWei = state.getWei(account, m);\n\n            if (userWei.isZero()) {\n                continue;\n            }\n\n            uint256 assetValue = userWei.value.mul(cache.getPrice(m).value);\n            Decimal.D256 memory adjust = Decimal.one();\n            if (adjustForLiquidity) {\n                adjust = Decimal.onePlus(state.markets[m].marginPremium);\n            }\n\n            if (userWei.sign) {\n                supplyValue.value = supplyValue.value.add(Decimal.div(assetValue, adjust));\n            } else {\n                borrowValue.value = borrowValue.value.add(Decimal.mul(assetValue, adjust));\n            }\n        }\n\n        return (supplyValue, borrowValue);\n    }\n\n    function isCollateralized(\n        Storage.State storage state,\n        Account.Info memory account,\n        Cache.MarketCache memory cache,\n        bool requireMinBorrow\n    )\n        internal\n        view\n        returns (bool)\n    {\n        // get account values (adjusted for liquidity)\n        (\n            Monetary.Value memory supplyValue,\n            Monetary.Value memory borrowValue\n        ) = state.getAccountValues(account, cache, /* adjustForLiquidity = */ true);\n\n        if (borrowValue.value == 0) {\n            return true;\n        }\n\n        if (requireMinBorrow) {\n            Require.that(\n                borrowValue.value >= state.riskParams.minBorrowedValue.value,\n                FILE,\n                \"Borrow value too low\",\n                account.owner,\n                account.number,\n                borrowValue.value\n            );\n        }\n\n        uint256 requiredMargin = Decimal.mul(borrowValue.value, state.riskParams.marginRatio);\n\n        return supplyValue.value >= borrowValue.value.add(requiredMargin);\n    }\n\n    function isGlobalOperator(\n        Storage.State storage state,\n        address operator\n    )\n        internal\n        view\n        returns (bool)\n    {\n        return state.globalOperators[operator];\n    }\n\n    function isLocalOperator(\n        Storage.State storage state,\n        address owner,\n        address operator\n    )\n        internal\n        view\n        returns (bool)\n    {\n        return state.operators[owner][operator];\n    }\n\n    function requireIsOperator(\n        Storage.State storage state,\n        Account.Info memory account,\n        address operator\n    )\n        internal\n        view\n    {\n        bool isValidOperator =\n            operator == account.owner\n            || state.isGlobalOperator(operator)\n            || state.isLocalOperator(account.owner, operator);\n\n        Require.that(\n            isValidOperator,\n            FILE,\n            \"Unpermissioned operator\",\n            operator\n        );\n    }\n\n    /**\n     * Determine and set an account's balance based on the intended balance change. Return the\n     * equivalent amount in wei\n     */\n    function getNewParAndDeltaWei(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId,\n        Types.AssetAmount memory amount\n    )\n        internal\n        view\n        returns (Types.Par memory, Types.Wei memory)\n    {\n        Types.Par memory oldPar = state.getPar(account, marketId);\n\n        if (amount.value == 0 && amount.ref == Types.AssetReference.Delta) {\n            return (oldPar, Types.zeroWei());\n        }\n\n        Interest.Index memory index = state.getIndex(marketId);\n        Types.Wei memory oldWei = Interest.parToWei(oldPar, index);\n        Types.Par memory newPar;\n        Types.Wei memory deltaWei;\n\n        if (amount.denomination == Types.AssetDenomination.Wei) {\n            deltaWei = Types.Wei({\n                sign: amount.sign,\n                value: amount.value\n            });\n            if (amount.ref == Types.AssetReference.Target) {\n                deltaWei = deltaWei.sub(oldWei);\n            }\n            newPar = Interest.weiToPar(oldWei.add(deltaWei), index);\n        } else { // AssetDenomination.Par\n            newPar = Types.Par({\n                sign: amount.sign,\n                value: amount.value.to128()\n            });\n            if (amount.ref == Types.AssetReference.Delta) {\n                newPar = oldPar.add(newPar);\n            }\n            deltaWei = Interest.parToWei(newPar, index).sub(oldWei);\n        }\n\n        return (newPar, deltaWei);\n    }\n\n    function getNewParAndDeltaWeiForLiquidation(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId,\n        Types.AssetAmount memory amount\n    )\n        internal\n        view\n        returns (Types.Par memory, Types.Wei memory)\n    {\n        Types.Par memory oldPar = state.getPar(account, marketId);\n\n        Require.that(\n            !oldPar.isPositive(),\n            FILE,\n            \"Owed balance cannot be positive\",\n            account.owner,\n            account.number,\n            marketId\n        );\n\n        (\n            Types.Par memory newPar,\n            Types.Wei memory deltaWei\n        ) = state.getNewParAndDeltaWei(\n            account,\n            marketId,\n            amount\n        );\n\n        // if attempting to over-repay the owed asset, bound it by the maximum\n        if (newPar.isPositive()) {\n            newPar = Types.zeroPar();\n            deltaWei = state.getWei(account, marketId).negative();\n        }\n\n        Require.that(\n            !deltaWei.isNegative() && oldPar.value >= newPar.value,\n            FILE,\n            \"Owed balance cannot increase\",\n            account.owner,\n            account.number,\n            marketId\n        );\n\n        // if not paying back enough wei to repay any par, then bound wei to zero\n        if (oldPar.equals(newPar)) {\n            deltaWei = Types.zeroWei();\n        }\n\n        return (newPar, deltaWei);\n    }\n\n    function isVaporizable(\n        Storage.State storage state,\n        Account.Info memory account,\n        Cache.MarketCache memory cache\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool hasNegative = false;\n        uint256 numMarkets = cache.getNumMarkets();\n        for (uint256 m = 0; m < numMarkets; m++) {\n            if (!cache.hasMarket(m)) {\n                continue;\n            }\n            Types.Par memory par = state.getPar(account, m);\n            if (par.isZero()) {\n                continue;\n            } else if (par.sign) {\n                return false;\n            } else {\n                hasNegative = true;\n            }\n        }\n        return hasNegative;\n    }\n\n    // =============== Setter Functions ===============\n\n    function updateIndex(\n        Storage.State storage state,\n        uint256 marketId\n    )\n        internal\n        returns (Interest.Index memory)\n    {\n        Interest.Index memory index = state.getIndex(marketId);\n        if (index.lastUpdate == Time.currentTime()) {\n            return index;\n        }\n        return state.markets[marketId].index = state.fetchNewIndex(marketId, index);\n    }\n\n    function setStatus(\n        Storage.State storage state,\n        Account.Info memory account,\n        Account.Status status\n    )\n        internal\n    {\n        state.accounts[account.owner][account.number].status = status;\n    }\n\n    function setPar(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId,\n        Types.Par memory newPar\n    )\n        internal\n    {\n        Types.Par memory oldPar = state.getPar(account, marketId);\n\n        if (Types.equals(oldPar, newPar)) {\n            return;\n        }\n\n        // updateTotalPar\n        Types.TotalPar memory totalPar = state.getTotalPar(marketId);\n\n        // roll-back oldPar\n        if (oldPar.sign) {\n            totalPar.supply = uint256(totalPar.supply).sub(oldPar.value).to128();\n        } else {\n            totalPar.borrow = uint256(totalPar.borrow).sub(oldPar.value).to128();\n        }\n\n        // roll-forward newPar\n        if (newPar.sign) {\n            totalPar.supply = uint256(totalPar.supply).add(newPar.value).to128();\n        } else {\n            totalPar.borrow = uint256(totalPar.borrow).add(newPar.value).to128();\n        }\n\n        state.markets[marketId].totalPar = totalPar;\n        state.accounts[account.owner][account.number].balances[marketId] = newPar;\n    }\n\n    /**\n     * Determine and set an account's balance based on a change in wei\n     */\n    function setParFromDeltaWei(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 marketId,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        if (deltaWei.isZero()) {\n            return;\n        }\n        Interest.Index memory index = state.getIndex(marketId);\n        Types.Wei memory oldWei = state.getWei(account, marketId);\n        Types.Wei memory newWei = oldWei.add(deltaWei);\n        Types.Par memory newPar = Interest.weiToPar(newWei, index);\n        state.setPar(\n            account,\n            marketId,\n            newPar\n        );\n    }\n}\n\n// File: contracts/protocol/lib/Events.sol\n\n/**\n * @title Events\n * @author dYdX\n *\n * Library to parse and emit logs from which the state of all accounts and indexes can be followed\n */\nlibrary Events {\n    using Types for Types.Wei;\n    using Storage for Storage.State;\n\n    // ============ Events ============\n\n    event LogIndexUpdate(\n        uint256 indexed market,\n        Interest.Index index\n    );\n\n    event LogOperation(\n        address sender\n    );\n\n    event LogDeposit(\n        address indexed accountOwner,\n        uint256 accountNumber,\n        uint256 market,\n        BalanceUpdate update,\n        address from\n    );\n\n    event LogWithdraw(\n        address indexed accountOwner,\n        uint256 accountNumber,\n        uint256 market,\n        BalanceUpdate update,\n        address to\n    );\n\n    event LogTransfer(\n        address indexed accountOneOwner,\n        uint256 accountOneNumber,\n        address indexed accountTwoOwner,\n        uint256 accountTwoNumber,\n        uint256 market,\n        BalanceUpdate updateOne,\n        BalanceUpdate updateTwo\n    );\n\n    event LogBuy(\n        address indexed accountOwner,\n        uint256 accountNumber,\n        uint256 takerMarket,\n        uint256 makerMarket,\n        BalanceUpdate takerUpdate,\n        BalanceUpdate makerUpdate,\n        address exchangeWrapper\n    );\n\n    event LogSell(\n        address indexed accountOwner,\n        uint256 accountNumber,\n        uint256 takerMarket,\n        uint256 makerMarket,\n        BalanceUpdate takerUpdate,\n        BalanceUpdate makerUpdate,\n        address exchangeWrapper\n    );\n\n    event LogTrade(\n        address indexed takerAccountOwner,\n        uint256 takerAccountNumber,\n        address indexed makerAccountOwner,\n        uint256 makerAccountNumber,\n        uint256 inputMarket,\n        uint256 outputMarket,\n        BalanceUpdate takerInputUpdate,\n        BalanceUpdate takerOutputUpdate,\n        BalanceUpdate makerInputUpdate,\n        BalanceUpdate makerOutputUpdate,\n        address autoTrader\n    );\n\n    event LogCall(\n        address indexed accountOwner,\n        uint256 accountNumber,\n        address callee\n    );\n\n    event LogLiquidate(\n        address indexed solidAccountOwner,\n        uint256 solidAccountNumber,\n        address indexed liquidAccountOwner,\n        uint256 liquidAccountNumber,\n        uint256 heldMarket,\n        uint256 owedMarket,\n        BalanceUpdate solidHeldUpdate,\n        BalanceUpdate solidOwedUpdate,\n        BalanceUpdate liquidHeldUpdate,\n        BalanceUpdate liquidOwedUpdate\n    );\n\n    event LogVaporize(\n        address indexed solidAccountOwner,\n        uint256 solidAccountNumber,\n        address indexed vaporAccountOwner,\n        uint256 vaporAccountNumber,\n        uint256 heldMarket,\n        uint256 owedMarket,\n        BalanceUpdate solidHeldUpdate,\n        BalanceUpdate solidOwedUpdate,\n        BalanceUpdate vaporOwedUpdate\n    );\n\n    // ============ Structs ============\n\n    struct BalanceUpdate {\n        Types.Wei deltaWei;\n        Types.Par newPar;\n    }\n\n    // ============ Internal Functions ============\n\n    function logIndexUpdate(\n        uint256 marketId,\n        Interest.Index memory index\n    )\n        internal\n    {\n        emit LogIndexUpdate(\n            marketId,\n            index\n        );\n    }\n\n    function logOperation()\n        internal\n    {\n        emit LogOperation(msg.sender);\n    }\n\n    function logDeposit(\n        Storage.State storage state,\n        Actions.DepositArgs memory args,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        emit LogDeposit(\n            args.account.owner,\n            args.account.number,\n            args.market,\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.market,\n                deltaWei\n            ),\n            args.from\n        );\n    }\n\n    function logWithdraw(\n        Storage.State storage state,\n        Actions.WithdrawArgs memory args,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        emit LogWithdraw(\n            args.account.owner,\n            args.account.number,\n            args.market,\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.market,\n                deltaWei\n            ),\n            args.to\n        );\n    }\n\n    function logTransfer(\n        Storage.State storage state,\n        Actions.TransferArgs memory args,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        emit LogTransfer(\n            args.accountOne.owner,\n            args.accountOne.number,\n            args.accountTwo.owner,\n            args.accountTwo.number,\n            args.market,\n            getBalanceUpdate(\n                state,\n                args.accountOne,\n                args.market,\n                deltaWei\n            ),\n            getBalanceUpdate(\n                state,\n                args.accountTwo,\n                args.market,\n                deltaWei.negative()\n            )\n        );\n    }\n\n    function logBuy(\n        Storage.State storage state,\n        Actions.BuyArgs memory args,\n        Types.Wei memory takerWei,\n        Types.Wei memory makerWei\n    )\n        internal\n    {\n        emit LogBuy(\n            args.account.owner,\n            args.account.number,\n            args.takerMarket,\n            args.makerMarket,\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.takerMarket,\n                takerWei\n            ),\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.makerMarket,\n                makerWei\n            ),\n            args.exchangeWrapper\n        );\n    }\n\n    function logSell(\n        Storage.State storage state,\n        Actions.SellArgs memory args,\n        Types.Wei memory takerWei,\n        Types.Wei memory makerWei\n    )\n        internal\n    {\n        emit LogSell(\n            args.account.owner,\n            args.account.number,\n            args.takerMarket,\n            args.makerMarket,\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.takerMarket,\n                takerWei\n            ),\n            getBalanceUpdate(\n                state,\n                args.account,\n                args.makerMarket,\n                makerWei\n            ),\n            args.exchangeWrapper\n        );\n    }\n\n    function logTrade(\n        Storage.State storage state,\n        Actions.TradeArgs memory args,\n        Types.Wei memory inputWei,\n        Types.Wei memory outputWei\n    )\n        internal\n    {\n        BalanceUpdate[4] memory updates = [\n            getBalanceUpdate(\n                state,\n                args.takerAccount,\n                args.inputMarket,\n                inputWei.negative()\n            ),\n            getBalanceUpdate(\n                state,\n                args.takerAccount,\n                args.outputMarket,\n                outputWei.negative()\n            ),\n            getBalanceUpdate(\n                state,\n                args.makerAccount,\n                args.inputMarket,\n                inputWei\n            ),\n            getBalanceUpdate(\n                state,\n                args.makerAccount,\n                args.outputMarket,\n                outputWei\n            )\n        ];\n\n        emit LogTrade(\n            args.takerAccount.owner,\n            args.takerAccount.number,\n            args.makerAccount.owner,\n            args.makerAccount.number,\n            args.inputMarket,\n            args.outputMarket,\n            updates[0],\n            updates[1],\n            updates[2],\n            updates[3],\n            args.autoTrader\n        );\n    }\n\n    function logCall(\n        Actions.CallArgs memory args\n    )\n        internal\n    {\n        emit LogCall(\n            args.account.owner,\n            args.account.number,\n            args.callee\n        );\n    }\n\n    function logLiquidate(\n        Storage.State storage state,\n        Actions.LiquidateArgs memory args,\n        Types.Wei memory heldWei,\n        Types.Wei memory owedWei\n    )\n        internal\n    {\n        BalanceUpdate memory solidHeldUpdate = getBalanceUpdate(\n            state,\n            args.solidAccount,\n            args.heldMarket,\n            heldWei.negative()\n        );\n        BalanceUpdate memory solidOwedUpdate = getBalanceUpdate(\n            state,\n            args.solidAccount,\n            args.owedMarket,\n            owedWei.negative()\n        );\n        BalanceUpdate memory liquidHeldUpdate = getBalanceUpdate(\n            state,\n            args.liquidAccount,\n            args.heldMarket,\n            heldWei\n        );\n        BalanceUpdate memory liquidOwedUpdate = getBalanceUpdate(\n            state,\n            args.liquidAccount,\n            args.owedMarket,\n            owedWei\n        );\n\n        emit LogLiquidate(\n            args.solidAccount.owner,\n            args.solidAccount.number,\n            args.liquidAccount.owner,\n            args.liquidAccount.number,\n            args.heldMarket,\n            args.owedMarket,\n            solidHeldUpdate,\n            solidOwedUpdate,\n            liquidHeldUpdate,\n            liquidOwedUpdate\n        );\n    }\n\n    function logVaporize(\n        Storage.State storage state,\n        Actions.VaporizeArgs memory args,\n        Types.Wei memory heldWei,\n        Types.Wei memory owedWei,\n        Types.Wei memory excessWei\n    )\n        internal\n    {\n        BalanceUpdate memory solidHeldUpdate = getBalanceUpdate(\n            state,\n            args.solidAccount,\n            args.heldMarket,\n            heldWei.negative()\n        );\n        BalanceUpdate memory solidOwedUpdate = getBalanceUpdate(\n            state,\n            args.solidAccount,\n            args.owedMarket,\n            owedWei.negative()\n        );\n        BalanceUpdate memory vaporOwedUpdate = getBalanceUpdate(\n            state,\n            args.vaporAccount,\n            args.owedMarket,\n            owedWei.add(excessWei)\n        );\n\n        emit LogVaporize(\n            args.solidAccount.owner,\n            args.solidAccount.number,\n            args.vaporAccount.owner,\n            args.vaporAccount.number,\n            args.heldMarket,\n            args.owedMarket,\n            solidHeldUpdate,\n            solidOwedUpdate,\n            vaporOwedUpdate\n        );\n    }\n\n    // ============ Private Functions ============\n\n    function getBalanceUpdate(\n        Storage.State storage state,\n        Account.Info memory account,\n        uint256 market,\n        Types.Wei memory deltaWei\n    )\n        private\n        view\n        returns (BalanceUpdate memory)\n    {\n        return BalanceUpdate({\n            deltaWei: deltaWei,\n            newPar: state.getPar(account, market)\n        });\n    }\n}\n\n// File: contracts/protocol/interfaces/IExchangeWrapper.sol\n\n/**\n * @title IExchangeWrapper\n * @author dYdX\n *\n * Interface that Exchange Wrappers for Solo must implement in order to trade ERC20 tokens.\n */\ninterface IExchangeWrapper {\n\n    // ============ Public Functions ============\n\n    /**\n     * Exchange some amount of takerToken for makerToken.\n     *\n     * @param  tradeOriginator      Address of the initiator of the trade (however, this value\n     *                              cannot always be trusted as it is set at the discretion of the\n     *                              msg.sender)\n     * @param  receiver             Address to set allowance on once the trade has completed\n     * @param  makerToken           Address of makerToken, the token to receive\n     * @param  takerToken           Address of takerToken, the token to pay\n     * @param  requestedFillAmount  Amount of takerToken being paid\n     * @param  orderData            Arbitrary bytes data for any information to pass to the exchange\n     * @return                      The amount of makerToken received\n     */\n    function exchange(\n        address tradeOriginator,\n        address receiver,\n        address makerToken,\n        address takerToken,\n        uint256 requestedFillAmount,\n        bytes calldata orderData\n    )\n        external\n        returns (uint256);\n\n    /**\n     * Get amount of takerToken required to buy a certain amount of makerToken for a given trade.\n     * Should match the takerToken amount used in exchangeForAmount. If the order cannot provide\n     * exactly desiredMakerToken, then it must return the price to buy the minimum amount greater\n     * than desiredMakerToken\n     *\n     * @param  makerToken         Address of makerToken, the token to receive\n     * @param  takerToken         Address of takerToken, the token to pay\n     * @param  desiredMakerToken  Amount of makerToken requested\n     * @param  orderData          Arbitrary bytes data for any information to pass to the exchange\n     * @return                    Amount of takerToken the needed to complete the exchange\n     */\n    function getExchangeCost(\n        address makerToken,\n        address takerToken,\n        uint256 desiredMakerToken,\n        bytes calldata orderData\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// File: contracts/protocol/lib/Exchange.sol\n\n/**\n * @title Exchange\n * @author dYdX\n *\n * Library for transferring tokens and interacting with ExchangeWrappers by using the Wei struct\n */\nlibrary Exchange {\n    using Types for Types.Wei;\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"Exchange\";\n\n    // ============ Library Functions ============\n\n    function transferOut(\n        address token,\n        address to,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        Require.that(\n            !deltaWei.isPositive(),\n            FILE,\n            \"Cannot transferOut positive\",\n            deltaWei.value\n        );\n\n        Token.transfer(\n            token,\n            to,\n            deltaWei.value\n        );\n    }\n\n    function transferIn(\n        address token,\n        address from,\n        Types.Wei memory deltaWei\n    )\n        internal\n    {\n        Require.that(\n            !deltaWei.isNegative(),\n            FILE,\n            \"Cannot transferIn negative\",\n            deltaWei.value\n        );\n\n        Token.transferFrom(\n            token,\n            from,\n            address(this),\n            deltaWei.value\n        );\n    }\n\n    function getCost(\n        address exchangeWrapper,\n        address supplyToken,\n        address borrowToken,\n        Types.Wei memory desiredAmount,\n        bytes memory orderData\n    )\n        internal\n        view\n        returns (Types.Wei memory)\n    {\n        Require.that(\n            !desiredAmount.isNegative(),\n            FILE,\n            \"Cannot getCost negative\",\n            desiredAmount.value\n        );\n\n        Types.Wei memory result;\n        result.sign = false;\n        result.value = IExchangeWrapper(exchangeWrapper).getExchangeCost(\n            supplyToken,\n            borrowToken,\n            desiredAmount.value,\n            orderData\n        );\n\n        return result;\n    }\n\n    function exchange(\n        address exchangeWrapper,\n        address accountOwner,\n        address supplyToken,\n        address borrowToken,\n        Types.Wei memory requestedFillAmount,\n        bytes memory orderData\n    )\n        internal\n        returns (Types.Wei memory)\n    {\n        Require.that(\n            !requestedFillAmount.isPositive(),\n            FILE,\n            \"Cannot exchange positive\",\n            requestedFillAmount.value\n        );\n\n        transferOut(borrowToken, exchangeWrapper, requestedFillAmount);\n\n        Types.Wei memory result;\n        result.sign = true;\n        result.value = IExchangeWrapper(exchangeWrapper).exchange(\n            accountOwner,\n            address(this),\n            supplyToken,\n            borrowToken,\n            requestedFillAmount.value,\n            orderData\n        );\n\n        transferIn(supplyToken, exchangeWrapper, result);\n\n        return result;\n    }\n}\n\n// File: contracts/protocol/impl/OperationImpl.sol\n\n/**\n * @title OperationImpl\n * @author dYdX\n *\n * Logic for processing actions\n */\nlibrary OperationImpl {\n    using Cache for Cache.MarketCache;\n    using SafeMath for uint256;\n    using Storage for Storage.State;\n    using Types for Types.Par;\n    using Types for Types.Wei;\n\n    // ============ Constants ============\n\n    bytes32 constant FILE = \"OperationImpl\";\n\n    // ============ Public Functions ============\n\n    function operate(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        public\n    {\n        Events.logOperation();\n\n        _verifyInputs(accounts, actions);\n\n        (\n            bool[] memory primaryAccounts,\n            Cache.MarketCache memory cache\n        ) = _runPreprocessing(\n            state,\n            accounts,\n            actions\n        );\n\n        _runActions(\n            state,\n            accounts,\n            actions,\n            cache\n        );\n\n        _verifyFinalState(\n            state,\n            accounts,\n            primaryAccounts,\n            cache\n        );\n    }\n\n    // ============ Helper Functions ============\n\n    function _verifyInputs(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        private\n        pure\n    {\n        Require.that(\n            actions.length != 0,\n            FILE,\n            \"Cannot have zero actions\"\n        );\n\n        Require.that(\n            accounts.length != 0,\n            FILE,\n            \"Cannot have zero accounts\"\n        );\n\n        for (uint256 a = 0; a < accounts.length; a++) {\n            for (uint256 b = a + 1; b < accounts.length; b++) {\n                Require.that(\n                    !Account.equals(accounts[a], accounts[b]),\n                    FILE,\n                    \"Cannot duplicate accounts\",\n                    a,\n                    b\n                );\n            }\n        }\n    }\n\n    function _runPreprocessing(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        private\n        returns (\n            bool[] memory,\n            Cache.MarketCache memory\n        )\n    {\n        uint256 numMarkets = state.numMarkets;\n        bool[] memory primaryAccounts = new bool[](accounts.length);\n        Cache.MarketCache memory cache = Cache.create(numMarkets);\n\n        // keep track of primary accounts and indexes that need updating\n        for (uint256 i = 0; i < actions.length; i++) {\n            Actions.ActionArgs memory arg = actions[i];\n            Actions.ActionType actionType = arg.actionType;\n            Actions.MarketLayout marketLayout = Actions.getMarketLayout(actionType);\n            Actions.AccountLayout accountLayout = Actions.getAccountLayout(actionType);\n\n            // parse out primary accounts\n            if (accountLayout != Actions.AccountLayout.OnePrimary) {\n                Require.that(\n                    arg.accountId != arg.otherAccountId,\n                    FILE,\n                    \"Duplicate accounts in action\",\n                    i\n                );\n                if (accountLayout == Actions.AccountLayout.TwoPrimary) {\n                    primaryAccounts[arg.otherAccountId] = true;\n                } else {\n                    assert(accountLayout == Actions.AccountLayout.PrimaryAndSecondary);\n                    Require.that(\n                        !primaryAccounts[arg.otherAccountId],\n                        FILE,\n                        \"Requires non-primary account\",\n                        arg.otherAccountId\n                    );\n                }\n            }\n            primaryAccounts[arg.accountId] = true;\n\n            // keep track of indexes to update\n            if (marketLayout == Actions.MarketLayout.OneMarket) {\n                _updateMarket(state, cache, arg.primaryMarketId);\n            } else if (marketLayout == Actions.MarketLayout.TwoMarkets) {\n                Require.that(\n                    arg.primaryMarketId != arg.secondaryMarketId,\n                    FILE,\n                    \"Duplicate markets in action\",\n                    i\n                );\n                _updateMarket(state, cache, arg.primaryMarketId);\n                _updateMarket(state, cache, arg.secondaryMarketId);\n            } else {\n                assert(marketLayout == Actions.MarketLayout.ZeroMarkets);\n            }\n        }\n\n        // get any other markets for which an account has a balance\n        for (uint256 m = 0; m < numMarkets; m++) {\n            if (cache.hasMarket(m)) {\n                continue;\n            }\n            for (uint256 a = 0; a < accounts.length; a++) {\n                if (!state.getPar(accounts[a], m).isZero()) {\n                    _updateMarket(state, cache, m);\n                    break;\n                }\n            }\n        }\n\n        return (primaryAccounts, cache);\n    }\n\n    function _updateMarket(\n        Storage.State storage state,\n        Cache.MarketCache memory cache,\n        uint256 marketId\n    )\n        private\n    {\n        bool updated = cache.addMarket(state, marketId);\n        if (updated) {\n            Events.logIndexUpdate(marketId, state.updateIndex(marketId));\n        }\n    }\n\n    function _runActions(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions,\n        Cache.MarketCache memory cache\n    )\n        private\n    {\n        for (uint256 i = 0; i < actions.length; i++) {\n            Actions.ActionArgs memory action = actions[i];\n            Actions.ActionType actionType = action.actionType;\n\n            if (actionType == Actions.ActionType.Deposit) {\n                _deposit(state, Actions.parseDepositArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Withdraw) {\n                _withdraw(state, Actions.parseWithdrawArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Transfer) {\n                _transfer(state, Actions.parseTransferArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Buy) {\n                _buy(state, Actions.parseBuyArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Sell) {\n                _sell(state, Actions.parseSellArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Trade) {\n                _trade(state, Actions.parseTradeArgs(accounts, action));\n            }\n            else if (actionType == Actions.ActionType.Liquidate) {\n                _liquidate(state, Actions.parseLiquidateArgs(accounts, action), cache);\n            }\n            else if (actionType == Actions.ActionType.Vaporize) {\n                _vaporize(state, Actions.parseVaporizeArgs(accounts, action), cache);\n            }\n            else  {\n                assert(actionType == Actions.ActionType.Call);\n                _call(state, Actions.parseCallArgs(accounts, action));\n            }\n        }\n    }\n\n    function _verifyFinalState(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        bool[] memory primaryAccounts,\n        Cache.MarketCache memory cache\n    )\n        private\n    {\n        // verify no increase in borrowPar for closing markets\n        uint256 numMarkets = cache.getNumMarkets();\n        for (uint256 m = 0; m < numMarkets; m++) {\n            if (cache.getIsClosing(m)) {\n                Require.that(\n                    state.getTotalPar(m).borrow <= cache.getBorrowPar(m),\n                    FILE,\n                    \"Market is closing\",\n                    m\n                );\n            }\n        }\n\n        // verify account collateralization\n        for (uint256 a = 0; a < accounts.length; a++) {\n            Account.Info memory account = accounts[a];\n\n            // validate minBorrowedValue\n            bool collateralized = state.isCollateralized(account, cache, true);\n\n            // don't check collateralization for non-primary accounts\n            if (!primaryAccounts[a]) {\n                continue;\n            }\n\n            // check collateralization for primary accounts\n            Require.that(\n                collateralized,\n                FILE,\n                \"Undercollateralized account\",\n                account.owner,\n                account.number\n            );\n\n            // ensure status is normal for primary accounts\n            if (state.getStatus(account) != Account.Status.Normal) {\n                state.setStatus(account, Account.Status.Normal);\n            }\n        }\n    }\n\n    // ============ Action Functions ============\n\n    function _deposit(\n        Storage.State storage state,\n        Actions.DepositArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.account, msg.sender);\n\n        Require.that(\n            args.from == msg.sender || args.from == args.account.owner,\n            FILE,\n            \"Invalid deposit source\",\n            args.from\n        );\n\n        (\n            Types.Par memory newPar,\n            Types.Wei memory deltaWei\n        ) = state.getNewParAndDeltaWei(\n            args.account,\n            args.market,\n            args.amount\n        );\n\n        state.setPar(\n            args.account,\n            args.market,\n            newPar\n        );\n\n        // requires a positive deltaWei\n        Exchange.transferIn(\n            state.getToken(args.market),\n            args.from,\n            deltaWei\n        );\n\n        Events.logDeposit(\n            state,\n            args,\n            deltaWei\n        );\n    }\n\n    function _withdraw(\n        Storage.State storage state,\n        Actions.WithdrawArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.account, msg.sender);\n\n        (\n            Types.Par memory newPar,\n            Types.Wei memory deltaWei\n        ) = state.getNewParAndDeltaWei(\n            args.account,\n            args.market,\n            args.amount\n        );\n\n        state.setPar(\n            args.account,\n            args.market,\n            newPar\n        );\n\n        // requires a negative deltaWei\n        Exchange.transferOut(\n            state.getToken(args.market),\n            args.to,\n            deltaWei\n        );\n\n        Events.logWithdraw(\n            state,\n            args,\n            deltaWei\n        );\n    }\n\n    function _transfer(\n        Storage.State storage state,\n        Actions.TransferArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.accountOne, msg.sender);\n        state.requireIsOperator(args.accountTwo, msg.sender);\n\n        (\n            Types.Par memory newPar,\n            Types.Wei memory deltaWei\n        ) = state.getNewParAndDeltaWei(\n            args.accountOne,\n            args.market,\n            args.amount\n        );\n\n        state.setPar(\n            args.accountOne,\n            args.market,\n            newPar\n        );\n\n        state.setParFromDeltaWei(\n            args.accountTwo,\n            args.market,\n            deltaWei.negative()\n        );\n\n        Events.logTransfer(\n            state,\n            args,\n            deltaWei\n        );\n    }\n\n    function _buy(\n        Storage.State storage state,\n        Actions.BuyArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.account, msg.sender);\n\n        address takerToken = state.getToken(args.takerMarket);\n        address makerToken = state.getToken(args.makerMarket);\n\n        (\n            Types.Par memory makerPar,\n            Types.Wei memory makerWei\n        ) = state.getNewParAndDeltaWei(\n            args.account,\n            args.makerMarket,\n            args.amount\n        );\n\n        Types.Wei memory takerWei = Exchange.getCost(\n            args.exchangeWrapper,\n            makerToken,\n            takerToken,\n            makerWei,\n            args.orderData\n        );\n\n        Types.Wei memory tokensReceived = Exchange.exchange(\n            args.exchangeWrapper,\n            args.account.owner,\n            makerToken,\n            takerToken,\n            takerWei,\n            args.orderData\n        );\n\n        Require.that(\n            tokensReceived.value >= makerWei.value,\n            FILE,\n            \"Buy amount less than promised\",\n            tokensReceived.value,\n            makerWei.value\n        );\n\n        state.setPar(\n            args.account,\n            args.makerMarket,\n            makerPar\n        );\n\n        state.setParFromDeltaWei(\n            args.account,\n            args.takerMarket,\n            takerWei\n        );\n\n        Events.logBuy(\n            state,\n            args,\n            takerWei,\n            makerWei\n        );\n    }\n\n    function _sell(\n        Storage.State storage state,\n        Actions.SellArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.account, msg.sender);\n\n        address takerToken = state.getToken(args.takerMarket);\n        address makerToken = state.getToken(args.makerMarket);\n\n        (\n            Types.Par memory takerPar,\n            Types.Wei memory takerWei\n        ) = state.getNewParAndDeltaWei(\n            args.account,\n            args.takerMarket,\n            args.amount\n        );\n\n        Types.Wei memory makerWei = Exchange.exchange(\n            args.exchangeWrapper,\n            args.account.owner,\n            makerToken,\n            takerToken,\n            takerWei,\n            args.orderData\n        );\n\n        state.setPar(\n            args.account,\n            args.takerMarket,\n            takerPar\n        );\n\n        state.setParFromDeltaWei(\n            args.account,\n            args.makerMarket,\n            makerWei\n        );\n\n        Events.logSell(\n            state,\n            args,\n            takerWei,\n            makerWei\n        );\n    }\n\n    function _trade(\n        Storage.State storage state,\n        Actions.TradeArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.takerAccount, msg.sender);\n        state.requireIsOperator(args.makerAccount, args.autoTrader);\n\n        Types.Par memory oldInputPar = state.getPar(\n            args.makerAccount,\n            args.inputMarket\n        );\n        (\n            Types.Par memory newInputPar,\n            Types.Wei memory inputWei\n        ) = state.getNewParAndDeltaWei(\n            args.makerAccount,\n            args.inputMarket,\n            args.amount\n        );\n\n        Types.AssetAmount memory outputAmount = IAutoTrader(args.autoTrader).getTradeCost(\n            args.inputMarket,\n            args.outputMarket,\n            args.makerAccount,\n            args.takerAccount,\n            oldInputPar,\n            newInputPar,\n            inputWei,\n            args.tradeData\n        );\n\n        (\n            Types.Par memory newOutputPar,\n            Types.Wei memory outputWei\n        ) = state.getNewParAndDeltaWei(\n            args.makerAccount,\n            args.outputMarket,\n            outputAmount\n        );\n\n        Require.that(\n            outputWei.isZero() || inputWei.isZero() || outputWei.sign != inputWei.sign,\n            FILE,\n            \"Trades cannot be one-sided\"\n        );\n\n        // set the balance for the maker\n        state.setPar(\n            args.makerAccount,\n            args.inputMarket,\n            newInputPar\n        );\n        state.setPar(\n            args.makerAccount,\n            args.outputMarket,\n            newOutputPar\n        );\n\n        // set the balance for the taker\n        state.setParFromDeltaWei(\n            args.takerAccount,\n            args.inputMarket,\n            inputWei.negative()\n        );\n        state.setParFromDeltaWei(\n            args.takerAccount,\n            args.outputMarket,\n            outputWei.negative()\n        );\n\n        Events.logTrade(\n            state,\n            args,\n            inputWei,\n            outputWei\n        );\n    }\n\n    function _liquidate(\n        Storage.State storage state,\n        Actions.LiquidateArgs memory args,\n        Cache.MarketCache memory cache\n    )\n        private\n    {\n        state.requireIsOperator(args.solidAccount, msg.sender);\n\n        // verify liquidatable\n        if (Account.Status.Liquid != state.getStatus(args.liquidAccount)) {\n            Require.that(\n                !state.isCollateralized(args.liquidAccount, cache, /* requireMinBorrow = */ false),\n                FILE,\n                \"Unliquidatable account\",\n                args.liquidAccount.owner,\n                args.liquidAccount.number\n            );\n            state.setStatus(args.liquidAccount, Account.Status.Liquid);\n        }\n\n        Types.Wei memory maxHeldWei = state.getWei(\n            args.liquidAccount,\n            args.heldMarket\n        );\n\n        Require.that(\n            !maxHeldWei.isNegative(),\n            FILE,\n            \"Collateral cannot be negative\",\n            args.liquidAccount.owner,\n            args.liquidAccount.number,\n            args.heldMarket\n        );\n\n        (\n            Types.Par memory owedPar,\n            Types.Wei memory owedWei\n        ) = state.getNewParAndDeltaWeiForLiquidation(\n            args.liquidAccount,\n            args.owedMarket,\n            args.amount\n        );\n\n        (\n            Monetary.Price memory heldPrice,\n            Monetary.Price memory owedPrice\n        ) = _getLiquidationPrices(\n            state,\n            cache,\n            args.heldMarket,\n            args.owedMarket\n        );\n\n        Types.Wei memory heldWei = _owedWeiToHeldWei(owedWei, heldPrice, owedPrice);\n\n        // if attempting to over-borrow the held asset, bound it by the maximum\n        if (heldWei.value > maxHeldWei.value) {\n            heldWei = maxHeldWei.negative();\n            owedWei = _heldWeiToOwedWei(heldWei, heldPrice, owedPrice);\n\n            state.setPar(\n                args.liquidAccount,\n                args.heldMarket,\n                Types.zeroPar()\n            );\n            state.setParFromDeltaWei(\n                args.liquidAccount,\n                args.owedMarket,\n                owedWei\n            );\n        } else {\n            state.setPar(\n                args.liquidAccount,\n                args.owedMarket,\n                owedPar\n            );\n            state.setParFromDeltaWei(\n                args.liquidAccount,\n                args.heldMarket,\n                heldWei\n            );\n        }\n\n        // set the balances for the solid account\n        state.setParFromDeltaWei(\n            args.solidAccount,\n            args.owedMarket,\n            owedWei.negative()\n        );\n        state.setParFromDeltaWei(\n            args.solidAccount,\n            args.heldMarket,\n            heldWei.negative()\n        );\n\n        Events.logLiquidate(\n            state,\n            args,\n            heldWei,\n            owedWei\n        );\n    }\n\n    function _vaporize(\n        Storage.State storage state,\n        Actions.VaporizeArgs memory args,\n        Cache.MarketCache memory cache\n    )\n        private\n    {\n        state.requireIsOperator(args.solidAccount, msg.sender);\n\n        // verify vaporizable\n        if (Account.Status.Vapor != state.getStatus(args.vaporAccount)) {\n            Require.that(\n                state.isVaporizable(args.vaporAccount, cache),\n                FILE,\n                \"Unvaporizable account\",\n                args.vaporAccount.owner,\n                args.vaporAccount.number\n            );\n            state.setStatus(args.vaporAccount, Account.Status.Vapor);\n        }\n\n        // First, attempt to refund using the same token\n        (\n            bool fullyRepaid,\n            Types.Wei memory excessWei\n        ) = _vaporizeUsingExcess(state, args);\n        if (fullyRepaid) {\n            Events.logVaporize(\n                state,\n                args,\n                Types.zeroWei(),\n                Types.zeroWei(),\n                excessWei\n            );\n            return;\n        }\n\n        Types.Wei memory maxHeldWei = state.getNumExcessTokens(args.heldMarket);\n\n        Require.that(\n            !maxHeldWei.isNegative(),\n            FILE,\n            \"Excess cannot be negative\",\n            args.heldMarket\n        );\n\n        (\n            Types.Par memory owedPar,\n            Types.Wei memory owedWei\n        ) = state.getNewParAndDeltaWeiForLiquidation(\n            args.vaporAccount,\n            args.owedMarket,\n            args.amount\n        );\n\n        (\n            Monetary.Price memory heldPrice,\n            Monetary.Price memory owedPrice\n        ) = _getLiquidationPrices(\n            state,\n            cache,\n            args.heldMarket,\n            args.owedMarket\n        );\n\n        Types.Wei memory heldWei = _owedWeiToHeldWei(owedWei, heldPrice, owedPrice);\n\n        // if attempting to over-borrow the held asset, bound it by the maximum\n        if (heldWei.value > maxHeldWei.value) {\n            heldWei = maxHeldWei.negative();\n            owedWei = _heldWeiToOwedWei(heldWei, heldPrice, owedPrice);\n\n            state.setParFromDeltaWei(\n                args.vaporAccount,\n                args.owedMarket,\n                owedWei\n            );\n        } else {\n            state.setPar(\n                args.vaporAccount,\n                args.owedMarket,\n                owedPar\n            );\n        }\n\n        // set the balances for the solid account\n        state.setParFromDeltaWei(\n            args.solidAccount,\n            args.owedMarket,\n            owedWei.negative()\n        );\n        state.setParFromDeltaWei(\n            args.solidAccount,\n            args.heldMarket,\n            heldWei.negative()\n        );\n\n        Events.logVaporize(\n            state,\n            args,\n            heldWei,\n            owedWei,\n            excessWei\n        );\n    }\n\n    function _call(\n        Storage.State storage state,\n        Actions.CallArgs memory args\n    )\n        private\n    {\n        state.requireIsOperator(args.account, msg.sender);\n\n        ICallee(args.callee).callFunction(\n            msg.sender,\n            args.account,\n            args.data\n        );\n\n        Events.logCall(args);\n    }\n\n    // ============ Private Functions ============\n\n    /**\n     * For the purposes of liquidation or vaporization, get the value-equivalent amount of heldWei\n     * given owedWei and the (spread-adjusted) prices of each asset.\n     */\n    function _owedWeiToHeldWei(\n        Types.Wei memory owedWei,\n        Monetary.Price memory heldPrice,\n        Monetary.Price memory owedPrice\n    )\n        private\n        pure\n        returns (Types.Wei memory)\n    {\n        return Types.Wei({\n            sign: false,\n            value: Math.getPartial(owedWei.value, owedPrice.value, heldPrice.value)\n        });\n    }\n\n    /**\n     * For the purposes of liquidation or vaporization, get the value-equivalent amount of owedWei\n     * given heldWei and the (spread-adjusted) prices of each asset.\n     */\n    function _heldWeiToOwedWei(\n        Types.Wei memory heldWei,\n        Monetary.Price memory heldPrice,\n        Monetary.Price memory owedPrice\n    )\n        private\n        pure\n        returns (Types.Wei memory)\n    {\n        return Types.Wei({\n            sign: true,\n            value: Math.getPartialRoundUp(heldWei.value, heldPrice.value, owedPrice.value)\n        });\n    }\n\n    /**\n     * Attempt to vaporize an account's balance using the excess tokens in the protocol. Return a\n     * bool and a wei value. The boolean is true if and only if the balance was fully vaporized. The\n     * Wei value is how many excess tokens were used to partially or fully vaporize the account's\n     * negative balance.\n     */\n    function _vaporizeUsingExcess(\n        Storage.State storage state,\n        Actions.VaporizeArgs memory args\n    )\n        internal\n        returns (bool, Types.Wei memory)\n    {\n        Types.Wei memory excessWei = state.getNumExcessTokens(args.owedMarket);\n\n        // There are no excess funds, return zero\n        if (!excessWei.isPositive()) {\n            return (false, Types.zeroWei());\n        }\n\n        Types.Wei memory maxRefundWei = state.getWei(args.vaporAccount, args.owedMarket);\n        maxRefundWei.sign = true;\n\n        // The account is fully vaporizable using excess funds\n        if (excessWei.value >= maxRefundWei.value) {\n            state.setPar(\n                args.vaporAccount,\n                args.owedMarket,\n                Types.zeroPar()\n            );\n            return (true, maxRefundWei);\n        }\n\n        // The account is only partially vaporizable using excess funds\n        else {\n            state.setParFromDeltaWei(\n                args.vaporAccount,\n                args.owedMarket,\n                excessWei\n            );\n            return (false, excessWei);\n        }\n    }\n\n    /**\n     * Return the (spread-adjusted) prices of two assets for the purposes of liquidation or\n     * vaporization.\n     */\n    function _getLiquidationPrices(\n        Storage.State storage state,\n        Cache.MarketCache memory cache,\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    )\n        internal\n        view\n        returns (\n            Monetary.Price memory,\n            Monetary.Price memory\n        )\n    {\n        uint256 originalPrice = cache.getPrice(owedMarketId).value;\n        Decimal.D256 memory spread = state.getLiquidationSpreadForPair(\n            heldMarketId,\n            owedMarketId\n        );\n\n        Monetary.Price memory owedPrice = Monetary.Price({\n            value: originalPrice.add(Decimal.mul(originalPrice, spread))\n        });\n\n        return (cache.getPrice(heldMarketId), owedPrice);\n    }\n}",
  "bytecode": "615fd962000027600b82828239805160001a60731461001a57fe5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610051577c01000000000000000000000000000000000000000000000000000000006000350463bd76ecfd8114610056575b600080fd5b81801561006257600080fd5b506100766100713660046155ed565b610078565b005b6100806100c2565b61008a82826100fb565b6060610094614f5a565b61009f858585610248565b915091506100af85858584610594565b6100bb85858484610735565b5050505050565b7f91b01baeee3a24b590d112613814d86801005c7ef9353e7fc1eaeaf33ccf83b0336040516100f191906159d0565b60405180910390a1565b61014b8151600014157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f43616e6e6f742068617665207a65726f20616374696f6e7300000000000000006108fc565b61019b8251600014157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f43616e6e6f742068617665207a65726f206163636f756e7473000000000000006108fc565b60005b825181101561024357600181015b835181101561023a576102326101e88584815181106101c757fe5b60200260200101518684815181106101db57fe5b60200260200101516109ad565b157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f43616e6e6f74206475706c6963617465206163636f756e74730000000000000085856109eb565b6001016101ac565b5060010161019e565b505050565b6060610252614f5a565b845484516040805182815260208084028201019091526060918015610281578160200160208202803883390190505b50905061028c614f5a565b61029583610aaf565b905060005b86518110156104fe576102ab614f6d565b8782815181106102b757fe5b6020026020010151905060008160000151905060006102d582610b07565b905060006102e283610b74565b905060008160028111156102f257fe5b146104065761034e8460c00151856020015114157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f4475706c6963617465206163636f756e747320696e20616374696f6e0000000088610be2565b600181600281111561035c57fe5b1415610389576001878560c001518151811061037457fe5b91151560209283029190910190910152610406565b600281600281111561039757fe5b1461039e57fe5b610406878560c00151815181106103b157fe5b6020026020010151157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f5265717569726573206e6f6e2d7072696d617279206163636f756e74000000008760c00151610be2565b60018785602001518151811061041857fe5b91151560209283029190910190910152600182600281111561043657fe5b14156104505761044b8d878660600151610c80565b6104ee565b600282600281111561045e57fe5b14156104d9576104bb8460800151856060015114157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f4475706c6963617465206d61726b65747320696e20616374696f6e000000000088610be2565b6104ca8d878660600151610c80565b61044b8d878660800151610c80565b60008260028111156104e757fe5b146104ee57fe5b50506001909201915061029a9050565b5060005b838110156105865761051a828263ffffffff610cb416565b156105245761057e565b60005b885181101561057c5761056061055b8a838151811061054257fe5b6020026020010151848d610ce29092919063ffffffff16565b610d5e565b6105745761056f8a8484610c80565b61057c565b600101610527565b505b600101610502565b509097909650945050505050565b60005b82518110156100bb576105a8614f6d565b8382815181106105b457fe5b6020908102919091010151805190915060008160088111156105d257fe5b14156105f0576105eb876105e68885610d78565b610df9565b61072b565b60018160088111156105fe57fe5b1415610617576105eb876106128885610f41565b610f50565b600281600881111561062557fe5b141561063e576105eb876106398885610fe9565b611066565b600381600881111561064c57fe5b1415610665576105eb876106608885611116565b6111ab565b600481600881111561067357fe5b141561068c576105eb876106878885611320565b61132f565b600581600881111561069a57fe5b14156106b3576105eb876106ae8885611426565b611486565b60068160088111156106c157fe5b14156106db576105eb876106d5888561170a565b86611792565b60078160088111156106e957fe5b1415610703576105eb876106fd8885611a57565b86611a66565b600881600881111561071157fe5b1461071857fe5b61072b876107268885611d13565b611d89565b5050600101610597565b600061074082611e3b565b905060005b818110156107fc5761075d838263ffffffff611e4016565b156107f4576107f4610775848363ffffffff611e6616565b6fffffffffffffffffffffffffffffffff16610797888463ffffffff611e8c16565b516fffffffffffffffffffffffffffffffff1611157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f4d61726b657420697320636c6f73696e6700000000000000000000000000000084610be2565b600101610745565b5060005b84518110156108f457610811614fcc565b85828151811061081d57fe5b60209081029190910101519050600061083f888387600163ffffffff611eec16565b905085838151811061084d57fe5b60200260200101516108605750506108ec565b6108b5817f4f7065726174696f6e496d706c000000000000000000000000000000000000007f556e646572636f6c6c61746572616c697a6564206163636f756e74000000000085600001518660200151611fd8565b60006108c7898463ffffffff61203a16565b60028111156108d257fe5b146108e9576108e98883600063ffffffff61207c16565b50505b600101610800565b505050505050565b826102435761090a826120f9565b7f3a20000000000000000000000000000000000000000000000000000000000000610934836120f9565b60405160200161094693929190615826565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526109a491600401615af7565b60405180910390fd5b8051825160009173ffffffffffffffffffffffffffffffffffffffff91821691161480156109e2575081602001518360200151145b90505b92915050565b846100bb576109f9846120f9565b7f3a20000000000000000000000000000000000000000000000000000000000000610a23856120f9565b7f203c000000000000000000000000000000000000000000000000000000000000610a4d866121f8565b7f2c20000000000000000000000000000000000000000000000000000000000000610a77876121f8565b60405161094697969594939291907f3e00000000000000000000000000000000000000000000000000000000000000906020016158ac565b610ab7614f5a565b604051806020016040528083604051908082528060200260200182016040528015610afc57816020015b610ae9614fe3565b815260200190600190039081610ae15790505b50905290505b919050565b600080826008811115610b1657fe5b1480610b2d57506001826008811115610b2b57fe5b145b80610b4357506002826008811115610b4157fe5b145b15610b5057506001610b02565b6008826008811115610b5e57fe5b1415610b6c57506000610b02565b506002919050565b60006002826008811115610b8457fe5b1480610b9b57506005826008811115610b9957fe5b145b15610ba857506001610b02565b6006826008811115610bb657fe5b1480610bcd57506007826008811115610bcb57fe5b145b15610bda57506002610b02565b506000919050565b83610c7a57610bf0836120f9565b7f3a20000000000000000000000000000000000000000000000000000000000000610c1a846120f9565b7f203c000000000000000000000000000000000000000000000000000000000000610c44856121f8565b6040516109469594939291907f3e000000000000000000000000000000000000000000000000000000000000009060200161584e565b50505050565b6000610c9383858463ffffffff61232616565b90508015610c7a57610c7a82610caf868263ffffffff61240016565b612563565b600082600001518281518110610cc657fe5b6020026020010151604001516000015160001415905092915050565b610cea614fcc565b50815173ffffffffffffffffffffffffffffffffffffffff1660009081526002840160209081526040808320828601518452825280832084845282529182902082518084019093525460ff81161515835261010090046fffffffffffffffffffffffffffffffff16908201525b9392505050565b602001516fffffffffffffffffffffffffffffffff161590565b610d80615007565b60005b82516008811115610d9057fe5b14610d9757fe5b60405180608001604052808360400151815260200184846020015181518110610dbc57fe5b60200260200101518152602001836060015181526020018360a0015173ffffffffffffffffffffffffffffffffffffffff16815250905092915050565b6020810151610e109083903363ffffffff61259f16565b6060810151610ebf9073ffffffffffffffffffffffffffffffffffffffff16331480610e73575081602001516000015173ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16145b7f4f7065726174696f6e496d706c000000000000000000000000000000000000007f496e76616c6964206465706f73697420736f7572636500000000000000000000846060015161264e565b610ec7614fcc565b610ecf614fcc565b602083015160408401518451610eee928792909163ffffffff6126b016565b91509150610f11836020015184604001518487612866909392919063ffffffff16565b610f36610f2b846040015186612b2190919063ffffffff16565b846060015183612b4d565b610c7a848483612bb6565b610f49615007565b6001610d83565b6020810151610f679083903363ffffffff61259f16565b610f6f614fcc565b610f77614fcc565b602083015160408401518451610f96928792909163ffffffff6126b016565b91509150610fb9836020015184604001518487612866909392919063ffffffff16565b610fde610fd3846040015186612b2190919063ffffffff16565b846060015183612c31565b610c7a848483612c99565b610ff161503c565b60028251600881111561100057fe5b1461100757fe5b6040518060800160405280836040015181526020018484602001518151811061102c57fe5b60200260200101518152602001848460c001518151811061104957fe5b602002602001015181526020018360600151815250905092915050565b602081015161107d9083903363ffffffff61259f16565b60408101516110949083903363ffffffff61259f16565b61109c614fcc565b6110a4614fcc565b6020830151606084015184516110c3928792909163ffffffff6126b016565b915091506110e6836020015184606001518487612866909392919063ffffffff16565b61110b836040015184606001516110fc84612cf2565b8792919063ffffffff612d1916565b610c7a848483612da1565b61111e615077565b60035b8251600881111561112e57fe5b1461113557fe5b6040518060c00160405280836040015181526020018484602001518151811061115a57fe5b6020026020010151815260200183606001518152602001836080015181526020018360a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018360e00151815250905092915050565b60208101516111c29083903363ffffffff61259f16565b60006111db826060015184612b2190919063ffffffff16565b905060006111f6836040015185612b2190919063ffffffff16565b9050611200614fcc565b611208614fcc565b602085015160408601518651611227928992909163ffffffff6126b016565b91509150611233614fcc565b61124886608001518587858a60a00151612e45565b9050611252614fcc565b61127087608001518860200151600001518789868c60a00151612f6f565b90506112d28360200151826020015110157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f42757920616d6f756e74206c657373207468616e2070726f6d69736564000000846020015187602001516109eb565b602087015160408801516112ee918a918763ffffffff61286616565b6020870151606088015161130a918a918563ffffffff612d1916565b611316888884866130b6565b5050505050505050565b611328615077565b6004611121565b60208101516113469083903363ffffffff61259f16565b600061135f826040015184612b2190919063ffffffff16565b9050600061137a836060015185612b2190919063ffffffff16565b9050611384614fcc565b61138c614fcc565b6020850151604086015186516113ab928992909163ffffffff6126b016565b915091506113b7614fcc565b6113d586608001518760200151600001518688868b60a00151612f6f565b602087015160408801519192506113f5918991908663ffffffff61286616565b602086015160608701516114119189918463ffffffff612d1916565b61141d8787848461314d565b50505050505050565b61142e6150d0565b60058251600881111561143d57fe5b1461144457fe5b6040518060e00160405280836040015181526020018484602001518151811061146957fe5b60200260200101518152602001848460c001518151811061115a57fe5b602081015161149d9083903363ffffffff61259f16565b604081015160a08201516114b891849163ffffffff61259f16565b6114c0614fcc565b604082015160608301516114db91859163ffffffff610ce216565b90506114e5614fcc565b6114ed614fcc565b60408401516060850151855161150c928892909163ffffffff6126b016565b915091506115186150f1565b8460a0015173ffffffffffffffffffffffffffffffffffffffff1663448f706586606001518760800151886040015189602001518989898d60c001516040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611593989796959493929190615b66565b608060405180830381600087803b1580156115ad57600080fd5b505af11580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e591908101906155b1565b90506115ef614fcc565b6115f7614fcc565b60408701516080880151611613918a918663ffffffff6126b016565b9150915061168b611623826131bf565b806116325750611632856131bf565b80611644575084518251151590151514155b7f4f7065726174696f6e496d706c000000000000000000000000000000000000007f5472616465732063616e6e6f74206265206f6e652d73696465640000000000006108fc565b604087015160608801516116a7918a918863ffffffff61286616565b604087015160808801516116c3918a918563ffffffff61286616565b6116e8876020015188606001516116d987612cf2565b8b92919063ffffffff612d1916565b6116fe876020015188608001516116d984612cf2565b611316888886846131c7565b611712615112565b60065b8251600881111561172257fe5b1461172957fe5b6040518060a00160405280836040015181526020018484602001518151811061174e57fe5b60200260200101518152602001848460c001518151811061176b57fe5b60200260200101518152602001836060015181526020018360800151815250905092915050565b60208201516117a99084903363ffffffff61259f16565b60408201516117bf90849063ffffffff61203a16565b60028111156117ca57fe5b600114611860576040820151611848906117ee90859084600063ffffffff611eec16565b157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f556e6c6971756964617461626c65206163636f756e7400000000000000000000856040015160000151866040015160200151611fd8565b6040820151611860908490600163ffffffff61207c16565b611868614fcc565b6040830151608084015161188391869163ffffffff6132ef16565b90506118f061189182613354565b157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f436f6c6c61746572616c2063616e6e6f74206265206e65676174697665000000866040015160000151876040015160200151886080015161336b565b6118f8614fcc565b611900614fcc565b60408501516060860151865161191f928992909163ffffffff61345b16565b9150915061192b615154565b611933615154565b611947888789608001518a60600151613604565b91509150611953614fcc565b61195e848484613693565b90508560200151816020015111156119cd5761197986612cf2565b90506119868184846136d0565b93506119ac8860400151896080015161199d613703565b8c92919063ffffffff61286616565b604088015160608901516119c8918b918763ffffffff612d1916565b611a05565b604088015160608901516119e9918b918863ffffffff61286616565b60408801516080890151611a05918b918463ffffffff612d1916565b611a2a88602001518960600151611a1b87612cf2565b8c92919063ffffffff612d1916565b611a4088602001518960800151611a1b84612cf2565b611a4c89898387613723565b505050505050505050565b611a5f615112565b6007611715565b6020820151611a7d9084903363ffffffff61259f16565b6040820151611a9390849063ffffffff61203a16565b6002811115611a9e57fe5b600214611b2e576040820151611b1690611ac09085908463ffffffff61384616565b604084015180516020909101517f4f7065726174696f6e496d706c00000000000000000000000000000000000000917f556e7661706f72697a61626c65206163636f756e74000000000000000000000091611fd8565b6040820151611b2e908490600263ffffffff61207c16565b6000611b38614fcc565b611b4285856138d5565b915091508115611b6e57611b678585611b59613703565b611b61613703565b856139b5565b5050610243565b611b76614fcc565b6080850151611b8c90879063ffffffff613ab216565b9050611be7611b9a82613354565b157f4f7065726174696f6e496d706c000000000000000000000000000000000000007f4578636573732063616e6e6f74206265206e65676174697665000000000000008860800151610be2565b611bef614fcc565b611bf7614fcc565b604087015160608801518851611c16928b92909163ffffffff61345b16565b91509150611c22615154565b611c2a615154565b611c3e8a898b608001518c60600151613604565b91509150611c4a614fcc565b611c55848484613693565b9050856020015181602001511115611ca257611c7086612cf2565b9050611c7d8184846136d0565b60408b015160608c0151919550611c9d918d91908763ffffffff612d1916565b611cbe565b60408a015160608b0151611cbe918d918863ffffffff61286616565b611ce38a602001518b60600151611cd487612cf2565b8e92919063ffffffff612d1916565b611cf98a602001518b60800151611cd484612cf2565b611d068b8b83878b6139b5565b5050505050505050505050565b611d1b615167565b600882516008811115611d2a57fe5b14611d3157fe5b604051806060016040528084846020015181518110611d4c57fe5b602002602001015181526020018360a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018360e00151815250905092915050565b8051611d9d9083903363ffffffff61259f16565b6020810151815160408084015190517f8b41871300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90931692638b41871392611dfc9233926004016159de565b600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b50505050611e3781613b6c565b5050565b515190565b600082600001518281518110611e5257fe5b602002602001015160000151905092915050565b600082600001518281518110611e7857fe5b602002602001015160200151905092915050565b611e94614fcc565b506000818152600180840160209081526040928390208351808501909452909101546fffffffffffffffffffffffffffffffff8082168452700100000000000000000000000000000000909104169082015292915050565b6000611ef6615154565b611efe615154565b611f11878787600163ffffffff613bcd16565b80519193509150611f2757600192505050611fd0565b8315611f8e576008870154815187516020890151611f8e93831015927f53746f7261676500000000000000000000000000000000000000000000000000927f426f72726f772076616c756520746f6f206c6f7700000000000000000000000092909161336b565b8051604080516020810190915260058901548152600091611fae91613d20565b8251909150611fc3908263ffffffff613d3916565b8360000151101593505050505b949350505050565b846100bb57611fe6846120f9565b7f3a20000000000000000000000000000000000000000000000000000000000000612010856120f9565b7f203c000000000000000000000000000000000000000000000000000000000000610a4d86613d4b565b805173ffffffffffffffffffffffffffffffffffffffff1660009081526002929092016020908152604080842092820151845291905290206001015460ff1690565b815173ffffffffffffffffffffffffffffffffffffffff16600090815260028085016020908152604080842082870151855290915290912060019081018054849391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009091169184908111156120ef57fe5b0217905550505050565b6060808260405160200161210d9190615811565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060205b80156121dd5781517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091019082908290811061217957fe5b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff0000000000000000000000000000000000000000000000000000000000000016156121d85760010181529050610b02565b612140565b5060408051600080825260208201909252905b509392505050565b606081612239575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610b02565b8160005b811561225157600101600a8204915061223d565b6060816040519080825280601f01601f19166020018201604052801561227e576020820181803883390190505b508593509050815b801561231d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600a84066030017f0100000000000000000000000000000000000000000000000000000000000000028282815181106122e357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84049350612286565b50949350505050565b6000612338848363ffffffff610cb416565b1561234557506000610d57565b612355838363ffffffff613efe16565b845180518490811061236357fe5b602090810291909101810151604090810192909252600084815260018601909152206007015460ff16156123f6576001846000015183815181106123a357fe5b602090810291909101015190151590526123c3838363ffffffff611e8c16565b5184518051849081106123d257fe5b6020908102919091018101516fffffffffffffffffffffffffffffffff9092169101525b5060019392505050565b61240861518e565b61241061518e565b612420848463ffffffff61403f16565b905061242a6140c3565b63ffffffff16816040015163ffffffff1614156124485790506109e5565b61245984848363ffffffff6140d316565b6000938452600194909401602090815260409384902085516002909101805487840151978701517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009091166bffffffffffffffffffffffff938416177fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff166c010000000000000000000000009884168902177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000063ffffffff9283168102919091179283905587516060810189528385168152988304909316938801939093520416928401929092525090919050565b817ff4626fd1187f91e6761ffb8a6ac3e8d9235a4a92da54e43feb0c57c4a4a322ab826040516125939190615b08565b60405180910390a25050565b6000826000015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806125ea57506125ea848363ffffffff61412216565b80612604575082516126049085908463ffffffff61415116565b9050610c7a817f53746f72616765000000000000000000000000000000000000000000000000007f556e7065726d697373696f6e6564206f70657261746f72000000000000000000855b83610c7a5761265c836120f9565b7f3a20000000000000000000000000000000000000000000000000000000000000612686846120f9565b7f203c000000000000000000000000000000000000000000000000000000000000610c4485613d4b565b6126b8614fcc565b6126c0614fcc565b6126c8614fcc565b6126d987878763ffffffff610ce216565b9050836060015160001480156126fe57506000846040015160018111156126fc57fe5b145b15612716578061270c613703565b925092505061285d565b61271e61518e565b61272e888763ffffffff61403f16565b9050612738614fcc565b612742838361418e565b905061274c614fcc565b612754614fcc565b60008860200151600181111561276657fe5b14156127d25750604080518082019091528751151581526060880151602082015260018860400151600181111561279957fe5b14156127b2576127af818463ffffffff61423f16565b90505b6127cb6127c5848363ffffffff61425416565b856142e6565b9150612854565b60405180604001604052808960000151151581526020016127f68a606001516143a9565b6fffffffffffffffffffffffffffffffff169052915060008860400151600181111561281e57fe5b141561283757612834858363ffffffff61440b16565b91505b61285183612845848761418e565b9063ffffffff61423f16565b90505b90955093505050505b94509492505050565b61286e614fcc565b61287f85858563ffffffff610ce216565b905061288b8183614530565b156128965750610c7a565b61289e614fcc565b6128ae868563ffffffff611e8c16565b82519091501561291b576128ff6128fa83602001516fffffffffffffffffffffffffffffffff1683602001516fffffffffffffffffffffffffffffffff166145a290919063ffffffff16565b6143a9565b6fffffffffffffffffffffffffffffffff166020820152612960565b6020820151815161294b916128fa916fffffffffffffffffffffffffffffffff908116911663ffffffff6145a216565b6fffffffffffffffffffffffffffffffff1681525b8251156129c5576129a96128fa84602001516fffffffffffffffffffffffffffffffff1683602001516fffffffffffffffffffffffffffffffff16613d3990919063ffffffff16565b6fffffffffffffffffffffffffffffffff166020820152612a0a565b602083015181516129f5916128fa916fffffffffffffffffffffffffffffffff908116911663ffffffff613d3916565b6fffffffffffffffffffffffffffffffff1681525b6000848152600180880160209081526040808420855193018054958301516fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029481167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090971696909617861693909317909255875173ffffffffffffffffffffffffffffffffffffffff1683526002890181528183208882015184528152818320878452815291208451815492860151909316610100027fffffffffffffffffffffffffffffff00000000000000000000000000000000ff9315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090931692909217929092161790555050505050565b6000908152600191909101602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b612ba6612b5982613354565b157f45786368616e67650000000000000000000000000000000000000000000000007f43616e6e6f74207472616e73666572496e206e656761746976650000000000008460200151610be2565b61024383833084602001516145b7565b602080830151805191810151604085015173ffffffffffffffffffffffffffffffffffffffff909316927f2bad8bc95088af2c247b30fa2b2e6a0886f88625e0945cd3051008e0e270198f92612c0f90889083886146d3565b8660600151604051612c249493929190615b31565b60405180910390a2505050565b612c8a612c3d82614708565b157f45786368616e67650000000000000000000000000000000000000000000000007f43616e6e6f74207472616e736665724f757420706f73697469766500000000008460200151610be2565b6102438383836020015161471e565b602080830151805191810151604085015173ffffffffffffffffffffffffffffffffffffffff909316927fbc83c08f0b269b1726990c8348ffdf1ae1696244a14868d766e542a2f18cd7d492612c0f90889083886146d3565b612cfa614fcc565b5060408051808201909152815115815260208083015190820152919050565b612d22816131bf565b15612d2c57610c7a565b612d3461518e565b612d44858463ffffffff61403f16565b9050612d4e614fcc565b612d5f86868663ffffffff6132ef16565b9050612d69614fcc565b612d79828563ffffffff61425416565b9050612d83614fcc565b612d8d82856142e6565b90506113168888888463ffffffff61286616565b604082015180516020808501518051818301519290940151606087015173ffffffffffffffffffffffffffffffffffffffff94851695909416937f21281f8d59117d0399dc467dbdd321538ceffe3225e80e2bd4de6f1b3355cbc79392612e0b908a90838a6146d3565b612e278a8a604001518b60600151612e228c612cf2565b6146d3565b604051612e38959493929190615be6565b60405180910390a3505050565b612e4d614fcc565b612ea6612e5984613354565b157f45786368616e67650000000000000000000000000000000000000000000000007f43616e6e6f7420676574436f7374206e656761746976650000000000000000008660200151610be2565b612eae614fcc565b6000815260208401516040517f3a8fdd7d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891691633a8fdd7d91612f0e918a918a91908990600401615a87565b60206040518083038186803b158015612f2657600080fd5b505afa158015612f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f5e919081019061566a565b602082015290505b95945050505050565b612f77614fcc565b612fd0612f8384614708565b157f45786368616e67650000000000000000000000000000000000000000000000007f43616e6e6f742065786368616e676520706f73697469766500000000000000008660200151610be2565b612fdb848885612c31565b612fe3614fcc565b6001815260208401516040517f7d98ebac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1691637d98ebac91613047918b9130918c918c91908b90600401615a0b565b602060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613099919081019061566a565b60208201526130a9868983612b4d565b90505b9695505050505050565b6020808401518051918101516060860151604087015173ffffffffffffffffffffffffffffffffffffffff909416937f2e346762bf4ae4568971c30b51fcebd2138275aafcfe12d872956e9f3e12089393613114908a90848a6146d3565b6131288a8a602001518b604001518a6146d3565b896080015160405161313f96959493929190615c29565b60405180910390a250505050565b6020808401518051918101516040860151606087015173ffffffffffffffffffffffffffffffffffffffff909416937fcc3330184b6d88cad87f9e9543b4d4110a6a3eaf20164ca5252d598d0acba3f1936131ab908a90848a6146d3565b6131288a8a602001518b606001518a6146d3565b602001511590565b6131cf6151ae565b60405180608001604052806131f18787602001518860600151612e2289612cf2565b815260200161320d8787602001518860800151612e2288612cf2565b81526020016132268787604001518860600151886146d3565b815260200161323f8787604001518860800151876146d3565b9052604085015180516020808801518051908201519190930151606089015160808a015195965073ffffffffffffffffffffffffffffffffffffffff9384169593909416937f54d4cc60cf7d570631cc1a58942812cb0fc461713613400f56932040c3497d19938760006020020151886001602002015189600260200201518a600360200201518e60a001516040516132e099989796959493929190615d51565b60405180910390a35050505050565b6132f7614fcc565b6132ff614fcc565b61331085858563ffffffff610ce216565b905061331b81610d5e565b1561333057613328613703565b915050610d57565b61333861518e565b613348868563ffffffff61403f16565b90506130ac828261418e565b80516000901580156109e557505060200151151590565b856108f457613379856120f9565b7f3a200000000000000000000000000000000000000000000000000000000000006133a3866120f9565b7f203c0000000000000000000000000000000000000000000000000000000000006133cd87613d4b565b7f2c200000000000000000000000000000000000000000000000000000000000006133f7886121f8565b7f2c20000000000000000000000000000000000000000000000000000000000000613421896121f8565b604051610946999897969594939291907f3e0000000000000000000000000000000000000000000000000000000000000090602001615928565b613463614fcc565b61346b614fcc565b613473614fcc565b61348487878763ffffffff610ce216565b90506134e561349282614822565b157f53746f72616765000000000000000000000000000000000000000000000000007f4f7765642062616c616e63652063616e6e6f7420626520706f7369746976650089600001518a602001518a61336b565b6134ed614fcc565b6134f5614fcc565b6135078989898963ffffffff6126b016565b9150915061351482614822565b1561353f57613521613703565b915061353c6135378a8a8a63ffffffff6132ef16565b612cf2565b90505b6135d661354b82613354565b158015613584575082602001516fffffffffffffffffffffffffffffffff1684602001516fffffffffffffffffffffffffffffffff1610155b7f53746f72616765000000000000000000000000000000000000000000000000007f4f7765642062616c616e63652063616e6e6f7420696e637265617365000000008b600001518c602001518c61336b565b6135e6838363ffffffff61453016565b156135f6576135f3613703565b90505b909890975095505050505050565b61360c615154565b613614615154565b6000613626868563ffffffff61484a16565b519050613631615154565b61364288878763ffffffff61487416565b905061364c615154565b60405180602001604052806136716136648686613d20565b869063ffffffff613d3916565b90529050613685888863ffffffff61484a16565b999098509650505050505050565b61369b614fcc565b60405180604001604052806000151581526020016136c686602001518560000151876000015161490a565b9052949350505050565b6136d8614fcc565b60405180604001604052806001151581526020016136c686602001518660000151866000015161492c565b61370b614fcc565b50604080518082019091526000808252602082015290565b61372b6151dc565b6137428585602001518660800151612e2287612cf2565b905061374c6151dc565b6137638686602001518760600151612e2287612cf2565b905061376d6151dc565b6137818787604001518860800151886146d3565b905061378b6151dc565b61379f8888604001518960600151886146d3565b905086604001516000015173ffffffffffffffffffffffffffffffffffffffff1687602001516000015173ffffffffffffffffffffffffffffffffffffffff167f1b9e65b359b871d74b1af1fc8b13b11635bfb097c4631b091eb762fda7e67dc78960200151602001518a60400151602001518b608001518c606001518a8a8a8a604051613834989796959493929190615ce4565b60405180910390a35050505050505050565b6000808061385384611e3b565b905060005b818110156138ca57613870858263ffffffff610cb416565b613879576138c2565b613881614fcc565b61389288888463ffffffff610ce216565b905061389d81610d5e565b156138a857506138c2565b8051156138bc576000945050505050610d57565b60019350505b600101613858565b509095945050505050565b60006138df614fcc565b6138e7614fcc565b60608401516138fd90869063ffffffff613ab216565b905061390881614708565b613920576000613916613703565b92509250506139ae565b613928614fcc565b6040850151606086015161394391889163ffffffff6132ef16565b60018152602080820151908401519192501161398a5761397d8560400151866060015161396e613703565b8992919063ffffffff61286616565b6001935091506139ae9050565b604085015160608601516139a69188918563ffffffff612d1916565b506000925090505b9250929050565b6139bd6151dc565b6139d48686602001518760800151612e2288612cf2565b90506139de6151dc565b6139f58787602001518860600151612e2288612cf2565b90506139ff6151dc565b60408701516060880151613a1f918a91612e22898963ffffffff61425416565b905086604001516000015173ffffffffffffffffffffffffffffffffffffffff1687602001516000015173ffffffffffffffffffffffffffffffffffffffff167fefdcfda4e0be180f29bfeebc4bcb6de1e950d70b41e9ee813bff9882ee16ca918960200151602001518a60400151602001518b608001518c606001518989896040516138349796959493929190615c85565b613aba614fcc565b613ac261518e565b613ad2848463ffffffff61403f16565b9050613adc614fcc565b613aec858563ffffffff611e8c16565b90506000613b00868663ffffffff612b2116565b9050613b0a614fcc565b6040518060400160405280600115158152602001613b288430614985565b90529050613b34614fcc565b613b3c614fcc565b613b468587614a2a565b9092509050613b5f82612845858463ffffffff61423f16565b9998505050505050505050565b805180516020918201519183015160405173ffffffffffffffffffffffffffffffffffffffff909216927fab38cdc4a831ebe6542bf277d36b65dbc5c66a4d03ec6cf56ac38de05dc3009892613bc29290615b16565b60405180910390a250565b613bd5615154565b613bdd615154565b613be5615154565b613bed615154565b6000613bf887611e3b565b905060005b81811015613d1157613c15888263ffffffff610cb416565b613c1e57613d09565b613c26614fcc565b613c378b8b8463ffffffff6132ef16565b9050613c42816131bf565b15613c4d5750613d09565b6000613c74613c628b8563ffffffff61484a16565b5160208401519063ffffffff614ad216565b9050613c7e615154565b613c86614af9565b90508915613cbe57600084815260018e01602090815260409182902082519182019092526005909101548152613cbb90614b1b565b90505b825115613ce757613ce0613cd28383614b52565b88519063ffffffff613d3916565b8752613d05565b613d02613cf48383613d20565b87519063ffffffff613d3916565b86525b5050505b600101613bfd565b50919890975095505050505050565b60006109e2838360000151670de0b6b3a764000061490a565b6000828201838110156109e257600080fd5b60408051602a808252606082810190935273ffffffffffffffffffffffffffffffffffffffff841691839160208201818038833901905050905060307f01000000000000000000000000000000000000000000000000000000000000000281600081518110613db657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060787f01000000000000000000000000000000000000000000000000000000000000000281600181518110613e1657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b60148110156121f05760028102613e61600f8516614b6b565b838260290381518110613e7057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090930492613eb1600f8516614b6b565b838260280381518110613ec057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050601090920491600101613e48565b613f06615154565b600082815260018401602052604090206003015473ffffffffffffffffffffffffffffffffffffffff16613f38615154565b73ffffffffffffffffffffffffffffffffffffffff82166341976e09613f64878763ffffffff612b2116565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f9c91906159c2565b60206040518083038186803b158015613fb457600080fd5b505afa158015613fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fec91908101906155cf565b8051909150611fd09015157f53746f72616765000000000000000000000000000000000000000000000000007f50726963652063616e6e6f74206265207a65726f00000000000000000000000087610be2565b61404761518e565b506000908152600191909101602090815260409182902082516060810184526002909101546bffffffffffffffffffffffff80821683526c0100000000000000000000000082041692820192909252780100000000000000000000000000000000000000000000000090910463ffffffff169181019190915290565b60006140ce42614bcb565b905090565b6140db61518e565b6140e3615154565b6140f485858563ffffffff614c2116565b9050612f66838261410b888863ffffffff611e8c16565b604080516020810190915260078a01548152614d48565b73ffffffffffffffffffffffffffffffffffffffff166000908152600491909101602052604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b614196614fcc565b602083015183516fffffffffffffffffffffffffffffffff9091169015614202576040805180820190915260018152602084810151908201906141f79084906bffffffffffffffffffffffff16670de0b6b3a764000063ffffffff61490a16565b8152509150506109e5565b6040805180820190915260008152835160208201906141f79084906bffffffffffffffffffffffff16670de0b6b3a764000063ffffffff61492c16565b614247614fcc565b6109e28361425484612cf2565b61425c614fcc565b614264614fcc565b8251845115159015151415614297578351151581526020808501519084015161428d9190613d39565b60208201526109e2565b82602001518460200151106142c0578351151581526020808501519084015161428d91906145a2565b825115158152602080840151908501516142da91906145a2565b60208201529392505050565b6142ee614fcc565b8251156143645760405180604001604052806001151581526020016143496128fa670de0b6b3a764000067ffffffffffffffff1686602001516bffffffffffffffffffffffff16886020015161490a9092919063ffffffff16565b6fffffffffffffffffffffffffffffffff16905290506109e5565b6040805180820190915260008152825160208581015190830191614349916128fa91670de0b6b3a7640000906bffffffffffffffffffffffff1663ffffffff61492c16565b6000816109e56fffffffffffffffffffffffffffffffff821682147f4d617468000000000000000000000000000000000000000000000000000000007f556e73616665206361737420746f2075696e74313238000000000000000000006108fc565b614413614fcc565b61441b614fcc565b8251845115159015151415614479578351151581526020808501519084015161445d916128fa916fffffffffffffffffffffffffffffffff9182169116613d39565b6fffffffffffffffffffffffffffffffff1660208201526109e2565b82602001516fffffffffffffffffffffffffffffffff1684602001516fffffffffffffffffffffffffffffffff16106144df578351151581526020808501519084015161445d916128fa916fffffffffffffffffffffffffffffffff91821691166145a2565b82511515815260208084015190850151614512916128fa916fffffffffffffffffffffffffffffffff91821691166145a2565b6fffffffffffffffffffffffffffffffff1660208201529392505050565b600081602001516fffffffffffffffffffffffffffffffff1683602001516fffffffffffffffffffffffffffffffff1614156145995760208301516fffffffffffffffffffffffffffffffff16614589575060016109e5565b50805182511515901515146109e5565b50600092915050565b6000828211156145b157600080fd5b50900390565b8015806145ef57508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156145f957610c7a565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906323b872dd9061464f90869086908690600401615a5f565b600060405180830381600087803b15801561466957600080fd5b505af115801561467d573d6000803e3d6000fd5b50505050610c7a61468c614ea6565b7f546f6b656e0000000000000000000000000000000000000000000000000000007f5472616e7366657246726f6d206661696c6564000000000000000000000000006108fc565b6146db6151dc565b60408051808201909152828152602081016146fd87878763ffffffff610ce216565b905295945050505050565b805160009080156109e557505060200151151590565b801580614740575073ffffffffffffffffffffffffffffffffffffffff821630145b1561474a57610243565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063a9059cbb9061479e9085908590600401615ac1565b600060405180830381600087803b1580156147b857600080fd5b505af11580156147cc573d6000803e3d6000fd5b505050506102436147db614ea6565b7f546f6b656e0000000000000000000000000000000000000000000000000000007f5472616e73666572206661696c656400000000000000000000000000000000006108fc565b805160009080156109e5575050602001516fffffffffffffffffffffffffffffffff16151590565b614852615154565b825180518390811061486057fe5b602002602001015160400151905092915050565b61487c615154565b600680850154600085815260018701602090815260409182902082519182019092529201548252906148b89082906148b390614b1b565b613d20565b90506148f3816148b3876001016000878152602001908152602001600020600601604051806020016040529081600082015481525050614b1b565b604080516020810190915290815295945050505050565b6000611fd082614920868663ffffffff614ad216565b9063ffffffff614eda16565b6000831580614939575082155b1561495057614949600083614eda565b9050610d57565b611fd06001614979846149208361496d8a8a63ffffffff614ad216565b9063ffffffff6145a216565b9063ffffffff613d3916565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8416906370a08231906149da9085906004016159c2565b60206040518083038186803b1580156149f257600080fd5b505afa158015614a06573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109e2919081019061566a565b614a32614fcc565b614a3a614fcc565b614a42614fcc565b5060408051808201909152600181526020858101516fffffffffffffffffffffffffffffffff1690820152614a75614fcc565b50604080518082019091526000815285516fffffffffffffffffffffffffffffffff166020820152614aa5614fcc565b614aaf838761418e565b9050614ab9614fcc565b614ac3838861418e565b91989197509095505050505050565b600082614ae1575060006109e5565b82820282848281614aee57fe5b04146109e257600080fd5b614b01615154565b506040805160208101909152670de0b6b3a7640000815290565b614b23615154565b604080516020810190915282518190614b4a90670de0b6b3a764000063ffffffff613d3916565b905292915050565b60006109e283670de0b6b3a7640000846000015161490a565b6000600a821015614ba257507f01000000000000000000000000000000000000000000000000000000000000006030820102610b02565b506057017f01000000000000000000000000000000000000000000000000000000000000000290565b6000816109e563ffffffff821682147f4d617468000000000000000000000000000000000000000000000000000000007f556e73616665206361737420746f2075696e74333200000000000000000000006108fc565b614c29615154565b614c31614fcc565b614c41858563ffffffff611e8c16565b9050614c4b614fcc565b614c53614fcc565b614c5d8386614a2a565b91509150614c69615154565b600087815260018901602052604090206004015473ffffffffffffffffffffffffffffffffffffffff1663e8177dcf614ca88a8a63ffffffff612b2116565b846020015186602001516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614cec93929190615adc565b60206040518083038186803b158015614d0457600080fd5b505afa158015614d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d3c91908101906155cf565b98975050505050505050565b614d5061518e565b614d58614fcc565b614d60614fcc565b614d6a8588614a2a565b915091506000614d786140c3565b90506000614db0614da28a6040015163ffffffff168463ffffffff166145a290919063ffffffff16565b89519063ffffffff614ad216565b90506000614dbd856131bf565b15614dca57506000614dfc565b614dd48288613d20565b9050846020015184602001511015614dfc57614df9818560200151876020015161490a565b90505b81811115614e0657fe5b60408051606081019091528a518190614e4390614e3e906bffffffffffffffffffffffff166149798188670de0b6b3a764000061490a565b614efc565b6bffffffffffffffffffffffff908116825260208d810151920191614e7a91614e3e91166149798187670de0b6b3a764000061490a565b6bffffffffffffffffffffffff1681526020018463ffffffff1681525095505050505050949350505050565b6000803d8015614ebd5760208114614ec657614ed2565b60019150614ed2565b60206000803e60005191505b501515905090565b6000808211614ee857600080fd5b6000828481614ef357fe5b04949350505050565b6000816109e56bffffffffffffffffffffffff821682147f4d617468000000000000000000000000000000000000000000000000000000007f556e73616665206361737420746f2075696e74393600000000000000000000006108fc565b6040518060200160405280606081525090565b604080516101608101825260008082526020820152908101614f8d6150f1565b81526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b604080518082019091526000808252602082015290565b6040805160608101825260008082526020820152908101615002615154565b905290565b60405180610100016040528061501b6150f1565b8152602001615028614fcc565b815260006020820181905260409091015290565b6040518061012001604052806150506150f1565b815260200161505d614fcc565b815260200161506a614fcc565b8152602001600081525090565b60405180610140016040528061508b6150f1565b8152602001615098614fcc565b81526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518061018001604052806150e46150f1565b815260200161508b614fcc565b6040805160808101909152600080825260208201908152602001600061506a565b6040518061014001604052806151266150f1565b8152602001615133614fcc565b8152602001615140614fcc565b815260200160008152602001600081525090565b6040518060200160405280600081525090565b604051806080016040528061517a614fcc565b815260006020820152606060409091015290565b604080516060810182526000808252602082018190529181019190915290565b6040518061020001604052806004905b6151c66151dc565b8152602001906001900390816151be5790505090565b60405180608001604052806151ef614fcc565b8152602001615002614fcc565b60006109e28235615e67565b600082601f83011261521957600080fd5b813561522c61522782615df3565b615dcc565b81815260209384019390925082018360005b8381101561526a57813586016152548882615371565b845250602092830192919091019060010161523e565b5050505092915050565b600082601f83011261528557600080fd5b813561529361522782615df3565b915081818352602084019350602081019050838560408402820111156152b857600080fd5b60005b8381101561526a57816152ce888261551f565b845250602090920191604091909101906001016152bb565b60006109e28235615e72565b60006109e28251615e72565b600082601f83011261530f57600080fd5b813561531d61522782615e14565b9150808252602083016020830185838301111561533957600080fd5b615344838284615f3f565b50505092915050565b60006109e28235615f0c565b60006109e28235615f1f565b60006109e28251615f1f565b6000610160828403121561538457600080fd5b61538f610100615dcc565b9050600061539d848461534d565b82525060206153ae84848301615599565b60208301525060406153c28482850161544d565b60408301525060c06153d684828501615599565b60608301525060e06153ea84828501615599565b6080830152506101006153ff848285016151fc565b60a08301525061012061541484828501615599565b60c08301525061014082013567ffffffffffffffff81111561543557600080fd5b615441848285016152fe565b60e08301525092915050565b60006080828403121561545f57600080fd5b6154696080615dcc565b9050600061547784846152e6565b825250602061548884848301615359565b602083015250604061549c84828501615359565b60408301525060606154b084828501615599565b60608301525092915050565b6000608082840312156154ce57600080fd5b6154d86080615dcc565b905060006154e684846152f2565b82525060206154f784848301615365565b602083015250604061550b84828501615365565b60408301525060606154b0848285016155a5565b60006040828403121561553157600080fd5b61553b6040615dcc565b9050600061554984846151fc565b825250602061555a84848301615599565b60208301525092915050565b60006020828403121561557857600080fd5b6155826020615dcc565b9050600061559084846155a5565b82525092915050565b60006109e28235615ec1565b60006109e28251615ec1565b6000608082840312156155c357600080fd5b6000611fd084846154bc565b6000602082840312156155e157600080fd5b6000611fd08484615566565b60008060006060848603121561560257600080fd5b600061560e8686615599565b935050602084013567ffffffffffffffff81111561562b57600080fd5b61563786828701615274565b925050604084013567ffffffffffffffff81111561565457600080fd5b61566086828701615208565b9150509250925092565b60006020828403121561567c57600080fd5b6000611fd084846155a5565b61569181615f2e565b82525050565b61569181615e67565b61569181615e72565b6156916156b582615e77565b615ec1565b6156916156b582615e9c565b6156916156b582615ec1565b60006156dd82615e5a565b6156e78185615e5e565b93506156f7818560208601615f4b565b61570081615f77565b9093019392505050565b600061571582615e5a565b61571f8185610b02565b935061572f818560208601615f4b565b9290920192915050565b8051608083019061574a84826157dc565b506020820151610c7a60408501826157b8565b8051606083019061576e8482615808565b5060208201516157816020850182615808565b506040820151610c7a60408501826157ff565b805160408301906157a58482615697565b506020820151610c7a60208501826157f6565b805160408301906157c984826156a0565b506020820151610c7a60208501826157ed565b805160408301906157a584826156a0565b61569181615ec4565b61569181615ec1565b61569181615ef2565b61569181615efb565b600061581d82846156c6565b50602001919050565b6000615832828661570a565b915061583e82856156ba565b600282019150612f66828461570a565b600061585a828961570a565b915061586682886156ba565b600282019150615876828761570a565b915061588282866156ba565b600282019150615892828561570a565b915061589e82846156a9565b506001019695505050505050565b60006158b8828b61570a565b91506158c4828a6156ba565b6002820191506158d4828961570a565b91506158e082886156ba565b6002820191506158f0828761570a565b91506158fc82866156ba565b60028201915061590c828561570a565b915061591882846156a9565b5060010198975050505050505050565b6000615934828d61570a565b9150615940828c6156ba565b600282019150615950828b61570a565b915061595c828a6156ba565b60028201915061596c828961570a565b915061597882886156ba565b600282019150615988828761570a565b915061599482866156ba565b6002820191506159a4828561570a565b91506159b082846156a9565b506001019a9950505050505050505050565b602081016109e58284615697565b602081016109e58284615688565b608081016159ec8286615688565b6159f96020830185615794565b8181036060830152612f6681846156d2565b60c08101615a198289615697565b615a266020830188615697565b615a336040830187615697565b615a406060830186615697565b615a4d60808301856157f6565b81810360a0830152614d3c81846156d2565b60608101615a6d8286615697565b615a7a6020830185615697565b611fd060408301846157f6565b60808101615a958287615697565b615aa26020830186615697565b615aaf60408301856157f6565b81810360608301526130ac81846156d2565b60408101615acf8285615697565b610d5760208301846157f6565b60608101615aea8286615697565b615a7a60208301856157f6565b602080825281016109e281846156d2565b606081016109e5828461575d565b60408101615b2482856157f6565b610d576020830184615697565b60e08101615b3f82876157f6565b615b4c60208301866157f6565b615b596040830185615739565b612f6660c0830184615697565b6101a08101615b75828b6157f6565b615b82602083018a6157f6565b615b8f6040830189615794565b615b9c6080830188615794565b615ba960c08301876157b8565b615bb76101008301866157b8565b615bc56101408301856157dc565b818103610180830152615bd881846156d2565b9a9950505050505050505050565b6101608101615bf582886157f6565b615c0260208301876157f6565b615c0f60408301866157f6565b615c1c6060830185615739565b6130ac60e0830184615739565b6101808101615c3882896157f6565b615c4560208301886157f6565b615c5260408301876157f6565b615c5f6060830186615739565b615c6c60e0830185615739565b615c7a610160830184615697565b979650505050505050565b6102008101615c94828a6157f6565b615ca160208301896157f6565b615cae60408301886157f6565b615cbb60608301876157f6565b615cc86080830186615739565b615cd6610100830185615739565b614d3c610180830184615739565b6102808101615cf3828b6157f6565b615d00602083018a6157f6565b615d0d60408301896157f6565b615d1a60608301886157f6565b615d276080830187615739565b615d35610100830186615739565b615d43610180830185615739565b613b5f610200830184615739565b6102a08101615d60828c6157f6565b615d6d602083018b6157f6565b615d7a604083018a6157f6565b615d8760608301896157f6565b615d946080830188615739565b615da2610100830187615739565b615db0610180830186615739565b615dbe610200830185615739565b615bd8610280830184615697565b60405181810167ffffffffffffffff81118282101715615deb57600080fd5b604052919050565b600067ffffffffffffffff821115615e0a57600080fd5b5060209081020190565b600067ffffffffffffffff821115615e2b57600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5190565b90815260200190565b60006109e582615ed9565b151590565b7fff000000000000000000000000000000000000000000000000000000000000001690565b7fffff0000000000000000000000000000000000000000000000000000000000001690565b90565b6fffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b63ffffffff1690565b6bffffffffffffffffffffffff1690565b600060098210615f1b57600080fd5b5090565b600060028210615f1b57600080fd5b60006109e58260006109e582615e67565b82818337506000910152565b60005b83811015615f66578181015183820152602001615f4e565b83811115610c7a5750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169056fea265627a7a72305820a49126c145898ce1917c321b14ce2c1922b5f712fcd6e4a142e608deff2da2f96c6578706572696d656e74616cf50037",
  "constructorArguments": ""
}