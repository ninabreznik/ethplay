{
  "address": "0xcd3673af09e76c74d889aabab68ca0645566a3a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CandyCoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-26\n*/\n\npragma solidity ^0.4.11;\n\ncontract owned {\n    address public owner;\n \n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract CandyCoin is owned {\n    // Public variables of the token\n    string public name = \"Unicorn Candy Coin\";\n    string public symbol = \"Candy\";\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply = 12000000000000000000000000;\n    address public crowdsaleContract;\n\n    uint sendingBanPeriod = 1519776000;           // 28.02.2018\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    \n    modifier canSend() {\n        require ( msg.sender == owner ||  now > sendingBanPeriod || msg.sender == crowdsaleContract);\n        _;\n    }\n    \n    /**\n     * Constrctor function\n     */\n    function CandyCoin(\n    ) public {\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n    \n    function setCrowdsaleContract(address contractAddress) onlyOwner {\n        crowdsaleContract = contractAddress;\n    }\n     \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public canSend {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public canSend returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}\n\n\ncontract CandySale is owned {\n    \n    address public teamWallet = address(0x7Bd19c5Fa45c5631Aa7EFE2Bf8Aa6c220272694F);\n\n    uint public fundingGoal;\n    uint public amountRaised;\n    // sale periods\n    uint public beginTime = now;\n    uint public stage2BeginTime = 1517529600;   // 2.02.2018 \n    uint public stage3BeginTime = 1518393600;   // 12.02.2018\n    uint public stage4BeginTime = 1519257600;   // 22.02.2018 \n    uint public endTime = 1519776000;           // 28.02.2018\n\n    CandyCoin public tokenReward;\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    /**\n     * Constrctor function\n     *\n     * Setup the owner\n     */\n    function CandySale(\n        CandyCoin addressOfTokenUsedAsReward\n    ) {\n        tokenReward = addressOfTokenUsedAsReward;\n    }\n    \n    // withdraw tokens from contract\n    function withdrawTokens() onlyOwner {\n        tokenReward.transfer(msg.sender, tokenReward.balanceOf(this));\n        FundTransfer(msg.sender, tokenReward.balanceOf(this), false);\n    }\n\n    function currentPrice() constant returns (uint) {\n        if ( now <= stage2BeginTime ) return 100 szabo;\n        if ( now > stage2BeginTime && now <= stage3BeginTime) return 500 szabo;\n        if ( now > stage3BeginTime && now <= stage4BeginTime) return 1000 szabo;\n        if ( now > stage4BeginTime ) return 1500 szabo;\n    }\n    \n    // low level token purchase function\n    function buyTokens(address beneficiary) payable {\n        require(msg.value > 0);\n        uint amount = msg.value;\n        amountRaised += amount;\n        tokenReward.transfer(beneficiary, amount*1000000000000000000/currentPrice());\n        FundTransfer(beneficiary, amount, true);\n        teamWallet.transfer(msg.value);\n\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function () payable onlyCrowdsalePeriod {\n        buyTokens(msg.sender);\n    }\n\n    modifier onlyCrowdsalePeriod() { \n        require ( now >= beginTime && now <= endTime ) ;\n        _; \n    }\n\n    \n\n}",
  "bytecode": "6060604052604060405190810160405280601281526020017f556e69636f726e2043616e647920436f696e000000000000000000000000000081525060019080519060200190620000529291906200016f565b50604060405190810160405280600581526020017f43616e647900000000000000000000000000000000000000000000000000000081525060029080519060200190620000a19291906200016f565b506012600360006101000a81548160ff021916908360ff1602179055506a09ed194db19b238c000000600455635a95f1006006553415620000de57fe5b5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6200021e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b257805160ff1916838001178555620001e3565b82800160010185558215620001e3579182015b82811115620001e2578251825591602001919060010190620001c5565b5b509050620001f29190620001f6565b5090565b6200021b91905b8082111562000217576000816000905550600101620001fd565b5090565b90565b6114c8806200022e6000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e6578063095ea7b31461017f57806318160ddd146101d657806323b872dd146101fc578063313ce56714610272578063316163951461029e57806342966c68146102f05780636596cff31461032857806370a082311461035e57806379cc6790146103a85780638da5cb5b146103ff57806395d89b4114610451578063a9059cbb146104ea578063cae9ca5114610529578063dd62ed3e146105c3578063f2fde38b1461062c575bfe5b34156100ee57fe5b6100f6610662565b6040518080602001828103825283818151815260200191508051906020019080838360008314610145575b80518252602083111561014557602082019150602081019050602083039250610121565b505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018757fe5b6101bc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610700565b604051808215151515815260200191505060405180910390f35b34156101de57fe5b6101e661078e565b6040518082815260200191505060405180910390f35b341561020457fe5b610258600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610794565b604051808215151515815260200191505060405180910390f35b341561027a57fe5b610282610985565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a657fe5b6102ae610998565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102f857fe5b61030e60048080359060200190919050506109be565b604051808215151515815260200191505060405180910390f35b341561033057fe5b61035c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ac4565b005b341561036657fe5b610392600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b67565b6040518082815260200191505060405180910390f35b34156103b057fe5b6103e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b7f565b604051808215151515815260200191505060405180910390f35b341561040757fe5b61040f610d9c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561045957fe5b610461610dc2565b60405180806020018281038252838181518152602001915080519060200190808383600083146104b0575b8051825260208311156104b05760208201915060208101905060208303925061048c565b505050905090810190601f1680156104dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104f257fe5b610527600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e60565b005b341561053157fe5b6105a9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610f32565b604051808215151515815260200191505060405180910390f35b34156105cb57fe5b610616600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110b9565b6040518082815260200191505060405180910390f35b341561063457fe5b610660600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110de565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60045481565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107f3575060065442115b8061084b5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156108575760006000fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156108e35760006000fd5b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610978848484611181565b600190505b5b9392505050565b600360009054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a0f5760006000fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b215760006000fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60076020528060005260406000206000915090505481565b600081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610bd05760006000fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c5c5760006000fd5b81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e585780601f10610e2d57610100808354040283529160200191610e58565b820191906000526020600020905b815481529060010190602001808311610e3b57829003601f168201915b505050505081565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ebd575060065442115b80610f155750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610f215760006000fd5b610f2c338383611181565b5b5b5050565b60006000849050610f438585610700565b156110b0578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200182810382528381815181526020019150805190602001908083836000831461104c575b80518252602083111561104c57602082019150602081019050602083039250611028565b505050905090810190601f1680156110785780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561109657fe5b6102c65a03f115156110a457fe5b505050600191506110b1565b5b509392505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113b5760006000fd5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600060008373ffffffffffffffffffffffffffffffffffffffff16141515156111aa5760006000fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111f95760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156112885760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561149557fe5b5b505050505600a165627a7a72305820834be43eccd740b89fef3f7bb281d3e8ab124cdc4bf951d90ee3e5ae91eff4d50029"
}