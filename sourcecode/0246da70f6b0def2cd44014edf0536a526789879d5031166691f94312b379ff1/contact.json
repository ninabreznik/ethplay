{
  "address": "0x48bf5e13a1ee8bd4385c182904b3abf73e042675",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AutomatedExchange",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-20\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract VerifyToken {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    bool public activated;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\ncontract AutomatedExchange is ApproveAndCallFallBack{\n\n    uint256 PSN=100000000000000;\n    uint256 PSNH=50000000000000;\n    address vrfAddress=0x5BD574410F3A2dA202bABBa1609330Db02aD64C2; //0x96357e75B7Ccb1a7Cf10Ac6432021AEa7174c803; //0x9E129e47213589C5Da4d92CC6Bb056425d60b0e1; //0xe0832c4f024D2427bBC6BD0C4931096d2ab5CCaF;//0x64F82571C326487cac31669F1e797EA0c9650879;\n    VerifyToken vrfcontract=VerifyToken(vrfAddress);\n    event BoughtToken(uint tokens,uint eth,address indexed to);\n    event SoldToken(uint tokens,uint eth,address indexed to);\n\n    //Tokens are sold by sending them to this contract with ApproveAndCall\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\n        //only allow this to be called from the token contract once activated\n        require(vrfcontract.activated());\n        require(msg.sender==vrfAddress);\n        uint256 tokenValue=calculateTokenSell(tokens);\n        vrfcontract.transferFrom(from,this,tokens);\n        from.transfer(tokenValue);\n        emit SoldToken(tokens,tokenValue,from);\n    }\n    function buyTokens() public payable{\n        require(vrfcontract.activated());\n        uint256 tokensBought=calculateTokenBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        vrfcontract.transfer(msg.sender,tokensBought);\n        emit BoughtToken(tokensBought,msg.value,msg.sender);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateTokenSell(uint256 tokens) public view returns(uint256){\n        return calculateTrade(tokens,vrfcontract.balanceOf(this),this.balance);\n    }\n    function calculateTokenBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,vrfcontract.balanceOf(this));\n    }\n    function calculateTokenBuySimple(uint256 eth) public view returns(uint256){\n        return calculateTokenBuy(eth,this.balance);\n    }\n\n    //allow sending eth to the contract\n    function () public payable {}\n\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getTokenBalance() public view returns(uint256){\n        return vrfcontract.balanceOf(this);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "6080604052655af3107a4000600055652d79883d200060015560028054600160a060020a0319908116735bd574410f3a2da202babba1609330db02ad64c2179182905560038054909116600160a060020a039290921691909117905534801561006757600080fd5b506107e3806100776000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461008f578063229824c4146100b657806382b2e257146100d45780638ebb5aee146100e95780638f4ffcb11461010457806393d5825e14610174578063d0febe4c1461018c578063f49e813514610194575b005b34801561009b57600080fd5b506100a46101ac565b60408051918252519081900360200190f35b3480156100c257600080fd5b506100a46004356024356044356101b1565b3480156100e057600080fd5b506100a46101fe565b3480156100f557600080fd5b506100a4600435602435610294565b34801561011057600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261008d94600160a060020a038135811695602480359660443590931695369560849492019181908401838280828437509497506103399650505050505050565b34801561018057600080fd5b506100a4600435610513565b61008d6105ba565b3480156101a057600080fd5b506100a460043561073c565b303190565b60006101f66101c260005484610749565b6101f16001546101e66101eb6101da6000548a610749565b6101e66001548c610749565b61077f565b8961078e565b61078e565b949350505050565b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561026357600080fd5b505af1158015610277573d6000803e3d6000fd5b505050506040513d602081101561028d57600080fd5b5051905090565b600354604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926103329286928692600160a060020a0316916370a0823191602480830192602092919082900301818a87803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b50516101b1565b9392505050565b600354604080517f186601ca0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163186601ca91600480830192602092919082900301818787803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b505050506040513d60208110156103c257600080fd5b505115156103cf57600080fd5b600254600160a060020a031633146103e657600080fd5b6103ef84610513565b600354604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301523060248301526044820189905291519394509116916323b872dd916064808201926020929091908290030181600087803b15801561046657600080fd5b505af115801561047a573d6000803e3d6000fd5b505050506040513d602081101561049057600080fd5b5050604051600160a060020a0386169082156108fc029083906000818181858888f193505050501580156104c8573d6000803e3d6000fd5b5060408051858152602081018390528151600160a060020a038816927fd5d5539761850188fc637cfad56e1a6ceae162789c9d022ad7384c5de589e55b928290030190a25050505050565b600354604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926105b4928592600160a060020a03909216916370a082319160248082019260209290919082900301818987803b15801561058157600080fd5b505af1158015610595573d6000803e3d6000fd5b505050506040513d60208110156105ab57600080fd5b505130316101b1565b92915050565b600354604080517f186601ca0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163186601ca91600480830192602092919082900301818787803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b505050506040513d602081101561064357600080fd5b5051151561065057600080fd5b6106643461065f3031826107a5565b610294565b600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051929350600160a060020a039091169163a9059cbb916044808201926020929091908290030181600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d60208110156106fe57600080fd5b505060408051828152346020820152815133927f06225b686c15c0ef445fcba7af600cf84b102a1204d513a74a5f72e2f52f6e9c928290030190a250565b60006105b4823031610294565b60008083151561075c5760009150610778565b5082820282848281151561076c57fe5b041461077457fe5b8091505b5092915050565b60008282018381101561077457fe5b600080828481151561079c57fe5b04949350505050565b6000828211156107b157fe5b509003905600a165627a7a72305820516bfb24c036b09e112f23786338d4a903e7c86a6e16634c4cff120b010f40510029"
}