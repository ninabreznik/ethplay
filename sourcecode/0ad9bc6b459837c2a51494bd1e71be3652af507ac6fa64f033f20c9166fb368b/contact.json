{
  "address": "0xe4c94d45f7aef7018a5d66f44af780ec6023378e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoCarbon",
  "compilerVersion": "v0.3.5-2016-07-21-6610add",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-08-31\n*/\n\ncontract MultiAsset {\n    function isCreated(bytes32 _symbol) constant returns(bool);\n    function owner(bytes32 _symbol) constant returns(address);\n    function totalSupply(bytes32 _symbol) constant returns(uint);\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint);\n    function transfer(address _to, uint _value, bytes32 _symbol) returns(bool);\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n    function proxyTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool);\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol) returns(bool);\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint);\n    function transferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool);\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool);\n    function proxySetCosignerAddress(address _address, bytes32 _symbol) returns(bool);\n}\n\ncontract Ambi {\n    function getNodeAddress(bytes32 _name) constant returns (address);\n    function addNode(bytes32 _name, address _addr) external returns (bool);\n    function hasRelation(bytes32 _from, bytes32 _role, address _to) constant returns (bool);\n}\n\ncontract EtherTreasuryInterface {\n    function withdraw(address _to, uint _value) returns(bool);\n}\n\ncontract Safe {\n    // Should always be placed as first modifier!\n    modifier noValue {\n        if (msg.value > 0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: revert this transaction too;\n            // Recursive Call: safe, no any changes applied yet, we are inside of modifier.\n            _safeSend(msg.sender, msg.value);\n        }\n        _\n    }\n\n    modifier onlyHuman {\n        if (_isHuman()) {\n            _\n        }\n    }\n\n    modifier noCallback {\n        if (!isCall) {\n            _\n        }\n    }\n\n    modifier immutable(address _address) {\n        if (_address == 0) {\n            _\n        }\n    }\n\n    address stackDepthLib;\n    function setupStackDepthLib(address _stackDepthLib) immutable(address(stackDepthLib)) returns(bool) {\n        stackDepthLib = _stackDepthLib;\n        return true;\n    }\n\n    modifier requireStackDepth(uint16 _depth) {\n        if (stackDepthLib == 0x0) {\n            throw;\n        }\n        if (_depth > 1023) {\n            throw;\n        }\n        if (!stackDepthLib.delegatecall(0x32921690, stackDepthLib, _depth)) {\n            throw;\n        }\n        _\n    }\n\n    // Must not be used inside the functions that have noValue() modifier!\n    function _safeFalse() internal noValue() returns(bool) {\n        return false;\n    }\n\n    function _safeSend(address _to, uint _value) internal {\n        if (!_unsafeSend(_to, _value)) {\n            throw;\n        }\n    }\n\n    function _unsafeSend(address _to, uint _value) internal returns(bool) {\n        return _to.call.value(_value)();\n    }\n\n    function _isContract() constant internal returns(bool) {\n        return msg.sender != tx.origin;\n    }\n\n    function _isHuman() constant internal returns(bool) {\n        return !_isContract();\n    }\n\n    bool private isCall = false;\n    function _setupNoCallback() internal {\n        isCall = true;\n    }\n\n    function _finishNoCallback() internal {\n        isCall = false;\n    }\n}\n\ncontract Asset is Safe {\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approve(address indexed from, address indexed spender, uint value);\n\n    MultiAsset public multiAsset;\n    bytes32 public symbol;\n\n    function init(address _multiAsset, bytes32 _symbol) noValue() immutable(address(multiAsset)) returns(bool) {\n        MultiAsset ma = MultiAsset(_multiAsset);\n        if (!ma.isCreated(_symbol)) {\n            return false;\n        }\n        multiAsset = ma;\n        symbol = _symbol;\n        return true;\n    }\n\n    modifier onlyMultiAsset() {\n        if (msg.sender == address(multiAsset)) {\n            _\n        }\n    }\n\n    function totalSupply() constant returns(uint) {\n        return multiAsset.totalSupply(symbol);\n    }\n\n    function balanceOf(address _owner) constant returns(uint) {\n        return multiAsset.balanceOf(_owner, symbol);\n    }\n\n    function allowance(address _from, address _spender) constant returns(uint) {\n        return multiAsset.allowance(_from, _spender, symbol);\n    }\n\n    function transfer(address _to, uint _value) returns(bool) {\n        return __transferWithReference(_to, _value, \"\");\n    }\n\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n        return __transferWithReference(_to, _value, _reference);\n    }\n\n    function __transferWithReference(address _to, uint _value, string _reference) private noValue() returns(bool) {\n        return _isHuman() ?\n            multiAsset.proxyTransferWithReference(_to, _value, symbol, _reference) :\n            multiAsset.transferFromWithReference(msg.sender, _to, _value, symbol, _reference);\n    }\n\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n        return __transferToICAPWithReference(_icap, _value, \"\");\n    }\n\n    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\n        return __transferToICAPWithReference(_icap, _value, _reference);\n    }\n\n    function __transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) private noValue() returns(bool) {\n        return _isHuman() ?\n            multiAsset.proxyTransferToICAPWithReference(_icap, _value, _reference) :\n            multiAsset.transferFromToICAPWithReference(msg.sender, _icap, _value, _reference);\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        return __transferFromWithReference(_from, _to, _value, \"\");\n    }\n\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\n        return __transferFromWithReference(_from, _to, _value, _reference);\n    }\n\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference) private noValue() onlyHuman() returns(bool) {\n        return multiAsset.proxyTransferFromWithReference(_from, _to, _value, symbol, _reference);\n    }\n\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool) {\n        return __transferFromToICAPWithReference(_from, _icap, _value, \"\");\n    }\n\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool) {\n        return __transferFromToICAPWithReference(_from, _icap, _value, _reference);\n    }\n\n    function __transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) private noValue() onlyHuman() returns(bool) {\n        return multiAsset.proxyTransferFromToICAPWithReference(_from, _icap, _value, _reference);\n    }\n\n    function approve(address _spender, uint _value) noValue() onlyHuman() returns(bool) {\n        return multiAsset.proxyApprove(_spender, _value, symbol);\n    }\n\n    function setCosignerAddress(address _cosigner) noValue() onlyHuman() returns(bool) {\n        return multiAsset.proxySetCosignerAddress(_cosigner, symbol);\n    }\n\n    function emitTransfer(address _from, address _to, uint _value) onlyMultiAsset() {\n        Transfer(_from, _to, _value);\n    }\n\n    function emitApprove(address _from, address _spender, uint _value) onlyMultiAsset() {\n        Approve(_from, _spender, _value);\n    }\n\n    function sendToOwner() noValue() returns(bool) {\n        address owner = multiAsset.owner(symbol);\n        uint balance = this.balance;\n        bool success = true;\n        if (balance > 0) {\n            success = _unsafeSend(owner, balance);\n        }\n        return multiAsset.transfer(owner, balanceOf(owner), symbol) && success;\n    }\n}\n\ncontract AmbiEnabled {\n    Ambi public ambiC;\n    bool public isImmortal;\n    bytes32 public name;\n\n    modifier checkAccess(bytes32 _role) {\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\n            _\n        }\n    }\n    \n    function getAddress(bytes32 _name) constant returns (address) {\n        return ambiC.getNodeAddress(_name);\n    }\n\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\n        if(address(ambiC) != 0x0){\n            return false;\n        }\n        Ambi ambiContract = Ambi(_ambi);\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\n            if (!ambiContract.addNode(_name, address(this))){\n                return false;\n            }\n        }\n        name = _name;\n        ambiC = ambiContract;\n        return true;\n    }\n\n    function immortality() checkAccess(\"owner\") returns(bool) {\n        isImmortal = true;\n        return true;\n    }\n\n    function remove() checkAccess(\"owner\") returns(bool) {\n        if (isImmortal) {\n            return false;\n        }\n        selfdestruct(msg.sender);\n        return true;\n    }\n}\n\ncontract CryptoCarbon is Asset, AmbiEnabled {\n    uint public txGasPriceLimit = 21000000000;\n    uint public refundGas = 40000;\n    uint public transferCallGas = 21000;\n    uint public transferWithReferenceCallGas = 21000;\n    uint public transferFromCallGas = 21000;\n    uint public transferFromWithReferenceCallGas = 21000;\n    uint public transferToICAPCallGas = 21000;\n    uint public transferToICAPWithReferenceCallGas = 21000;\n    uint public transferFromToICAPCallGas = 21000;\n    uint public transferFromToICAPWithReferenceCallGas = 21000;\n    uint public approveCallGas = 21000;\n    uint public forwardCallGas = 21000;\n    uint public setCosignerCallGas = 21000;\n    uint public absMinFee;\n    uint public feePercent; // set up in 1/100 of percent, 10 is 0.1%\n    uint public absMaxFee;\n    EtherTreasuryInterface public treasury;\n    address public feeAddress;\n    bool private __isAllowed;\n    mapping(bytes32 => address) public allowedForwards;\n\n    function setFeeStructure(uint _absMinFee, uint _feePercent, uint _absMaxFee) noValue() checkAccess(\"cron\") returns (bool) {\n        if(_feePercent > 10000 || _absMaxFee < _absMinFee) {\n            return false;\n        }\n        absMinFee = _absMinFee;\n        feePercent = _feePercent;\n        absMaxFee = _absMaxFee;\n        return true;\n    }\n\n    function setupFee(address _feeAddress) noValue() checkAccess(\"admin\") returns(bool) {\n        feeAddress = _feeAddress;\n        return true;\n    }\n\n    function updateRefundGas() noValue() checkAccess(\"setup\") returns(uint) {\n        uint startGas = msg.gas;\n        // just to simulate calculations\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice;\n        if (tx.gasprice > txGasPriceLimit) {\n            return 0;\n        }\n        // end\n        if (!_refund(5000000000000000)) {\n            return 0;\n        }\n        refundGas = startGas - msg.gas;\n        return refundGas;\n    }\n\n    function setOperationsCallGas(\n        uint _transfer,\n        uint _transferFrom,\n        uint _transferToICAP,\n        uint _transferFromToICAP,\n        uint _transferWithReference,\n        uint _transferFromWithReference,\n        uint _transferToICAPWithReference,\n        uint _transferFromToICAPWithReference,\n        uint _approve,\n        uint _forward,\n        uint _setCosigner\n    )\n        noValue()\n        checkAccess(\"setup\")\n        returns(bool)\n    {\n        transferCallGas = _transfer;\n        transferFromCallGas = _transferFrom;\n        transferToICAPCallGas = _transferToICAP;\n        transferFromToICAPCallGas = _transferFromToICAP;\n        transferWithReferenceCallGas = _transferWithReference;\n        transferFromWithReferenceCallGas = _transferFromWithReference;\n        transferToICAPWithReferenceCallGas = _transferToICAPWithReference;\n        transferFromToICAPWithReferenceCallGas = _transferFromToICAPWithReference;\n        approveCallGas = _approve;\n        forwardCallGas = _forward;\n        setCosignerCallGas = _setCosigner;\n        return true;\n    }\n\n    function setupTreasury(address _treasury, uint _txGasPriceLimit) checkAccess(\"admin\") returns(bool) {\n        if (_txGasPriceLimit == 0) {\n            return _safeFalse();\n        }\n        treasury = EtherTreasuryInterface(_treasury);\n        txGasPriceLimit = _txGasPriceLimit;\n        if (msg.value > 0) {\n            _safeSend(_treasury, msg.value);\n        }\n        return true;\n    }\n\n    function setForward(bytes4 _msgSig, address _forward) noValue() checkAccess(\"admin\") returns(bool) {\n        allowedForwards[sha3(_msgSig)] = _forward;\n        return true;\n    }\n\n    function _stringGas(string _string) constant internal returns(uint) {\n        return bytes(_string).length * 75; // ~75 gas per byte, empirical shown 68-72.\n    }\n\n    function _transferFee(address _feeFrom, uint _value, string _reference) internal returns(bool) {\n        if (feeAddress == 0x0 || feeAddress == _feeFrom || _value == 0) {\n            return true;\n        }\n        return multiAsset.transferFromWithReference(_feeFrom, feeAddress, _value, symbol, _reference);\n    }\n\n    function _returnFee(address _to, uint _value) internal returns(bool, bool) {\n        if (feeAddress == 0x0 || feeAddress == _to || _value == 0) {\n            return (false, true);\n        }\n        if (!multiAsset.transferFromWithReference(feeAddress, _to, _value, symbol, \"Fee return\")) {\n            throw;\n        }\n        return (false, true);\n    }\n\n    function _applyRefund(uint _startGas) internal returns(bool) {\n        uint refund = (_startGas - msg.gas + refundGas) * tx.gasprice;\n        return _refund(refund);\n    }\n\n    function _refund(uint _value) internal returns(bool) {\n        if (tx.gasprice > txGasPriceLimit) {\n            return false;\n        }\n        return treasury.withdraw(tx.origin, _value);\n    }\n\n    function _allow() internal {\n        __isAllowed = true;\n    }\n\n    function _disallow() internal {\n        __isAllowed = false;\n    }\n\n    function calculateFee(uint _value) constant returns(uint) {\n        uint fee = (_value * feePercent) / 10000;\n        if (fee < absMinFee) {\n            return absMinFee;\n        }\n        if (fee > absMaxFee) {\n            return absMaxFee;\n        }\n        return fee;\n    }\n\n    function calculateFeeDynamic(uint _value, uint _additionalGas) constant returns(uint) {\n        uint fee = calculateFee(_value);\n        if (_additionalGas <= 7500) {\n            return fee;\n        }\n        // Assuming that absMinFee covers at least 100000 gas refund, let's add another absMinFee\n        // for every other 100000 additional gas.\n        uint additionalFee = ((_additionalGas / 100000) + 1) * absMinFee;\n        return fee + additionalFee;\n    }\n\n    function takeFee(address _feeFrom, uint _value, string _reference) noValue() checkAccess(\"fee\") returns(bool) {\n        return _transferFee(_feeFrom, _value, _reference);\n    }\n\n    function _transfer(address _to, uint _value) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferCallGas;\n        uint fee = calculateFee(_value);\n        if (!_transferFee(msg.sender, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transfer(_to, _value);\n        _disallow();\n        if (!success) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function _transferFrom(address _from, address _to, uint _value) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferFromCallGas;\n        _allow();\n        uint fee = calculateFee(_value);\n        if (!_transferFee(_from, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferFrom(_from, _to, _value);\n        _disallow();\n        if (!success) {\n            return _returnFee(_from, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function _transferToICAP(bytes32 _icap, uint _value) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferToICAPCallGas;\n        uint fee = calculateFee(_value);\n        if (!_transferFee(msg.sender, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferToICAP(_icap, _value);\n        _disallow();\n        if (!success) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function _transferFromToICAP(address _from, bytes32 _icap, uint _value) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferFromToICAPCallGas;\n        uint fee = calculateFee(_value);\n        if (!_transferFee(_from, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferFromToICAP(_from, _icap, _value);\n        _disallow();\n        if (!success) {\n            return _returnFee(_from, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferWithReferenceCallGas;\n        uint additionalGas = _stringGas(_reference);\n        uint fee = calculateFeeDynamic(_value, additionalGas);\n        if (!_transferFee(msg.sender, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferWithReference(_to, _value, _reference);\n        _disallow();\n        if (!success) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas + additionalGas));\n    }\n\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferFromWithReferenceCallGas;\n        uint additionalGas = _stringGas(_reference);\n        uint fee = calculateFeeDynamic(_value, additionalGas);\n        if (!_transferFee(_from, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferFromWithReference(_from, _to, _value, _reference);\n        _disallow();\n        if (!success) {\n            return _returnFee(_from, fee);\n        }\n        return (true, _applyRefund(startGas + additionalGas));\n    }\n\n    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferToICAPWithReferenceCallGas;\n        uint additionalGas = _stringGas(_reference);\n        uint fee = calculateFeeDynamic(_value, additionalGas);\n        if (!_transferFee(msg.sender, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferToICAPWithReference(_icap, _value, _reference);\n        _disallow();\n        if (!success) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas + additionalGas));\n    }\n\n    function _transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) internal returns(bool, bool) {\n        uint startGas = msg.gas + transferFromToICAPWithReferenceCallGas;\n        uint additionalGas = _stringGas(_reference);\n        uint fee = calculateFeeDynamic(_value, additionalGas);\n        if (!_transferFee(_from, fee, \"Transfer fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.transferFromToICAPWithReference(_from, _icap, _value, _reference);\n        _disallow();\n        if (!success) {\n            return _returnFee(_from, fee);\n        }\n        return (true, _applyRefund(startGas + additionalGas));\n    }\n\n    function _approve(address _spender, uint _value) internal returns(bool, bool) {\n        uint startGas = msg.gas + approveCallGas;\n        // Don't take fee when enabling fee taking.\n        // Don't refund either.\n        if (_spender == address(this)) {\n            return (super.approve(_spender, _value), false);\n        }\n        uint fee = calculateFee(0);\n        if (!_transferFee(msg.sender, fee, \"Approve fee\")) {\n            return (false, false);\n        }\n        _allow();\n        bool success = super.approve(_spender, _value);\n        _disallow();\n        if (!success) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function _setCosignerAddress(address _cosigner) internal returns(bool, bool) {\n        uint startGas = msg.gas + setCosignerCallGas;\n        uint fee = calculateFee(0);\n        if (!_transferFee(msg.sender, fee, \"Cosigner fee\")) {\n            return (false, false);\n        }\n        if (!super.setCosignerAddress(_cosigner)) {\n            return _returnFee(msg.sender, fee);\n        }\n        return (true, _applyRefund(startGas));\n    }\n\n    function transfer(address _to, uint _value) returns(bool) {\n        bool success;\n        (success,) = _transfer(_to, _value);\n        return success;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        bool success;\n        (success,) = _transferFrom(_from, _to, _value);\n        return success;\n    }\n\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n        bool success;\n        (success,) = _transferToICAP(_icap, _value);\n        return success;\n    }\n\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool) {\n        bool success;\n        (success,) = _transferFromToICAP(_from, _icap, _value);\n        return success;\n    }\n\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n        bool success;\n        (success,) = _transferWithReference(_to, _value, _reference);\n        return success;\n    }\n\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\n        bool success;\n        (success,) = _transferFromWithReference(_from, _to, _value, _reference);\n        return success;\n    }\n\n    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\n        bool success;\n        (success,) = _transferToICAPWithReference(_icap, _value, _reference);\n        return success;\n    }\n\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool) {\n        bool success;\n        (success,) = _transferFromToICAPWithReference(_from, _icap, _value, _reference);\n        return success;\n    }\n\n    function approve(address _spender, uint _value) returns(bool) {\n        bool success;\n        (success,) = _approve(_spender, _value);\n        return success;\n    }\n\n    function setCosignerAddress(address _cosigner) returns(bool) {\n        bool success;\n        (success,) = _setCosignerAddress(_cosigner);\n        return success;\n    }\n\n    function checkTransfer(address _to, uint _value) constant returns(bool, bool) {\n        return _transfer(_to, _value);\n    }\n\n    function checkTransferFrom(address _from, address _to, uint _value) constant returns(bool, bool) {\n        return _transferFrom(_from, _to, _value);\n    }\n\n    function checkTransferToICAP(bytes32 _icap, uint _value) constant returns(bool, bool) {\n        return _transferToICAP(_icap, _value);\n    }\n\n    function checkTransferFromToICAP(address _from, bytes32 _icap, uint _value) constant returns(bool, bool) {\n        return _transferFromToICAP(_from, _icap, _value);\n    }\n\n    function checkTransferWithReference(address _to, uint _value, string _reference) constant returns(bool, bool) {\n        return _transferWithReference(_to, _value, _reference);\n    }\n\n    function checkTransferFromWithReference(address _from, address _to, uint _value, string _reference) constant returns(bool, bool) {\n        return _transferFromWithReference(_from, _to, _value, _reference);\n    }\n\n    function checkTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) constant returns(bool, bool) {\n        return _transferToICAPWithReference(_icap, _value, _reference);\n    }\n\n    function checkTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) constant returns(bool, bool) {\n        return _transferFromToICAPWithReference(_from, _icap, _value, _reference);\n    }\n\n    function checkApprove(address _spender, uint _value) constant returns(bool, bool) {\n        return _approve(_spender, _value);\n    }\n\n    function checkSetCosignerAddress(address _cosigner) constant returns(bool, bool) {\n        return _setCosignerAddress(_cosigner);\n    }\n\n    function checkForward(bytes _data) constant returns(bool, bool) {\n        return _forward(allowedForwards[sha3(_data[0], _data[1], _data[2], _data[3])], _data);\n    }\n\n    function _forward(address _to, bytes _data) internal returns(bool, bool) {\n        uint startGas = msg.gas + forwardCallGas;\n        uint additionalGas = (_data.length * 50);  // 50 gas per byte;\n        if (_to == 0x0) {\n            return (false, _safeFalse());\n        }\n        uint fee = calculateFeeDynamic(0, additionalGas);\n        if (!_transferFee(msg.sender, fee, \"Forward fee\")) {\n            return (false, false);\n        }\n        if (!_to.call.value(msg.value)(_data)) {\n            _returnFee(msg.sender, fee);\n            return (false, _safeFalse());\n        }\n        return (true, _applyRefund(startGas + additionalGas));\n    }\n\n    function () returns(bool) {\n        bool success;\n        (success,) = _forward(allowedForwards[sha3(msg.sig)], msg.data);\n        return success;\n    }\n\n    function emitTransfer(address _from, address _to, uint _value) onlyMultiAsset() {\n        Transfer(_from, _to, _value);\n        if (__isAllowed) {\n            return;\n        }\n        if (feeAddress == 0x0 || _to == feeAddress || _from == feeAddress) {\n            return;\n        }\n        if (_transferFee(_from, calculateFee(_value), \"Transfer fee\")) {\n            return;\n        }\n        throw;\n    }\n\n    function emitApprove(address _from, address _spender, uint _value) onlyMultiAsset() {\n        Approve(_from, _spender, _value);\n        if (__isAllowed) {\n            return;\n        }\n        if (feeAddress == 0x0 || _spender == address(this)) {\n            return;\n        }\n        if (_transferFee(_from, calculateFee(0), \"Approve fee\")) {\n            return;\n        }\n        throw;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgSig\",\"type\":\"bytes4\"},{\"name\":\"_forward\",\"type\":\"address\"}],\"name\":\"setForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setCosignerCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"checkForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stackDepthLib\",\"type\":\"address\"}],\"name\":\"setupStackDepthLib\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromToICAPCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txGasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approveCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRefundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setupFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiAsset\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_txGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setupTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absMaxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambiC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferToICAPWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfer\",\"type\":\"uint256\"},{\"name\":\"_transferFrom\",\"type\":\"uint256\"},{\"name\":\"_transferToICAP\",\"type\":\"uint256\"},{\"name\":\"_transferFromToICAP\",\"type\":\"uint256\"},{\"name\":\"_transferWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferFromWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferToICAPWithReference\",\"type\":\"uint256\"},{\"name\":\"_transferFromToICAPWithReference\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"uint256\"},{\"name\":\"_forward\",\"type\":\"uint256\"},{\"name\":\"_setCosigner\",\"type\":\"uint256\"}],\"name\":\"setOperationsCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwardCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isImmortal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setAmbiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cosigner\",\"type\":\"address\"}],\"name\":\"setCosignerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedForwards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFromToICAPWithReferenceCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absMinFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferToICAPCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cosigner\",\"type\":\"address\"}],\"name\":\"checkSetCosignerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"calculateFeeDynamic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"checkTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeFrom\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"takeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_absMinFee\",\"type\":\"uint256\"},{\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"name\":\"_absMaxFee\",\"type\":\"uint256\"}],\"name\":\"setFeeStructure\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"immortality\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"}]",
  "bytecode": ""
}