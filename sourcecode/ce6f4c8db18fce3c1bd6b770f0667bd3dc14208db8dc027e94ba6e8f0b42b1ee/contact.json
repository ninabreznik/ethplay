{
  "address": "0x0094110c81183740c23d561818500ce0c8222d8b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bitscreen",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-14\n*/\n\npragma solidity ^0.4.0;\ncontract Bitscreen {\n\n    struct IPFSHash {\n    bytes32 hash;\n    uint8 hashFunction;\n    uint8 size;\n    }\n    event ImageChange(bytes32 _hash,uint8 _hashFunction,uint8 _size, uint _cost);\n    event PriceChange(uint price);\n    \n    struct ScreenData {\n    uint currTopBid;\n    uint currTopBidTimeStamp;\n    uint lifetimeValue; //total eth that has gone into contract (historical)\n    uint periodPercentagePriceDecrease;\n    uint PriceDecreasePeriodLengthSecs;\n    address currHolder;\n    uint8 heightRatio;\n    uint8 widthRatio;\n    string country;\n    }\n    \n\n    struct ContentRules {\n        bool sexual;\n        bool violent;\n        bool political;\n        bool controversial;\n        bool illegal; //content that goes agaisnt the law of the country it is operating in\n    }\n    \n    event RuleChange(bool _sexual,bool _violent,bool _political,bool _controversial,bool _illegal);\n\n    struct AdBuyerInfo{\n        uint numberAdBuys;\n        bool cashedOut;\n    }\n    \n    struct DividendInfo{\n        uint  activeAdBuysForDividend; //gets lowered (according to their numberAdBuys) when someone cashes out\n        uint  ownerpool;\n        uint  dividendPool;\n        mapping(address => AdBuyerInfo) adbuyerMap;\n    }\n    \n\n    //contract variables\n\n    //creator of the contract\n    address public owner;\n    \n    //total eth currently in contract\n    uint public contractValue;\n\n    //current ipfs hash \n    IPFSHash public currPicHash;\n    \n    //current state of the screen\n    ScreenData public screenstate;\n    ContentRules public rules;\n    address[] private badAddresses;\n    \n    //current dividend info\n    DividendInfo public dividendinfo;\n\n    function Bitscreen(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize, uint8 _heightRatio, uint8 _widthRatio, string _country, uint _periodPercentagePriceDecrease,uint _priceDecreasePeriodLengthSecs) public {\n        owner = msg.sender;\n        currPicHash = IPFSHash(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n        screenstate = ScreenData(0,now,0,_periodPercentagePriceDecrease,_priceDecreasePeriodLengthSecs,msg.sender,_heightRatio,_widthRatio,_country);\n        rules = ContentRules(false,false,false,false,false);\n        dividendinfo=DividendInfo(0,0,0);\n    }\n    \n\n    function withdrawOwnerAmount() external{\n        if(msg.sender == owner) { // Only let the contract creator do this\n            uint withdrawAmount = dividendinfo.ownerpool;\n            dividendinfo.ownerpool=0;\n            contractValue-=withdrawAmount;\n            msg.sender.transfer(withdrawAmount);\n        }else{\n            revert();\n        }\n    }\n    \n    \n    //request to know how much dividend you can get\n    function inquireDividentAmount()  view external returns(uint){\n        uint dividendToSend=calcuCurrTxDividend(msg.sender);\n        return dividendToSend;\n    }\n    \n    function withdrawDividend() external{\n        uint dividendToSend=calcuCurrTxDividend(msg.sender);\n        if(dividendToSend==0){\n            revert();\n        }else{\n        uint senderNumAdbuys=dividendinfo.adbuyerMap[msg.sender].numberAdBuys;\n        dividendinfo.activeAdBuysForDividend-=senderNumAdbuys;\n        dividendinfo.dividendPool-=dividendToSend;\n        contractValue-=dividendToSend;\n        dividendinfo.adbuyerMap[msg.sender].cashedOut=true;\n        dividendinfo.adbuyerMap[msg.sender].numberAdBuys=0;\n        \n        //send\n        msg.sender.transfer(dividendToSend);\n        }\n    }\n    \n    function calcuCurrTxDividend(address dividentRecepient) view private returns(uint) {\n        uint totaldividend;\n        if(dividendinfo.activeAdBuysForDividend==0 || dividendinfo.adbuyerMap[dividentRecepient].cashedOut){ \n            totaldividend=0;\n        }else{\n            totaldividend=(dividendinfo.dividendPool*dividendinfo.adbuyerMap[dividentRecepient].numberAdBuys)/(dividendinfo.activeAdBuysForDividend);\n        }\n        return totaldividend;\n    }\n    \n    function getBadAddresses() external constant returns (address[]) {\n        if(msg.sender == owner) {\n            return badAddresses;\n        }else{\n            revert();\n        }\n    }\n\n    function changeRules(bool _sexual,bool _violent, bool _political, bool _controversial, bool _illegal) public {\n                if(msg.sender == owner) {\n                rules.sexual=_sexual;\n                rules.violent=_violent;\n                rules.political=_political;\n                rules.controversial=_controversial;\n                rules.illegal=_illegal;\n                \n                RuleChange(_sexual,_violent,_political,_controversial,_illegal);\n                \n                }else{\n                revert();\n                }\n    }\n\n\n    function calculateCurrDynamicPrice() public view returns (uint){\n        uint currDynamicPrice;\n        uint periodLengthSecs=screenstate.PriceDecreasePeriodLengthSecs;\n        \n        uint ellapsedPeriodsSinceLastBid= (now - screenstate.currTopBidTimeStamp)/periodLengthSecs;\n        \n        uint totalDecrease=((screenstate.currTopBid*screenstate.periodPercentagePriceDecrease*ellapsedPeriodsSinceLastBid)/100);\n        \n        if(totalDecrease>screenstate.currTopBid){\n            currDynamicPrice=0;\n        }else{\n            currDynamicPrice= screenstate.currTopBid-totalDecrease;\n        }\n        \n        return currDynamicPrice;\n        \n    }\n\n    function truncToThreeDecimals(uint amount) private pure returns (uint){\n        return ((amount/1000000000000000)*1000000000000000);\n    }\n\n\n    function changeBid(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) payable external {\n        \n            uint dynamicPrice=calculateCurrDynamicPrice();\n        \n            if(msg.value>dynamicPrice) { //prev: msg.value>screenstate.currTopBid\n            \n                if(truncToThreeDecimals(msg.value)-truncToThreeDecimals(dynamicPrice)<1000000000000000){\n                    revert();\n                }else{\n                    \n                screenstate.currTopBid=msg.value;\n                screenstate.currTopBidTimeStamp=now;\n                screenstate.currHolder=msg.sender;\n                \n                screenstate.lifetimeValue+=msg.value;\n                contractValue+=msg.value;//total eth CURRENTLY IN contract\n                //store 33% to dividend pool, send 66% to ownerpool\n                dividendinfo.dividendPool+=msg.value/3;\n                dividendinfo.ownerpool+=((msg.value*2)/3);\n                \n                currPicHash.hash=_ipfsHash;\n                currPicHash.hashFunction=_ipfsHashFunc;\n                currPicHash.size=_ipfsHashSize;\n                \n                dividendinfo.activeAdBuysForDividend++;\n                if(dividendinfo.adbuyerMap[msg.sender].numberAdBuys==0){\n                    dividendinfo.adbuyerMap[msg.sender]=AdBuyerInfo(1,false);\n                }else{\n                    dividendinfo.adbuyerMap[msg.sender].numberAdBuys++;\n                }\n                \n                ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize,screenstate.currTopBid);\n                \n                }\n                \n            }else {\n                revert();\n            }\n    }\n    \n    function emergencyOverwrite(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) external {\n        if(msg.sender == owner) { // Only let the contract creator do this\n            badAddresses.push(screenstate.currHolder);\n            currPicHash.hash=_ipfsHash;\n            currPicHash.hashFunction=_ipfsHashFunc;\n            currPicHash.size=_ipfsHashSize;\n            screenstate.currHolder=msg.sender;\n            ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize,0);\n        }else{\n            revert();\n        }\n    }\n    \n    function changePriceDecreasePeriod(uint newPeriod) public{\n        require(msg.sender==owner);\n        screenstate.PriceDecreasePeriodLengthSecs=newPeriod;\n    }\n    \n    function changePriceDecreasePercent(uint newPercent) public{\n        require(msg.sender==owner);\n        screenstate.periodPercentagePriceDecrease=newPercent;\n    }\n    \n    \n    function () payable public {}\n\n}",
  "bytecode": "",
  "constructorArguments": "bd833c7bae634f9e2e89ac798e07ac19c87bfe622fe6fba995c12a2b36de0000000000000000000000000000000000000000000000000000000000"
}