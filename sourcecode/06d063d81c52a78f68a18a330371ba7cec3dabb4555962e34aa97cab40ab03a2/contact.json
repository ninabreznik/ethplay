{
  "address": "0x216b450d49d7eab6a83ffaa68c90bc5dbbaca985",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SaliICO",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.5.2;\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    \n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract SALIToken is ERC20Interface{\n    string public name = \"SALI Sample\";\n    string public symbol = \"SLI\";\n    uint public decimals = 0;\n    \n    uint public supply;\n    address public founder;\n    \n    mapping(address => uint) public balances;\n    \n    mapping(address => mapping(address => uint)) allowed;\n    \n    //allowed[0x1111....][0x22222...] = 100;\n    \n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n\n    constructor() public{\n        supply = 100000000;\n        founder = msg.sender;\n        balances[founder] = supply;\n    }\n    // ALLOWANCE()\n    function allowance(address tokenOwner, address spender) view public returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n    \n    //APPROVE ()\n        function approve(address spender, uint tokens) public returns(bool){\n        require(balances[msg.sender] >= tokens);\n        require(tokens > 0);\n        \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    //TRANSFERFROM()\n    //transfer tokens from the  owner account to the account that calls the function\n    function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][to] >= tokens);\n        require(balances[from] >= tokens);\n        \n        balances[from] -= tokens;\n        balances[to] += tokens;\n        \n        \n        allowed[from][to] -= tokens;\n        \n        return true;\n    }\n    \n    function totalSupply() public view returns (uint){\n        return supply;\n    }\n    \n    function balanceOf(address tokenOwner) public view returns (uint balance){\n         return balances[tokenOwner];\n     }\n     //TRANSFER()\n    function transfer(address to, uint tokens) public returns (bool success){\n         require(balances[msg.sender] >= tokens && tokens > 0);\n         \n         balances[to] += tokens;\n         balances[msg.sender] -= tokens;\n         emit Transfer(msg.sender, to, tokens);\n         return true;\n     }\n}\n\ncontract SaliICO is SALIToken{\n    address public admin;\n    \n    \n    address payable public deposit;\n    \n    //token price in wei: 1SALI = 0.004 ETHER, 1 ETHER = 250 SALI\n    uint tokenPrice = 4000000000000000;\n    \n    //3000 Ether in wei as HARDCAP\n    uint public hardCap = 3000000000000000000000;\n    \n    uint public raisedAmount;\n    \n    uint public saleStart = now;\n    uint public saleEnd = now + 7884000; //ICO will run in 3 months\n    uint public coinTradeStart = saleEnd + 2628000; //transferable in a month after salesEnd\n    \n    uint public maxInvestment = 10500000000000000000; // 10.5 ETH AS MAX INVESTMENT\n    uint public minInvestment = 100000000000000000; // 0.1 ETH AS MINIMUM INVESTMENT\n    \n    enum State { beforeStart, running, afterEnd, halted}\n    State public icoState;\n    \n    \n    modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n    \n    event Invest(address investor, uint value, uint tokens);\n    \n    \n    constructor(address payable _deposit) public{\n        deposit = _deposit;\n        admin = msg.sender;\n        icoState = State.beforeStart;\n    }\n    \n    //emergency stop\n    function halt() public onlyAdmin{\n        icoState = State.halted;\n    }\n    \n    //restart \n    function unhalt() public onlyAdmin{\n        icoState = State.running;\n    }\n    \n    \n    //only the admin can change the deposit address\n    function changeDepositAddress(address payable newDeposit) public onlyAdmin{\n        deposit = newDeposit;\n    }\n    \n    \n    //returns ico state\n    function getCurrentState() public view returns(State){\n        if(icoState == State.halted){\n            return State.halted;\n        }else if(block.timestamp < saleStart){\n            return State.beforeStart;\n        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){\n            return State.running;\n        }else{\n            return State.afterEnd;\n        }\n    }\n    \n    \n    function invest() payable public returns(bool){\n        //invest only in running\n        icoState = getCurrentState();\n        require(icoState == State.running);\n        \n        require(msg.value >= minInvestment && msg.value <= maxInvestment);\n        \n        uint tokens = msg.value / tokenPrice;\n        \n        //hardCap not reached\n        require(raisedAmount + msg.value <= hardCap);\n        \n        raisedAmount += msg.value;\n        \n        //add tokens to investor balance from founder balance\n        balances[msg.sender] += tokens;\n        balances[founder] -= tokens;\n        \n        deposit.transfer(msg.value);//transfer eth to the deposit address\n        \n        //emit event\n        emit Invest(msg.sender, msg.value, tokens);\n        \n        return true;\n        \n\n    }\n    \n    function () payable external{\n        invest();\n    }\n    \n    \n    \n    function burn() public returns(bool){\n        icoState = getCurrentState();\n        require(icoState == State.afterEnd);\n        balances[founder] = 0;\n        \n    }\n    \n    \n    function transfer(address to, uint value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transfer(to, value);\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transferFrom(_from, _to, _value);\n    }\n    \n}",
  "bytecode": "60806040526040518060400160405280600b81526020017f53414c492053616d706c6500000000000000000000000000000000000000000081525060009080519060200190620000519291906200028f565b506040518060400160405280600381526020017f534c490000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f9291906200028f565b506000600255660e35fa931a000060095568a2a15d09519be00000600a5542600c5562784ce04201600d55622819a0600d5401600e556791b77e5e5d9a0000600f5567016345785d8a0000601055348015620000fa57600080fd5b5060405160208062001a22833981018060405260208110156200011c57600080fd5b81019080805190602001909291905050506305f5e10060038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060035460056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601160006101000a81548160ff021916908360038111156200028357fe5b0217905550506200033e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d257805160ff191683800117855562000303565b8280016001018555821562000303579182015b8281111562000302578251825591602001919060010190620002e5565b5b50905062000312919062000316565b5090565b6200033b91905b80821115620003375760008160009055506001016200031d565b5090565b90565b6116d4806200034e6000396000f3fe6080604052600436106101b65760003560e01c806370a08231116100ec578063c59ee1dc1161008a578063dd62ed3e11610064578063dd62ed3e14610875578063e8b5e51f146108fa578063f851a4401461091c578063fb86a40414610973576101b6565b8063c59ee1dc146107dc578063cb3e64fd14610807578063d0e30db01461081e576101b6565b8063a9059cbb116100c6578063a9059cbb146106e8578063ab0bcc411461075b578063bf60401914610786578063c10b9358146107b1576101b6565b806370a08231146105c85780638ac2c6801461062d57806395d89b4114610658576101b6565b8063313ce5671161015957806344f387561161013357806344f38756146104d05780634d853ee5146105095780635ed7ca5b146105605780636d58c88f14610577576101b6565b8063313ce5671461043d578063378aa7011461046857806344df8e70146104a1576101b6565b8063095ea7b311610195578063095ea7b3146102a757806318160ddd1461031a57806323b872dd1461034557806327e235e3146103d8576101b6565b80622e1316146101c1578063047fc9aa146101ec57806306fdde0314610217575b6101be61099e565b50005b3480156101cd57600080fd5b506101d6610bec565b6040518082815260200191505060405180910390f35b3480156101f857600080fd5b50610201610bf2565b6040518082815260200191505060405180910390f35b34801561022357600080fd5b5061022c610bf8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026c578082015181840152602081019050610251565b50505050905090810190601f1680156102995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b357600080fd5b50610300600480360360408110156102ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c96565b604051808215151515815260200191505060405180910390f35b34801561032657600080fd5b5061032f610de1565b6040518082815260200191505060405180910390f35b34801561035157600080fd5b506103be6004803603606081101561036857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610deb565b604051808215151515815260200191505060405180910390f35b3480156103e457600080fd5b50610427600480360360208110156103fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e0e565b6040518082815260200191505060405180910390f35b34801561044957600080fd5b50610452610e26565b6040518082815260200191505060405180910390f35b34801561047457600080fd5b5061047d610e2c565b6040518082600381111561048d57fe5b60ff16815260200191505060405180910390f35b3480156104ad57600080fd5b506104b6610ea1565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b506104e5610f69565b604051808260038111156104f557fe5b60ff16815260200191505060405180910390f35b34801561051557600080fd5b5061051e610f7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056c57600080fd5b50610575610fa2565b005b34801561058357600080fd5b506105c66004803603602081101561059a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611022565b005b3480156105d457600080fd5b50610617600480360360208110156105eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c0565b6040518082815260200191505060405180910390f35b34801561063957600080fd5b50610642611109565b6040518082815260200191505060405180910390f35b34801561066457600080fd5b5061066d61110f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ad578082015181840152602081019050610692565b50505050905090810190601f1680156106da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106f457600080fd5b506107416004803603604081101561070b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111ad565b604051808215151515815260200191505060405180910390f35b34801561076757600080fd5b506107706111ce565b6040518082815260200191505060405180910390f35b34801561079257600080fd5b5061079b6111d4565b6040518082815260200191505060405180910390f35b3480156107bd57600080fd5b506107c66111da565b6040518082815260200191505060405180910390f35b3480156107e857600080fd5b506107f16111e0565b6040518082815260200191505060405180910390f35b34801561081357600080fd5b5061081c6111e6565b005b34801561082a57600080fd5b50610833611266565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088157600080fd5b506108e46004803603604081101561089857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061128c565b6040518082815260200191505060405180910390f35b61090261099e565b604051808215151515815260200191505060405180910390f35b34801561092857600080fd5b50610931611313565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561097f57600080fd5b50610988611339565b6040518082815260200191505060405180910390f35b60006109a8610e2c565b601160006101000a81548160ff021916908360038111156109c557fe5b0217905550600160038111156109d757fe5b601160009054906101000a900460ff1660038111156109f257fe5b146109fc57600080fd5b6010543410158015610a105750600f543411155b610a1957600080fd5b60006009543481610a2657fe5b049050600a5434600b54011115610a3c57600080fd5b34600b6000828254019250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508060056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b70573d6000803e3d6000fd5b507f4ae4bd7655e0d350876a23cd90c4227b13db560e34435c6a488150a9c844bf5f333483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1600191505090565b600f5481565b60035481565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ce457600080fd5b60008211610cf157600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b6000600e544211610dfb57600080fd5b610e0684848461133f565b509392505050565b60056020528060005260406000206000915090505481565b60025481565b6000600380811115610e3a57fe5b601160009054906101000a900460ff166003811115610e5557fe5b1415610e645760039050610e9e565b600c54421015610e775760009050610e9e565b600c544210158015610e8b5750600d544211155b15610e995760019050610e9e565b600290505b90565b6000610eab610e2c565b601160006101000a81548160ff02191690836003811115610ec857fe5b021790555060026003811115610eda57fe5b601160009054906101000a900460ff166003811115610ef557fe5b14610eff57600080fd5b600060056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555090565b601160009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffc57600080fd5b6003601160006101000a81548160ff0219169083600381111561101b57fe5b0217905550565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461107c57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60105481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111a55780601f1061117a576101008083540402835291602001916111a5565b820191906000526020600020905b81548152906001019060200180831161118857829003601f168201915b505050505081565b6000600e5442116111bd57600080fd5b6111c78383611545565b5092915050565b600c5481565b600e5481565b600d5481565b600b5481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461124057600080fd5b6001601160006101000a81548160ff0219169083600381111561125f57fe5b0217905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156113ca57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561141657600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600190509392505050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115965750600082115b61159f57600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509291505056fea165627a7a7230582001081a2448e2c9b92677348e085779fc389fb96c027294a528c59f6131d42a4a0029000000000000000000000000b92d273980ba118f81f037f8dea66ddf6e60d298",
  "constructorArguments": "000000000000000000000000b92d273980ba118f81f037f8dea66ddf6e60d298"
}