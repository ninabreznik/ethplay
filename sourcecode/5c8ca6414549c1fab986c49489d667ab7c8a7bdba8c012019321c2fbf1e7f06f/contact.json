{
  "address": "0x5af3630746975d9cbaf236d4117b08a2c7a0bd77",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "COCO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-13\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title PoSTokenStandard\n * @dev the interface of PoSTokenStandard\n */\ncontract PoSTokenStandard {\n    uint256 public stakeStartTime;\n    uint256 public stakeMinAge;\n    uint256 public stakeMaxAge;\n    function mint() returns (bool);\n    function coinAge() constant returns (uint256);\n    function annualInterest() constant returns (uint256);\n    event Mint(address indexed _address, uint _reward);\n}\n\n\ncontract COCO is ERC20,PoSTokenStandard,Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"Cookie Coin\";\n    string public symbol = \"COCO\";\n    uint public decimals = 18;\n\n    uint public chainStartTime; //chain start time\n    uint public chainStartBlockNumber; //chain start block number\n    uint public stakeStartTime; //stake start time\n    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\n    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\n    uint public maxMintProofOfStake = 50000000000000000; // default 5% annual interest Years 3-15\n\tuint public yearOneMultiplier = 72; //72 times the default 5% (360%)\n\tuint public yearTwoMultiplier = 2; //2 times the default 5% (10%)\n\t\n    uint public totalSupply;\n    uint public maxTotalSupply;\n    uint public totalInitialSupply;\n\n    struct transferInStruct{\n    uint128 amount;\n    uint64 time;\n    }\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    mapping(address => transferInStruct[]) transferIns;\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    modifier canPoSMint() {\n        require(totalSupply < maxTotalSupply);\n        _;\n    }\n\n    function COCO() {\n        maxTotalSupply = 32200000000000000000000000; // 32.2 Mil.\n        totalInitialSupply = 3200000000000000000000000; // 3.2 Mil.\n\n        chainStartTime = now;\n        chainStartBlockNumber = block.number;\n\n        balances[msg.sender] = totalInitialSupply;\n        totalSupply = totalInitialSupply;\n    }\n\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n        if(msg.sender == _to) return mint();\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        uint64 _now = uint64(now);\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        if(transferIns[_from].length > 0) delete transferIns[_from];\n        uint64 _now = uint64(now);\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function mint() canPoSMint returns (bool) {\n        if(balances[msg.sender] <= 0) return false;\n        if(transferIns[msg.sender].length <= 0) return false;\n\n        uint reward = getProofOfStakeReward(msg.sender);\n        if(reward <= 0) return false;\n\n        totalSupply = totalSupply.add(reward);\n        balances[msg.sender] = balances[msg.sender].add(reward);\n        delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n        Mint(msg.sender, reward);\n        return true;\n    }\n\n    function getBlockNumber() returns (uint blockNumber) {\n        blockNumber = block.number.sub(chainStartBlockNumber);\n    }\n\n    function coinAge() constant returns (uint myCoinAge) {\n        myCoinAge = getCoinAge(msg.sender,now);\n    }\n\t\n\t//Interest Check Function\n\n    function annualInterest() constant returns(uint interest) {\n        uint _now = now;\n        interest = maxMintProofOfStake;\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\n            interest = maxMintProofOfStake * yearOneMultiplier;\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 1){\n            interest = maxMintProofOfStake * yearTwoMultiplier;\n        }\n    }\n\n    function getProofOfStakeReward(address _address) internal returns (uint) {\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n\n        uint _now = now;\n        uint _coinAge = getCoinAge(_address, _now);\n        if(_coinAge <= 0) return 0;\n\n        uint interest = maxMintProofOfStake;\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n        if((_now.sub(stakeStartTime)).div(1 years) == 0) {\n            // 1st year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\n            interest = maxMintProofOfStake * yearOneMultiplier;\n        } else if((_now.sub(stakeStartTime)).div(1 years) == 1){\n            // 2nd year effective annual interest rate is 50%\n            interest = maxMintProofOfStake * yearTwoMultiplier;\n        }\n\n        return (_coinAge * interest).div(365 * (10**decimals));\n    }\n\n    function getCoinAge(address _address, uint _now) internal returns (uint _coinAge) {\n        if(transferIns[_address].length <= 0) return 0;\n\n        for (uint i = 0; i < transferIns[_address].length; i++){\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n        }\n    }\n\n    function ownerSetStakeStartTime(uint timestamp) onlyOwner {\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime));\n        stakeStartTime = timestamp;\n    }\n\n    function ownerBurnToken(uint _value) onlyOwner {\n        require(_value > 0);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n        totalSupply = totalSupply.sub(_value);\n        totalInitialSupply = totalInitialSupply.sub(_value);\n        maxTotalSupply = maxTotalSupply.sub(_value*10);\n\n        Burn(msg.sender, _value);\n    }\n\n    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner returns (bool) {\n        require( _recipients.length > 0 && _recipients.length == _values.length);\n\n        uint total = 0;\n        for(uint i = 0; i < _values.length; i++){\n            total = total.add(_values[i]);\n        }\n        require(total <= balances[msg.sender]);\n\n        uint64 _now = uint64(now);\n        for(uint j = 0; j < _recipients.length; j++){\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\n            Transfer(msg.sender, _recipients[j], _values[j]);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(total);\n        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n\n        return true;\n    }\n\t\n\tfunction setBaseInterest(uint amount) onlyOwner{\n\t\tmaxMintProofOfStake = amount;\n\t}\n\t\n\tfunction setYearOneMultiplier (uint amount) onlyOwner{\n\t\tyearOneMultiplier = amount;\n\t}\n\t\n\tfunction setYearTwoMultiplier (uint amount) onlyOwner{\n\t\tyearTwoMultiplier = amount;\n\t}\n}",
  "bytecode": "60806040526040805190810160405280600b81526020017f436f6f6b696520436f696e00000000000000000000000000000000000000000081525060059080519060200190620000519291906200019e565b506040805190810160405280600481526020017f434f434f00000000000000000000000000000000000000000000000000000000815250600690805190602001906200009f9291906200019e565b5060126007556203f480600b556276a700600c5566b1a2bc2ec50000600d556048600e556002600f55348015620000d557600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a1aa29d7f69604a0d0000006011819055506a02a5a058fc295ed00000006012819055504260088190555043600981905550601254601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506012546010819055506200024d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e157805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000211578251825591602001919060010190620001f4565b5b50905062000221919062000225565b5090565b6200024a91905b80821115620002465760008160009055506001016200022c565b5090565b90565b612dc6806200025d6000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610190578063095ea7b3146102205780631249c58b1461028557806318160ddd146102b45780631e1b13c0146102df57806323b872dd1461030a5780632a9edf6f1461038f5780632ab4d052146103bc578063313ce567146103e75780633983af001461041257806342cbb15c1461043f578063559fd7ee1461046a57806359ea2647146104975780635b054f9b146104c257806370a08231146104ed5780637419f1901461054457806388d695b21461056f5780638da5cb5b1461063057806390762a8b1461068757806391432155146106b457806395d89b41146106e15780639fd4da4014610771578063a9059cbb1461079c578063b2552fc414610801578063bd338d851461082c578063cbd8877e14610857578063cd474b0414610882578063dd62ed3e146108ad578063e1c3bac614610924578063f2bb5ce11461094f578063f2fde38b1461097a575b600080fd5b34801561019c57600080fd5b506101a56109bd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e55780820151818401526020810190506101ca565b50505050905090810190601f1680156102125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5b565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b5061029a610be2565b604051808215151515815260200191505060405180910390f35b3480156102c057600080fd5b506102c9610f55565b6040518082815260200191505060405180910390f35b3480156102eb57600080fd5b506102f4610f5b565b6040518082815260200191505060405180910390f35b34801561031657600080fd5b50610375600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6c565b604051808215151515815260200191505060405180910390f35b34801561039b57600080fd5b506103ba6004803603810190808035906020019092919050505061155d565b005b3480156103c857600080fd5b506103d16115e3565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506103fc6115e9565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b5061043d600480360381019080803590602001909291905050506115ef565b005b34801561044b57600080fd5b50610454611655565b6040518082815260200191505060405180910390f35b34801561047657600080fd5b5061049560048036038101908080359060200190929190505050611671565b005b3480156104a357600080fd5b506104ac6116d7565b6040518082815260200191505060405180910390f35b3480156104ce57600080fd5b506104d76116dd565b6040518082815260200191505060405180910390f35b3480156104f957600080fd5b5061052e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116e3565b6040518082815260200191505060405180910390f35b34801561055057600080fd5b5061055961172c565b6040518082815260200191505060405180910390f35b34801561057b57600080fd5b506106166004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611732565b604051808215151515815260200191505060405180910390f35b34801561063c57600080fd5b50610645611dd7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069357600080fd5b506106b260048036038101908080359060200190929190505050611dfd565b005b3480156106c057600080fd5b506106df60048036038101908080359060200190929190505050612134565b005b3480156106ed57600080fd5b506106f661219a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073657808201518184015260208101905061071b565b50505050905090810190601f1680156107635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561077d57600080fd5b50610786612238565b6040518082815260200191505060405180910390f35b3480156107a857600080fd5b506107e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061223e565b604051808215151515815260200191505060405180910390f35b34801561080d57600080fd5b50610816612721565b6040518082815260200191505060405180910390f35b34801561083857600080fd5b506108416127af565b6040518082815260200191505060405180910390f35b34801561086357600080fd5b5061086c6127b5565b6040518082815260200191505060405180910390f35b34801561088e57600080fd5b506108976127bb565b6040518082815260200191505060405180910390f35b3480156108b957600080fd5b5061090e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c1565b6040518082815260200191505060405180910390f35b34801561093057600080fd5b50610939612848565b6040518082815260200191505060405180910390f35b34801561095b57600080fd5b5061096461284e565b6040518082815260200191505060405180910390f35b34801561098657600080fd5b506109bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612854565b005b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a535780601f10610a2857610100808354040283529160200191610a53565b820191906000526020600020905b815481529060010190602001808311610a3657829003601f168201915b505050505081565b600080821480610ae757506000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610af257600080fd5b81601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080601154601054101515610bf757600080fd5b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610c495760009150610f51565b6000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111515610c9e5760009150610f51565b610ca733612930565b9050600081111515610cbc5760009150610f51565b610cd181601054612a2490919063ffffffff16565b601081905550610d2981601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2490919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610db79190612d1c565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546fffffffffffffffffffffffffffffffff1681526020014267ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050503373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a2600191505b5090565b60105481565b6000610f673342612a42565b905090565b6000806000606060048101600036905010151515610f8957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610fc557600080fd5b601460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925061109685601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ce890919063ffffffff16565b601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061112b85601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2490919063ffffffff16565b601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111818584612ce890919063ffffffff16565b601460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36000601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011156112fd57601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006112fc9190612d1c565b5b429150601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280601360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280876fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050600193505050509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b957600080fd5b6000600a54111580156115ce57506008548110155b15156115d957600080fd5b80600a8190555050565b60115481565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164b57600080fd5b80600f8190555050565b600061166c60095443612ce890919063ffffffff16565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116cd57600080fd5b80600e8190555050565b600f5481565b60085481565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a5481565b6000806000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179657600080fd5b600087511180156117a8575085518751145b15156117b357600080fd5b60009350600092505b85518310156117fe576117ef86848151811015156117d657fe5b9060200190602002015185612a2490919063ffffffff16565b935082806001019350506117bc565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561184c57600080fd5b429150600090505b8651811015611b0d576118dd868281518110151561186e57fe5b90602001906020020151601360008a8581518110151561188a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2490919063ffffffff16565b6013600089848151811015156118ef57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060156000888381518110151561194957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604080519081016040528088848151811015156119a657fe5b906020019060200201516fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050508681815181101515611a7b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8884815181101515611ae157fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050611854565b611b5f84601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ce890919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501115611c3957601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611c389190612d1c565b5b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611dc957601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505b600194505050505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5957600080fd5b600081111515611e6857600080fd5b611eba81601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ce890919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611f489190612d1c565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546fffffffffffffffffffffffffffffffff1681526020014267ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050506120a481601054612ce890919063ffffffff16565b6010819055506120bf81601254612ce890919063ffffffff16565b6012819055506120dd600a8202601154612ce890919063ffffffff16565b6011819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219057600080fd5b80600d8190555050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122305780601f1061220557610100808354040283529160200191612230565b820191906000526020600020905b81548152906001019060200180831161221357829003601f168201915b505050505081565b60125481565b60008060406004810160003690501015151561225957600080fd5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561229c57612295610be2565b9250612719565b6122ee84601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ce890919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061238384601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a2490919063ffffffff16565b601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36000601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011156124c257601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006124c19190612d1c565b5b429150601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280866fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050600192505b505092915050565b600080429050600d54915060006127596301e1338061274b600a5485612ce890919063ffffffff16565b612d0190919063ffffffff16565b141561276d57600e54600d540291506127ab565b600161279a6301e1338061278c600a5485612ce890919063ffffffff16565b612d0190919063ffffffff16565b14156127aa57600f54600d540291505b5b5090565b600e5481565b600b5481565b60095481565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600c5481565b600d5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128ec57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600a54421015801561294a57506000600a54115b151561295557600080fd5b4292506129628584612a42565b91506000821115156129775760009350612a1c565b600d54905060006129a96301e1338061299b600a5487612ce890919063ffffffff16565b612d0190919063ffffffff16565b14156129bd57600e54600d540290506129fb565b60016129ea6301e133806129dc600a5487612ce890919063ffffffff16565b612d0190919063ffffffff16565b14156129fa57600f54600d540290505b5b612a19600754600a0a61016d02828402612d0190919063ffffffff16565b93505b505050919050565b6000808284019050838110151515612a3857fe5b8091505092915050565b600080600080601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050111515612a9b5760009250612ce0565b600091505b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015612cdf57612b76600b54601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612b3c57fe5b9060005260206000200160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff16612a2490919063ffffffff16565b841015612b8257612cd2565b612c0c601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612bd157fe5b9060005260206000200160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1685612ce890919063ffffffff16565b9050600c54811115612c1e57600c5490505b612ccf612c376201518083612d0190919063ffffffff16565b601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612c8357fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff160284612a2490919063ffffffff16565b92505b8180600101925050612aa0565b5b505092915050565b6000828211151515612cf657fe5b818303905092915050565b6000808284811515612d0f57fe5b0490508091505092915050565b5080546000825590600052602060002090810190612d3a9190612d3d565b50565b612d9791905b80821115612d9357600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549067ffffffffffffffff021916905550600101612d43565b5090565b905600a165627a7a72305820a5d8a6234b76cc92b858135eea1d5ca408cfcce1c0f058d1043350c838ee615d0029"
}