{
  "address": "0x9081ceb359b6f42640651e11f5bfb4d4b84aa66f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PartialBasic",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-24\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n  * @param _owner address The address which owns the funds.\n  * @param _spender address The address which will spend the funds.\n  * @return A uint256 specifying the amount of tokens still available for the spender.\n  */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Partial Basic\n * @dev Partial Basic is an experimental cryptocurrency that guarantees\n * unconditional, indeterminate rewards to network participants.\n */\ncontract PartialBasic is StandardToken {\n  using SafeMath for uint256;\n\n  string public constant name = \"Partial Basic\"; // solium-disable-line uppercase\n  string public constant symbol = \"PB\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n  uint256 public constant BASE_REWARD = 20000 ether;\n  uint256 private constant PRECISION = 10**18;\n\n  uint256 public totalNodes;\n  uint256 public rewardStartTime;\n  uint256 public rewardCheckpoint;\n  uint256 private rewardTimestamp;\n\n  mapping(address => uint256) public nodes;\n  mapping(address => uint256) private claimed;\n\n  event Mint(address indexed to, uint256 amount);\n  event AddNode(address indexed owner);\n\n  /**\n  * @dev add a node for a specified address.\n  * @param _owner The address to add a node for.\n  */\n  function addNode(address _owner) external {\n    uint256 checkpointCandidate;\n\n    if (rewardStartTime == 0) {\n      // initialise rewards\n      rewardStartTime = block.timestamp;\n    } else {\n      // reward per node must increase to be a valid checkpoint\n      // or a valid reward for this block must have already been checkpointed\n      checkpointCandidate = rewardPerNode();\n      require(checkpointCandidate > rewardCheckpoint || block.timestamp == rewardTimestamp);\n    }\n\n    // claim outstanding rewards\n    sync(_owner);\n\n    if (rewardCheckpoint != checkpointCandidate) {\n      // checkpoint the total reward per node\n      rewardCheckpoint = checkpointCandidate;\n    }\n\n    if (rewardTimestamp != block.timestamp) {\n      // reset the timestamp for the reward\n      rewardTimestamp = block.timestamp;\n    }\n\n    // add node for address\n    nodes[_owner] = nodes[_owner].add(1);\n\n    // prevent new nodes from claiming old rewards\n    claimed[_owner] = rewardCheckpoint.mul(nodes[_owner]);\n\n    // update the total nodes in the network\n    totalNodes = totalNodes.add(1);\n\n    // fire event\n    emit AddNode(_owner);\n  }\n\n  /**\n  * @dev Gets the total reward for a node.\n  * @return A uint256 representing the total reward of a node.\n  */\n  function rewardPerNode() public view returns (uint256) {\n    // no reward if there are no active nodes\n    if (totalNodes == 0) {\n      return;\n    }\n\n    // days since last checkpoint\n    uint256 totalDays = block.timestamp.sub(rewardTimestamp).mul(PRECISION).div(1 days);\n\n    // reward * days / nodes\n    uint256 newReward = BASE_REWARD.mul(totalDays).div(PRECISION).div(totalNodes);\n\n    // checkpoint + newReward\n    return rewardCheckpoint.add(newReward);\n  }\n\n  /**\n  * @dev Gets the outstanding reward of a specified address.\n  * @param _owner The address to query the reward of.\n  * @return A uint256 representing the outstanding reward of the passed address.\n  */\n  function calculateReward(address _owner) public view returns (uint256) {\n    // address must be running a node\n    if (isMining(_owner)) {\n      // return outstanding reward\n      uint256 reward = rewardPerNode().mul(nodes[_owner]);\n      return reward.sub(claimed[_owner]);\n    }\n  }\n\n  /**\n  * @dev sync an outstanding reward for a specified address.\n  * @param _owner The address to sync rewards for.\n  */\n  function sync(address _owner) public {\n    uint256 reward = calculateReward(_owner);\n    if (reward > 0) {\n      claimed[_owner] = claimed[_owner].add(reward);\n      balances[_owner] = balances[_owner].add(reward);\n      emit Mint(_owner, reward);\n      emit Transfer(address(0), _owner, reward);\n    }\n  }\n\n  /**\n  * @dev transfer token for a specified address.\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    sync(msg.sender);\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Transfer tokens from one address to another.\n  * @param _from address The address which you want to send tokens from.\n  * @param _to address The address which you want to transfer to.\n  * @param _value uint256 the amount of tokens to be transferred.\n  */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    sync(_from);\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return A uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner].add(calculateReward(_owner));\n  }\n\n  /**\n  * @dev returns the approximate total number of tokens in existence\n  * @return A uint256 representing the approximate total number of tokens in existence.\n  */\n  function totalSupply() public view returns (uint256) {\n    if (rewardStartTime == 0) {\n      return;\n    }\n\n    // days since start of rewards\n    uint256 totalDays = block.timestamp.sub(rewardStartTime).mul(PRECISION).div(1 days);\n\n    // reward * days\n    return BASE_REWARD.mul(totalDays).div(PRECISION);\n  }\n\n  /**\n  * @dev returns the mining status of the passed address.\n  * @return A uint256 representing the mining status of the passed address.\n  */\n  function isMining(address _owner) public view returns (bool) {\n    return nodes[_owner] != 0;\n  }\n\n  /**\n  * @dev A batch query to get all node information for a specified address.\n  * @param _owner The address to query the details of.\n  * @return A bool representing the mining status of the passed address.\n  * @return A uint256 representing the number of nodes owned by the passed address.\n  * @return A uint256 representing the amount owned by the passed address.\n  * @return A uint256 representing the outstanding reward of the passed address.\n  * @return A uint256 representing the total reward per node.\n  * @return A uint256 representing the total nodes in the network.\n  * @return A uint256 representing the total number of tokens in existence.\n  */\n  function getInfo(address _owner) public view returns (bool, uint256, uint256, uint256, uint256, uint256, uint256) {\n    return (isMining(_owner), nodes[_owner], balanceOf(_owner), calculateReward(_owner), rewardPerNode(), totalNodes, totalSupply());\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50611d28806100206000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306b8ef4a1461012d57806306fdde0314610158578063095ea7b3146101e857806318160ddd1461024d578063189a5a171461027857806322009af6146102cf57806323b872dd146102fa5780632cc138be1461037f578063313ce567146103aa578063613ff46f146103db578063661884631461040657806370a082311461046b5780639592d424146104c257806395d89b41146104ed5780639d95f1cc1461057d578063a5841194146105c0578063a9059cbb14610603578063c416351814610668578063d73dd623146106c3578063d82e396214610728578063dd62ed3e1461077f578063ffdd5cf1146107f6575b600080fd5b34801561013957600080fd5b5061014261087b565b6040518082815260200191505060405180910390f35b34801561016457600080fd5b5061016d610881565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ad578082015181840152602081019050610192565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f457600080fd5b50610233600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ba565b604051808215151515815260200191505060405180910390f35b34801561025957600080fd5b506102626109ac565b6040518082815260200191505060405180910390f35b34801561028457600080fd5b506102b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a43565b6040518082815260200191505060405180910390f35b3480156102db57600080fd5b506102e4610a5b565b6040518082815260200191505060405180910390f35b34801561030657600080fd5b50610365600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a69565b604051808215151515815260200191505060405180910390f35b34801561038b57600080fd5b50610394610e2d565b6040518082815260200191505060405180910390f35b3480156103b657600080fd5b506103bf610e33565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103e757600080fd5b506103f0610e38565b6040518082815260200191505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610efc565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061118d565b6040518082815260200191505060405180910390f35b3480156104ce57600080fd5b506104d76111ef565b6040518082815260200191505060405180910390f35b3480156104f957600080fd5b506105026111f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610542578082015181840152602081019050610527565b50505050905090810190601f16801561056f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058957600080fd5b506105be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061122e565b005b3480156105cc57600080fd5b50610601600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061142c565b005b34801561060f57600080fd5b5061064e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611623565b604051808215151515815260200191505060405180910390f35b34801561067457600080fd5b506106a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061184c565b604051808215151515815260200191505060405180910390f35b3480156106cf57600080fd5b5061070e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611898565b604051808215151515815260200191505060405180910390f35b34801561073457600080fd5b50610769600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a94565b6040518082815260200191505060405180910390f35b34801561078b57600080fd5b506107e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b60565b6040518082815260200191505060405180910390f35b34801561080257600080fd5b50610837600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611be7565b604051808815151515815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b60045481565b6040805190810160405280600d81526020017f5061727469616c2042617369630000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080600060035414156109bf57610a3f565b610a03620151806109f5670de0b6b3a76400006109e760035442611c7990919063ffffffff16565b611c9290919063ffffffff16565b611cca90919063ffffffff16565b9050610a3c670de0b6b3a7640000610a2e8369043c33c1937564800000611c9290919063ffffffff16565b611cca90919063ffffffff16565b91505b5090565b60066020528060005260406000206000915090505481565b69043c33c193756480000081565b6000610a748461142c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ab057600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610afd57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b8857600080fd5b610bd9826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c7990919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c6c826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d3d82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c7990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60035481565b601281565b6000806000806002541415610e4c57610ef7565b610e9062015180610e82670de0b6b3a7640000610e7460055442611c7990919063ffffffff16565b611c9290919063ffffffff16565b611cca90919063ffffffff16565b9150610edd600254610ecf670de0b6b3a7640000610ec18669043c33c1937564800000611c9290919063ffffffff16565b611cca90919063ffffffff16565b611cca90919063ffffffff16565b9050610ef481600454611ce090919063ffffffff16565b92505b505090565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561100d576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110a1565b6110208382611c7990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60006111e861119b83611a94565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b9050919050565b60025481565b6040805190810160405280600281526020017f504200000000000000000000000000000000000000000000000000000000000081525081565b6000806003541415611246574260038190555061126d565b61124e610e38565b9050600454811180611261575060055442145b151561126c57600080fd5b5b6112768261142c565b8060045414151561128957806004819055505b4260055414151561129c57426005819055505b6112ef6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611386600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600454611c9290919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113df6001600254611ce090919063ffffffff16565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f2a7b8f148f3938b7f43daee2d7e0739a41e7c071de51671561efef3b789b9eef60405160405180910390a25050565b600061143782611a94565b9050600081111561161f5761149481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611528816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b600061162e3361142c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561166a57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156116b757600080fd5b611708826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c7990919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061179b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414159050919050565b600061192982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ce090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600080611aa08361184c565b15611b5957611afe600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611af0610e38565b611c9290919063ffffffff16565b9050611b52600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611c7990919063ffffffff16565b9150611b5a565b5b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000806000806000611bfb8861184c565b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c448a61118d565b611c4d8b611a94565b611c55610e38565b600254611c606109ac565b9650965096509650965096509650919395979092949650565b6000828211151515611c8757fe5b818303905092915050565b600080831415611ca55760009050611cc4565b8183029050818382811515611cb657fe5b04141515611cc057fe5b8090505b92915050565b60008183811515611cd757fe5b04905092915050565b60008183019050828110151515611cf357fe5b809050929150505600a165627a7a7230582031580c1587935da3c4af3625bc24fa8ff014414d5071cdc20f485e95f78693770029"
}