{
  "address": "0xfaf378dd7c26ebcfae80f4675fadb3f9d9dfc152",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ELACoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-04\n*/\n\npragma solidity 0.4.21;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\ncontract ELACoin is owned, TokenERC20 {\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    event TransferEnabled (bool);\n    event TransferDisabled (bool);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ELACoin(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20 (initialSupply, tokenName, tokenSymbol) public {\n        TransferAllowed = true;\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        require (TransferAllowed);                          // Check if transfer is enabled\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// Set whether transfer is enabled or disabled\n    \n    bool public TransferAllowed;\n\n    function enableTokenTransfer() onlyOwner public {\n        TransferAllowed = true;\n        emit TransferEnabled (true);\n}\n\n    function disableTokenTransfer() onlyOwner public {\n        TransferAllowed = false;\n        emit TransferDisabled (false);\n}\n}",
  "bytecode": "60606040526003805460ff19166012179055341561001c57600080fd5b604051610996380380610996833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a870260048190559082526005602052604090912055909101905082828260018280516100999291602001906100c7565b5060028180516100ad9291602001906100c7565b50506008805460ff19166001179055506101629350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010857805160ff1916838001178555610135565b82800160010185558215610135579182015b8281111561013557825182559160200191906001019061011a565b50610141929150610145565b5090565b61015f91905b80821115610141576000815560010161014b565b90565b610825806101716000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df57806318160ddd14610169578063313ce5671461018e5780633a764462146101b757806342966c68146101cc57806370a08231146101f6578063795b0e16146102155780638da5cb5b1461022857806395d89b4114610257578063a9059cbb1461026a578063b414d4b61461028c578063dd62ed3e146102ab578063e2a9ca4c146102d0578063e724529c146102e3578063f2fde38b14610307575b600080fd5b34156100ea57600080fd5b6100f2610326565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61017c6103c4565b60405190815260200160405180910390f35b341561019957600080fd5b6101a16103ca565b60405160ff909116815260200160405180910390f35b34156101c257600080fd5b6101ca6103d3565b005b34156101d757600080fd5b6101e2600435610435565b604051901515815260200160405180910390f35b341561020157600080fd5b61017c600160a060020a03600435166104c0565b341561022057600080fd5b6101e26104d2565b341561023357600080fd5b61023b6104db565b604051600160a060020a03909116815260200160405180910390f35b341561026257600080fd5b6100f26104ea565b341561027557600080fd5b6101e2600160a060020a0360043516602435610555565b341561029757600080fd5b6101e2600160a060020a036004351661056b565b34156102b657600080fd5b61017c600160a060020a0360043581169060243516610580565b34156102db57600080fd5b6101ca61059d565b34156102ee57600080fd5b6101ca600160a060020a036004351660243515156105fa565b341561031257600080fd5b6101ca600160a060020a0360043516610686565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103bc5780601f10610391576101008083540402835291602001916103bc565b820191906000526020600020905b81548152906001019060200180831161039f57829003601f168201915b505050505081565b60045481565b60035460ff1681565b60005433600160a060020a039081169116146103ee57600080fd5b6008805460ff191660019081179091557fa410c62368e64b86d7722fd28e698d03bd00719ba95a861b50ceb65efdc6ca4490604051901515815260200160405180910390a1565b600160a060020a0333166000908152600560205260408120548290101561045b57600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b60085460ff1681565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103bc5780601f10610391576101008083540402835291602001916103bc565b60006105623384846106d0565b50600192915050565b60076020526000908152604090205460ff1681565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a039081169116146105b857600080fd5b6008805460ff191690557f1d040ada22acd5a754608ae1bdb429f6680def446797a56d3dcfb930364df25d6000604051901515815260200160405180910390a1565b60005433600160a060020a0390811691161461061557600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a039081169116146106a157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03821615156106e557600080fd5b600160a060020a0383166000908152600560205260409020548190101561070b57600080fd5b600160a060020a038216600090815260056020526040902054818101101561073257600080fd5b600160a060020a03831660009081526007602052604090205460ff161561075857600080fd5b600160a060020a03821660009081526007602052604090205460ff161561077e57600080fd5b60085460ff16151561078f57600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a72305820141ad744a90d032cf422d75fb8da35c14970e8995d1888af48f6af24847967f3002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007454c41436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454c414300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007454c41436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454c414300000000000000000000000000000000000000000000000000000000"
}