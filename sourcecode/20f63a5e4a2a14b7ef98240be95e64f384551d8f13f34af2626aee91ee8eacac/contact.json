{
  "address": "0x9756efDE2db2667b9b42f52a1d9B414aD138105e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "dominance",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-26\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract dominance {\n    using SafeMath for uint;\n    \n    address public admin = 0xCf5BB540e63d87A104C071770eBfAEF40392aC95;\n    address public dev = 0x0b60946a9C39B7b1ab220562b0638244beD3f958;\n    uint public hardcap1 = 720 ether;\n    uint public hardcap2 = 2800 ether;\n    uint public currentcap = 0;\n    uint public currentround = 1;\n    bool open = true;\n    uint public hardcap = hardcap1;\n    \n    constructor() public{\n    }\n    \n    function deposit(address _referredBy) payable public {\n        require(open);\n        require(msg.value >= 0.33 ether);\n        uint value = msg.value;\n         \n        currentcap += msg.value;\n        if (currentcap >= hardcap && currentround == 1) {\n                currentcap = 0;\n                hardcap = hardcap2;\n                currentround = 2;\n        }\n        else if(currentcap >= hardcap && currentround == 2){\n            open = false;\n        }\n        \n        uint referbalance = value.div(4);\n        address payable _referral = address(uint160(_referredBy));\n        _referral.transfer(referbalance);\n        value -= referbalance;\n        \n        uint devbalance = msg.value.div(100);\n        address payable _dev = address(uint160(dev));\n        _dev.transfer(devbalance);\n        value -= devbalance;\n        \n        address payable _admin = address(uint160(admin));\n        _admin.transfer(value);\n       \n    }\n    \n    function () payable external {\n       require(false);\n    }\n}",
  "bytecode": "608060405273cf5bb540e63d87a104c071770ebfaef40392ac956000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730b60946a9c39b7b1ab220562b0638244bed3f958600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555068270801d946c94000006002556897c9ce4cf6d5c00000600355600060045560016005556001600660006101000a81548160ff0219169083151502179055506002546007553480156100fe57600080fd5b506105388061010e6000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634c19521d1461009d57806357ea0b15146100c857806373942cd9146100f357806391cca3db1461011e578063b071cbe614610175578063e950602b146101a0578063f340fa01146101cb578063f851a4401461020f575b6000151561009b57600080fd5b005b3480156100a957600080fd5b506100b2610266565b6040518082815260200191505060405180910390f35b3480156100d457600080fd5b506100dd61026c565b6040518082815260200191505060405180910390f35b3480156100ff57600080fd5b50610108610272565b6040518082815260200191505060405180910390f35b34801561012a57600080fd5b50610133610278565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018157600080fd5b5061018a61029e565b6040518082815260200191505060405180910390f35b3480156101ac57600080fd5b506101b56102a4565b6040518082815260200191505060405180910390f35b61020d600480360360208110156101e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102aa565b005b34801561021b57600080fd5b506102246104cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60045481565b60035481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60055481565b600660009054906101000a900460ff1615156102c557600080fd5b670494654067e1000034101515156102dc57600080fd5b6000349050346004600082825401925050819055506007546004541015801561030757506001600554145b1561032a5760006004819055506003546007819055506002600581905550610362565b6007546004541015801561034057506002600554145b15610361576000600660006101000a81548160ff0219169083151502179055505b5b60006103786004836104f190919063ffffffff16565b905060008390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156103c5573d6000803e3d6000fd5b50818303925060006103e16064346104f190919063ffffffff16565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610450573d6000803e3d6000fd5b50818503945060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f193505050501580156104c2573d6000803e3d6000fd5b5050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082848115156104ff57fe5b049050809150509291505056fea165627a7a72305820eb2c2a3ffdb027f9dd5b02457434dd574792555284c63bc0fc1f0a9d4f195bee0029"
}