{
  "address": "0xa35ac2445eb99ef4e91c696ea09b448894a76036",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustService",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n    function Destructible() public payable { }\n\n    /**\n     * @dev Transfers the current balance to the owner and terminates the contract.\n     */\n    function destroy() onlyOwner public {\n        selfdestruct(owner);\n    }\n\n    function destroyAndSend(address _recipient) onlyOwner public {\n        selfdestruct(_recipient);\n    }\n}\n\ncontract TrustServiceStorage is Destructible {\n\n    struct Deal {\n        bytes32 dealHash;\n        address[] addresses;\n    }\n\n    uint256 dealId = 1;\n\n    mapping (uint256 => Deal) deals;\n\n    mapping (uint256 => mapping(address => bool)) signedAddresses;\n\n    address trust;\n\n    modifier onlyTrust() {\n        require(msg.sender == trust);\n        _;\n    }\n\n    function setTrust(address _trust) onlyOwner {\n        trust = _trust;\n    }\n\n    function getDealId() onlyTrust returns (uint256) {\n        return dealId;\n    }\n\n    function setDealId(uint256 _dealId) onlyTrust {\n        dealId = _dealId;\n    }\n\n    function addDeal(uint256 dealId, bytes32 dealHash, address[] addresses) onlyTrust returns (uint256) {\n        deals[dealId] = Deal(dealHash, addresses);\n    }\n\n    function getDealHash(uint256 dealId) onlyTrust returns (bytes32) {\n        return deals[dealId].dealHash;\n    }\n\n    function getDealAddrCount(uint256 dealId) onlyTrust returns (uint256) {\n        return deals[dealId].addresses.length;\n    }\n\n    function getDealAddrAtIndex(uint256 dealId, uint256 index) onlyTrust returns (address)  {\n        return deals[dealId].addresses[index];\n    }\n\n    function setSigned(uint256 dealId, address _address) onlyTrust {\n        signedAddresses[dealId][_address] = true;\n    }\n\n    function setUnSigned(uint256 dealId, address _address) onlyTrust {\n        signedAddresses[dealId][_address] = false;\n    }\n\n    function getSigned(uint256 dealId, address _address) onlyTrust returns (bool) {\n        return signedAddresses[dealId][_address];\n    }\n}\n\ncontract TrustService is Destructible {\n\n    TrustServiceStorage trustStorage;\n\n    ERC20 public feeToken;\n    uint256 public fee;\n    address public feeSender;\n    address public feeRecipient;\n\n    event DealSaved(uint256 indexed dealId);\n\n    function setFee(address _feeToken, address _feeSender, address _feeRecipient, uint256 _fee) public onlyOwner {\n       require(_feeToken != address(0));\n       require(_feeSender != address(0));\n       require(_feeRecipient != address(0));\n       require(_fee > 0);\n       feeToken = ERC20(_feeToken);\n       feeSender = _feeSender;\n       feeRecipient = _feeRecipient;\n       fee = _fee;\n    }\n\n    function clearFee() public onlyOwner {\n       fee = 0;\n    }\n\n    function setStorage(address _storageAddress) onlyOwner {\n        trustStorage = TrustServiceStorage(_storageAddress);\n    }\n\n    function createDeal(\n      bytes32 dealHash,\n      address[] addresses\n    ) public returns (uint256) {\n\n        require(fee == 0 || feeToken.transferFrom(feeSender, feeRecipient, fee));\n\n        uint256 dealId = trustStorage.getDealId();\n\n        trustStorage.addDeal(dealId, dealHash, addresses);\n\n        DealSaved(dealId);\n\n        trustStorage.setDealId(dealId + 1);\n\n        return dealId;\n    }\n\n    function createAndSignDeal(\n      bytes32 dealHash,\n      address[] addresses)\n    public {\n\n        uint256 id = createDeal(dealHash, addresses);\n        signDeal(id);\n    }\n\n    function readDeal(uint256 dealId) public view returns (\n      bytes32 dealHash,\n      address[] addresses,\n      bool[] signed\n    ) {\n        dealHash = trustStorage.getDealHash(dealId);\n\n        uint256 addrCount = trustStorage.getDealAddrCount(dealId);\n\n        addresses = new address[](addrCount);\n\n        signed = new bool[](addrCount);\n\n        for(uint i = 0; i < addrCount; i ++) {\n            addresses[i] = trustStorage.getDealAddrAtIndex(dealId, i);\n            signed[i] = trustStorage.getSigned(dealId , addresses[i]);\n        }\n    }\n\n    function signDeal(uint256 dealId) public {\n        trustStorage.setSigned(dealId, msg.sender);\n    }\n\n    function confirmDeal(uint256 dealId, bytes32 dealHash) public constant returns (bool) {\n        bytes32 hash = trustStorage.getDealHash(dealId);\n\n        return hash == dealHash;\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611728806100536000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630cd4f357146100eb57806312df8bba14610142578063315c21211461019557806346904840146101ac578063647846a51461020357806372be5ef41461025a57806383197ef0146103335780638da5cb5b1461034a5780639137c1a7146103a1578063bae10f93146103e4578063bd694d8714610471578063c1db8ebd146104e5578063c71b242b14610512578063ddca3f431461059a578063f2fde38b146105c5578063f5074f4114610608575b600080fd5b3480156100f757600080fd5b5061010061064b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014e57600080fd5b5061017b600480360381019080803590602001909291908035600019169060200190929190505050610671565b604051808215151515815260200191505060405180910390f35b3480156101a157600080fd5b506101aa610756565b005b3480156101b857600080fd5b506101c16107bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020f57600080fd5b506102186107e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026657600080fd5b5061028560048036038101908080359060200190929190505050610807565b6040518084600019166000191681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102da5780820151818401526020810190506102bf565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561031c578082015181840152602081019050610301565b505050509050019550505050505060405180910390f35b34801561033f57600080fd5b50610348610c89565b005b34801561035657600080fd5b5061035f610d1e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ad57600080fd5b506103e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d43565b005b3480156103f057600080fd5b5061046f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de2565b005b34801561047d57600080fd5b506104e3600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610fd0565b005b3480156104f157600080fd5b5061051060048036038101908080359060200190929190505050610fec565b005b34801561051e57600080fd5b506105846004803603810190808035600019169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506110cc565b6040518082815260200191505060405180910390f35b3480156105a657600080fd5b506105af61152d565b6040518082815260200191505060405180910390f35b3480156105d157600080fd5b50610606600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611533565b005b34801561061457600080fd5b50610649600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611688565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d09f1d856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561070557600080fd5b505af1158015610719573d6000803e3d6000fd5b505050506040513d602081101561072f57600080fd5b81019080805190602001909291905050509050826000191681600019161491505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107b157600080fd5b6000600381905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d09f1d876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156108a057600080fd5b505af11580156108b4573d6000803e3d6000fd5b505050506040513d60208110156108ca57600080fd5b81019080805190602001909291905050509450600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663364f82cc876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b505050506040513d602081101561099857600080fd5b81019080805190602001909291905050509150816040519080825280602002602001820160405280156109da5781602001602082028038833980820191505090505b50935081604051908082528060200260200182016040528015610a0c5781602001602082028038833980820191505090505b509250600090505b81811015610c8057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b3d925187836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b81019080805190602001909291905050508482815181101515610afe57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639501eeaf878684815181101515610b8757fe5b906020019060200201516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050506040513d6020811015610c4057600080fd5b81019080805190602001909291905050508382815181101515610c5f57fe5b90602001906020020190151590811515815250508080600101915050610a14565b50509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610e7957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eb557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ef157600080fd5b600081111515610f0057600080fd5b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060038190555050505050565b6000610fdc83836110cc565b9050610fe781610fec565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d415edff82336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b5050505050565b600080600060035414806112565750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561121a57600080fd5b505af115801561122e573d6000803e3d6000fd5b505050506040513d602081101561124457600080fd5b81019080805190602001909291905050505b151561126157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370e02e3e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112e757600080fd5b505af11580156112fb573d6000803e3d6000fd5b505050506040513d602081101561131157600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b21649358286866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156113e75780820151818401526020810190506113cc565b50505050905001945050505050602060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b505050506040513d602081101561143857600080fd5b810190808051906020019092919050505050807f83f4a9570314ddb3fb6b9c65bebf92a76568949e290eaea5b73e32708ec15b9960405160405180910390a2600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397e6b39a600183016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561150b57600080fd5b505af115801561151f573d6000803e3d6000fd5b505050508091505092915050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561158e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115ca57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff00a165627a7a72305820c78f7ba6fb815e04f4293a240a7411174ba95bd68347cae160cdc38350f0e5380029"
}