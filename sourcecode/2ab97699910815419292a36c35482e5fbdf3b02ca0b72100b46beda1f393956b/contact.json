{
  "address": "0x80406630da2eca06e293467f2b757049823cd361",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Roulette",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-14\n*/\n\n//\n//                    %(/************/#&\n//               (**,                 ,**/#\n//            %/*,                        **(&\n//          (*,                              //%\n//        %*,                                  /(\n//       (*      ,************************/      /*%\n//      //         /(                  (/,        ,/%\n//     (*           //(               //            /%\n//    //             */%             //             //\n//    /*         (((((///(((( ((((((//(((((,         /(\n//    /           ,/%   //        (/    /*           //\n//    /             //   //(    %//   (/*            ,/\n//    /              //   ,/%   //   (/,             (/\n//    /             %(//%   / //    ///(             //\n//    //          %(/, ,/(   /   %//  //(           /(\n//    (/         (//     /#      (/,     //(        (/\n//     ((     %(/,        (/    (/,        //(      /,\n//      ((    /,           *(*#(/            /*   %/,\n//      /((                 /*((                 ((/\n//        *(%                                  #(\n//          ((%                              #(,\n//            *((%                        #((,\n//               (((%                   ((/\n//                   *(((###*#&%###((((*\n//\n//\n//                   ROULETTE.GORGONA.IO\n//\n// Win 120% with 80% chance!\n//\n//\n// HOW TO PLAY\n// Just send 1 ETH to the contract.\n// When there are 5 players, a rally will be made, 4 lucky players will receive 1.2 ETH each!\n//\n//\n// For more information visit https://roulette.gorgona.io/\n//\n// Telegram chat (ru): https://t.me/gorgona_io\n// Telegram chat (en): https://t.me/gorgona_io_en\n//\n// For support and requests telegram: @alex_gorgona_io\n\n\npragma solidity ^0.4.24;\n\ncontract Roulette {\n\n    event newRound(uint number);\n    event newPlayer(address addr, uint roundNumber);\n    event playerWin(address indexed addr);\n    event playerLose(address indexed addr, uint8 num);\n\n    uint public roundNumber = 1;\n    address public feeAddr;\n\n    address[] public players;\n\n    constructor() public\n    {\n        feeAddr = msg.sender;\n    }\n\n    function() payable public\n    {\n        // ensure that payment not from contract\n        if (isContract()) {\n            revert();\n        }\n\n        require(msg.value == 1 ether, \"Enter price 1 ETH\");\n        // save player\n        players.push(msg.sender);\n\n        emit newPlayer(msg.sender, roundNumber);\n\n        // if we have all players\n        if (players.length == 5) {\n            distributeFunds();\n            return;\n        }\n    }\n\n    function countPlayers() public view returns (uint256)\n    {\n        return players.length;\n    }\n\n    // Send ETH to winners\n    function distributeFunds() internal\n    {\n        // determine who is lose\n        uint8 loser = uint8(getRandom() % players.length + 1);\n\n        for (uint i = 0; i <= players.length - 1; i++) {\n            // if it is loser - skip\n            if (loser == i + 1) {\n                emit playerLose(players[i], loser);\n                continue;\n            }\n\n            // pay prize\n            if (players[i].send(1200 finney)) {\n                emit playerWin(players[i]);\n            }\n        }\n\n        // gorgona fee\n        feeAddr.transfer(address(this).balance);\n\n        players.length = 0;\n        roundNumber ++;\n\n        emit newRound(roundNumber);\n    }\n\n    function getRandom() internal view returns (uint256)\n    {\n        uint256 num = uint256(keccak256(abi.encodePacked(blockhash(block.number - players.length), now)));\n\n        for (uint i = 0; i <= players.length - 1; i++)\n        {\n            num ^= uint256(keccak256(abi.encodePacked(blockhash(block.number - i), uint256(players[i]) ^ num)));\n        }\n\n        return num;\n    }\n\n    // check that there is no contract in the middle\n    function isContract() internal view returns (bool) {\n        return msg.sender != tx.origin;\n    }\n}",
  "bytecode": "6080604052600160005534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108a1806100666000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806339e7fddc146101e45780634bec8b391461023b5780634e2786fb14610266578063f71d96cb14610291575b61006a6102fe565b1561007457600080fd5b670de0b6b3a7640000341415156100f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f456e74657220707269636520312045544800000000000000000000000000000081525060200191505060405180910390fd5b60023390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f4222113ad602ab085918ce130c46367c8d7ea76f6710b09d0d47c28a3f9598f433600054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1600560028054905014156101e1576101dc610335565b6101e2565b5b005b3480156101f057600080fd5b506101f96105ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024757600080fd5b50610250610615565b6040518082815260200191505060405180910390f35b34801561027257600080fd5b5061027b610622565b6040518082815260200191505060405180910390f35b34801561029d57600080fd5b506102bc60048036038101908080359060200190929190505050610628565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415905090565b6000806001600280549050610348610666565b81151561035157fe5b06019150600090505b6001600280549050038111151561051157600181018260ff16141561040b5760028181548110151561038857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a7548c8a80f2110c8dfd5895e79abd62c1dac83cb38001a6a44a8e76d458e1983604051808260ff1660ff16815260200191505060405180910390a2610504565b60028181548110151561041a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6710a741a4627800009081150290604051600060405180830381858888f19350505050156105035760028181548110151561049557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9ece4ee1764f6c5552c3cf94fb6a4a838a17b823f13747dc61d825dbcc4e5bb460405160405180910390a25b5b808060010191505061035a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610590573d6000803e3d6000fd5b5060006002816105a09190610824565b5060008081548092919060010191905055507fa35bd591310404f547e67d0f261a54d0a2a7606bf1695c5e9134f4259805eb7c6000546040518082815260200191505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600280549050905090565b60005481565b60028181548110151561063757fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060028054905043034042604051602001808360001916600019168152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156106d857805182526020820191506020810190506020830392506106b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049150600090505b6001600280549050038111151561081c57804303408260028381548110151561073557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1618604051602001808360001916600019168152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156107da57805182526020820191506020810190506020830392506107b5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004821891508080600101915050610710565b819250505090565b81548183558181111561084b5781836000526020600020918201910161084a9190610850565b5b505050565b61087291905b8082111561086e576000816000905550600101610856565b5090565b905600a165627a7a72305820d86394840ada04da2b67775ef204748588e2e0e572d1a332fe1fc6b40520fcdf0029"
}