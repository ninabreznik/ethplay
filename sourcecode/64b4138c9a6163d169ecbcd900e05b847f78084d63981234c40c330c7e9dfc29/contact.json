{
  "address": "0x0a5e34ab31a1e589b470e7deeab7bf8b38a1d8d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KnowTokenCrowdSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-25\n*/\n\npragma solidity^0.4.21;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n}\n\ncontract KNBaseToken is ERC20 {\n    using SafeMath for uint256;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 totalSupply_;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(balances[_to].add(_value) > balances[_to]);\n\n\n        uint256 previousBalances = balances[_from].add(balances[_to]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        assert(balances[_from].add(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}\n\ncontract KnowToken is KNBaseToken, Ownable {\n\n    address public founderAddress;\n    bool public unlockAllTokens;\n\n    mapping (address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool unfrozen);\n    event UnLockAllTokens(bool unlock);\n\n    constructor() public {\n        founderAddress = msg.sender;\n        balances[founderAddress] = totalSupply_;\n        emit Transfer(address(0), founderAddress, totalSupply_);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0));                               \n        require (balances[_from] >= _value);               \n        require (balances[_to].add(_value) >= balances[_to]); \n        require(!frozenAccount[_from] || unlockAllTokens);\n\n        balances[_from] = balances[_from].sub(_value);                  \n        balances[_to] = balances[_to].add(_value);                  \n        emit Transfer(_from, _to, _value);\n    }\n\n    function unlockAllTokens(bool _unlock) public onlyOwner {\n        unlockAllTokens = _unlock;\n        emit UnLockAllTokens(_unlock);\n    }\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}\n\ncontract KnowTokenCrowdSale is Ownable{\n    using SafeMath for uint256;\n\n    KnowToken public token;\n    address public wallet;\n    uint256 public currentRate;\n    uint256 public limitTokenForSale;\n\n    event ChangeRate(address indexed who, uint256 newrate);\n    event FinishCrowdSale();\n    event GetEther(uint256 _e);\n\n    constructor() public {\n        currentRate = 15000;\n        wallet = msg.sender; //address of founder\n        limitTokenForSale = 2338644692700000000000000000;\n        token = KnowToken(0xbfd18F20423694a69e35d65cB9c9D74396CC2c2d);// address of KN Token\n    }\n\n    function () public payable {\n        require(msg.value > 0 ether);\n        require(currentRate.mul(msg.value) <= token.balanceOf(this));\n        \n        uint256 tokens = currentRate.mul(msg.value);\n        token.transfer(msg.sender, tokens);\n    }\n    \n    function changeRate(uint256 newrate) public onlyOwner{\n        require(newrate > 0);\n        currentRate = newrate;\n        emit ChangeRate(msg.sender, newrate);\n    }\n\n    function remainTokens() view public returns(uint256) {\n        return token.balanceOf(this);\n    }\n\n    function finish() public onlyOwner {\n        uint256 reTokens = remainTokens();\n        token.transfer(owner, reTokens);\n        emit FinishCrowdSale();\n    }\n    \n    function getEther(uint256 _e)public onlyOwner {\n        require(_e <= address(this).balance);\n        wallet.transfer(_e);\n        emit GetEther(_e);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613a9860038190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b078e7b46d3297be77596000060048190555073bfd18f20423694a69e35d65cb9c9d74396cc2c2d600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bae806101126000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305f6d329146102c5578063521eb273146102f057806374e7493b146103475780638da5cb5b14610374578063ce0befcf146103cb578063d56b2889146103f6578063f04961ba1461040d578063f2fde38b1461043a578063f9f8bdb71461047d578063fc0c546a146104a8575b600080341115156100b457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561017157600080fd5b505af1158015610185573d6000803e3d6000fd5b505050506040513d602081101561019b57600080fd5b81019080805190602001909291905050506101c1346003546104ff90919063ffffffff16565b111515156101ce57600080fd5b6101e3346003546104ff90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156102aa57600080fd5b505af11580156102be573d6000803e3d6000fd5b5050505050005b3480156102d157600080fd5b506102da610537565b6040518082815260200191505060405180910390f35b3480156102fc57600080fd5b5061030561053d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035357600080fd5b5061037260048036038101908080359060200190929190505050610563565b005b34801561038057600080fd5b50610389610625565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103d757600080fd5b506103e061064a565b6040518082815260200191505060405180910390f35b34801561040257600080fd5b5061040b610749565b005b34801561041957600080fd5b50610438600480360381019080803590602001909291905050506108dd565b005b34801561044657600080fd5b5061047b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a01565b005b34801561048957600080fd5b50610492610b56565b6040518082815260200191505060405180910390f35b3480156104b457600080fd5b506104bd610b5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000808314156105125760009050610531565b818302905081838281151561052357fe5b0414151561052d57fe5b8090505b92915050565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105be57600080fd5b6000811115156105cd57600080fd5b806003819055503373ffffffffffffffffffffffffffffffffffffffff167fae6f5501f9804864e67131319de4074394eb6002e205e3a057e44899930b401c826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561070957600080fd5b505af115801561071d573d6000803e3d6000fd5b505050506040513d602081101561073357600080fd5b8101908080519060200190929190505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107a657600080fd5b6107ae61064a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561089657600080fd5b505af11580156108aa573d6000803e3d6000fd5b505050507fd15ca2e22c7ba7d7fc55eb381f8e0d0b7e5e8bed3d8bb7c97e0acdc2b76b958160405160405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631811115151561095e57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109c6573d6000803e3d6000fd5b507fba6a2b9c1d4e25144a19f151b7bd95b921ed48daa1814ba24129cb519c3d472d816040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a5c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a9857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058206a7e83797559e87fd20ec5d276027bf2b0dbd21c54237d5fff770bc6530eab4a0029"
}