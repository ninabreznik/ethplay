{
  "address": "0x34b4b86ce533fdd5531a2350236c3f348fabce20",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ludcoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.21;\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n    constructor() public {\n    owner = msg.sender;\n    }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0x0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken, Pausable {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    require(_to != address(0x0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  \n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant whenNotPaused returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  \n  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract Ludcoin is StandardToken {\n    using SafeMath for uint256;\n\n    //Information coin\n    string public name = \"Ludcoin\";\n    string public symbol = \"LUD\";\n    uint256 public decimals = 18;\n    uint256 public totalSupply = 800000000 * (10 ** decimals); //800 000 000 LUD\n\n    //Adress informated in white paper \n    address public walletETH;               //Wallet ETH\n    address public contractAddress = this;  //6%\n    address public tokenSale;               //67%\n    address public company;                 //20%\n    address public bounty;                  //2%\n    address public gamesFund;               //5%       \n\n    //Utils ICO   \n    uint256 public icoStage = 0;        \n    uint256 public tokensSold = 0;          //total number of tokens sold\n    uint256 public totalRaised = 0;         //total amount of money raised in wei\n    uint256 public totalTokenToSale = 0;\n    uint256 public rate = 2700;             //LUD/ETH rate / initial 50%\n    bool public pauseEmergence = false;     //the owner address can set this to true to halt the crowdsale due to emergency\n    \n\n    //Time Start and Time end\n    uint256 public icoStartTimestampStage = 1525132800;       //05/01/2018 @ 00:00am (UTC)\n    uint256 public icoEndTimestampStage = 1543622399;         //11/30/2018 @ 11:59pm (UTC)\n\n// =================================== Events ================================================\n\n    event Burn(address indexed burner, uint256 value);  \n\n\n// =================================== Constructor =============================================\n       \n    constructor() public {         \n      walletETH = 0x7573791105bfB3c0329A3a1DDa7Eb2D01B61Fb7D;\n      tokenSale = 0x21f8784cA7065ad252e1401208B153d5b7a740d1;        //67% (total sale + bonus)\n      company = 0x8185ae2Da7891557C622Fb23C431A9cf7DF6E457;          //20%\n      bounty = 0x80c4933a9a614e7671D52Fd218d2EB29412bf584;           //2%\n      gamesFund = 0x413cF71fB3E7dAf8c8Af21E40429E7315196E3d1;        //5% \n\n      //Distribution Token  \n      balances[tokenSale] = totalSupply.mul(67).div(100);            //totalSupply * 67%\n      balances[company] = totalSupply.mul(20).div(100);              //totalSupply * 20%\n      balances[gamesFund] = totalSupply.mul(5).div(100);             //totalSupply * 5%   \n      balances[bounty] = totalSupply.mul(2).div(100);                //totalSupply * 2%\n      balances[contractAddress] = totalSupply.mul(6).div(100);       //totalSupply * 6%(3% team + 3% advisors)\n      \n     \n      //set token to sale\n      totalTokenToSale = balances[tokenSale];           \n    }\n\n // ======================================== Modifier ==================================================\n\n    modifier acceptsFunds() {   \n        require(now >= icoStartTimestampStage);          \n        require(now <= icoEndTimestampStage); \n        _;\n    }    \n\n    modifier nonZeroBuy() {\n        require(msg.value > 0);\n        _;\n\n    }\n\n    modifier PauseEmergence {\n        require(!pauseEmergence);\n       _;\n    } \n\n//========================================== Functions ===========================================================================\n\n    /// fallback function to buy tokens\n    function () PauseEmergence nonZeroBuy acceptsFunds payable public {  \n        uint256 amount = msg.value.mul(rate);\n        \n        assignTokens(msg.sender, amount);\n        totalRaised = totalRaised.add(msg.value);\n        forwardFundsToWallet();\n    } \n\n    function forwardFundsToWallet() internal {\n        // immediately send Ether to wallet address, propagates exception if execution fails        \n        walletETH.transfer(msg.value); \n    }\n\n    function assignTokens(address recipient, uint256 amount) internal {\n        uint256 amountTotal = amount;\n        \n        if (icoStage > 0) {\n            amountTotal = amountTotal + amountTotal.mul(2).div(100);    \n        }\n        \n        balances[tokenSale] = balances[tokenSale].sub(amountTotal);   \n        balances[recipient] = balances[recipient].add(amountTotal);\n        tokensSold = tokensSold.add(amountTotal);        \n       \n        //test token sold, if it was sold more than the total available right total token total\n        if (tokensSold > totalTokenToSale) {\n            uint256 diferenceTotalSale = totalTokenToSale.sub(tokensSold);\n            totalTokenToSale = tokensSold;\n            totalSupply = tokensSold.add(diferenceTotalSale);\n        }\n        \n        emit Transfer(0x0, recipient, amountTotal);\n    }  \n\n    function manuallyAssignTokens(address recipient, uint256 amount) public onlyOwner {\n        require(tokensSold < totalSupply);\n        assignTokens(recipient, amount);\n    }\n\n    function setRate(uint256 _rate) public onlyOwner { \n        require(_rate > 0);               \n        rate = _rate;        \n    }\n\n    function setIcoStage(uint256 _icoStage) public onlyOwner {    \n        require(_icoStage >= 0); \n        require(_icoStage <= 4);             \n        icoStage = _icoStage;        \n    }\n\n    function setPauseEmergence() public onlyOwner {        \n        pauseEmergence = true;\n    }\n\n    function setUnPauseEmergence() public onlyOwner {        \n        pauseEmergence = false;\n    }   \n\n    function sendTokenTeamAdvisor(address walletTeam, address walletAdvisors ) public onlyOwner {\n        //test deadline to request token\n        require(now >= icoEndTimestampStage);\n        require(walletTeam != 0x0);\n        require(walletAdvisors != 0x0);\n        \n        uint256 amount = 24000000 * (10 ** decimals);\n        \n        //send tokens \n        balances[contractAddress] = 0;\n        balances[walletTeam] = balances[walletTeam].add(amount);\n        balances[walletAdvisors] = balances[walletAdvisors].add(amount);\n        \n        emit Transfer(contractAddress, walletTeam, amount);\n        emit Transfer(contractAddress, walletAdvisors, amount);\n    }\n\n    function burn(uint256 _value) public whenNotPaused {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }   \n    \n}",
  "bytecode": "6002805460a060020a60ff021916905560c0604052600760808190527f4c7564636f696e0000000000000000000000000000000000000000000000000060a090815262000050916004919062000379565b506040805180820190915260038082527f4c554400000000000000000000000000000000000000000000000000000000006020909201918252620000979160059162000379565b50601260068190556b0295be96e64066972000000060075560098054600160a060020a03191630600160a060020a03161790556000600e819055600f8190556010819055601155610a8c90556013805460ff19169055635ae7ae00601455635c01ceff6015553480156200010a57600080fd5b5060028054600160a060020a033316600160a060020a031991821617909155600880548216737573791105bfb3c0329a3a1dda7eb2d01b61fb7d179055600a805482167321f8784ca7065ad252e1401208b153d5b7a740d1179055600b80548216738185ae2da7891557c622fb23c431a9cf7df6e457179055600c805482167380c4933a9a614e7671d52fd218d2eb29412bf584179055600d805490911673413cf71fb3e7daf8c8af21e40429e7315196e3d1179055600754620001fb90606490620001e6906043640100000000620006b26200033382021704565b90640100000000620013446200036182021704565b600a54600160a060020a03166000908152600160205260409020556007546200023c90606490620001e6906014640100000000620006b26200033382021704565b600b54600160a060020a03166000908152600160205260409020556007546200027d90606490620001e6906005640100000000620006b26200033382021704565b600d54600160a060020a0316600090815260016020526040902055600754620002be90606490620001e6906002640100000000620006b26200033382021704565b600c54600160a060020a0316600090815260016020526040902055600754620002ff90606490620001e6906006640100000000620006b26200033382021704565b600954600160a060020a0390811660009081526001602052604080822093909355600a54909116815220546011556200041e565b60008282028315806200035157508284828115156200034e57fe5b04145b15156200035a57fe5b9392505050565b60008082848115156200037057fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003bc57805160ff1916838001178555620003ec565b82800160010185558215620003ec579182015b82811115620003ec578251825591602001919060010190620003cf565b50620003fa929150620003fe565b5090565b6200041b91905b80821115620003fa576000815560010162000405565b90565b6113b9806200042e6000396000f3006080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461024b578063095ea7b3146102d55780631067f3611461030d57806318160ddd146103345780631d1ada901461034957806323b872dd1461036f5780632c4e722e14610399578063313ce567146103ae57806334fcf437146103c35780633beb4db1146103db5780633f4ba83a146103f357806342966c68146104085780634faca8f414610420578063518ab2a8146104475780635c975abb1461045c57806366188463146104715780636904c94d1461049557806370a08231146104c657806379162aeb146104e75780638456cb59146104fc5780638da5cb5b14610511578063943dfef11461052657806395d89b411461053b5780639d0c1e6f14610550578063a9059cbb14610565578063af8d5a4814610589578063b94203101461059e578063c58684ab146105b3578063c5c4744c146105c8578063d73dd623146105dd578063d7eae6db14610601578063dd62ed3e14610616578063dee1cfd81461063d578063f2fde38b14610652578063f6b4dfb414610673578063fc00234e14610688578063fd7910311461069d575b60135460009060ff16156101df57600080fd5b600034116101ec57600080fd5b6014544210156101fb57600080fd5b60155442111561020a57600080fd5b60125461021e90349063ffffffff6106b216565b905061022a33826106dd565b60105461023d903463ffffffff61081b16565b60105561024861082a565b50005b34801561025757600080fd5b50610260610866565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029a578181015183820152602001610282565b50505050905090810190601f1680156102c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e157600080fd5b506102f9600160a060020a03600435166024356108f4565b604080519115158252519081900360200190f35b34801561031957600080fd5b50610322610974565b60408051918252519081900360200190f35b34801561034057600080fd5b5061032261097a565b34801561035557600080fd5b5061036d600160a060020a0360043516602435610980565b005b34801561037b57600080fd5b506102f9600160a060020a03600435811690602435166044356109b9565b3480156103a557600080fd5b50610322610aea565b3480156103ba57600080fd5b50610322610af0565b3480156103cf57600080fd5b5061036d600435610af6565b3480156103e757600080fd5b5061036d600435610b23565b3480156103ff57600080fd5b5061036d610b5f565b34801561041457600080fd5b5061036d600435610bdb565b34801561042c57600080fd5b5061036d600160a060020a0360043581169060243516610c99565b34801561045357600080fd5b50610322610deb565b34801561046857600080fd5b506102f9610df1565b34801561047d57600080fd5b506102f9600160a060020a0360043516602435610e01565b3480156104a157600080fd5b506104aa610f15565b60408051600160a060020a039092168252519081900360200190f35b3480156104d257600080fd5b50610322600160a060020a0360043516610f24565b3480156104f357600080fd5b506102f9610f3f565b34801561050857600080fd5b5061036d610f48565b34801561051d57600080fd5b506104aa610fc9565b34801561053257600080fd5b506104aa610fd8565b34801561054757600080fd5b50610260610fe7565b34801561055c57600080fd5b506104aa611042565b34801561057157600080fd5b506102f9600160a060020a0360043516602435611051565b34801561059557600080fd5b50610322611115565b3480156105aa57600080fd5b506104aa61111b565b3480156105bf57600080fd5b5061036d61112a565b3480156105d457600080fd5b50610322611154565b3480156105e957600080fd5b506102f9600160a060020a036004351660243561115a565b34801561060d57600080fd5b5061036d611214565b34801561062257600080fd5b50610322600160a060020a036004358116906024351661123b565b34801561064957600080fd5b50610322611281565b34801561065e57600080fd5b5061036d600160a060020a0360043516611287565b34801561067f57600080fd5b506104aa611320565b34801561069457600080fd5b5061032261132f565b3480156106a957600080fd5b506104aa611335565b60008282028315806106ce57508284828115156106cb57fe5b04145b15156106d657fe5b9392505050565b6000808291506000600e54111561071557610710606461070484600263ffffffff6106b216565b9063ffffffff61134416565b820191505b600a54600160a060020a0316600090815260016020526040902054610740908363ffffffff61135b16565b600a54600160a060020a039081166000908152600160205260408082209390935590861681522054610778908363ffffffff61081b16565b600160a060020a038516600090815260016020526040902055600f546107a4908363ffffffff61081b16565b600f81905560115410156107e657600f546011546107c79163ffffffff61135b16565b600f5460118190559091506107e2908263ffffffff61081b16565b6007555b604080518381529051600160a060020a0386169160009160008051602061136e8339815191529181900360200190a350505050565b6000828201838110156106d657fe5b600854604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610863573d6000803e3d6000fd5b50565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108ec5780601f106108c1576101008083540402835291602001916108ec565b820191906000526020600020905b8154815290600101906020018083116108cf57829003601f168201915b505050505081565b60025460009060a060020a900460ff161561090e57600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60115481565b60075481565b60025433600160a060020a0390811691161461099b57600080fd5b600754600f54106109ab57600080fd5b6109b582826106dd565b5050565b600254600090819060a060020a900460ff16156109d557600080fd5b600160a060020a03841615156109ea57600080fd5b50600160a060020a03808516600081815260036020908152604080832033909516835293815283822054928252600190529190912054610a30908463ffffffff61135b16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610a65908463ffffffff61081b16565b600160a060020a038516600090815260016020526040902055610a8e818463ffffffff61135b16565b600160a060020a0380871660008181526003602090815260408083203386168452825291829020949094558051878152905192881693919260008051602061136e833981519152929181900390910190a3506001949350505050565b60125481565b60065481565b60025433600160a060020a03908116911614610b1157600080fd5b60008111610b1e57600080fd5b601255565b60025433600160a060020a03908116911614610b3e57600080fd5b6000811015610b4c57600080fd5b6004811115610b5a57600080fd5b600e55565b60025433600160a060020a03908116911614610b7a57600080fd5b60025460a060020a900460ff161515610b9257600080fd5b6002805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60025460009060a060020a900460ff1615610bf557600080fd5b60008211610c0257600080fd5b5033600160a060020a038116600090815260016020526040902054610c27908361135b565b600160a060020a038216600090815260016020526040902055600754610c53908363ffffffff61135b16565b600755604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60025460009033600160a060020a03908116911614610cb757600080fd5b601554421015610cc657600080fd5b600160a060020a0383161515610cdb57600080fd5b600160a060020a0382161515610cf057600080fd5b50600654600954600160a060020a0390811660009081526001602052604080822082905591851681522054600a9190910a63016e36000290610d32908261081b565b600160a060020a038085166000908152600160205260408082209390935590841681522054610d67908263ffffffff61081b16565b600160a060020a03808416600090815260016020908152604091829020939093556009548151858152915187841694919093169260008051602061136e8339815191529281900390910190a3600954604080518381529051600160a060020a0380861693169160008051602061136e833981519152919081900360200190a3505050565b600f5481565b60025460a060020a900460ff1681565b600254600090819060a060020a900460ff1615610e1d57600080fd5b50600160a060020a0333811660009081526003602090815260408083209387168352929052205480831115610e7957600160a060020a033381166000908152600360209081526040808320938816835292905290812055610eb0565b610e89818463ffffffff61135b16565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600b54600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b60135460ff1681565b60025433600160a060020a03908116911614610f6357600080fd5b60025460a060020a900460ff1615610f7a57600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600254600160a060020a031681565b600c54600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108ec5780601f106108c1576101008083540402835291602001916108ec565b600854600160a060020a031681565b6000600160a060020a038316151561106857600080fd5b600160a060020a033316600090815260016020526040902054611091908363ffffffff61135b16565b600160a060020a0333811660009081526001602052604080822093909355908516815220546110c6908363ffffffff61081b16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193339093169260008051602061136e83398151915292918290030190a350600192915050565b60155481565b600a54600160a060020a031681565b60025433600160a060020a0390811691161461114557600080fd5b6013805460ff19166001179055565b60105481565b60025460009060a060020a900460ff161561117457600080fd5b600160a060020a033381166000908152600360209081526040808320938716835292905220546111aa908363ffffffff61081b16565b600160a060020a0333811660008181526003602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60025433600160a060020a0390811691161461122f57600080fd5b6013805460ff19169055565b60025460009060a060020a900460ff161561125557600080fd5b50600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60145481565b60025433600160a060020a039081169116146112a257600080fd5b600160a060020a03811615156112b757600080fd5b600254604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600160a060020a031681565b600e5481565b600d54600160a060020a031681565b600080828481151561135257fe5b04949350505050565b60008282111561136757fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204a05b9fa7a24035c1c36b42a2a06a782680b43aa4d314f78ad10da5b685140390029"
}