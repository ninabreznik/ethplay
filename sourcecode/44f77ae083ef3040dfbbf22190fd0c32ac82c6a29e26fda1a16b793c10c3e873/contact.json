{
  "address": "0x6c8dce6d842e0d9d109dc4c69f35cf8904fc4cbf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon: Energy",
  "contractName": "EtheremonEnergy",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-29\n*/\n\npragma solidity ^0.4.19;\n\n// copyright [emailÂ protected]\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = false;\n\n    function BasicAccessControl() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\n\ncontract EtheremonEnergy is BasicAccessControl {\n    \n    struct Energy {\n        uint freeAmount;\n        uint paidAmount;\n        uint lastClaim;\n    }\n    \n    struct EnergyPackage {\n        uint ethPrice;\n        uint emontPrice;\n        uint energy;\n    }\n    \n    mapping(address => Energy) energyData;\n    mapping(uint => EnergyPackage) paidPackages;\n    uint public claimMaxAmount = 10;\n    uint public claimTime = 30 * 60; // in second\n    uint public claimAmount = 1;\n    \n    // address\n    address public paymentContract;\n    \n    // event\n    event EventEnergyUpdate(address indexed player, uint freeAmount, uint paidAmount, uint lastClaim);\n    \n    modifier requirePaymentContract {\n        require(paymentContract != address(0));\n        _;\n    }\n    \n    function EtheremonEnergy(address _paymentContract) public {\n        paymentContract = _paymentContract;\n    }\n    \n    // moderator\n    \n    function withdrawEther(address _sendTo, uint _amount) onlyModerators public {\n        if (_amount > address(this).balance) {\n            revert();\n        }\n        _sendTo.transfer(_amount);\n    }\n    \n    function setPaidPackage(uint _packId, uint _ethPrice, uint _emontPrice, uint _energy) onlyModerators external {\n        EnergyPackage storage pack = paidPackages[_packId];\n        pack.ethPrice = _ethPrice;\n        pack.emontPrice = _emontPrice;\n        pack.energy = _energy;\n    }\n    \n    function setConfig(address _paymentContract, uint _claimMaxAmount, uint _claimTime, uint _claimAmount) onlyModerators external {\n        paymentContract = _paymentContract;\n        claimMaxAmount = _claimMaxAmount;\n        claimTime = _claimTime;\n        claimAmount = _claimAmount;\n    }\n    \n    function topupEnergyByToken(address _player, uint _packId, uint _token) requirePaymentContract external {\n        if (msg.sender != paymentContract) revert();\n        EnergyPackage storage pack = paidPackages[_packId];\n        if (pack.energy == 0 || pack.emontPrice != _token)\n            revert();\n\n        Energy storage energy = energyData[_player];\n        energy.paidAmount += pack.energy;\n        \n        EventEnergyUpdate(_player, energy.freeAmount, energy.paidAmount, energy.lastClaim);\n    }\n    \n    // public update\n    \n    function safeDeduct(uint _a, uint _b) pure public returns(uint) {\n        if (_a < _b) return 0;\n        return (_a - _b);\n    }\n    \n    function topupEnergy(uint _packId) isActive payable external {\n        EnergyPackage storage pack = paidPackages[_packId];\n        if (pack.energy == 0 || pack.ethPrice != msg.value)\n            revert();\n\n        Energy storage energy = energyData[msg.sender];\n        energy.paidAmount += pack.energy;\n        \n        EventEnergyUpdate(msg.sender, energy.freeAmount, energy.paidAmount, energy.lastClaim);\n    }\n    \n    function claimEnergy() isActive external {\n        Energy storage energy = energyData[msg.sender];\n        uint period = safeDeduct(block.timestamp, energy.lastClaim);\n        uint energyAmount = (period / claimTime) * claimAmount;\n        \n        if (energyAmount == 0) revert();\n        if (energyAmount > claimMaxAmount) energyAmount = claimMaxAmount;\n        \n        energy.freeAmount += energyAmount;\n        energy.lastClaim = block.timestamp;\n        \n        EventEnergyUpdate(msg.sender, energy.freeAmount, energy.paidAmount, energy.lastClaim);\n    }\n    \n    // public get\n    function getPlayerEnergy(address _player) constant external returns(uint freeAmount, uint paidAmount, uint lastClaim) {\n        Energy storage energy = energyData[_player];\n        return (energy.freeAmount, energy.paidAmount, energy.lastClaim);\n    }\n    \n    function getClaimableAmount(address _trainer) constant external returns(uint) {\n        Energy storage energy = energyData[_trainer];\n        uint period = safeDeduct(block.timestamp, energy.lastClaim);\n        uint energyAmount = (period / claimTime) * claimAmount;\n        if (energyAmount > claimMaxAmount) energyAmount = claimMaxAmount;\n        return energyAmount;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEnergy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint256\"}],\"name\":\"topupEnergy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerEnergy\",\"outputs\":[{\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"safeDeduct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_packId\",\"type\":\"uint256\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_emontPrice\",\"type\":\"uint256\"},{\"name\":\"_energy\",\"type\":\"uint256\"}],\"name\":\"setPaidPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_packId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"topupEnergyByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentContract\",\"type\":\"address\"},{\"name\":\"_claimMaxAmount\",\"type\":\"uint256\"},{\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"name\":\"EventEnergyUpdate\",\"type\":\"event\"}]",
  "bytecode": "606060405260008060146101000a81548161ffff021916908361ffff1602179055506000600260006101000a81548160ff021916908315150217905550600a6005556107086006556001600755341561005757600080fd5b6040516020806113c883398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506112c4806101046000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806314d0f1ba1461012257806327b3bf11146101735780632ab34a911461019c5780633976304e146101b15780633de3ebf8146101c957806340844a8d1461022457806344b078381461026457806348ef5aa8146102a25780634efb023e146102c757806351430cb3146102f8578063522f6815146103215780636c81fd6d14610363578063830953ab1461039c5780638da5cb5b146103c55780639c91dd561461041a578063b85d62751461046f578063c4021c13146104a8578063e12f3a61146104f3578063ecf8811114610540578063ee4e441614610594578063f2853292146105c1575b600080fd5b341561012d57600080fd5b610159600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105fa565b604051808215151515815260200191505060405180910390f35b341561017e57600080fd5b61018661061a565b6040518082815260200191505060405180910390f35b34156101a757600080fd5b6101af610620565b005b6101c7600480803590602001909190505061074e565b005b34156101d457600080fd5b610200600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610869565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561022f57600080fd5b61024e60048080359060200190919080359060200190919050506108cd565b6040518082815260200191505060405180910390f35b341561026f57600080fd5b6102a060048080359060200190919080359060200190919080359060200190919080359060200190919050506108ec565b005b34156102ad57600080fd5b6102c5600480803515159060200190919050506109db565b005b34156102d257600080fd5b6102da610a53565b604051808261ffff1661ffff16815260200191505060405180910390f35b341561030357600080fd5b61030b610a67565b6040518082815260200191505060405180910390f35b341561032c57600080fd5b610361600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a6d565b005b341561036e57600080fd5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b8b565b005b34156103a757600080fd5b6103af610ccb565b6040518082815260200191505060405180910390f35b34156103d057600080fd5b6103d8610cd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042557600080fd5b61042d610cf6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047a57600080fd5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d1c565b005b34156104b357600080fd5b6104f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610e5d565b005b34156104fe57600080fd5b61052a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611018565b6040518082815260200191505060405180910390f35b341561054b57600080fd5b610592600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190803590602001909190505061109e565b005b341561059f57600080fd5b6105a76111b0565b604051808215151515815260200191505060405180910390f35b34156105cc57600080fd5b6105f8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c3565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60065481565b6000806000600260009054906101000a900460ff1615151561064157600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092506106904284600201546108cd565b9150600754600654838115156106a257fe5b0402905060008114156106b457600080fd5b6005548111156106c45760055490505b8083600001600082825401925050819055504283600201819055503373ffffffffffffffffffffffffffffffffffffffff167fb36df898d1bc3cc77dfd139c77654d6c197cf40c91f4c73fa9750602c9de98c884600001548560010154866002015460405180848152602001838152602001828152602001935050505060405180910390a2505050565b600080600260009054906101000a900460ff1615151561076d57600080fd5b600460008481526020019081526020016000209150600082600201541480610799575034826000015414155b156107a357600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050816002015481600101600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb36df898d1bc3cc77dfd139c77654d6c197cf40c91f4c73fa9750602c9de98c882600001548360010154846002015460405180848152602001838152602001828152602001935050505060405180910390a2505050565b600080600080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015481600101548260020154935093509350509193909250565b6000818310156108e057600090506108e6565b81830390505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610999575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15156109a457600080fd5b6004600086815260200190815260200160002090508381600001819055508281600101819055508181600201819055505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a3657600080fd5b80600260006101000a81548160ff02191690831515021790555050565b600060149054906101000a900461ffff1681565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b18575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b1515610b2357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631811115610b4757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610b8757600080fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610be657600080fd5b60001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610cc85760018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b50565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7757600080fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610e5a576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055505b50565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ebe57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1a57600080fd5b600460008581526020019081526020016000209150600082600201541480610f46575082826001015414155b15610f5057600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050816002015481600101600082825401925050819055508473ffffffffffffffffffffffffffffffffffffffff167fb36df898d1bc3cc77dfd139c77654d6c197cf40c91f4c73fa9750602c9de98c882600001548360010154846002015460405180848152602001838152602001828152602001935050505060405180910390a25050505050565b600080600080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020925061106d4284600201546108cd565b91506007546006548381151561107f57fe5b040290506005548111156110935760055490505b809350505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611149575060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b151561115457600080fd5b83600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600581905550816006819055508060078190555050505050565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561121e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561129557806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505600a165627a7a72305820408bec57a85329a57ec3828344fb169965c53a8d9a0ed268e98dfedb8c943c3e0029000000000000000000000000eb0058ce60d753004b0efa2164f88b2a5b528e7d",
  "constructorArguments": "000000000000000000000000eb0058ce60d753004b0efa2164f88b2a5b528e7d"
}