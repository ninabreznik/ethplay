{
  "address": "0xc48827e8fe197b424847744377771616109a0de5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Levblockchain_LVE_DAO",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    \n}\n\ncontract tokenRecipient {\n    event receivedEther(address sender, uint amount);\n    event receivedTokens(address _from, uint256 _value, address _token, bytes _extraData);\n\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n\n    function () payable external {\n        emit receivedEther(msg.sender, msg.value);\n    }\n}\n\ncontract Token  {\n    mapping (address => uint256) public balanceOf;\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n}\n\n/**\n * The shareholder association contract itself\n */\ncontract Levblockchain_LVE_DAO is owned, tokenRecipient {\n\n    uint public minimumQuorum;\n    uint public debatingPeriodInMinutes;\n    Proposal[] public proposals;\n    uint public numProposals;\n    Token public sharesTokenAddress;\n\n    event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\n    event Voted(uint proposalID, bool position, address voter);\n    event ProposalTallied(uint proposalID, uint result, uint quorum, bool active);\n    event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress);\n\n    struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n\n    struct Vote {\n        bool inSupport;\n        address voter;\n    }\n\n    // Modifier that allows only shareholders to vote and create new proposals\n    modifier onlyShareholders {\n        require(sharesTokenAddress.balanceOf(msg.sender) > 0);\n        _;\n    }\n\n    /**\n     * Constructor\n     *\n     * First time setup\n     */\n    constructor(Token sharesAddress, uint minimumSharesToPassAVote, uint minutesForDebate) payable public {\n        changeVotingRules(sharesAddress, minimumSharesToPassAVote, minutesForDebate);\n    }\n\n    /**\n     * Change voting rules\n     *\n     * Make so that proposals need to be discussed for at least `minutesForDebate/60` hours\n     * and all voters combined must own more than `minimumSharesToPassAVote` shares of token `sharesAddress` to be executed\n     *\n     * @param sharesAddress token address\n     * @param minimumSharesToPassAVote proposal can vote only if the sum of shares held by all voters exceed this number\n     * @param minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\n     */\n    function changeVotingRules(Token sharesAddress, uint minimumSharesToPassAVote, uint minutesForDebate) onlyOwner public {\n        sharesTokenAddress = Token(sharesAddress);\n        if (minimumSharesToPassAVote == 0 ) minimumSharesToPassAVote = 1;\n        minimumQuorum = minimumSharesToPassAVote;\n        debatingPeriodInMinutes = minutesForDebate;\n        emit ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, address(sharesTokenAddress));\n    }\n\n    /**\n     * Add Proposal\n     *\n     * Propose to send `weiAmount / 1e18` ether to `beneficiary` for `jobDescription`. `transactionBytecode ? Contains : Does not contain` code.\n     *\n     * @param beneficiary who to send the ether to\n     * @param weiAmount amount of ether to send, in wei\n     * @param jobDescription Description of job\n     * @param transactionBytecode bytecode of transaction\n     */\n    function newProposal(\n        address beneficiary,\n        uint weiAmount,\n        string memory jobDescription,\n        bytes memory transactionBytecode\n    )\n        onlyShareholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = beneficiary;\n        p.amount = weiAmount;\n        p.description = jobDescription;\n        p.proposalHash = keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, beneficiary, weiAmount, jobDescription);\n        numProposals = proposalID+1;\n\n        return proposalID;\n    }\n\n    /**\n     * Add proposal in Ether\n     *\n     * Propose to send `etherAmount` ether to `beneficiary` for `jobDescription`. `transactionBytecode ? Contains : Does not contain` code.\n     * This is a convenience function to use if the amount to be given is in round number of ether units.\n     *\n     * @param beneficiary who to send the ether to\n     * @param etherAmount amount of ether to send\n     * @param jobDescription Description of job\n     * @param transactionBytecode bytecode of transaction\n     */\n    function newProposalInEther(\n        address beneficiary,\n        uint etherAmount,\n        string memory jobDescription,\n        bytes memory transactionBytecode\n    )\n        onlyShareholders public\n        returns (uint proposalID)\n    {\n        return newProposal(beneficiary, etherAmount * 1 ether, jobDescription, transactionBytecode);\n    }\n\n    /**\n     * Check if a proposal code matches\n     *\n     * @param proposalNumber ID number of the proposal to query\n     * @param beneficiary who to send the ether to\n     * @param weiAmount amount of ether to send\n     * @param transactionBytecode bytecode of transaction\n     */\n    function checkProposalCode(\n        uint proposalNumber,\n        address beneficiary,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\n    }\n\n    /**\n     * Log a vote for a proposal\n     *\n     * Vote `supportsProposal? in support of : against` proposal #`proposalNumber`\n     *\n     * @param proposalNumber number of proposal\n     * @param supportsProposal either in favor or against it\n     */\n    function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyShareholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n\n    /**\n     * Finish vote\n     *\n     * Count the votes proposal #`proposalNumber` and execute it if approved\n     *\n     * @param proposalNumber proposal number\n     * @param transactionBytecode optional: if the transaction contained a bytecode, you need to send it\n     */\n    function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n\n        require(now > p.minExecutionDate                                             // If it is past the voting deadline\n            && !p.executed                                                          // and it has not already been executed\n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); // and the supplied code matches the proposal...\n\n\n        // ...then tally the results\n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = sharesTokenAddress.balanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n\n        require(quorum >= minimumQuorum); // Check if a minimum quorum has been reached\n\n        if (yea > nay ) {\n            // Proposal passed; execute the transaction\n\n            p.executed = true;\n            \n            bool success = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n\n            p.proposalPassed = true;\n        } else {\n            // Proposal failed\n            p.proposalPassed = false;\n        }\n\n        // Fire Events\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n}",
  "bytecode": "60806040526040516060806115e883398101604090815281516020830151919092015160008054600160a060020a03191633600160a060020a0316179055610051838383640100000000610059810204565b5050506100f5565b60005433600160a060020a0390811691161461007457600080fd5b60058054600160a060020a031916600160a060020a03851617905581151561009b57600191505b600182905560028190556005546040805184815260208101849052600160a060020a0390921682820152517f68259880819f96f54b67d672fefc666565de06099c91b57a689a42073ba090c99181900360600190a1505050565b6114e4806101046000396000f3006080604052600436106100c45763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663013cf08b8114610109578063237e9492146101de57806327ebcf0e1461023e578063400e39491461026f578063520910471461029657806369bd3436146102bd5780638160f0b5146102d25780638da5cb5b146102e75780638f4ffcb1146102fc578063b1050da51461036c578063b9f256cd14610413578063c9d27afe146104ba578063eceb2945146104d7575b60408051600160a060020a033316815234602082015281517fa398b89ba344a0b23a0b9de53db298b2a1a868b396c1878b7e9dcbafecd49b13929181900390910190a1005b34801561011557600080fd5b5061012160043561055a565b60408051600160a060020a038a16815260208082018a905260608201889052861515608083015285151560a083015260c0820185905260e0820184905261010092820183815289519383019390935288519192916101208401918a019080838360005b8381101561019c578181015183820152602001610184565b50505050905090810190601f1680156101c95780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156101ea57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261023c95833595369560449491939091019190819084018382808284375094975061064a9650505050505050565b005b34801561024a57600080fd5b506102536109c0565b60408051600160a060020a039092168252519081900360200190f35b34801561027b57600080fd5b506102846109cf565b60408051918252519081900360200190f35b3480156102a257600080fd5b5061023c600160a060020a03600435166024356044356109d5565b3480156102c957600080fd5b50610284610a7e565b3480156102de57600080fd5b50610284610a84565b3480156102f357600080fd5b50610253610a8a565b34801561030857600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261023c94600160a060020a03813581169560248035966044359093169536956084949201918190840183828082843750949750610a999650505050505050565b34801561037857600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610284948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610c209650505050505050565b34801561041f57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610284948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610f0b9650505050505050565b3480156104c657600080fd5b506102846004356024351515610fb3565b3480156104e357600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261054694803594600160a060020a03602480359190911695604435953695608494930191819084018382808284375094975061118f9650505050505050565b604080519115158252519081900360200190f35b600380548290811061056857fe5b6000918252602091829020600991909102018054600180830154600280850180546040805161010096831615969096026000190190911692909204601f8101889004880285018801909252818452600160a060020a03909416965090949192918301828280156106195780601f106105ee57610100808354040283529160200191610619565b820191906000526020600020905b8154815290600101906020018083116105fc57829003601f168201915b5050506003840154600485015460058601546006909601549495919460ff8083169550610100909204909116925088565b60008060008060008060008060038a81548110151561066557fe5b9060005260206000209060090201975087600301544211801561068d5750600488015460ff16155b80156107905750875460018901546040516c01000000000000000000000000600160a060020a039093169283026020808301918252603483018490528d518e93605401918401908083835b602083106106f75780518252601f1990920191602091820191016106d8565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b6020831061075c5780518252601f19909201916020918201910161073d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060068c015414925050505b151561079b57600080fd5b600096506000955060009450600093505b600788015484101561088257600788018054859081106107c857fe5b60009182526020808320600554920180546040805160e060020a6370a08231028152600160a060020a036101009093048316600482015290519298509316936370a08231936024808201949392918390030190829087803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b505050506040513d602081101561085657600080fd5b505183549781019790925060ff16156108725794810194610877565b938101935b8360010193506107ac565b60015487101561089157600080fd5b848611156109505760048801805460ff191660019081179091558854908901546040518b51600160a060020a03909316928c91908190602084019080838360005b838110156108ea5781810151838201526020016108d2565b50505050905090810190601f1680156109175780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af192505050905080151561093a57600080fd5b60048801805461ff00191661010017905561095e565b60048801805461ff00191690555b6004880154604080518c815287890360208201528082018a905261010090920460ff1615156060830152517f4bdc4ffee1d0e901f1c0270e9917651a82a81a109b5736b546a1b26668c55c0e916080908290030190a150505050505050505050565b600554600160a060020a031681565b60045481565b60005433600160a060020a039081169116146109f057600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038516179055811515610a2457600191505b600182905560028190556005546040805184815260208101849052600160a060020a0390921682820152517f68259880819f96f54b67d672fefc666565de06099c91b57a689a42073ba090c99181900360600190a1505050565b60025481565b60015481565b600054600160a060020a031681565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152308116602483015260448201869052915184928316916323b872dd9160648083019260209291908290030181600087803b158015610b0d57600080fd5b505af1158015610b21573d6000803e3d6000fd5b505050506040513d6020811015610b3757600080fd5b50511515610b4457600080fd5b7f0eeb71b8926d7ed8f47a2cedf6b9b204e2001344c7fa20c696c9f06ea7c413c6858585856040518085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bdc578181015183820152602001610bc4565b50505050905090810190601f168015610c095780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b6005546040805160e060020a6370a08231028152600160a060020a0333811660048301529151600093849384939116916370a082319160248082019260209290919082900301818787803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b505050506040513d6020811015610ca157600080fd5b505111610cad57600080fd5b6003805490610cbf90600183016112b7565b9150600382815481101515610cd057fe5b600091825260209182902060099190910201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038916178155600181018790558551909250610d26916002840191908701906112e8565b508585846040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183815260200182805190602001908083835b60208310610d895780518252601f199092019160209182019101610d6a565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b60208310610dee5780518252601f199092019160209182019101610dcf565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206006880155600254603c024201600388015560048701805461ffff19169055600060058801819055888352600160a060020a038d16838301529382018b90526080606083018181528b51918401919091528a517f646fec02522b41e7125cfc859a64fd4f4cefd5dc3b6237ca0abe251ded1fa88197508996508d958d95508c949360a0850192908601918190849084905b83811015610ebe578181015183820152602001610ea6565b50505050905090810190601f168015610eeb5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a16001820160045550949350505050565b6005546040805160e060020a6370a08231028152600160a060020a0333811660048301529151600093849316916370a0823191602480830192602092919082900301818787803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b505050506040513d6020811015610f8857600080fd5b505111610f9457600080fd5b610faa8585670de0b6b3a7640000028585610c20565b95945050505050565b6005546040805160e060020a6370a08231028152600160a060020a0333811660048301529151600093849384939116916370a082319160248082019260209290919082900301818787803b15801561100a57600080fd5b505af115801561101e573d6000803e3d6000fd5b505050506040513d602081101561103457600080fd5b50511161104057600080fd5b600380548590811061104e57fe5b60009182526020808320600160a060020a03331684526008600990930201918201905260409091205490915060ff1615156001141561108c57600080fd5b600781018054906110a09060018301611366565b91506040805190810160405280841515815260200133600160a060020a031681525081600701838154811015156110d357fe5b600091825260208083208451920180549482015160ff199586169315159390931774ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a03948516021790553390911680835260088501825260409283902080549094166001908117909455928501600585015581518781528615159181019190915280820192909252517f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0916060908290030190a15092915050565b6000806003868154811015156111a157fe5b906000526020600020906009020190508484846040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183815260200182805190602001908083835b602083106112135780518252601f1990920191602091820191016111f4565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b602083106112785780518252601f199092019160209182019101611259565b5181516000196020949094036101000a939093019283169219169190911790526040519201829003909120600685015414945050505050949350505050565b8154818355818111156112e3576009028160090283600052602060002091820191016112e3919061138a565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061132957805160ff1916838001178555611356565b82800160010185558215611356579182015b8281111561135657825182559160200191906001019061133b565b50611362929150611407565b5090565b8154818355818111156112e3576000838152602090206112e3918101908301611421565b61140491905b8082111561136257805473ffffffffffffffffffffffffffffffffffffffff191681556000600182018190556113c96002830182611453565b60006003830181905560048301805461ffff1916905560058301819055600683018190556113fb90600784019061149a565b50600901611390565b90565b61140491905b80821115611362576000815560010161140d565b61140491905b8082111561136257805474ffffffffffffffffffffffffffffffffffffffffff19168155600101611427565b50805460018160011615610100020316600290046000825580601f106114795750611497565b601f0160209004906000526020600020908101906114979190611407565b50565b508054600082559060005260206000209081019061149791906114215600a165627a7a72305820af2c8f125eb293c62e5c2f860baa0893ffabad8eb6157e1960498a364206d0510029000000000000000000000000a93f28cca763e766f96d008f815adaab16a8e38b0000000000000000000000000000000000000000000000000000000003473bc000000000000000000000000000000000000000000000000000000000000020e6",
  "constructorArguments": "000000000000000000000000a93f28cca763e766f96d008f815adaab16a8e38b0000000000000000000000000000000000000000000000000000000003473bc000000000000000000000000000000000000000000000000000000000000020e6"
}