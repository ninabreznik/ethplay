{
  "address": "0xf05a9382a4c3f29e2784502754293d88b835109c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "imbrex Token",
  "contractName": "RexToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-31\n*/\n\npragma solidity ^0.4.11;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value);\n  function approve(address spender, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract FinalizableToken {\n    bool public isFinalized = false;\n}\n\ncontract BasicToken is FinalizableToken, ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) {\n    if (!isFinalized) revert();\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) {\n    if (!isFinalized) revert();\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract SimpleToken is StandardToken {\n\n  string public name = \"SimpleToken\";\n  string public symbol = \"SIM\";\n  uint256 public decimals = 18;\n  uint256 public INITIAL_SUPPLY = 10000;\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens. \n   */\n  function SimpleToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}\n\n\n\n\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\ncontract RexToken is StandardToken, Ownable {\n\n  function version() constant returns (bytes32) {\n      return \"0.1.2-debug\";\n  }\n\n  string public constant name = \"REX - Real Estate tokens\";\n  string public constant symbol = \"REX\";\n  uint256 public constant decimals = 18;\n\n  uint256 constant BASE_RATE = 700;\n  uint256 constant ETH_RATE = 225; // TODO: update before deploying\n  uint256 constant USD_RAISED_CAP = 27*10**6; // 30*10**6 = $30 Million USD\n  uint256 constant ETHER_RAISED_CAP = USD_RAISED_CAP / ETH_RATE;\n  uint256 public constant WEI_RAISED_CAP = ETHER_RAISED_CAP * 1 ether;\n  uint256 constant DURATION = 4 weeks;\n\n  uint256 TOTAL_SHARE = 1000;\n  uint256 CROWDSALE_SHARE = 500;\n\n  address ANGELS_ADDRESS = 0x00998eba0E5B83018a0CFCdeCc5304f9f167d27a;\n  uint256 ANGELS_SHARE = 50;\n\n  address CORE_1_ADDRESS = 0x4aD48BE9bf6E2d35277Bd33C100D283C29C7951F;\n  uint256 CORE_1_SHARE = 75;\n  address CORE_2_ADDRESS = 0x2a62609c6A6bDBE25Da4fb05980e85db9A479C5e;\n  uint256 CORE_2_SHARE = 75;\n\n  address PARTNERSHIP_ADDRESS = 0x53B8fFBe35AE548f22d5a3b31D6E5e0C04f0d2DF;\n  uint256 PARTNERSHIP_SHARE = 70;\n\n  address REWARDS_ADDRESS = 0x43F1aa047D3241B7DD250EB37b25fc509085fDf9;\n  uint256 REWARDS_SHARE = 200;\n\n  address AFFILIATE_ADDRESS = 0x64ea62A8080eD1C2b8d996ACC7a82108975e5361;\n  uint256 AFFILIATE_SHARE = 30;\n\n  // state variables\n  address vault;\n  address previousToken;\n  uint256 public startTime;\n  uint256 public weiRaised;\n\n  event TokenCreated(address indexed investor, uint256 amount);\n\n  function RexToken(uint256 _start, address _vault, address _previousToken) {\n    startTime = _start;\n    vault = _vault;\n    previousToken = _previousToken;\n    isFinalized = false;\n  }\n\n  function () payable {\n    createTokens(msg.sender);\n  }\n\n  function createTokens(address recipient) payable {\n    if (tokenSaleOnHold) revert();\n    if (msg.value == 0) revert();\n    if (now < startTime) revert();\n    if (now > startTime + DURATION) revert();\n\n    uint256 weiAmount = msg.value;\n\n    if (weiRaised >= WEI_RAISED_CAP) revert();\n\n    //if funder sent more than the remaining amount then send them a refund of the difference\n    if ((weiRaised + weiAmount) > WEI_RAISED_CAP) {\n      weiAmount = WEI_RAISED_CAP - weiRaised;\n      if (!msg.sender.send(msg.value - weiAmount)) \n        revert();\n    }\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(getRate());\n\n    // update totals\n    totalSupply = totalSupply.add(tokens);\n    weiRaised = weiRaised.add(weiAmount);\n\n    balances[recipient] = balances[recipient].add(tokens);\n    TokenCreated(recipient, tokens);\n\n    // send ether to the vault\n    if (!vault.send(weiAmount)) revert();\n  }\n\n  // return dynamic pricing\n  function getRate() constant returns (uint256) {\n    uint256 bonus = 0;\n    if (now < (startTime + 1 weeks)) {\n      bonus = 300;\n    } else if (now < (startTime + 2 weeks)) {\n      bonus = 200;\n    } else if (now < (startTime + 3 weeks)) {\n      bonus = 100;\n    }\n    return BASE_RATE.add(bonus);\n  }\n\n  function tokenAmount(uint256 share, uint256 finalSupply) constant returns (uint) {\n    if (share > TOTAL_SHARE) revert();\n\n    return share.mul(finalSupply).div(TOTAL_SHARE);\n  }\n\n  // grant regular tokens by share\n  function grantTokensByShare(address to, uint256 share, uint256 finalSupply) internal {\n    uint256 tokens = tokenAmount(share, finalSupply);\n    balances[to] = balances[to].add(tokens);\n    TokenCreated(to, tokens);\n    totalSupply = totalSupply.add(tokens);\n  }\n\n  function getFinalSupply() constant returns (uint256) {\n    return TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE);\n  }\n\n\n  // do final token distribution\n  function finalize() onlyOwner() {\n    if (isFinalized) revert();\n\n    //if we are under the cap and not hit the duration then throw\n    if (weiRaised < WEI_RAISED_CAP && now <= startTime + DURATION) revert();\n\n    uint256 finalSupply = getFinalSupply();\n\n    grantTokensByShare(ANGELS_ADDRESS, ANGELS_SHARE, finalSupply);\n    grantTokensByShare(CORE_1_ADDRESS, CORE_1_SHARE, finalSupply);\n    grantTokensByShare(CORE_2_ADDRESS, CORE_2_SHARE, finalSupply);\n\n    grantTokensByShare(PARTNERSHIP_ADDRESS, PARTNERSHIP_SHARE, finalSupply);\n    grantTokensByShare(REWARDS_ADDRESS, REWARDS_SHARE, finalSupply);\n    grantTokensByShare(AFFILIATE_ADDRESS, AFFILIATE_SHARE, finalSupply);\n    \n    isFinalized = true;\n  }\n\n  bool public tokenSaleOnHold;\n\n  function toggleTokenSaleOnHold() onlyOwner() {\n    if (tokenSaleOnHold)\n      tokenSaleOnHold = false;\n    else\n      tokenSaleOnHold = true;\n  }\n\n  bool public migrateDisabled;\n\n  struct structMigrate {\n    uint dateTimeCreated;\n    uint amount;\n  }\n\n  mapping(address => structMigrate) pendingMigrations;\n\n  function toggleMigrationStatus() onlyOwner() {\n    if (migrateDisabled)\n      migrateDisabled = false;\n    else\n      migrateDisabled = true;\n  }\n\n  function migrate(uint256 amount) {\n\n    //dont allow migrations until crowdfund is done\n    if (!isFinalized) \n      revert();\n\n    //dont proceed if migrate is disabled\n    if (migrateDisabled) \n      revert();\n\n    //dont proceed if there is pending value\n    if (pendingMigrations[msg.sender].amount > 0)\n      revert();\n\n\n    //this will throw if they dont have the balance/allowance\n    StandardToken(previousToken).transferFrom(msg.sender, this, amount);\n\n    //store time and amount in pending mapping\n    pendingMigrations[msg.sender].dateTimeCreated = now;\n    pendingMigrations[msg.sender].amount = amount;\n  }\n\n  function claimMigrate() {\n\n    //dont allow if migrations are disabled\n    if (migrateDisabled) \n      revert();\n\n    //dont proceed if no value\n    if (pendingMigrations[msg.sender].amount == 0)\n      revert();\n\n    //can only claim after a week has passed\n    if (now < pendingMigrations[msg.sender].dateTimeCreated + 1 weeks)\n      revert();\n\n    //credit the balances\n    balances[msg.sender] += pendingMigrations[msg.sender].amount;\n    totalSupply += pendingMigrations[msg.sender].amount;\n\n    //remove the pending migration from the mapping\n    delete pendingMigrations[msg.sender];\n  }\n\n  function transferOwnCoins(address _to, uint _value) onlyOwner() {\n    if (!isFinalized) revert();\n\n    balances[this] = balances[this].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(this, _to, _value);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleOnHold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferOwnCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMigrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEI_RAISED_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"finalSupply\",\"type\":\"uint256\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleMigrationStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleTokenSaleOnHold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_previousToken\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000805460ff191690556103e86005556101f460065560078054600160a060020a031990811672998eba0e5b83018a0cfcdecc5304f9f167d27a179091556032600855600980548216734ad48be9bf6e2d35277bd33c100d283c29c7951f179055604b600a819055600b80548316732a62609c6a6bdbe25da4fb05980e85db9a479c5e179055600c55600d805482167353b8ffbe35ae548f22d5a3b31d6e5e0c04f0d2df1790556046600e55600f805482167343f1aa047d3241b7dd250eb37b25fc509085fdf917905560c8601055601180549091167364ea62a8080ed1c2b8d996acc7a82108975e5361179055601e601255341561010257600080fd5b6040516060806114158339810160405280805191906020018051919060200180519150505b5b60048054600160a060020a03191633600160a060020a03161790555b601583905560138054600160a060020a03808516600160a060020a03199283161790925560148054928416929091169190911790556000805460ff191690555b5050505b61127e806101976000396000f300606060405236156101675763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610179578063095ea7b31461020457806318160ddd1461022857806323b872dd1461024d578063313ce567146102775780634042b66f1461029c578063454b0608146102c157806346b249b9146102d957806347e2688d146103005780634bb278f3146103255780634f945a8a1461033a57806354fd4d501461035e578063679aefce1461038357806370a08231146103a857806378e97925146103d95780638d4e4083146103fe5780638da5cb5b1461042557806395d89b41146104545780639fc18d4b146104df578063a9059cbb14610506578063bddf66ff1461052a578063bff41e361461053f578063cedbbeee14610564578063dd62ed3e1461057a578063e7b83730146105b1578063f2fde38b146105dc578063f3191443146105fd578063f653d28614610612575b6101775b61017433610627565b5b565b005b341561018457600080fd5b61018c6107f8565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c95780820151818401525b6020016101b0565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020f57600080fd5b610177600160a060020a036004351660243561082f565b005b341561023357600080fd5b61023b6108d1565b60405190815260200160405180910390f35b341561025857600080fd5b610177600160a060020a03600435811690602435166044356108d7565b005b341561028257600080fd5b61023b6109f6565b60405190815260200160405180910390f35b34156102a757600080fd5b61023b6109fb565b60405190815260200160405180910390f35b34156102cc57600080fd5b610177600435610a01565b005b34156102e457600080fd5b6102ec610b03565b604051901515815260200160405180910390f35b341561030b57600080fd5b61023b610b0c565b60405190815260200160405180910390f35b341561033057600080fd5b610177610b3d565b005b341561034557600080fd5b610177600160a060020a0360043516602435610c5a565b005b341561036957600080fd5b61023b610d42565b60405190815260200160405180910390f35b341561038e57600080fd5b61023b610d67565b60405190815260200160405180910390f35b34156103b357600080fd5b61023b600160a060020a0360043516610dc9565b60405190815260200160405180910390f35b34156103e457600080fd5b61023b610de8565b60405190815260200160405180910390f35b341561040957600080fd5b6102ec610dee565b604051901515815260200160405180910390f35b341561043057600080fd5b610438610df7565b604051600160a060020a03909116815260200160405180910390f35b341561045f57600080fd5b61018c610e06565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c95780820151818401525b6020016101b0565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ea57600080fd5b6102ec610e3d565b604051901515815260200160405180910390f35b341561051157600080fd5b610177600160a060020a0360043516602435610e4b565b005b341561053557600080fd5b610177610f17565b005b341561054a57600080fd5b61023b610fc1565b60405190815260200160405180910390f35b610177600160a060020a0360043516610627565b005b341561058557600080fd5b61023b600160a060020a0360043581169060243516610fd7565b60405190815260200160405180910390f35b34156105bc57600080fd5b61023b600435602435611004565b60405190815260200160405180910390f35b34156105e757600080fd5b610177600160a060020a0360043516611041565b005b341561060857600080fd5b610177611099565b005b341561061d57600080fd5b6101776110e8565b005b601754600090819060ff161561063c57600080fd5b34151561064857600080fd5b60155442101561065757600080fd5b6224ea006015540142111561066b57600080fd5b34915060e163019bfcc05b04670de0b6b3a76400000260165410151561069057600080fd5b60e163019bfcc05b04670de0b6b3a764000002826016540111156106fc5760165460e163019bfcc05b04670de0b6b3a76400000203915033600160a060020a03166108fc8334039081150290604051600060405180830381858888f1935050505015156106fc57600080fd5b5b610715610708610d67565b839063ffffffff61112f16565b60015490915061072b908263ffffffff61115e16565b600155601654610741908363ffffffff61115e16565b601655600160a060020a03831660009081526002602052604090205461076d908263ffffffff61115e16565b600160a060020a0384166000818152600260205260409081902092909255907f1cef2b4ec7f129e441c961eb4fae22fd3131868db6be990c6f065f35b6b53cf39083905190815260200160405180910390a2601354600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156107f257600080fd5b5b505050565b60408051908101604052601881527f524558202d205265616c2045737461746520746f6b656e730000000000000000602082015281565b80158015906108625750600160a060020a0333811660009081526003602090815260408083209386168352929052205415155b1561086c57600080fd5b600160a060020a03338116600081815260036020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60015481565b6000805460ff1615156108e957600080fd5b50600160a060020a03808416600090815260036020908152604080832033851684528252808320549386168352600290915290205461092e908363ffffffff61115e16565b600160a060020a038085166000908152600260205260408082209390935590861681522054610963908363ffffffff61117816565b600160a060020a03851660009081526002602052604090205561098c818363ffffffff61117816565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b50505050565b601281565b60165481565b60005460ff161515610a1257600080fd5b601754610100900460ff1615610a2757600080fd5b600160a060020a0333166000908152601860205260408120600101541115610a4e57600080fd5b601454600160a060020a03166323b872dd3330846040517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610aca57600080fd5b6102c65a03f11515610adb57600080fd5b505050600160a060020a03331660009081526018602052604090204281556001018190555b50565b60175460ff1681565b6000610b37600654610b2b60015460055461112f90919063ffffffff16565b9063ffffffff61118f16565b90505b90565b60045460009033600160a060020a03908116911614610b5b57600080fd5b60005460ff1615610b6b57600080fd5b60e163019bfcc05b04670de0b6b3a764000002601654108015610b9557506224ea00601554014211155b15610b9f57600080fd5b610ba7610b0c565b600754600854919250610bc691600160a060020a0390911690836111ab565b600954600a54610be091600160a060020a031690836111ab565b600b54600c54610bfa91600160a060020a031690836111ab565b600d54600e54610c1491600160a060020a031690836111ab565b600f54601054610c2e91600160a060020a031690836111ab565b601154601254610c4891600160a060020a031690836111ab565b6000805460ff191660011790555b5b50565b60045433600160a060020a03908116911614610c7557600080fd5b60005460ff161515610c8657600080fd5b600160a060020a033016600090815260026020526040902054610caf908263ffffffff61117816565b600160a060020a033081166000908152600260205260408082209390935590841681522054610ce4908263ffffffff61115e16565b600160a060020a0380841660008181526002602052604090819020939093559130909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5b5050565b7f302e312e322d64656275670000000000000000000000000000000000000000005b90565b601554600090819062093a8001421015610d84575061012c610dae565b6015546212750001421015610d9b575060c8610dae565b601554621baf8001421015610dae575060645b5b5b610dc26102bc8263ffffffff61115e16565b91505b5090565b600160a060020a0381166000908152600260205260409020545b919050565b60155481565b60005460ff1681565b600454600160a060020a031681565b60408051908101604052600381527f5245580000000000000000000000000000000000000000000000000000000000602082015281565b601754610100900460ff1681565b60005460ff161515610e5c57600080fd5b600160a060020a033316600090815260026020526040902054610e85908263ffffffff61117816565b600160a060020a033381166000908152600260205260408082209390935590841681522054610eba908263ffffffff61115e16565b600160a060020a0380841660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b601754610100900460ff1615610f2c57600080fd5b600160a060020a0333166000908152601860205260409020600101541515610f5357600080fd5b600160a060020a03331660009081526018602052604090205462093a8001421015610f7d57600080fd5b600160a060020a033316600090815260186020818152604080842060018082018054600286529387208054909401909355939092528054835401909255829055555b565b60e163019bfcc05b04670de0b6b3a76400000281565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b600060055483111561101557600080fd5b60055461103890610b2b858563ffffffff61112f16565b9063ffffffff61118f16565b90505b92915050565b60045433600160a060020a0390811691161461105c57600080fd5b600160a060020a03811615610b00576004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b60045433600160a060020a039081169116146110b457600080fd5b601754610100900460ff16156110d4576017805461ff0019169055610174565b6017805461ff0019166101001790555b5b5b565b60045433600160a060020a0390811691161461110357600080fd5b60175460ff161561111d576017805460ff19169055610174565b6017805460ff191660011790555b5b5b565b600082820283158061114b575082848281151561114857fe5b04145b151561115357fe5b8091505b5092915050565b60008282018381101561115357fe5b8091505b5092915050565b60008282111561118457fe5b508082035b92915050565b600080828481151561119d57fe5b0490508091505b5092915050565b60006111b78383611004565b600160a060020a0385166000908152600260205260409020549091506111e3908263ffffffff61115e16565b600160a060020a0385166000818152600260205260409081902092909255907f1cef2b4ec7f129e441c961eb4fae22fd3131868db6be990c6f065f35b6b53cf39083905190815260200160405180910390a2600154611248908263ffffffff61115e16565b6001555b505050505600a165627a7a723058205a6dfd9be515d77b04f95cba1edbc739a4dd28239e131ef375dada615803494f002900000000000000000000000000000000000000000000000000000000597f540000000000000000000000000003e4b00b607d09811b0fa61cf636a6460861939f00000000000000000000000099d439455991f7f4885f20c634c9a31918d366e5",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000597f540000000000000000000000000003e4b00b607d09811b0fa61cf636a6460861939f00000000000000000000000099d439455991f7f4885f20c634c9a31918d366e5"
}