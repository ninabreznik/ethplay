{
  "address": "0x3a1957a0b9755d78c77e301410b254b6147a400c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoServal",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-27\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/IMarketplace.sol\n\ncontract IMarketplace {\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external;\n}\n\n// File: contracts/GameData.sol\n\ncontract GameData {\n    struct Country {       \n        bytes2 isoCode;\n        uint8 animalsCount;\n        uint256[3] animalIds;\n    }\n\n    struct Animal {\n        bool isSold;\n        uint256 currentValue;\n        uint8 rarity; // 0-4, rarity = stat range, higher rarity = better stats\n\n        bytes32 name;         \n        uint256 countryId; // country of origin\n\n    }\n\n    struct Dna {\n        uint256 animalId; \n        uint8 effectiveness; //  1 - 100, 100 = same stats as a wild card\n    }    \n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Restricted.sol\n\ncontract Restricted is Ownable {\n    mapping(address => bool) private addressIsAdmin;\n    bool private isActive = true;\n\n    modifier onlyAdmin() {\n        require(addressIsAdmin[msg.sender] || msg.sender == owner);\n        _;\n    }\n\n    modifier contractIsActive() {\n        require(isActive);\n        _;\n    }\n\n    function addAdmin(address adminAddress) public onlyOwner {\n        addressIsAdmin[adminAddress] = true;\n    }\n\n    function removeAdmin(address adminAddress) public onlyOwner {\n        addressIsAdmin[adminAddress] = false;\n    }\n\n    function pauseContract() public onlyOwner {\n        isActive = false;\n    }\n\n    function activateContract() public onlyOwner {\n        isActive = true;\n    }\n}\n\n// File: contracts/CryptoServal.sol\n\ncontract CryptoServal is ERC721Token(\"CryptoServal\", \"CS\"), GameData, Restricted {\n\n    using AddressUtils for address;\n\n    uint8 internal developersFee = 5;\n    uint256[3] internal rarityTargetValue = [0.5 ether, 1 ether, 2 ether];\n\n    Country[] internal countries;\n    Animal[] internal animals;\n    Dna[] internal dnas;\n\n    using SafeMath for uint256;\n\n    event AnimalBoughtEvent(\n        uint256 animalId,\n        address previousOwner,\n        address newOwner,\n        uint256 pricePaid,\n        bool isSold\n    );\n\n    mapping (address => uint256) private addressToDnaCount;\n\n    mapping (uint => address) private dnaIdToOwnerAddress;\n\n    uint256 private startingAnimalPrice = 0.001 ether;\n\n    IMarketplace private marketplaceContract;\n\n    bool private shouldGenerateDna = true;\n\n    modifier validTokenId(uint256 _tokenId) {\n        require(_tokenId < animals.length);\n        _;\n    }\n\n    modifier soldOnly(uint256 _tokenId) {\n        require(animals[_tokenId].isSold);\n        _;\n    }\n\n    modifier isNotFromContract() {\n        require(!msg.sender.isContract());\n        _;\n    }\n\n    function () public payable {\n    }\n\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external\n        isNotFromContract\n    {\n        // approve, not a transfer, let marketplace confirm the original owner and take ownership\n        approve(address(marketplaceContract), _tokenId);\n        marketplaceContract.createAuction(_tokenId, startPrice, endPrice, duration);\n    }\n\n    function setMarketplaceContract(address marketplaceAddress) external onlyOwner {\n        marketplaceContract = IMarketplace(marketplaceAddress);\n    }\n\n    function getPlayerAnimals(address playerAddress)\n        external\n        view\n        returns(uint256[])\n    {\n        uint256 animalsOwned = ownedTokensCount[playerAddress];\n        uint256[] memory playersAnimals = new uint256[](animalsOwned);\n\n        if (animalsOwned == 0) {\n            return playersAnimals;\n        }\n\n        uint256 animalsLength = animals.length;\n        uint256 playersAnimalsIndex = 0;\n        uint256 animalId = 0;\n        while (playersAnimalsIndex < animalsOwned && animalId < animalsLength) {\n            if (tokenOwner[animalId] == playerAddress) {\n                playersAnimals[playersAnimalsIndex] = animalId;\n                playersAnimalsIndex++;\n            }\n            animalId++;\n        }\n\n        return playersAnimals;\n    }\n\n    function getPlayerDnas(address playerAddress) external view returns(uint256[]) {\n        uint256 dnasOwned = addressToDnaCount[playerAddress];\n        uint256[] memory playersDnas = new uint256[](dnasOwned);\n\n        if (dnasOwned == 0) {\n            return playersDnas;\n        }\n\n        uint256 dnasLength = dnas.length;\n        uint256 playersDnasIndex = 0;\n        uint256 dnaId = 0;\n        while (playersDnasIndex < dnasOwned && dnaId < dnasLength) {\n            if (dnaIdToOwnerAddress[dnaId] == playerAddress) {\n                playersDnas[playersDnasIndex] = dnaId;\n                playersDnasIndex++;\n            }\n            dnaId++;\n        }\n\n        return playersDnas;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        public\n        validTokenId(_tokenId)\n        soldOnly(_tokenId)\n    {\n        super.transferFrom(_from, _to, _tokenId);\n    }\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n        public\n        validTokenId(_tokenId)\n        soldOnly(_tokenId)\n    {\n        super.safeTransferFrom(_from, _to, _tokenId);\n    }\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data)\n        public\n        validTokenId(_tokenId)\n        soldOnly(_tokenId)\n    {\n        super.safeTransferFrom(_from, _to, _tokenId, _data);\n    }\n\n    function buyAnimal(uint256 id) public payable isNotFromContract contractIsActive {\n        uint256 etherSent = msg.value;\n        address sender = msg.sender;\n\n        Animal storage animalToBuy = animals[id];\n\n        require(etherSent >= animalToBuy.currentValue);\n        require(tokenOwner[id] != sender);\n        require(!animalToBuy.isSold);\n        uint256 etherToPay = animalToBuy.currentValue;\n        uint256 etherToRefund = etherSent.sub(etherToPay);\n        address previousOwner = tokenOwner[id];\n\n        // Inlined transferFrom\n        clearApproval(previousOwner, id);\n        removeTokenFrom(previousOwner, id);\n        addTokenTo(sender, id);\n\n        emit Transfer(previousOwner, sender, id);\n        //\n\n        // subtract developers fee\n        uint256 ownersShare = etherToPay.sub(etherToPay * developersFee / 100);\n        // pay previous owner\n        previousOwner.transfer(ownersShare);\n        // refund overpaid ether\n        refundSender(sender, etherToRefund);\n\n        // If the bid is above the target price, lock the buying via this contract and enable ERC721\n        if (etherToPay >= rarityTargetValue[animalToBuy.rarity]) {\n            animalToBuy.isSold = true;\n            animalToBuy.currentValue = 0;\n        } else {\n            // calculate new value, multiplier depends on current amount of ether\n            animalToBuy.currentValue = calculateNextEtherValue(animalToBuy.currentValue);\n        }\n\n        if (shouldGenerateDna) {\n            generateDna(sender, id, etherToPay, animalToBuy);\n        }\n        emit AnimalBoughtEvent(id, previousOwner, sender, etherToPay, animalToBuy.isSold);\n    }\n\n    function getAnimal(uint256 _animalId)\n        public\n        view\n        returns(\n            uint256 countryId,\n            bytes32 name,\n            uint8 rarity,\n            uint256 currentValue,\n            uint256 targetValue,\n            address owner,\n            uint256 id\n        )\n    {\n        Animal storage animal = animals[_animalId];\n        return (\n            animal.countryId,\n            animal.name,\n            animal.rarity,\n            animal.currentValue,\n            rarityTargetValue[animal.rarity],\n            tokenOwner[_animalId],\n            _animalId\n        );\n    }\n\n    function getAnimalsCount() public view returns(uint256 animalsCount) {\n        return animals.length;\n    }\n\n    function getDna(uint256 _dnaId)\n        public\n        view\n        returns(\n            uint animalId,\n            address owner,\n            uint16 effectiveness,\n            uint256 id\n        )\n    {\n        Dna storage dna = dnas[_dnaId];\n        return (dna.animalId, dnaIdToOwnerAddress[_dnaId], dna.effectiveness, _dnaId);\n    }\n\n    function getDnasCount() public view returns(uint256) {\n        return dnas.length;\n    }\n\n    function getCountry(uint256 _countryId)\n        public\n        view\n        returns(\n            bytes2 isoCode,\n            uint8 animalsCount,\n            uint256[3] animalIds,\n            uint256 id\n        )\n    {\n        Country storage country = countries[_countryId];\n        return(country.isoCode, country.animalsCount, country.animalIds, _countryId);\n    }\n\n    function getCountriesCount() public view returns(uint256 countriesCount) {\n        return countries.length;\n    }\n\n    function getDevelopersFee() public view returns(uint8) {\n        return developersFee;\n    }\n\n    function getMarketplaceContract() public view returns(address) {\n        return marketplaceContract;\n    }\n\n    function getShouldGenerateDna() public view returns(bool) {\n        return shouldGenerateDna;\n    }\n\n    function withdrawContract() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function setDevelopersFee(uint8 _developersFee) public onlyOwner {\n        require((_developersFee >= 0) && (_developersFee <= 8));\n        developersFee = _developersFee;\n    }\n\n    function setShouldGenerateDna(bool _shouldGenerateDna) public onlyAdmin {\n        shouldGenerateDna = _shouldGenerateDna;\n    }\n\n    function addCountry(bytes2 isoCode) public onlyAdmin {\n        Country memory country;\n        country.isoCode = isoCode;\n        countries.push(country);\n    }\n\n    function addAnimal(uint256 countryId, bytes32 animalName, uint8 rarity) public onlyAdmin {\n        require((rarity >= 0) && (rarity < 3));\n        Country storage country = countries[countryId];\n\n        uint256 id = animals.length; // id is assigned before push\n\n        Animal memory animal = Animal(\n            false, // new animal is not sold yet\n            startingAnimalPrice,\n            rarity,\n            animalName,\n            countryId\n        );\n\n        animals.push(animal);\n        addAnimalIdToCountry(id, country);\n        _mint(address(this), id);\n    }\n\n    function changeCountry(uint256 id, bytes2 isoCode) public onlyAdmin {\n        Country storage country = countries[id];\n        country.isoCode = isoCode;\n    }\n\n    function changeAnimal(uint256 animalId, uint256 countryId, bytes32 name, uint8 rarity)\n        public\n        onlyAdmin\n    {\n        require(countryId < countries.length);\n        Animal storage animal = animals[animalId];\n        if (animal.name != name) {\n            animal.name = name;\n        }\n        if (animal.rarity != rarity) {\n            require((rarity >= 0) && (rarity < 3));\n            animal.rarity = rarity;\n        }\n        if (animal.countryId != countryId) {\n            Country storage country = countries[countryId];\n\n            uint256 oldCountryId = animal.countryId;\n\n            addAnimalIdToCountry(animalId, country);\n            removeAnimalIdFromCountry(animalId, oldCountryId);\n\n            animal.countryId = countryId;\n        }\n    }\n\n    function setRarityTargetValue(uint8 index, uint256 targetValue) public onlyAdmin {\n        rarityTargetValue[index] = targetValue;\n    }\n\n    function calculateNextEtherValue(uint256 currentEtherValue) public pure returns(uint256) {\n        if (currentEtherValue < 0.1 ether) {\n            return currentEtherValue.mul(2);\n        } else if (currentEtherValue < 0.5 ether) {\n            return currentEtherValue.mul(3).div(2); // x1.5\n        } else if (currentEtherValue < 1 ether) {\n            return currentEtherValue.mul(4).div(3); // x1.33\n        } else if (currentEtherValue < 5 ether) {\n            return currentEtherValue.mul(5).div(4); // x1.25\n        } else if (currentEtherValue < 10 ether) {\n            return currentEtherValue.mul(6).div(5); // x1.2\n        } else {\n            return currentEtherValue.mul(7).div(6); // 1.16\n        }\n    }\n\n    function refundSender(address sender, uint256 etherToRefund) private {\n        if (etherToRefund > 0) {\n            sender.transfer(etherToRefund);\n        }\n    }\n\n    function generateDna(\n        address sender,\n        uint256 animalId,\n        uint256 pricePaid,\n        Animal animal\n    )\n        private\n    {\n        uint256 id = dnas.length; // id is assigned before push\n        Dna memory dna = Dna(\n            animalId,\n            calculateAnimalEffectiveness(pricePaid, animal)\n        );\n\n        dnas.push(dna);\n\n        dnaIdToOwnerAddress[id] = sender;\n        addressToDnaCount[sender] = addressToDnaCount[sender].add(1);\n    }\n\n    function calculateAnimalEffectiveness(\n        uint256 pricePaid,\n        Animal animal\n    )\n        private\n        view\n        returns(uint8)\n    {\n        if (animal.isSold) {\n            return 100;\n        }\n\n        uint256 effectiveness = 10; // 10-90;\n        // more common the animal = cheaper effectiveness\n        uint256 effectivenessPerEther = 10**18 * 80 / rarityTargetValue[animal.rarity];\n        effectiveness = effectiveness.add(pricePaid * effectivenessPerEther / 10**18);\n\n        if (effectiveness > 90) {\n            effectiveness = 90;\n        }\n\n        return uint8(effectiveness);\n    }\n\n    function addAnimalIdToCountry(\n        uint256 animalId,\n        Country storage country\n    )\n        private\n    {\n        uint8 animalSlotIndex = country.animalsCount;\n        require(animalSlotIndex < 3);\n        country.animalIds[animalSlotIndex] = animalId;\n        country.animalsCount += 1;\n    }\n\n    function removeAnimalIdFromCountry(uint256 animalId, uint256 countryId) private {\n        Country storage country = countries[countryId];\n        for (uint8 i = 0; i < country.animalsCount; i++) {\n            if (country.animalIds[i] == animalId) {\n                if (i != country.animalsCount - 1) {\n                    country.animalIds[i] = country.animalIds[country.animalsCount - 1];\n                }\n                country.animalsCount -= 1;\n                return;\n            }\n        }\n    }\n}",
  "bytecode": ""
}