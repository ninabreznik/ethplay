{
  "address": "0x2dcd9b1a7ed408ff48bd4918a1f9c0535dc54ead",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WeSingCoin223Token_11",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-25\n*/\n\npragma solidity ^0.4.23;\n//pragma experimental ABIEncoderV2;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n//-------------------------------------------------------------------------------------\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    uint public totalSupply;\n    function balanceOf(address who) public view returns (uint);\n    function allowance(address owner, address spender) public view returns (uint);\n\n    function transfer(address to, uint value) public returns (bool ok);\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\n    function approve(address spender, uint value) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract ERC223 is ERC20 {\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transferFrom(address from, address to, uint value, bytes data) public returns (bool ok);\n}\n\n/*\nBase class contracts willing to accept ERC223 token transfers must conform to.\n\nSender: msg.sender to the token contract, the address originating the token transfer.\n          - For user originated transfers sender will be equal to tx.origin\n          - For contract originated transfers, tx.origin will be the user that made the tx that produced the transfer.\nOrigin: the origin address from whose balance the tokens are sent\n          - For transfer(), origin = msg.sender\n          - For transferFrom() origin = _from to token contract\nValue is the amount of tokens sent\nData is arbitrary data sent with the token transfer. Simulates ether tx.data\n\nFrom, origin and value shouldn't be trusted unless the token contract is trusted.\nIf sender == tx.origin, it is safe to trust it regardless of the token.\n*/\n\ncontract ERC223Receiver {\n    function tokenFallback(address _sender, address _origin, uint _value, bytes _data) public returns (bool ok);\n}\n\ncontract Standard223Receiver is ERC223Receiver {\n    function supportsToken(address token) public view returns (bool);\n}\n\n\n//-------------------------------------------------------------------------------------\n//Implementation\n\ncontract WeSingCoin223Token_11 is ERC20, ERC223, Standard223Receiver, SafeMath {\n\n    mapping(address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n  \n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show.\n    string public symbol;                 //An identifier: eg SBX\n\n    address /*public*/ contrInitiator;\n    address /*public*/ thisContract;\n    bool /*public*/ isTokenSupport;\n  \n    mapping(address => bool) isSendingLocked;\n    bool isAllTransfersLocked;\n  \n    uint oneTransferLimit;\n    uint oneDayTransferLimit;\n \n\n    struct TransferInfo {\n        //address sender;    //maybe use in the future\n        //address from;      //no need because all this is kept in transferInfo[_from]\n        //address to;        //maybe use in the future\n        uint256 value;\n        uint time;\n    }\n\n    struct TransferInfos {\n        mapping (uint => TransferInfo) ti;\n        uint tc;\n    }\n  \n    mapping (address => TransferInfos) transferInfo;\n\n//-------------------------------------------------------------------------------------\n//from ExampleToken\n\n    constructor(/*uint initialBalance*/) public {\n    \n        decimals    = 6;                                // Amount of decimals for display purposes\n        name        = \"WeSingCoin\";                     // Set the name for display purposes\n        symbol      = 'WSC';                            // Set the symbol for display purposes\n\n        uint initialBalance  = (10 ** uint256(decimals)) * 5000*1000*1000;\n    \n        balances[msg.sender] = initialBalance;\n        totalSupply = initialBalance;\n    \n        contrInitiator = msg.sender;\n        thisContract = this;\n        isTokenSupport = false;\n    \n        isAllTransfersLocked = true;\n    \n        oneTransferLimit    = (10 ** uint256(decimals)) * 10*1000*1000;\n        oneDayTransferLimit = (10 ** uint256(decimals)) * 50*1000*1000;\n\n    // Ideally call token fallback here too\n    }\n\n//-------------------------------------------------------------------------------------\n//from StandardToken\n\n    function super_transfer(address _to, uint _value) /*public*/ internal returns (bool success) {\n\n        require(!isSendingLocked[msg.sender]);\n        require(_value <= oneTransferLimit);\n        require(balances[msg.sender] >= _value);\n\n        if(msg.sender == contrInitiator) {\n            //no restricton\n        } else {\n            require(!isAllTransfersLocked);  \n            require(safeAdd(getLast24hSendingValue(msg.sender), _value) <= oneDayTransferLimit);\n        }\n\n\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n    \n        uint tc=transferInfo[msg.sender].tc;\n        transferInfo[msg.sender].ti[tc].value = _value;\n        transferInfo[msg.sender].ti[tc].time = now;\n        transferInfo[msg.sender].tc = safeAdd(transferInfo[msg.sender].tc, 1);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function super_transferFrom(address _from, address _to, uint _value) /*public*/ internal returns (bool success) {\n        \n        require(!isSendingLocked[_from]);\n        require(_value <= oneTransferLimit);\n        require(balances[_from] >= _value);\n\n        if(msg.sender == contrInitiator && _from == thisContract) {\n            // no restriction\n        } else {\n            require(!isAllTransfersLocked);  \n            require(safeAdd(getLast24hSendingValue(_from), _value) <= oneDayTransferLimit);\n            uint allowance = allowed[_from][msg.sender];\n            require(allowance >= _value);\n            allowed[_from][msg.sender] = safeSub(allowance, _value);\n        }\n\n        balances[_from] = safeSub(balances[_from], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n    \n        uint tc=transferInfo[_from].tc;\n        transferInfo[_from].ti[tc].value = _value;\n        transferInfo[_from].ti[tc].time = now;\n        transferInfo[_from].tc = safeAdd(transferInfo[_from].tc, 1);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n  \n//-------------------------------------------------------------------------------------\n//from Standard223Token\n\n    //function that is called when a user or another contract wants to transfer funds\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n        //filtering if the target is a contract with bytecode inside it\n        if (!super_transfer(_to, _value)) assert(false); // do a normal token transfer\n        if (isContract(_to)) {\n            if(!contractFallback(msg.sender, _to, _value, _data)) assert(false);\n        }\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool success) {\n        if (!super_transferFrom(_from, _to, _value)) assert(false); // do a normal token transfer\n        if (isContract(_to)) {\n            if(!contractFallback(_from, _to, _value, _data)) assert(false);\n        }\n        return true;\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        return transfer(_to, _value, new bytes(0));\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        return transferFrom(_from, _to, _value, new bytes(0));\n    }\n\n    //function that is called when transaction target is a contract\n    function contractFallback(address _origin, address _to, uint _value, bytes _data) private returns (bool success) {\n        ERC223Receiver reciever = ERC223Receiver(_to);\n        return reciever.tokenFallback(msg.sender, _origin, _value, _data);\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        // retrieve the size of the code on target address, this needs assembly\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        return length > 0;\n    }\n\n//-------------------------------------------------------------------------------------\n//from Standard223Receiver\n\n    Tkn tkn;\n\n    struct Tkn {\n        address addr;\n        address sender;\n        address origin;\n        uint256 value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _sender, address _origin, uint _value, bytes _data) public returns (bool ok) {\n        if (!supportsToken(msg.sender)) return false;\n\n        // Problem: This will do a sstore which is expensive gas wise. Find a way to keep it in memory.\n        tkn = Tkn(msg.sender, _sender, _origin, _value, _data, getSig(_data));\n        __isTokenFallback = true;\n        if (!address(this).delegatecall(_data)) return false;\n\n        // avoid doing an overwrite to .token, which would be more expensive\n        // makes accessing .tkn values outside tokenPayable functions unsafe\n        __isTokenFallback = false;\n\n        return true;\n    }\n\n    function getSig(bytes _data) private pure returns (bytes4 sig) {\n        uint l = _data.length < 4 ? _data.length : 4;\n        for (uint i = 0; i < l; i++) {\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (l - 1 - i))));\n        }\n    }\n\n    bool __isTokenFallback;\n\n    modifier tokenPayable {\n        if (!__isTokenFallback) assert(false);\n        _;                                                              //_ is a special character used in modifiers\n    }\n\n    //function supportsToken(address token) public pure returns (bool);  //moved up\n\n//-------------------------------------------------------------------------------------\n//from ExampleReceiver\n\n/*\n//we do not use dedicated function to receive Token in contract associated account\n    function foo(\n        //uint i\n        ) tokenPayable public {\n        emit LogTokenPayable(1, tkn.addr, tkn.sender, tkn.value);\n    }\n*/\n    function () tokenPayable public {\n        emit LogTokenPayable(0, tkn.addr, tkn.sender, tkn.value);\n    }\n\n      function supportsToken(address token) public view returns (bool) {\n        //do not need to to anything with that token address?\n        //if (token == 0) { //attila addition\n        if (token != thisContract) { //attila addition, support only our own token, not others' token\n            return false;\n        }\n        if(!isTokenSupport) {  //attila addition\n            return false;\n        }\n        return true;\n    }\n\n    event LogTokenPayable(uint i, address token, address sender, uint value);\n  \n//-------------------------------------------------------------------------------------\n// My extensions\n/*\n    function enableTokenSupport(bool _tokenSupport) public returns (bool success) {\n        if(msg.sender == contrInitiator) {\n            isTokenSupport = _tokenSupport;\n            return true;\n        } else {\n            return false;  \n        }\n    }\n*/\n    function setIsAllTransfersLocked(bool _lock) public {\n        require(msg.sender == contrInitiator);\n        isAllTransfersLocked = _lock;\n    }\n\n    function setIsSendingLocked(address _from, bool _lock) public {\n        require(msg.sender == contrInitiator);\n        isSendingLocked[_from] = _lock;\n    }\n\n    function getIsAllTransfersLocked() public view returns (bool ok) {\n        return isAllTransfersLocked;\n    }\n\n    function getIsSendingLocked(address _from ) public view returns (bool ok) {\n        return isSendingLocked[_from];\n    }\n \n/*  \n    function getTransferInfoCount(address _from) public view returns (uint count) {\n        return transferInfo[_from].tc;\n    }\n*/    \n/*\n    // use experimental feature\n    function getTransferInfo(address _from, uint index) public view returns (TransferInfo ti) {\n        return transferInfo[_from].ti[index];\n    }\n*/ \n/*\n    function getTransferInfoTime(address _from, uint index) public view returns (uint time) {\n        return transferInfo[_from].ti[index].time;\n    }\n*/\n/*\n    function getTransferInfoValue(address _from, uint index) public view returns (uint value) {\n        return transferInfo[_from].ti[index].value;\n    }\n*/\n    function getLast24hSendingValue(address _from) public view returns (uint totVal) {\n      \n        totVal = 0;  //declared above;\n        uint tc = transferInfo[_from].tc;\n      \n        if(tc > 0) {\n            for(uint i = tc-1 ; i >= 0 ; i--) {\n//              if(now - transferInfo[_from].ti[i].time < 10 minutes) {\n//              if(now - transferInfo[_from].ti[i].time < 1 hours) {\n                if(now - transferInfo[_from].ti[i].time < 1 days) {\n                    totVal = safeAdd(totVal, transferInfo[_from].ti[i].value );\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    \n    function airdropIndividual(address[] _recipients, uint256[] _values, uint256 _elemCount, uint _totalValue)  public returns (bool success) {\n        \n        require(_recipients.length == _elemCount);\n        require(_values.length == _elemCount); \n        require(_elemCount <= 50); \n        \n        uint256 totalValue = 0;\n        for(uint i = 0; i< _recipients.length; i++) {\n            totalValue = safeAdd(totalValue, _values[i]);\n        }\n        \n        require(totalValue == _totalValue);\n        \n        for(i = 0; i< _recipients.length; i++) {\n            transfer(_recipients[i], _values[i]);\n        }\n        return true;\n    }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"supportsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getLast24hSendingValue\",\"outputs\":[{\"name\":\"totVal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_elemCount\",\"type\":\"uint256\"},{\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"name\":\"airdropIndividual\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_origin\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getIsSendingLocked\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setIsAllTransfersLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setIsSendingLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsAllTransfersLocked\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTokenPayable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060006006600460006101000a81548160ff021916908360ff1602179055506040805190810160405280600a81526020017f576553696e67436f696e00000000000000000000000000000000000000000000815250600390805190602001906200007d92919062000242565b506040805190810160405280600381526020017f575343000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000cb92919062000242565b506103e880611388600460009054906101000a900460ff1660ff16600a0a020202905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060008190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760146101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055506103e880600a600460009054906101000a900460ff1660ff16600a0a020202600a819055506103e8806032600460009054906101000a900460ff1660ff16600a0a020202600b8190555050620002f1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028557805160ff1916838001178555620002b6565b82800160010185558215620002b6579182015b82811115620002b557825182559160200191906001019062000298565b5b509050620002c59190620002c9565b5090565b620002ee91905b80821115620002ea576000816000905550600101620002d0565b5090565b90565b61240a80620003016000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063061f76501461022e57806306fdde0314610289578063095ea7b314610319578063125041091461037e57806318160ddd146103d557806323b872dd146104005780632b6b7c6914610485578063313ce5671461055a5780634c1230191461058b5780635c622c09146106565780636172f071146106b157806365cd3686146106e057806370a082311461072f57806395d89b4114610786578063a9059cbb14610816578063ab67aa581461087b578063be45fd6214610946578063cfea751f146109f1578063dd62ed3e14610a20575b34801561011357600080fd5b50601360009054906101000a900460ff161515610135576000151561013457fe5b5b7ff2437bb3d950b968625757c8878714de92924bf3f774677a83c75a8cb34abd7d6000600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60030154604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a1005b34801561023a57600080fd5b5061026f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a97565b604051808215151515815260200191505060405180910390f35b34801561029557600080fd5b5061029e610b22565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102de5780820151818401526020810190506102c3565b50505050905090810190601f16801561030b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032557600080fd5b50610364600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc0565b604051808215151515815260200191505060405180910390f35b34801561038a57600080fd5b506103bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb2565b6040518082815260200191505060405180910390f35b3480156103e157600080fd5b506103ea610dfe565b6040518082815260200191505060405180910390f35b34801561040c57600080fd5b5061046b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e04565b604051808215151515815260200191505060405180910390f35b34801561049157600080fd5b5061054060048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019092919080359060200190929190505050610e4f565b604051808215151515815260200191505060405180910390f35b34801561056657600080fd5b5061056f610f34565b604051808260ff1660ff16815260200191505060405180910390f35b34801561059757600080fd5b5061063c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f47565b604051808215151515815260200191505060405180910390f35b34801561066257600080fd5b50610697600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611211565b604051808215151515815260200191505060405180910390f35b3480156106bd57600080fd5b506106de600480360381019080803515159060200190929190505050611267565b005b3480156106ec57600080fd5b5061072d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506112e0565b005b34801561073b57600080fd5b50610770600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611397565b6040518082815260200191505060405180910390f35b34801561079257600080fd5b5061079b6113e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107db5780820151818401526020810190506107c0565b50505050905090810190601f1680156108085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082257600080fd5b50610861600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061147e565b604051808215151515815260200191505060405180910390f35b34801561088757600080fd5b5061092c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114c7565b604051808215151515815260200191505060405180910390f35b34801561095257600080fd5b506109d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061151d565b604051808215151515815260200191505060405180910390f35b3480156109fd57600080fd5b50610a06611571565b604051808215151515815260200191505060405180910390f35b348015610a2c57600080fd5b50610a81600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611588565b6040518082815260200191505060405180910390f35b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515610af95760009050610b1d565b600760149054906101000a900460ff161515610b185760009050610b1d565b600190505b919050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000806000809250600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015491506000821115610df7576001820390505b600081101515610df65762015180600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008381526020019081526020016000206001015442031015610de357610ddc83600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008481526020019081526020016000206000015461160f565b9250610de8565b610df6565b808060019003915050610d0f565b5b5050919050565b60005481565b6000610e4684848460006040519080825280601f01601f191660200182016040528015610e405781602001602082028038833980820191505090505b506114c7565b90509392505050565b6000806000848751141515610e6357600080fd5b848651141515610e7257600080fd5b60328511151515610e8257600080fd5b60009150600090505b8651811015610ec457610eb5828783815181101515610ea657fe5b9060200190602002015161160f565b91508080600101915050610e8b565b8382141515610ed257600080fd5b600090505b8651811015610f2657610f188782815181101515610ef157fe5b906020019060200201518783815181101515610f0957fe5b9060200190602002015161147e565b508080600101915050610ed7565b600192505050949350505050565b600460009054906101000a900460ff1681565b6000610f5233610a97565b1515610f615760009050611209565b60c0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001610fd68461162b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040190805190602001906110f5929190612339565b5060a08201518160050160006101000a81548163ffffffff02191690837c0100000000000000000000000000000000000000000000000000000000900402179055509050506001601360006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b8381101561119a57808201518184015260208101905061117f565b50505050905090810190601f1680156111c75780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af491505015156111e95760009050611209565b6000601360006101000a81548160ff021916908315150217905550600190505b949350505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c357600080fd5b80600960006101000a81548160ff02191690831515021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133c57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b505050505081565b60006114bf838360006040519080825280601f01601f1916602001820160405280156114b95781602001602082028038833980820191505090505b5061151d565b905092915050565b60006114d4858585611732565b15156114e557600015156114e457fe5b5b6114ee84611d12565b15611511576114ff85858585611d25565b1515611510576000151561150f57fe5b5b5b60019050949350505050565b60006115298484611eb5565b151561153a576000151561153957fe5b5b61154384611d12565b156115665761155433858585611d25565b1515611565576000151561156457fe5b5b5b600190509392505050565b6000600960009054906101000a900460ff16905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818301905082811015151561162257fe5b80905092915050565b60008060006004845110611640576004611643565b83515b9150600090505b8181101561172b5780600183030360080260020a848281518110151561166c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402837c01000000000000000000000000000000000000000000000000000000009004017c0100000000000000000000000000000000000000000000000000000000029250808060010191505061164a565b5050919050565b6000806000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561179057600080fd5b600a5484111515156117a157600080fd5b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156117ef57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156118995750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b156118a3576119fa565b600960009054906101000a900460ff161515156118bf57600080fd5b600b546118d46118ce88610cb2565b8661160f565b111515156118e157600080fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915083821015151561196f57600080fd5b6119798285612320565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b611a43600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612320565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611acf600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548561160f565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905083600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008381526020019081526020016000206000018190555042600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600083815260200190815260200160002060010181905550611c5a600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600161160f565b600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b600080823b905060008111915050919050565b6000808490508073ffffffffffffffffffffffffffffffffffffffff16634c123019338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e20578082015181840152602081019050611e05565b50505050905090810190601f168015611e4d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611e6f57600080fd5b505af1158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b8101908080519060200190929190505050915050949350505050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611f1157600080fd5b600a548311151515611f2257600080fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611f7057600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611fcb5761200a565b600960009054906101000a900460ff16151515611fe757600080fd5b600b54611ffc611ff633610cb2565b8561160f565b1115151561200957600080fd5b5b612053600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612320565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120df600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461160f565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008381526020019081526020016000206000018190555042600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008381526020019081526020016000206001018190555061226a600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600161160f565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600082821115151561232e57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061237a57805160ff19168380011785556123a8565b828001600101855582156123a8579182015b828111156123a757825182559160200191906001019061238c565b5b5090506123b591906123b9565b5090565b6123db91905b808211156123d75760008160009055506001016123bf565b5090565b905600a165627a7a723058208022d1c5aaa6ef240adddcd6096d0bec0d6c00a20e82795ad49e722c754fe2160029"
}