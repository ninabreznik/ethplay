{
  "address": "0x9e27fc3d1626f91c926e4126954d27c053dd8fc0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Syndicate",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-29\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * Syndicate\n **/\n\n/// @title A way to distribute ownership of Ether in time\n/// @author Chance Hudson\n/// @notice This contract can be used to manipulate ownership of Ether across\n/// time. Funds are linearly distributed over the time period to recipients.\ncontract Syndicate {\n\n  struct Payment {\n    address sender;\n    address payable receiver;\n    uint256 timestamp;\n    uint256 time;\n    uint256 weiValue;\n    uint256 weiPaid;\n    bool isFork;\n    uint256 parentIndex;\n  }\n\n  Payment[] public payments;\n  mapping(uint256 => uint256[]) public paymentForks;\n\n  event PaymentUpdated(uint256 index);\n  event PaymentCreated(uint256 index);\n\n  /// @notice Create a payment from `msg.sender` of amount `msg.value` to\n  /// `_receiver` over `_time` seconds. The funds are linearly distributed in\n  /// this time. The `_receiver` may fork the funds to another address but\n  /// cannot manipulate the `_time` value.\n  /// @param _receiver The address receiving the payment\n  /// @param _time The payment time length, in seconds\n  function paymentCreate(address payable _receiver, uint256 _time) public payable {\n    // Verify that value has been sent\n    require(msg.value > 0);\n    // Verify the time is non-zero\n    require(_time > 0);\n    payments.push(Payment({\n      sender: msg.sender,\n      receiver: _receiver,\n      timestamp: block.timestamp,\n      time: _time,\n      weiValue: msg.value,\n      weiPaid: 0,\n      isFork: false,\n      parentIndex: 0\n    }));\n    paymentForks[payments.length - 1] = new uint256[](0);\n    emit PaymentCreated(payments.length - 1);\n  }\n\n  /// @notice Withdraws the available funds at the current point in time from a\n  /// payment to the receiver address.\n  /// @dev May be invoked by anyone idempotently.\n  /// @param index The payment index to settle\n  function paymentSettle(uint256 index) public {\n    requirePaymentIndexInRange(index);\n    Payment storage payment = payments[index];\n    uint256 owedWei = paymentWeiOwed(index);\n    payment.weiPaid += owedWei;\n    payment.receiver.transfer(owedWei);\n    emit PaymentUpdated(index);\n  }\n\n  /// @notice Calculates the amount of wei owed on a payment at the current\n  /// `block.timestamp`.\n  /// @param index The payment index for which to determine wei owed\n  /// @return The wei owed at the current point in time\n  function paymentWeiOwed(uint256 index) public view returns (uint256) {\n    requirePaymentIndexInRange(index);\n    Payment memory payment = payments[index];\n    // Calculate owed wei based on current time and total wei owed/paid\n    return max(payment.weiPaid, payment.weiValue * min(block.timestamp - payment.timestamp, payment.time) / payment.time) - payment.weiPaid;\n  }\n\n  /// @notice Forks part of a payment to another address for the remaining time\n  /// on a payment. Allows responsibility of funds to be delegated to other\n  /// addresses by the payment recipient. A payment and all forks share the same\n  /// completion time.\n  /// @dev Payments may only be forked by the receiver address. The `_weiValue`\n  /// being forked must be less than the wei currently available in the payment.\n  /// @param index The payment index to be forked\n  /// @param _receiver The fork payment recipient\n  /// @param _weiValue The amount of wei to fork\n  function paymentFork(uint256 index, address payable _receiver, uint256 _weiValue) public {\n    requirePaymentIndexInRange(index);\n    Payment storage payment = payments[index];\n    // Make sure the payment receiver is operating\n    require(msg.sender == payment.receiver);\n\n    uint256 remainingWei = payment.weiValue - payment.weiPaid;\n    uint256 remainingTime = max(0, payment.time - (block.timestamp - payment.timestamp));\n\n    // Ensure there is more remainingWei than requested fork wei\n    require(remainingWei > _weiValue);\n    require(_weiValue > 0);\n\n    // Create a new Payment of _weiValue to _receiver over the remaining time of\n    // payment at index\n\n    payment.weiValue -= _weiValue;\n\n    // Now create the forked payment\n    payments.push(Payment({\n      sender: payment.receiver,\n      receiver: _receiver,\n      timestamp: block.timestamp,\n      time: remainingTime,\n      weiValue: _weiValue,\n      weiPaid: 0,\n      isFork: true,\n      parentIndex: index\n    }));\n    uint256 forkIndex = payments.length - 1;\n    paymentForks[forkIndex] = new uint256[](0);\n    paymentForks[index].push(forkIndex);\n    emit PaymentUpdated(index);\n    emit PaymentCreated(forkIndex);\n  }\n\n  /// @notice Accessor for determining if a given payment has any forks.\n  /// @param index The payment to check\n  /// @return Whether payment `index` has been forked\n  function isPaymentForked(uint256 index) public view returns (bool) {\n    requirePaymentIndexInRange(index);\n    return paymentForks[index].length > 0;\n  }\n\n  /// @notice Accessor for payment fork count.\n  /// @param index The payment for which to get the fork count\n  /// @return The number of time payment `index` has been forked\n  function paymentForkCount(uint256 index) public view returns (uint256) {\n    requirePaymentIndexInRange(index);\n    return paymentForks[index].length;\n  }\n\n  /// @notice Accessor for determining if a payment is settled.\n  /// @param index The payment to check\n  /// @return Whether a payment has been fully paid\n  function isPaymentSettled(uint256 index) public view returns (bool) {\n    requirePaymentIndexInRange(index);\n    return payments[index].weiValue == payments[index].weiPaid;\n  }\n\n  /// @dev Throws if `index` is out of range.\n  /// @param index The payment index to check\n  function requirePaymentIndexInRange(uint256 index) public view {\n    require(index < payments.length);\n  }\n\n  /// @notice Accessor for payments array length.\n  /// @return The number of payments that exist in the Syndicate\n  function paymentCount() public view returns (uint) {\n    return payments.length;\n  }\n\n  /// @dev Return the smaller of two values.\n  function min(uint a, uint b) private pure returns (uint) {\n    return a < b ? a : b;\n  }\n\n  /// @dev Return the larger of two values.\n  function max(uint a, uint b) private pure returns (uint) {\n    return a > b ? a : b;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"paymentForkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isPaymentForked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"requirePaymentIndexInRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"paymentWeiOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isPaymentSettled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"paymentSettle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"weiValue\",\"type\":\"uint256\"},{\"name\":\"weiPaid\",\"type\":\"uint256\"},{\"name\":\"isFork\",\"type\":\"bool\"},{\"name\":\"parentIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_weiValue\",\"type\":\"uint256\"}],\"name\":\"paymentFork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentForks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"paymentCreate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaymentCreated\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610bf0806100206000396000f3fe6080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663031f0bcf81146100b35780630937e68a146100ef578063421d72e2146101045780634bf8bed81461014257806356daf2c11461016e5780637841b7801461019857806379ff69d9146101c257806387d81789146101ec57806396b1bbbe14610265578063b63dfea5146102a4578063c69ab283146102d4575b600080fd5b3480156100bf57600080fd5b506100dd600480360360208110156100d657600080fd5b5035610300565b60408051918252519081900360200190f35b3480156100fb57600080fd5b506100dd61031e565b34801561011057600080fd5b5061012e6004803603602081101561012757600080fd5b5035610325565b604080519115158252519081900360200190f35b34801561014e57600080fd5b5061016c6004803603602081101561016557600080fd5b5035610344565b005b34801561017a57600080fd5b506100dd6004803603602081101561019157600080fd5b5035610355565b3480156101a457600080fd5b5061012e600480360360208110156101bb57600080fd5b5035610429565b3480156101ce57600080fd5b5061016c600480360360208110156101e557600080fd5b503561047d565b3480156101f857600080fd5b506102166004803603602081101561020f57600080fd5b5035610531565b60408051600160a060020a03998a168152979098166020880152868801959095526060860193909352608085019190915260a0840152151560c083015260e08201529051908190036101000190f35b34801561027157600080fd5b5061016c6004803603606081101561028857600080fd5b50803590600160a060020a036020820135169060400135610594565b3480156102b057600080fd5b506100dd600480360360408110156102c757600080fd5b5080359060200135610860565b61016c600480360360408110156102ea57600080fd5b50600160a060020a038135169060200135610890565b600061030b82610344565b5060009081526001602052604090205490565b6000545b90565b600061033082610344565b506000908152600160205260408120541190565b600054811061035257600080fd5b50565b600061036082610344565b610368610b05565b600080548490811061037657fe5b6000918252602091829020604080516101008101825260089093029091018054600160a060020a03908116845260018201541693830193909352600283015490820181905260038301546060830181905260048401546080840152600584015460a08401819052600685015460ff16151560c085015260079094015460e084015291935061042191839161040c90420382610ade565b85608001510281151561041b57fe5b04610af6565b039392505050565b600061043482610344565b600080548390811061044257fe5b90600052602060002090600802016005015460008381548110151561046357fe5b906000526020600020906008020160040154149050919050565b61048681610344565b6000808281548110151561049657fe5b9060005260206000209060080201905060006104b183610355565b600583018054820190556001830154604051919250600160a060020a03169082156108fc029083906000818181858888f193505050501580156104f8573d6000803e3d6000fd5b506040805184815290517f4eed8cfa0602bd25527039457fcd1ed279611aac9f849fbc0502823cf06c50749181900360200190a1505050565b600080548290811061053f57fe5b600091825260209091206008909102018054600182015460028301546003840154600485015460058601546006870154600790970154600160a060020a039687169850949095169592949193909260ff169088565b61059d83610344565b600080848154811015156105ad57fe5b600091825260209091206008909102016001810154909150600160a060020a031633146105d957600080fd5b6000816005015482600401540390506000610601600084600201544203856003015403610af6565b905083821161060f57600080fd5b6000841161061c57600080fd5b8383600401600082825403925050819055506000610100604051908101604052808560010160009054906101000a9004600160a060020a0316600160a060020a0316815260200187600160a060020a0316815260200142815260200183815260200186815260200160008152602001600115158152602001888152509080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e082015181600701555050506000600160008054905003905060006040519080825280602002602001820160405280156107aa578160200160208202803883390190505b50600082815260016020908152604090912082516107ce9391929190910190610b5f565b50600087815260016020818152604080842080549384018155845292819020909101839055815189815291517f4eed8cfa0602bd25527039457fcd1ed279611aac9f849fbc0502823cf06c50749281900390910190a16040805182815290517f52abc2220e71c35c28bb3b3423a7403d5ce4f808dd7ac2c12d1c8e16ae01a19f9181900360200190a150505050505050565b60016020528160005260406000208181548110151561087b57fe5b90600052602060002001600091509150505481565b6000341161089d57600080fd5b600081116108aa57600080fd5b6040805161010081018252338152600160a060020a03848116602080840191825242848601908152606085018781523460808701908152600060a0880181815260c0890182815260e08a018381528354600180820186558580529b5160089091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381018054928d1673ffffffffffffffffffffffffffffffffffffffff1993841617905599517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5648b01805491909c1691161790995594517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56588015592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56687015590517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56786015590517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56885015590517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5698401805491151560ff1990921691909117905592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56a9092019190915583518281528082018086528354600019018452939091529290209151610a9f929190610b5f565b50600054604080516000199092018252517f52abc2220e71c35c28bb3b3423a7403d5ce4f808dd7ac2c12d1c8e16ae01a19f9181900360200190a15050565b6000818310610aed5781610aef565b825b9392505050565b6000818311610aed5781610aef565b610100604051908101604052806000600160a060020a031681526020016000600160a060020a0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b828054828255906000526020600020908101928215610b9a579160200282015b82811115610b9a578251825591602001919060010190610b7f565b50610ba6929150610baa565b5090565b61032291905b80821115610ba65760008155600101610bb056fea165627a7a723058200fa13a5694c1f4154303fdc9c9b2cbd0be0917eb93c04a6319a8274ea054db000029"
}