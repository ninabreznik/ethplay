{
  "address": "0xdef830c29dca582e88661119c9b3d273395f9a93",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BTNYToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor () public{\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    require(owner==msg.sender);\n    _;\n }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n      owner = newOwner;\n  }\n \n}\n  \ncontract ERC20 {\n\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool success);\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n    function approve(address spender, uint256 value) public returns (bool success);\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract BTNYToken is Ownable, ERC20 {\n\n    using SafeMath for uint256;\n\n    // Token properties\n    string public name = \"Bitney\";                //Token name\n    string public symbol = \"BTNY\";                  //Token symbol\n    uint256 public decimals = 18;\n\n    uint256 public _totalSupply = 1000000000e18;       //100% Total Supply\n\n    // Balances for each account\n    mapping (address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping (address => mapping(address => uint256)) allowed;\n\n    // how many token units a buyer gets per wei\n    uint256 public price;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    // Constructor\n    // @notice CBITToken Contract\n    // @return the transaction address\n    constructor () public{\n        // Initial Owner Wallet Address\n        owner = msg.sender;\n\n        balances[owner] = _totalSupply;\n    }\n\n    // Payable method\n    // @notice Anyone can buy the tokens on tokensale by paying ether\n    function () external payable {\n        tokensale(msg.sender);\n    }\n\n    // @notice tokensale\n    // @param recipient The address of the recipient\n    // @return the transaction address and send the event as Transfer\n    function tokensale(address recipient) public payable {\n        price = getPrice();\n        require(price != 0 && recipient != 0x0);\n        uint256 weiAmount = msg.value;\n        uint256 tokenToSend = weiAmount.mul(price);\n        \n        balances[owner] = balances[owner].sub(tokenToSend);\n        balances[recipient] = balances[recipient].add(tokenToSend);\n\n        owner.transfer(msg.value);\n        emit TokenPurchase(msg.sender, recipient, weiAmount, tokenToSend);\n    }\n\n    // @return total tokens supplied\n    function totalSupply() public constant returns (uint256) {\n        return _totalSupply;\n    }\n    \n    // What is the balance of a particular account?\n    // @param who The address of the particular account\n    // @return the balanace the particular account\n    function balanceOf(address who) public constant returns (uint256) {\n        return balances[who];\n    }\n\n    // @notice send `value` token to `to` from `msg.sender`\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transfer(address to, uint256 value) public returns (bool success)  {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // @notice send `value` token to `to` from `from`\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transferFrom(address from, address to, uint256 value) public returns (bool success)  {\n        require (\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n        );\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n    // If this function is called again it overwrites the current allowance with value.\n    // @param spender The address of the sender\n    // @param value The amount to be approved\n    // @return the transaction address and send the event as Approval\n    function approve(address spender, uint256 value) public returns (bool success)  {\n        require (balances[msg.sender] >= value && value > 0);\n        allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // Check the allowed value for the spender to withdraw from owner\n    // @param owner The address of the owner\n    // @param spender The address of the spender\n    // @return the amount which spender is still allowed to withdraw from owner\n    function allowance(address _owner, address spender) public constant returns (uint256) {\n        return allowed[_owner][spender];\n    }\n    \n    // Get current price of a Token\n    // @return the price or token value for a ether\n    function getPrice() public pure returns (uint256 result) {\n        return 0;\n    }\n}",
  "bytecode": "60c0604052600660808190527f4269746e6579000000000000000000000000000000000000000000000000000060a090815261003e91600191906100e0565b506040805180820190915260048082527f42544e59000000000000000000000000000000000000000000000000000000006020909201918252610083916002916100e0565b5060126003556b033b2e3c9fd0803ce80000006004553480156100a557600080fd5b506000805433600160a060020a0319918216811790911617808255600454600160a060020a039091168252600560205260409091205561017b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012157805160ff191683800117855561014e565b8280016001018555821561014e579182015b8281111561014e578251825591602001919060010190610133565b5061015a92915061015e565b5090565b61017891905b8082111561015a5760008155600101610164565b90565b6109688061018a6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e5578063095ea7b31461016f57806318160ddd146101a757806323b872dd146101ce578063313ce567146101f85780633eaaf86b1461020d57806370a08231146102225780638da5cb5b1461024357806395d89b411461027457806398d5fdca14610289578063a035b1fe1461029e578063a9059cbb146102b3578063b113d9dc146102d7578063dd62ed3e146102eb578063f2fde38b14610312575b6100e333610333565b005b3480156100f157600080fd5b506100fa610479565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013457818101518382015260200161011c565b50505050905090810190601f1680156101615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017b57600080fd5b50610193600160a060020a0360043516602435610506565b604080519115158252519081900360200190f35b3480156101b357600080fd5b506101bc610597565b60408051918252519081900360200190f35b3480156101da57600080fd5b50610193600160a060020a036004358116906024351660443561059d565b34801561020457600080fd5b506101bc61070c565b34801561021957600080fd5b506101bc610712565b34801561022e57600080fd5b506101bc600160a060020a0360043516610718565b34801561024f57600080fd5b50610258610733565b60408051600160a060020a039092168252519081900360200190f35b34801561028057600080fd5b506100fa610742565b34801561029557600080fd5b506101bc61079a565b3480156102aa57600080fd5b506101bc61079f565b3480156102bf57600080fd5b50610193600160a060020a03600435166024356107a5565b6100e3600160a060020a0360043516610333565b3480156102f757600080fd5b506101bc600160a060020a036004358116906024351661087f565b34801561031e57600080fd5b506100e3600160a060020a03600435166108aa565b60008061033e61079a565b6007819055158015906103595750600160a060020a03831615155b151561036457600080fd5b60075434925061037b90839063ffffffff6108f016565b60008054600160a060020a03168152600560205260409020549091506103a7908263ffffffff61091b16565b60008054600160a060020a03908116825260056020526040808320939093558516815220546103dc908263ffffffff61092d16565b600160a060020a03808516600090815260056020526040808220939093558054925192909116913480156108fc0292909190818181858888f1935050505015801561042b573d6000803e3d6000fd5b5060408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104fe5780601f106104d3576101008083540402835291602001916104fe565b820191906000526020600020905b8154815290600101906020018083116104e157829003601f168201915b505050505081565b3360009081526005602052604081205482118015906105255750600082115b151561053057600080fd5b336000818152600660209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60045490565b600160a060020a038316600090815260066020908152604080832033845290915281205482118015906105e85750600160a060020a0384166000908152600560205260409020548211155b80156105f45750600082115b15156105ff57600080fd5b600160a060020a038416600090815260056020526040902054610628908363ffffffff61091b16565b600160a060020a03808616600090815260056020526040808220939093559085168152205461065d908363ffffffff61092d16565b600160a060020a0380851660009081526005602090815260408083209490945591871681526006825282812033825290915220546106a1908363ffffffff61091b16565b600160a060020a03808616600081815260066020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035481565b60045481565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104fe5780601f106104d3576101008083540402835291602001916104fe565b600090565b60075481565b3360009081526005602052604081205482118015906107c45750600082115b15156107cf57600080fd5b336000908152600560205260409020546107ef908363ffffffff61091b16565b3360009081526005602052604080822092909255600160a060020a03851681522054610821908363ffffffff61092d16565b600160a060020a0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600054600160a060020a031633146108c157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820283158061090c575082848281151561090957fe5b04145b151561091457fe5b9392505050565b60008282111561092757fe5b50900390565b60008282018381101561091457fe00a165627a7a72305820c37e292ad0e2977e4e3828d3ba06949193ba387e1c5854ea957b9920ee297ce90029"
}