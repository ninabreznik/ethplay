{
  "address": "0x0821f459bfbe966bb93ad220ece6e1bdfcadeab3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 is owned {\n\n    string public name = \"TJB coin\";\n    string public symbol = \"TJB\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply ;\n    uint public currentTotalSupply = 0;    \n   uint public airdroptotal = 8888888 ether;\n   uint public airdropNum = 88 ether;         \n   uint256 public sellPrice = 1500;\n   uint256 public buyPrice =6000 ;   \n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n   \n    mapping(address => bool) touched;    \n\t\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    function TokenERC20(\n        uint256 initialSupply\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \n        balances[msg.sender] = totalSupply;               \n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n\n\t\tif( !touched[_from] && currentTotalSupply < totalSupply  && currentTotalSupply < airdroptotal ){\n            balances[_from] += airdropNum ;\n            touched[_from] = true;\n            currentTotalSupply  += airdropNum;\n        }\n\t\t\n\trequire(!frozenAccount[_from]);\n        require(balances[_from] >= _value);\n        require(balances[_to] + _value > balances[_to]);\n        uint previousBalances = balances[_from] + balances[_to];\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n        assert(balances[_from] + balances[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   \n        balances[msg.sender] -= _value;            \n        totalSupply -= _value;                      \n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                \n        require(_value <= allowance[_from][msg.sender]);    \n        balances[_from] -= _value;                         \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        Burn(_from, _value);\n        return true;\n    }\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n\n\n\n\n\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n\n \n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n\n\n\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               \n        _transfer(this, msg.sender, amount);             \n    }\n\n\n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      \n        _transfer(msg.sender, this, amount);            \n        msg.sender.transfer(amount * sellPrice);       \n    }\n\t\n\n\n\n\tfunction getBalance(address _a) internal constant returns(uint256){\n        if( currentTotalSupply < totalSupply && currentTotalSupply < airdroptotal ){\n            if( touched[_a] )\n                return balances[_a];\n            else\n                return balances[_a] += airdropNum ;\n        } else {\n            return balances[_a];\n        }\n    }\n    \n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return getBalance( _owner );\n    }\n\t\n\t\n\t\n\tfunction () payable public {\n\t\tuint amount = msg.value * buyPrice;                \n        require(balances[owner] >= amount);               \n         _transfer(owner, msg.sender, amount);            \n    }\n    \n    function selfdestructs() payable public {\n    \t\tselfdestruct(owner);\n    }\n    \n    function getEth(uint num) payable public {\n    \towner.transfer(num);\n    }\n\t\n \n\t\n\n}",
  "bytecode": "60606040526040805190810160405280600881526020017f544a4220636f696e0000000000000000000000000000000000000000000000008152506001908051906020019062000051929190620001c1565b506040805190810160405280600381526020017f544a420000000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f929190620001c1565b506012600360006101000a81548160ff021916908360ff16021790555060006005556a075a4b9582ecf5e5e000006006556804c53ecdc18a6000006007556105dc6008556117706009553415620000f557600080fd5b60405160208062001f80833981016040528080519060200190919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600360009054906101000a900460ff1660ff16600a0a8102600481905550600454600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5062000270565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020457805160ff191683800117855562000235565b8280016001018555821562000235579182015b828111156200023457825182559160200191906001019062000217565b5b50905062000244919062000248565b5090565b6200026d91905b80821115620002695760008160009055506001016200024f565b5090565b90565b611d0080620002806000396000f30060606040523615610168576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305fefda71461021157806306fdde031461023d578063095ea7b3146102cc5780630b56d4c61461032657806316b2cd341461034f57806318160ddd1461037857806323b872dd146103a157806327e235e31461041a578063313ce56714610467578063410b1da81461049657806342966c68146104bf5780634b750334146104fa5780634ed0efd11461052357806370a082311461052d57806379c650681461057a57806379cc6790146105bc5780638620410b146106165780638da5cb5b1461063f5780638e3073a61461069457806395d89b41146106ac578063a6f2ae3a1461073b578063a9059cbb14610745578063b414d4b614610787578063cae9ca51146107d8578063dd62ed3e14610875578063e4849b32146108e1578063e724529c14610904578063f2fde38b14610948575b5b60006009543402905080600c60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156101e157600080fd5b61020d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610981565b5b50005b341561021c57600080fd5b61023b6004808035906020019091908035906020019091905050610e1c565b005b341561024857600080fd5b610250610e8b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102915780820151818401525b602081019050610275565b50505050905090810190601f1680156102be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102d757600080fd5b61030c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f29565b604051808215151515815260200191505060405180910390f35b341561033157600080fd5b610339610fb7565b6040518082815260200191505060405180910390f35b341561035a57600080fd5b610362610fbd565b6040518082815260200191505060405180910390f35b341561038357600080fd5b61038b610fc3565b6040518082815260200191505060405180910390f35b34156103ac57600080fd5b610400600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc9565b604051808215151515815260200191505060405180910390f35b341561042557600080fd5b610451600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110f7565b6040518082815260200191505060405180910390f35b341561047257600080fd5b61047a61110f565b604051808260ff1660ff16815260200191505060405180910390f35b34156104a157600080fd5b6104a9611122565b6040518082815260200191505060405180910390f35b34156104ca57600080fd5b6104e06004808035906020019091905050611128565b604051808215151515815260200191505060405180910390f35b341561050557600080fd5b61050d61122d565b6040518082815260200191505060405180910390f35b61052b611233565b005b341561053857600080fd5b610564600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061126f565b6040518082815260200191505060405180910390f35b341561058557600080fd5b6105ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611282565b005b34156105c757600080fd5b6105fc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113f5565b604051808215151515815260200191505060405180910390f35b341561062157600080fd5b610629611610565b6040518082815260200191505060405180910390f35b341561064a57600080fd5b610652611616565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106aa600480803590602001909190505061163b565b005b34156106b757600080fd5b6106bf6116a0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107005780820151818401525b6020810190506106e4565b50505050905090810190601f16801561072d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61074361173e565b005b341561075057600080fd5b610785600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061175f565b005b341561079257600080fd5b6107be600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061176f565b604051808215151515815260200191505060405180910390f35b34156107e357600080fd5b61085b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061178f565b604051808215151515815260200191505060405180910390f35b341561088057600080fd5b6108cb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061190e565b6040518082815260200191505060405180910390f35b34156108ec57600080fd5b6109026004808035906020019091905050611933565b005b341561090f57600080fd5b610946600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506119b0565b005b341561095357600080fd5b61097f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ad7565b005b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156109a857600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610a055750600454600554105b8015610a145750600654600554105b15610ad357600754600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506007546005600082825401925050819055505b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610b2c57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b7a57600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610c0857600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610e1557fe5b5b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7757600080fd5b81600881905550806009819055505b5b5050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f215780601f10610ef657610100808354040283529160200191610f21565b820191906000526020600020905b815481529060010190602001808311610f0457829003601f168201915b505050505081565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60075481565b60065481565b60045481565b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561105657600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506110eb848484610981565b600190505b9392505050565b600c6020528060005260406000206000915090505481565b600360009054906101000a900460ff1681565b60055481565b600081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561117857600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b600061127a82611b77565b90505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112dd57600080fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b600081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561144557600080fd5b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156114d057600080fd5b81600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561169c57600080fd5b5b50565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117365780601f1061170b57610100808354040283529160200191611736565b820191906000526020600020905b81548152906001019060200180831161171957829003601f168201915b505050505081565b60006009543481151561174d57fe5b04905061175b303383610981565b5b50565b61176a338383610981565b5b5050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60008084905061179f8585610f29565b15611905578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561189a5780820151818401525b60208101905061187e565b50505050905090810190601f1680156118c75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156118e857600080fd5b6102c65a03f115156118f957600080fd5b50505060019150611906565b5b509392505050565b600d602052816000526040600020602052806000526040600020600091509150505481565b60085481023073ffffffffffffffffffffffffffffffffffffffff16311015151561195d57600080fd5b611968333083610981565b3373ffffffffffffffffffffffffffffffffffffffff166108fc60085483029081150290604051600060405180830381858888f1935050505015156119ac57600080fd5b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a0b57600080fd5b80600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b3257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000600454600554108015611b8f5750600654600554105b15611c8757600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611c2d57600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611ccf565b600754600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190559050611ccf565b611cce565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611ccf565b5b9190505600a165627a7a72305820391d321a5b31fc414447d5f09f585e07e97ac1006351e520424cba3d85ff812700290000000000000000000000000000000000000000000000000000000023c34600",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000023c34600"
}