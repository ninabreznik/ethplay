{
  "address": "0xcb60602834702d4267d805aef22a9d838126c25b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PresageFlower",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity ^0.4.23;\n\ncontract PresageFlower {\n    \n    // Unerasable diary\n    struct Diary {\n        address author;\n        string body;\n        uint256 time;\n    }\n    \n    Diary[] diaries;\n    mapping(address => bool) authors;\n    \n    constructor() public {\n        authors[msg.sender] = true;\n    }\n    \n    modifier onlyAuthor() {\n        require(authors[msg.sender] == true);\n        _;\n    }\n    \n    function addAuthor(address _newAuthor) public onlyAuthor {\n        authors[_newAuthor] = true;\n    }\n    \n    function removeAuthor(address _otherAuthor) public onlyAuthor {\n        require(msg.sender != _otherAuthor);\n        authors[_otherAuthor] = false;\n    }\n    \n    function addDiary(string body) public onlyAuthor {\n        diaries.push(Diary(msg.sender, body, now));\n    }\n    \n    function getDiary(uint256 idx) public view onlyAuthor returns(address, string, uint256) {\n        if(diaries.length > idx) {\n            return (diaries[idx].author, diaries[idx].body, diaries[idx].time);\n        } else {\n            return (0x0, \"No Entry.\", 0);\n        }\n    }\n    \n    function getRecentDiary() public view onlyAuthor returns(address, string, uint256) {\n        return getDiary(diaries.length - 1);\n    }\n    \n    function getDiaryLength() public view onlyAuthor returns(uint256) {\n        return diaries.length;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newAuthor\",\"type\":\"address\"}],\"name\":\"addAuthor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiaryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecentDiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"body\",\"type\":\"string\"}],\"name\":\"addDiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_otherAuthor\",\"type\":\"address\"}],\"name\":\"removeAuthor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000908152600160208190526040909120805460ff1916909117905561062b8061003d6000396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632ddbc97e811461007c578063399fd8d91461009f5780633c6806b8146100c6578063d768729d1461016c578063e399499314610181578063e97193a6146101da575b600080fd5b34801561008857600080fd5b5061009d600160a060020a03600435166101fb565b005b3480156100ab57600080fd5b506100b4610244565b60408051918252519081900360200190f35b3480156100d257600080fd5b506100de60043561026d565b60408051600160a060020a0385168152908101829052606060208083018281528551928401929092528451608084019186019080838360005b8381101561012f578181015183820152602001610117565b50505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561017857600080fd5b506100de6103e2565b34801561018d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261009d9436949293602493928401919081908401838280828437509497506104239650505050505050565b3480156101e657600080fd5b5061009d600160a060020a036004351661050e565b3360009081526001602081905260409091205460ff1615151461021d57600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b33600090815260016020819052604082205460ff1615151461026557600080fd5b506000545b90565b336000908152600160208190526040822054606091839160ff1615151461029357600080fd5b60005484101561039f5760008054859081106102ab57fe5b600091825260208220600390910201548154600160a060020a039091169190869081106102d457fe5b90600052602060002090600302016001016000868154811015156102f457fe5b60009182526020918290206002600390920201810154835460408051601f60001961010060018616150201909316949094049182018590048502840185019052808352909284919083018282801561038d5780601f106103625761010080835404028352916020019161038d565b820191906000526020600020905b81548152906001019060200180831161037057829003601f168201915b505050505091509250925092506103db565b505060408051808201909152600981527f4e6f20456e7472792e0000000000000000000000000000000000000000000000602082015260009150815b9193909250565b336000908152600160208190526040822054606091839160ff1615151461040857600080fd5b600054610418906000190161026d565b925092509250909192565b3360009081526001602081905260409091205460ff1615151461044557600080fd5b6040805160608101825233815260208082018481524293830193909352600080546001810180835591805283517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636003909202918201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091178155945180519295936104fd937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490930192910190610567565b506040820151816002015550505050565b3360009081526001602081905260409091205460ff1615151461053057600080fd5b33600160a060020a038216141561054657600080fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105a857805160ff19168380011785556105d5565b828001600101855582156105d5579182015b828111156105d55782518255916020019190600101906105ba565b506105e19291506105e5565b5090565b61026a91905b808211156105e157600081556001016105eb5600a165627a7a72305820a5bc07fa2f444402d8e76c89f1434354d262a197be650c91200a45e861a04e3a0029"
}