{
  "address": "0x31af195db332bc9203d758c74df5a5c5e597cdb7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/openzeppelin-solidity/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: contracts/openzeppelin-solidity/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/ERC721TokenWithData.sol\n\n// import \"./ERC721SlimTokenArray.sol\";\n\n\n\n// an ERC721 token with additional data storage,\ncontract ERC721TokenWithData is ERC721Token(\"CryptoAssaultUnit\", \"CAU\"), Ownable {\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n\tfunction isApprovedOrOwner(\n\t\taddress _spender,\n\t\tuint256 _tokenId\n\t)\n\t\tinternal\n\t\tview\n\t\treturns (bool)\n\t{\n\t\taddress owner = ownerOf(_tokenId);\n\t\t// Disable solium check because of\n\t\t// https://github.com/duaraghav8/Solium/issues/175\n\t\t// solium-disable-next-line operator-whitespace\n\t\treturn (\n\t\t\t_spender == owner ||\n\t\t\tapprovedContractAddresses[_spender] ||\n\t\t\tgetApproved(_tokenId) == _spender ||\n\t\t\tisApprovedForAll(owner, _spender)\n\t\t);\n\t}\n\n\tmapping (address => bool) internal approvedContractAddresses;\n\tbool approvedContractsFinalized = false;\n\n\t/**\n\t* @notice Approve a contract address for minting tokens and transferring tokens, when approved by the owner\n\t* @param contractAddress The address that will be approved\n\t*/\n\tfunction addApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = true;\n\t}\n\n\t/**\n\t* @notice Unapprove a contract address for minting tokens and transferring tokens\n\t* @param contractAddress The address that will be unapproved\n\t*/\n\tfunction removeApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = false;\n\t}\n\n\t/**\n\t* @notice Finalize the contract so it will be forever impossible to change the approved contracts list\n\t*/\n\tfunction finalizeApprovedContracts() public onlyOwner {\n\t\tapprovedContractsFinalized = true;\n\t}\n\n\tmapping(uint256 => mapping(uint256 => uint256)) data;\n\n\tfunction getData(uint256 _tokenId, uint256 _index) public view returns (uint256) {\n\t\treturn data[_index][_tokenId];\n\t}\n\n\tfunction getData3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3]\n\t\t);\n\t}\n\t\n\tfunction getDataAndOwner3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256, address, address, address) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3],\n\t\t\townerOf(_tokenId1),\n\t\t\townerOf(_tokenId2),\n\t\t\townerOf(_tokenId3)\n\t\t);\n\t}\n\t\n\tfunction _setData(uint256 _tokenId, uint256 _index, uint256 _data) internal {\n\t\t\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\tfunction setData(uint256 _tokenId, uint256 _index, uint256 _data) public {\n\t\t\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\t/**\n\t* @notice Gets the list of tokens owned by a given address\n\t* @param _owner address to query the tokens of\n\t* @return uint256[] representing the list of tokens owned by the passed address\n\t*/\n\tfunction tokensOfWithData(address _owner, uint256 _index) public view returns (uint256[], uint256[]) {\n\t\tuint256[] memory tokensList = ownedTokens[_owner];\n\t\tuint256[] memory dataList = new uint256[](tokensList.length);\n\t\tfor (uint i=0; i<tokensList.length; i++) {\n\t\t\tdataList[i] = data[_index][tokensList[i]];\n\t\t}\n\t\treturn (tokensList, dataList);\n\t}\n\n\t// The tokenId of the next minted token. It auto-increments.\n\tuint256 nextTokenId = 1;\n\n\tfunction getNextTokenId() public view returns (uint256) {\n\t\treturn nextTokenId;\n\t}\n\n\t/**\n\t* @notice Mint token function\n\t* @param _to The address that will own the minted token\n\t*/\n\tfunction mintAndSetData(address _to, uint256 _data) public returns (uint256) {\n\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\n\t\tuint256 tokenId = nextTokenId;\n\t\tnextTokenId++;\n\t\t_mint(_to, tokenId);\n\t\t_setData(tokenId, 0, _data);\n\n\t\treturn tokenId;\n\t}\n\n\tfunction burn(uint256 _tokenId) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId), _tokenId);\n\t}\n\t\n\tfunction burn3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId1), _tokenId1);\n\t\t_burn(ownerOf(_tokenId2), _tokenId2);\n\t\t_burn(ownerOf(_tokenId3), _tokenId3);\n\t}\n}\n\n// File: contracts/strings/Strings.sol\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/Token.sol\n\ncontract Token is ERC721TokenWithData {\n\n\tstring metadataUrlPrefix = \"https://metadata.cryptoassault.io/unit/\";\n\n\t/**\n\t* @dev Returns an URI for a given token ID\n\t* Throws if the token ID does not exist. May return an empty string.\n\t* @param _tokenId uint256 ID of the token to query\n\t*/\n\tfunction tokenURI(uint256 _tokenId) public view returns (string) {\n\t\trequire(exists(_tokenId));\n\t\treturn Strings.strConcat(metadataUrlPrefix, Strings.uint2str(_tokenId));\n\t}\n\n\tfunction setMetadataUrlPrefix(string _metadataUrlPrefix) public onlyOwner\n\t{\n\t\tmetadataUrlPrefix = _metadataUrlPrefix;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokensOfWithData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"name\":\"_tokenId3\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDataAndOwner3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeApprovedContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addApprovedContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"mintAndSetData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadataUrlPrefix\",\"type\":\"string\"}],\"name\":\"setMetadataUrlPrefix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"name\":\"_tokenId3\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getData3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"name\":\"_tokenId3\",\"type\":\"uint256\"}],\"name\":\"burn3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeApprovedContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "600e805460ff19169055600160105560e0604052602760808190527f68747470733a2f2f6d657461646174612e63727970746f61737361756c742e6960a09081527f6f2f756e69742f0000000000000000000000000000000000000000000000000060c05262000073916011919062000294565b50604080518082018252601181527f43727970746f41737361756c74556e69740000000000000000000000000000006020808301919091528251808401909352600383527f43415500000000000000000000000000000000000000000000000000000000009083015290620001117f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000227810204565b620001457f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000227810204565b620001797f4f558e790000000000000000000000000000000000000000000000000000000064010000000062000227810204565b81516200018e90600590602085019062000294565b508051620001a490600690602084019062000294565b50620001d97f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000227810204565b6200020d7f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000227810204565b5050600c8054600160a060020a0319163317905562000339565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200025757600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d757805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000307578251825591602001919060010190620002ea565b506200031592915062000319565b5090565b6200033691905b8082111562000315576000815560010162000320565b90565b611f8580620003496000396000f3006080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101b057806306fdde03146101e6578063081812fc14610270578063095ea7b3146102a45780630a28c664146102ca57806318160ddd1461038757806319fa8f50146103ae57806323b872dd146103e05780632909f6381461040a5780632a0deab4146104285780632f745c59146104875780633a674500146104ab57806342842e0e146104c057806342966c68146104ea57806347a5b1b3146105025780634e4fe306146105235780634f558e791461053e5780634f6ccce7146105565780636352211e1461056e5780636b3559e11461058657806370a08231146105aa578063715018a6146105cb5780638da5cb5b146105e05780639341287d146105f557806395d89b411461064e57806397306c27146106635780639d248e08146106a2578063a22cb465146106c0578063b88d4fde146106e6578063c87b56dd14610755578063caa0f92a1461076d578063d43f24b014610782578063e985e9c5146107a3578063f2fde38b146107ca575b600080fd5b3480156101bc57600080fd5b506101d2600160e060020a0319600435166107eb565b604080519115158252519081900360200190f35b3480156101f257600080fd5b506101fb61080a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023557818101518382015260200161021d565b50505050905090810190601f1680156102625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027c57600080fd5b506102886004356108a1565b60408051600160a060020a039092168252519081900360200190f35b3480156102b057600080fd5b506102c8600160a060020a03600435166024356108bc565b005b3480156102d657600080fd5b506102ee600160a060020a0360043516602435610972565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561033257818101518382015260200161031a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610371578181015183820152602001610359565b5050505090500194505050505060405180910390f35b34801561039357600080fd5b5061039c610a90565b60408051918252519081900360200190f35b3480156103ba57600080fd5b506103c3610a96565b60408051600160e060020a03199092168252519081900360200190f35b3480156103ec57600080fd5b506102c8600160a060020a0360043581169060243516604435610aba565b34801561041657600080fd5b506102c8600435602435604435610b5f565b34801561043457600080fd5b50610449600435602435604435606435610be5565b60408051968752602087019590955285850193909352600160a060020a039182166060860152811660808501521660a0830152519081900360c00190f35b34801561049357600080fd5b5061039c600160a060020a0360043516602435610c4b565b3480156104b757600080fd5b506102c8610c98565b3480156104cc57600080fd5b506102c8600160a060020a0360043581169060243516604435610cbe565b3480156104f657600080fd5b506102c8600435610cf6565b34801561050e57600080fd5b506102c8600160a060020a0360043516610d89565b34801561052f57600080fd5b5061039c600435602435610dd4565b34801561054a57600080fd5b506101d2600435610df0565b34801561056257600080fd5b5061039c600435610e0d565b34801561057a57600080fd5b50610288600435610e42565b34801561059257600080fd5b5061039c600160a060020a0360043516602435610e6c565b3480156105b657600080fd5b5061039c600160a060020a0360043516610f00565b3480156105d757600080fd5b506102c8610f33565b3480156105ec57600080fd5b50610288610fa1565b34801561060157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c8943694929360249392840191908190840183828082843750949750610fb09650505050505050565b34801561065a57600080fd5b506101fb610fde565b34801561066f57600080fd5b5061068460043560243560443560643561103f565b60408051938452602084019290925282820152519081900360600190f35b3480156106ae57600080fd5b506102c860043560243560443561106d565b3480156106cc57600080fd5b506102c8600160a060020a03600435166024351515611120565b3480156106f257600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102c894600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506111a49650505050505050565b34801561076157600080fd5b506101fb6004356111e3565b34801561077957600080fd5b5061039c611299565b34801561078e57600080fd5b506102c8600160a060020a036004351661129f565b3480156107af57600080fd5b506101d2600160a060020a03600435811690602435166112e7565b3480156107d657600080fd5b506102c8600160a060020a0360043516611315565b600160e060020a03191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108965780601f1061086b57610100808354040283529160200191610896565b820191906000526020600020905b81548152906001019060200180831161087957829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b60006108c782610e42565b9050600160a060020a0383811690821614156108e257600080fd5b33600160a060020a03821614806108fe57506108fe81336112e7565b151561090957600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60608060608060006007600088600160a060020a0316600160a060020a031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109e957602002820191906000526020600020905b8154815260200190600101908083116109d5575b505050505092508251604051908082528060200260200182016040528015610a1b578160200160208202803883390190505b509150600090505b8251811015610a84576000868152600f602052604081208451909190859084908110610a4b57fe5b906020019060200201518152602001908152602001600020548282815181101515610a7257fe5b60209081029091010152600101610a23565b50909590945092505050565b60095490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b80610ac53382611335565b1515610ad057600080fd5b600160a060020a0384161515610ae557600080fd5b600160a060020a0383161515610afa57600080fd5b610b0484836113b7565b610b0e8483611426565b610b18838361155f565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b336000908152600d602052604090205460ff161515610bc8576040805160e560020a62461bcd02815260206004820152601660248201527f6e6f7420616e20617070726f7665642073656e64657200000000000000000000604482015290519081900360640190fd5b6000918252600f6020908152604080842094845293905291902055565b6000818152600f602090815260408083208784529091528082205485835281832054858452918320548392839283928392839291610c228d610e42565b610c2b8d610e42565b610c348d610e42565b949f939e50919c509a509850909650945050505050565b6000610c5683610f00565b8210610c6157600080fd5b600160a060020a0383166000908152600760205260409020805483908110610c8557fe5b9060005260206000200154905092915050565b600c54600160a060020a03163314610caf57600080fd5b600e805460ff19166001179055565b80610cc93382611335565b1515610cd457600080fd5b610cf084848460206040519081016040528060008152506111a4565b50505050565b336000908152600d602052604090205460ff1680610d1e5750600c54600160a060020a031633145b1515610d74576040805160e560020a62461bcd02815260206004820152601360248201527f6275726e6572206e6f7420617070726f76656400000000000000000000000000604482015290519081900360640190fd5b610d86610d8082610e42565b826115a8565b50565b600c54600160a060020a03163314610da057600080fd5b600e5460ff1615610db057600080fd5b600160a060020a03166000908152600d60205260409020805460ff19166001179055565b6000908152600f60209081526040808320938352929052205490565b600090815260016020526040902054600160a060020a0316151590565b6000610e17610a90565b8210610e2257600080fd5b6009805483908110610e3057fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610e6657600080fd5b92915050565b336000908152600d6020526040812054819060ff161515610ed7576040805160e560020a62461bcd02815260206004820152601660248201527f6e6f7420616e20617070726f7665642073656e64657200000000000000000000604482015290519081900360640190fd5b506010805460018101909155610eed84826116a2565b610ef981600085610bc8565b9392505050565b6000600160a060020a0382161515610f1757600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a03163314610f4a57600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b600c54600160a060020a031681565b600c54600160a060020a03163314610fc757600080fd5b8051610fda906011906020840190611e5d565b5050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108965780601f1061086b57610100808354040283529160200191610896565b6000908152600f60209081526040808320958352949052838120549281528381205491815292909220549092565b336000908152600d602052604090205460ff16806110955750600c54600160a060020a031633145b15156110eb576040805160e560020a62461bcd02815260206004820152601360248201527f6275726e6572206e6f7420617070726f76656400000000000000000000000000604482015290519081900360640190fd5b6110fd6110f784610e42565b846115a8565b61110f61110983610e42565b836115a8565b61111b610d8082610e42565b505050565b600160a060020a03821633141561113657600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b816111af3382611335565b15156111ba57600080fd5b6111c5858585610aba565b6111d1858585856116f1565b15156111dc57600080fd5b5050505050565b60606111ee82610df0565b15156111f957600080fd5b60118054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152610e6693909290918301828280156112865780601f1061125b57610100808354040283529160200191611286565b820191906000526020600020905b81548152906001019060200180831161126957829003601f168201915b50505050506112948461185e565b611951565b60105490565b600c54600160a060020a031633146112b657600080fd5b600e5460ff16156112c657600080fd5b600160a060020a03166000908152600d60205260409020805460ff19169055565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600160a060020a0316331461132c57600080fd5b610d8681611986565b60008061134183610e42565b905080600160a060020a031684600160a060020a0316148061137b5750600160a060020a0384166000908152600d602052604090205460ff165b8061139f575083600160a060020a0316611394846108a1565b600160a060020a0316145b806113af57506113af81856112e7565b949350505050565b81600160a060020a03166113ca82610e42565b600160a060020a0316146113dd57600080fd5b600081815260026020526040902054600160a060020a031615610fda576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b60008060006114358585611a04565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061147090600163ffffffff611a9a16565b600160a060020a03861660009081526007602052604090208054919350908390811061149857fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156114d857fe5b6000918252602080832090910192909255600160a060020a038716815260079091526040812080548490811061150a57fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490611541906000198301611edb565b50600093845260086020526040808520859055908452909220555050565b600061156b8383611aac565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b60008060006115b78585611b3c565b6000848152600b602052604090205460026000196101006001841615020190911604156115f5576000848152600b602052604081206115f591611eff565b6000848152600a602052604090205460095490935061161b90600163ffffffff611a9a16565b915060098281548110151561162c57fe5b906000526020600020015490508060098481548110151561164957fe5b6000918252602082200191909155600980548490811061166557fe5b6000918252602090912001556009805490611684906000198301611edb565b506000938452600a6020526040808520859055908452909220555050565b6116ac8282611b8c565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b60008061170685600160a060020a0316611be7565b15156117155760019150611855565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156117a8578181015183820152602001611790565b50505050905090810190601f1680156117d55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156117f757600080fd5b505af115801561180b573d6000803e3d6000fd5b505050506040513d602081101561182157600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b606060008082818515156118a75760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450611948565b8593505b83156118c257600190920191600a840493506118ab565b826040519080825280601f01601f1916602001820160405280156118f0578160200160208202803883390190505b5091505060001982015b851561194457815160001982019160f860020a6030600a8a06010291849190811061192157fe5b906020010190600160f860020a031916908160001a905350600a860495506118fa565b8194505b50505050919050565b604080516020818101835260008083528351808301855281815284519283019094528152606092610ef9928692869290611bef565b600160a060020a038116151561199b57600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a0316611a1782610e42565b600160a060020a031614611a2a57600080fd5b600160a060020a038216600090815260036020526040902054611a5490600163ffffffff611a9a16565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600082821115611aa657fe5b50900390565b600081815260016020526040902054600160a060020a031615611ace57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611b1c91611e50565b600160a060020a0390921660009081526003602052604090209190915550565b611b4682826113b7565b611b508282611426565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600160a060020a0382161515611ba157600080fd5b611bab828261155f565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f191660200182016040528015611c48578160200160208202803883390190505b50935083925060009150600090505b8851811015611cb5578881815181101515611c6e57fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611c9557fe5b906020010190600160f860020a031916908160001a905350600101611c57565b5060005b8751811015611d17578781815181101515611cd057fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611cf757fe5b906020010190600160f860020a031916908160001a905350600101611cb9565b5060005b8651811015611d79578681815181101515611d3257fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611d5957fe5b906020010190600160f860020a031916908160001a905350600101611d1b565b5060005b8551811015611ddb578581815181101515611d9457fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611dbb57fe5b906020010190600160f860020a031916908160001a905350600101611d7d565b5060005b8451811015611e3d578481815181101515611df657fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611e1d57fe5b906020010190600160f860020a031916908160001a905350600101611ddf565b50909d9c50505050505050505050505050565b81810182811015610e6657fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e9e57805160ff1916838001178555611ecb565b82800160010185558215611ecb579182015b82811115611ecb578251825591602001919060010190611eb0565b50611ed7929150611f3f565b5090565b81548183558181111561111b5760008381526020902061111b918101908301611f3f565b50805460018160011615610100020316600290046000825580601f10611f255750610d86565b601f016020900490600052602060002090810190610d8691905b61089e91905b80821115611ed75760008155600101611f455600a165627a7a7230582053cf7e4a40c71eafcfafe842d775adc548fe95cfe1714618d5b1c1c871b80a370029"
}