{
  "address": "0xd2ba6e5629a1531f6d8a0a1168959cc1f07b81e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SafeWithdraw",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-23\n*/\n\npragma solidity ^0.4.23;\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ninterface TokenContract {\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n}\n\ncontract SafeWithdraw is Ownable {\n  address signerAddress = 0xDD594FeD73370549607A658DfE7737C437265BBC;\n  TokenContract public tkn;\n  address public tokenWallet;\n  mapping (bytes32 => bool) public claimed;\n\n  constructor() public {\n    tkn = TokenContract(0x92D3e963aA94D909869940A8d15FA16CcbC6655E);\n    tokenWallet = 0x850Ac570A9f4817C43722938127aFa504aeb7717;\n  }\n\n  function changeWallet(address _newWallet) onlyOwner public {\n    tokenWallet = _newWallet;\n  }\n\n  function changeSigner(address _newSigner) onlyOwner public {\n    signerAddress = _newSigner;\n  }\n\n  function transfer(uint256 _amount, string code, bytes sig) public {\n    bytes32 message = prefixed(keccak256(_amount, code));\n    \n    require (!claimed[message]);\n\n    if (recoverSigner(message, sig) == signerAddress) {\n      uint256 fullValue = _amount * (1 ether);\n      claimed[message] = true;\n      tkn.transferFrom(tokenWallet, msg.sender, fullValue);\n      emit Claimed(msg.sender, fullValue);\n    }\n  }\n\n  function killMe() public {\n    require(msg.sender == owner);\n    selfdestruct(msg.sender);\n  }\n\n  function splitSignature(bytes sig)\n    internal\n    pure\n    returns (uint8, bytes32, bytes32)\n  {\n    require(sig.length == 65);\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n    return (v, r, s);\n  }\n\n  function recoverSigner(bytes32 message, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    (v, r, s) = splitSignature(sig);\n    return ecrecover(message, v, r, s);\n  }\n\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\n    return keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\n  }\n\n  event Claimed(address _by, uint256 _amount);\n\n}",
  "bytecode": "608060405273dd594fed73370549607a658dfe7737c437265bbc600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507392d3e963aa94d909869940a8d15fa16ccbc6655e600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073850ac570a9f4817c43722938127afa504aeb7717600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b9a8061015f6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305f3a8521461009e578063572c1517146100f55780638da5cb5b146101ae57806398b9a2dc14610205578063aad2b72314610248578063b603cd801461028b578063bff99c6c146102a2578063cc3c0f06146102f9578063f2fde38b14610342575b600080fd5b3480156100aa57600080fd5b506100b3610385565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561010157600080fd5b506101ac60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103ab565b005b3480156101ba57600080fd5b506101c36106c2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021157600080fd5b50610246600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106e7565b005b34801561025457600080fd5b50610289600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610786565b005b34801561029757600080fd5b506102a0610825565b005b3480156102ae57600080fd5b506102b7610899565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030557600080fd5b5061032860048036038101908080356000191690602001909291905050506108bf565b604051808215151515815260200191505060405180910390f35b34801561034e57600080fd5b50610383600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108df565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061042185856040518083815260200182805190602001908083835b6020831015156103ee57805182526020820191506020810190506020830392506103c9565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040518091039020610a34565b915060046000836000191660001916815260200190815260200160002060009054906101000a900460ff1615151561045857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661049b8385610a83565b73ffffffffffffffffffffffffffffffffffffffff1614156106bb57670de0b6b3a764000085029050600160046000846000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b505050506040513d602081101561063d57600080fd5b8101908080519060200190929190505050507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107e157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561088057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561097657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008160405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01826000191660001916815260200191505060405180910390209050919050565b600080600080610a9285610b2a565b809350819450829550505050600186848484604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610b15573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060008060008060418751141515610b4357600080fd5b6020870151925060408701519150606087015160001a905080838395509550955050505091939092505600a165627a7a72305820f949657540e0572aedc0bacba670efcadbf4cd046896c85277a335820a8bd6e10029"
}