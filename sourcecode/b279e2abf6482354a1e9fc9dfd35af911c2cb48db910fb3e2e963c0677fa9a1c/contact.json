{
  "address": "0x55656b8a58df94c1e8b5142f8da973301452ea65",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CivilPLCRVoting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-25\n*/\n\n// File: contracts/installed_contracts/DLL.sol\n\npragma solidity^0.4.11;\n\nlibrary DLL {\n\n  uint constant NULL_NODE_ID = 0;\n\n  struct Node {\n    uint next;\n    uint prev;\n  }\n\n  struct Data {\n    mapping(uint => Node) dll;\n  }\n\n  function isEmpty(Data storage self) public view returns (bool) {\n    return getStart(self) == NULL_NODE_ID;\n  }\n\n  function contains(Data storage self, uint _curr) public view returns (bool) {\n    if (isEmpty(self) || _curr == NULL_NODE_ID) {\n      return false;\n    }\n\n    bool isSingleNode = (getStart(self) == _curr) && (getEnd(self) == _curr);\n    bool isNullNode = (getNext(self, _curr) == NULL_NODE_ID) && (getPrev(self, _curr) == NULL_NODE_ID);\n    return isSingleNode || !isNullNode;\n  }\n\n  function getNext(Data storage self, uint _curr) public view returns (uint) {\n    return self.dll[_curr].next;\n  }\n\n  function getPrev(Data storage self, uint _curr) public view returns (uint) {\n    return self.dll[_curr].prev;\n  }\n\n  function getStart(Data storage self) public view returns (uint) {\n    return getNext(self, NULL_NODE_ID);\n  }\n\n  function getEnd(Data storage self) public view returns (uint) {\n    return getPrev(self, NULL_NODE_ID);\n  }\n\n  /**\n  @dev Inserts a new node between _prev and _next. When inserting a node already existing in\n  the list it will be automatically removed from the old position.\n  @param _prev the node which _new will be inserted after\n  @param _curr the id of the new node being inserted\n  @param _next the node which _new will be inserted before\n  */\n  function insert(Data storage self, uint _prev, uint _curr, uint _next) public {\n    require(_curr != NULL_NODE_ID);\n\n    remove(self, _curr);\n\n    require(_prev == NULL_NODE_ID || contains(self, _prev));\n    require(_next == NULL_NODE_ID || contains(self, _next));\n\n    require(getNext(self, _prev) == _next);\n    require(getPrev(self, _next) == _prev);\n\n    self.dll[_curr].prev = _prev;\n    self.dll[_curr].next = _next;\n\n    self.dll[_prev].next = _curr;\n    self.dll[_next].prev = _curr;\n  }\n\n  function remove(Data storage self, uint _curr) public {\n    if (!contains(self, _curr)) {\n      return;\n    }\n\n    uint next = getNext(self, _curr);\n    uint prev = getPrev(self, _curr);\n\n    self.dll[next].prev = prev;\n    self.dll[prev].next = next;\n\n    delete self.dll[_curr];\n  }\n}\n\n// File: contracts/installed_contracts/AttributeStore.sol\n\n/* solium-disable */\npragma solidity^0.4.11;\n\nlibrary AttributeStore {\n    struct Data {\n        mapping(bytes32 => uint) store;\n    }\n\n    function getAttribute(Data storage self, bytes32 _UUID, string _attrName)\n    public view returns (uint) {\n        bytes32 key = keccak256(_UUID, _attrName);\n        return self.store[key];\n    }\n\n    function setAttribute(Data storage self, bytes32 _UUID, string _attrName, uint _attrVal)\n    public {\n        bytes32 key = keccak256(_UUID, _attrName);\n        self.store[key] = _attrVal;\n    }\n}\n\n// File: contracts/zeppelin-solidity/token/ERC20/IERC20.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/zeppelin-solidity/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/installed_contracts/PLCRVoting.sol\n\npragma solidity ^0.4.8;\n\n\n\n\n\n/**\n@title Partial-Lock-Commit-Reveal Voting scheme with ERC20 tokens\n@author Team: Aspyn Palatnick, Cem Ozer, Yorke Rhodes\n*/\ncontract PLCRVoting {\n\n    // ============\n    // EVENTS:\n    // ============\n\n    event _VoteCommitted(uint indexed pollID, uint numTokens, address indexed voter);\n    event _VoteRevealed(uint indexed pollID, uint numTokens, uint votesFor, uint votesAgainst, uint indexed choice, address indexed voter, uint salt);\n    event _PollCreated(uint voteQuorum, uint commitEndDate, uint revealEndDate, uint indexed pollID, address indexed creator);\n    event _VotingRightsGranted(uint numTokens, address indexed voter);\n    event _VotingRightsWithdrawn(uint numTokens, address indexed voter);\n    event _TokensRescued(uint indexed pollID, address indexed voter);\n\n    // ============\n    // DATA STRUCTURES:\n    // ============\n\n    using AttributeStore for AttributeStore.Data;\n    using DLL for DLL.Data;\n    using SafeMath for uint;\n\n    struct Poll {\n        uint commitEndDate;     /// expiration date of commit period for poll\n        uint revealEndDate;     /// expiration date of reveal period for poll\n        uint voteQuorum;\t    /// number of votes required for a proposal to pass\n        uint votesFor;\t\t    /// tally of votes supporting proposal\n        uint votesAgainst;      /// tally of votes countering proposal\n        mapping(address => bool) didCommit;  /// indicates whether an address committed a vote for this poll\n        mapping(address => bool) didReveal;   /// indicates whether an address revealed a vote for this poll\n    }\n\n    // ============\n    // STATE VARIABLES:\n    // ============\n\n    uint constant public INITIAL_POLL_NONCE = 0;\n    uint public pollNonce;\n\n    mapping(uint => Poll) public pollMap; // maps pollID to Poll struct\n    mapping(address => uint) public voteTokenBalance; // maps user's address to voteToken balance\n\n    mapping(address => DLL.Data) dllMap;\n    AttributeStore.Data store;\n\n    IERC20 public token;\n\n    /**\n    @param _token The address where the ERC20 token contract is deployed\n    */\n    constructor(address _token) public {\n        require(_token != 0);\n\n        token = IERC20(_token);\n        pollNonce = INITIAL_POLL_NONCE;\n    }\n\n    // ================\n    // TOKEN INTERFACE:\n    // ================\n\n    /**\n    @notice Loads _numTokens ERC20 tokens into the voting contract for one-to-one voting rights\n    @dev Assumes that msg.sender has approved voting contract to spend on their behalf\n    @param _numTokens The number of votingTokens desired in exchange for ERC20 tokens\n    */\n    function requestVotingRights(uint _numTokens) public {\n        require(token.balanceOf(msg.sender) >= _numTokens);\n        voteTokenBalance[msg.sender] += _numTokens;\n        require(token.transferFrom(msg.sender, this, _numTokens));\n        emit _VotingRightsGranted(_numTokens, msg.sender);\n    }\n\n    /**\n    @notice Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\n    @param _numTokens The number of ERC20 tokens desired in exchange for voting rights\n    */\n    function withdrawVotingRights(uint _numTokens) external {\n        uint availableTokens = voteTokenBalance[msg.sender].sub(getLockedTokens(msg.sender));\n        require(availableTokens >= _numTokens);\n        voteTokenBalance[msg.sender] -= _numTokens;\n        require(token.transfer(msg.sender, _numTokens));\n        emit _VotingRightsWithdrawn(_numTokens, msg.sender);\n    }\n\n    /**\n    @dev Unlocks tokens locked in unrevealed vote where poll has ended\n    @param _pollID Integer identifier associated with the target poll\n    */\n    function rescueTokens(uint _pollID) public {\n        require(isExpired(pollMap[_pollID].revealEndDate));\n        require(dllMap[msg.sender].contains(_pollID));\n\n        dllMap[msg.sender].remove(_pollID);\n        emit _TokensRescued(_pollID, msg.sender);\n    }\n\n    /**\n    @dev Unlocks tokens locked in unrevealed votes where polls have ended\n    @param _pollIDs Array of integer identifiers associated with the target polls\n    */\n    function rescueTokensInMultiplePolls(uint[] _pollIDs) public {\n        // loop through arrays, rescuing tokens from all\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            rescueTokens(_pollIDs[i]);\n        }\n    }\n\n    // =================\n    // VOTING INTERFACE:\n    // =================\n\n    /**\n    @notice Commits vote using hash of choice and secret salt to conceal vote until reveal\n    @param _pollID Integer identifier associated with target poll\n    @param _secretHash Commit keccak256 hash of voter's choice and salt (tightly packed in this order)\n    @param _numTokens The number of tokens to be committed towards the target poll\n    @param _prevPollID The ID of the poll that the user has voted the maximum number of tokens in which is still less than or equal to numTokens\n    */\n    function commitVote(uint _pollID, bytes32 _secretHash, uint _numTokens, uint _prevPollID) public {\n        require(commitPeriodActive(_pollID));\n\n        // if msg.sender doesn't have enough voting rights,\n        // request for enough voting rights\n        if (voteTokenBalance[msg.sender] < _numTokens) {\n            uint remainder = _numTokens.sub(voteTokenBalance[msg.sender]);\n            requestVotingRights(remainder);\n        }\n\n        // make sure msg.sender has enough voting rights\n        require(voteTokenBalance[msg.sender] >= _numTokens);\n        // prevent user from committing to zero node placeholder\n        require(_pollID != 0);\n        // prevent user from committing a secretHash of 0\n        require(_secretHash != 0);\n\n        // Check if _prevPollID exists in the user's DLL or if _prevPollID is 0\n        require(_prevPollID == 0 || dllMap[msg.sender].contains(_prevPollID));\n\n        uint nextPollID = dllMap[msg.sender].getNext(_prevPollID);\n\n        // edge case: in-place update\n        if (nextPollID == _pollID) {\n            nextPollID = dllMap[msg.sender].getNext(_pollID);\n        }\n\n        require(validPosition(_prevPollID, nextPollID, msg.sender, _numTokens));\n        dllMap[msg.sender].insert(_prevPollID, _pollID, nextPollID);\n\n        bytes32 UUID = attrUUID(msg.sender, _pollID);\n\n        store.setAttribute(UUID, \"numTokens\", _numTokens);\n        store.setAttribute(UUID, \"commitHash\", uint(_secretHash));\n\n        pollMap[_pollID].didCommit[msg.sender] = true;\n        emit _VoteCommitted(_pollID, _numTokens, msg.sender);\n    }\n\n    /**\n    @notice                 Commits votes using hashes of choices and secret salts to conceal votes until reveal\n    @param _pollIDs         Array of integer identifiers associated with target polls\n    @param _secretHashes    Array of commit keccak256 hashes of voter's choices and salts (tightly packed in this order)\n    @param _numsTokens      Array of numbers of tokens to be committed towards the target polls\n    @param _prevPollIDs     Array of IDs of the polls that the user has voted the maximum number of tokens in which is still less than or equal to numTokens\n    */\n    function commitVotes(uint[] _pollIDs, bytes32[] _secretHashes, uint[] _numsTokens, uint[] _prevPollIDs) external {\n        // make sure the array lengths are all the same\n        require(_pollIDs.length == _secretHashes.length);\n        require(_pollIDs.length == _numsTokens.length);\n        require(_pollIDs.length == _prevPollIDs.length);\n\n        // loop through arrays, committing each individual vote values\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            commitVote(_pollIDs[i], _secretHashes[i], _numsTokens[i], _prevPollIDs[i]);\n        }\n    }\n\n    /**\n    @dev Compares previous and next poll's committed tokens for sorting purposes\n    @param _prevID Integer identifier associated with previous poll in sorted order\n    @param _nextID Integer identifier associated with next poll in sorted order\n    @param _voter Address of user to check DLL position for\n    @param _numTokens The number of tokens to be committed towards the poll (used for sorting)\n    @return valid Boolean indication of if the specified position maintains the sort\n    */\n    function validPosition(uint _prevID, uint _nextID, address _voter, uint _numTokens) public constant returns (bool valid) {\n        bool prevValid = (_numTokens >= getNumTokens(_voter, _prevID));\n        // if next is zero node, _numTokens does not need to be greater\n        bool nextValid = (_numTokens <= getNumTokens(_voter, _nextID) || _nextID == 0);\n        return prevValid && nextValid;\n    }\n\n    /**\n    @notice Reveals vote with choice and secret salt used in generating commitHash to attribute committed tokens\n    @param _pollID Integer identifier associated with target poll\n    @param _voteOption Vote choice used to generate commitHash for associated poll\n    @param _salt Secret number used to generate commitHash for associated poll\n    */\n    function revealVote(uint _pollID, uint _voteOption, uint _salt) public {\n        // Make sure the reveal period is active\n        require(revealPeriodActive(_pollID));\n        require(pollMap[_pollID].didCommit[msg.sender]);                         // make sure user has committed a vote for this poll\n        require(!pollMap[_pollID].didReveal[msg.sender]);                        // prevent user from revealing multiple times\n        require(keccak256(_voteOption, _salt) == getCommitHash(msg.sender, _pollID)); // compare resultant hash from inputs to original commitHash\n\n        uint numTokens = getNumTokens(msg.sender, _pollID);\n\n        if (_voteOption == 1) {// apply numTokens to appropriate poll choice\n            pollMap[_pollID].votesFor += numTokens;\n        } else {\n            pollMap[_pollID].votesAgainst += numTokens;\n        }\n\n        dllMap[msg.sender].remove(_pollID); // remove the node referring to this vote upon reveal\n        pollMap[_pollID].didReveal[msg.sender] = true;\n\n        emit _VoteRevealed(_pollID, numTokens, pollMap[_pollID].votesFor, pollMap[_pollID].votesAgainst, _voteOption, msg.sender, _salt);\n    }\n\n    /**\n    @notice             Reveals multiple votes with choices and secret salts used in generating commitHashes to attribute committed tokens\n    @param _pollIDs     Array of integer identifiers associated with target polls\n    @param _voteOptions Array of vote choices used to generate commitHashes for associated polls\n    @param _salts       Array of secret numbers used to generate commitHashes for associated polls\n    */\n    function revealVotes(uint[] _pollIDs, uint[] _voteOptions, uint[] _salts) external {\n        // make sure the array lengths are all the same\n        require(_pollIDs.length == _voteOptions.length);\n        require(_pollIDs.length == _salts.length);\n\n        // loop through arrays, revealing each individual vote values\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            revealVote(_pollIDs[i], _voteOptions[i], _salts[i]);\n        }\n    }\n\n    /**\n    @param _pollID Integer identifier associated with target poll\n    @param _salt Arbitrarily chosen integer used to generate secretHash\n    @return correctVotes Number of tokens voted for winning option\n    */\n    function getNumPassingTokens(address _voter, uint _pollID, uint _salt) public constant returns (uint correctVotes) {\n        require(pollEnded(_pollID));\n        require(pollMap[_pollID].didReveal[_voter]);\n\n        uint winningChoice = isPassed(_pollID) ? 1 : 0;\n        bytes32 winnerHash = keccak256(winningChoice, _salt);\n        bytes32 commitHash = getCommitHash(_voter, _pollID);\n\n        require(winnerHash == commitHash);\n\n        return getNumTokens(_voter, _pollID);\n    }\n\n    // ==================\n    // POLLING INTERFACE:\n    // ==================\n\n    /**\n    @dev Initiates a poll with canonical configured parameters at pollID emitted by PollCreated event\n    @param _voteQuorum Type of majority (out of 100) that is necessary for poll to be successful\n    @param _commitDuration Length of desired commit period in seconds\n    @param _revealDuration Length of desired reveal period in seconds\n    */\n    function startPoll(uint _voteQuorum, uint _commitDuration, uint _revealDuration) public returns (uint pollID) {\n        pollNonce = pollNonce + 1;\n\n        uint commitEndDate = block.timestamp.add(_commitDuration);\n        uint revealEndDate = commitEndDate.add(_revealDuration);\n\n        pollMap[pollNonce] = Poll({\n            voteQuorum: _voteQuorum,\n            commitEndDate: commitEndDate,\n            revealEndDate: revealEndDate,\n            votesFor: 0,\n            votesAgainst: 0\n        });\n\n        emit _PollCreated(_voteQuorum, commitEndDate, revealEndDate, pollNonce, msg.sender);\n        return pollNonce;\n    }\n\n    /**\n    @notice Determines if proposal has passed\n    @dev Check if votesFor out of totalVotes exceeds votesQuorum (requires pollEnded)\n    @param _pollID Integer identifier associated with target poll\n    */\n    function isPassed(uint _pollID) constant public returns (bool passed) {\n        require(pollEnded(_pollID));\n\n        Poll memory poll = pollMap[_pollID];\n        return (100 * poll.votesFor) > (poll.voteQuorum * (poll.votesFor + poll.votesAgainst));\n    }\n\n    // ----------------\n    // POLLING HELPERS:\n    // ----------------\n\n    /**\n    @dev Gets the total winning votes for reward distribution purposes\n    @param _pollID Integer identifier associated with target poll\n    @return Total number of votes committed to the winning option for specified poll\n    */\n    function getTotalNumberOfTokensForWinningOption(uint _pollID) constant public returns (uint numTokens) {\n        require(pollEnded(_pollID));\n\n        if (isPassed(_pollID))\n            return pollMap[_pollID].votesFor;\n        else\n            return pollMap[_pollID].votesAgainst;\n    }\n\n    /**\n    @notice Determines if poll is over\n    @dev Checks isExpired for specified poll's revealEndDate\n    @return Boolean indication of whether polling period is over\n    */\n    function pollEnded(uint _pollID) constant public returns (bool ended) {\n        require(pollExists(_pollID));\n\n        return isExpired(pollMap[_pollID].revealEndDate);\n    }\n\n    /**\n    @notice Checks if the commit period is still active for the specified poll\n    @dev Checks isExpired for the specified poll's commitEndDate\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of isCommitPeriodActive for target poll\n    */\n    function commitPeriodActive(uint _pollID) constant public returns (bool active) {\n        require(pollExists(_pollID));\n\n        return !isExpired(pollMap[_pollID].commitEndDate);\n    }\n\n    /**\n    @notice Checks if the reveal period is still active for the specified poll\n    @dev Checks isExpired for the specified poll's revealEndDate\n    @param _pollID Integer identifier associated with target poll\n    */\n    function revealPeriodActive(uint _pollID) constant public returns (bool active) {\n        require(pollExists(_pollID));\n\n        return !isExpired(pollMap[_pollID].revealEndDate) && !commitPeriodActive(_pollID);\n    }\n\n    /**\n    @dev Checks if user has committed for specified poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of whether user has committed\n    */\n    function didCommit(address _voter, uint _pollID) constant public returns (bool committed) {\n        require(pollExists(_pollID));\n\n        return pollMap[_pollID].didCommit[_voter];\n    }\n\n    /**\n    @dev Checks if user has revealed for specified poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of whether user has revealed\n    */\n    function didReveal(address _voter, uint _pollID) constant public returns (bool revealed) {\n        require(pollExists(_pollID));\n\n        return pollMap[_pollID].didReveal[_voter];\n    }\n\n    /**\n    @dev Checks if a poll exists\n    @param _pollID The pollID whose existance is to be evaluated.\n    @return Boolean Indicates whether a poll exists for the provided pollID\n    */\n    function pollExists(uint _pollID) constant public returns (bool exists) {\n        return (_pollID != 0 && _pollID <= pollNonce);\n    }\n\n    // ---------------------------\n    // DOUBLE-LINKED-LIST HELPERS:\n    // ---------------------------\n\n    /**\n    @dev Gets the bytes32 commitHash property of target poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Bytes32 hash property attached to target poll\n    */\n    function getCommitHash(address _voter, uint _pollID) constant public returns (bytes32 commitHash) {\n        return bytes32(store.getAttribute(attrUUID(_voter, _pollID), \"commitHash\"));\n    }\n\n    /**\n    @dev Wrapper for getAttribute with attrName=\"numTokens\"\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Number of tokens committed to poll in sorted poll-linked-list\n    */\n    function getNumTokens(address _voter, uint _pollID) constant public returns (uint numTokens) {\n        return store.getAttribute(attrUUID(_voter, _pollID), \"numTokens\");\n    }\n\n    /**\n    @dev Gets top element of sorted poll-linked-list\n    @param _voter Address of user to check against\n    @return Integer identifier to poll with maximum number of tokens committed to it\n    */\n    function getLastNode(address _voter) constant public returns (uint pollID) {\n        return dllMap[_voter].getPrev(0);\n    }\n\n    /**\n    @dev Gets the numTokens property of getLastNode\n    @param _voter Address of user to check against\n    @return Maximum number of tokens committed in poll specified\n    */\n    function getLockedTokens(address _voter) constant public returns (uint numTokens) {\n        return getNumTokens(_voter, getLastNode(_voter));\n    }\n\n    /*\n    @dev Takes the last node in the user's DLL and iterates backwards through the list searching\n    for a node with a value less than or equal to the provided _numTokens value. When such a node\n    is found, if the provided _pollID matches the found nodeID, this operation is an in-place\n    update. In that case, return the previous node of the node being updated. Otherwise return the\n    first node that was found with a value less than or equal to the provided _numTokens.\n    @param _voter The voter whose DLL will be searched\n    @param _numTokens The value for the numTokens attribute in the node to be inserted\n    @return the node which the propoded node should be inserted after\n    */\n    function getInsertPointForNumTokens(address _voter, uint _numTokens, uint _pollID)\n    constant public returns (uint prevNode) {\n      // Get the last node in the list and the number of tokens in that node\n      uint nodeID = getLastNode(_voter);\n      uint tokensInNode = getNumTokens(_voter, nodeID);\n\n      // Iterate backwards through the list until reaching the root node\n      while(nodeID != 0) {\n        // Get the number of tokens in the current node\n        tokensInNode = getNumTokens(_voter, nodeID);\n        if(tokensInNode <= _numTokens) { // We found the insert point!\n          if(nodeID == _pollID) {\n            // This is an in-place update. Return the prev node of the node being updated\n            nodeID = dllMap[_voter].getPrev(nodeID);\n          }\n          // Return the insert point\n          return nodeID;\n        }\n        // We did not find the insert point. Continue iterating backwards through the list\n        nodeID = dllMap[_voter].getPrev(nodeID);\n      }\n\n      // The list is empty, or a smaller value than anything else in the list is being inserted\n      return nodeID;\n    }\n\n    // ----------------\n    // GENERAL HELPERS:\n    // ----------------\n\n    /**\n    @dev Checks if an expiration date has been reached\n    @param _terminationDate Integer timestamp of date to compare current timestamp with\n    @return expired Boolean indication of whether the terminationDate has passed\n    */\n    function isExpired(uint _terminationDate) constant public returns (bool expired) {\n        return (block.timestamp > _terminationDate);\n    }\n\n    /**\n    @dev Generates an identifier which associates a user and a poll together\n    @param _pollID Integer identifier associated with target poll\n    @return UUID Hash which is deterministic from _user and _pollID\n    */\n    function attrUUID(address _user, uint _pollID) public pure returns (bytes32 UUID) {\n        return keccak256(_user, _pollID);\n    }\n}\n\n// File: contracts/proof-of-use/telemetry/TokenTelemetryI.sol\n\npragma solidity ^0.4.23;\n\ninterface TokenTelemetryI {\n  function onRequestVotingRights(address user, uint tokenAmount) external;\n}\n\n// File: contracts/tcr/CivilPLCRVoting.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n@title Partial-Lock-Commit-Reveal Voting scheme with ERC20 tokens\n*/\ncontract CivilPLCRVoting is PLCRVoting {\n\n  TokenTelemetryI public telemetry;\n\n  /**\n  @dev Initializer. Can only be called once.\n  @param tokenAddr The address where the ERC20 token contract is deployed\n  @param telemetryAddr The address where the TokenTelemetry contract is deployed\n  */\n  constructor(address tokenAddr, address telemetryAddr) public PLCRVoting(tokenAddr) {\n    require(telemetryAddr != 0);\n    telemetry = TokenTelemetryI(telemetryAddr);\n  }\n\n  /**\n    @notice Loads _numTokens ERC20 tokens into the voting contract for one-to-one voting rights\n    @dev Assumes that msg.sender has approved voting contract to spend on their behalf\n    @param _numTokens The number of votingTokens desired in exchange for ERC20 tokens\n    @dev Differs from base implementation in that it records use of token in mapping for \"proof of use\"\n  */\n  function requestVotingRights(uint _numTokens) public {\n    super.requestVotingRights(_numTokens);\n    telemetry.onRequestVotingRights(msg.sender, voteTokenBalance[msg.sender]);\n  }\n\n  /**\n  @param _pollID Integer identifier associated with target poll\n  @param _salt Arbitrarily chosen integer used to generate secretHash\n  @return correctVotes Number of tokens voted for losing option\n  */\n  function getNumLosingTokens(address _voter, uint _pollID, uint _salt) public view returns (uint correctVotes) {\n    require(pollEnded(_pollID));\n    require(pollMap[_pollID].didReveal[_voter]);\n\n    uint losingChoice = isPassed(_pollID) ? 0 : 1;\n    bytes32 loserHash = keccak256(losingChoice, _salt);\n    bytes32 commitHash = getCommitHash(_voter, _pollID);\n\n    require(loserHash == commitHash);\n\n    return getNumTokens(_voter, _pollID);\n  }\n\n  /**\n  @dev Gets the total losing votes for reward distribution purposes\n  @param _pollID Integer identifier associated with target poll\n  @return Total number of votes committed to the losing option for specified poll\n  */\n  function getTotalNumberOfTokensForLosingOption(uint _pollID) public view returns (uint numTokens) {\n    require(pollEnded(_pollID));\n\n    if (isPassed(_pollID))\n      return pollMap[_pollID].votesAgainst;\n    else\n      return pollMap[_pollID].votesFor;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"getTotalNumberOfTokensForWinningOption\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_POLL_NONCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_numTokens\",\"type\":\"uint256\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"getInsertPointForNumTokens\",\"outputs\":[{\"name\":\"prevNode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteQuorum\",\"type\":\"uint256\"},{\"name\":\"_commitDuration\",\"type\":\"uint256\"},{\"name\":\"_revealDuration\",\"type\":\"uint256\"}],\"name\":\"startPoll\",\"outputs\":[{\"name\":\"pollID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollIDs\",\"type\":\"uint256[]\"},{\"name\":\"_secretHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_numsTokens\",\"type\":\"uint256[]\"},{\"name\":\"_prevPollIDs\",\"type\":\"uint256[]\"}],\"name\":\"commitVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"telemetry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getLastNode\",\"outputs\":[{\"name\":\"pollID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"revealPeriodActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"isPassed\",\"outputs\":[{\"name\":\"passed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pollMap\",\"outputs\":[{\"name\":\"commitEndDate\",\"type\":\"uint256\"},{\"name\":\"revealEndDate\",\"type\":\"uint256\"},{\"name\":\"voteQuorum\",\"type\":\"uint256\"},{\"name\":\"votesFor\",\"type\":\"uint256\"},{\"name\":\"votesAgainst\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getNumLosingTokens\",\"outputs\":[{\"name\":\"correctVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"},{\"name\":\"_secretHash\",\"type\":\"bytes32\"},{\"name\":\"_numTokens\",\"type\":\"uint256\"},{\"name\":\"_prevPollID\",\"type\":\"uint256\"}],\"name\":\"commitVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"didCommit\",\"outputs\":[{\"name\":\"committed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollIDs\",\"type\":\"uint256[]\"},{\"name\":\"_voteOptions\",\"type\":\"uint256[]\"},{\"name\":\"_salts\",\"type\":\"uint256[]\"}],\"name\":\"revealVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_prevID\",\"type\":\"uint256\"},{\"name\":\"_nextID\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"validPosition\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"pollExists\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"attrUUID\",\"outputs\":[{\"name\":\"UUID\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"requestVotingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"commitPeriodActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"didReveal\",\"outputs\":[{\"name\":\"revealed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"},{\"name\":\"_voteOption\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"revealVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getNumPassingTokens\",\"outputs\":[{\"name\":\"correctVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pollIDs\",\"type\":\"uint256[]\"}],\"name\":\"rescueTokensInMultiplePolls\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"getNumTokens\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"getCommitHash\",\"outputs\":[{\"name\":\"commitHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_terminationDate\",\"type\":\"uint256\"}],\"name\":\"isExpired\",\"outputs\":[{\"name\":\"expired\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"withdrawVotingRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"getTotalNumberOfTokensForLosingOption\",\"outputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pollID\",\"type\":\"uint256\"}],\"name\":\"pollEnded\",\"outputs\":[{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"telemetryAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_VoteCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votesFor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"_VoteRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voteQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commitEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revealEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"_PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_VotingRightsGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_VotingRightsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"_TokensRescued\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051604080611eb583398101604052805160209091015181600160a060020a038116151561003f57600080fd5b60058054600160a060020a031916600160a060020a03928316179055600080558116151561006c57600080fd5b60068054600160a060020a031916600160a060020a039290921691909117905550611e198061009c6000396000f3006080604052600436106101925763ffffffff60e060020a600035041663053e71a681146101975780632173a10f146101c15780632c052031146101d657806332ed3d60146101fd5780633b9302941461021b5780633ec36b991461023c57806340f41c1914610282578063427fa1d2146102b3578063441c77c0146102d457806349403183146103005780636148fed5146103185780636afa97a81461035b5780636b2d95d4146103825780636cbf9c5e146103a35780637f97e836146103c45780638090f92e146103e8578063819b02931461042057806388d21ff31461044a57806397508f36146104625780639760356014610477578063a1103f371461048f578063a25236fe146104b3578063a4439dc5146104cb578063aa7ca464146104e3578063b11d8bb814610507578063b43bd06914610525578063bb11ed7e1461054c578063d1382092146105a1578063d901402b146105c5578063d9548e53146105e9578063e7b1d43c14610601578063e8cfa3f014610619578063ee68483014610631578063fc0c546a14610649575b600080fd5b3480156101a357600080fd5b506101af60043561065e565b60408051918252519081900360200190f35b3480156101cd57600080fd5b506101af6106b3565b3480156101e257600080fd5b506101af600160a060020a03600435166024356044356106b8565b34801561020957600080fd5b506101af600435602435604435610881565b34801561022757600080fd5b506101af600160a060020a036004351661095d565b34801561024857600080fd5b50610280602460048035828101929082013591813580830192908201359160443580830192908201359160643591820191013561096f565b005b34801561028e57600080fd5b50610297610a0f565b60408051600160a060020a039092168252519081900360200190f35b3480156102bf57600080fd5b506101af600160a060020a0360043516610a1e565b3480156102e057600080fd5b506102ec600435610ad8565b604080519115158252519081900360200190f35b34801561030c57600080fd5b506102ec600435610b23565b34801561032457600080fd5b50610330600435610ba0565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561036757600080fd5b506101af600160a060020a0360043516602435604435610bce565b34801561038e57600080fd5b506101af600160a060020a0360043516610c85565b3480156103af57600080fd5b50610280600435602435604435606435610c99565b3480156103d057600080fd5b506102ec600160a060020a036004351660243561120b565b3480156103f457600080fd5b506102806024600480358281019290820135918135808301929082013591604435918201910135611250565b34801561042c57600080fd5b506102ec600435602435600160a060020a03604435166064356112cc565b34801561045657600080fd5b506102ec60043561130a565b34801561046e57600080fd5b506101af61131f565b34801561048357600080fd5b50610280600435611325565b34801561049b57600080fd5b506101af600160a060020a03600435166024356114c9565b3480156104bf57600080fd5b50610280600435611500565b3480156104d757600080fd5b506102ec60043561159a565b3480156104ef57600080fd5b506102ec600160a060020a03600435166024356115c8565b34801561051357600080fd5b5061028060043560243560443561160d565b34801561053157600080fd5b506101af600160a060020a0360043516602435604435611810565b34801561055857600080fd5b50604080516020600480358082013583810280860185019096528085526102809536959394602494938501929182918501908490808284375094975061189c9650505050505050565b3480156105ad57600080fd5b506101af600160a060020a03600435166024356118d4565b3480156105d157600080fd5b506101af600160a060020a03600435166024356119a6565b3480156105f557600080fd5b506102ec600435611a45565b34801561060d57600080fd5b50610280600435611a4a565b34801561062557600080fd5b506101af600435611b76565b34801561063d57600080fd5b506102ec600435611bca565b34801561065557600080fd5b50610297611bfc565b600061066982611bca565b151561067457600080fd5b61067d82610b23565b1561069a57506000818152600160205260409020600301546106ae565b506000818152600160205260409020600401545b919050565b600081565b60008060006106c686610a1e565b91506106d286836118d4565b90505b8115610874576106e586836118d4565b90508481116107b757838214156107af57600160a060020a03861660009081526003602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173739f1745e415782861373c5ff1a6dc56d2d41451926330fe0a0a926044808301939192829003018186803b15801561078057600080fd5b505af4158015610794573d6000803e3d6000fd5b505050506040513d60208110156107aa57600080fd5b505191505b819250610878565b600160a060020a03861660009081526003602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173739f1745e415782861373c5ff1a6dc56d2d41451926330fe0a0a926044808301939192829003018186803b15801561084157600080fd5b505af4158015610855573d6000803e3d6000fd5b505050506040513d602081101561086b57600080fd5b505191506106d5565b8192505b50509392505050565b600080546001018155808061089c428663ffffffff611c0b16565b91506108ae828563ffffffff611c0b16565b6040805160a08101825284815260208082018481528284018b8152600060608086018281526080870183815283548452600180885289852098518955955195880195909555925160028701559151600386015591516004909401939093555483518b8152918201879052818401859052925193945033937f404f1f1c229d9eb2a949e7584da6ffde9d059ef2169f487ca815434cce0640d0929181900390910190a35050600054949350505050565b60026020526000908152604090205481565b600087861461097d57600080fd5b87841461098957600080fd5b87821461099557600080fd5b5060005b87811015610a04576109fc8989838181106109b057fe5b9050602002013588888481811015156109c557fe5b602002919091013590508787858181106109db57fe5b9050602002013586868681811015156109f057fe5b90506020020135610c99565b600101610999565b505050505050505050565b600654600160a060020a031681565b600160a060020a038116600090815260036020908152604080832081517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173739f1745e415782861373c5ff1a6dc56d2d41451926330fe0a0a9260448082019391829003018186803b158015610aa657600080fd5b505af4158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b505192915050565b6000610ae38261130a565b1515610aee57600080fd5b60008281526001602081905260409091200154610b0a90611a45565b158015610b1d5750610b1b8261159a565b155b92915050565b6000610b2d611dbd565b610b3683611bca565b1515610b4157600080fd5b5050600090815260016020818152604092839020835160a0810185528154815292810154918301919091526002810154928201839052600381015460608301819052600490910154608090920182905290810190910260649091021190565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b600080600080610bdd86611bca565b1515610be857600080fd5b6000868152600160209081526040808320600160a060020a038b16845260060190915290205460ff161515610c1c57600080fd5b610c2586610b23565b610c30576001610c33565b60005b60ff1692508285604051808381526020018281526020019250505060405180910390209150610c6287876119a6565b9050818114610c7057600080fd5b610c7a87876118d4565b979650505050505050565b6000610b1d82610c9484610a1e565b6118d4565b6000806000610ca78761159a565b1515610cb257600080fd5b33600090815260026020526040902054851115610cf55733600090815260026020526040902054610cea90869063ffffffff611c1816565b9250610cf583611500565b33600090815260026020526040902054851115610d1157600080fd5b861515610d1d57600080fd5b851515610d2957600080fd5b831580610ddf57503360009081526003602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052915173739f1745e415782861373c5ff1a6dc56d2d414519263366a5ba2926044808301939192829003018186803b158015610db257600080fd5b505af4158015610dc6573d6000803e3d6000fd5b505050506040513d6020811015610ddc57600080fd5b50515b1515610dea57600080fd5b3360009081526003602090815260409182902082517f07d29ac9000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052915173739f1745e415782861373c5ff1a6dc56d2d41451926307d29ac9926044808301939192829003018186803b158015610e6b57600080fd5b505af4158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b5051915086821415610f51573360009081526003602090815260409182902082517f07d29ac90000000000000000000000000000000000000000000000000000000081526004810191909152602481018a9052915173739f1745e415782861373c5ff1a6dc56d2d41451926307d29ac9926044808301939192829003018186803b158015610f2257600080fd5b505af4158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b505191505b610f5d848333886112cc565b1515610f6857600080fd5b3360009081526003602052604080822081517f9735c51b000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052604481018a905260648101859052905173739f1745e415782861373c5ff1a6dc56d2d4145192639735c51b9260848082019391829003018186803b158015610ff357600080fd5b505af4158015611007573d6000803e3d6000fd5b5050505061101533886114c9565b604080517f977aa031000000000000000000000000000000000000000000000000000000008152600481810152602481018390526064810188905260806044820152600960848201527f6e756d546f6b656e73000000000000000000000000000000000000000000000060a4820152905191925073393e69e7ae7addcfd744b71d209b1f04800d89e59163977aa0319160c480820192600092909190829003018186803b1580156110c557600080fd5b505af41580156110d9573d6000803e3d6000fd5b5050604080517f977aa03100000000000000000000000000000000000000000000000000000000815260048181015260248101859052606481018a905260806044820152600a60848201527f636f6d6d6974486173680000000000000000000000000000000000000000000060a4820152905173393e69e7ae7addcfd744b71d209b1f04800d89e5935063977aa031925060c4808301926000929190829003018186803b15801561118957600080fd5b505af415801561119d573d6000803e3d6000fd5b5050506000888152600160208181526040808420338086526005909101835293819020805460ff1916909317909255815189815291519293508a927fea7979e4280d7e6bffc1c7d83a1ac99f16d02ecc14465ce41016226783b663d79281900390910190a350505050505050565b60006112168261130a565b151561122157600080fd5b506000908152600160209081526040808320600160a060020a0394909416835260059093019052205460ff1690565b600085841461125e57600080fd5b85821461126a57600080fd5b5060005b858110156112c3576112bb87878381811061128557fe5b90506020020135868684818110151561129a57fe5b9050602002013585858581811015156112af57fe5b9050602002013561160d565b60010161126e565b50505050505050565b60008060006112db85886118d4565b84101591506112ea85876118d4565b841115806112f6575085155b9050818015610c7a57509695505050505050565b60008115801590610b1d575050600054101590565b60005481565b6000818152600160208190526040909120015461134190611a45565b151561134c57600080fd5b3360009081526003602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052915173739f1745e415782861373c5ff1a6dc56d2d414519263366a5ba2926044808301939192829003018186803b1580156113cd57600080fd5b505af41580156113e1573d6000803e3d6000fd5b505050506040513d60208110156113f757600080fd5b5051151561140457600080fd5b3360009081526003602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173739f1745e415782861373c5ff1a6dc56d2d4145192636d900ed09260448082019391829003018186803b15801561148157600080fd5b505af4158015611495573d6000803e3d6000fd5b50506040513392508391507f402507661c8c8cb90e0a796450b8bdd28b6c516f05279c0cd29e84c344e1699a90600090a350565b604080516c01000000000000000000000000600160a060020a03851602815260148101839052905190819003603401902092915050565b61150981611c2a565b600654336000818152600260205260408082205481517f725248730000000000000000000000000000000000000000000000000000000081526004810194909452602484015251600160a060020a0390931692637252487392604480820193929182900301818387803b15801561157f57600080fd5b505af1158015611593573d6000803e3d6000fd5b5050505050565b60006115a58261130a565b15156115b057600080fd5b600082815260016020526040902054610b1b90611a45565b60006115d38261130a565b15156115de57600080fd5b506000908152600160209081526040808320600160a060020a0394909416835260069093019052205460ff1690565b600061161884610ad8565b151561162357600080fd5b600084815260016020908152604080832033845260050190915290205460ff16151561164e57600080fd5b600084815260016020908152604080832033845260060190915290205460ff161561167857600080fd5b61168233856119a6565b60408051858152602081018590528151908190039091019020146116a557600080fd5b6116af33856118d4565b905082600114156116d65760008481526001602052604090206003018054820190556116ee565b60008481526001602052604090206004018054820190555b3360009081526003602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052905173739f1745e415782861373c5ff1a6dc56d2d4145192636d900ed09260448082019391829003018186803b15801561176b57600080fd5b505af415801561177f573d6000803e3d6000fd5b505050600085815260016020818152604080842033808652600682018452828620805460ff191686179055948a9052928252600383015460049093015481518781529283019390935281810192909252606081018690529051919250859187917f9b19aaec524fad29c0ced9b9973a15e3045d7c3be156d71394ab40f0d5f119ff919081900360800190a450505050565b60008060008061181f86611bca565b151561182a57600080fd5b6000868152600160209081526040808320600160a060020a038b16845260060190915290205460ff16151561185e57600080fd5b61186786610b23565b611872576000610c33565b6040805160018082526020820188905282519182900390920190209093509150610c6287876119a6565b60005b81518110156118d0576118c882828151811015156118b957fe5b90602001906020020151611325565b60010161189f565b5050565b600073393e69e7ae7addcfd744b71d209b1f04800d89e56350389f5c60046118fc86866114c9565b6040805160e060020a63ffffffff86160281526004810193909352602483019190915260606044830152600960648301527f6e756d546f6b656e73000000000000000000000000000000000000000000000060848301525160a4808301926020929190829003018186803b15801561197357600080fd5b505af4158015611987573d6000803e3d6000fd5b505050506040513d602081101561199d57600080fd5b50519392505050565b600073393e69e7ae7addcfd744b71d209b1f04800d89e56350389f5c60046119ce86866114c9565b6040805160e060020a63ffffffff86160281526004810193909352602483019190915260606044830152600a60648301527f636f6d6d6974486173680000000000000000000000000000000000000000000060848301525160a4808301926020929190829003018186803b15801561197357600080fd5b421190565b6000611a74611a5833610c85565b336000908152600260205260409020549063ffffffff611c1816565b905081811015611a8357600080fd5b3360008181526002602090815260408083208054879003905560055481517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810195909552602485018790529051600160a060020a039091169363a9059cbb9360448083019493928390030190829087803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b505050506040513d6020811015611b2f57600080fd5b50511515611b3c57600080fd5b60408051838152905133917ffaeb7dbb9992397d26ea1944efd40c80b40f702faf69b46c67ad10aba68ccb79919081900360200190a25050565b6000611b8182611bca565b1515611b8c57600080fd5b611b9582610b23565b15611bb257506000818152600160205260409020600401546106ae565b506000818152600160205260409020600301546106ae565b6000611bd58261130a565b1515611be057600080fd5b60008281526001602081905260409091200154610b1d90611a45565b600554600160a060020a031681565b81810182811015610b1d57fe5b600082821115611c2457fe5b50900390565b600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b158015611c8f57600080fd5b505af1158015611ca3573d6000803e3d6000fd5b505050506040513d6020811015611cb957600080fd5b50511015611cc657600080fd5b33600081815260026020908152604080832080548601905560055481517f23b872dd0000000000000000000000000000000000000000000000000000000081526004810195909552306024860152604485018690529051600160a060020a03909116936323b872dd9360648083019493928390030190829087803b158015611d4d57600080fd5b505af1158015611d61573d6000803e3d6000fd5b505050506040513d6020811015611d7757600080fd5b50511515611d8457600080fd5b60408051828152905133917ff7aaf024511d9982df8cd0d437c71c30106e6848cd1ba3d288d7a9c0e276aeda919081900360200190a250565b60a060405190810160405280600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820dfb0bd5ea70ad6f1df929d57bad9a8a3a61facd419e162e3168c26c446d29926002900000000000000000000000001fa555c97d7958fa6f771f3bbd5ccd508f81e220000000000000000000000006d3dc15e04dd1d8968556d02cf209a4fb4ab8736",
  "constructorArguments": "00000000000000000000000001fa555c97d7958fa6f771f3bbd5ccd508f81e220000000000000000000000006d3dc15e04dd1d8968556d02cf209a4fb4ab8736",
  "libraries": [
    {
      "name": "DLL",
      "address": "0x739f1745e415782861373c5ff1a6dc56d2d41451"
    },
    {
      "name": "AttributeStore",
      "address": "0x393e69e7ae7addcfd744b71d209b1f04800d89e5"
    }
  ]
}