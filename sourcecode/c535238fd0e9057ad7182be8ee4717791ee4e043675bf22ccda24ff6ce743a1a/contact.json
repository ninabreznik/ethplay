{
  "address": "0x599fedf78d6175a09bae86ba84630dab83df403b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MACHToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-08\n*/\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public;\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       revert();\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint);\n  function transferFrom(address from, address to, uint value) public;\n  function approve(address spender, uint value) public;\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) revert();\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) public {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/**\n * @title LimitedTransferToken\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token \n * transferability for different events. It is intended to be used as a base class for other token \n * contracts. \n * LimitedTransferToken has been designed to allow for different limiting factors,\n * this can be achieved by recursively calling super.transferableTokens() until the base class is \n * hit. For example:\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\n *     }\n * A working example is VestedToken.sol:\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n */\n\ncontract LimitedTransferToken is ERC20 {\n\n  /**\n   * @dev Checks whether it can transfer or otherwise throws.\n   */\n  modifier canTransfer(address _sender, uint _value) {\n   if (_value > transferableTokens(_sender, uint64(now))) revert();\n   _;\n  }\n\n  /**\n   * @dev Checks modifier and allows transfer if tokens are not locked.\n   * @param _to The address that will recieve the tokens.\n   * @param _value The amount of tokens to be transferred.\n   */\n  function transfer(address _to, uint _value) public canTransfer(msg.sender, _value) {\n    super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Checks modifier and allows transfer if tokens are not locked.\n  * @param _from The address that will send the tokens.\n  * @param _to The address that will recieve the tokens.\n  * @param _value The amount of tokens to be transferred.\n  */\n  function transferFrom(address _from, address _to, uint _value) public canTransfer(_from, _value) {\n    super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the \n   * specific logic for limiting token transferability for a holder over time.\n   */\n  function transferableTokens(address holder, uint64 /* time */) constant public returns (uint256) {\n    return balanceOf(holder);\n  }\n}\n\n\n/**\n * @title Vested token\n * @dev Tokens that can be vested for a group of addresses.\n */\ncontract VestedToken is StandardToken, LimitedTransferToken {\n\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n\n  struct TokenGrant {\n    address granter;     // 20 bytes\n    uint256 value;       // 32 bytes\n    uint64 cliff;\n    uint64 vesting;\n    uint64 start;        // 3 * 8 = 24 bytes\n    bool revokable;\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n  mapping (address => TokenGrant[]) public grants;\n\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n\n  /**\n   * @dev Grant tokens to a specified address\n   * @param _to address The address which the tokens will be granted to.\n   * @param _value uint256 The amount of tokens to be granted.\n   * @param _start uint64 Time of the beginning of the grant.\n   * @param _cliff uint64 Time of the cliff period.\n   * @param _vesting uint64 The vesting period.\n   */\n  function grantVestedTokens(\n    address _to,\n    uint256 _value,\n    uint64 _start,\n    uint64 _cliff,\n    uint64 _vesting,\n    bool _revokable,\n    bool _burnsOnRevoke\n  ) public {\n\n    // Check for date inconsistencies that may cause unexpected behavior\n    if (_cliff < _start || _vesting < _cliff) {\n      revert();\n    }\n\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) revert();   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n    uint count = grants[_to].push(\n                TokenGrant(\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n                  _value,\n                  _cliff,\n                  _vesting,\n                  _start,\n                  _revokable,\n                  _burnsOnRevoke\n                )\n              );\n\n    transfer(_to, _value);\n\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\n  }\n\n  /**\n   * @dev Revoke the grant of tokens of a specifed address.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   */\n  function revokeTokenGrant(address _holder, uint _grantId) public {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    if (!grant.revokable) { // Check if grant was revokable\n      revert();\n    }\n\n    if (grant.granter != msg.sender) { // Only granter can revoke it\n      revert();\n    }\n\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n\n    // remove grant from array\n    delete grants[_holder][_grantId];\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n    grants[_holder].length -= 1;\n\n    balances[receiver] = balances[receiver].add(nonVested);\n    balances[_holder] = balances[_holder].sub(nonVested);\n\n    Transfer(_holder, receiver, nonVested);\n  }\n\n\n  /**\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n   * @param holder address The address of the holder\n   * @param time uint64 The specific time.\n   * @return An uint representing a holder&#39;s total amount of transferable tokens.\n   */\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n    uint256 grantIndex = tokenGrantsCount(holder);\n\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n\n    // Iterate through all the grants the holder has, and add all non-vested tokens\n    uint256 nonVested = 0;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n    }\n\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n\n    // Return the minimum of how many vested can transfer and other value\n    // in case there are other limiting transferability factors (default is balanceOf)\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\n  }\n\n  /**\n   * @dev Check the amount of grants that an address has.\n   * @param _holder The holder of the grants.\n   * @return A uint representing the total amount of grants.\n   */\n  function tokenGrantsCount(address _holder) public constant returns (uint index) {\n    return grants[_holder].length;\n  }\n\n  /**\n   * @dev Calculate amount of vested tokens at a specifc time.\n   * @param tokens uint256 The amount of tokens grantted.\n   * @param time uint64 The time to be checked\n   * @param start uint64 A time representing the begining of the grant\n   * @param cliff uint64 The cliff period.\n   * @param vesting uint64 The vesting period.\n   * @return An uint representing the amount of vested tokensof a specif grant.\n   *  transferableTokens\n   *   |                         _/--------   vestedTokens rect\n   *   |                       _/\n   *   |                     _/\n   *   |                   _/\n   *   |                 _/\n   *   |                /\n   *   |              .|\n   *   |            .  |\n   *   |          .    |\n   *   |        .      |\n   *   |      .        |\n   *   |    .          |\n   *   +===+===========+---------+----------> time\n   *      Start       Clift    Vesting\n   */\n  function calculateVestedTokens(\n    uint256 tokens,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) public pure returns (uint256)\n    {\n      // Shortcuts for before cliff and after vesting cases.\n      if (time < cliff) return 0;\n      if (time >= vesting) return tokens;\n\n      // Interpolate all vested tokens.\n      // As before cliff the shortcut returns 0, we can use just calculate a value\n      // in the vesting rect (as shown in above&#39;s figure)\n\n      // vestedTokens = tokens * (time - start) / (vesting - start)\n      uint256 vestedTokens = SafeMath.div(\n                                    SafeMath.mul(\n                                      tokens,\n                                      SafeMath.sub(time, start)\n                                      ),\n                                    SafeMath.sub(vesting, start)\n                                    );\n\n      return vestedTokens;\n  }\n\n  /**\n   * @dev Get all information about a specifc grant.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n   */\n  function tokenGrant(address _holder, uint _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    granter = grant.granter;\n    value = grant.value;\n    start = grant.start;\n    cliff = grant.cliff;\n    vesting = grant.vesting;\n    revokable = grant.revokable;\n    burnsOnRevoke = grant.burnsOnRevoke;\n\n    vested = vestedTokens(grant, uint64(now));\n  }\n\n  /**\n   * @dev Get the amount of vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time The time to be checked\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\n   */\n  function vestedTokens(TokenGrant grant, uint64 time) private pure returns (uint256) {\n    return calculateVestedTokens(\n      grant.value,\n      uint256(time),\n      uint256(grant.start),\n      uint256(grant.cliff),\n      uint256(grant.vesting)\n    );\n  }\n\n  /**\n   * @dev Calculate the amount of non vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time uint64 The time to be checked\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the \n   * passed time frame.\n   */\n  function nonVestedTokens(TokenGrant grant, uint64 time) private pure returns (uint256) {\n    return grant.value.sub(vestedTokens(grant, time));\n  }\n\n  /**\n   * @dev Calculate the date when the holder can trasfer all its tokens\n   * @param holder address The address of the holder\n   * @return An uint representing the date of the last transferable tokens.\n   */\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n    date = uint64(now);\n    uint256 grantIndex = grants[holder].length;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      date = SafeMath.max64(grants[holder][i].vesting, date);\n    }\n  }\n}\n\n// QUESTIONS FOR AUDITORS:\n// - Considering we inherit from VestedToken, how much does that hit at our gas price?\n\n// vesting: 365 days, 365 days / 1 vesting\n\n\ncontract MACHToken is VestedToken {\n  //FIELDS\n  string public name = \"Machdary\";\n  string public symbol = \"MACH\";\n  uint public decimals = 18;\n  uint public INITIAL_SUPPLY = 990000000 * 1 ether;\n\n  // Initialization contract grants msg.sender all of existing tokens.\n  function MACHToken() public {\n    totalSupply = INITIAL_SUPPLY;\n\n    address toAddress = msg.sender;\n    balances[toAddress] = totalSupply;\n    grantVestedTokens(toAddress, totalSupply.div(100).mul(60), uint64(now), uint64(now), uint64(now), false, false);\n    grantVestedTokens(toAddress, totalSupply.div(100).mul(25), uint64(now), uint64(now) + 91 days , uint64(now) + 91 days, false, false);\n    grantVestedTokens(toAddress, totalSupply.div(100).mul(15), uint64(now), uint64(now) + 365 days , uint64(now) + 365 days, false, false);\n  }\n\n  // Transfer amount of tokens from sender account to recipient.\n  function transfer(address _to, uint _value) public {\n    if (_to == msg.sender) return; // no-op, allow even during crowdsale, in order to work around using grantVestedTokens() while in crowdsale\n    super.transfer(_to, _value);\n  }\n\n  // Transfer amount of tokens from a specified address to a recipient.\n  // Transfer amount of tokens from sender account to recipient.\n  function transferFrom(address _from, address _to, uint _value) public {\n    super.transferFrom(_from, _to, _value);\n  }\n\n}",
  "bytecode": "6060604052601460035560408051908101604052600881527f4d616368646172790000000000000000000000000000000000000000000000006020820152600590805162000052929160200190620009e1565b5060408051908101604052600481527f4d41434800000000000000000000000000000000000000000000000000000000602082015260069080516200009c929160200190620009e1565b5060126007556b0332e8a789bc7ef49e0000006008553415620000be57600080fd5b600854600081815533600160a060020a038116825260016020526040909120829055906200013a9082906200012090603c906200010b906064640100000000620001e28102620012eb1704565b90640100000000620012c7620001fa82021704565b428080600080640100000000620009006200022882021704565b6200018a816200016b60196200010b6064600054620001e264010000000002620012eb179091906401000000009004565b426277f880810180600080640100000000620009006200022882021704565b620001db81620001bb600f6200010b6064600054620001e264010000000002620012eb179091906401000000009004565b426301e13380810180600080640100000000620009006200022882021704565b5062000b12565b6000808284811515620001f157fe5b04949350505050565b60008282028315806200021857508284828115156200021557fe5b04145b15156200022157fe5b9392505050565b6000856001604060020a0316856001604060020a031610806200025c5750846001604060020a0316846001604060020a0316105b156200026757600080fd5b6003546200028389640100000000620004a6620004c382021704565b11156200028f57600080fd5b600160a060020a0388166000908152600460205260409020805460018101620002b9838262000a66565b9160005260206000209060030201600060e06040519081016040528087620002e3576000620002e5565b335b600160a060020a03168152602081018c90526001604060020a03808b16604083015289811660608301528b16608082015287151560a082015286151560c09091015291905081518154600160a060020a031916600160a060020a039190911617815560208201518160010155604082015160028201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160020160086101000a8154816001604060020a0302191690836001604060020a0316021790555060808201518160020160106101000a8154816001604060020a0302191690836001604060020a0316021790555060a082015160028201805491151578010000000000000000000000000000000000000000000000000260c060020a60ff021990921691909117905560c0820151600290910180549115157901000000000000000000000000000000000000000000000000000260c860020a60ff021990921691909117905550905062000468888864010000000062000b85620004de82021704565b87600160a060020a031633600160a060020a03167ff9565aecd648a0466ffb964a79eeccdf1120ad6276189c687a6e9fe73984d9bb896001850360405191825260208201526040908101905180910390a35050505050505050565b600160a060020a031660009081526004602052604090205490565b33600160a060020a031682600160a060020a03161415620004ff5762000519565b620005198282640100000000620012446200051d82021704565b5050565b338162000539824264010000000062000bb26200056682021704565b8111156200054657600080fd5b620005608484640100000000620014236200076782021704565b50505050565b6000808080806200058587640100000000620004a6620004c382021704565b9350831515620005b057620005a8876401000000006200087a6200084782021704565b94506200075d565b60009250600091505b83821015620006f357600160a060020a03871660009081526004602052604090208054620006e5918591620006d1919086908110620005f457fe5b906000526020600020906003020160e060405190810160409081528254600160a060020a03168252600183015460208301526002909201546001604060020a0380821693830193909352680100000000000000008104831660608301527001000000000000000000000000000000008104909216608082015260ff780100000000000000000000000000000000000000000000000083048116151560a0830152790100000000000000000000000000000000000000000000000000909204909116151560c0820152896401000000006200126c6200086282021704565b6401000000006200128c6200089c82021704565b9250600190910190620005b9565b6200072562000710886401000000006200087a6200084782021704565b846401000000006200129b620008ac82021704565b90506200075a81620007468989640100000000620012ad620008bf82021704565b640100000000620012b8620008da82021704565b94505b5050505092915050565b604060443610156200077857600080fd5b600160a060020a033316600090815260016020526040902054620007ab90836401000000006200129b620008ac82021704565b600160a060020a033381166000908152600160205260408082209390935590851681522054620007ea90836401000000006200128c6200089c82021704565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050565b600160a060020a031660009081526001602052604090205490565b600062000221620008828484640100000000620011cb620008f282021704565b8460200151906401000000006200129b620008ac82021704565b6000828201838110156200022157fe5b600082821115620008b957fe5b50900390565b600062000221836401000000006200087a6200084782021704565b6000818310620008eb578162000221565b5090919050565b6000620002218360200151836001604060020a031685608001516001604060020a031686604001516001604060020a031687606001516001604060020a031664010000000062000d246200094582021704565b600080838610156200095b5760009150620009d7565b8286106200096c57869150620009d7565b620009d1620009a3886200098f89896401000000006200129b620008ac82021704565b640100000000620012c7620001fa82021704565b620009bd85886401000000006200129b620008ac82021704565b640100000000620012eb620001e282021704565b90508091505b5095945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2457805160ff191683800117855562000a54565b8280016001018555821562000a54579182015b8281111562000a5457825182559160200191906001019062000a37565b5062000a6292915062000a9a565b5090565b81548183558181151162000a955760030281600302836000526020600020918201910162000a95919062000aba565b505050565b62000ab791905b8082111562000a62576000815560010162000aa1565b90565b62000ab791905b8082111562000a62578054600160a060020a0319168155600060018201556002810180547fffffffffffff000000000000000000000000000000000000000000000000000016905560030162000ac1565b6115a28062000b226000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302a72a4c811461010057806306fdde0314610131578063095ea7b3146101bb57806318160ddd146101df57806323b872dd146101f25780632c71e60a1461021a5780632ff2e9dc14610295578063313ce567146102a8578063600e85b7146102bb5780636c182e991461033c57806370a082311461037857806395d89b41146103975780639754a4d9146103aa578063a9059cbb146103ef578063d347c20514610411578063dd62ed3e1461043d578063df3c211b14610462578063eb944e4c14610484575b600080fd5b341561010b57600080fd5b61011f600160a060020a03600435166104a6565b60405190815260200160405180910390f35b341561013c57600080fd5b6101446104c1565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610180578082015183820152602001610168565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101dd600160a060020a036004351660243561055f565b005b34156101ea57600080fd5b61011f610600565b34156101fd57600080fd5b6101dd600160a060020a0360043581169060243516604435610606565b341561022557600080fd5b61023c600160a060020a0360043516602435610616565b604051600160a060020a039097168752602087019590955267ffffffffffffffff93841660408088019190915292841660608701529216608085015290151560a084015290151560c083015260e0909101905180910390f35b34156102a057600080fd5b61011f61069a565b34156102b357600080fd5b61011f6106a0565b34156102c657600080fd5b6102dd600160a060020a03600435166024356106a6565b604051600160a060020a039098168852602088019690965260408088019590955267ffffffffffffffff9384166060880152918316608087015290911660a0850152151560c084015290151560e0830152610100909101905180910390f35b341561034757600080fd5b61035b600160a060020a03600435166107f0565b60405167ffffffffffffffff909116815260200160405180910390f35b341561038357600080fd5b61011f600160a060020a036004351661087a565b34156103a257600080fd5b610144610895565b34156103b557600080fd5b6101dd600160a060020a036004351660243567ffffffffffffffff6044358116906064358116906084351660a435151560c4351515610900565b34156103fa57600080fd5b6101dd600160a060020a0360043516602435610b85565b341561041c57600080fd5b61011f600160a060020a036004351667ffffffffffffffff60243516610bb2565b341561044857600080fd5b61011f600160a060020a0360043581169060243516610cf9565b341561046d57600080fd5b61011f600435602435604435606435608435610d24565b341561048f57600080fd5b6101dd600160a060020a0360043516602435610d7c565b600160a060020a031660009081526004602052604090205490565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b505050505081565b80158015906105925750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b1561059c57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b60005481565b6106118383836111a1565b505050565b60046020528160005260406000208181548110151561063157fe5b6000918252602090912060039091020180546001820154600290920154600160a060020a03909116935090915067ffffffffffffffff80821691680100000000000000008104821691608060020a8204169060ff60c060020a820481169160c860020a90041687565b60085481565b60075481565b6000806000806000806000806000600460008c600160a060020a0316600160a060020a031681526020019081526020016000208a8154811015156106e657fe5b60009182526020909120600390910201805460018201546002830154600160a060020a039092169b50995067ffffffffffffffff608060020a820481169850808216975068010000000000000000820416955060ff60c060020a82048116955060c860020a90910416925090506107e08160e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c0820152426111cb565b9650509295985092959890939650565b600160a060020a03811660009081526004602052604081205442915b8181101561087357600160a060020a0384166000908152600460205260409020805461086991908390811061083d57fe5b906000526020600020906003020160020160089054906101000a900467ffffffffffffffff1684611219565b925060010161080c565b5050919050565b600160a060020a031660009081526001602052604090205490565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105575780601f1061052c57610100808354040283529160200191610557565b60008567ffffffffffffffff168567ffffffffffffffff16108061093757508467ffffffffffffffff168467ffffffffffffffff16105b1561094157600080fd5b60035461094d896104a6565b111561095857600080fd5b600160a060020a038816600090815260046020526040902080546001810161098083826114ee565b9160005260206000209060030201600060e060405190810160405280876109a85760006109aa565b335b600160a060020a03168152602081018c905267ffffffffffffffff808b16604083015289811660608301528b16608082015287151560a082015286151560c0909101529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201518160010155604082015160028201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a082015160028201805491151560c060020a0278ff0000000000000000000000000000000000000000000000001990921691909117905560c08201516002909101805491151560c860020a0279ff0000000000000000000000000000000000000000000000000019909216919091179055509050610b2a8888610b85565b87600160a060020a031633600160a060020a03167ff9565aecd648a0466ffb964a79eeccdf1120ad6276189c687a6e9fe73984d9bb896001850360405191825260208201526040908101905180910390a35050505050505050565b33600160a060020a031682600160a060020a03161415610ba457610bae565b610bae8282611244565b5050565b6000806000806000610bc3876104a6565b9350831515610bdc57610bd58761087a565b9450610cef565b60009250600091505b83821015610cc557600160a060020a03871660009081526004602052604090208054610cb8918591610cb3919086908110610c1c57fe5b906000526020600020906003020160e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c08201528961126c565b61128c565b9250600190910190610be5565b610cd7610cd18861087a565b8461129b565b9050610cec81610ce789896112ad565b6112b8565b94505b5050505092915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008083861015610d385760009150610d72565b828610610d4757869150610d72565b610d6c610d5d88610d58898961129b565b6112c7565b610d67858861129b565b6112eb565b90508091505b5095945050505050565b600160a060020a038216600090815260046020526040812080548291829185908110610da457fe5b906000526020600020906003020192508260020160189054906101000a900460ff161515610dd157600080fd5b825433600160a060020a03908116911614610deb57600080fd5b600283015460c860020a900460ff16610e045733610e08565b61dead5b9150610e978360e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c08201524261126c565b600160a060020a038616600090815260046020526040902080549192509085908110610ebf57fe5b600091825260208083206003909202909101805473ffffffffffffffffffffffffffffffffffffffff1916815560018082018490556002909101805479ffffffffffffffffffffffffffffffffffffffffffffffffffff19169055600160a060020a03881683526004909152604090912080549091610f44919063ffffffff61129b16565b81548110610f4e57fe5b90600052602060002090600302016004600087600160a060020a0316600160a060020a0316815260200190815260200160002085815481101515610f8e57fe5b600091825260208083208454600390930201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03938416178155600180860154908201556002948501805495909101805467ffffffffffffffff191667ffffffffffffffff96871617808255825468010000000000000000908190048816026fffffffffffffffff000000000000000019909116178082558254608060020a9081900490971690960277ffffffffffffffff000000000000000000000000000000001990961695909517808655815460ff60c060020a918290048116151590910278ff0000000000000000000000000000000000000000000000001990921691909117808755915460c860020a9081900490911615150279ff00000000000000000000000000000000000000000000000000199091161790935587168152600490915260409020805460001901906110e590826114ee565b50600160a060020a03821660009081526001602052604090205461110f908263ffffffff61128c16565b600160a060020a038084166000908152600160205260408082209390935590871681522054611144908263ffffffff61129b16565b600160a060020a038087166000818152600160205260409081902093909355908416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505050565b82816111ad8242610bb2565b8111156111b957600080fd5b6111c4858585611302565b5050505050565b600061121283602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff16610d24565b9392505050565b60008167ffffffffffffffff168367ffffffffffffffff16101561123d5781611212565b5090919050565b33816112508242610bb2565b81111561125c57600080fd5b6112668484611423565b50505050565b600061121261127b84846111cb565b84602001519063ffffffff61129b16565b60008282018381101561121257fe5b6000828211156112a757fe5b50900390565b60006112128361087a565b600081831061123d5781611212565b60008282028315806112e357508284828115156112e057fe5b04145b151561121257fe5b60008082848115156112f957fe5b04949350505050565b60006060606436101561131457600080fd5b600160a060020a03808616600090815260026020908152604080832033851684528252808320549388168352600190915290205490925061135b908463ffffffff61128c16565b600160a060020a038086166000908152600160205260408082209390935590871681522054611390908463ffffffff61129b16565b600160a060020a0386166000908152600160205260409020556113b9828463ffffffff61129b16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35050505050565b6040604436101561143357600080fd5b600160a060020a03331660009081526001602052604090205461145c908363ffffffff61129b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611491908363ffffffff61128c16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050565b81548183558181151161061157600083815260209020610611916115739160039182028101918502015b8082111561156f57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182015560028101805479ffffffffffffffffffffffffffffffffffffffffffffffffffff19169055600301611518565b5090565b905600a165627a7a72305820b4c8d2a5f1922a8775c47334444c84220d271cf550bb210b9c0ed097fa15a0460029"
}