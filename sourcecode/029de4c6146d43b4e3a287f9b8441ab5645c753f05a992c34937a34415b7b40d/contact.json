{
  "address": "0x51397c286a6399b4dd1fb8c221be94562d6951cb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QuantstampAuditTokenEscrow",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-31\n*/\n\npragma solidity 0.4.25;\n\n// File: contracts/LinkedListLib.sol\n\n/**\n * @title LinkedListLib\n * @author Darryl Morris (o0ragman0o) and Modular.network\n *\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\n * into the Modular-Network ethereum-libraries repo at https://github.com/Modular-Network/ethereum-libraries\n * It has been updated to add additional functionality and be more compatible with solidity 0.4.18\n * coding patterns.\n *\n * version 1.1.1\n * Copyright (c) 2017 Modular Inc.\n * The MIT License (MIT)\n * https://github.com/Modular-network/ethereum-libraries/blob/master/LICENSE\n *\n * The LinkedListLib provides functionality for implementing data indexing using\n * a circlular linked list\n *\n * Modular provides smart contract services and security reviews for contract\n * deployments in addition to working on open source projects in the Ethereum\n * community. Our purpose is to test, document, and deploy reusable code onto the\n * blockchain and improve both security and usability. We also educate non-profits,\n * schools, and other community members about the application of blockchain\n * technology. For further information: modular.network\n *\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\nlibrary LinkedListLib {\n\n    uint256 constant NULL = 0;\n    uint256 constant HEAD = 0;\n    bool constant PREV = false;\n    bool constant NEXT = true;\n\n    struct LinkedList{\n        mapping (uint256 => mapping (bool => uint256)) list;\n    }\n\n    /// @dev returns true if the list exists\n    /// @param self stored linked list from contract\n    function listExists(LinkedList storage self)\n        public\n        view returns (bool)\n    {\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n        if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev returns true if the node exists\n    /// @param self stored linked list from contract\n    /// @param _node a node to search for\n    function nodeExists(LinkedList storage self, uint256 _node)\n        public\n        view returns (bool)\n    {\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n            if (self.list[HEAD][NEXT] == _node) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /// @dev Returns the number of elements in the list\n    /// @param self stored linked list from contract\n    function sizeOf(LinkedList storage self) public view returns (uint256 numElements) {\n        bool exists;\n        uint256 i;\n        (exists,i) = getAdjacent(self, HEAD, NEXT);\n        while (i != HEAD) {\n            (exists,i) = getAdjacent(self, i, NEXT);\n            numElements++;\n        }\n        return;\n    }\n\n    /// @dev Returns the links of a node as a tuple\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to get\n    function getNode(LinkedList storage self, uint256 _node)\n        public view returns (bool,uint256,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0,0);\n        } else {\n            return (true,self.list[_node][PREV], self.list[_node][NEXT]);\n        }\n    }\n\n    /// @dev Returns the link of a node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to step from\n    /// @param _direction direction to step in\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n        public view returns (bool,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0);\n        } else {\n            return (true,self.list[_node][_direction]);\n        }\n    }\n\n    /// @dev Can be used before `insert` to build an ordered list\n    /// @param self stored linked list from contract\n    /// @param _node an existing node to search from, e.g. HEAD.\n    /// @param _value value to seek\n    /// @param _direction direction to seek in\n    //  @return next first node beyond '_node' in direction `_direction`\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n        public view returns (uint256)\n    {\n        if (sizeOf(self) == 0) { return 0; }\n        require((_node == 0) || nodeExists(self,_node));\n        bool exists;\n        uint256 next;\n        (exists,next) = getAdjacent(self, _node, _direction);\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n        return next;\n    }\n\n    /// @dev Creates a bidirectional link between two nodes on direction `_direction`\n    /// @param self stored linked list from contract\n    /// @param _node first node for linking\n    /// @param _link  node to link to in the _direction\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) private  {\n        self.list[_link][!_direction] = _node;\n        self.list[_node][_direction] = _link;\n    }\n\n    /// @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node existing node\n    /// @param _new  new node to insert\n    /// @param _direction direction to insert node in\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n            uint256 c = self.list[_node][_direction];\n            createLink(self, _node, _new, _direction);\n            createLink(self, _new, c, _direction);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev removes an entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _node node to remove from the list\n    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n        if ((_node == NULL) || (!nodeExists(self,_node))) { return 0; }\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\n        delete self.list[_node][PREV];\n        delete self.list[_node][NEXT];\n        return _node;\n    }\n\n    /// @dev pushes an enrty to the head of the linked list\n    /// @param self stored linked list from contract\n    /// @param _node new entry to push to the head\n    /// @param _direction push to the head (NEXT) or tail (PREV)\n    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n        insert(self, HEAD, _node, _direction);\n    }\n\n    /// @dev pops the first entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _direction pop from the head (NEXT) or the tail (PREV)\n    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n        bool exists;\n        uint256 adj;\n\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\n\n        return remove(self, adj);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * @dev Supports unlimited numbers of roles and addresses.\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n *  for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n *  to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address addr, string roleName);\n  event RoleRemoved(address addr, string roleName);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param addr address\n   * @param roleName the name of the role\n   * // reverts\n   */\n  function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param addr address\n   * @param roleName the name of the role\n   * @return bool\n   */\n  function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param roleName the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param roleNames the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] roleNames) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\n  //         if (hasRole(msg.sender, roleNames[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * @dev This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    checkRole(msg.sender, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    addRole(addr, ROLE_WHITELISTED);\n    emit WhitelistedAddressAdded(addr);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address addr)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(addr, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      addAddressToWhitelist(addrs[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    removeRole(addr, ROLE_WHITELISTED);\n    emit WhitelistedAddressRemoved(addr);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      removeAddressFromWhitelist(addrs[i]);\n    }\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: contracts/token_escrow/TokenEscrow.sol\n\n/**\n * NOTE: All contracts in this directory were taken from a non-master branch of openzeppelin-solidity.\n * This contract was modified to be a whitelist.\n * Commit: ed451a8688d1fa7c927b27cec299a9726667d9b1\n */\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/**\n * @title TokenEscrow\n * @dev Holds tokens destinated to a payee until they withdraw them.\n * The contract that uses the TokenEscrow as its payment method\n * should be its owner, and provide public methods redirecting\n * to the TokenEscrow's deposit and withdraw.\n * Moreover, the TokenEscrow should also be allowed to transfer\n * tokens from the payer to itself.\n */\ncontract TokenEscrow is Ownable, Whitelist {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  event Deposited(address indexed payee, uint256 tokenAmount);\n  event Withdrawn(address indexed payee, uint256 tokenAmount);\n\n  mapping(address => uint256) public deposits;\n\n  ERC20 public token;\n\n  constructor (ERC20 _token) public {\n    require(_token != address(0));\n    token = _token;\n  }\n\n  function depositsOf(address _payee) public view returns (uint256) {\n    return deposits[_payee];\n  }\n\n  /**\n  * @dev Puts in escrow a certain amount of tokens as credit to be withdrawn.\n  * @param _payee The destination address of the tokens.\n  * @param _amount The amount of tokens to deposit in escrow.\n  */\n  function deposit(address _payee, uint256 _amount) public onlyWhitelisted {\n    deposits[_payee] = deposits[_payee].add(_amount);\n\n    token.safeTransferFrom(msg.sender, address(this), _amount);\n\n    emit Deposited(_payee, _amount);\n  }\n\n  /**\n  * @dev Withdraw accumulated tokens for a payee.\n  * @param _payee The address whose tokens will be withdrawn and transferred to.\n  */\n  function withdraw(address _payee) public onlyWhitelisted {\n    uint256 payment = deposits[_payee];\n    assert(token.balanceOf(address(this)) >= payment);\n\n    deposits[_payee] = 0;\n\n    token.safeTransfer(_payee, payment);\n\n    emit Withdrawn(_payee, payment);\n  }\n}\n\n// File: contracts/token_escrow/ConditionalTokenEscrow.sol\n\n/**\n * NOTE: All contracts in this directory were taken from a non-master branch of openzeppelin-solidity.\n * Commit: ed451a8688d1fa7c927b27cec299a9726667d9b1\n */\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ConditionalTokenEscrow\n * @dev Base abstract escrow to only allow withdrawal of tokens\n * if a condition is met.\n */\ncontract ConditionalTokenEscrow is TokenEscrow {\n  /**\n  * @dev Returns whether an address is allowed to withdraw their tokens.\n  * To be implemented by derived contracts.\n  * @param _payee The destination address of the tokens.\n  */\n  function withdrawalAllowed(address _payee) public view returns (bool);\n\n  function withdraw(address _payee) public {\n    require(withdrawalAllowed(_payee));\n    super.withdraw(_payee);\n  }\n}\n\n// File: contracts/QuantstampAuditTokenEscrow.sol\n\ncontract QuantstampAuditTokenEscrow is ConditionalTokenEscrow {\n\n  // the escrow maintains the list of staked addresses\n  using LinkedListLib for LinkedListLib.LinkedList;\n\n  // constants used by LinkedListLib\n  uint256 constant internal NULL = 0;\n  uint256 constant internal HEAD = 0;\n  bool constant internal PREV = false;\n  bool constant internal NEXT = true;\n\n  // maintain the number of staked nodes\n  // saves gas cost over needing to call stakedNodesList.sizeOf()\n  uint256 public stakedNodesCount = 0;\n\n  // the minimum amount of wei-QSP that must be staked in order to be a node\n  uint256 public minAuditStake = 10000 * (10 ** 18);\n\n  // if true, the payee cannot currently withdraw their funds\n  mapping(address => bool) public lockedFunds;\n\n  // if funds are locked, they may be retrieved after this block\n  // if funds are unlocked, the number should be ignored\n  mapping(address => uint256) public unlockBlockNumber;\n\n  // staked audit nodes -- needed to inquire about audit node statistics, such as min price\n  // this list contains all nodes that have *ANY* stake, however when getNextStakedNode is called,\n  // it skips nodes that do not meet the minimum stake.\n  // the reason for this approach is that if the owner lowers the minAuditStake,\n  // we must be aware of any node with a stake.\n  LinkedListLib.LinkedList internal stakedNodesList;\n\n  event Slashed(address addr, uint256 amount);\n  event StakedNodeAdded(address addr);\n  event StakedNodeRemoved(address addr);\n\n  // the constructor of TokenEscrow requires an ERC20, not an address\n  constructor(address tokenAddress) public TokenEscrow(ERC20(tokenAddress)) {} // solhint-disable no-empty-blocks\n\n  /**\n  * @dev Puts in escrow a certain amount of tokens as credit to be withdrawn.\n  *      Overrides the function in TokenEscrow.sol to add the payee to the staked list.\n  * @param _payee The destination address of the tokens.\n  * @param _amount The amount of tokens to deposit in escrow.\n  */\n  function deposit(address _payee, uint256 _amount) public onlyWhitelisted {\n    super.deposit(_payee, _amount);\n    if (_amount > 0) {\n      // fails gracefully if the node already exists\n      addNodeToStakedList(_payee);\n    }\n  }\n\n /**\n  * @dev Withdraw accumulated tokens for a payee.\n  *      Overrides the function in TokenEscrow.sol to remove the payee from the staked list.\n  * @param _payee The address whose tokens will be withdrawn and transferred to.\n  */\n  function withdraw(address _payee) public onlyWhitelisted {\n    super.withdraw(_payee);\n    removeNodeFromStakedList(_payee);\n  }\n\n  /**\n   * @dev Sets the minimum stake to a new value.\n   * @param _value The new value. _value must be greater than zero in order for the linked list to be maintained correctly.\n   */\n  function setMinAuditStake(uint256 _value) public onlyOwner {\n    require(_value > 0);\n    minAuditStake = _value;\n  }\n\n  /**\n   * @dev Returns true if the sender staked enough.\n   * @param addr The address to check.\n   */\n  function hasEnoughStake(address addr) public view returns(bool) {\n    return depositsOf(addr) >= minAuditStake;\n  }\n\n  /**\n   * @dev Overrides ConditionalTokenEscrow function. If true, funds may be withdrawn.\n   * @param _payee The address that wants to withdraw funds.\n   */\n  function withdrawalAllowed(address _payee) public view returns (bool) {\n    return !lockedFunds[_payee] || unlockBlockNumber[_payee] < block.number;\n  }\n\n  /**\n   * @dev Prevents the payee from withdrawing funds.\n   * @param _payee The address that will be locked.\n   */\n  function lockFunds(address _payee, uint256 _unlockBlockNumber) public onlyWhitelisted returns (bool) {\n    lockedFunds[_payee] = true;\n    unlockBlockNumber[_payee] = _unlockBlockNumber;\n    return true;\n  }\n\n    /**\n   * @dev Slash a percentage of the stake of an address.\n   *      The percentage is taken from the minAuditStake, not the total stake of the address.\n   *      The caller of this function receives the slashed QSP.\n   *      If the current stake does not cover the slash amount, the full stake is taken.\n   *\n   * @param addr The address that will be slashed.\n   * @param percentage The percent of the minAuditStake that should be slashed.\n   */\n  function slash(address addr, uint256 percentage) public onlyWhitelisted returns (uint256) {\n    require(0 <= percentage && percentage <= 100);\n\n    uint256 slashAmount = getSlashAmount(percentage);\n    uint256 balance = depositsOf(addr);\n    if (balance < slashAmount) {\n      slashAmount = balance;\n    }\n\n    // subtract from the deposits amount of the addr\n    deposits[addr] = deposits[addr].sub(slashAmount);\n\n    emit Slashed(addr, slashAmount);\n\n    // if the deposits of the address are now zero, remove from the list\n    if (depositsOf(addr) == 0) {\n      removeNodeFromStakedList(addr);\n    }\n\n    // transfer the slashAmount to the police contract\n    token.safeTransfer(msg.sender, slashAmount);\n\n    return slashAmount;\n  }\n\n  /**\n   * @dev Returns the slash amount for a given percentage.\n   * @param percentage The percent of the minAuditStake that should be slashed.\n   */\n  function getSlashAmount(uint256 percentage) public view returns (uint256) {\n    return (minAuditStake.mul(percentage)).div(100);\n  }\n\n  /**\n   * @dev Given a staked address, returns the next address from the list that meets the minAuditStake.\n   * @param addr The staked address.\n   * @return The next address in the list.\n   */\n  function getNextStakedNode(address addr) public view returns(address) {\n    bool exists;\n    uint256 next;\n    (exists, next) = stakedNodesList.getAdjacent(uint256(addr), NEXT);\n    // only return addresses that meet the minAuditStake\n    while (exists && next != HEAD && !hasEnoughStake(address(next))) {\n      (exists, next) = stakedNodesList.getAdjacent(next, NEXT);\n    }\n    return address(next);\n  }\n\n  /**\n   * @dev Adds an address to the stakedNodesList.\n   * @param addr The address to be added to the list.\n   * @return true if the address was added to the list.\n   */\n  function addNodeToStakedList(address addr) internal returns(bool success) {\n    if (stakedNodesList.insert(HEAD, uint256(addr), PREV)) {\n      stakedNodesCount++;\n      emit StakedNodeAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev Removes an address from the stakedNodesList.\n   * @param addr The address to be removed from the list.\n   * @return true if the address was removed from the list.\n   */\n  function removeNodeFromStakedList(address addr) internal returns(bool success) {\n    if (stakedNodesList.remove(uint256(addr)) != 0) {\n      stakedNodesCount--;\n      emit StakedNodeRemoved(addr);\n      success = true;\n    }\n  }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000099ea4db9ee77acd40b119bd1dc4e33e1c070b80d",
  "libraries": [
    {
      "name": "LinkedListLib",
      "address": "0x697E2033BA28C1cC9E28d94ca910cA53a978aaD0"
    }
  ]
}