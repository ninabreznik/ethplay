{
  "address": "0xe736091fc36f1ad476f5e4e03e4425940822d3ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SingularDTV: Fund",
  "contractName": "SingularDTVFund",
  "compilerVersion": "v0.3.5+commit.5f97274",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-10-05\n*/\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n\n/// @title Abstract token contract - Functions to be implemented by token contracts.\n/// @author Stefan George - <[email protected]>\ncontract Token {\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n    function totalSupply() constant returns (uint256 supply) {}\n    function balanceOf(address owner) constant returns (uint256 balance);\n    function transfer(address to, uint256 value) returns (bool success);\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\n    function approve(address spender, uint256 value) returns (bool success);\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract SingularDTVToken is Token {\n    function issueTokens(address _for, uint tokenCount) returns (bool);\n}\ncontract SingularDTVCrowdfunding {\n    function twoYearsPassed() returns (bool);\n    function startDate() returns (uint);\n    function CROWDFUNDING_PERIOD() returns (uint);\n    function TOKEN_TARGET() returns (uint);\n    function valuePerShare() returns (uint);\n    function fundBalance() returns (uint);\n    function campaignEndedSuccessfully() returns (bool);\n}\n\n\n/// @title Fund contract - Implements revenue distribution.\n/// @author Stefan George - <[email protected]>\ncontract SingularDTVFund {\n\n    /*\n     *  External contracts\n     */\n    SingularDTVToken public singularDTVToken;\n    SingularDTVCrowdfunding public singularDTVCrowdfunding;\n\n    /*\n     *  Storage\n     */\n    address public owner;\n    address constant public workshop = 0xc78310231aA53bD3D0FEA2F8c705C67730929D8f;\n    uint public totalRevenue;\n\n    // User's address => Revenue at time of withdraw\n    mapping (address => uint) public revenueAtTimeOfWithdraw;\n\n    // User's address => Revenue which can be withdrawn\n    mapping (address => uint) public owed;\n\n    /*\n     *  Modifiers\n     */\n    modifier noEther() {\n        if (msg.value > 0) {\n            throw;\n        }\n        _\n    }\n\n    modifier onlyOwner() {\n        // Only guard is allowed to do this action.\n        if (msg.sender != owner) {\n            throw;\n        }\n        _\n    }\n\n    modifier campaignEndedSuccessfully() {\n        if (!singularDTVCrowdfunding.campaignEndedSuccessfully()) {\n            throw;\n        }\n        _\n    }\n\n    /*\n     *  Contract functions\n     */\n    /// @dev Deposits revenue. Returns success.\n    function depositRevenue()\n        external\n        campaignEndedSuccessfully\n        returns (bool)\n    {\n        totalRevenue += msg.value;\n        return true;\n    }\n\n    /// @dev Withdraws revenue for user. Returns revenue.\n    /// @param forAddress user's address.\n    function calcRevenue(address forAddress) internal returns (uint) {\n        return singularDTVToken.balanceOf(forAddress) * (totalRevenue - revenueAtTimeOfWithdraw[forAddress]) / singularDTVToken.totalSupply();\n    }\n\n    /// @dev Withdraws revenue for user. Returns revenue.\n    function withdrawRevenue()\n        external\n        noEther\n        returns (uint)\n    {\n        uint value = calcRevenue(msg.sender) + owed[msg.sender];\n        revenueAtTimeOfWithdraw[msg.sender] = totalRevenue;\n        owed[msg.sender] = 0;\n        if (value > 0 && !msg.sender.send(value)) {\n            throw;\n        }\n        return value;\n    }\n\n    /// @dev Credits revenue to owed balance.\n    /// @param forAddress user's address.\n    function softWithdrawRevenueFor(address forAddress)\n        external\n        noEther\n        returns (uint)\n    {\n        uint value = calcRevenue(forAddress);\n        revenueAtTimeOfWithdraw[forAddress] = totalRevenue;\n        owed[forAddress] += value;\n        return value;\n    }\n\n    /// @dev Setup function sets external contracts' addresses.\n    /// @param singularDTVTokenAddress Token address.\n    function setup(address singularDTVCrowdfundingAddress, address singularDTVTokenAddress)\n        external\n        noEther\n        onlyOwner\n        returns (bool)\n    {\n        if (address(singularDTVCrowdfunding) == 0 && address(singularDTVToken) == 0) {\n            singularDTVCrowdfunding = SingularDTVCrowdfunding(singularDTVCrowdfundingAddress);\n            singularDTVToken = SingularDTVToken(singularDTVTokenAddress);\n            return true;\n        }\n        return false;\n    }\n\n    /// @dev Contract constructor function sets guard address.\n    function SingularDTVFund() noEther {\n        // Set owner address\n        owner = msg.sender;\n    }\n}",
  "bytecode": "606060405260003411156010576002565b60028054600160a060020a0319163317905561044e806100306000396000f36060604052361561008d5760e060020a60003504632d34ba79811461008f57806344e43cb8146100a85780634f573cb2146101105780635d0be9de14610125578063720c47981461013d5780637e77a2c01461015857806387efeeb6146101705780638da5cb5b14610182578063a9dc1d5414610194578063bf2d9e0b146101a6578063df18e047146101af575b005b6101c76004356024356000600034111561025857610002565b6101c76001547fdcf8113e000000000000000000000000000000000000000000000000000000006060908152600091600160a060020a03169063dcf8113e9060649060209060048187876161da5a03f115610002575050604051511515905061027357610002565b6101db60006000600034111561028157610002565b6101db60043560006000600034111561041357610002565b6101ed73c78310231aa53bd3d0fea2f8c705c67730929d8f81565b6101db60043560046020526000908152604090205481565b6101ed600054600160a060020a031681565b6101ed600254600160a060020a031681565b6101ed600154600160a060020a031681565b6101db60035481565b6101db60043560056020526000908152604090205481565b604080519115158252519081900360200190f35b60408051918252519081900360200190f35b600160a060020a03166060908152602090f35b600154600160a060020a03168114801561022357508054600160a060020a031681145b15610252576001805473ffffffffffffffffffffffffffffffffffffffff199081168517825582541683179091555b92915050565b60025433600160a060020a0390811691161461020057610002565b506003805434019055600190565b33600160a060020a03811682526005602052604082205490610380905b83547f18160ddd0000000000000000000000000000000000000000000000000000000060609081528591600160a060020a0316906318160ddd9060649060209060048187876161da5a03f115610002575050604080518051600160a060020a0386811680875260046020818152868920546003548a547f70a0823100000000000000000000000000000000000000000000000000000000895293880194909452965194975095909103949116926370a082319260248281019392829003018189876161da5a03f115610002575050506040518051906020015002049050919050565b0190506003600050546004600050600033600160a060020a031681526020019081526020016000206000508190555060006005600050600033600160a060020a0316815260200190815260200160002060005081905550600081118015610404575060405133600160a060020a031690600090839082818181858883f19350505050155b1561040e57610002565b919050565b61041c8361029e565b600354600160a060020a039094168352600460209081526040808520959095556005905292909120805483019055509056"
}