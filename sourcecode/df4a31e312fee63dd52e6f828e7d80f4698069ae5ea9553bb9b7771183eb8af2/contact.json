{
  "address": "0xe49b1cea729dc3468009f542fd650b0668a54b25",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOEarning",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INamePublicKey {\n\tfunction initialize(address _id, address _defaultKey, address _writerKey) external returns (bool);\n\n\tfunction isKeyExist(address _id, address _key) external view returns (bool);\n\n\tfunction getDefaultKey(address _id) external view returns (address);\n\n\tfunction whitelistAddKey(address _id, address _key) external returns (bool);\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\n\n\n\n\n/**\n * @title TAOCurrency\n */\ncontract TAOCurrency is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\t// To differentiate denomination of TAO Currency\n\tuint256 public powerOfTen;\n\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public balanceOf;\n\n\t// This generates a public event on the blockchain that will notify clients\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\n\t */\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\n\t\tname = _name;\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev transfer TAOCurrency from other address\n\t *\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\ninterface IAOIonLot {\n\tfunction createPrimordialLot(address _account, uint256 _primordialAmount, uint256 _multiplier, uint256 _networkBonusAmount) external returns (bytes32);\n\n\tfunction createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier) external returns (bytes32);\n\n\tfunction lotById(bytes32 _lotId) external view returns (bytes32, address, uint256, uint256);\n\n\tfunction totalLotsByAddress(address _lotOwner) external view returns (uint256);\n\n\tfunction createBurnLot(address _account, uint256 _amount, uint256 _multiplierAfterBurn) external returns (bool);\n\n\tfunction createConvertLot(address _account, uint256 _amount, uint256 _multiplierAfterConversion) external returns (bool);\n}\n\n\ninterface IAOPurchaseReceipt {\n\tfunction senderIsBuyer(bytes32 _purchaseReceiptId, address _sender) external view returns (bool);\n\n\tfunction getById(bytes32 _purchaseReceiptId) external view returns (bytes32, bytes32, bytes32, address, uint256, uint256, uint256, string memory, address, uint256);\n\n\tfunction isExist(bytes32 _purchaseReceiptId) external view returns (bool);\n}\n\n\ninterface IAOContentHost {\n\tfunction create(address _host, bytes32 _stakedContentId, string calldata _encChallenge, string calldata _contentDatKey, string calldata _metadataDatKey) external returns (bool);\n\n\tfunction getById(bytes32 _contentHostId) external view returns (bytes32, bytes32, address, string memory, string memory);\n\n\tfunction contentHostPrice(bytes32 _contentHostId) external view returns (uint256);\n\n\tfunction contentHostPaidByAO(bytes32 _contentHostId) external view returns (uint256);\n\n\tfunction isExist(bytes32 _contentHostId) external view returns (bool);\n}\n\n\ninterface IAOStakedContent {\n\tfunction getById(bytes32 _stakedContentId) external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool, uint256);\n\n\tfunction create(address _stakeOwner, bytes32 _contentId, uint256 _networkIntegerAmount, uint256 _networkFractionAmount, bytes8 _denomination, uint256 _primordialAmount, uint256 _profitPercentage) external returns (bytes32);\n\n\tfunction isActive(bytes32 _stakedContentId) external view returns (bool);\n}\n\n\ninterface IAOContent {\n\tfunction create(address _creator, string calldata _baseChallenge, uint256 _fileSize, bytes32 _contentUsageType, address _taoId) external returns (bytes32);\n\n\tfunction isAOContentUsageType(bytes32 _contentId) external view returns (bool);\n\n\tfunction getById(bytes32 _contentId) external view returns (address, uint256, bytes32, address, bytes32, uint8, bytes32, bytes32, string memory);\n\n\tfunction getBaseChallenge(bytes32 _contentId) external view returns (string memory);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface IAOEarning {\n\tfunction calculateEarning(bytes32 _purchaseReceiptId) external returns (bool);\n\n\tfunction releaseEarning(bytes32 _purchaseReceiptId) external returns (bool);\n\n\tfunction getTotalStakedContentEarning(bytes32 _stakedContentId) external view returns (uint256, uint256, uint256);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterface ionRecipient {\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\n/**\n * @title AOIonInterface\n */\ncontract AOIonInterface is TheAO {\n\tusing SafeMath for uint256;\n\n\taddress public namePublicKeyAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameTAOPosition internal _nameTAOPosition;\n\tINamePublicKey internal _namePublicKey;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tuint256 public totalSupply;\n\n\t// To differentiate denomination of AO\n\tuint256 public powerOfTen;\n\n\t/***** NETWORK ION VARIABLES *****/\n\tuint256 public sellPrice;\n\tuint256 public buyPrice;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\tmapping (address => bool) public frozenAccount;\n\tmapping (address => uint256) public stakedBalance;\n\tmapping (address => uint256) public escrowedBalance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent FrozenFunds(address target, bool frozen);\n\tevent Stake(address indexed from, uint256 value);\n\tevent Unstake(address indexed from, uint256 value);\n\tevent Escrow(address indexed from, address indexed to, uint256 value);\n\tevent Unescrow(address indexed from, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress, address _namePublicKeyAddress, address _nameAccountRecoveryAddress) public {\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t\tsetNamePublicKeyAddress(_namePublicKeyAddress);\n\t\tsetNameAccountRecoveryAddress(_nameAccountRecoveryAddress);\n\t\tname = _name;           // Set the name for display purposes\n\t\tsymbol = _symbol;       // Set the symbol for display purposes\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NamePublicKey Address\n\t * @param _namePublicKeyAddress The address of NamePublicKey\n\t */\n\tfunction setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {\n\t\trequire (_namePublicKeyAddress != address(0));\n\t\tnamePublicKeyAddress = _namePublicKeyAddress;\n\t\t_namePublicKey = INamePublicKey(namePublicKeyAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev Allows TheAO to transfer `_amount` of ETH from this address to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyTheAO {\n\t\trequire (_recipient != address(0));\n\t\t_recipient.transfer(_amount);\n\t}\n\n\t/**\n\t * @dev Prevent/Allow target from sending & receiving ions\n\t * @param target Address to be frozen\n\t * @param freeze Either to freeze it or not\n\t */\n\tfunction freezeAccount(address target, bool freeze) public onlyTheAO {\n\t\tfrozenAccount[target] = freeze;\n\t\temit FrozenFunds(target, freeze);\n\t}\n\n\t/**\n\t * @dev Allow users to buy ions for `newBuyPrice` eth and sell ions for `newSellPrice` eth\n\t * @param newSellPrice Price users can sell to the contract\n\t * @param newBuyPrice Price users can buy from the contract\n\t */\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {\n\t\tsellPrice = newSellPrice;\n\t\tbuyPrice = newBuyPrice;\n\t}\n\n\t/***** NETWORK ION WHITELISTED ADDRESS ONLY METHODS *****/\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target`\n\t * @param target Address to receive the ions\n\t * @param mintedAmount The amount of ions it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Stake `_value` ions on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount to stake\n\t * @return true on success\n\t */\n\tfunction stakeFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\t\t\t// Subtract from the targeted balance\n\t\tstakedBalance[_from] = stakedBalance[_from].add(_value);\t// Add to the targeted staked balance\n\t\temit Stake(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Unstake `_value` ions on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount to unstake\n\t * @return true on success\n\t */\n\tfunction unstakeFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (stakedBalance[_from] >= _value);\t\t\t\t\t// Check if the targeted staked balance is enough\n\t\tstakedBalance[_from] = stakedBalance[_from].sub(_value);\t// Subtract from the targeted staked balance\n\t\tbalanceOf[_from] = balanceOf[_from].add(_value);\t\t\t// Add to the targeted balance\n\t\temit Unstake(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store `_value` from `_from` to `_to` in escrow\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount of network ions to put in escrow\n\t * @return true on success\n\t */\n\tfunction escrowFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\t\t\t// Subtract from the targeted balance\n\t\tescrowedBalance[_to] = escrowedBalance[_to].add(_value);\t// Add to the targeted escrowed balance\n\t\temit Escrow(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target` escrow balance\n\t * @param target Address to receive ions\n\t * @param mintedAmount The amount of ions it will receive in escrow\n\t */\n\tfunction mintEscrow(address target, uint256 mintedAmount) public inWhitelist returns (bool) {\n\t\tescrowedBalance[target] = escrowedBalance[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Escrow(address(this), target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Release escrowed `_value` from `_from`\n\t * @param _from The address of the sender\n\t * @param _value The amount of escrowed network ions to be released\n\t * @return true on success\n\t */\n\tfunction unescrowFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (escrowedBalance[_from] >= _value);\t\t\t\t\t\t// Check if the targeted escrowed balance is enough\n\t\tescrowedBalance[_from] = escrowedBalance[_from].sub(_value);\t// Subtract from the targeted escrowed balance\n\t\tbalanceOf[_from] = balanceOf[_from].add(_value);\t\t\t\t// Add to the targeted balance\n\t\temit Unescrow(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` ions from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Whitelisted address transfer ions from other address\n\t *\n\t * Send `_value` ions to `_to` on behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction whitelistTransferFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool success) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * Transfer ions\n\t *\n\t * Send `_value` ions to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer ions from other address\n\t *\n\t * Send `_value` ions to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer ions between public key addresses in a Name\n\t * @param _nameId The ID of the Name\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferBetweenPublicKeys(address _nameId, address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _nameId));\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameId));\n\t\t// Make sure _from exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _from));\n\t\t// Make sure _to exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _to));\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` ions in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` ions in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\tionRecipient spender = ionRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy ions\n\t *\n\t * Remove `_value` ions from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy ions from other account\n\t *\n\t * Remove `_value` ions from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Buy ions from contract by sending ether\n\t */\n\tfunction buy() public payable {\n\t\trequire (buyPrice > 0);\n\t\tuint256 amount = msg.value.div(buyPrice);\n\t\t_transfer(address(this), msg.sender, amount);\n\t}\n\n\t/**\n\t * @dev Sell `amount` ions to contract\n\t * @param amount The amount of ions to be sold\n\t */\n\tfunction sell(uint256 amount) public {\n\t\trequire (sellPrice > 0);\n\t\taddress myAddress = address(this);\n\t\trequire (myAddress.balance >= amount.mul(sellPrice));\n\t\t_transfer(msg.sender, address(this), amount);\n\t\tmsg.sender.transfer(amount.mul(sellPrice));\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` ions from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\trequire (!frozenAccount[_from]);\t\t\t\t\t\t// Check if sender is frozen\n\t\trequire (!frozenAccount[_to]);\t\t\t\t\t\t\t// Check if recipient is frozen\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target`\n\t * @param target Address to receive the ions\n\t * @param mintedAmount The amount of ions it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title AOETH\n */\ncontract AOETH is TheAO, TokenERC20, tokenRecipient {\n\tusing SafeMath for uint256;\n\n\taddress public aoIonAddress;\n\n\tAOIon internal _aoIon;\n\n\tuint256 public totalERC20Tokens;\n\tuint256 public totalTokenExchanges;\n\n\tstruct ERC20Token {\n\t\taddress tokenAddress;\n\t\tuint256 price;\t\t\t// price of this ERC20 Token to AOETH\n\t\tuint256 maxQuantity;\t// To prevent too much exposure to a given asset\n\t\tuint256 exchangedQuantity;\t// Running total (total AOETH exchanged from this specific ERC20 Token)\n\t\tbool active;\n\t}\n\n\tstruct TokenExchange {\n\t\tbytes32 exchangeId;\n\t\taddress buyer;\t\t\t// The buyer address\n\t\taddress tokenAddress;\t// The address of ERC20 Token\n\t\tuint256 price;\t\t\t// price of ERC20 Token to AOETH\n\t\tuint256 sentAmount;\t\t// Amount of ERC20 Token sent\n\t\tuint256 receivedAmount;\t// Amount of AOETH received\n\t\tbytes extraData; // Extra data\n\t}\n\n\t// Mapping from id to ERC20Token object\n\tmapping (uint256 => ERC20Token) internal erc20Tokens;\n\tmapping (address => uint256) internal erc20TokenIdLookup;\n\n\t// Mapping from id to TokenExchange object\n\tmapping (uint256 => TokenExchange) internal tokenExchanges;\n\tmapping (bytes32 => uint256) internal tokenExchangeIdLookup;\n\tmapping (address => uint256) public totalAddressTokenExchanges;\n\n\t// Event to be broadcasted to public when TheAO adds an ERC20 Token\n\tevent AddERC20Token(address indexed tokenAddress, uint256 price, uint256 maxQuantity);\n\n\t// Event to be broadcasted to public when TheAO sets price for ERC20 Token\n\tevent SetPrice(address indexed tokenAddress, uint256 price);\n\n\t// Event to be broadcasted to public when TheAO sets max quantity for ERC20 Token\n\tevent SetMaxQuantity(address indexed tokenAddress, uint256 maxQuantity);\n\n\t// Event to be broadcasted to public when TheAO sets active status for ERC20 Token\n\tevent SetActive(address indexed tokenAddress, bool active);\n\n\t// Event to be broadcasted to public when user exchanges ERC20 Token for AOETH\n\tevent ExchangeToken(bytes32 indexed exchangeId, address indexed from, address tokenAddress, string tokenName, string tokenSymbol, uint256 sentTokenAmount, uint256 receivedAOETHAmount, bytes extraData);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, address _aoIonAddress, address _nameTAOPositionAddress)\n\t\tTokenERC20(initialSupply, tokenName, tokenSymbol) public {\n\t\tsetAOIonAddress(_aoIonAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the AOIon Address\n\t * @param _aoIonAddress The address of AOIon\n\t */\n\tfunction setAOIonAddress(address _aoIonAddress) public onlyTheAO {\n\t\trequire (_aoIonAddress != address(0));\n\t\taoIonAddress = _aoIonAddress;\n\t\t_aoIon = AOIon(_aoIonAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/**\n\t * @dev Allows TheAO to transfer `_amount` of ERC20 Token from this address to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyTheAO {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\trequire (_erc20.transfer(_recipient, _amount));\n\t}\n\n\t/**\n\t * @dev Add an ERC20 Token to the list\n\t * @param _tokenAddress The address of the ERC20 Token\n\t * @param _price The price of this token to AOETH\n\t * @param _maxQuantity Maximum quantity allowed for exchange\n\t */\n\tfunction addERC20Token(address _tokenAddress, uint256 _price, uint256 _maxQuantity) public onlyTheAO {\n\t\trequire (_tokenAddress != address(0) && _price > 0 && _maxQuantity > 0);\n\t\trequire (AOLibrary.isValidERC20TokenAddress(_tokenAddress));\n\t\trequire (erc20TokenIdLookup[_tokenAddress] == 0);\n\n\t\ttotalERC20Tokens++;\n\t\terc20TokenIdLookup[_tokenAddress] = totalERC20Tokens;\n\t\tERC20Token storage _erc20Token = erc20Tokens[totalERC20Tokens];\n\t\t_erc20Token.tokenAddress = _tokenAddress;\n\t\t_erc20Token.price = _price;\n\t\t_erc20Token.maxQuantity = _maxQuantity;\n\t\t_erc20Token.active = true;\n\t\temit AddERC20Token(_erc20Token.tokenAddress, _erc20Token.price, _erc20Token.maxQuantity);\n\t}\n\n\t/**\n\t * @dev Set price for existing ERC20 Token\n\t * @param _tokenAddress The address of the ERC20 Token\n\t * @param _price The price of this token to AOETH\n\t */\n\tfunction setPrice(address _tokenAddress, uint256 _price) public onlyTheAO {\n\t\trequire (erc20TokenIdLookup[_tokenAddress] > 0);\n\t\trequire (_price > 0);\n\n\t\tERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];\n\t\t_erc20Token.price = _price;\n\t\temit SetPrice(_erc20Token.tokenAddress, _erc20Token.price);\n\t}\n\n\t/**\n\t * @dev Set max quantity for existing ERC20 Token\n\t * @param _tokenAddress The address of the ERC20 Token\n\t * @param _maxQuantity The max exchange quantity for this token\n\t */\n\tfunction setMaxQuantity(address _tokenAddress, uint256 _maxQuantity) public onlyTheAO {\n\t\trequire (erc20TokenIdLookup[_tokenAddress] > 0);\n\n\t\tERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];\n\t\trequire (_maxQuantity > _erc20Token.exchangedQuantity);\n\t\t_erc20Token.maxQuantity = _maxQuantity;\n\t\temit SetMaxQuantity(_erc20Token.tokenAddress, _erc20Token.maxQuantity);\n\t}\n\n\t/**\n\t * @dev Set active status for existing ERC20 Token\n\t * @param _tokenAddress The address of the ERC20 Token\n\t * @param _active The active status for this token\n\t */\n\tfunction setActive(address _tokenAddress, bool _active) public onlyTheAO {\n\t\trequire (erc20TokenIdLookup[_tokenAddress] > 0);\n\n\t\tERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];\n\t\t_erc20Token.active = _active;\n\t\temit SetActive(_erc20Token.tokenAddress, _erc20Token.active);\n\t}\n\n\t/**\n\t * @dev Whitelisted address transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` on behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction whitelistTransferFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool success) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Get an ERC20 Token information given an ID\n\t * @param _id The internal ID of the ERC20 Token\n\t * @return The ERC20 Token address\n\t * @return The name of the token\n\t * @return The symbol of the token\n\t * @return The price of this token to AOETH\n\t * @return The max quantity for exchange\n\t * @return The total AOETH exchanged from this token\n\t * @return The status of this token\n\t */\n\tfunction getById(uint256 _id) public view returns (address, string memory, string memory, uint256, uint256, uint256, bool) {\n\t\trequire (erc20Tokens[_id].tokenAddress != address(0));\n\t\tERC20Token memory _erc20Token = erc20Tokens[_id];\n\t\treturn (\n\t\t\t_erc20Token.tokenAddress,\n\t\t\tTokenERC20(_erc20Token.tokenAddress).name(),\n\t\t\tTokenERC20(_erc20Token.tokenAddress).symbol(),\n\t\t\t_erc20Token.price,\n\t\t\t_erc20Token.maxQuantity,\n\t\t\t_erc20Token.exchangedQuantity,\n\t\t\t_erc20Token.active\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get an ERC20 Token information given an address\n\t * @param _tokenAddress The address of the ERC20 Token\n\t * @return The ERC20 Token address\n\t * @return The name of the token\n\t * @return The symbol of the token\n\t * @return The price of this token to AOETH\n\t * @return The max quantity for exchange\n\t * @return The total AOETH exchanged from this token\n\t * @return The status of this token\n\t */\n\tfunction getByAddress(address _tokenAddress) public view returns (address, string memory, string memory, uint256, uint256, uint256, bool) {\n\t\trequire (erc20TokenIdLookup[_tokenAddress] > 0);\n\t\treturn getById(erc20TokenIdLookup[_tokenAddress]);\n\t}\n\n\t/**\n\t * @dev When a user approves AOETH to spend on his/her behalf (i.e exchange to AOETH)\n\t * @param _from The user address that approved AOETH\n\t * @param _value The amount that the user approved\n\t * @param _token The address of the ERC20 Token\n\t * @param _extraData The extra data sent during the approval\n\t */\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external {\n\t\trequire (_from != address(0));\n\t\trequire (AOLibrary.isValidERC20TokenAddress(_token));\n\n\t\t// Check if the token is supported\n\t\trequire (erc20TokenIdLookup[_token] > 0);\n\t\tERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_token]];\n\t\trequire (_erc20Token.active && _erc20Token.price > 0 && _erc20Token.exchangedQuantity < _erc20Token.maxQuantity);\n\n\t\tuint256 amountToTransfer = _value.div(_erc20Token.price);\n\t\trequire (_erc20Token.maxQuantity.sub(_erc20Token.exchangedQuantity) >= amountToTransfer);\n\t\trequire (_aoIon.availableETH() >= amountToTransfer);\n\n\t\t// Transfer the ERC20 Token from the `_from` address to here\n\t\trequire (TokenERC20(_token).transferFrom(_from, address(this), _value));\n\n\t\t_erc20Token.exchangedQuantity = _erc20Token.exchangedQuantity.add(amountToTransfer);\n\t\tbalanceOf[_from] = balanceOf[_from].add(amountToTransfer);\n\t\ttotalSupply = totalSupply.add(amountToTransfer);\n\n\t\t// Store the TokenExchange information\n\t\ttotalTokenExchanges++;\n\t\ttotalAddressTokenExchanges[_from]++;\n\t\tbytes32 _exchangeId = keccak256(abi.encodePacked(this, _from, totalTokenExchanges));\n\t\ttokenExchangeIdLookup[_exchangeId] = totalTokenExchanges;\n\n\t\tTokenExchange storage _tokenExchange = tokenExchanges[totalTokenExchanges];\n\t\t_tokenExchange.exchangeId = _exchangeId;\n\t\t_tokenExchange.buyer = _from;\n\t\t_tokenExchange.tokenAddress = _token;\n\t\t_tokenExchange.price = _erc20Token.price;\n\t\t_tokenExchange.sentAmount = _value;\n\t\t_tokenExchange.receivedAmount = amountToTransfer;\n\t\t_tokenExchange.extraData = _extraData;\n\n\t\temit ExchangeToken(_tokenExchange.exchangeId, _tokenExchange.buyer, _tokenExchange.tokenAddress, TokenERC20(_token).name(), TokenERC20(_token).symbol(), _tokenExchange.sentAmount, _tokenExchange.receivedAmount, _tokenExchange.extraData);\n\t}\n\n\t/**\n\t * @dev Get TokenExchange information given an exchange ID\n\t * @param _exchangeId The exchange ID to query\n\t * @return The buyer address\n\t * @return The sent ERC20 Token address\n\t * @return The ERC20 Token name\n\t * @return The ERC20 Token symbol\n\t * @return The price of ERC20 Token to AOETH\n\t * @return The amount of ERC20 Token sent\n\t * @return The amount of AOETH received\n\t * @return Extra data during the transaction\n\t */\n\tfunction getTokenExchangeById(bytes32 _exchangeId) public view returns (address, address, string memory, string memory, uint256, uint256,  uint256, bytes memory) {\n\t\trequire (tokenExchangeIdLookup[_exchangeId] > 0);\n\t\tTokenExchange memory _tokenExchange = tokenExchanges[tokenExchangeIdLookup[_exchangeId]];\n\t\treturn (\n\t\t\t_tokenExchange.buyer,\n\t\t\t_tokenExchange.tokenAddress,\n\t\t\tTokenERC20(_tokenExchange.tokenAddress).name(),\n\t\t\tTokenERC20(_tokenExchange.tokenAddress).symbol(),\n\t\t\t_tokenExchange.price,\n\t\t\t_tokenExchange.sentAmount,\n\t\t\t_tokenExchange.receivedAmount,\n\t\t\t_tokenExchange.extraData\n\t\t);\n\t}\n}\n\n\n/**\n * @title AOIon\n */\ncontract AOIon is AOIonInterface {\n\tusing SafeMath for uint256;\n\n\taddress public aoIonLotAddress;\n\taddress public settingTAOId;\n\taddress public aoSettingAddress;\n\taddress public aoethAddress;\n\n\t// AO Dev Team addresses to receive Primordial/Network Ions\n\taddress public aoDevTeam1 = 0x146CbD9821e6A42c8ff6DC903fe91CB69625A105;\n\taddress public aoDevTeam2 = 0x4810aF1dA3aC827259eEa72ef845F4206C703E8D;\n\n\tIAOIonLot internal _aoIonLot;\n\tIAOSetting internal _aoSetting;\n\tAOETH internal _aoeth;\n\n\t/***** PRIMORDIAL ION VARIABLES *****/\n\tuint256 public primordialTotalSupply;\n\tuint256 public primordialTotalBought;\n\tuint256 public primordialSellPrice;\n\tuint256 public primordialBuyPrice;\n\tuint256 public totalEthForPrimordial;\t// Total ETH sent for Primordial AO+\n\tuint256 public totalRedeemedAOETH;\t\t// Total AOETH redeemed for Primordial AO+\n\n\t// Total available primordial ion for sale 3,377,699,720,527,872 AO+\n\tuint256 constant public TOTAL_PRIMORDIAL_FOR_SALE = 3377699720527872;\n\n\tmapping (address => uint256) public primordialBalanceOf;\n\tmapping (address => mapping (address => uint256)) public primordialAllowance;\n\n\t// Mapping from owner's lot weighted multiplier to the amount of staked ions\n\tmapping (address => mapping (uint256 => uint256)) public primordialStakedBalance;\n\n\tevent PrimordialTransfer(address indexed from, address indexed to, uint256 value);\n\tevent PrimordialApproval(address indexed _owner, address indexed _spender, uint256 _value);\n\tevent PrimordialBurn(address indexed from, uint256 value);\n\tevent PrimordialStake(address indexed from, uint256 value, uint256 weightedMultiplier);\n\tevent PrimordialUnstake(address indexed from, uint256 value, uint256 weightedMultiplier);\n\n\tevent NetworkExchangeEnded();\n\n\tbool public networkExchangeEnded;\n\n\t// Mapping from owner to his/her current weighted multiplier\n\tmapping (address => uint256) internal ownerWeightedMultiplier;\n\n\t// Mapping from owner to his/her max multiplier (multiplier of account's first Lot)\n\tmapping (address => uint256) internal ownerMaxMultiplier;\n\n\t// Event to be broadcasted to public when user buys primordial ion\n\t// payWith 1 == with Ethereum\n\t// payWith 2 == with AOETH\n\tevent BuyPrimordial(address indexed lotOwner, bytes32 indexed lotId, uint8 payWith, uint256 sentAmount, uint256 refundedAmount);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _settingTAOId, address _aoSettingAddress, address _nameTAOPositionAddress, address _namePublicKeyAddress, address _nameAccountRecoveryAddress)\n\t\tAOIonInterface(_name, _symbol, _nameTAOPositionAddress, _namePublicKeyAddress, _nameAccountRecoveryAddress) public {\n\t\tsetSettingTAOId(_settingTAOId);\n\t\tsetAOSettingAddress(_aoSettingAddress);\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\t\tsetPrimordialPrices(0, 10 ** 8); // Set Primordial buy price to 0.1 gwei/ion\n\t}\n\n\t/**\n\t * @dev Checks if buyer can buy primordial ion\n\t */\n\tmodifier canBuyPrimordial(uint256 _sentAmount, bool _withETH) {\n\t\trequire (networkExchangeEnded == false &&\n\t\t\tprimordialTotalBought < TOTAL_PRIMORDIAL_FOR_SALE &&\n\t\t\tprimordialBuyPrice > 0 &&\n\t\t\t_sentAmount > 0 &&\n\t\t\tavailablePrimordialForSaleInETH() > 0 &&\n\t\t\t(\n\t\t\t\t(_withETH && availableETH() > 0) ||\n\t\t\t\t(!_withETH && totalRedeemedAOETH < _aoeth.totalSupply())\n\t\t\t)\n\t\t);\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev The AO sets AOIonLot address\n\t * @param _aoIonLotAddress The address of AOIonLot\n\t */\n\tfunction setAOIonLotAddress(address _aoIonLotAddress) public onlyTheAO {\n\t\trequire (_aoIonLotAddress != address(0));\n\t\taoIonLotAddress = _aoIonLotAddress;\n\t\t_aoIonLot = IAOIonLot(_aoIonLotAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev Set AO Dev team addresses to receive Primordial/Network ions during network exchange\n\t * @param _aoDevTeam1 The first AO dev team address\n\t * @param _aoDevTeam2 The second AO dev team address\n\t */\n\tfunction setAODevTeamAddresses(address _aoDevTeam1, address _aoDevTeam2) public onlyTheAO {\n\t\taoDevTeam1 = _aoDevTeam1;\n\t\taoDevTeam2 = _aoDevTeam2;\n\t}\n\n\t/**\n\t * @dev Set AOETH address\n\t * @param _aoethAddress The address of AOETH\n\t */\n\tfunction setAOETHAddress(address _aoethAddress) public onlyTheAO {\n\t\trequire (_aoethAddress != address(0));\n\t\taoethAddress = _aoethAddress;\n\t\t_aoeth = AOETH(_aoethAddress);\n\t}\n\n\t/***** PRIMORDIAL ION THE AO ONLY METHODS *****/\n\t/**\n\t * @dev Allow users to buy Primordial ions for `newBuyPrice` eth and sell Primordial ions for `newSellPrice` eth\n\t * @param newPrimordialSellPrice Price users can sell to the contract\n\t * @param newPrimordialBuyPrice Price users can buy from the contract\n\t */\n\tfunction setPrimordialPrices(uint256 newPrimordialSellPrice, uint256 newPrimordialBuyPrice) public onlyTheAO {\n\t\tprimordialSellPrice = newPrimordialSellPrice;\n\t\tprimordialBuyPrice = newPrimordialBuyPrice;\n\t}\n\n\t/**\n\t * @dev Only the AO can force end network exchange\n\t */\n\tfunction endNetworkExchange() public onlyTheAO {\n\t\trequire (!networkExchangeEnded);\n\t\tnetworkExchangeEnded = true;\n\t\temit NetworkExchangeEnded();\n\t}\n\n\t/***** PRIMORDIAL ION WHITELISTED ADDRESS ONLY METHODS *****/\n\t/**\n\t * @dev Stake `_value` Primordial ions at `_weightedMultiplier ` multiplier on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount of Primordial ions to stake\n\t * @param _weightedMultiplier The weighted multiplier of the Primordial ions\n\t * @return true on success\n\t */\n\tfunction stakePrimordialFrom(address _from, uint256 _value, uint256 _weightedMultiplier) public inWhitelist returns (bool) {\n\t\t// Check if the targeted balance is enough\n\t\trequire (primordialBalanceOf[_from] >= _value);\n\t\t// Make sure the weighted multiplier is the same as account's current weighted multiplier\n\t\trequire (_weightedMultiplier == ownerWeightedMultiplier[_from]);\n\t\t// Subtract from the targeted balance\n\t\tprimordialBalanceOf[_from] = primordialBalanceOf[_from].sub(_value);\n\t\t// Add to the targeted staked balance\n\t\tprimordialStakedBalance[_from][_weightedMultiplier] = primordialStakedBalance[_from][_weightedMultiplier].add(_value);\n\t\temit PrimordialStake(_from, _value, _weightedMultiplier);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Unstake `_value` Primordial ions at `_weightedMultiplier` on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount to unstake\n\t * @param _weightedMultiplier The weighted multiplier of the Primordial ions\n\t * @return true on success\n\t */\n\tfunction unstakePrimordialFrom(address _from, uint256 _value, uint256 _weightedMultiplier) public inWhitelist returns (bool) {\n\t\t// Check if the targeted staked balance is enough\n\t\trequire (primordialStakedBalance[_from][_weightedMultiplier] >= _value);\n\t\t// Subtract from the targeted staked balance\n\t\tprimordialStakedBalance[_from][_weightedMultiplier] = primordialStakedBalance[_from][_weightedMultiplier].sub(_value);\n\t\t// Add to the targeted balance\n\t\tprimordialBalanceOf[_from] = primordialBalanceOf[_from].add(_value);\n\t\temit PrimordialUnstake(_from, _value, _weightedMultiplier);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Send `_value` primordial ions to `_to` on behalf of `_from`\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t * @return true on success\n\t */\n\tfunction whitelistTransferPrimordialFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool) {\n\t\treturn _createLotAndTransferPrimordial(_from, _to, _value);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/***** PRIMORDIAL ION PUBLIC METHODS *****/\n\t/**\n\t * @dev Buy Primordial ions from contract by sending ether\n\t */\n\tfunction buyPrimordial() public payable canBuyPrimordial(msg.value, true) {\n\t\t(uint256 amount, uint256 remainderBudget, bool shouldEndNetworkExchange) = _calculateAmountAndRemainderBudget(msg.value, true);\n\t\trequire (amount > 0);\n\n\t\t// Ends network exchange if necessary\n\t\tif (shouldEndNetworkExchange) {\n\t\t\tnetworkExchangeEnded = true;\n\t\t\temit NetworkExchangeEnded();\n\t\t}\n\n\t\t// Update totalEthForPrimordial\n\t\ttotalEthForPrimordial = totalEthForPrimordial.add(msg.value.sub(remainderBudget));\n\n\t\t// Send the primordial ion to buyer and reward AO devs\n\t\tbytes32 _lotId = _sendPrimordialAndRewardDev(amount, msg.sender);\n\n\t\temit BuyPrimordial(msg.sender, _lotId, 1, msg.value, remainderBudget);\n\n\t\t// Send remainder budget back to buyer if exist\n\t\tif (remainderBudget > 0) {\n\t\t\tmsg.sender.transfer(remainderBudget);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Buy Primordial ion from contract by sending AOETH\n\t */\n\tfunction buyPrimordialWithAOETH(uint256 _aoethAmount) public canBuyPrimordial(_aoethAmount, false) {\n\t\t(uint256 amount, uint256 remainderBudget, bool shouldEndNetworkExchange) = _calculateAmountAndRemainderBudget(_aoethAmount, false);\n\t\trequire (amount > 0);\n\n\t\t// Ends network exchange if necessary\n\t\tif (shouldEndNetworkExchange) {\n\t\t\tnetworkExchangeEnded = true;\n\t\t\temit NetworkExchangeEnded();\n\t\t}\n\n\t\t// Calculate the actual AOETH that was charged for this transaction\n\t\tuint256 actualCharge = _aoethAmount.sub(remainderBudget);\n\n\t\t// Update totalRedeemedAOETH\n\t\ttotalRedeemedAOETH = totalRedeemedAOETH.add(actualCharge);\n\n\t\t// Transfer AOETH from buyer to here\n\t\trequire (_aoeth.whitelistTransferFrom(msg.sender, address(this), actualCharge));\n\n\t\t// Send the primordial ion to buyer and reward AO devs\n\t\tbytes32 _lotId = _sendPrimordialAndRewardDev(amount, msg.sender);\n\n\t\temit BuyPrimordial(msg.sender, _lotId, 2, _aoethAmount, remainderBudget);\n\t}\n\n\t/**\n\t * @dev Send `_value` Primordial ions to `_to` from your account\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t * @return true on success\n\t */\n\tfunction transferPrimordial(address _to, uint256 _value) public returns (bool) {\n\t\treturn _createLotAndTransferPrimordial(msg.sender, _to, _value);\n\t}\n\n\t/**\n\t * @dev Send `_value` Primordial ions to `_to` from `_from`\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t * @return true on success\n\t */\n\tfunction transferPrimordialFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire (_value <= primordialAllowance[_from][msg.sender]);\n\t\tprimordialAllowance[_from][msg.sender] = primordialAllowance[_from][msg.sender].sub(_value);\n\n\t\treturn _createLotAndTransferPrimordial(_from, _to, _value);\n\t}\n\n\t/**\n\t * Transfer primordial ions between public key addresses in a Name\n\t * @param _nameId The ID of the Name\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferPrimordialBetweenPublicKeys(address _nameId, address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _nameId));\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameId));\n\t\t// Make sure _from exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _from));\n\t\t// Make sure _to exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _to));\n\t\treturn _createLotAndTransferPrimordial(_from, _to, _value);\n\t}\n\n\t/**\n\t * @dev Allows `_spender` to spend no more than `_value` Primordial ions in your behalf\n\t * @param _spender The address authorized to spend\n\t * @param _value The max amount they can spend\n\t * @return true on success\n\t */\n\tfunction approvePrimordial(address _spender, uint256 _value) public returns (bool) {\n\t\tprimordialAllowance[msg.sender][_spender] = _value;\n\t\temit PrimordialApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows `_spender` to spend no more than `_value` Primordial ions in your behalf, and then ping the contract about it\n\t * @param _spender The address authorized to spend\n\t * @param _value The max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t * @return true on success\n\t */\n\tfunction approvePrimordialAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approvePrimordial(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Remove `_value` Primordial ions from the system irreversibly\n\t *\t\tand re-weight the account's multiplier after burn\n\t * @param _value The amount to burn\n\t * @return true on success\n\t */\n\tfunction burnPrimordial(uint256 _value) public returns (bool) {\n\t\trequire (primordialBalanceOf[msg.sender] >= _value);\n\t\trequire (calculateMaximumBurnAmount(msg.sender) >= _value);\n\n\t\t// Update the account's multiplier\n\t\townerWeightedMultiplier[msg.sender] = calculateMultiplierAfterBurn(msg.sender, _value);\n\t\tprimordialBalanceOf[msg.sender] = primordialBalanceOf[msg.sender].sub(_value);\n\t\tprimordialTotalSupply = primordialTotalSupply.sub(_value);\n\n\t\t// Store burn lot info\n\t\trequire (_aoIonLot.createBurnLot(msg.sender, _value, ownerWeightedMultiplier[msg.sender]));\n\t\temit PrimordialBurn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Remove `_value` Primordial ions from the system irreversibly on behalf of `_from`\n\t *\t\tand re-weight `_from`'s multiplier after burn\n\t * @param _from The address of sender\n\t * @param _value The amount to burn\n\t * @return true on success\n\t */\n\tfunction burnPrimordialFrom(address _from, uint256 _value) public returns (bool) {\n\t\trequire (primordialBalanceOf[_from] >= _value);\n\t\trequire (primordialAllowance[_from][msg.sender] >= _value);\n\t\trequire (calculateMaximumBurnAmount(_from) >= _value);\n\n\t\t// Update `_from`'s multiplier\n\t\townerWeightedMultiplier[_from] = calculateMultiplierAfterBurn(_from, _value);\n\t\tprimordialBalanceOf[_from] = primordialBalanceOf[_from].sub(_value);\n\t\tprimordialAllowance[_from][msg.sender] = primordialAllowance[_from][msg.sender].sub(_value);\n\t\tprimordialTotalSupply = primordialTotalSupply.sub(_value);\n\n\t\t// Store burn lot info\n\t\trequire (_aoIonLot.createBurnLot(_from, _value, ownerWeightedMultiplier[_from]));\n\t\temit PrimordialBurn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Return the average weighted multiplier of all lots owned by an address\n\t * @param _lotOwner The address of the lot owner\n\t * @return the weighted multiplier of the address (in 10 ** 6)\n\t */\n\tfunction weightedMultiplierByAddress(address _lotOwner) public view returns (uint256) {\n\t\treturn ownerWeightedMultiplier[_lotOwner];\n\t}\n\n\t/**\n\t * @dev Return the max multiplier of an address\n\t * @param _target The address to query\n\t * @return the max multiplier of the address (in 10 ** 6)\n\t */\n\tfunction maxMultiplierByAddress(address _target) public view returns (uint256) {\n\t\treturn (_aoIonLot.totalLotsByAddress(_target) > 0) ? ownerMaxMultiplier[_target] : 0;\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier, bonus network ion percentage, and the\n\t *\t\tbonus network ion amount on a given lot when someone purchases primordial ion\n\t *\t\tduring network exchange\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @return The multiplier in (10 ** 6)\n\t * @return The bonus percentage\n\t * @return The amount of network ion as bonus\n\t */\n\tfunction calculateMultiplierAndBonus(uint256 _purchaseAmount) public view returns (uint256, uint256, uint256) {\n\t\t(uint256 startingPrimordialMultiplier, uint256 endingPrimordialMultiplier, uint256 startingNetworkBonusMultiplier, uint256 endingNetworkBonusMultiplier) = _getSettingVariables();\n\t\treturn (\n\t\t\tAOLibrary.calculatePrimordialMultiplier(_purchaseAmount, TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought, startingPrimordialMultiplier, endingPrimordialMultiplier),\n\t\t\tAOLibrary.calculateNetworkBonusPercentage(_purchaseAmount, TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought, startingNetworkBonusMultiplier, endingNetworkBonusMultiplier),\n\t\t\tAOLibrary.calculateNetworkBonusAmount(_purchaseAmount, TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought, startingNetworkBonusMultiplier, endingNetworkBonusMultiplier)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t * @param _account The address of the account\n\t * @return The maximum primordial ion amount to burn\n\t */\n\tfunction calculateMaximumBurnAmount(address _account) public view returns (uint256) {\n\t\treturn AOLibrary.calculateMaximumBurnAmount(primordialBalanceOf[_account], ownerWeightedMultiplier[_account], ownerMaxMultiplier[_account]);\n\t}\n\n\t/**\n\t * @dev Calculate account's new multiplier after burn `_amountToBurn` primordial ions\n\t * @param _account The address of the account\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier in (10 ** 6)\n\t */\n\tfunction calculateMultiplierAfterBurn(address _account, uint256 _amountToBurn) public view returns (uint256) {\n\t\trequire (calculateMaximumBurnAmount(_account) >= _amountToBurn);\n\t\treturn AOLibrary.calculateMultiplierAfterBurn(primordialBalanceOf[_account], ownerWeightedMultiplier[_account], _amountToBurn);\n\t}\n\n\t/**\n\t * @dev Calculate account's new multiplier after converting `amountToConvert` network ion to primordial ion\n\t * @param _account The address of the account\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier in (10 ** 6)\n\t */\n\tfunction calculateMultiplierAfterConversion(address _account, uint256 _amountToConvert) public view returns (uint256) {\n\t\treturn AOLibrary.calculateMultiplierAfterConversion(primordialBalanceOf[_account], ownerWeightedMultiplier[_account], _amountToConvert);\n\t}\n\n\t/**\n\t * @dev Convert `_value` of network ions to primordial ions\n\t *\t\tand re-weight the account's multiplier after conversion\n\t * @param _value The amount to convert\n\t * @return true on success\n\t */\n\tfunction convertToPrimordial(uint256 _value) public returns (bool) {\n\t\trequire (balanceOf[msg.sender] >= _value);\n\n\t\t// Update the account's multiplier\n\t\townerWeightedMultiplier[msg.sender] = calculateMultiplierAfterConversion(msg.sender, _value);\n\t\t// Burn network ion\n\t\tburn(_value);\n\t\t// mint primordial ion\n\t\t_mintPrimordial(msg.sender, _value);\n\n\t\trequire (_aoIonLot.createConvertLot(msg.sender, _value, ownerWeightedMultiplier[msg.sender]));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get quantity of AO+ left in Network Exchange\n\t * @return The quantity of AO+ left in Network Exchange\n\t */\n\tfunction availablePrimordialForSale() public view returns (uint256) {\n\t\treturn TOTAL_PRIMORDIAL_FOR_SALE.sub(primordialTotalBought);\n\t}\n\n\t/**\n\t * @dev Get quantity of AO+ in ETH left in Network Exchange (i.e How much ETH is there total that can be\n\t *\t\texchanged for AO+\n\t * @return The quantity of AO+ in ETH left in Network Exchange\n\t */\n\tfunction availablePrimordialForSaleInETH() public view returns (uint256) {\n\t\treturn availablePrimordialForSale().mul(primordialBuyPrice);\n\t}\n\n\t/**\n\t * @dev Get maximum quantity of AOETH or ETH that can still be sold\n\t * @return The maximum quantity of AOETH or ETH that can still be sold\n\t */\n\tfunction availableETH() public view returns (uint256) {\n\t\tif (availablePrimordialForSaleInETH() > 0) {\n\t\t\tuint256 _availableETH = availablePrimordialForSaleInETH().sub(_aoeth.totalSupply().sub(totalRedeemedAOETH));\n\t\t\tif (availablePrimordialForSale() == 1 && _availableETH < primordialBuyPrice) {\n\t\t\t\treturn primordialBuyPrice;\n\t\t\t} else {\n\t\t\t\treturn _availableETH;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/***** PRIMORDIAL ION INTERNAL METHODS *****/\n\t/**\n\t * @dev Calculate the amount of ion the buyer will receive and remaining budget if exist\n\t *\t\twhen he/she buys primordial ion\n\t * @param _budget The amount of ETH sent by buyer\n\t * @param _withETH Whether or not buyer is paying with ETH\n\t * @return uint256 of the amount the buyer will receiver\n\t * @return uint256 of the remaining budget, if exist\n\t * @return bool whether or not the network exchange should end\n\t */\n\tfunction _calculateAmountAndRemainderBudget(uint256 _budget, bool _withETH) internal view returns (uint256, uint256, bool) {\n\t\t// Calculate the amount of ion\n\t\tuint256 amount = _budget.div(primordialBuyPrice);\n\n\t\t// If we need to return ETH to the buyer, in the case\n\t\t// where the buyer sends more ETH than available primordial ion to be purchased\n\t\tuint256 remainderEth = _budget.sub(amount.mul(primordialBuyPrice));\n\n\t\tuint256 _availableETH = availableETH();\n\t\t// If paying with ETH, it can't exceed availableETH\n\t\tif (_withETH && _budget > availableETH()) {\n\t\t\t// Calculate the amount of ions\n\t\t\tamount = _availableETH.div(primordialBuyPrice);\n\t\t\tremainderEth = _budget.sub(amount.mul(primordialBuyPrice));\n\t\t}\n\n\t\t// Make sure primordialTotalBought is not overflowing\n\t\tbool shouldEndNetworkExchange = false;\n\t\tif (primordialTotalBought.add(amount) >= TOTAL_PRIMORDIAL_FOR_SALE) {\n\t\t\tamount = TOTAL_PRIMORDIAL_FOR_SALE.sub(primordialTotalBought);\n\t\t\tshouldEndNetworkExchange = true;\n\t\t\tremainderEth = _budget.sub(amount.mul(primordialBuyPrice));\n\t\t}\n\t\treturn (amount, remainderEth, shouldEndNetworkExchange);\n\t}\n\n\t/**\n\t * @dev Actually sending the primordial ion to buyer and reward AO devs accordingly\n\t * @param amount The amount of primordial ion to be sent to buyer\n\t * @param to The recipient of ion\n\t * @return the lot Id of the buyer\n\t */\n\tfunction _sendPrimordialAndRewardDev(uint256 amount, address to) internal returns (bytes32) {\n\t\t(uint256 startingPrimordialMultiplier,, uint256 startingNetworkBonusMultiplier, uint256 endingNetworkBonusMultiplier) = _getSettingVariables();\n\n\t\t// Update primordialTotalBought\n\t\t(uint256 multiplier, uint256 networkBonusPercentage, uint256 networkBonusAmount) = calculateMultiplierAndBonus(amount);\n\t\tprimordialTotalBought = primordialTotalBought.add(amount);\n\t\tbytes32 _lotId = _createPrimordialLot(to, amount, multiplier, networkBonusAmount);\n\n\t\t// Calculate The AO and AO Dev Team's portion of Primordial and Network ion Bonus\n\t\tuint256 inverseMultiplier = startingPrimordialMultiplier.sub(multiplier); // Inverse of the buyer's multiplier\n\t\tuint256 theAONetworkBonusAmount = (startingNetworkBonusMultiplier.sub(networkBonusPercentage).add(endingNetworkBonusMultiplier)).mul(amount).div(AOLibrary.PERCENTAGE_DIVISOR());\n\t\tif (aoDevTeam1 != address(0)) {\n\t\t\t_createPrimordialLot(aoDevTeam1, amount.div(2), inverseMultiplier, theAONetworkBonusAmount.div(2));\n\t\t}\n\t\tif (aoDevTeam2 != address(0)) {\n\t\t\t_createPrimordialLot(aoDevTeam2, amount.div(2), inverseMultiplier, theAONetworkBonusAmount.div(2));\n\t\t}\n\t\t_mint(theAO, theAONetworkBonusAmount);\n\t\treturn _lotId;\n\t}\n\n\t/**\n\t * @dev Create a lot with `primordialAmount` of primordial ions with `_multiplier` for an `account`\n\t *\t\tduring network exchange, and reward `_networkBonusAmount` if exist\n\t * @param _account Address of the lot owner\n\t * @param _primordialAmount The amount of primordial ions to be stored in the lot\n\t * @param _multiplier The multiplier for this lot in (10 ** 6)\n\t * @param _networkBonusAmount The network ion bonus amount\n\t * @return Created lot Id\n\t */\n\tfunction _createPrimordialLot(address _account, uint256 _primordialAmount, uint256 _multiplier, uint256 _networkBonusAmount) internal returns (bytes32) {\n\t\tbytes32 lotId = _aoIonLot.createPrimordialLot(_account, _primordialAmount, _multiplier, _networkBonusAmount);\n\n\t\townerWeightedMultiplier[_account] = AOLibrary.calculateWeightedMultiplier(ownerWeightedMultiplier[_account], primordialBalanceOf[_account], _multiplier, _primordialAmount);\n\n\t\t// If this is the first lot, set this as the max multiplier of the account\n\t\tif (_aoIonLot.totalLotsByAddress(_account) == 1) {\n\t\t\townerMaxMultiplier[_account] = _multiplier;\n\t\t}\n\t\t_mintPrimordial(_account, _primordialAmount);\n\t\t_mint(_account, _networkBonusAmount);\n\n\t\treturn lotId;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` Primordial ions and send it to `target`\n\t * @param target Address to receive the Primordial ions\n\t * @param mintedAmount The amount of Primordial ions it will receive\n\t */\n\tfunction _mintPrimordial(address target, uint256 mintedAmount) internal {\n\t\tprimordialBalanceOf[target] = primordialBalanceOf[target].add(mintedAmount);\n\t\tprimordialTotalSupply = primordialTotalSupply.add(mintedAmount);\n\t\temit PrimordialTransfer(address(0), address(this), mintedAmount);\n\t\temit PrimordialTransfer(address(this), target, mintedAmount);\n\t}\n\n\t/**\n\t * @dev Create a lot with `amount` of ions at `weightedMultiplier` for an `account`\n\t * @param _account Address of lot owner\n\t * @param _amount The amount of ions\n\t * @param _weightedMultiplier The multiplier of the lot (in 10^6)\n\t * @return bytes32 of new created lot ID\n\t */\n\tfunction _createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier) internal returns (bytes32) {\n\t\trequire (_account != address(0));\n\t\trequire (_amount > 0);\n\n\t\tbytes32 lotId = _aoIonLot.createWeightedMultiplierLot(_account, _amount, _weightedMultiplier);\n\t\t// If this is the first lot, set this as the max multiplier of the account\n\t\tif (_aoIonLot.totalLotsByAddress(_account) == 1) {\n\t\t\townerMaxMultiplier[_account] = _weightedMultiplier;\n\t\t}\n\t\treturn lotId;\n\t}\n\n\t/**\n\t * @dev Create Lot and send `_value` Primordial ions from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t * @return true on success\n\t */\n\tfunction _createLotAndTransferPrimordial(address _from, address _to, uint256 _value) internal returns (bool) {\n\t\tbytes32 _createdLotId = _createWeightedMultiplierLot(_to, _value, ownerWeightedMultiplier[_from]);\n\t\t(, address _lotOwner,,) = _aoIonLot.lotById(_createdLotId);\n\n\t\t// Make sure the new lot is created successfully\n\t\trequire (_lotOwner == _to);\n\n\t\t// Update the weighted multiplier of the recipient\n\t\townerWeightedMultiplier[_to] = AOLibrary.calculateWeightedMultiplier(ownerWeightedMultiplier[_to], primordialBalanceOf[_to], ownerWeightedMultiplier[_from], _value);\n\n\t\t// Transfer the Primordial ions\n\t\trequire (_transferPrimordial(_from, _to, _value));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Send `_value` Primordial ions from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transferPrimordial(address _from, address _to, uint256 _value) internal returns (bool) {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (primordialBalanceOf[_from] >= _value);\t\t\t\t\t\t// Check if the sender has enough\n\t\trequire (primordialBalanceOf[_to].add(_value) >= primordialBalanceOf[_to]);\t// Check for overflows\n\t\trequire (!frozenAccount[_from]);\t\t\t\t\t\t\t\t// Check if sender is frozen\n\t\trequire (!frozenAccount[_to]);\t\t\t\t\t\t\t\t\t// Check if recipient is frozen\n\t\tuint256 previousBalances = primordialBalanceOf[_from].add(primordialBalanceOf[_to]);\n\t\tprimordialBalanceOf[_from] = primordialBalanceOf[_from].sub(_value);\t\t\t// Subtract from the sender\n\t\tprimordialBalanceOf[_to] = primordialBalanceOf[_to].add(_value);\t\t\t\t// Add the same to the recipient\n\t\temit PrimordialTransfer(_from, _to, _value);\n\t\tassert(primordialBalanceOf[_from].add(primordialBalanceOf[_to]) == previousBalances);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get setting variables\n\t * @return startingPrimordialMultiplier The starting multiplier used to calculate primordial ion\n\t * @return endingPrimordialMultiplier The ending multiplier used to calculate primordial ion\n\t * @return startingNetworkBonusMultiplier The starting multiplier used to calculate network ion bonus\n\t * @return endingNetworkBonusMultiplier The ending multiplier used to calculate network ion bonus\n\t */\n\tfunction _getSettingVariables() internal view returns (uint256, uint256, uint256, uint256) {\n\t\t(uint256 startingPrimordialMultiplier,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'startingPrimordialMultiplier');\n\t\t(uint256 endingPrimordialMultiplier,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'endingPrimordialMultiplier');\n\n\t\t(uint256 startingNetworkBonusMultiplier,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'startingNetworkBonusMultiplier');\n\t\t(uint256 endingNetworkBonusMultiplier,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'endingNetworkBonusMultiplier');\n\n\t\treturn (startingPrimordialMultiplier, endingPrimordialMultiplier, startingNetworkBonusMultiplier, endingNetworkBonusMultiplier);\n\t}\n}\n\n\n\n\n\n\ncontract Pathos is TAOCurrency {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {}\n}\n\n\n\n\n\ncontract Ethos is TAOCurrency {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {}\n}\n\n\n\n\n\n\n\n/**\n * @title AOEarning\n *\n * This contract stores the earning from staking/hosting content on AO\n */\ncontract AOEarning is TheAO, IAOEarning {\n\tusing SafeMath for uint256;\n\n\taddress public settingTAOId;\n\taddress public aoSettingAddress;\n\taddress public aoIonAddress;\n\taddress public nameFactoryAddress;\n\taddress public pathosAddress;\n\taddress public ethosAddress;\n\taddress public aoContentAddress;\n\taddress public aoStakedContentAddress;\n\taddress public aoContentHostAddress;\n\taddress public aoPurchaseReceiptAddress;\n\taddress public namePublicKeyAddress;\n\n\tIAOSetting internal _aoSetting;\n\tAOIon internal _aoIon;\n\tINameFactory internal _nameFactory;\n\tPathos internal _pathos;\n\tEthos internal _ethos;\n\tIAOContent internal _aoContent;\n\tIAOStakedContent internal _aoStakedContent;\n\tIAOContentHost internal _aoContentHost;\n\tIAOPurchaseReceipt internal _aoPurchaseReceipt;\n\tINamePublicKey internal _namePublicKey;\n\n\t// Total earning from staking content from all nodes\n\tuint256 public totalStakedContentEarning;\n\n\t// Total earning from hosting content from all nodes\n\tuint256 public totalContentHostEarning;\n\n\t// Total The AO earning\n\tuint256 public totalTheAOEarning;\n\n\t// Mapping from PurchaseReceipt ID to its escrowed earning status\n\tmapping (bytes32 => bool) internal purchaseReceiptEarningEscrowed;\n\n\t// Mapping from PurchaseReceipt ID to its unescrowed earning status\n\tmapping (bytes32 => bool) internal purchaseReceiptEarningUnescrowed;\n\n\t// Mapping from address to his/her earning from content that he/she staked\n\tmapping (address => uint256) public ownerStakedContentEarning;\n\n\t// Mapping from address to his/her earning from content that he/she hosted\n\tmapping (address => uint256) public ownerContentHostEarning;\n\n\t// Mapping from address to his/her network price earning\n\t// i.e, when staked amount = filesize\n\tmapping (address => uint256) public ownerNetworkPriceEarning;\n\n\t// Mapping from address to his/her content price earning\n\t// i.e, when staked amount > filesize\n\tmapping (address => uint256) public ownerContentPriceEarning;\n\n\t// Mapping from address to his/her inflation bonus\n\tmapping (address => uint256) public ownerInflationBonusAccrued;\n\n\tstruct Earning {\n\t\tbytes32 purchaseReceiptId;\n\t\tuint256 paymentEarning;\n\t\tuint256 inflationBonus;\n\t\tuint256 pathosAmount;\n\t\tuint256 ethosAmount;\n\t}\n\n\t// Mapping from address to earning from staking content of a PurchaseReceipt ID\n\tmapping (address => mapping(bytes32 => Earning)) public ownerPurchaseReceiptStakeEarnings;\n\n\t// Mapping from address to earning from hosting content of a PurchaseReceipt ID\n\tmapping (address => mapping(bytes32 => Earning)) public ownerPurchaseReceiptHostEarnings;\n\n\t// Mapping from PurchaaseReceipt ID to earning for The AO\n\tmapping (bytes32 => Earning) public theAOPurchaseReceiptEarnings;\n\n\t// Mapping from StakedContent ID to it's total earning from staking\n\tmapping (bytes32 => uint256) public stakedContentStakeEarning;\n\n\t// Mapping from StakedContent ID to it's total earning from hosting\n\tmapping (bytes32 => uint256) public stakedContentHostEarning;\n\n\t// Mapping from StakedContent ID to it's total earning earned by The AO\n\tmapping (bytes32 => uint256) public stakedContentTheAOEarning;\n\n\t// Mapping from content host ID to it's total earning\n\tmapping (bytes32 => uint256) public contentHostEarning;\n\n\t// Event to be broadcasted to public when content creator/host earns the payment split in escrow when request node buys the content\n\t// recipientType:\n\t// 0 => Content Creator (Stake Owner)\n\t// 1 => Node Host\n\t// 2 => The AO\n\tevent PaymentEarningEscrowed(address indexed recipient, bytes32 indexed purchaseReceiptId, uint256 price, uint256 recipientProfitPercentage, uint256 recipientPaymentEarning, uint8 recipientType);\n\n\t// Event to be broadcasted to public when content creator/host/The AO earns inflation bonus in escrow when request node buys the content\n\t// recipientType:\n\t// 0 => Content Creator (Stake Owner)\n\t// 1 => Node Host\n\t// 2 => The AO\n\tevent InflationBonusEscrowed(address indexed recipient, bytes32 indexed purchaseReceiptId, uint256 totalInflationBonusAmount, uint256 recipientProfitPercentage, uint256 recipientInflationBonus, uint8 recipientType);\n\n\t// Event to be broadcasted to public when content creator/host/The AO earning is released from escrow\n\t// recipientType:\n\t// 0 => Content Creator (Stake Owner)\n\t// 1 => Node Host\n\t// 2 => The AO\n\tevent EarningUnescrowed(address indexed recipient, bytes32 indexed purchaseReceiptId, uint256 paymentEarning, uint256 inflationBonus, uint8 recipientType);\n\n\t// Event to be broadcasted to public when content creator's Name earns Pathos when a node buys a content\n\tevent PathosEarned(address indexed nameId, bytes32 indexed purchaseReceiptId, uint256 amount);\n\n\t// Event to be broadcasted to public when host's Name earns Ethos when a node buys a content\n\tevent EthosEarned(address indexed nameId, bytes32 indexed purchaseReceiptId, uint256 amount);\n\n\t/**\n\t * @dev Constructor function\n\t * @param _settingTAOId The TAO ID that controls the setting\n\t * @param _aoSettingAddress The address of AOSetting\n\t * @param _aoIonAddress The address of AOIon\n\t * @param _nameFactoryAddress The address of NameFactory\n\t * @param _pathosAddress The address of Pathos\n\t * @param _ethosAddress The address of Ethos\n\t * @param _namePublicKeyAddress The address of NamePublicKey\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tconstructor(address _settingTAOId,\n\t\taddress _aoSettingAddress,\n\t\taddress _aoIonAddress,\n\t\taddress _nameFactoryAddress,\n\t\taddress _pathosAddress,\n\t\taddress _ethosAddress,\n\t\taddress _aoContentAddress,\n\t\taddress _namePublicKeyAddress,\n\t\taddress _nameTAOPositionAddress) public {\n\t\tsetSettingTAOId(_settingTAOId);\n\t\tsetAOSettingAddress(_aoSettingAddress);\n\t\tsetAOIonAddress(_aoIonAddress);\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetPathosAddress(_pathosAddress);\n\t\tsetEthosAddress(_ethosAddress);\n\t\tsetAOContentAddress(_aoContentAddress);\n\t\tsetNamePublicKeyAddress(_namePublicKeyAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOIon address\n\t * @param _aoIonAddress The address of AOIon\n\t */\n\tfunction setAOIonAddress(address _aoIonAddress) public onlyTheAO {\n\t\trequire (_aoIonAddress != address(0));\n\t\taoIonAddress = _aoIonAddress;\n\t\t_aoIon = AOIon(_aoIonAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets Pathos address\n\t * @param _pathosAddress The address of Pathos\n\t */\n\tfunction setPathosAddress(address _pathosAddress) public onlyTheAO {\n\t\trequire (_pathosAddress != address(0));\n\t\tpathosAddress = _pathosAddress;\n\t\t_pathos = Pathos(_pathosAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets Ethos address\n\t * @param _ethosAddress The address of Ethos\n\t */\n\tfunction setEthosAddress(address _ethosAddress) public onlyTheAO {\n\t\trequire (_ethosAddress != address(0));\n\t\tethosAddress = _ethosAddress;\n\t\t_ethos = Ethos(_ethosAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOContent address\n\t * @param _aoContentAddress The address of AOContent\n\t */\n\tfunction setAOContentAddress(address _aoContentAddress) public onlyTheAO {\n\t\trequire (_aoContentAddress != address(0));\n\t\taoContentAddress = _aoContentAddress;\n\t\t_aoContent = IAOContent(_aoContentAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOStakedContent address\n\t * @param _aoStakedContentAddress The address of AOStakedContent\n\t */\n\tfunction setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {\n\t\trequire (_aoStakedContentAddress != address(0));\n\t\taoStakedContentAddress = _aoStakedContentAddress;\n\t\t_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOContentHost address\n\t * @param _aoContentHostAddress The address of AOContentHost\n\t */\n\tfunction setAOContentHostAddress(address _aoContentHostAddress) public onlyTheAO {\n\t\trequire (_aoContentHostAddress != address(0));\n\t\taoContentHostAddress = _aoContentHostAddress;\n\t\t_aoContentHost = IAOContentHost(_aoContentHostAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOPurchaseReceipt address\n\t * @param _aoPurchaseReceiptAddress The address of AOPurchaseReceipt\n\t */\n\tfunction setAOPurchaseReceiptAddress(address _aoPurchaseReceiptAddress) public onlyTheAO {\n\t\trequire (_aoPurchaseReceiptAddress != address(0));\n\t\taoPurchaseReceiptAddress = _aoPurchaseReceiptAddress;\n\t\t_aoPurchaseReceipt = IAOPurchaseReceipt(_aoPurchaseReceiptAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NamePublicKey address\n\t * @param _namePublicKeyAddress The address of NamePublicKey\n\t */\n\tfunction setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {\n\t\trequire (_namePublicKeyAddress != address(0));\n\t\tnamePublicKeyAddress = _namePublicKeyAddress;\n\t\t_namePublicKey = INamePublicKey(_namePublicKeyAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Calculate the content creator/host/The AO earning when request node buys the content.\n\t *\t\tAlso at this stage, all of the earnings are stored in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t * @return true on success\n\t */\n\tfunction calculateEarning(bytes32 _purchaseReceiptId) external inWhitelist returns (bool) {\n\t\trequire (_aoPurchaseReceipt.isExist(_purchaseReceiptId));\n\t\trequire (!purchaseReceiptEarningEscrowed[_purchaseReceiptId]);\n\t\tpurchaseReceiptEarningEscrowed[_purchaseReceiptId] = true;\n\n\t\t// Split the payment earning between content creator and host and store them in escrow\n\t\t_escrowPaymentEarning(_purchaseReceiptId);\n\n\t\t// Calculate the inflation bonus earning for content creator/node/The AO in escrow\n\t\t_escrowInflationBonus(_purchaseReceiptId);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Release the payment earning and inflation bonus that is in escrow for specific PurchaseReceipt ID\n\t * @param _purchaseReceiptId The purchase receipt ID to check\n\t * @return true on success\n\t */\n\tfunction releaseEarning(bytes32 _purchaseReceiptId) external inWhitelist returns (bool) {\n\t\trequire (_aoPurchaseReceipt.isExist(_purchaseReceiptId));\n\t\trequire (purchaseReceiptEarningEscrowed[_purchaseReceiptId] && !purchaseReceiptEarningUnescrowed[_purchaseReceiptId]);\n\t\tpurchaseReceiptEarningUnescrowed[_purchaseReceiptId] = true;\n\n\t\t(bytes32 _contentHostId, bytes32 _stakedContentId, bytes32 _contentId,,, uint256 _amountPaidByBuyer,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\t\t(, address _stakeOwner,,,,,,) = _aoStakedContent.getById(_stakedContentId);\n\t\t(,, address _host,,) = _aoContentHost.getById(_contentHostId);\n\t\t(, uint256 _fileSize,,,,,,,) = _aoContent.getById(_contentId);\n\n\t\t// Release the earning in escrow for stake owner\n\t\t_releaseEarning(_stakedContentId, _contentHostId, _purchaseReceiptId, _amountPaidByBuyer > _fileSize, _stakeOwner, 0);\n\n\t\t// Release the earning in escrow for host\n\t\t_releaseEarning(_stakedContentId, _contentHostId, _purchaseReceiptId, _amountPaidByBuyer > _fileSize, _host, 1);\n\n\t\t// Release the earning in escrow for The AO\n\t\t_releaseEarning(_stakedContentId, _contentHostId, _purchaseReceiptId, _amountPaidByBuyer > _fileSize, theAO, 2);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Return the earning information of a StakedContent ID\n\t * @param _stakedContentId The ID of the staked content\n\t * @return the total earning from staking this content\n\t * @return the total earning from hosting this content\n\t * @return the total The AO earning of this content\n\t */\n\tfunction getTotalStakedContentEarning(bytes32 _stakedContentId) external view returns (uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tstakedContentStakeEarning[_stakedContentId],\n\t\t\tstakedContentHostEarning[_stakedContentId],\n\t\t\tstakedContentTheAOEarning[_stakedContentId]\n\t\t);\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Calculate the payment split for content creator/host and store them in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t */\n\tfunction _escrowPaymentEarning(bytes32 _purchaseReceiptId) internal {\n\t\t(uint256 _stakeOwnerEarning, uint256 _pathosAmount) = _escrowStakeOwnerPaymentEarning(_purchaseReceiptId);\n\t\t(uint256 _ethosAmount) = _escrowHostPaymentEarning(_purchaseReceiptId, _stakeOwnerEarning);\n\t\t_escrowTheAOPaymentEarning(_purchaseReceiptId, _pathosAmount, _ethosAmount);\n\t}\n\n\t/**\n\t * @dev Calculate the payment split for content creator and store them in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t * @return The stake owner's earning amount\n\t * @return The pathos earned from this transaction\n\t */\n\tfunction _escrowStakeOwnerPaymentEarning(bytes32 _purchaseReceiptId) internal returns (uint256, uint256) {\n\t\t(uint256 inflationRate,,) = _getSettingVariables();\n\t\t(, bytes32 _stakedContentId, bytes32 _contentId, address _buyer, uint256 _price,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\t\t(, address _stakeOwner,,,, uint256 _profitPercentage,,) = _aoStakedContent.getById(_stakedContentId);\n\n\t\tEarning storage _ownerPurchaseReceiptStakeEarning = ownerPurchaseReceiptStakeEarnings[_stakeOwner][_purchaseReceiptId];\n\t\t_ownerPurchaseReceiptStakeEarning.purchaseReceiptId = _purchaseReceiptId;\n\n\t\t// Store how much the content creator (stake owner) earns in escrow\n\t\t// If content is AO Content Usage Type, stake owner earns 0%\n\t\t// and all profit goes to the serving host node\n\t\t_ownerPurchaseReceiptStakeEarning.paymentEarning = _aoContent.isAOContentUsageType(_contentId) ? (_price.mul(_profitPercentage)).div(AOLibrary.PERCENTAGE_DIVISOR()) : 0;\n\t\t// Pathos = Price X Node Share X Inflation Rate\n\t\t_ownerPurchaseReceiptStakeEarning.pathosAmount = _price.mul(AOLibrary.PERCENTAGE_DIVISOR().sub(_profitPercentage)).mul(inflationRate).div(AOLibrary.PERCENTAGE_DIVISOR()).div(AOLibrary.PERCENTAGE_DIVISOR());\n\t\trequire (_aoIon.escrowFrom(_namePublicKey.getDefaultKey(_buyer), _namePublicKey.getDefaultKey(_stakeOwner), _ownerPurchaseReceiptStakeEarning.paymentEarning));\n\t\temit PaymentEarningEscrowed(_stakeOwner, _purchaseReceiptId, _price, _profitPercentage, _ownerPurchaseReceiptStakeEarning.paymentEarning, 0);\n\t\treturn (_ownerPurchaseReceiptStakeEarning.paymentEarning, _ownerPurchaseReceiptStakeEarning.pathosAmount);\n\t}\n\n\t/**\n\t * @dev Calculate the payment split for host node and store them in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t * @param _stakeOwnerEarning The stake owner's earning amount\n\t * @return The ethos earned from this transaction\n\t */\n\tfunction _escrowHostPaymentEarning(bytes32 _purchaseReceiptId, uint256 _stakeOwnerEarning) internal returns (uint256) {\n\t\t(uint256 inflationRate,,) = _getSettingVariables();\n\t\t(bytes32 _contentHostId, bytes32 _stakedContentId, bytes32 _contentId, address _buyer, uint256 _price,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\t\t(,,,,, uint256 _profitPercentage,,) = _aoStakedContent.getById(_stakedContentId);\n\t\t(,, address _host,,) = _aoContentHost.getById(_contentHostId);\n\n\t\t// Store how much the node host earns in escrow\n\t\tEarning storage _ownerPurchaseReceiptHostEarning = ownerPurchaseReceiptHostEarnings[_host][_purchaseReceiptId];\n\t\t_ownerPurchaseReceiptHostEarning.purchaseReceiptId = _purchaseReceiptId;\n\t\t_ownerPurchaseReceiptHostEarning.paymentEarning = _price.sub(_stakeOwnerEarning);\n\t\t// Ethos = Price X Creator Share X Inflation Rate\n\t\t_ownerPurchaseReceiptHostEarning.ethosAmount = _price.mul(_profitPercentage).mul(inflationRate).div(AOLibrary.PERCENTAGE_DIVISOR()).div(AOLibrary.PERCENTAGE_DIVISOR());\n\n\t\tif (_aoContent.isAOContentUsageType(_contentId)) {\n\t\t\trequire (_aoIon.escrowFrom(_namePublicKey.getDefaultKey(_buyer), _namePublicKey.getDefaultKey(_host), _ownerPurchaseReceiptHostEarning.paymentEarning));\n\t\t} else {\n\t\t\t// If not AO Content usage type, we want to mint to the host\n\t\t\trequire (_aoIon.mintEscrow(_namePublicKey.getDefaultKey(_host), _ownerPurchaseReceiptHostEarning.paymentEarning));\n\t\t}\n\t\temit PaymentEarningEscrowed(_host, _purchaseReceiptId, _price, AOLibrary.PERCENTAGE_DIVISOR().sub(_profitPercentage), _ownerPurchaseReceiptHostEarning.paymentEarning, 1);\n\t\treturn _ownerPurchaseReceiptHostEarning.ethosAmount;\n\t}\n\n\t/**\n\t * @dev Calculate the earning for The AO and store them in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t * @param _pathosAmount The amount of pathos earned by stake owner\n\t * @param _ethosAmount The amount of ethos earned by host node\n\t */\n\tfunction _escrowTheAOPaymentEarning(bytes32 _purchaseReceiptId, uint256 _pathosAmount, uint256 _ethosAmount) internal {\n\t\t(,,uint256 theAOEthosEarnedRate) = _getSettingVariables();\n\t\t(,,,, uint256 _price,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\n\t\t// Store how much The AO earns in escrow\n\t\tEarning storage _theAOPurchaseReceiptEarning = theAOPurchaseReceiptEarnings[_purchaseReceiptId];\n\t\t_theAOPurchaseReceiptEarning.purchaseReceiptId = _purchaseReceiptId;\n\t\t// Pathos + X% of Ethos\n\t\t_theAOPurchaseReceiptEarning.paymentEarning = _pathosAmount.add(_ethosAmount.mul(theAOEthosEarnedRate).div(AOLibrary.PERCENTAGE_DIVISOR()));\n\t\trequire (_aoIon.mintEscrow(theAO, _theAOPurchaseReceiptEarning.paymentEarning));\n\t\temit PaymentEarningEscrowed(theAO, _purchaseReceiptId, _price, 0, _theAOPurchaseReceiptEarning.paymentEarning, 2);\n\t}\n\n\t/**\n\t * @dev Mint the inflation bonus for content creator/host/The AO and store them in escrow\n\t * @param _purchaseReceiptId The ID of the purchase receipt object\n\t */\n\tfunction _escrowInflationBonus(\n\t\tbytes32 _purchaseReceiptId\n\t) internal {\n\t\t(, uint256 theAOCut,) = _getSettingVariables();\n\t\tuint256 _inflationBonusAmount = _calculateInflationBonus(_purchaseReceiptId);\n\t\t(bytes32 _contentHostId, bytes32 _stakedContentId, bytes32 _contentId,,,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\t\t(, address _stakeOwner,,,, uint256 _profitPercentage,,) = _aoStakedContent.getById(_stakedContentId);\n\t\t(,, address _host,,) = _aoContentHost.getById(_contentHostId);\n\n\t\tif (_inflationBonusAmount > 0) {\n\t\t\t// Store how much the content creator earns in escrow\n\t\t\tuint256 _stakeOwnerInflationBonus = _aoContent.isAOContentUsageType(_contentId) ? (_inflationBonusAmount.mul(_profitPercentage)).div(AOLibrary.PERCENTAGE_DIVISOR()) : 0;\n\t\t\tEarning storage _ownerPurchaseReceiptStakeEarning = ownerPurchaseReceiptStakeEarnings[_stakeOwner][_purchaseReceiptId];\n\t\t\t_ownerPurchaseReceiptStakeEarning.inflationBonus = _stakeOwnerInflationBonus;\n\t\t\trequire (_aoIon.mintEscrow(_namePublicKey.getDefaultKey(_stakeOwner), _ownerPurchaseReceiptStakeEarning.inflationBonus));\n\t\t\temit InflationBonusEscrowed(_stakeOwner, _purchaseReceiptId, _inflationBonusAmount, _profitPercentage, _ownerPurchaseReceiptStakeEarning.inflationBonus, 0);\n\n\t\t\t// Store how much the host earns in escrow\n\t\t\tEarning storage _ownerPurchaseReceiptHostEarning = ownerPurchaseReceiptHostEarnings[_host][_purchaseReceiptId];\n\t\t\t_ownerPurchaseReceiptHostEarning.inflationBonus = _inflationBonusAmount.sub(_stakeOwnerInflationBonus);\n\t\t\trequire (_aoIon.mintEscrow(_namePublicKey.getDefaultKey(_host), _ownerPurchaseReceiptHostEarning.inflationBonus));\n\t\t\temit InflationBonusEscrowed(_host, _purchaseReceiptId, _inflationBonusAmount, AOLibrary.PERCENTAGE_DIVISOR().sub(_profitPercentage), _ownerPurchaseReceiptHostEarning.inflationBonus, 1);\n\n\t\t\t// Store how much the The AO earns in escrow\n\t\t\tEarning storage _theAOPurchaseReceiptEarning = theAOPurchaseReceiptEarnings[_purchaseReceiptId];\n\t\t\t_theAOPurchaseReceiptEarning.inflationBonus = (_inflationBonusAmount.mul(theAOCut)).div(AOLibrary.PERCENTAGE_DIVISOR());\n\t\t\trequire (_aoIon.mintEscrow(theAO, _theAOPurchaseReceiptEarning.inflationBonus));\n\t\t\temit InflationBonusEscrowed(theAO, _purchaseReceiptId, _inflationBonusAmount, theAOCut, _theAOPurchaseReceiptEarning.inflationBonus, 2);\n\t\t} else {\n\t\t\temit InflationBonusEscrowed(_stakeOwner, _purchaseReceiptId, 0, _profitPercentage, 0, 0);\n\t\t\temit InflationBonusEscrowed(_host, _purchaseReceiptId, 0, AOLibrary.PERCENTAGE_DIVISOR().sub(_profitPercentage), 0, 1);\n\t\t\temit InflationBonusEscrowed(theAO, _purchaseReceiptId, 0, theAOCut, 0, 2);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the inflation bonus amount\n\t * @param _purchaseReceiptId The ID of the PurchaseReceipt\n\t * @return the bonus network amount\n\t */\n\tfunction _calculateInflationBonus(bytes32 _purchaseReceiptId) internal view returns (uint256) {\n\t\t(uint256 inflationRate,,) = _getSettingVariables();\n\t\t(, bytes32 _stakedContentId,,,,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);\n\t\t(,,uint256 _networkAmount, uint256 _primordialAmount, uint256 _primordialWeightedMultiplier,,,) = _aoStakedContent.getById(_stakedContentId);\n\n\t\tuint256 _networkBonus = _networkAmount.mul(inflationRate).div(AOLibrary.PERCENTAGE_DIVISOR());\n\t\tuint256 _primordialBonus = _primordialAmount.mul(_primordialWeightedMultiplier).div(AOLibrary.MULTIPLIER_DIVISOR()).mul(inflationRate).div(AOLibrary.PERCENTAGE_DIVISOR());\n\t\treturn _networkBonus.add(_primordialBonus);\n\t}\n\n\t/**\n\t * @dev Release the escrowed earning for a specific PurchaseReceipt ID for an account\n\t * @param _stakedContentId The ID of the staked content\n\t * @param _contentHostId The ID of the hosted content\n\t * @param _purchaseReceiptId The purchase receipt ID\n\t * @param _buyerPaidMoreThanFileSize Whether or not the request node paid more than filesize when buying the content\n\t * @param _account The address of account that made the earning (content creator/host)\n\t * @param _recipientType The type of the earning recipient (0 => content creator. 1 => host. 2 => theAO)\n\t */\n\tfunction _releaseEarning(bytes32 _stakedContentId, bytes32 _contentHostId, bytes32 _purchaseReceiptId, bool _buyerPaidMoreThanFileSize, address _account, uint8 _recipientType) internal {\n\t\t// Make sure the recipient type is valid\n\t\trequire (_recipientType >= 0 && _recipientType <= 2);\n\n\t\tuint256 _paymentEarning;\n\t\tuint256 _inflationBonus;\n\t\tuint256 _totalEarning;\n\t\tuint256 _pathosAmount;\n\t\tuint256 _ethosAmount;\n\t\tif (_recipientType == 0) {\n\t\t\tEarning storage _earning = ownerPurchaseReceiptStakeEarnings[_account][_purchaseReceiptId];\n\t\t\t_paymentEarning = _earning.paymentEarning;\n\t\t\t_inflationBonus = _earning.inflationBonus;\n\t\t\t_pathosAmount = _earning.pathosAmount;\n\t\t\t_earning.paymentEarning = 0;\n\t\t\t_earning.inflationBonus = 0;\n\t\t\t_earning.pathosAmount = 0;\n\t\t\t_earning.ethosAmount = 0;\n\t\t\t_totalEarning = _paymentEarning.add(_inflationBonus);\n\n\t\t\t// Update the global var settings\n\t\t\ttotalStakedContentEarning = totalStakedContentEarning.add(_totalEarning);\n\t\t\townerStakedContentEarning[_account] = ownerStakedContentEarning[_account].add(_totalEarning);\n\t\t\tstakedContentStakeEarning[_stakedContentId] = stakedContentStakeEarning[_stakedContentId].add(_totalEarning);\n\t\t\tif (_buyerPaidMoreThanFileSize) {\n\t\t\t\townerContentPriceEarning[_account] = ownerContentPriceEarning[_account].add(_totalEarning);\n\t\t\t} else {\n\t\t\t\townerNetworkPriceEarning[_account] = ownerNetworkPriceEarning[_account].add(_totalEarning);\n\t\t\t}\n\t\t\townerInflationBonusAccrued[_account] = ownerInflationBonusAccrued[_account].add(_inflationBonus);\n\n\t\t\t// Reward the content creator/stake owner with some Pathos\n\t\t\trequire (_pathos.mint(_account, _pathosAmount));\n\t\t\temit PathosEarned(_account, _purchaseReceiptId, _pathosAmount);\n\t\t\trequire (_aoIon.unescrowFrom(_namePublicKey.getDefaultKey(_account), _totalEarning));\n\t\t} else if (_recipientType == 1) {\n\t\t\tEarning storage _earning = ownerPurchaseReceiptHostEarnings[_account][_purchaseReceiptId];\n\t\t\t_paymentEarning = _earning.paymentEarning;\n\t\t\t_inflationBonus = _earning.inflationBonus;\n\t\t\t_ethosAmount = _earning.ethosAmount;\n\t\t\t_earning.paymentEarning = 0;\n\t\t\t_earning.inflationBonus = 0;\n\t\t\t_earning.pathosAmount = 0;\n\t\t\t_earning.ethosAmount = 0;\n\t\t\t_totalEarning = _paymentEarning.add(_inflationBonus);\n\n\t\t\t// Update the global var settings\n\t\t\ttotalContentHostEarning = totalContentHostEarning.add(_totalEarning);\n\t\t\townerContentHostEarning[_account] = ownerContentHostEarning[_account].add(_totalEarning);\n\t\t\tstakedContentHostEarning[_stakedContentId] = stakedContentHostEarning[_stakedContentId].add(_totalEarning);\n\t\t\tcontentHostEarning[_contentHostId] = contentHostEarning[_contentHostId].add(_totalEarning);\n\t\t\tif (_buyerPaidMoreThanFileSize) {\n\t\t\t\townerContentPriceEarning[_account] = ownerContentPriceEarning[_account].add(_totalEarning);\n\t\t\t} else {\n\t\t\t\townerNetworkPriceEarning[_account] = ownerNetworkPriceEarning[_account].add(_totalEarning);\n\t\t\t}\n\t\t\townerInflationBonusAccrued[_account] = ownerInflationBonusAccrued[_account].add(_inflationBonus);\n\n\t\t\t// Reward the host node with some Ethos\n\t\t\trequire (_ethos.mint(_account, _ethosAmount));\n\t\t\temit EthosEarned(_account, _purchaseReceiptId, _ethosAmount);\n\t\t\trequire (_aoIon.unescrowFrom(_namePublicKey.getDefaultKey(_account), _totalEarning));\n\t\t} else {\n\t\t\tEarning storage _earning = theAOPurchaseReceiptEarnings[_purchaseReceiptId];\n\t\t\t_paymentEarning = _earning.paymentEarning;\n\t\t\t_inflationBonus = _earning.inflationBonus;\n\t\t\t_earning.paymentEarning = 0;\n\t\t\t_earning.inflationBonus = 0;\n\t\t\t_earning.pathosAmount = 0;\n\t\t\t_earning.ethosAmount = 0;\n\t\t\t_totalEarning = _paymentEarning.add(_inflationBonus);\n\n\t\t\t// Update the global var settings\n\t\t\ttotalTheAOEarning = totalTheAOEarning.add(_totalEarning);\n\t\t\townerInflationBonusAccrued[_account] = ownerInflationBonusAccrued[_account].add(_inflationBonus);\n\t\t\tstakedContentTheAOEarning[_stakedContentId] = stakedContentTheAOEarning[_stakedContentId].add(_totalEarning);\n\t\t\trequire (_aoIon.unescrowFrom(_account, _totalEarning));\n\t\t}\n\t\temit EarningUnescrowed(_account, _purchaseReceiptId, _paymentEarning, _inflationBonus, _recipientType);\n\t}\n\n\t/**\n\t * @dev Get setting variables\n\t * @return inflationRate The rate to use when calculating inflation bonus\n\t * @return theAOCut The rate to use when calculating the AO earning\n\t * @return theAOEthosEarnedRate The rate to use when calculating the Ethos to AO rate for the AO\n\t */\n\tfunction _getSettingVariables() internal view returns (uint256, uint256, uint256) {\n\t\t(uint256 inflationRate,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'inflationRate');\n\t\t(uint256 theAOCut,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'theAOCut');\n\t\t(uint256 theAOEthosEarnedRate,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'theAOEthosEarnedRate');\n\n\t\treturn (inflationRate, theAOCut, theAOEthosEarnedRate);\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoStakedContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedContentEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethosAddress\",\"type\":\"address\"}],\"name\":\"setEthosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contentHostEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerContentPriceEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerStakedContentEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoIonAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoStakedContentAddress\",\"type\":\"address\"}],\"name\":\"setAOStakedContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getTotalStakedContentEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pathosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseReceiptId\",\"type\":\"bytes32\"}],\"name\":\"releaseEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namePublicKeyAddress\",\"type\":\"address\"}],\"name\":\"setNamePublicKeyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakedContentTheAOEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pathosAddress\",\"type\":\"address\"}],\"name\":\"setPathosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContentHostEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentAddress\",\"type\":\"address\"}],\"name\":\"setAOContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownerPurchaseReceiptHostEarnings\",\"outputs\":[{\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"name\":\"paymentEarning\",\"type\":\"uint256\"},{\"name\":\"inflationBonus\",\"type\":\"uint256\"},{\"name\":\"pathosAmount\",\"type\":\"uint256\"},{\"name\":\"ethosAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownerPurchaseReceiptStakeEarnings\",\"outputs\":[{\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"name\":\"paymentEarning\",\"type\":\"uint256\"},{\"name\":\"inflationBonus\",\"type\":\"uint256\"},{\"name\":\"pathosAmount\",\"type\":\"uint256\"},{\"name\":\"ethosAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentHostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoPurchaseReceiptAddress\",\"type\":\"address\"}],\"name\":\"setAOPurchaseReceiptAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakedContentStakeEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTheAOEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerInflationBonusAccrued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerNetworkPriceEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentHostAddress\",\"type\":\"address\"}],\"name\":\"setAOContentHostAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"theAOPurchaseReceiptEarnings\",\"outputs\":[{\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"name\":\"paymentEarning\",\"type\":\"uint256\"},{\"name\":\"inflationBonus\",\"type\":\"uint256\"},{\"name\":\"pathosAmount\",\"type\":\"uint256\"},{\"name\":\"ethosAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerContentHostEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namePublicKeyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseReceiptId\",\"type\":\"bytes32\"}],\"name\":\"calculateEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoPurchaseReceiptAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakedContentHostEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoIonAddress\",\"type\":\"address\"}],\"name\":\"setAOIonAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"},{\"name\":\"_aoSettingAddress\",\"type\":\"address\"},{\"name\":\"_aoIonAddress\",\"type\":\"address\"},{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_pathosAddress\",\"type\":\"address\"},{\"name\":\"_ethosAddress\",\"type\":\"address\"},{\"name\":\"_aoContentAddress\",\"type\":\"address\"},{\"name\":\"_namePublicKeyAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientProfitPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientPaymentEarning\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientType\",\"type\":\"uint8\"}],\"name\":\"PaymentEarningEscrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"totalInflationBonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientProfitPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientInflationBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientType\",\"type\":\"uint8\"}],\"name\":\"InflationBonusEscrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"paymentEarning\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inflationBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipientType\",\"type\":\"uint8\"}],\"name\":\"EarningUnescrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PathosEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purchaseReceiptId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthosEarned\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ec7aa72cb653b773b8c8c66a2e3e05669f4ef362000000000000000000000000bd314084ac5872598fdff2f31567084fc9c442700000000000000000000000007fea965a502f3f17851a57bcc57e95e03d83e98a00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd82000000000000000000000000b1b8ea7d3f55436c3cd5afcd89e56cce85a0b8b30000000000000000000000003ecc8d4ab143fb5d87024dc886762aea0254aebd0000000000000000000000008db3ae7ad65b18282947ada2a6156a47b04cac9300000000000000000000000051bedad07ab8c2470556d565f98307d89380a6da0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}