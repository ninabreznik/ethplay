{
  "address": "0xdc3d8fc2c41781b0259175bdc19516f7da11cba7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FizzyCrypto",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.7;\n\nlibrary ECDSA {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract FizzyRoles is Ownable {\n    address private _signer;\n    address payable private _assetManager;\n    address private _oracle;\n\n    event SignershipTransferred(address previousSigner, address newSigner);\n    event AssetManagerChanged(address payable previousAssetManager, address payable newAssetManager);\n    event OracleChanged(address previousOracle, address newOracle);\n\n    /**\n     * @dev Throws if called by any account other than the asset manager.\n     */\n    modifier onlyAssetManager() {\n        require(_assetManager == msg.sender, \"Sender is not the asset manager\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the oracle.\n     */\n    modifier onlyOracle() {\n        require(_oracle == msg.sender, \"Sender is not the oracle\");\n        _;\n    }\n\n    /**\n     * @dev The FizzyRoles constructor set the original signer, asset manager and oracle to the creator account.\n     */\n    constructor () internal {\n        _signer = msg.sender;\n        _assetManager = msg.sender;\n        _oracle = msg.sender;\n        emit SignershipTransferred(address(0), _signer);\n        emit AssetManagerChanged(address(0), _assetManager);\n        emit OracleChanged(address(0), _oracle);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer the signership to a newSigner.\n     * @param newSigner The address to transfer signership to.\n     */\n    function transferSignership(address newSigner) external onlyOwner {\n        require(newSigner != address(0), \"newSigner should not be address(0).\");\n        emit SignershipTransferred(_signer, newSigner);\n        _signer = newSigner;\n    }\n\n    /**\n     * @dev Allows the current owner to change the asset manager to a newManager.\n     * @param newManager The address to change asset management to.\n     */\n    function changeAssetManager(address payable newManager) external onlyOwner {\n        require(newManager != address(0), \"newManager should not be address(0).\");\n        emit AssetManagerChanged(_assetManager, newManager);\n        _assetManager = newManager;\n    }\n\n    /**\n     * @dev Allows the current owner to change the oracle to a newOracle.\n     * @param newOracle The address to change oracle to.\n     */\n    function changeOracle(address newOracle) external onlyOwner {\n        require(newOracle != address(0), \"newOracle should not be address(0).\");\n        emit OracleChanged(_oracle, newOracle);\n        _oracle = newOracle;\n    }\n\n    /**\n     * @return the address of the signer\n     */\n    function getSigner() public view returns(address) {\n        return _signer;\n    }\n\n    /**\n     * @return the address of the oracle\n     */\n    function getOracle() public view returns(address) {\n        return _oracle;\n    }\n\n    /**\n     * @return the address of the asset manager\n     */\n    function getAssetManager() public view returns(address payable) {\n        return _assetManager;\n    }\n}\n\ncontract Fizzy is FizzyRoles {\n\n    /**\n     * @dev Possible covered conditions.\n     * Each bit of a uint256 match a condition.\n     */\n    uint256 constant NONE       = 0;\n    uint256 constant CANCELLED  = 2**0;\n    uint256 constant DIVERTED   = 2**1;\n    uint256 constant REDIRECTED = 2**2;\n    uint256 constant DELAY      = 2**3;\n    uint256 constant MANUAL     = 2**4;\n\n    /**\n     * @dev Represents the status of an insurance.\n     * - Open: we do not have landing data for the flight\n     * - ClosedCompensated: the user received an indemnity and the insurance can not be updated\n     * - ClosedNotCompensated: the user did not received an indemnity and the insurance can not be updated\n     */\n    enum InsuranceStatus {\n        Open, ClosedCompensated, ClosedNotCompensated\n    }\n\n    /**\n     * @dev Structure representing an insurance.\n     * @param productId The productId of the insurance.\n     * @param premium The premium of the insurance.\n     * @param indemnity The indemnity amount sent to the user if one of the conditions of the insurance is fullfilled.\n     * @param limitArrivalTime Timestamp in seconds after which the delayCondition (when covered) is triggered when the flight land.\n     * @param conditions Flight statuses triggering compensation.\n     * @param InsuranceStatus The status of the insurance.\n     * @param compensationAddress The indemnity is sent to this address if the insurance has been paid in cryptocurrency and should be compensated.\n     */\n    struct Insurance {\n        uint256         productId;\n        uint256         premium;\n        uint256         indemnity;\n        uint256         limitArrivalTime;\n        uint256         conditions;\n        InsuranceStatus status;\n        address payable compensationAddress;\n    }\n\n    /**\n     * @dev Mapping of a flightId to an array of insurances.\n     */\n    mapping(bytes32 => Insurance[]) private insuranceList;\n\n    /**\n     * @dev Mapping of a productId to a boolean.\n     */\n    mapping(uint256 => bool) private boughtProductIds;\n\n    /**\n     * @dev Event triggered when an insurance is created.\n     * @param flightId The flightId of the insurance. Format: <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n     * @param productId ID string of product linked to the insurance.\n     * @param premium Amount of premium paid by the client.\n     * @param indemnity Amount (potentially) perceived by the client.\n     * @param limitArrivalTime Maximum time after which we trigger the delay compensation (timestamp in sec).\n     * @param conditions Flight statuses triggering compensation.\n     * @param compensationAddress The indemnity is sent to this address if the insurance has been paid in cryptocurrency and should be compensated.\n     */\n\n    event InsuranceCreation(\n        bytes32         flightId,\n        uint256         productId,\n        uint256         premium,\n        uint256         indemnity,\n        uint256         limitArrivalTime,\n        uint256         conditions,\n        address payable compensationAddress\n    );\n\n    /**\n     * @dev Event triggered when an insurance is updated.\n     * @param flightId The flightId of the insurance. Format: <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n     * @param productId ID string of product linked to the insurance.\n     * @param premium Amount of premium paid by the client.\n     * @param indemnity Amount (potentially) perceived by the client.\n     * @param triggeredCondition The condition triggered.\n     * @param status The new status of the insurance.\n     */\n    event InsuranceUpdate(\n        bytes32         flightId,\n        uint256         productId,\n        uint256         premium,\n        uint256         indemnity,\n        uint256         triggeredCondition,\n        InsuranceStatus status\n    );\n\n    /**\n     * @return the count of the insurances.\n     */\n    function getInsurancesCount(bytes32 flightId) public view returns (uint256) {\n        return insuranceList[flightId].length;\n    }\n\n    /**\n     * @dev Returns the specified insurance.\n     * @param flightId The flightId containing the insurance.\n     * @param index The index of the insurance in the array of the flight.\n     * @return An insurance\n     */\n    function getInsurance(bytes32 flightId, uint256 index) public view returns (uint256         productId,\n                                                                uint256         premium,\n                                                                uint256         indemnity,\n                                                                uint256         limitArrivalTime,\n                                                                uint256         conditions,\n                                                                InsuranceStatus status,\n                                                                address payable compensationAddress) {\n        productId = insuranceList[flightId][index].productId;\n        premium = insuranceList[flightId][index].premium;\n        indemnity = insuranceList[flightId][index].indemnity;\n        limitArrivalTime = insuranceList[flightId][index].limitArrivalTime;\n        conditions = insuranceList[flightId][index].conditions;\n        status = insuranceList[flightId][index].status;\n        compensationAddress = insuranceList[flightId][index].compensationAddress;\n    }\n\n\n    /**\n     * @return True if a product is bought, false otherwise.\n     */\n    function isProductBought(uint256 productId) public view returns (bool) {\n        return boughtProductIds[productId];\n    }\n\n    /**\n    * @dev Allow the owner to add a new insurance for the given flight.\n    *       A maximum amount of policies per flight is enforced service side.\n    * @param flightId The flightId of the insurance. Format: <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param productId ID string of product linked to the insurance.\n    * @param premium Amount of premium paid by the client.\n    * @param indemnity Amount (potentially) perceived by the client.\n    * @param limitArrivalTime Maximum time after which we trigger the delay compensation (timestamp in sec).\n    * @param conditions Flight statuses triggering compensation.\n    */\n    function addNewInsurance(\n        bytes32 flightId,\n        uint256 productId,\n        uint256 premium,\n        uint256 indemnity,\n        uint256 limitArrivalTime,\n        uint256 conditions\n        ) external onlyOwner {\n\n        _addNewInsurance(flightId, productId, premium, indemnity, limitArrivalTime, conditions, address(0));\n    }\n\n    /**\n    * @dev Set the actual arrival time of a flight.\n    *       Out of gas: a maximum amount of policies per flight is enforced server side.\n    * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param actualArrivalTime The actual arrival time of the flight (timestamp in sec)\n    */\n    function setFlightLandedAndArrivalTime(\n        bytes32 flightId,\n        uint256 actualArrivalTime)\n        external\n        onlyOracle {\n\n        for (uint i = 0; i < insuranceList[flightId].length; i++) {\n            Insurance memory insurance = insuranceList[flightId][i];\n            if (insurance.status == InsuranceStatus.Open) {\n                InsuranceStatus newStatus;\n                uint256 triggeredCondition;\n\n                if (_containsCondition(insurance.conditions, DELAY)) {\n                    if (actualArrivalTime > insurance.limitArrivalTime) {\n                        triggeredCondition = DELAY;\n                        newStatus = InsuranceStatus.ClosedCompensated;\n                        compensateIfEtherPayment(insurance);\n                    } else {\n                        triggeredCondition = NONE;\n                        newStatus = InsuranceStatus.ClosedNotCompensated;\n                        noCompensateIfEtherPayment(insurance);\n                    }\n                } else {\n                    triggeredCondition = NONE;\n                    newStatus = InsuranceStatus.ClosedNotCompensated;\n                    noCompensateIfEtherPayment(insurance);\n                }\n\n                insuranceList[flightId][i].status = newStatus;\n\n                emit InsuranceUpdate(\n                    flightId,\n                    insurance.productId,\n                    insurance.premium,\n                    insurance.indemnity,\n                    triggeredCondition,\n                    newStatus\n                    );\n            }\n        }\n    }\n\n    /**\n    * @dev Trigger an insurance's condition for a flight.\n    *       Out of gas: a maximum amount of policies per flight is enforced server side.\n    * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param conditionToTrigger insurance condition triggered.\n    */\n    function triggerCondition(\n        bytes32 flightId,\n        uint256 conditionToTrigger)\n        external\n        onlyOracle {\n\n        for (uint i = 0; i < insuranceList[flightId].length; i++) {\n            Insurance memory insurance = insuranceList[flightId][i];\n\n            if (insurance.status == InsuranceStatus.Open) {\n                InsuranceStatus newInsuranceStatus;\n                uint256 triggeredCondition;\n\n                if (_containsCondition(insurance.conditions, conditionToTrigger)) {\n                    triggeredCondition = conditionToTrigger;\n                    newInsuranceStatus = InsuranceStatus.ClosedCompensated;\n                    compensateIfEtherPayment(insurance);\n                } else {\n                    triggeredCondition = NONE;\n                    newInsuranceStatus = InsuranceStatus.ClosedNotCompensated;\n                    noCompensateIfEtherPayment(insurance);\n                }\n\n                insuranceList[flightId][i].status = newInsuranceStatus;\n\n                emit InsuranceUpdate(\n                    flightId,\n                    insurance.productId,\n                    insurance.premium,\n                    insurance.indemnity,\n                    triggeredCondition,\n                    newInsuranceStatus\n                    );\n            }\n        }\n    }\n\n    /**\n    * @dev Manually resolve an insurance contract\n    *       Out of gas: a maximum amount of policies per flight is enforced server side.\n    * @param flightId <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param productId ID string of the product linked to the insurance.\n    * @param newStatus ID of the resolution status for this insurance contract.\n    */\n    function manualInsuranceResolution(\n        bytes32 flightId,\n        uint256 productId,\n        InsuranceStatus newStatus\n    )\n        external\n        onlyOwner {\n        require(newStatus == InsuranceStatus.ClosedCompensated || newStatus == InsuranceStatus.ClosedNotCompensated,\n                \"Insurance already compensated.\");\n\n        for (uint i = 0; i < insuranceList[flightId].length; i++) {\n            Insurance memory insurance = insuranceList[flightId][i];\n            if (insurance.status == InsuranceStatus.Open && insurance.productId == productId) {\n                if (newStatus == InsuranceStatus.ClosedCompensated) {\n                    compensateIfEtherPayment(insurance);\n                } else if (newStatus == InsuranceStatus.ClosedNotCompensated) {\n                    noCompensateIfEtherPayment(insurance);\n                }\n\n                insuranceList[flightId][i].status = newStatus;\n\n                emit InsuranceUpdate(\n                    flightId,\n                    insurance.productId,\n                    insurance.premium,\n                    insurance.indemnity,\n                    MANUAL,\n                    newStatus\n                    );\n            }\n        }\n    }\n\n    function _addNewInsurance (\n        bytes32 flightId,\n        uint256 productId,\n        uint256 premium,\n        uint256 indemnity,\n        uint256  limitArrivalTime,\n        uint256 conditions,\n        address payable compensationAddress\n    ) internal {\n\n        require(boughtProductIds[productId] == false, \"This product has already been bought.\");\n\n        Insurance memory newInsurance;\n        newInsurance.productId = productId;\n        newInsurance.premium = premium;\n        newInsurance.indemnity = indemnity;\n        newInsurance.limitArrivalTime = limitArrivalTime;\n        newInsurance.conditions = conditions;\n        newInsurance.status = InsuranceStatus.Open;\n        newInsurance.compensationAddress = compensationAddress;\n\n        insuranceList[flightId].push(newInsurance);\n\n        boughtProductIds[productId] = true;\n\n        emit InsuranceCreation(flightId, productId, premium, indemnity, limitArrivalTime, conditions, compensationAddress);\n    }\n\n    function _compensate(address payable to, uint256 amount, uint256 productId) internal returns (bool success);\n    function _noCompensate(uint256 amount) internal returns (bool success);\n\n    /**\n     * @dev Compensate the customer if the compensation address is different from address(0).\n     * @param insurance Insurance to compensate.\n     */\n    function compensateIfEtherPayment(Insurance memory insurance) private {\n        if (insurance.compensationAddress != address(0)) {\n            _compensate(insurance.compensationAddress, insurance.indemnity, insurance.productId);\n        }\n    }\n\n    /**\n     * @dev Do not compensate the insurance. Add indemnity to available exposure.\n     * @param insurance Closed insurance which will not be compensated.\n     */\n    function noCompensateIfEtherPayment(Insurance memory insurance) private {\n        if (insurance.compensationAddress != address(0)) {\n            _noCompensate(insurance.indemnity);\n        }\n    }\n\n    /**\n     * @dev Check if the conditions covered by the insurance includes the specified condition.\n     * @param a All the conditions covered by the insurance.\n     * @param b Single condition to check.\n     * @return True if the condition to check is included in the covered conditions, false otherwise.\n     */\n    function _containsCondition(uint256 a, uint256 b) private pure returns (bool) {\n        return (a & b) != 0;\n    }\n}\n\ncontract FizzyCrypto is Fizzy {\n\n    uint256 private _availableExposure;\n    uint256 private _collectedTaxes;\n\n    event EtherCompensation(uint256 amount, address to, uint256 productId);\n    event EtherCompensationError(uint256 amount, address to, uint256 productId);\n\n    /**\n    * @dev Throws if called with a timestampLimit greater than the block timestamp.\n    * @param timestampLimit Timestamp to compare to the block timestamp.\n    */\n    modifier beforeTimestampLimit(uint256 timestampLimit) {\n        require(timestampLimit >= now, \"The transaction is invalid: the timestamp limit has been reached.\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called with an amount greater than the available exposure.\n    * @param amount Amount to compare to the available exposure.\n    */\n    modifier enoughExposure(uint256 amount) {\n        require(_availableExposure >= amount, \"Available exposure can not be reached\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called with an amount greater than the collected taxes.\n    * @param amount Amount to compare to the collected taxes.\n    */\n    modifier enoughTaxes(uint256 amount) {\n        require(_collectedTaxes >= amount, \"Cannot withdraw more taxes than all collected taxes\");\n        _;\n    }\n\n    /**\n    * @dev Allows the asset manager to deposit ether on the smart contract.\n    */\n    function deposit() external payable onlyAssetManager {\n        _availableExposure = _availableExposure + msg.value;\n    }\n\n    /**\n    * @dev Allows the asset manager to withdraw ether from the smart contract.\n    * @param amount Amount of ether to withdraw. Can not be greater than the available exposure.\n    */\n    function withdraw(uint256 amount) external onlyAssetManager enoughExposure(amount) {\n        _availableExposure = _availableExposure - amount;\n        msg.sender.transfer(amount);\n    }\n\n    /**\n    * @dev Allows the asset manager to withdraw taxes from the smart contract.\n    * @param amount Amount of taxes to withdraw. Can not be greater than the available taxes.\n    */\n    function withdrawTaxes(uint256 amount) external onlyAssetManager enoughTaxes(amount) {\n        _collectedTaxes = _collectedTaxes - amount;\n        msg.sender.transfer(amount);\n    }\n\n    /**\n    * @dev Allows a customer to buy an insurance with ether.\n    *       There is currently a maximum of 10 insurances available for each flight. It is enforced server side.\n    * @param flightId The flightId of the insurance. Format: <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param productId ID string of product linked to the insurance.\n    * @param premium Amount of premium paid by the client.\n    * @param indemnity Amount (potentially) perceived by the client.\n    * @param taxes Taxes included in the premium.\n    * @param limitArrivalTime Maximum time after which we trigger the delay compensation (timestamp in sec).\n    * @param conditions Flight statuses triggering compensation.\n    * @param timestampLimit Maximum timestamp to accept the transaction.\n    * @param buyerAddress Address of the buyer.\n    * @param signature Signature of the parameters.\n    */\n    function buyInsurance(\n        bytes32        flightId,\n        uint256        productId,\n        uint256        premium,\n        uint256        indemnity,\n        uint256        taxes,\n        uint256        limitArrivalTime,\n        uint256        conditions,\n        uint256        timestampLimit,\n        address        buyerAddress,\n        bytes calldata signature\n    )\n        external\n        payable\n        beforeTimestampLimit(timestampLimit)\n        enoughExposure(indemnity)\n    {\n        _checkSignature(flightId, productId, premium, indemnity, taxes, limitArrivalTime, conditions, timestampLimit, buyerAddress, signature);\n\n        require(buyerAddress == msg.sender, \"Wrong buyer address.\");\n        require(premium >= taxes, \"The taxes must be included in the premium.\");\n        require(premium == msg.value, \"The amount sent does not match the price of the order.\");\n\n        _addNewInsurance(flightId, productId, premium, indemnity, limitArrivalTime, conditions, msg.sender);\n\n        _availableExposure = _availableExposure + premium - taxes - indemnity;\n        _collectedTaxes = _collectedTaxes + taxes;\n    }\n\n    /**\n     * @return The available exposure.\n     */\n    function availableExposure() external view returns(uint256) {\n        return _availableExposure;\n    }\n\n    /**\n    * @return The collected taxes.\n    */\n    function collectedTaxes() external view returns(uint256) {\n        return _collectedTaxes;\n    }\n\n    /**\n     * @dev Sends an indemnity to a user.\n     * @param to The ethereum address of the user.\n     * @param amount The amount of ether to send to the user.\n     * @param productId The productId of the insurance.\n     */\n    function _compensate(address payable to, uint256 amount, uint256 productId) internal returns (bool) {\n        if(to.send(amount)) {\n            emit EtherCompensation(amount, to, productId);\n            return true;\n        } else {\n            getAssetManager().transfer(amount);\n            emit EtherCompensationError(amount, to, productId);\n            return false;\n        }\n    }\n\n    /**\n    * @dev Add the indemnity amount of an insurance to the available exposure.\n    *       Called when no condition of the insurance was triggered.\n    * @param amount Amount of the indemnity which will be added to the available exposure.\n    */\n    function _noCompensate(uint256 amount) internal returns (bool) {\n        _availableExposure = _availableExposure + amount;\n        return true;\n    }\n\n    /**\n    * @dev Check the signature of the parameters. Throws if the decyphered address is not equals to the signer address.\n    * @param flightId The flightId of the insurance. Format: <carrier_code><flight_number>.<timestamp_in_sec_of_departure_date>\n    * @param productId ID string of product linked to the insurance.\n    * @param premium Amount of premium paid by the client.\n    * @param indemnity Amount (potentially) perceived by the client.\n    * @param taxes Taxes included in the premium.\n    * @param limitArrivalTime Maximum time after which we trigger the delay compensation (timestamp in sec).\n    * @param conditions Flight statuses triggering compensation.\n    * @param timestampLimit Maximum timestamp to accept the transaction.\n    * @param buyerAddress Address of the buyer.\n    * @param signature Signature of the parameters.\n    */\n    function _checkSignature(\n        bytes32 flightId,\n        uint256 productId,\n        uint256 premium,\n        uint256 indemnity,\n        uint256 taxes,\n        uint256 limitArrivalTime,\n        uint256 conditions,\n        uint256 timestampLimit,\n        address buyerAddress,\n        bytes memory signature\n    ) private view {\n\n        bytes32 messageHash = keccak256(abi.encodePacked(\n            flightId,\n            productId,\n            premium,\n            indemnity,\n            taxes,\n            limitArrivalTime,\n            conditions,\n            timestampLimit,\n            buyerAddress\n        ));\n\n        address decypheredAddress = ECDSA.recover(ECDSA.toEthSignedMessageHash(messageHash), signature);\n        require(decypheredAddress == getSigner(), \"The signature is invalid if it does not match the _signer address.\");\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a333600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f452d938f8b3591b2c84cf28bb3dbfaf80782d4d1c948f62f228f933233cc81136000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a17f4a4c595a0a897525da73e6b86a1554b2bce3b5811b90be33878d939c8ba141416000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a17f05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1612c25806103c06000396000f3fe6080604052600436106101405760003560e01c80638da5cb5b116100b6578063d0e30db01161006f578063d0e30db01461068d578063d43f94a414610697578063dfe23639146106dc578063e4881c20146107c6578063eb5d6f1914610817578063f2fde38b1461084257610140565b80638da5cb5b146104cd5780638f32d59b146105245780639476cd4614610553578063b11e4f33146105c0578063b729705714610613578063beff6dbf1461063e57610140565b806347c421b51161010857806347c421b5146102a9578063645ac00b146102fa5780636d28e8051461034b578063715018a6146104085780637ac3c02f1461041f578063833b1fce1461047657610140565b8063030f91c214610145578063179c45fa146101975780632e1a7d4d146101ee57806332f847a8146102295780633bfaa4ee1461026e575b600080fd5b34801561015157600080fd5b506101956004803603606081101561016857600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190505050610893565b005b3480156101a357600080fd5b506101ac610bd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101fa57600080fd5b506102276004803603602081101561021157600080fd5b8101908080359060200190929190505050610bfb565b005b34801561023557600080fd5b5061026c6004803603604081101561024c57600080fd5b810190808035906020019092919080359060200190929190505050610d70565b005b34801561027a57600080fd5b506102a76004803603602081101561029157600080fd5b81019080803590602001909291905050506110b1565b005b3480156102b557600080fd5b506102f8600480360360208110156102cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611226565b005b34801561030657600080fd5b506103496004803603602081101561031d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113ba565b005b34801561035757600080fd5b5061038e6004803603604081101561036e57600080fd5b81019080803590602001909291908035906020019092919050505061154e565b604051808881526020018781526020018681526020018581526020018481526020018360028111156103bc57fe5b60ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200197505050505050505060405180910390f35b34801561041457600080fd5b5061041d6116f0565b005b34801561042b57600080fd5b506104346117c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048257600080fd5b5061048b6117ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d957600080fd5b506104e2611814565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053057600080fd5b5061053961183d565b604051808215151515815260200191505060405180910390f35b34801561055f57600080fd5b506105be600480360360c081101561057657600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611894565b005b3480156105cc57600080fd5b506105f9600480360360208110156105e357600080fd5b81019080803590602001909291905050506118bd565b604051808215151515815260200191505060405180910390f35b34801561061f57600080fd5b506106286118e7565b6040518082815260200191505060405180910390f35b34801561064a57600080fd5b506106776004803603602081101561066157600080fd5b81019080803590602001909291905050506118f1565b6040518082815260200191505060405180910390f35b610695611911565b005b3480156106a357600080fd5b506106da600480360360408110156106ba57600080fd5b8101908080359060200190929190803590602001909291905050506119e1565b005b6107c460048036036101408110156106f357600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561078057600080fd5b82018360208201111561079257600080fd5b803590602001918460018302840111640100000000831117156107b457600080fd5b9091929391929390505050611cfd565b005b3480156107d257600080fd5b50610815600480360360208110156107e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f93565b005b34801561082357600080fd5b5061082c612127565b6040518082815260200191505060405180910390f35b34801561084e57600080fd5b506108916004803603602081101561086557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612131565b005b61089b61183d565b6108a457600080fd5b600160028111156108b157fe5b8160028111156108bd57fe5b14806108de57506002808111156108d057fe5b8160028111156108dc57fe5b145b610950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e737572616e636520616c726561647920636f6d70656e73617465642e000081525060200191505060405180910390fd5b60008090505b6004600085815260200190815260200160002080549050811015610bcb5761097c6129d1565b60046000868152602001908152602001600020828154811061099a57fe5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166002811115610a0357fe5b6002811115610a0e57fe5b81526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060006002811115610a7757fe5b8160a001516002811115610a8757fe5b148015610a975750838160000151145b15610bbd5760016002811115610aa957fe5b836002811115610ab557fe5b1415610ac957610ac48161214e565b610af2565b600280811115610ad557fe5b836002811115610ae157fe5b1415610af157610af0816121a2565b5b5b82600460008781526020019081526020016000208381548110610b1157fe5b906000526020600020906006020160050160006101000a81548160ff02191690836002811115610b3d57fe5b02179055507fb6139234dd9e191cb2feca4bf2afc7afd44b1d882dfa84d6a98c09b559f4cd8b8582600001518360200151846040015160108860405180878152602001868152602001858152602001848152602001838152602001826002811115610ba457fe5b60ff168152602001965050505050505060405180910390a15b508080600101915050610956565b50505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e646572206973206e6f7420746865206173736574206d616e616765720081525060200191505060405180910390fd5b80806006541015610d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612b8d6025913960400191505060405180910390fd5b81600654036006819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610d6b573d6000803e3d6000fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f53656e646572206973206e6f7420746865206f7261636c65000000000000000081525060200191505060405180910390fd5b60008090505b60046000848152602001908152602001600020805490508110156110ac57610e5f6129d1565b600460008581526020019081526020016000208281548110610e7d57fe5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166002811115610ee657fe5b6002811115610ef157fe5b81526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060006002811115610f5a57fe5b8160a001516002811115610f6a57fe5b141561109e57600080610f82836080015160086121ec565b15610fc0578260600151851115610fa9576008905060019150610fa48361214e565b610fbb565b6000905060029150610fba836121a2565b5b610fd2565b6000905060029150610fd1836121a2565b5b81600460008881526020019081526020016000208581548110610ff157fe5b906000526020600020906006020160050160006101000a81548160ff0219169083600281111561101d57fe5b02179055507fb6139234dd9e191cb2feca4bf2afc7afd44b1d882dfa84d6a98c09b559f4cd8b8684600001518560200151866040015185876040518087815260200186815260200185815260200184815260200183815260200182600281111561108357fe5b60ff168152602001965050505050505060405180910390a150505b508080600101915050610e39565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e646572206973206e6f7420746865206173736574206d616e616765720081525060200191505060405180910390fd5b808060075410156111d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180612a306033913960400191505060405180910390fd5b81600754036007819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611221573d6000803e3d6000fd5b505050565b61122e61183d565b61123757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612bd76023913960400191505060405180910390fd5b7f05cd89403c6bdeac21c2ff33de395121a31fa1bc2bf3adf4825f1f86e79969dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113c261183d565b6113cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612b296023913960400191505060405180910390fd5b7f452d938f8b3591b2c84cf28bb3dbfaf80782d4d1c948f62f228f933233cc8113600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806000806000600460008a8152602001908152602001600020888154811061157757fe5b9060005260206000209060060201600001549650600460008a815260200190815260200160002088815481106115a957fe5b9060005260206000209060060201600101549550600460008a815260200190815260200160002088815481106115db57fe5b9060005260206000209060060201600201549450600460008a8152602001908152602001600020888154811061160d57fe5b9060005260206000209060060201600301549350600460008a8152602001908152602001600020888154811061163f57fe5b9060005260206000209060060201600401549250600460008a8152602001908152602001600020888154811061167157fe5b906000526020600020906006020160050160009054906101000a900460ff169150600460008a815260200190815260200160002088815481106116b057fe5b906000526020600020906006020160050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092959891949750929550565b6116f861183d565b61170157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61189c61183d565b6118a557600080fd5b6118b586868686868660006121fc565b505050505050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600754905090565b600060046000838152602001908152602001600020805490509050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e646572206973206e6f7420746865206173736574206d616e616765720081525060200191505060405180910390fd5b3460065401600681905550565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611aa4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f53656e646572206973206e6f7420746865206f7261636c65000000000000000081525060200191505060405180910390fd5b60008090505b6004600084815260200190815260200160002080549050811015611cf857611ad06129d1565b600460008581526020019081526020016000208281548110611aee57fe5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166002811115611b5757fe5b6002811115611b6257fe5b81526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060006002811115611bcb57fe5b8160a001516002811115611bdb57fe5b1415611cea57600080611bf28360800151866121ec565b15611c0c5784905060019150611c078361214e565b611c1e565b6000905060029150611c1d836121a2565b5b81600460008881526020019081526020016000208581548110611c3d57fe5b906000526020600020906006020160050160006101000a81548160ff02191690836002811115611c6957fe5b02179055507fb6139234dd9e191cb2feca4bf2afc7afd44b1d882dfa84d6a98c09b559f4cd8b86846000015185602001518660400151858760405180878152602001868152602001858152602001848152602001838152602001826002811115611ccf57fe5b60ff168152602001965050505050505060405180910390a150505b508080600101915050611aaa565b505050565b8342811015611d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526041815260200180612b4c6041913960600191505060405180910390fd5b88806006541015611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612b8d6025913960400191505060405180910390fd5b611e098d8d8d8d8d8d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506124bb565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611eaa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f57726f6e6720627579657220616464726573732e00000000000000000000000081525060200191505060405180910390fd5b888b1015611f03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612a63602a913960400191505060405180910390fd5b348b14611f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180612ab16036913960400191505060405180910390fd5b611f6a8d8d8d8d8c8c336121fc565b89898c600654010303600681905550886007540160078190555050505050505050505050505050565b611f9b61183d565b611fa457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561202a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612a8d6024913960400191505060405180910390fd5b7f4a4c595a0a897525da73e6b86a1554b2bce3b5811b90be33878d939c8ba14141600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600654905090565b61213961183d565b61214257600080fd5b61214b81612604565b50565b600073ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff161461219f5761219d8160c00151826040015183600001516126fc565b505b50565b600073ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16146121e9576121e78160400151612881565b505b50565b6000808284161415905092915050565b600015156005600088815260200190815260200160002060009054906101000a900460ff16151514612279576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612bb26025913960400191505060405180910390fd5b6122816129d1565b868160000181815250508581602001818152505084816040018181525050838160600181815250508281608001818152505060008160a0019060028111156122c557fe5b908160028111156122d257fe5b81525050818160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600460008981526020019081526020016000208190806001815401808255809150509060018203906000526020600020906006020160009091929091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360028111156123a357fe5b021790555060c08201518160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505060016005600089815260200190815260200160002060006101000a81548160ff0219169083151502179055507faca5198554d0a45ff580cb6fa7546791b465a453ea0a87d0bac49a00c2440f0288888888888888604051808881526020018781526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200197505050505050505060405180910390a15050505050505050565b60008a8a8a8a8a8a8a8a8a604051602001808a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019950505050505050505050604051602081830303815290604052805190602001209050600061256961256383612897565b846128ef565b90506125736117c0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526042815260200180612ae76042913960600191505060405180910390fd5b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561263e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050156127b4577f73bf7e03b6a7b1aa54e44e4538275f683d4ef3d660c1a252f051a27a5399b929838584604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001905061287a565b6127bc610bd1565b73ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612801573d6000803e3d6000fd5b507fbddbe190eedc5697ca6585c3e64f75da07723db16c76668ca65c78588b112b0d838584604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600090505b9392505050565b6000816006540160068190555060019050919050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b600080600080604185511461290a57600093505050506129cb565b6020850151925060408501519150606085015160001a9050601b8160ff16101561293557601b810190505b601b8160ff161415801561294d5750601c8160ff1614155b1561295e57600093505050506129cb565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156129bb573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006002811115612a0c57fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152509056fe43616e6e6f74207769746864726177206d6f7265207461786573207468616e20616c6c20636f6c6c6563746564207461786573546865207461786573206d75737420626520696e636c7564656420696e20746865207072656d69756d2e6e65774d616e616765722073686f756c64206e6f7420626520616464726573732830292e54686520616d6f756e742073656e7420646f6573206e6f74206d6174636820746865207072696365206f6620746865206f726465722e546865207369676e617475726520697320696e76616c696420696620697420646f6573206e6f74206d6174636820746865205f7369676e657220616464726573732e6e65775369676e65722073686f756c64206e6f7420626520616464726573732830292e546865207472616e73616374696f6e20697320696e76616c69643a207468652074696d657374616d70206c696d697420686173206265656e20726561636865642e417661696c61626c65206578706f737572652063616e206e6f742062652072656163686564546869732070726f647563742068617320616c7265616479206265656e20626f756768742e6e65774f7261636c652073686f756c64206e6f7420626520616464726573732830292ea165627a7a723058203a0765e6131ad9be45c76edae10e8082ba18ba47032ff3ee5a8238f2b0a744390029"
}