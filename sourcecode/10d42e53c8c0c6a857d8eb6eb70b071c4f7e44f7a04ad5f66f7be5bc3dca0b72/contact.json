{
  "address": "0xcb5eb4ad33fd2ff079d70c1bf31f99ea8aac73d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DollarAuction",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n        assert(block.timestamp < expiryTime);\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/DollarAuction.sol\n\npragma solidity ^0.5.2;\n\n\n\ncontract DollarAuction is Ownable {\n    using SafeMath for uint256;\n\n    uint256 constant bidFee = 1e15;\n    uint256 constant minimumBidDelta = 1e15;\n    uint256 constant sixHours = 6 * 60 * 60;\n    uint256 constant twentyFourHours = sixHours * 4;\n    uint256 constant tenthEth = 1e17;\n    uint256 public expiryTime;\n    uint256 public prize;\n    address payable public lastDonor;\n    address payable public winningBidder;\n    address payable public losingBidder;\n    uint256 public winningBid;\n    uint256 public losingBid;\n\n    constructor() public payable {\n        reset();\n    }\n\n    modifier onlyActiveAuction() {\n        require(isActiveAuction(), \"Auction not active\");\n        _;\n    }\n\n    modifier onlyInactiveAuction() {\n        require(!isActiveAuction(), \"Auction not expired\");\n        _;\n    }\n\n    function increasePrize() public payable onlyActiveAuction {\n        require(msg.value >= tenthEth, \"Must increase by at least 0.1ETH\");\n\n        prize = prize.add(msg.value);\n        lastDonor = msg.sender;\n    }\n\n    function bid() public payable onlyActiveAuction {\n        uint bidAmount = msg.value.sub(bidFee);\n\n        require(bidAmount > winningBid.add(minimumBidDelta), \"Bid too small\");\n\n        repayThirdPlace();\n        updateLosingBidder();\n        updateWinningBidder(bidAmount, msg.sender);\n\n        if(expiryTime < block.timestamp + sixHours){\n            expiryTime = block.timestamp + sixHours;\n        }\n    }\n\n    function withdrawPrize() public onlyInactiveAuction {\n        require(msg.sender == winningBidder || isOwner(), \"not authorized\");\n\n        winningBidder.transfer(prize);\n        address payable o = address(uint160(owner()));\n        uint256 bids = winningBid.add(losingBid);\n        lastDonor.transfer(bids);\n        o.transfer(address(this).balance);\n\n        prize = 0;\n    }\n\n    function restart() public payable onlyOwner onlyInactiveAuction {\n        reset();\n    }\n\n    function collectedFees() public view onlyOwner returns (uint) {\n        return address(this).balance.sub(prize).sub(winningBid).sub(losingBid);\n    }\n\n    function reset() internal onlyOwner {\n        expiryTime = block.timestamp + 2*twentyFourHours;\n        prize = msg.value;\n        lastDonor = msg.sender;\n        winningBidder = msg.sender;\n        losingBidder = msg.sender;\n        winningBid = 0;\n        losingBid = 0;\n    }\n\n    function updateWinningBidder(uint256 _bid, address payable _bidder) internal {\n        winningBid = _bid;\n        winningBidder = _bidder;\n    }\n\n    function updateLosingBidder() internal {\n        losingBidder = winningBidder;\n        losingBid = winningBid;\n    }\n\n    function repayThirdPlace() internal {\n        losingBidder.transfer(losingBid);\n    }\n\n    function isActiveAuction() public view returns(bool) {\n        return block.timestamp < expiryTime;\n    }\n\n    // what happens if donate fails? Money returned to sender?\n    function() external payable {\n        bid();\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36100d76100dc640100000000026401000000009004565b610242565b6100f36101eb640100000000026401000000009004565b15156100fe57600080fd5b60046154600260020242016001819055503460028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006819055506000600781905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b611065806102516000396000f3fe60806040526004361061011b576000357c0100000000000000000000000000000000000000000000000000000000900480638cf80438116100b257806391b8a49a1161008157806391b8a49a1461032657806399bc0aea1461037d578063cc481a6f146103a8578063e3ac5d26146103d7578063f2fde38b146104025761011b565b80638cf804381461024a5780638da5cb5b146102755780638f32d59b146102cc5780639003adfe146102fb5761011b565b80635cee286b116100ee5780635cee286b1461015a578063715018a61461018557806376230f1a1461019c5780638890ed09146101f35761011b565b80631998aeef146101255780631ef3755d1461012f5780632ae396141461013957806348d37a5814610143575b610123610453565b005b61012d610453565b005b6101376105b6565b005b610141610650565b005b34801561014f57600080fd5b506101586107aa565b005b34801561016657600080fd5b5061016f610a60565b6040518082815260200191505060405180910390f35b34801561019157600080fd5b5061019a610a66565b005b3480156101a857600080fd5b506101b1610b38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ff57600080fd5b50610208610b5e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025657600080fd5b5061025f610b84565b6040518082815260200191505060405180910390f35b34801561028157600080fd5b5061028a610b8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d857600080fd5b506102e1610bb3565b604051808215151515815260200191505060405180910390f35b34801561030757600080fd5b50610310610c0a565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b5061033b610c78565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038957600080fd5b50610392610c9e565b6040518082815260200191505060405180910390f35b3480156103b457600080fd5b506103bd610ca4565b604051808215151515815260200191505060405180910390f35b3480156103e357600080fd5b506103ec610cb0565b6040518082815260200191505060405180910390f35b34801561040e57600080fd5b506104516004803603602081101561042557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb6565b005b61045b610ca4565b15156104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f41756374696f6e206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b60006104eb66038d7ea4c6800034610cd590919063ffffffff16565b905061050966038d7ea4c68000600654610cf790919063ffffffff16565b8111151561057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f42696420746f6f20736d616c6c0000000000000000000000000000000000000081525060200191505060405180910390fd5b610587610d18565b61058f610d85565b6105998133610df3565b615460420160015410156105b35761546042016001819055505b50565b6105be610bb3565b15156105c957600080fd5b6105d1610ca4565b151515610646576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41756374696f6e206e6f7420657870697265640000000000000000000000000081525060200191505060405180910390fd5b61064e610e3f565b565b610658610ca4565b15156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f41756374696f6e206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b67016345785d8a0000341015151561074c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d75737420696e637265617365206279206174206c6561737420302e3145544881525060200191505060405180910390fd5b61076134600254610cf790919063ffffffff16565b60028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6107b2610ca4565b151515610827576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41756374696f6e206e6f7420657870697265640000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108875750610886610bb3565b5b15156108fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f19350505050158015610965573d6000803e3d6000fd5b506000610970610b8a565b9050600061098b600754600654610cf790919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109f5573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610a53573d6000803e3d6000fd5b5060006002819055505050565b60075481565b610a6e610bb3565b1515610a7957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000610c14610bb3565b1515610c1f57600080fd5b610c73600754610c65600654610c576002543073ffffffffffffffffffffffffffffffffffffffff1631610cd590919063ffffffff16565b610cd590919063ffffffff16565b610cd590919063ffffffff16565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60006001544210905090565b60025481565b610cbe610bb3565b1515610cc957600080fd5b610cd281610f3f565b50565b6000828211151515610ce657600080fd5b600082840390508091505092915050565b6000808284019050838110151515610d0e57600080fd5b8091505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f19350505050158015610d82573d6000803e3d6000fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654600781905550565b8160068190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610e47610bb3565b1515610e5257600080fd5b60046154600260020242016001819055503460028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006819055506000600781905550565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f7b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a7230582072720e3a038754c354fec674035a788c4c6cd0ce108fe550572f99e27a3fc85e0029"
}