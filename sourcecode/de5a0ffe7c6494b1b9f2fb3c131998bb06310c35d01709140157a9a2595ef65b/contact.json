{
  "address": "0x1aa800840f7524938bedafa460997ba30ec4b235",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IDAP",
  "compilerVersion": "v0.4.20-nightly.2017.11.30+commit.cb16a5d3",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-25\n*/\n\npragma solidity ^0.4.18;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ConfigurableToken is StandardToken, Ownable {\n  uint256 public totalTokens = uint256(1000000000).mul(1 ether);\n  uint256 public tokensForSale = uint256(750000000).mul(1 ether);\n  uint256 public bountyTokens = uint256(25000000).mul(1 ether);\n  uint256 public teamTokens = uint256(100000000).mul(1 ether);\n  uint256 public teamReleased = 0;\n  uint256 public employeePoolTokens = uint256(50000000).mul(1 ether);\n  uint256 public liquidityPoolTokens = uint256(50000000).mul(1 ether);\n  uint256 public advisorsTokens = uint256(25000000).mul(1 ether);\n  uint256 public advisorsReleased = 0;\n  uint256 public listingDate = 0;\n  uint256 tokensUnlockPeriod = 2592000; // 30 days\n  uint256 vestingPeriod = 15724800; // 182 days (6 months)\n  address public saleContract;\n  address public advisors;\n  address public team;\n  bool public tokensLocked = true;\n\n  event SaleContractActivation(address saleContract, uint256 tokensForSale);\n\n  event Burn(address tokensOwner, uint256 burnedTokensAmount);\n\n  modifier tokenNotLocked() {\n    if (tokensLocked && msg.sender != owner) {\n      if (listingDate > 0 && now.sub(listingDate) > tokensUnlockPeriod) {\n        tokensLocked = false;\n      } else {\n        revert();\n      }\n    }\n    _;\n  }\n\n  function activateSaleContract(address _saleContract) public onlyOwner {\n    require(_saleContract != address(0));\n    saleContract = _saleContract;\n    balances[saleContract] = balances[saleContract].add(tokensForSale);\n    totalSupply_ = totalSupply_.add(tokensForSale);\n    require(totalSupply_ <= totalTokens);\n    Transfer(address(this), saleContract, tokensForSale);\n    SaleContractActivation(saleContract, tokensForSale);\n  }\n\n  function isListing() public onlyOwner {\n    listingDate = now;\n  }\n\n  function transfer(address _to, uint256 _value) public tokenNotLocked returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public tokenNotLocked returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public tokenNotLocked returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public tokenNotLocked returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public tokenNotLocked returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n  function saleTransfer(address _to, uint256 _value) public returns (bool) {\n    require(saleContract != address(0));\n    require(msg.sender == saleContract);\n    return super.transfer(_to, _value);\n  }\n\n  function sendBounty(address _to, uint256 _value) public onlyOwner returns (bool) {\n    uint256 value = _value.mul(1 ether);\n    require(bountyTokens >= value);\n    totalSupply_ = totalSupply_.add(value);\n    require(totalSupply_ <= totalTokens);\n    balances[_to] = balances[_to].add(value);\n    bountyTokens = bountyTokens.sub(value);\n    Transfer(address(this), _to, value);\n    return true;\n  }\n\n  function burn(uint256 _value) public onlyOwner returns (bool) {\n    uint256 value = _value.mul(1 ether);\n    require(balances[owner] >= value);\n    require(totalSupply_ >= value);\n    balances[owner] = balances[owner].sub(value);\n    totalSupply_ = totalSupply_.sub(value);\n    Burn(owner, value);\n    return true;\n  }\n\n  function burnTokensForSale() public returns (bool) {\n    require(saleContract != address(0));\n    require(msg.sender == saleContract);\n    uint256 tokens = balances[saleContract];\n    require(tokens > 0);\n    require(tokens <= totalSupply_);\n    balances[saleContract] =0;\n    totalSupply_ = totalSupply_.sub(tokens);\n    Burn(saleContract, tokens);\n    return true;\n  }\n\n  function getVestingPeriodNumber() public view returns (uint256) {\n    if (listingDate == 0) return 0;\n    return now.sub(listingDate).div(vestingPeriod);\n  }\n\n  function releaseAdvisorsTokens() public returns (bool) {\n    uint256 vestingPeriodNumber = getVestingPeriodNumber();\n    uint256 percents = vestingPeriodNumber.mul(50);\n    if (percents > 100) percents = 100;\n    uint256 tokensToRelease = advisorsTokens.mul(percents).div(100).sub(advisorsReleased);\n    require(tokensToRelease > 0);\n    totalSupply_ = totalSupply_.add(tokensToRelease);\n    require(totalSupply_ <= totalTokens);\n    balances[advisors] = balances[advisors].add(tokensToRelease);\n    advisorsReleased = advisorsReleased.add(tokensToRelease);\n    require(advisorsReleased <= advisorsTokens);\n    Transfer(address(this), advisors, tokensToRelease);\n    return true;\n  }\n\n  function releaseTeamTokens() public returns (bool) {\n    uint256 vestingPeriodNumber = getVestingPeriodNumber();\n    uint256 percents = vestingPeriodNumber.mul(25);\n    if (percents > 100) percents = 100;\n    uint256 tokensToRelease = teamTokens.mul(percents).div(100).sub(teamReleased);\n    require(tokensToRelease > 0);\n    totalSupply_ = totalSupply_.add(tokensToRelease);\n    require(totalSupply_ <= totalTokens);\n    balances[team] = balances[team].add(tokensToRelease);\n    teamReleased = teamReleased.add(tokensToRelease);\n    require(teamReleased <= teamTokens);\n    Transfer(address(this), team, tokensToRelease);\n    return true;\n  }\n}\n\ncontract IDAP is ConfigurableToken {\n  string public constant name = \"IDAP\";\n  string public constant symbol = \"IDAP\";\n  uint32 public constant decimals = 18;\n\n  function IDAP(address _newOwner, address _team, address _advisors) public {\n    require(_newOwner != address(0));\n    require(_team != address(0));\n    require(_advisors != address(0));\n    totalSupply_ = employeePoolTokens.add(liquidityPoolTokens); \n    owner = _newOwner;\n    team = _team;\n    advisors = _advisors;\n    balances[owner] = totalSupply_;\n    Transfer(address(this), owner, totalSupply_);\n  }\n}",
  "bytecode": "606060405262000033670de0b6b3a7640000633b9aca00620004b66401000000000262002392179091906401000000009004565b60045562000065670de0b6b3a7640000632cb41780620004b66401000000000262002392179091906401000000009004565b60055562000097670de0b6b3a764000063017d7840620004b66401000000000262002392179091906401000000009004565b600655620000c9670de0b6b3a76400006305f5e100620004b66401000000000262002392179091906401000000009004565b600755600060085562000100670de0b6b3a76400006302faf080620004b66401000000000262002392179091906401000000009004565b60095562000132670de0b6b3a76400006302faf080620004b66401000000000262002392179091906401000000009004565b600a5562000164670de0b6b3a764000063017d7840620004b66401000000000262002392179091906401000000009004565b600b556000600c556000600d5562278d00600e5562eff100600f556001601260146101000a81548160ff0219169083151502179055503415620001a657600080fd5b604051606080620033bc8339810160405280805190602001909190805190602001909190805190602001909190505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200025357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200029057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620002cd57600080fd5b620002f4600a54600954620004f564010000000002620023e8179091906401000000009004565b60018190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600154600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a350505062000514565b6000806000841415620004cd5760009150620004ee565b8284029050828482811515620004df57fe5b04141515620004ea57fe5b8091505b5092915050565b60008082840190508381101515156200050a57fe5b8091505092915050565b612e9880620005246000396000f3006060604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101c7578063095ea7b31461025557806312aef8c3146102af578063141c9422146102d857806314c411c71461030157806318160ddd1461032e5780631a9bf9cf146103575780631b65144d1461038057806323b872dd146103ad5780632e5a6f1714610426578063313ce56714610453578063404704b91461048857806342966c68146104e257806344ae05671461051d57806345fa404514610546578063485587a21461056f5780636078268b1461059857806366188463146105c157806370a082311461061b5780637e1c0c091461066857806385f2aef2146106915780638da5cb5b146106e657806395d89b411461073b578063a1feba42146107c9578063a51a8682146107f6578063a9059cbb14610850578063b75fdf3a146108aa578063c3e3c7bc146108d3578063d73dd623146108fc578063daf6ca3014610956578063dd62ed3e146109ab578063e06ec0bb14610a17578063edcfd05014610a2c578063f2fde38b14610a81578063f6f0fa8d14610aba578063fdd080a414610ae3575b600080fd5b34156101d257600080fd5b6101da610b1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021a5780820151818401526020810190506101ff565b50505050905090810190601f1680156102475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026057600080fd5b610295600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b55565b604051808215151515815260200191505060405180910390f35b34156102ba57600080fd5b6102c2610c2a565b6040518082815260200191505060405180910390f35b34156102e357600080fd5b6102eb610c30565b6040518082815260200191505060405180910390f35b341561030c57600080fd5b610314610c36565b604051808215151515815260200191505060405180910390f35b341561033957600080fd5b610341610e7b565b6040518082815260200191505060405180910390f35b341561036257600080fd5b61036a610e85565b6040518082815260200191505060405180910390f35b341561038b57600080fd5b610393610e8b565b604051808215151515815260200191505060405180910390f35b34156103b857600080fd5b61040c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110e1565b604051808215151515815260200191505060405180910390f35b341561043157600080fd5b6104396111b8565b604051808215151515815260200191505060405180910390f35b341561045e57600080fd5b6104666113fd565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561049357600080fd5b6104c8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611402565b604051808215151515815260200191505060405180910390f35b34156104ed57600080fd5b61050360048080359060200190919050506115db565b604051808215151515815260200191505060405180910390f35b341561052857600080fd5b610530611860565b6040518082815260200191505060405180910390f35b341561055157600080fd5b610559611866565b6040518082815260200191505060405180910390f35b341561057a57600080fd5b6105826118aa565b6040518082815260200191505060405180910390f35b34156105a357600080fd5b6105ab6118b0565b6040518082815260200191505060405180910390f35b34156105cc57600080fd5b610601600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118b6565b604051808215151515815260200191505060405180910390f35b341561062657600080fd5b610652600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061198b565b6040518082815260200191505060405180910390f35b341561067357600080fd5b61067b6119d3565b6040518082815260200191505060405180910390f35b341561069c57600080fd5b6106a46119d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f157600080fd5b6106f96119ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561074657600080fd5b61074e611a25565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078e578082015181840152602081019050610773565b50505050905090810190601f1680156107bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107d457600080fd5b6107dc611a5e565b604051808215151515815260200191505060405180910390f35b341561080157600080fd5b610836600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a71565b604051808215151515815260200191505060405180910390f35b341561085b57600080fd5b610890600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b3e565b604051808215151515815260200191505060405180910390f35b34156108b557600080fd5b6108bd611c13565b6040518082815260200191505060405180910390f35b34156108de57600080fd5b6108e6611c19565b6040518082815260200191505060405180910390f35b341561090757600080fd5b61093c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c1f565b604051808215151515815260200191505060405180910390f35b341561096157600080fd5b610969611cf4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109b657600080fd5b610a01600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d1a565b6040518082815260200191505060405180910390f35b3415610a2257600080fd5b610a2a611da1565b005b3415610a3757600080fd5b610a3f611e06565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a8c57600080fd5b610ab8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e2c565b005b3415610ac557600080fd5b610acd611f84565b6040518082815260200191505060405180910390f35b3415610aee57600080fd5b610b1a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f8a565b005b6040805190810160405280600481526020017f494441500000000000000000000000000000000000000000000000000000000081525081565b6000601260149054906101000a900460ff168015610bc15750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610c18576000600d54118015610bed5750600e54610beb600d544261228790919063ffffffff16565b115b15610c12576000601260146101000a81548160ff021916908315150217905550610c17565b600080fd5b5b610c2283836122a0565b905092915050565b60055481565b600d5481565b600080600080610c44611866565b9250610c5a60198461239290919063ffffffff16565b91506064821115610c6a57606491505b610ca6600854610c986064610c8a8660075461239290919063ffffffff16565b6123cd90919063ffffffff16565b61228790919063ffffffff16565b9050600081111515610cb757600080fd5b610ccc816001546123e890919063ffffffff16565b60018190555060045460015411151515610ce557600080fd5b610d5881600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dd1816008546123e890919063ffffffff16565b60088190555060075460085411151515610dea57600080fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36001935050505090565b6000600154905090565b60065481565b600080600073ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610eec57600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4857600080fd5b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515610fba57600080fd5b6001548111151515610fcb57600080fd5b6000806000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110468160015461228790919063ffffffff16565b6001819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1600191505090565b6000601260149054906101000a900460ff16801561114d5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156111a4576000600d541180156111795750600e54611177600d544261228790919063ffffffff16565b115b1561119e576000601260146101000a81548160ff0219169083151502179055506111a3565b600080fd5b5b6111af848484612406565b90509392505050565b6000806000806111c6611866565b92506111dc60328461239290919063ffffffff16565b915060648211156111ec57606491505b611228600c5461121a606461120c86600b5461239290919063ffffffff16565b6123cd90919063ffffffff16565b61228790919063ffffffff16565b905060008111151561123957600080fd5b61124e816001546123e890919063ffffffff16565b6001819055506004546001541115151561126757600080fd5b6112da81600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061135381600c546123e890919063ffffffff16565b600c81905550600b54600c541115151561136c57600080fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36001935050505090565b601281565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146157600080fd5b61147c670de0b6b3a76400008461239290919063ffffffff16565b9050806006541015151561148f57600080fd5b6114a4816001546123e890919063ffffffff16565b600181905550600454600154111515156114bd57600080fd5b61150e816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115658160065461228790919063ffffffff16565b6006819055508373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163a57600080fd5b611655670de0b6b3a76400008461239290919063ffffffff16565b905080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156116c657600080fd5b80600154101515156116d757600080fd5b61174a81600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228790919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117c38160015461228790919063ffffffff16565b6001819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001915050919050565b600c5481565b600080600d54141561187b57600090506118a7565b6118a4600f54611896600d544261228790919063ffffffff16565b6123cd90919063ffffffff16565b90505b90565b60095481565b600b5481565b6000601260149054906101000a900460ff1680156119225750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611979576000600d5411801561194e5750600e5461194c600d544261228790919063ffffffff16565b115b15611973576000601260146101000a81548160ff021916908315150217905550611978565b600080fd5b5b61198383836127c0565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60045481565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f494441500000000000000000000000000000000000000000000000000000000081525081565b601260149054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611ad057600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2c57600080fd5b611b368383612a51565b905092915050565b6000601260149054906101000a900460ff168015611baa5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611c01576000600d54118015611bd65750600e54611bd4600d544261228790919063ffffffff16565b115b15611bfb576000601260146101000a81548160ff021916908315150217905550611c00565b600080fd5b5b611c0b8383612a51565b905092915050565b600a5481565b60075481565b6000601260149054906101000a900460ff168015611c8b5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611ce2576000600d54118015611cb75750600e54611cb5600d544261228790919063ffffffff16565b115b15611cdc576000601260146101000a81548160ff021916908315150217905550611ce1565b600080fd5b5b611cec8383612c70565b905092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dfd57600080fd5b42600d81905550565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ec457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fe657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561202257600080fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506120d8600554600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121536005546001546123e890919063ffffffff16565b6001819055506004546001541115151561216c57600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a37f9ca62f58e4fb70943b408da6f28c33dd8a48223bc1f3cb8345fc8ba01be7fc24601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600554604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600082821115151561229557fe5b818303905092915050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060008414156123a757600091506123c6565b82840290508284828115156123b857fe5b041415156123c257fe5b8091505b5092915050565b60008082848115156123db57fe5b0490508091505092915050565b60008082840190508381101515156123fc57fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561244357600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561249057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561251b57600080fd5b61256c826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125ff826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126d082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156128d1576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612965565b6128e4838261228790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612a8e57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612adb57600080fd5b612b2c826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bbf826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000612d0182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123e890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019050929150505600a165627a7a7230582025a4087df4f40b4234043f577acbcedb4bfc20cb51fc8b6a0277f2495ade4e070029000000000000000000000000940dfafc5a7c01b0c59f4d64b0afae350c7c6fb5000000000000000000000000462fad75117e4c3b9acbc716c51a8bbaf119961700000000000000000000000088e6c7a9bf53308905632adc22ed0fea4641a57f",
  "constructorArguments": "000000000000000000000000940dfafc5a7c01b0c59f4d64b0afae350c7c6fb5000000000000000000000000462fad75117e4c3b9acbc716c51a8bbaf119961700000000000000000000000088e6c7a9bf53308905632adc22ed0fea4641a57f"
}