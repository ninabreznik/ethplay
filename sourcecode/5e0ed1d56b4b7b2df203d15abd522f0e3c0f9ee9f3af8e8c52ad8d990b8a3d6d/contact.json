{
  "address": "0xa554dbc57d7c20250104611ba9121e904a0358c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpaceEmissio",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity 0.4.25;\n\n\n/**\n*\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT v 1.0\n* \n* GitHub           - https://github.com/fortune333/Fortune333\n* \n* \n* \n*  - GAIN 8% - PER 1 MONTH (interest is charges in equal parts every 1 sec)\n*         0.26 - PER 1 DAY\n*         0.011 - PER 1 HOUR\n*         0.00018 - PER 1 MIN\n*         0.000003 - PER 1 SEC\n*  - Life-long payments\n*  - Unprecedentedly reliable\n*  - Bringer Fortune\n*  - Minimal contribution 0.01 eth\n*  - Currency and payment - ETH\n*  - Contribution allocation schemes:\n*    -- 100 % payments\n\n*\n*  --- About the project\n* Smart contracts with support for blockchains have opened a new era in a relationship without trust\n* intermediaries. This technology opens up incredible financial opportunities.\n* The distribution model is recorded in a smart contract, loaded into the Ethereum blockchain, and can no longer be changed.\n* The contract is recorded on the blockchain with a WAY TO REFIT OWNERSHIP!\n* free access online.\n* Continuous autonomous functioning of the system.\n*\n* ---How to use:\n* 1. Send from your ETH wallet to the address of the smart contract\n* Any amount from 0.01 ETH.\n* 2. Confirm your transaction in the history of your application or etherscan.io, specifying the address of your wallet.\n* Profit by sending 0 live transactions\n(profit is calculated every second).\n*  OR\n* To reinvest, you need to deposit the amount you want to reinvest, and the interest accrued is automatically added to your new deposit.\n*\n* RECOMMENDED GAS LIMIT: 200,000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n* You can check the payments on the website etherscan.io, in the “Internal Txns” tab of your wallet.\n*\n* Referral system is missing.\n* Payment to developers is missing.\n* There is no payment for advertising.\n* All 100% of the contribution remains in the Smart Contract Fund.\n* Contract restart is also absent. If there is no * money in the Fund, payments are suspended and * they are renewed again when the Fund is filled. Thus * the contract is able to WORK FOREVER!\n* --- It is not allowed to transfer from exchanges, ONLY from your personal wallet ETH from which you have a private key.\n*\n* The contract has passed all the necessary checks by the professionals!\n*/\n\n\nlibrary Math {\n  function min(uint a, uint b) internal pure returns(uint) {\n    if (a > b) {\n      return b;\n    }\n    return a;\n  }\n}\n\n\nlibrary Zero {\n  function requireNotZero(address addr) internal pure {\n    require(addr != address(0), \"require not zero address\");\n  }\n\n  function requireNotZero(uint val) internal pure {\n    require(val != 0, \"require not zero value\");\n  }\n\n  function notZero(address addr) internal pure returns(bool) {\n    return !(addr == address(0));\n  }\n\n  function isZero(address addr) internal pure returns(bool) {\n    return addr == address(0);\n  }\n\n  function isZero(uint a) internal pure returns(bool) {\n    return a == 0;\n  }\n\n  function notZero(uint a) internal pure returns(bool) {\n    return a != 0;\n  }\n}\n\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n  \n  // storage\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n\n  function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n    return Percent.percent(p.num, p.den);\n  }\n\n  // memory \n  function mmul(percent memory p, uint a) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function msub(percent memory p, uint a) internal pure returns (uint) {\n    uint b = mmul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function madd(percent memory p, uint a) internal pure returns (uint) {\n    return a + mmul(p, a);\n  }\n}\n\n\nlibrary Address {\n  function toAddress(bytes source) internal pure returns(address addr) {\n    assembly { addr := mload(add(source,0x14)) }\n    return addr;\n  }\n\n  function isNotContract(address addr) internal view returns(bool) {\n    uint length;\n    assembly { length := extcodesize(addr) }\n    return length == 0;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\ncontract Accessibility {\n  address private owner;\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"access denied\");\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  // Deletion of contract holder and waiver of ownership\n  \n  function disown() internal {\n    delete owner;\n  }\n}\n\n\ncontract Rev1Storage {\n  function investorShortInfo(address addr) public view returns(uint value, uint refBonus); \n}\n\n\ncontract Rev2Storage {\n  function investorInfo(address addr) public view returns(uint investment, uint paymentTime); \n}\n\n\nlibrary PrivateEntrance {\n  using PrivateEntrance for privateEntrance;\n  using Math for uint;\n  struct privateEntrance {\n    Rev1Storage rev1Storage;\n    Rev2Storage rev2Storage;\n    uint investorMaxInvestment;\n    uint endTimestamp;\n    mapping(address=>bool) hasAccess;\n  }\n\n  function isActive(privateEntrance storage pe) internal view returns(bool) {\n    return pe.endTimestamp > now;\n  }\n\n  function maxInvestmentFor(privateEntrance storage pe, address investorAddr) internal view returns(uint) {\n    // check if investorAddr has access\n    if (!pe.hasAccess[investorAddr]) {\n      return 0;\n    }\n\n    // get investor max investment = investment from revolution 1\n    (uint maxInvestment, ) = pe.rev1Storage.investorShortInfo(investorAddr);\n    if (maxInvestment == 0) {\n      return 0;\n    }\n    maxInvestment = Math.min(maxInvestment, pe.investorMaxInvestment);\n\n    // get current investment from revolution 2\n    (uint currInvestment, ) = pe.rev2Storage.investorInfo(investorAddr);\n    \n    if (currInvestment >= maxInvestment) {\n      return 0;\n    }\n\n    return maxInvestment-currInvestment;\n  }\n\n  function provideAccessFor(privateEntrance storage pe, address[] addrs) internal {\n    for (uint16 i; i < addrs.length; i++) {\n      pe.hasAccess[addrs[i]] = true;\n    }\n  }\n}\n\n\ncontract InvestorsStorage is Accessibility {\n  struct Investor {\n    uint investment;\n    uint paymentTime;\n  }\n  uint public size;\n\n  mapping (address => Investor) private investors;\n\n  function isInvestor(address addr) public view returns (bool) {\n    return investors[addr].investment > 0;\n  }\n\n  function investorInfo(address addr) public view returns(uint investment, uint paymentTime) {\n    investment = investors[addr].investment;\n    paymentTime = investors[addr].paymentTime;\n  }\n\n  function newInvestor(address addr, uint investment, uint paymentTime) public onlyOwner returns (bool) {\n    Investor storage inv = investors[addr];\n    if (inv.investment != 0 || investment == 0) {\n      return false;\n    }\n    inv.investment = investment;\n    inv.paymentTime = paymentTime;\n    size++;\n    return true;\n  }\n\n  function addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\n    if (investors[addr].investment == 0) {\n      return false;\n    }\n    investors[addr].investment += investment;\n    return true;\n  }\n\n  function setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\n    if (investors[addr].investment == 0) {\n      return false;\n    }\n    investors[addr].paymentTime = paymentTime;\n    return true;\n  }\n}\n\n\nlibrary RapidGrowthProtection {\n  using RapidGrowthProtection for rapidGrowthProtection;\n  \n  struct rapidGrowthProtection {\n    uint startTimestamp;\n    uint maxDailyTotalInvestment;\n    uint8 activityDays;\n    mapping(uint8 => uint) dailyTotalInvestment;\n  }\n\n  function maxInvestmentAtNow(rapidGrowthProtection storage rgp) internal view returns(uint) {\n    uint day = rgp.currDay();\n    if (day == 0 || day > rgp.activityDays) {\n      return 0;\n    }\n    if (rgp.dailyTotalInvestment[uint8(day)] >= rgp.maxDailyTotalInvestment) {\n      return 0;\n    }\n    return rgp.maxDailyTotalInvestment - rgp.dailyTotalInvestment[uint8(day)];\n  }\n\n  function isActive(rapidGrowthProtection storage rgp) internal view returns(bool) {\n    uint day = rgp.currDay();\n    return day != 0 && day <= rgp.activityDays;\n  }\n\n  function saveInvestment(rapidGrowthProtection storage rgp, uint investment) internal returns(bool) {\n    uint day = rgp.currDay();\n    if (day == 0 || day > rgp.activityDays) {\n      return false;\n    }\n    if (rgp.dailyTotalInvestment[uint8(day)] + investment > rgp.maxDailyTotalInvestment) {\n      return false;\n    }\n    rgp.dailyTotalInvestment[uint8(day)] += investment;\n    return true;\n  }\n\n \n  function currDay(rapidGrowthProtection storage rgp) internal view returns(uint day) {\n    if (rgp.startTimestamp > now) {\n      return 0;\n    }\n    day = (now - rgp.startTimestamp) / 24 hours + 1; // +1 for skip zero day\n  }\n}\n\n\n\n\n\n\n\n\ncontract SpaceEmissio is Accessibility {\n  using RapidGrowthProtection for RapidGrowthProtection.rapidGrowthProtection;\n  using PrivateEntrance for PrivateEntrance.privateEntrance;\n  using Percent for Percent.percent;\n  using SafeMath for uint;\n  using Math for uint;\n\n  // easy read for investors\n  using Address for *;\n  using Zero for *; \n  \n  RapidGrowthProtection.rapidGrowthProtection private m_rgp;\n  PrivateEntrance.privateEntrance private m_privEnter;\n  mapping(address => bool) private m_referrals;\n  InvestorsStorage private m_investors;\n\n  // automatically generates getters\n  uint public constant minInvesment = 10 finney; //       0.01 eth\n  uint public constant maxBalance = 33333e5 ether; // 333 3300 000 eth\n  address public advertisingAddress;\n  address public adminsAddress;\n  uint public investmentsNumber;\n  uint public waveStartup;\n\n  // percents per Day\n  Percent.percent private m_1_percent = Percent.percent(26, 100000);           //   26/100000  *100% = 0.26%\n  \n  // more events for easy read from blockchain\n  event LogPEInit(uint when, address rev1Storage, address rev2Storage, uint investorMaxInvestment, uint endTimestamp);\n  event LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\n  event LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\n  event LogRGPInit(uint when, uint startTimestamp, uint maxDailyTotalInvestment, uint activityDays);\n  event LogRGPInvestment(address indexed addr, uint when, uint investment, uint indexed day);\n  event LogNewInvesment(address indexed addr, uint when, uint investment, uint value);\n  event LogAutomaticReinvest(address indexed addr, uint when, uint investment);\n  event LogPayDividends(address indexed addr, uint when, uint dividends);\n  event LogNewInvestor(address indexed addr, uint when);\n  event LogBalanceChanged(uint when, uint balance);\n  event LogNextWave(uint when);\n  event LogDisown(uint when);\n\n\n  modifier balanceChanged {\n    _;\n    emit LogBalanceChanged(now, address(this).balance);\n  }\n\n  modifier notFromContract() {\n    require(msg.sender.isNotContract(), \"only externally accounts\");\n    _;\n  }\n\n  constructor() public {\n    adminsAddress = msg.sender;\n    advertisingAddress = msg.sender;\n    nextWave();\n  }\n\n  function() public payable {\n    // investor get him dividends\n    if (msg.value.isZero()) {\n      getMyDividends();\n      return;\n    }\n\n    // sender do invest\n    doInvest(msg.data.toAddress());\n  }\n\n  function doDisown() private onlyOwner {\n    disown();\n    emit LogDisown(now);\n  }\n\n  function init(address rev1StorageAddr, uint timestamp) private onlyOwner {\n    // init Rapid Growth Protection\n    m_rgp.startTimestamp = timestamp + 1;\n    m_rgp.maxDailyTotalInvestment = 500 ether;\n    m_rgp.activityDays = 21;\n    emit LogRGPInit(\n      now, \n      m_rgp.startTimestamp,\n      m_rgp.maxDailyTotalInvestment,\n      m_rgp.activityDays\n    );\n\n\n    // init Private Entrance\n    m_privEnter.rev1Storage = Rev1Storage(rev1StorageAddr);\n    m_privEnter.rev2Storage = Rev2Storage(address(m_investors));\n    m_privEnter.investorMaxInvestment = 50 ether;\n    m_privEnter.endTimestamp = timestamp;\n    emit LogPEInit(\n      now, \n      address(m_privEnter.rev1Storage), \n      address(m_privEnter.rev2Storage), \n      m_privEnter.investorMaxInvestment, \n      m_privEnter.endTimestamp\n    );\n  }\n\n  \n\n  function privateEntranceProvideAccessFor(address[] addrs) private onlyOwner {\n    m_privEnter.provideAccessFor(addrs);\n  }\n\n  function rapidGrowthProtectionmMaxInvestmentAtNow() private view returns(uint investment) {\n    investment = m_rgp.maxInvestmentAtNow();\n  }\n\n  function investorsNumber() public view returns(uint) {\n    return m_investors.size();\n  }\n\n  function balanceETH() public view returns(uint) {\n    return address(this).balance;\n  }\n\n  function percent1() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_1_percent.num, m_1_percent.den);\n  }\n\n  \n\n  function investorInfo(address investorAddr) public view returns(uint investment, uint paymentTime, bool isReferral) {\n    (investment, paymentTime) = m_investors.investorInfo(investorAddr);\n    isReferral = m_referrals[investorAddr];\n  }\n\n  function investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {\n    dividends = calcDividends(investorAddr);\n  }\n\n  function dailyPercentAtNow() public view returns(uint numerator, uint denominator) {\n    Percent.percent memory p = dailyPercent();\n    (numerator, denominator) = (p.num, p.den);\n  }\n\n  \n\n  function getMyDividends() public notFromContract balanceChanged {\n    // calculate dividends\n    uint dividends = calcDividends(msg.sender);\n    require (dividends.notZero(), \"cannot to pay zero dividends\");\n\n    // update investor payment timestamp\n    assert(m_investors.setPaymentTime(msg.sender, now));\n\n    // check enough eth - goto next wave if needed\n    if (address(this).balance <= dividends) {\n      nextWave();\n      dividends = address(this).balance;\n    } \n\n    // transfer dividends to investor\n    msg.sender.transfer(dividends);\n    emit LogPayDividends(msg.sender, now, dividends);\n  }\n\n  function doInvest(address referrerAddr) public payable notFromContract balanceChanged {\n    uint investment = msg.value;\n    uint receivedEther = msg.value;\n    require(investment >= minInvesment, \"investment must be >= minInvesment\");\n    require(address(this).balance <= maxBalance, \"the contract eth balance limit\");\n\n    if (m_rgp.isActive()) { \n      // use Rapid Growth Protection if needed\n      uint rpgMaxInvest = m_rgp.maxInvestmentAtNow();\n      rpgMaxInvest.requireNotZero();\n      investment = Math.min(investment, rpgMaxInvest);\n      assert(m_rgp.saveInvestment(investment));\n      emit LogRGPInvestment(msg.sender, now, investment, m_rgp.currDay());\n      \n    } else if (m_privEnter.isActive()) {\n      // use Private Entrance if needed\n      uint peMaxInvest = m_privEnter.maxInvestmentFor(msg.sender);\n      peMaxInvest.requireNotZero();\n      investment = Math.min(investment, peMaxInvest);\n    }\n\n    // send excess of ether if needed\n    if (receivedEther > investment) {\n      uint excess = receivedEther - investment;\n      msg.sender.transfer(excess);\n      receivedEther = investment;\n      emit LogSendExcessOfEther(msg.sender, now, msg.value, investment, excess);\n    }\n\n   // commission\n\n\nbool senderIsInvestor = m_investors.isInvestor(msg.sender);\n    \n    // ref system works only once and only on first invest (is disabled)\nif (referrerAddr.notZero() && !senderIsInvestor && !m_referrals[msg.sender] &&\nreferrerAddr != msg.sender && m_investors.isInvestor(referrerAddr)) {\n\n\n}\n    \n    // automatic reinvest - prevent burning dividends\n    uint dividends = calcDividends(msg.sender);\n    if (senderIsInvestor && dividends.notZero()) {\n      investment += dividends;\n      emit LogAutomaticReinvest(msg.sender, now, dividends);\n    }\n\n    if (senderIsInvestor) {\n      // update existing investor\n      assert(m_investors.addInvestment(msg.sender, investment));\n      assert(m_investors.setPaymentTime(msg.sender, now));\n    } else {\n      // create new investor\n      assert(m_investors.newInvestor(msg.sender, investment, now));\n      emit LogNewInvestor(msg.sender, now);\n    }\n\n    investmentsNumber++;\n    emit LogNewInvesment(msg.sender, now, investment, receivedEther);\n  }\n\n  function getMemInvestor(address investorAddr) internal view returns(InvestorsStorage.Investor memory) {\n    (uint investment, uint paymentTime) = m_investors.investorInfo(investorAddr);\n    return InvestorsStorage.Investor(investment, paymentTime);\n  }\n\n  function calcDividends(address investorAddr) internal view returns(uint dividends) {\n    InvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\n\n    // safe gas if dividends will be 0\n    if (investor.investment.isZero() || now.sub(investor.paymentTime) < 1 seconds) {\n      return 0;\n    }\n    \n    // for prevent burning daily dividends if 24h did not pass - calculate it per 1 sec interval\n    // if daily percent is X, then 1 sec percent = X / (24h / 1 sec) = X / 86400\n\n    // and we must to get numbers of 1 sec interval after investor got payment:\n    // (now - investor.paymentTime) / 1 sec \n\n    // finaly calculate dividends = ((now - investor.paymentTime) / 1 sec) * (X * investor.investment)  / 86400) \n\n    Percent.percent memory p = dailyPercent();\n    dividends = (now.sub(investor.paymentTime) / 1 seconds) * p.mmul(investor.investment) / 86400;\n  }\n\n \n  function dailyPercent() internal view returns(Percent.percent memory p) {\n    uint balance = address(this).balance;\n      \n\n    if (balance < 33333e5 ether) { \n   \n      p = m_1_percent.toMemory();    // (1)\n\n  }\n  }\n\n\n\n  function nextWave() private {\n    m_investors = new InvestorsStorage();\n    investmentsNumber = 0;\n    waveStartup = now;\n    \n    \n    emit LogRGPInit(now , m_rgp.startTimestamp, m_rgp.maxDailyTotalInvestment, m_rgp.activityDays);\n    emit LogNextWave(now);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"advertisingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent1\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorDividendsAtNow\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyPercentAtNow\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"doInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"isReferral\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waveStartup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rev1Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rev2Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investorMaxInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogPEInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"LogSendExcessOfEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refBonus\",\"type\":\"uint256\"}],\"name\":\"LogNewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxDailyTotalInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"activityDays\",\"type\":\"uint256\"}],\"name\":\"LogRGPInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"LogRGPInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"LogAutomaticReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"LogPayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNextWave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogDisown\",\"type\":\"event\"}]",
  "bytecode": ""
}