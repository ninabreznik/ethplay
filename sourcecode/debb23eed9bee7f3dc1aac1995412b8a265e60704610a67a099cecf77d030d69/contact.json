{
  "address": "0x23700ab342ef9cd9a943dee2476f8bae020d7796",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Irstgold",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-21\n*/\n\npragma solidity >=0.4.22 < 0.6.0;\n\ninterface tokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \n}\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    function safeMul(uint a, uint b)internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b)internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\n\n/*\n * Base Token for ERC20 compatibility\n * ERC20 interface \n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    //function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint);\n    function allowance(address owner, address spender) public view returns (uint);\n    function transfer(address to, uint value) public returns (bool ok);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve(address spender, uint value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/*\n * Ownable\n *\n * Base contract with an owner contract.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n    /* Address of the owner */\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner,\"Only Token Owner can perform this action\");\n        _;\n    }\n\n    function transferOwnership(address _owner) public onlyOwner{\n        require(_owner != owner,\"New Owner is the same as existing Owner\");\n        require(_owner != address(0x0), \"Empty Address provided\");\n        owner = _owner;\n    }\n}\n\n/**\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, SafeMath, Ownable{\n\n    event Burn(address indexed from, uint value);\n\n    /* Actual balances of token holders */\n    mapping(address => uint) public balances;\n    uint public totalSupply;\n\n    /* approve() allowances */\n    mapping (address => mapping (address => uint)) internal allowed;\n    \n    /**\n     *\n     * Fix for the ERC20 short address attack\n     *\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\n     */\n    modifier onlyPayloadSize(uint size) {\n        if(msg.data.length < size + 4) {\n            revert(\"Payload attack\");\n        }\n        _;\n    }\n\n    /**\n     *\n     * Transfer with ERC20 specification\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\n     */\n    function transfer(address _to, uint _value)\n    public\n    onlyPayloadSize(2 * 32)\n    returns (bool)\n    {\n        require(_to != address(0x0), \"No address specified\");\n        require(balances[msg.sender] >= _value, \"Insufficiently fund\");\n        uint previousBalances = balances[msg.sender] + balances[_to];\n        \n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[msg.sender] + balances[_to] == previousBalances);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value)\n    public\n    returns (bool)\n    {\n        require(_to != address(0x0), \"Empty address specified as Receiver\");\n        require(_from != address(0x0), \"Empty Address provided for Sender\");\n        require(_value <= balances[_from], \"Insufficiently fund\");\n        require(_value <= allowed[_from][msg.sender], \"You can't spend the speficied amount from this Account\");\n        uint _allowance = allowed[_from][msg.sender];\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) \n    public\n    returns (bool)\n    {\n        require(_spender != address(0x0), \"Invalid Address\");\n\n        // To change the approve amount you first have to reduce the addresses`\n        //    allowance to zero by calling `approve(_spender, 0)` if it is not\n        //    already 0 to mitigate the race condition described here:\n        //    https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        //if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n        require(_value == 0 || allowed[msg.sender][_spender] == 0, \"Spender allowance must be zero before approving new allowance\");\n        require(_value <= balances[msg.sender],\"Insufficient balance in owner's account\");\n        require(_value >= 0, \"Cannot approve negative amount\");\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        require(_subtractedValue >= 0 && _subtractedValue <= balances[msg.sender], \"Invalid Amount\");\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n    function burn(address from, uint amount) public onlyOwner{\n        require(balances[from] >= amount && amount > 0, \"Insufficient amount or invalid amount specified\");\n        balances[from] = safeSub(balances[from],amount);\n        totalSupply = safeSub(totalSupply, amount);\n        emit Burn(from, amount);\n    }\n\n    function burn(uint amount) public{\n        burn(msg.sender, amount);\n    }\n}\n\ncontract Irstgold is StandardToken {\n    string public name;\n    uint8 public decimals; \n    string public symbol;\n\n    constructor() public{\n        decimals = 18;     // Amount of decimals for display purposes\n        totalSupply = 1000000000 * 1 ether;     // Update total supply\n        balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\n        name = \"1irstgold\";    // Set the name for display purposes\n        symbol = \"1STG\";    // Set the symbol for display purposes\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    // can accept ether\n    function() external payable{\n        revert(\"Token does not accept ETH\");\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600560006101000a81548160ff021916908360ff1602179055506b033b2e3c9fd0803ce8000000600281905550600254600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040805190810160405280600981526020017f3169727374676f6c640000000000000000000000000000000000000000000000815250600490805190602001906200011492919062000169565b506040805190810160405280600481526020017f3153544700000000000000000000000000000000000000000000000000000000815250600690805190602001906200016292919062000169565b5062000218565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ac57805160ff1916838001178555620001dd565b82800160010185558215620001dd579182015b82811115620001dc578251825591602001919060010190620001bf565b5b509050620001ec9190620001f0565b5090565b6200021591905b8082111562000211576000816000905550600101620001f7565b5090565b90565b6125a080620002286000396000f3fe60806040526004361061011b576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100b2578063a9059cbb11610081578063a9059cbb14610635578063cae9ca51146106a8578063d73dd623146107b2578063dd62ed3e14610825578063f2fde38b146108aa5761011b565b806370a082311461048e5780638da5cb5b146104f357806395d89b411461054a5780639dc29fac146105da5761011b565b806327e235e3116100ee57806327e235e31461034a578063313ce567146103af57806342966c68146103e0578063661884631461041b5761011b565b806306fdde0314610189578063095ea7b31461021957806318160ddd1461028c57806323b872dd146102b7575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f546f6b656e20646f6573206e6f7420616363657074204554480000000000000081525060200191505060405180910390fd5b34801561019557600080fd5b5061019e6108fb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101de5780820151818401526020810190506101c3565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b506102726004803603604081101561023c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610999565b604051808215151515815260200191505060405180910390f35b34801561029857600080fd5b506102a1610d24565b6040518082815260200191505060405180910390f35b3480156102c357600080fd5b50610330600480360360608110156102da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d2a565b604051808215151515815260200191505060405180910390f35b34801561035657600080fd5b506103996004803603602081101561036d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061125d565b6040518082815260200191505060405180910390f35b3480156103bb57600080fd5b506103c4611275565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103ec57600080fd5b506104196004803603602081101561040357600080fd5b8101908080359060200190929190505050611288565b005b34801561042757600080fd5b506104746004803603604081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611295565b604051808215151515815260200191505060405180910390f35b34801561049a57600080fd5b506104dd600480360360208110156104b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115e1565b6040518082815260200191505060405180910390f35b3480156104ff57600080fd5b5061050861162a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055657600080fd5b5061055f61164f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059f578082015181840152602081019050610584565b50505050905090810190601f1680156105cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105e657600080fd5b50610633600480360360408110156105fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116ed565b005b34801561064157600080fd5b5061068e6004803603604081101561065857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061192a565b604051808215151515815260200191505060405180910390f35b3480156106b457600080fd5b50610798600480360360608110156106cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561071257600080fd5b82018360208201111561072457600080fd5b8035906020019184600183028401116401000000008311171561074657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611da0565b604051808215151515815260200191505060405180910390f35b3480156107be57600080fd5b5061080b600480360360408110156107d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f24565b604051808215151515815260200191505060405180910390f35b34801561083157600080fd5b506108946004803603604081101561084857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612117565b6040518082815260200191505060405180910390f35b3480156108b657600080fd5b506108f9600480360360208110156108cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061219e565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109915780601f1061096657610100808354040283529160200191610991565b820191906000526020600020905b81548152906001019060200180831161097457829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642041646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6000821480610aca57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610b21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612464603d913960400191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806124c86027913960400191505060405180910390fd5b60008210151515610c34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f43616e6e6f7420617070726f7665206e6567617469766520616d6f756e74000081525060200191505060405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610db3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806124416023913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610e3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806124ef6021913960400191505060405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ef2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e73756666696369656e746c792066756e640000000000000000000000000081525060200191505060405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061253f6036913960400191505060405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611093600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846123d5565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110e081846123d5565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111a9600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846123ee565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60016020528060005260406000206000915090505481565b600560009054906101000a900460ff1681565b61129233826116ed565b50565b60008082101580156112e65750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b151561135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c696420416d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561146a576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114f5565b61147481846123d5565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116e55780601f106116ba576101008083540402835291602001916116e5565b820191906000526020600020905b8154815290600101906020018083116116c857829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611794576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806124196028913960400191505060405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156117e35750600081115b151561183a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612510602f913960400191505060405180910390fd5b611883600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826123d5565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118d2600254826123d5565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b6000604060048101600036905010156119ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5061796c6f61642061747461636b00000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611a50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20616464726573732073706563696669656400000000000000000000000081525060200191505060405180910390fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611b07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e73756666696369656e746c792066756e640000000000000000000000000081525060200191505060405180910390fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050611bd5600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856123d5565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c61600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856123ee565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a380600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515611d9457fe5b60019250505092915050565b600080849050611db08585610999565b15611f1b578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611eaa578082015181840152602081019050611e8f565b50505050905090810190601f168015611ed75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611ef957600080fd5b505af1158015611f0d573d6000803e3d6000fd5b505050506001915050611f1d565b505b9392505050565b6000611fac600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836123ee565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612245576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806124196028913960400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156122ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806124a16027913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612392576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f456d70747920416464726573732070726f76696465640000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156123e357fe5b818303905092915050565b60008082840190508381101580156124065750828110155b151561240e57fe5b809150509291505056fe4f6e6c7920546f6b656e204f776e65722063616e20706572666f726d207468697320616374696f6e456d7074792061646472657373207370656369666965642061732052656365697665725370656e64657220616c6c6f77616e6365206d757374206265207a65726f206265666f726520617070726f76696e67206e657720616c6c6f77616e63654e6577204f776e6572206973207468652073616d65206173206578697374696e67204f776e6572496e73756666696369656e742062616c616e636520696e206f776e65722773206163636f756e74456d70747920416464726573732070726f766964656420666f722053656e646572496e73756666696369656e7420616d6f756e74206f7220696e76616c696420616d6f756e7420737065636966696564596f752063616e2774207370656e64207468652073706566696369656420616d6f756e742066726f6d2074686973204163636f756e74a165627a7a72305820e189c2d0d4ec1079a3ac1f83487c2273504f61a6c63b44a21cf76ec85b399dc10029"
}