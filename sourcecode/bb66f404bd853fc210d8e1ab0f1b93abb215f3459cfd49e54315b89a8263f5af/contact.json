{
  "address": "0x000000002bb43c83ece652d161ad0fa862129a2c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AccountRegistry",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\npragma solidity ^0.4.20;// blaze it\n\ninterface ERC20 {\n    function totalSupply() external constant returns (uint supply);\n    function balanceOf(address _owner) external constant returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\ncontract TokenRescue {\n    // use this method to rescue your tokens if you sent them by mistake but be quick or someone else will get them\n    function rescueToken(ERC20 _token)\n    external\n    {\n        _token.transfer(msg.sender, _token.balanceOf(this));\n    }\n    // require data for transactions\n    function() external payable {\n        revert();\n    }\n}\ninterface AccountRegistryInterface {\n    function canVoteOnProposal(address _voter, address _proposal) external view returns (bool);\n}\ncontract Vote is ERC20, TokenRescue {\n    uint256 supply = 0;\n    AccountRegistryInterface public accountRegistry = AccountRegistryInterface(0x000000002bb43c83eCe652d161ad0fa862129A2C);\n    address public owner = 0x4a6f6B9fF1fc974096f9063a45Fd12bD5B928AD1;\n\n    uint8 public constant decimals = 1;\n    string public symbol = \"FV\";\n    string public name = \"FinneyVote\";\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) approved;\n\n    function totalSupply() external constant returns (uint256) {\n        return supply;\n    }\n    function balanceOf(address _owner) external constant returns (uint256) {\n        return balances[_owner];\n    }\n    function approve(address _spender, uint256 _value) external returns (bool) {\n        approved[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function allowance(address _owner, address _spender) external constant returns (uint256) {\n        return approved[_owner][_spender];\n    }\n    function transfer(address _to, uint256 _value) external returns (bool) {\n        if (balances[msg.sender] < _value) {\n            return false;\n        }\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n        if (balances[_from] < _value\n         || approved[_from][msg.sender] < _value\n         || _value == 0) {\n            return false;\n        }\n        approved[_from][msg.sender] -= _value;\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    function grant(address _to, uint256 _grant) external {\n        require(msg.sender == address(accountRegistry));\n        balances[_to] += _grant;\n        supply += _grant;\n        Transfer(address(0), _to, _grant);\n    }\n    // vote5 and vote1 are available for future use\n    function vote5(address _voter, address _votee) external {\n        require(balances[_voter] >= 10);\n        require(accountRegistry.canVoteOnProposal(_voter, msg.sender));\n        balances[_voter] -= 10;\n        balances[owner] += 5;\n        balances[_votee] += 5;\n        Transfer(_voter, owner, 5);\n        Transfer(_voter, _votee, 5);\n    }\n    function vote1(address _voter, address _votee) external {\n        require(balances[_voter] >= 10);\n        require(accountRegistry.canVoteOnProposal(_voter, msg.sender));\n        balances[_voter] -= 10;\n        balances[owner] += 9;\n        balances[_votee] += 1;\n        Transfer(_voter, owner, 9);\n        Transfer(_voter, _votee, 1);\n    }\n    function vote9(address _voter, address _votee) external {\n        require(balances[_voter] >= 10);\n        require(accountRegistry.canVoteOnProposal(_voter, msg.sender));\n        balances[_voter] -= 10;\n        balances[owner] += 1;\n        balances[_votee] += 9;\n        Transfer(_voter, owner, 1);\n        Transfer(_voter, _votee, 9);\n    }\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n    event Owner(address indexed owner);\n    event Registry(address indexed registry);\n    function transferOwnership(address _newOwner)\n    external onlyOwner {\n        uint256 balance = balances[owner];\n        balances[_newOwner] += balance;\n        balances[owner] = 0;\n        Transfer(owner, _newOwner, balance);\n        owner = _newOwner;\n        Owner(_newOwner);\n    }\n    function migrateAccountRegistry(AccountRegistryInterface _newAccountRegistry)\n    external onlyOwner {\n        accountRegistry = _newAccountRegistry;\n        Registry(_newAccountRegistry);\n    }\n}\ninterface ProposalInterface {\n    /* uint8:\n        enum Position {\n            SKIP, // default\n            APPROVE,\n            REJECT,\n            AMEND, // == (APPROVE | REJECT)\n            LOL\n            // more to be determined by community\n        }\n    */\n    function getPosition(address _user) external view returns (uint8);\n    function argumentCount() external view returns (uint256);\n    function vote(uint256 _argumentId) external;\n    // bytes could be:\n    // utf8 string\n    // swarm hash\n    // ipfs hash\n    // and others tbd\n    event Case(bytes content);\n}\ncontract ProperProposal is ProposalInterface, TokenRescue {\n    struct Argument {\n        address source;\n        uint8 position;\n        uint256 count;\n    }\n    Argument[] public arguments;\n    mapping (address => uint256) public votes;\n    Vote public constant voteToken = Vote(0x000000002647e16d9BaB9e46604D75591D289277);\n\n    function getPosition(address _user)\n    external view\n    returns (uint8) {\n        return arguments[votes[_user]].position;\n    }\n\n    function argumentCount() external view returns (uint256) {\n        return arguments.length;\n    }\n    function argumentSource(uint256 _index)\n    external view\n    returns (address) {\n        return arguments[_index].source;\n    }\n\n    function argumentPosition(uint256 _index)\n    external view\n    returns (uint8) {\n        return arguments[_index].position;\n    }\n\n    function argumentVoteCount(uint256 _index)\n    external view\n    returns (uint256) {\n        return arguments[_index].count;\n    }\n\n    function source()\n    external view\n    returns (address) {\n        return arguments[0].source;\n    }\n\n    function voteCount()\n    external view\n    returns (uint256) {\n        return -arguments[0].count;\n    }\n\n    function vote(uint256 _argumentId)\n    external {\n        address destination = arguments[_argumentId].source;\n        voteToken.vote9(msg.sender, destination);\n        arguments[votes[msg.sender]].count--;\n        arguments[\n            votes[msg.sender] = _argumentId\n        ].count++;\n    }\n\n    event Case(bytes content);\n\n    function argue(uint8 _position, bytes _text)\n    external\n    returns (uint256) {\n        address destination = arguments[0].source;\n        voteToken.vote9(msg.sender, destination);\n        uint256 argumentId = arguments.length;\n        arguments.push(Argument(msg.sender, _position, 1));\n        Case(_text);\n        arguments[votes[msg.sender]].count--;\n        votes[msg.sender] = argumentId;\n        return argumentId;\n    }\n\n    function init(address _source, bytes _resolution)\n    external {\n        assert(msg.sender == 0x000000002bb43c83eCe652d161ad0fa862129A2C);\n        arguments.push(Argument(_source, 0/*SKIP*/, 0));\n        Case(_resolution);\n    }\n}\ninterface CabalInterface {\n    // TBD\n    function canonCount() external view returns (uint256);\n}\ncontract AccountRegistry is AccountRegistryInterface, TokenRescue {\n    \n    uint256 constant public registrationDeposit = 1 finney;\n    uint256 constant public proposalCensorshipFee = 50 finney;\n\n    // this is the first deterministic contract address for 0x24AE90765668938351075fB450892800d9A52E39\n    address constant public burn = 0x000000003Ffc15cd9eA076d7ec40B8f516367Ca1;\n\n    Vote public constant token = Vote(0x000000002647e16d9BaB9e46604D75591D289277);\n\n    /* uint8 membership bitmap:\n     * 0 - proposer\n     * 1 - registered to vote\n     * 2 - pending proposal\n     * 3 - proposal\n     * 4 - board member\n     * 5 - pending cabal\n     * 6 - cabal\n     * 7 - board\n     */\n    uint8 constant UNCONTACTED = 0;\n    uint8 constant PROPOSER = 1;\n    uint8 constant VOTER = 2;\n    uint8 constant PENDING_PROPOSAL = 4;\n    uint8 constant PROPOSAL = 8;\n    uint8 constant PENDING_CABAL = 16;\n    uint8 constant CABAL = 32;\n    uint8 constant BOARD = 64;\n    struct Account {\n        uint256 lastAccess;\n        uint8 membership;\n        address appointer;//nominated this account for BOARD\n        address denouncer;//denounced this BOARD account\n        address voucher;//nominated this account for PROPOSER\n        address devoucher;//denounced this account for PROPOSER\n    }\n    mapping (address => Account) accounts;\n\n    function AccountRegistry()\n    public\n    {\n        accounts[0x4a6f6B9fF1fc974096f9063a45Fd12bD5B928AD1].membership = BOARD;\n        Board(0x4a6f6B9fF1fc974096f9063a45Fd12bD5B928AD1);\n        accounts[0x90Fa310397149A7a9058Ae2d56e66e707B12D3A7].membership = BOARD;\n        Board(0x90Fa310397149A7a9058Ae2d56e66e707B12D3A7);\n        accounts[0x424a6e871E8cea93791253B47291193637D6966a].membership = BOARD;\n        Board(0x424a6e871E8cea93791253B47291193637D6966a);\n        accounts[0xA4caDe6ecbed8f75F6fD50B8be92feb144400CC4].membership = BOARD;\n        Board(0xA4caDe6ecbed8f75F6fD50B8be92feb144400CC4);\n    }\n\n    event Voter(address indexed voter);\n    event Deregistered(address indexed voter);\n    event Nominated(address indexed board, string endorsement);\n    event Board(address indexed board);\n    event Denounced(address indexed board, string reason);\n    event Revoked(address indexed board);\n    event Proposal(ProposalInterface indexed proposal);\n    event Cabal(CabalInterface indexed cabal);\n    event BannedProposal(ProposalInterface indexed proposal, string reason);\n    event Vouch(address indexed proposer, string vouch);\n    event Proposer(address indexed proposer);\n    event Devouch(address indexed proposer, string vouch);\n    event Shutdown(address indexed proposer);\n\n    // To register a Cabal, you must\n    // - implement CabalInterface\n    // - open-source your Cabal on Etherscan or equivalent\n    function registerCabal(CabalInterface _cabal)\n    external {\n        Account storage account = accounts[_cabal];\n        require(account.membership & (PENDING_CABAL | CABAL) == 0);\n        account.membership |= PENDING_CABAL;\n    }\n\n    function confirmCabal(CabalInterface _cabal)\n    external {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage account = accounts[_cabal];\n        require(account.membership & PENDING_CABAL != 0);\n        account.membership ^= (CABAL | PENDING_CABAL);\n        Cabal(_cabal);\n    }\n\n    function register()\n    external payable\n    {\n        require(msg.value == registrationDeposit);\n        Account storage account = accounts[msg.sender];\n        require(account.membership & VOTER == 0);\n        account.lastAccess = now;\n        account.membership |= VOTER;\n        token.grant(msg.sender, 40);\n        Voter(msg.sender);\n    }\n\n    // smart contracts must implement the fallback function in order to deregister\n    function deregister()\n    external\n    {\n        Account storage account = accounts[msg.sender];\n        require(account.membership & VOTER != 0);\n        require(account.lastAccess + 7 days <= now);\n        account.membership ^= VOTER;\n        account.lastAccess = 0;\n        // the MANDATORY transfer keeps population() meaningful\n        msg.sender.transfer(registrationDeposit);\n        Deregistered(msg.sender);\n    }\n\n    function population()\n    external view\n    returns (uint256)\n    {\n        return this.balance / 1 finney;\n    }\n\n    function deregistrationDate()\n    external view\n    returns (uint256)\n    {\n        return accounts[msg.sender].lastAccess + 7 days;\n    }\n\n    // always true for deregistered accounts\n    function canDeregister(address _voter)\n    external view\n    returns (bool)\n    {\n        return accounts[_voter].lastAccess + 7 days <= now;\n    }\n\n    function canVoteOnProposal(address _voter, address _proposal)\n    external view\n    returns (bool)\n    {\n        return accounts[_voter].membership & VOTER != 0\n            && accounts[_proposal].membership & PROPOSAL != 0;\n    }\n\n    function canVote(address _voter)\n    external view\n    returns (bool)\n    {\n        return accounts[_voter].membership & VOTER != 0;\n    }\n\n    function isProposal(address _proposal)\n    external view\n    returns (bool)\n    {\n        return accounts[_proposal].membership & PROPOSAL != 0;\n    }\n\n    function isPendingProposal(address _proposal)\n    external view\n    returns (bool)\n    {\n        return accounts[_proposal].membership & PENDING_PROPOSAL != 0;\n    }\n\n    function isPendingCabal(address _account)\n    external view\n    returns (bool)\n    {\n        return accounts[_account].membership & PENDING_CABAL != 0;\n    }\n\n    function isCabal(address _account)\n    external view\n    returns (bool)\n    {\n        return accounts[_account].membership & CABAL != 0;\n    }\n\n    // under no condition should you let anyone control two BOARD accounts\n    function appoint(address _board, string _vouch)\n    external {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage candidate = accounts[_board];\n        if (candidate.membership & BOARD != 0) {\n            return;\n        }\n        address appt = candidate.appointer;\n        if (accounts[appt].membership & BOARD == 0) {\n            candidate.appointer = msg.sender;\n            Nominated(_board, _vouch);\n            return;\n        }\n        if (appt == msg.sender) {\n            return;\n        }\n        Nominated(_board, _vouch);\n        candidate.membership |= BOARD;\n        Board(_board);\n    }\n\n    function denounce(address _board, string _reason)\n    external {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage board = accounts[_board];\n        if (board.membership & BOARD == 0) {\n            return;\n        }\n        address dncr = board.denouncer;\n        if (accounts[dncr].membership & BOARD == 0) {\n            board.denouncer = msg.sender;\n            Denounced(_board, _reason);\n            return;\n        }\n        if (dncr == msg.sender) {\n            return;\n        }\n        Denounced(_board, _reason);\n        board.membership ^= BOARD;\n        Revoked(_board);\n    }\n\n    function vouchProposer(address _proposer, string _vouch)\n    external {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage candidate = accounts[_proposer];\n        if (candidate.membership & PROPOSER != 0) {\n            return;\n        }\n        address appt = candidate.voucher;\n        if (accounts[appt].membership & BOARD == 0) {\n            candidate.voucher = msg.sender;\n            Vouch(_proposer, _vouch);\n            return;\n        }\n        if (appt == msg.sender) {\n            return;\n        }\n        Vouch(_proposer, _vouch);\n        candidate.membership |= PROPOSER;\n        Proposer(_proposer);\n    }\n\n    function devouchProposer(address _proposer, string _devouch)\n    external {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage candidate = accounts[_proposer];\n        if (candidate.membership & PROPOSER == 0) {\n            return;\n        }\n        address appt = candidate.devoucher;\n        if (accounts[appt].membership & BOARD == 0) {\n            candidate.devoucher = msg.sender;\n            Devouch(_proposer, _devouch);\n            return;\n        }\n        if (appt == msg.sender) {\n            return;\n        }\n        Devouch(_proposer, _devouch);\n        candidate.membership &= ~PROPOSER;\n        Shutdown(_proposer);\n    }\n\n    function proposeProper(bytes _resolution)\n    external\n    returns (ProposalInterface)\n    {\n        ProperProposal proposal = new ProperProposal();\n        proposal.init(msg.sender, _resolution);\n        accounts[proposal].membership |= PROPOSAL;\n        Proposal(proposal);\n        return proposal;\n    }\n\n    function proposeProxy(bytes _resolution)\n    external\n    returns (ProposalInterface)\n    {\n        ProperProposal proposal;\n        bytes memory clone = hex\"600034603b57602f80600f833981f3600036818037808036816f5fbe2cc9b1b684ec445caf176042348e5af415602c573d81803e3d81f35b80fd\";\n        assembly {\n            let data := add(clone, 0x20)\n            proposal := create(0, data, 58)\n        }\n        proposal.init(msg.sender, _resolution);\n        accounts[proposal].membership |= PROPOSAL;\n        Proposal(proposal);\n        return proposal;\n    }\n\n    function sudoPropose(ProposalInterface _proposal)\n    external {\n        require(accounts[msg.sender].membership & PROPOSER != 0);\n        uint8 membership = accounts[_proposal].membership;\n        require(membership == 0);\n        accounts[_proposal].membership = PROPOSAL;\n        Proposal(_proposal);\n    }\n\n    // To submit an outside proposal contract, you must:\n    // - ensure it conforms to ProposalInterface\n    // - ensure it properly transfers the VOTE token, calling Vote.voteX\n    // - open-source it using Etherscan or equivalent\n    function proposeExternal(ProposalInterface _proposal)\n    external\n    {\n        Account storage account = accounts[_proposal];\n        require(account.membership & (PENDING_PROPOSAL | PROPOSAL) == 0);\n        account.membership |= PENDING_PROPOSAL;\n    }\n\n    function confirmProposal(ProposalInterface _proposal)\n    external\n    {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage account = accounts[_proposal];\n        require(account.membership & PENDING_PROPOSAL != 0);\n        account.membership ^= (PROPOSAL | PENDING_PROPOSAL);\n        Proposal(_proposal);\n    }\n\n    // bans prevent accounts from voting through this proposal\n    // this should only be used to stop a proposal that is abusing the VOTE token\n    // the burn is to penalize bans, so that they cannot suppress ideas\n    function banProposal(ProposalInterface _proposal, string _reason)\n    external payable\n    {\n        require(msg.value == proposalCensorshipFee);\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage account = accounts[_proposal];\n        require(account.membership & PROPOSAL != 0);\n        account.membership &= ~PROPOSAL;\n        burn.transfer(proposalCensorshipFee);\n        BannedProposal(_proposal, _reason);\n    }\n\n    // board members reserve the right to reject outside proposals for any reason\n    function rejectProposal(ProposalInterface _proposal)\n    external\n    {\n        require(accounts[msg.sender].membership & BOARD != 0);\n        Account storage account = accounts[_proposal];\n        require(account.membership & PENDING_PROPOSAL != 0);\n        account.membership &= PENDING_PROPOSAL;\n    }\n\n    // this code lives here instead of in the token so that it can be upgraded with account registry migration\n    function faucet()\n    external {\n        Account storage account = accounts[msg.sender];\n        require(account.membership & VOTER != 0);\n        uint256 lastAccess = account.lastAccess;\n        uint256 grant = (now - lastAccess) / 72 minutes;\n        if (grant > 40) {\n            grant = 40;\n            account.lastAccess = now;\n        } else {\n            account.lastAccess = lastAccess + grant * 72 minutes;\n        }\n        token.grant(msg.sender, grant);\n    }\n\n    function availableFaucet(address _account)\n    external view\n    returns (uint256) {\n        uint256 grant = (now - accounts[_account].lastAccess) / 72 minutes;\n        if (grant > 40) {\n            grant = 40;\n        }\n        return grant;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b734a6f6b9ff1fc974096f9063a45fd12bd5b928ad160008181526020527f96b908f2db6073740df85f2c4ff2d60273344816dd34c344c08cdbfe530398e8805460ff19166040908117909155600080516020612418833981519152905160405180910390a27390fa310397149a7a9058ae2d56e66e707b12d3a760008181526020527f92c9f701242c520008fb996bd12ae7cf374794f8622fbfea963b65dc70eb0d31805460ff19166040908117909155600080516020612418833981519152905160405180910390a273424a6e871e8cea93791253b47291193637d6966a60008181526020527f0db1c8a2ca2038021e5628164052a52a888ff1a96351b2fd25810124ad3c941e805460ff19166040908117909155600080516020612418833981519152905160405180910390a273a4cade6ecbed8f75f6fd50b8be92feb144400cc460008181526020527f8c49fc7413e0189c9401652778145f255eff3e716e59ea1dc980fcadd3915d43805460ff19166040908117909155600080516020612418833981519152905160405180910390a2612266806101b26000396000f3006060604052600436106101715763ffffffff60e060020a6000350416631210265281146101765780631aa3a008146101a957806321f3f338146101b357806325b75b7b146101d857806331606828146101eb5780633b795f26146101fe5780633cd34b32146102295780634460d3cf1461024857806344df8e70146102675780634781db20146102965780634aae8976146102b557806352050003146102d457806353d819de146102f3578063668fd4331461031257806369e556ca146103325780636f910c651461035057806378880f4a1461036f578063862cd0391461038257806395156c96146103a1578063a7e1bc40146103c6578063ad798676146103f1578063adfaa72e14610410578063aff5edb11461042f578063b414dc4b14610442578063ba55829214610461578063c3a301201461048c578063cddab28b146104ab578063d48ee9df146104ca578063de5f72fd146104e8578063f7b378ea146104fb578063fc0c546a14610526575b600080fd5b341561018157600080fd5b610195600160a060020a0360043516610539565b604051901515815260200160405180910390f35b6101b161055c565b005b34156101be57600080fd5b6101c6610660565b60405190815260200160405180910390f35b34156101e357600080fd5b6101c661066b565b34156101f657600080fd5b6101c661068c565b341561020957600080fd5b6101b160048035600160a060020a03169060248035908101910135610697565b341561023457600080fd5b6101b1600160a060020a036004351661087a565b341561025357600080fd5b6101b1600160a060020a0360043516610921565b341561027257600080fd5b61027a610a04565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b610195600160a060020a0360043516610a18565b34156102c057600080fd5b610195600160a060020a0360043516610a3a565b34156102df57600080fd5b610195600160a060020a0360043516610a5f565b34156102fe57600080fd5b6101c6600160a060020a0360043516610a82565b6101b160048035600160a060020a03169060248035908101910135610ab7565b341561033d57600080fd5b61027a6004803560248101910135610bcd565b341561035b57600080fd5b6101b1600160a060020a0360043516610d1e565b341561037a57600080fd5b6101c6610db8565b341561038d57600080fd5b6101b1600160a060020a0360043516610dcf565b34156103ac57600080fd5b610195600160a060020a0360043581169060243516610e64565b34156103d157600080fd5b6101b160048035600160a060020a03169060248035908101910135610eb5565b34156103fc57600080fd5b610195600160a060020a0360043516611088565b341561041b57600080fd5b610195600160a060020a03600435166110ab565b341561043a57600080fd5b6101b16110ce565b341561044d57600080fd5b6101b1600160a060020a0360043516611197565b341561046c57600080fd5b6101b160048035600160a060020a031690602480359081019101356111db565b341561049757600080fd5b6101b1600160a060020a03600435166113a7565b34156104b657600080fd5b6101b1600160a060020a03600435166113eb565b34156104d557600080fd5b61027a6004803560248101910135611455565b34156104f357600080fd5b6101b1611551565b341561050657600080fd5b6101b160048035600160a060020a0316906024803590810191013561161f565b341561053157600080fd5b61027a6117f4565b600160a060020a0316600090815260208190526040902060010154601016151590565b60003466038d7ea4c680001461057157600080fd5b50600160a060020a033316600090815260208190526040902060018101546002161561059c57600080fd5b42815560018101805460ff8082166002171660ff199091161790556f2647e16d9bab9e46604d75591d289277636370920e33602860405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561061357600080fd5b6102c65a03f1151561062457600080fd5b50505033600160a060020a03167f0c1b36e97846a7da5a05d35cf12e6549b45ad533b06775af71fcb75690fdf48f60405160405180910390a250565b66b1a2bc2ec5000081565b600160a060020a03331660009081526020819052604090205462093a800190565b66038d7ea4c6800081565b600160a060020a0333166000908152602081905260408082206001015482911615156106c257600080fd5b600160a060020a03851660009081526020819052604090819020600181015490935016156106ef57610873565b506001818101546101009004600160a060020a0316600081815260208190526040908190209092015490911615156107ab57600182018054600160a060020a033381166101000274ffffffffffffffffffffffffffffffffffffffff00199092169190911790915585167f10eb58b80d8dab737c2dc31ab5500fd37934ac8bb77d1bc34920e6fc099ef4d985856040516020808252810182905280604081018484808284378201915050935050505060405180910390a2610873565b33600160a060020a031681600160a060020a031614156107ca57610873565b84600160a060020a03167f10eb58b80d8dab737c2dc31ab5500fd37934ac8bb77d1bc34920e6fc099ef4d985856040516020808252810182905280604081018484808284378201915050935050505060405180910390a260018201805460ff198116604060ff928316811790921617909155600160a060020a038616907f178407cae5375558cd8030fb8b73bfce971b88244c1990eb3eee1cd7cb9441c6905160405180910390a25b5050505050565b600160a060020a033316600090815260208190526040808220600101541615156108a357600080fd5b50600160a060020a0381166000908152602081905260409020600181015460101615156108cf57600080fd5b60018101805460ff8082166030181660ff19909116179055600160a060020a0382167fe7b1cf53f9999f711cffc4925ff3aaee31c18c92ff4c567f7e393c8b533dc06060405160405180910390a25050565b600160a060020a03811663a9059cbb33826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561097f57600080fd5b6102c65a03f1151561099057600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109e657600080fd5b6102c65a03f115156109f757600080fd5b5050506040518051505050565b6f3ffc15cd9ea076d7ec40b8f516367ca181565b600160a060020a03166000908152602081815260409091206001015416151590565b600160a060020a03166000908152602081905260409020544262093a80909101111590565b600160a060020a0316600090815260208190526040902060010154600816151590565b600160a060020a0381166000908152602081905260408120546110e04291909103046028811115610ab1575060285b92915050565b60003466b1a2bc2ec5000014610acc57600080fd5b600160a060020a0333166000908152602081905260409081902060010154161515610af657600080fd5b50600160a060020a038316600090815260208190526040902060018101546008161515610b2257600080fd5b60018101805460ff19811660f79091161790556f3ffc15cd9ea076d7ec40b8f516367ca1600066b1a2bc2ec50000604051600060405180830381858888f193505050501515610b7057600080fd5b83600160a060020a03167f6d40a6c0f7bf75feb085f27d17650576451083335801947f974c72623e9f030e84846040516020808252810182905280604081018484808284378201915050935050505060405180910390a250505050565b600080610bd8611808565b606060405190810160405280603a81526020017f600034603b57602f80600f833981f3600036818037808036816f5fbe2cc9b1b681526020017f84ec445caf176042348e5af415602c573d81803e3d81f35b80fd000000000000815250905060208101603a816000f092505081600160a060020a031663c0d91eaf33878760405160e060020a63ffffffff8616028152600160a060020a038416600482019081526040602483019081526044830184905290916064018484808284378201915050945050505050600060405180830381600087803b1515610cb857600080fd5b6102c65a03f11515610cc957600080fd5b505050600160a060020a03821660008181526020819052604090819020600101805460ff8082166008171660ff1990911617905560008051602061221b833981519152905160405180910390a2509392505050565b600160a060020a0333166000908152602081905260408120600190810154161515610d4857600080fd5b50600160a060020a03811660009081526020819052604090206001015460ff168015610d7357600080fd5b600160a060020a03821660008181526020819052604090819020600101805460ff1916600817905560008051602061221b833981519152905160405180910390a25050565b66038d7ea4c6800030600160a060020a0316310490565b600160a060020a03331660009081526020819052604080822060010154161515610df857600080fd5b50600160a060020a038116600090815260208190526040902060018101546004161515610e2457600080fd5b60018101805460ff808216600c181660ff19909116179055600160a060020a03821660008051602061221b83398151915260405160405180910390a25050565b600160a060020a03821660009081526020819052604081206001015460021615801590610eae5750600160a060020a03821660009081526020819052604090206001015460081615155b9392505050565b600160a060020a033316600090815260208190526040808220600101548291161515610ee057600080fd5b600160a060020a03851660009081526020819052604090206001808201549193501615610f0c57610873565b506003810154600160a060020a03166000818152602081905260409081902060010154161515610fba5760038201805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a039081169190911790915585167f32407bc42541b7e0fd0a143e0777c89664118525168de7c174f1264608603edf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a2610873565b33600160a060020a031681600160a060020a03161415610fd957610873565b84600160a060020a03167f32407bc42541b7e0fd0a143e0777c89664118525168de7c174f1264608603edf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a26001828101805460ff19811660ff91821690931716919091179055600160a060020a0385167fa990523a550e65422b3b987dda53586fadb4067c5e34841901d2f74a5c81e4ad60405160405180910390a25050505050565b600160a060020a0316600090815260208190526040902060010154600416151590565b600160a060020a0316600090815260208190526040902060010154600216151590565b600160a060020a0333166000908152602081905260409020600181015460021615156110f957600080fd5b80544262093a80909101111561110e57600080fd5b60018101805460ff8082166002181660ff199091161790556000808255600160a060020a0333169066038d7ea4c68000604051600060405180830381858888f19350505050151561115e57600080fd5b33600160a060020a03167fafebd0f81ba8c430fcc0c6a6e7a26fd7f868af9c4e4f19db37a0f16502374fd560405160405180910390a250565b600160a060020a03811660009081526020819052604090206001810154600c16156111c157600080fd5b600101805460ff8082166004171660ff1990911617905550565b600160a060020a03331660009081526020819052604080822060010154829116151561120657600080fd5b600160a060020a038516600090815260208190526040902060018082015491935016151561123357610873565b506004810154600160a060020a031660008181526020819052604090819020600101541615156112e15760048201805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a039081169190911790915585167f97232fb2be1b40673dd8ccff240d014fc18b0c07b9ef28b4472a298982778a9385856040516020808252810182905280604081018484808284378201915050935050505060405180910390a2610873565b33600160a060020a031681600160a060020a0316141561130057610873565b84600160a060020a03167f97232fb2be1b40673dd8ccff240d014fc18b0c07b9ef28b4472a298982778a9385856040516020808252810182905280604081018484808284378201915050935050505060405180910390a260018201805460ff19811660fe909116179055600160a060020a0385167f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a60405160405180910390a25050505050565b600160a060020a03811660009081526020819052604090206001810154603016156113d157600080fd5b600101805460ff8082166010171660ff1990911617905550565b600160a060020a0333166000908152602081905260408082206001015416151561141457600080fd5b50600160a060020a03811660009081526020819052604090206001810154600416151561144057600080fd5b60010180546004811660ff1990911617905550565b60008061146061181a565b604051809103906000f080151561147657600080fd5b905080600160a060020a031663c0d91eaf33868660405160e060020a63ffffffff8616028152600160a060020a038416600482019081526040602483019081526044830184905290916064018484808284378201915050945050505050600060405180830381600087803b15156114ec57600080fd5b6102c65a03f115156114fd57600080fd5b505050600160a060020a03811660008181526020819052604090819020600101805460ff8082166008171660ff1990911617905560008051602061221b833981519152905160405180910390a29392505050565b600160a060020a033316600090815260208190526040812060018101549091908190600216151561158157600080fd5b505080546110e0428290030460288111156115a1575042825560286115ab565b6110e08102820183555b6f2647e16d9bab9e46604d75591d289277636370920e338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561160657600080fd5b6102c65a03f1151561161757600080fd5b505050505050565b600160a060020a03331660009081526020819052604080822060010154829116151561164a57600080fd5b600160a060020a03851660009081526020819052604090819020600181015490935016151561167857610873565b506002810154600160a060020a031660008181526020819052604090819020600101541615156117265760028201805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a039081169190911790915585167f18d705b35f29472753650fce78acd3f51e4c48e8bd3b94ed48c287de94d158a285856040516020808252810182905280604081018484808284378201915050935050505060405180910390a2610873565b33600160a060020a031681600160a060020a0316141561174557610873565b84600160a060020a03167f18d705b35f29472753650fce78acd3f51e4c48e8bd3b94ed48c287de94d158a285856040516020808252810182905280604081018484808284378201915050935050505060405180910390a260018201805460ff198116604060ff928316811890921617909155600160a060020a038616907fb6fa8b8bd5eab60f292eca876e3ef90722275b785309d84b1de113ce0b8c4e74905160405180910390a25050505050565b6f2647e16d9bab9e46604d75591d28927781565b60206040519081016040526000815290565b6040516109f08061182b8339019056006060604052341561000f57600080fd5b6109d28061001e6000396000f3006060604052600436106100b65763ffffffff60e060020a6000350416630121b93f81146100bb5780630a68f631146100d3578063160d66ae1461011957806316c19739146101485780631d5e752d1461017d57806333e13e21146101935780634460d3cf146101bb57806344ef231b146101da57806366472261146101ed57806367e828bf14610212578063c0d91eaf14610225578063c353523614610250578063c638407114610266578063d8bff5a514610279575b600080fd5b34156100c657600080fd5b6100d1600435610298565b005b34156100de57600080fd5b6100e96004356103b3565b604051600160a060020a03909316835260ff90911660208301526040808301919091526060909101905180910390f35b341561012457600080fd5b61012c6103f4565b604051600160a060020a03909116815260200160405180910390f35b341561015357600080fd5b610167600160a060020a0360043516610408565b60405160ff909116815260200160405180910390f35b341561018857600080fd5b61016760043561044f565b341561019e57600080fd5b6101a960043561045f565b60405190815260200160405180910390f35b34156101c657600080fd5b6100d1600160a060020a0360043516610488565b34156101e557600080fd5b6101a961056b565b34156101f857600080fd5b6101a96004803560ff169060248035908101910135610572565b341561021d57600080fd5b61012c610775565b341561023057600080fd5b6100d160048035600160a060020a031690602480359081019101356107a5565b341561025b57600080fd5b61012c6004356108cb565b341561027157600080fd5b6101a96108fb565b341561028457600080fd5b6101a9600160a060020a0360043516610926565b600080828154811015156102a857fe5b6000918252602090912060029091020154600160a060020a031690506f2647e16d9bab9e46604d75591d289277638b236271338360405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401600060405180830381600087803b151561032157600080fd5b6102c65a03f1151561033257600080fd5b505050600160a060020a0333166000908152600160205260408120548154811061035857fe5b60009182526020808320600160029093020182018054600019019055600160a060020a0333168352526040812083905580548390811061039457fe5b6000918252602090912060016002909202018101805490910190555050565b60008054829081106103c157fe5b600091825260209091206002909102018054600190910154600160a060020a038216925060a060020a90910460ff169083565b6f2647e16d9bab9e46604d75591d28927781565b600160a060020a0381166000908152600160205260408120548154829190811061042e57fe5b600091825260209091206002909102015460a060020a900460ff1692915050565b6000808281548110151561042e57fe5b6000808281548110151561046f57fe5b9060005260206000209060020201600101549050919050565b600160a060020a03811663a9059cbb33826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156104e657600080fd5b6102c65a03f115156104f757600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561054d57600080fd5b6102c65a03f1151561055e57600080fd5b5050506040518051505050565b6000545b90565b600080600080600081548110151561058657fe5b6000918252602090912060029091020154600160a060020a031691506f2647e16d9bab9e46604d75591d289277638b236271338460405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401600060405180830381600087803b15156105ff57600080fd5b6102c65a03f1151561061057600080fd5b5050600080549250905081600181016106298382610938565b9160005260206000209060020201600060606040519081016040908152600160a060020a033316825260ff8b1660208301526001908201529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151815460ff9190911660a060020a0274ff000000000000000000000000000000000000000019909116178155604082015181600101555050507fb026a0d6eb8b5919e909850a1d0ab0f3468e08b48ef884a544e886fb93d6ab0485856040516020808252810182905280604081018484808284378201915050935050505060405180910390a1600160a060020a0333166000908152600160205260408120548154811061073b57fe5b60009182526020808320600160029093020182018054600019019055600160a060020a033316835252604090208190559150509392505050565b600080600081548110151561078657fe5b6000918252602090912060029091020154600160a060020a0316905090565b6f2bb43c83ece652d161ad0fa862129a2c600160a060020a033316146107c757fe5b60008054600181016107d98382610938565b9160005260206000209060020201600060606040519081016040908152600160a060020a0388168252600060208301819052908201529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151815460ff9190911660a060020a0274ff000000000000000000000000000000000000000019909116178155604082015181600101555050507fb026a0d6eb8b5919e909850a1d0ab0f3468e08b48ef884a544e886fb93d6ab0482826040516020808252810182905280604081018484808284378201915050935050505060405180910390a1505050565b600080828154811015156108db57fe5b6000918252602090912060029091020154600160a060020a031692915050565b600080600081548110151561090c57fe5b906000526020600020906002020160010154600003905090565b60016020526000908152604090205481565b815481835581811511610964576002028160020283600052602060002091820191016109649190610969565b505050565b61056f91905b808211156109a257805474ffffffffffffffffffffffffffffffffffffffffff191681556000600182015560020161096f565b50905600a165627a7a72305820104a3ee740e4082aa4a5709e8e2c5b1e96331316b5f54df5d0b5bc87ff8bceee0029d721fc4b71111225bba131141f013ef3e3956654b0eade3c9e9f611f0d93b551a165627a7a72305820a6b7df0aa14346833c127740034defdaf51df17700584c3bb17f518ea3b031600029178407cae5375558cd8030fb8b73bfce971b88244c1990eb3eee1cd7cb9441c6",
  "constructorArguments": "178407cae5375558cd8030fb8b73bfce971b88244c1990eb3eee1cd7cb9441c6"
}