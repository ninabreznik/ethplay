{
  "address": "0x9d34365671af7959e84b69d0a3d71a981b42039e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClinicAllToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\TokenDestructible.sol\n\n/**\n * @title TokenDestructible:\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Base contract that can be destroyed by owner. All funds in contract including\n * listed tokens will be sent to the owner.\n */\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n   refund.\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy(address[] tokens) onlyOwner public {\n\n    // Transfer tokens to owner\n    for (uint256 i = 0; i < tokens.length; i++) {\n      ERC20Basic token = ERC20Basic(tokens[i]);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(owner, balance);\n    }\n\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(owner);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts\\TransferableToken.sol\n\n/**\n * @title TransferableToken\n * @dev Base contract which allows to implement transfer for token.\n */\ncontract TransferableToken is Ownable {\n  event TransferOn();\n  event TransferOff();\n\n  bool public transferable = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not transferable.\n   */\n  modifier whenNotTransferable() {\n    require(!transferable);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is transferable.\n   */\n  modifier whenTransferable() {\n    require(transferable);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to enable transfers\n   */\n  function transferOn() onlyOwner whenNotTransferable public {\n    transferable = true;\n    emit TransferOn();\n  }\n\n  /**\n   * @dev called by the owner to disable transfers\n   */\n  function transferOff() onlyOwner whenTransferable public {\n    transferable = false;\n    emit TransferOff();\n  }\n\n}\n\n// File: contracts\\ClinicAllToken.sol\n\ncontract ClinicAllToken is MintableToken, DetailedERC20, CappedToken, PausableToken, BurnableToken, TokenDestructible, TransferableToken {\n  constructor\n  (\n    string _name,\n    string _symbol,\n    uint8 _decimals,\n    uint256 _cap\n  )\n  DetailedERC20(_name, _symbol, _decimals)\n  CappedToken(_cap)\n  public\n  {\n\n  }\n\n  /*/\n  *  Refund event when ICO didn't pass soft cap and we refund ETH to investors + burn ERC-20 tokens from investors balances\n  /*/\n  function burnAfterRefund(address _who) public onlyOwner {\n    uint256 _value = balances[_who];\n    _burn(_who, _value);\n  }\n\n  /*/\n  *  Allow transfers only if token is transferable\n  /*/\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n  public\n  whenTransferable\n  returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  /*/\n  *  Allow transfers only if token is transferable\n  /*/\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  whenTransferable\n  returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function transferToPrivateInvestor(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  onlyOwner\n  returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function burnPrivateSale(address privateSaleWallet, uint256 _value) public onlyOwner {\n    _burn(privateSaleWallet, _value);\n  }\n\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556008805461ffff191690553480156200002c57600080fd5b506040516200168e3803806200168e833981016040908152815160208084015192840151606085015160038054600160a060020a0319163317905592850180519095949094019390929182918691869186916200008f91600491860190620000d8565b508151620000a5906005906020850190620000d8565b506006805460ff191660ff92909216919091179055505060008111620000ca57600080fd5b600755506200017d92505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011b57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014b5782518255916020019190600101906200012e565b50620001599291506200015d565b5090565b6200017a91905b8082111562000159576000815560010162000164565b90565b611501806200018d6000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461017957806306fdde03146101a2578063095ea7b31461022c5780631536637b1461025057806318160ddd1461027357806323b872dd1461029a578063313ce567146102c4578063355274ea146102ef5780633f4ba83a1461030457806340c10f191461031957806342966c681461033d57806354948bd7146103555780635c975abb1461036a578063661884631461037f5780636d8f9035146103a357806370a08231146103c7578063715018a6146103e85780637d64bcb4146103fd5780638456cb59146104125780638b40c51c146104275780638da5cb5b1461043c57806392ff0d311461046d57806395d89b4114610482578063a9059cbb14610497578063c6786e5a146104bb578063d73dd62314610510578063dd62ed3e14610534578063ec71351c1461055b578063f2fde38b14610585575b600080fd5b34801561018557600080fd5b5061018e6105a6565b604080519115158252519081900360200190f35b3480156101ae57600080fd5b506101b76105c7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f15781810151838201526020016101d9565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023857600080fd5b5061018e600160a060020a0360043516602435610655565b34801561025c57600080fd5b50610271600160a060020a0360043516610679565b005b34801561027f57600080fd5b506102886106bb565b60408051918252519081900360200190f35b3480156102a657600080fd5b5061018e600160a060020a03600435811690602435166044356106c1565b3480156102d057600080fd5b506102d96106ed565b6040805160ff9092168252519081900360200190f35b3480156102fb57600080fd5b506102886106f6565b34801561031057600080fd5b506102716106fc565b34801561032557600080fd5b5061018e600160a060020a0360043516602435610759565b34801561034957600080fd5b50610271600435610788565b34801561036157600080fd5b50610271610795565b34801561037657600080fd5b5061018e6107fb565b34801561038b57600080fd5b5061018e600160a060020a0360043516602435610804565b3480156103af57600080fd5b50610271600160a060020a0360043516602435610821565b3480156103d357600080fd5b50610288600160a060020a0360043516610842565b3480156103f457600080fd5b5061027161085d565b34801561040957600080fd5b5061018e6108cb565b34801561041e57600080fd5b50610271610971565b34801561043357600080fd5b506102716109d0565b34801561044857600080fd5b50610451610a33565b60408051600160a060020a039092168252519081900360200190f35b34801561047957600080fd5b5061018e610a42565b34801561048e57600080fd5b506101b7610a50565b3480156104a357600080fd5b5061018e600160a060020a0360043516602435610aab565b3480156104c757600080fd5b506040805160206004803580820135838102808601850190965280855261027195369593946024949385019291829185019084908082843750949750610ace9650505050505050565b34801561051c57600080fd5b5061018e600160a060020a0360043516602435610c55565b34801561054057600080fd5b50610288600160a060020a0360043581169060243516610c72565b34801561056757600080fd5b5061018e600160a060020a0360043581169060243516604435610c9d565b34801561059157600080fd5b50610271600160a060020a0360043516610d9c565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561064d5780601f106106225761010080835404028352916020019161064d565b820191906000526020600020905b81548152906001019060200180831161063057829003601f168201915b505050505081565b60085460009060ff161561066857600080fd5b6106728383610dbc565b9392505050565b600354600090600160a060020a0316331461069357600080fd5b50600160a060020a0381166000908152602081905260409020546106b78282610e22565b5050565b60015490565b600854600090610100900460ff1615156106da57600080fd5b6106e5848484610f11565b949350505050565b60065460ff1681565b60075481565b600354600160a060020a0316331461071357600080fd5b60085460ff16151561072457600080fd5b6008805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600060075461077383600154610f2f90919063ffffffff16565b111561077e57600080fd5b6106728383610f42565b6107923382610e22565b50565b600354600160a060020a031633146107ac57600080fd5b600854610100900460ff16156107c157600080fd5b6008805461ff0019166101001790556040517f48e8b789c47b0c8e2bcd9e947a7c946e25483719fdda842bc9ca171a3d858d3190600090a1565b60085460ff1681565b60085460009060ff161561081757600080fd5b610672838361104b565b600354600160a060020a0316331461083857600080fd5b6106b78282610e22565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461087457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a031633146108e557600080fd5b60035474010000000000000000000000000000000000000000900460ff161561090d57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a0316331461098857600080fd5b60085460ff161561099857600080fd5b6008805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031633146109e757600080fd5b600854610100900460ff1615156109fd57600080fd5b6008805461ff00191690556040517f253fd460572426398fd12b50b8aa3396bd40da8bc5bbb0c5d00019d347d6e66690600090a1565b600354600160a060020a031681565b600854610100900460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561064d5780601f106106225761010080835404028352916020019161064d565b600854600090610100900460ff161515610ac457600080fd5b610672838361113b565b60035460009081908190600160a060020a03163314610aec57600080fd5b600092505b8351831015610c47578383815181101515610b0857fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600160a060020a038516926370a08231926024808401938290030181600087803b158015610b7257600080fd5b505af1158015610b86573d6000803e3d6000fd5b505050506040513d6020811015610b9c57600080fd5b5051600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b505050506040513d6020811015610c3a57600080fd5b5050600190920191610af1565b600354600160a060020a0316ff5b60085460009060ff1615610c6857600080fd5b6106728383611158565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a03163314610cb757600080fd5b600160a060020a0383161515610ccc57600080fd5b600160a060020a038416600090815260208190526040902054821115610cf157600080fd5b600160a060020a038416600090815260208190526040902054610d1a908363ffffffff6111f116565b600160a060020a038086166000908152602081905260408082209390935590851681522054610d4f908363ffffffff610f2f16565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193928816926000805160206114b683398151915292918290030190a35060019392505050565b600354600160a060020a03163314610db357600080fd5b61079281611203565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038216600090815260208190526040902054811115610e4757600080fd5b600160a060020a038216600090815260208190526040902054610e70908263ffffffff6111f116565b600160a060020a038316600090815260208190526040902055600154610e9c908263ffffffff6111f116565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206114b68339815191529181900360200190a35050565b60085460009060ff1615610f2457600080fd5b6106e5848484611281565b81810182811015610f3c57fe5b92915050565b600354600090600160a060020a03163314610f5c57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610f8457600080fd5b600154610f97908363ffffffff610f2f16565b600155600160a060020a038316600090815260208190526040902054610fc3908363ffffffff610f2f16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206114b68339815191529181900360200190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156110a057336000908152600260209081526040808320600160a060020a03881684529091528120556110d5565b6110b0818463ffffffff6111f116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60085460009060ff161561114e57600080fd5b61067283836113e6565b336000908152600260209081526040808320600160a060020a038616845290915281205461118c908363ffffffff610f2f16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000828211156111fd57fe5b50900390565b600160a060020a038116151561121857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561129857600080fd5b600160a060020a0384166000908152602081905260409020548211156112bd57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156112ed57600080fd5b600160a060020a038416600090815260208190526040902054611316908363ffffffff6111f116565b600160a060020a03808616600090815260208190526040808220939093559085168152205461134b908363ffffffff610f2f16565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461138d908363ffffffff6111f116565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206114b6833981519152929181900390910190a35060019392505050565b6000600160a060020a03831615156113fd57600080fd5b3360009081526020819052604090205482111561141957600080fd5b33600090815260208190526040902054611439908363ffffffff6111f116565b3360009081526020819052604080822092909255600160a060020a0385168152205461146b908363ffffffff610f2f16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206114b68339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820af7a073757b5e0f1ddb368e5d0138658524aa51abc0e2ae83f7b0423d279c3810029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000073ce27351811f40c000000000000000000000000000000000000000000000000000000000000000000000f436c696e6963416c6c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034348540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000073ce27351811f40c000000000000000000000000000000000000000000000000000000000000000000000f436c696e6963416c6c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034348540000000000000000000000000000000000000000000000000000000000"
}