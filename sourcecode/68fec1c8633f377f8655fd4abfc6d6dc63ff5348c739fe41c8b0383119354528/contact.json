{
  "address": "0x606e02B378d78B3aC394289f066b971EB4Fa5BE4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EURON",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\n// File: contracts/TrueCoinReceiver.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\ncontract TrueCoinReceiver {\n    function tokenFallback( address from, uint256 value ) external;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: registry/contracts/Registry.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ninterface RegistryClone {\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\n}\n\ncontract Registry {\n    struct AttributeData {\n        uint256 value;\n        bytes32 notes;\n        address adminAddr;\n        uint256 timestamp;\n    }\n    \n    // never remove any storage variables\n    address public owner;\n    address public pendingOwner;\n    bool initialized;\n\n    // Stores arbitrary attributes for users. An example use case is an ERC20\n    // token that requires its users to go through a KYC/AML check - in this case\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\n    // that account can use the token. This mapping stores that value (1, in the\n    // example) as well as which validator last set the value and at what time,\n    // so that e.g. the check can be renewed at appropriate intervals.\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\n    // The logic governing who is allowed to set what attributes is abstracted as\n    // this accessManager, so that it may be replaced by the owner as needed\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\n    mapping(bytes32 => RegistryClone[]) subscribers;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\n    event SetManager(address indexed oldManager, address indexed newManager);\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\n\n    // Allows a write if either a) the writer is that Registry's owner, or\n    // b) the writer is writing to attribute foo and that writer already has\n    // the canWriteTo-foo attribute set (in that same Registry)\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\n        bytes32 attr =  WRITE_PERMISSION ^ _attribute;\n        bytes32 kesres = bytes32(keccak256(abi.encodePacked(attr)));\n        return (_admin == owner || hasAttribute(_admin, kesres));\n    }\n\n    // Writes are allowed only if the accessManager approves\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\n        require(confirmWrite(_attribute, msg.sender));\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\n\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> 0) {\n            targets[index].syncAttributeValue(_who, _attribute, _value);\n        }\n    }\n\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\n        subscribers[_attribute].push(_syncer);\n        emit StartSubscription(_attribute, _syncer);\n    }\n\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\n        uint256 length = subscribers[_attribute].length;\n        require(_index < length);\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\n        subscribers[_attribute].length = length - 1;\n    }\n\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\n        return subscribers[_attribute].length;\n    }\n\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\n        require(confirmWrite(_attribute, msg.sender));\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> 0) {\n            targets[index].syncAttributeValue(_who, _attribute, _value);\n        }\n    }\n\n    // Returns true if the uint256 value stored for this attribute is non-zero\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\n        return attributes[_who][_attribute].value != 0;\n    }\n\n\n    // Returns the exact value of the attribute, as well as its metadata\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\n        AttributeData memory data = attributes[_who][_attribute];\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\n    }\n\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\n        return attributes[_who][_attribute].value;\n    }\n\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\n        return attributes[_who][_attribute].adminAddr;\n    }\n\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\n        return attributes[_who][_attribute].timestamp;\n    }\n\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] calldata _addresses) external {\n        RegistryClone[] storage targets = subscribers[_attribute];\n        uint256 index = targets.length;\n        while (index --> _startIndex) {\n            RegistryClone target = targets[index];\n            for (uint256 i = _addresses.length; i --> 0; ) {\n                address who = _addresses[i];\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\n            }\n        }\n    }\n\n    function reclaimEther(address payable _to) external onlyOwner {\n        _to.transfer(address(this).balance);\n    }\n\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(_to, balance);\n    }\n\n   /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only Owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/Claimable.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  modifier onlyPendingOwner() {\n    if (msg.sender == pendingOwner)\n      _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  function claimOwnership() onlyPendingOwner public {\n    _transferOwnership(pendingOwner);\n    pendingOwner = address(0x0);\n  }\n\n}\n\n// File: contracts/modularERC20/BalanceSheet.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n// A wrapper around the balanceOf mapping.\ncontract BalanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public balanceOf;\n\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\n    }\n\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\n    }\n\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = _value;\n    }\n}\n\n// File: contracts/modularERC20/AllowanceSheet.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n// A wrapper around the allowanceOf mapping.\ncontract AllowanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint256)) public allowanceOf;\n\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\n    }\n\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = _value;\n    }\n}\n\n// File: contracts/ProxyStorage.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n\n/*\nDefines the storage layout of the token implementaiton contract. Any newly declared\nstate variables in future upgrades should be appened to the bottom. Never remove state variables\nfrom this list\n */\ncontract ProxyStorage {\n    address public owner;\n    address public pendingOwner;\n\n    bool initialized;\n    \n    BalanceSheet balances_Deprecated;\n    AllowanceSheet allowances_Deprecated;\n\n    uint256 totalSupply_;\n    \n    bool private paused_Deprecated = false;\n    address private globalPause_Deprecated;\n\n    uint256 public burnMin = 0;\n    uint256 public burnMax = 0;\n\n    Registry public registry;\n\n    string name_Deprecated;\n    string symbol_Deprecated;\n\n    uint[] gasRefundPool_Deprecated;\n    uint256 private redemptionAddressCount_Deprecated;\n    uint256 public minimumGasPriceForFutureRefunds;\n\n    mapping (address => uint256) _balanceOf;\n    mapping (address => mapping (address => uint256)) _allowance;\n    mapping (bytes32 => mapping (address => uint256)) attributes;\n\n\n    /* Additionally, we have several keccak-based storage locations.\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\n     * which would always be a critical issue.\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\n     *******************************************************************************************************\n     ** length     input                                                         usage\n     *******************************************************************************************************\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\n     ** 64         uint256(address),uint256(14)                                  balanceOf\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\n    **/\n}\n\n// File: contracts/HasOwner.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n/**\n * @title HasOwner\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin. \n and provides basic authorization control functions. Inherits storage layout of \n ProxyStorage.\n */\ncontract HasOwner is ProxyStorage {\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n    * @dev sets the original `owner` of the contract to the sender\n    * at construction. Must then be reinitialized \n    */\n    constructor() public {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only Owner\");\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: contracts/ReclaimerToken.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ncontract ReclaimerToken is HasOwner {\n    /**  \n    *@dev send all eth balance in the contract to another address\n    */\n    function reclaimEther(address payable _to) external onlyOwner {\n        _to.transfer(address(this).balance);\n    }\n\n    /**  \n    *@dev send all token balance of an arbitary erc20 token\n    in the contract to another address\n    */\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(_to, balance);\n    }\n\n    /**  \n    *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns\n    */\n    function reclaimContract(Ownable _ownable) external onlyOwner {\n        _ownable.transferOwnership(owner);\n    }\n\n}\n\n// File: contracts/modularERC20/ModularBasicToken.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n// Fork of OpenZeppelin's BasicToken\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract ModularBasicToken is HasOwner {\n    using SafeMath for uint256;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _who) public view returns (uint256) {\n        return _getBalance(_who);\n    }\n\n    function _getBalance(address _who) internal view returns (uint256) {\n        return _balanceOf[_who];\n    }\n\n    function _addBalance(address _who, uint256 _value) internal returns (uint256 priorBalance) {\n        priorBalance = _balanceOf[_who];\n        _balanceOf[_who] = priorBalance.add(_value);\n    }\n\n    function _subBalance(address _who, uint256 _value) internal returns (uint256 result) {\n        result = _balanceOf[_who].sub(_value);\n        _balanceOf[_who] = result;\n    }\n\n    function _setBalance(address _who, uint256 _value) internal {\n        _balanceOf[_who] = _value;\n    }\n}\n\n// File: contracts/modularERC20/ModularStandardToken.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ModularStandardToken is ModularBasicToken {\n    using SafeMath for uint256;\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        _approveAllArgs(_spender, _value, msg.sender);\n        return true;\n    }\n\n    function _approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\n        _setAllowance(_tokenHolder, _spender, _value);\n        emit Approval(_tokenHolder, _spender, _value);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        _increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\n        return true;\n    }\n\n    function _increaseApprovalAllArgs(address _spender, uint256 _addedValue, address _tokenHolder) internal {\n        _addAllowance(_tokenHolder, _spender, _addedValue);\n        emit Approval(_tokenHolder, _spender, _getAllowance(_tokenHolder, _spender));\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        _decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\n        return true;\n    }\n\n    function _decreaseApprovalAllArgs(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\n        uint256 oldValue = _getAllowance(_tokenHolder, _spender);\n        uint256 newValue;\n        if (_subtractedValue > oldValue) {\n            newValue = 0;\n        } else {\n            newValue = oldValue - _subtractedValue;\n        }\n        _setAllowance(_tokenHolder, _spender, newValue);\n        emit Approval(_tokenHolder,_spender, newValue);\n    }\n\n    function allowance(address _who, address _spender) public view returns (uint256) {\n        return _getAllowance(_who, _spender);\n    }\n\n    function _getAllowance(address _who, address _spender) internal view returns (uint256 value) {\n        return _allowance[_who][_spender];\n    }\n\n    function _addAllowance(address _who, address _spender, uint256 _value) internal {\n        _allowance[_who][_spender] = _allowance[_who][_spender].add(_value);\n    }\n\n    function _subAllowance(address _who, address _spender, uint256 _value) internal returns (uint256 newAllowance){\n        newAllowance = _allowance[_who][_spender].sub(_value);\n        _allowance[_who][_spender] = newAllowance;\n    }\n\n    function _setAllowance(address _who, address _spender, uint256 _value) internal {\n        _allowance[_who][_spender] = _value;\n    }\n}\n\n// File: contracts/modularERC20/ModularBurnableToken.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ModularBurnableToken is ModularStandardToken {\n    event Burn(address indexed burner, uint256 value);\n    event Mint(address indexed to, uint256 value);\n    uint256 constant CENT = 10 ** 6;\n\n    function burn(uint256 _value) external {\n        _burnAllArgs(msg.sender, _value - _value % CENT);\n    }\n\n    function _burnAllArgs(address _from, uint256 _value) internal {\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        _subBalance(_from, _value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_from, _value);\n        emit Transfer(_from, address(0), _value);\n    }\n}\n\n// File: contracts/BurnableTokenWithBounds.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n/**\n * @title Burnable Token WithBounds\n * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,\n * and will send them back the equivalent amount of money (rounded down to the nearest cent).\n */\ncontract BurnableTokenWithBounds is ModularBurnableToken {\n\n    event SetBurnBounds(uint256 newMin, uint256 newMax);\n\n    function _burnAllArgs(address _burner, uint256 _value) internal {\n        require(_value >= burnMin, \"below min burn bound\");\n        require(_value <= burnMax, \"exceeds max burn bound\");\n        super._burnAllArgs(_burner, _value);\n    }\n\n    //Change the minimum and maximum amount that can be burned at once. Burning\n    //may be disabled by setting both to 0 (this will not be done under normal\n    //operation, but we can't add checks to disallow it without losing a lot of\n    //flexibility since burning could also be as good as disabled\n    //by setting the minimum extremely high, and we don't want to lock\n    //in any particular cap for the minimum)\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\n        require(_min <= _max, \"min > max\");\n        burnMin = _min;\n        burnMax = _max;\n        emit SetBurnBounds(_min, _max);\n    }\n}\n\n// File: contracts/CompliantDepositTokenWithHook.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n\n\n\ncontract CompliantDepositTokenWithHook is ReclaimerToken, RegistryClone, BurnableTokenWithBounds {\n\n    bytes32 constant IS_REGISTERED_CONTRACT = \"isRegisteredContract\";\n    bytes32 constant IS_DEPOSIT_ADDRESS = \"isDepositAddress\";\n    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\n    uint256 _transferFee = 0;\n    uint8   _transferFeeMode = 0;\n\n    function canBurn() internal pure returns (bytes32);\n\n    function setTransferFee(uint256 transferFee) public onlyOwner returns(bool){\n        _transferFee = transferFee;\n        return true;\n    }\n\n    function setTransferFeeMode(uint8 transferFeeMode) public onlyOwner returns (bool){\n        _transferFeeMode = transferFeeMode;\n        return true;\n    }\n\n    function transferFee() public view returns (uint256){\n        return _transferFee;\n    }\n\n    function transferFeeMode() public view returns (uint8){\n        return _transferFeeMode;\n    }\n\n    /**\n    * @dev calculates fee required for the transfer\n    * @param amount The address to transfer to.\n    */\n    function getTransactionFee(uint256 amount) public view returns (uint256){\n        return amount.mul(_transferFee).div(8 ** 10);\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        uint256 transfer_fee = getTransactionFee(_value);\n        if(_transferFeeMode == 0 || transfer_fee == 0 ){\n            _transferAllArgs(msg.sender, _to, _value);\n        } else if(_transferFeeMode == 1){\n            _transferAllArgs(msg.sender, owner, transfer_fee);\n            _transferAllArgs(msg.sender, _to, _value);\n        } else if(_transferFeeMode == 2){\n            _transferAllArgs(msg.sender, owner, transfer_fee);\n            _transferAllArgs(msg.sender, _to, _value.sub(transfer_fee));\n        }\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 transfer_fee = getTransactionFee(_value);\n        if(_transferFeeMode == 0 || transfer_fee == 0 ){\n            _transferFromAllArgs(_from, _to, _value, msg.sender);\n        } else if(_transferFeeMode == 1){\n            _transferFromAllArgs(_from, owner, transfer_fee, msg.sender);\n            _transferFromAllArgs(_from, _to, _value, msg.sender);\n        } else if(_transferFeeMode == 2){\n            _transferFromAllArgs(_from, owner, transfer_fee, msg.sender);\n            _transferFromAllArgs(_from, _to, _value.sub(transfer_fee), msg.sender);\n        }\n        return true;\n    }\n\n    function _burnFromAllowanceAllArgs(address _from, address _to, uint256 _value, address _spender) internal {\n        _requireCanTransferFrom(_spender, _from, _to);\n        _requireOnlyCanBurn(_to);\n        require(_value >= burnMin, \"below min burn bound\");\n        require(_value <= burnMax, \"exceeds max burn bound\");\n        _subBalance(_from, _value);\n        _subAllowance(_from, _spender, _value); \n        emit Transfer(_from, _to, _value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_to, _value);\n        emit Transfer(_to, address(0), _value);\n    }\n\n    function _burnFromAllArgs(address _from, address _to, uint256 _value) internal {\n        _requireCanTransfer(_from, _to);\n        _requireOnlyCanBurn(_to);\n        require(_value >= burnMin, \"below min burn bound\");\n        require(_value <= burnMax, \"exceeds max burn bound\");\n        _subBalance(_from, _value);\n        emit Transfer(_from, _to, _value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_to, _value);\n        emit Transfer(_to, address(0), _value);\n    }\n\n    function _transferFromAllArgs(address _from, address _to, uint256 _value, address _spender) internal {\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\n            _value -= _value % CENT;\n            _burnFromAllowanceAllArgs(_from, _to, _value, _spender);\n        } else {\n            bool hasHook;\n            address originalTo = _to;\n            (_to, hasHook) = _requireCanTransferFrom(_spender, _from, _to);\n            _addBalance(_to, _value);\n            _subAllowance(_from, _spender, _value);\n            _subBalance(_from, _value);\n            emit Transfer(_from, originalTo, _value);\n            if (originalTo != _to) {\n                emit Transfer(originalTo, _to, _value);\n                if (hasHook) {\n                    TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\n                }\n            } else {\n                if (hasHook) {\n                    TrueCoinReceiver(_to).tokenFallback(_from, _value);\n                }\n            }\n        }\n    }\n\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal {\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\n            _value -= _value % CENT;\n            _burnFromAllArgs(_from, _to, _value);\n        } else {\n            bool hasHook;\n            address finalTo;\n            (finalTo, hasHook) = _requireCanTransfer(_from, _to);\n            _subBalance(_from, _value);\n            _addBalance(finalTo, _value);\n            emit Transfer(_from, _to, _value);\n            if (finalTo != _to) {\n                emit Transfer(_to, finalTo, _value);\n                if (hasHook) {\n                    TrueCoinReceiver(finalTo).tokenFallback(_to, _value);\n                }\n            } else {\n                if (hasHook) {\n                    TrueCoinReceiver(finalTo).tokenFallback(_from, _value);\n                }\n            }\n        }\n    }\n\n    function mint(address _to, uint256 _value) public onlyOwner {\n        require(_to != address(0), \"to address cannot be zero\");\n        bool hasHook;\n        address originalTo = _to;\n        (_to, hasHook) = _requireCanMint(_to);\n        totalSupply_ = totalSupply_.add(_value);\n        emit Mint(originalTo, _value);\n        emit Transfer(address(0), originalTo, _value);\n        if (_to != originalTo) {\n            emit Transfer(originalTo, _to, _value);\n        }\n        _addBalance(_to, _value);\n        if (hasHook) {\n            if (_to != originalTo) {\n                TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\n            } else {\n                TrueCoinReceiver(_to).tokenFallback(address(0), _value);\n            }\n        }\n    }\n\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\n    event SetRegistry(address indexed registry);\n\n    /**\n    * @dev Point to the registry that contains all compliance related data\n    @param _registry The address of the registry instance\n    */\n    function setRegistry(Registry _registry) public onlyOwner {\n        registry = _registry;\n        emit SetRegistry(address(registry));\n    }\n\n    modifier onlyRegistry {\n      require(msg.sender == address(registry));\n      _;\n    }\n\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\n        attributes[_attribute][_who] = _value;\n    }\n\n    function _burnAllArgs(address _from, uint256 _value) internal {\n        _requireCanBurn(_from);\n        super._burnAllArgs(_from, _value);\n    }\n\n    // Destroy the tokens owned by a blacklisted account\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\n        require(_isBlacklisted(_account), \"_account is not blacklisted\");\n        uint256 oldValue = _getBalance(_account);\n        _setBalance(_account, 0);\n        totalSupply_ = totalSupply_.sub(oldValue);\n        emit WipeBlacklistedAccount(_account, oldValue);\n        emit Transfer(_account, address(0), oldValue);\n    }\n\n    function _isBlacklisted(address _account) internal view returns (bool blacklisted) {\n        return attributes[IS_BLACKLISTED][_account] != 0;\n    }\n\n    function _requireCanTransfer(address _from, address _to) internal view returns (address, bool) {\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\n        if (depositAddressValue != 0) {\n            _to = address(depositAddressValue);\n        }\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\n    }\n\n    function _requireCanTransferFrom(address _spender, address _from, address _to) internal view returns (address, bool) {\n        require (attributes[IS_BLACKLISTED][_spender] == 0, \"blacklisted\");\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\n        if (depositAddressValue != 0) {\n            _to = address(depositAddressValue);\n        }\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\n    }\n\n    function _requireCanMint(address _to) internal view returns (address, bool) {\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\n        if (depositAddressValue != 0) {\n            _to = address(depositAddressValue);\n        }\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\n    }\n\n    function _requireOnlyCanBurn(address _from) internal view {\n        require (attributes[canBurn()][_from] != 0, \"cannot burn from this address\");\n    }\n\n    function _requireCanBurn(address _from) internal view {\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\n        require (attributes[canBurn()][_from] != 0, \"cannot burn from this address\");\n    }\n\n    function paused() public pure returns (bool) {\n        return false;\n    }\n}\n\n// File: contracts/EURON.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n//import \"./DelegateERC20.sol\";\n\n/** @title EURON\n* @dev This is the top-level ERC20 contract, but most of the interesting functionality is\n* inherited - see the documentation on the corresponding contracts.\n*/\ncontract EURON is \nCompliantDepositTokenWithHook\n//DelegateERC20\n {\n    uint8 constant DECIMALS = 8;\n    uint8 constant ROUNDING = 2;\n\n    function decimals() public pure returns (uint8) {\n        return DECIMALS;\n    }\n\n    function rounding() public pure returns (uint8) {\n        return ROUNDING;\n    }\n\n    function name() public pure returns (string memory) {\n        return \"EURON\";\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"ERN\";\n    }\n\n    function canBurn() internal pure returns (bytes32) {\n        return \"canBurn\";\n    }\n\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownable\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForFutureRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferFeeMode\",\"type\":\"uint8\"}],\"name\":\"setTransferFeeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"wipeBlacklistedAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTransactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WipeBlacklistedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetBurnBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}