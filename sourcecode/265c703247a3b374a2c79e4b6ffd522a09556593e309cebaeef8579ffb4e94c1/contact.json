{
  "address": "0x8c53931237b6360345b01f1cfa27f7b10f89be78",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CycloshieldCoin",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-23\n*/\n\n//CycloShield Coin - www.cycloshieldcoin.com\n//Created by Kenneth Tan of Fundyourselfnow.com\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  \n\n  event Transfer(address indexed _from, address indexed _to, uint _value);\n\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  \n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    //code changed to comply with ERC20 standard\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    //balances[_from] = balances[_from].sub(_value); // this was removed\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract CycloshieldCoin is StandardToken, Ownable {\n    string  public  constant name = \"Cycloshield Coin\";\n    string  public  constant symbol = \"CYS\";\n    uint    public  constant decimals = 18;\n    uint    public  constant INITIAL_SUPPLY = 1000000000000000000000000000;\n    address public  crowdsaleContract;\n    bool    public  transferEnabled;\n    \n\n     modifier onlyWhenTransferEnabled() {\n     if(msg.sender != crowdsaleContract) {\n     require(transferEnabled);\n     }\n    _;\n     \n    }\n    \n    function CycloshieldCoin() {\n    \n        balances[msg.sender] = INITIAL_SUPPLY; \n        transferEnabled = true;\n        totalSupply = INITIAL_SUPPLY;\n        crowdsaleContract = msg.sender; //initial by setting crowdsalecontract location to owner\n        Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\n        }\n    \n    function setupCrowdsale(address _contract, bool _transferAllowed) onlyOwner {\n        crowdsaleContract = _contract;\n        transferEnabled = _transferAllowed;\n    }\n    function transfer(address _to, uint _value)\n        onlyWhenTransferEnabled()\n        returns (bool) {\n        return super.transfer(_to, _value);\n        }\n    \n    function transferFrom(address _from, address _to, uint _value) \n        onlyWhenTransferEnabled()\n        returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n        }\n   \n    \n    event Burn(address indexed _burner, uint _value);\n\n    function burn(uint _value) \n        onlyWhenTransferEnabled()\n        returns (bool){\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(msg.sender, _value);\n        Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n\n    // save some gas by making only one contract call\n    function burnFrom(address _from, uint256 _value) \n        onlyWhenTransferEnabled()\n        returns (bool) {\n        assert( transferFrom( _from, msg.sender, _value ) );\n        return burn(_value);\n    }\n\n    function emergencyERC20Drain(ERC20 token, uint amount ) onlyOwner {\n        token.transfer( owner, amount );\n    }\n    \n    function ChangeTransferStatus() onlyOwner {\n            if(transferEnabled == false){\n            transferEnabled = true;\n        } else{\n            transferEnabled = false;\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b600160a060020a0333166000818152600160205260408082206b033b2e3c9fd0803ce80000009081905560048054828555600160a060020a031960a060020a60ff0219909116740100000000000000000000000000000000000000001716851790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a35b5b610cc8806100d16000396000f300606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610109578063095ea7b31461019457806318160ddd146101ca57806323b872dd146101ef5780632ff2e9dc1461022b578063313ce56714610250578063316163951461027557806342966c68146102a45780634cd412d5146102ce578063634fcb8e146102f557806370a082311461031b57806379cc67901461034c5780638da5cb5b1461038257806395d89b41146103b1578063a9059cbb1461043c578063c6e0dc6e14610472578063db0e16f114610487578063dd62ed3e146104ab578063f2fde38b146104e2575b600080fd5b341561011457600080fd5b61011c610503565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101595780820151818401525b602001610140565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019f57600080fd5b6101b6600160a060020a036004351660243561053a565b604051901515815260200160405180910390f35b34156101d557600080fd5b6101dd6105e1565b60405190815260200160405180910390f35b34156101fa57600080fd5b6101b6600160a060020a03600435811690602435166044356105e7565b604051901515815260200160405180910390f35b341561023657600080fd5b6101dd61062f565b60405190815260200160405180910390f35b341561025b57600080fd5b6101dd61063f565b60405190815260200160405180910390f35b341561028057600080fd5b610288610644565b604051600160a060020a03909116815260200160405180910390f35b34156102af57600080fd5b6101b6600435610653565b604051901515815260200160405180910390f35b34156102d957600080fd5b6101b6610764565b604051901515815260200160405180910390f35b341561030057600080fd5b610319600160a060020a03600435166024351515610774565b005b341561032657600080fd5b6101dd600160a060020a03600435166107df565b60405190815260200160405180910390f35b341561035757600080fd5b6101b6600160a060020a03600435166024356107fe565b604051901515815260200160405180910390f35b341561038d57600080fd5b610288610856565b604051600160a060020a03909116815260200160405180910390f35b34156103bc57600080fd5b61011c610865565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101595780820151818401525b602001610140565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044757600080fd5b6101b6600160a060020a036004351660243561089c565b604051901515815260200160405180910390f35b341561047d57600080fd5b6103196108e2565b005b341561049257600080fd5b610319600160a060020a036004351660243561095c565b005b34156104b657600080fd5b6101dd600160a060020a0360043581169060243516610a14565b60405190815260200160405180910390f35b34156104ed57600080fd5b610319600160a060020a0360043516610a41565b005b60408051908101604052601081527f4379636c6f736869656c6420436f696e00000000000000000000000000000000602082015281565b600081158061056c5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561057757600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60045460009033600160a060020a039081169116146106185760045460a060020a900460ff16151561061857600080fd5b5b610624848484610a99565b90505b5b9392505050565b6b033b2e3c9fd0803ce800000081565b601281565b600454600160a060020a031681565b60045460009033600160a060020a039081169116146106845760045460a060020a900460ff16151561068457600080fd5b5b600160a060020a0333166000908152600160205260409020546106ae908363ffffffff610bab16565b600160a060020a033316600090815260016020526040812091909155546106db908363ffffffff610bab16565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b919050565b60045460a060020a900460ff1681565b60035433600160a060020a0390811691161461078f57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161774ff0000000000000000000000000000000000000000191660a060020a831515021790555b5b5050565b600160a060020a0381166000908152600160205260409020545b919050565b60045460009033600160a060020a0390811691161461082f5760045460a060020a900460ff16151561082f57600080fd5b5b61083b8333846105e7565b151561084357fe5b61084c82610653565b90505b5b92915050565b600354600160a060020a031681565b60408051908101604052600381527f4359530000000000000000000000000000000000000000000000000000000000602082015281565b60045460009033600160a060020a039081169116146108cd5760045460a060020a900460ff1615156108cd57600080fd5b5b61084c8383610bc2565b90505b5b92915050565b60035433600160a060020a039081169116146108fd57600080fd5b60045460a060020a900460ff161515610939576004805474ff0000000000000000000000000000000000000000191660a060020a179055610958565b6004805474ff0000000000000000000000000000000000000000191690555b5b5b565b60035433600160a060020a0390811691161461097757600080fd5b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109f357600080fd5b6102c65a03f11515610a0457600080fd5b505050604051805150505b5b5050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610a5c57600080fd5b600160a060020a03811615610a94576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291822054610add908463ffffffff610bab16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610b12908463ffffffff610c8216565b600160a060020a038516600090815260016020526040902055610b3b818463ffffffff610bab16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082821115610bb757fe5b508082035b92915050565b600160a060020a033316600090815260016020526040812054610beb908363ffffffff610bab16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c20908363ffffffff610c8216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082820183811015610c9157fe5b8091505b50929150505600a165627a7a7230582007be90da0ee16e2f32e88bd430dd9ca9720f1eda9fe5bf9ec83ed07fd66d5e7d0029"
}