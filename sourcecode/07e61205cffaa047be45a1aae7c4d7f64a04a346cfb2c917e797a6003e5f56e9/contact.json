{
  "address": "0x79182bf192912d83f895a3d04997c27ef7fed4fd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BicycleToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract BicycleToken {\n    // Public variables of the token\n    string public name = \"Bicycle Token\";\n    string public symbol = \"BIC\";\n    uint8 public decimals = 0;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public BicycleSupply = 15000000;\n    uint256 public price ;\n    address public creator;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function BicycleToken() public {\n        totalSupply = BicycleSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    // Give BicycleToken Mint the total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n      \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        \n        if (price == 0 ether){\n        uint ammount = 500;                  // calculates the amount, made it so you can get many BicycleMinth but to get MANY BicycleToken you have to spend ETH and not WEI\n        uint ammountRaised;                                     \n        ammountRaised += msg.value;                            //many thanks Bicycle, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= 6000000);\n        // checks if it has enough to sell\n        require(msg.value < 0.5 ether); // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        require(balanceOf[msg.sender] == 0);     // one users doesn't collect more than once\n        balanceOf[msg.sender] += ammount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= ammount;                        // sends ETH to BicycleMinth\n        Transfer(creator, msg.sender, ammount);               // execute an event reflecting the change\n        creator.transfer(ammountRaised);\n        }\n             }\n\n        \n\n }",
  "bytecode": "60606040526040805190810160405280600d81526020017f42696379636c6520546f6b656e000000000000000000000000000000000000008152506000908051906020019061004f929190610176565b506040805190810160405280600381526020017f42494300000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b929190610176565b506000600260006101000a81548160ff021916908360ff16021790555062e4e1c060045534156100ca57600080fd5b600260009054906101000a900460ff1660ff16600a0a60045402600381905550600354600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061021b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b757805160ff19168380011785556101e5565b828001600101855582156101e5579182015b828111156101e45782518255916020019190600101906101c9565b5b5090506101f291906101f6565b5090565b61021891905b808211156102145760008160009055506001016101fc565b5090565b90565b610a598061022a6000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461033d57806306fdde031461039257806318160ddd14610420578063313ce5671461044957806370a08231146104785780638a0a53d5146104c557806395d89b41146104ee578063a035b1fe1461057c578063a9059cbb146105a5578063dd62ed3e146105e7575b60008060006005541415610339576101f491503481019050625b8d8060076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561012f57600080fd5b6706f05b59d3b200003410151561014557600080fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561019357600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561033857600080fd5b5b5050005b341561034857600080fd5b610350610653565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039d57600080fd5b6103a5610679565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e55780820151818401526020810190506103ca565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042b57600080fd5b610433610717565b6040518082815260200191505060405180910390f35b341561045457600080fd5b61045c61071d565b604051808260ff1660ff16815260200191505060405180910390f35b341561048357600080fd5b6104af600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610730565b6040518082815260200191505060405180910390f35b34156104d057600080fd5b6104d8610748565b6040518082815260200191505060405180910390f35b34156104f957600080fd5b61050161074e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610541578082015181840152602081019050610526565b50505050905090810190601f16801561056e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561058757600080fd5b61058f6107ec565b6040518082815260200191505060405180910390f35b34156105b057600080fd5b6105e5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107f2565b005b34156105f257600080fd5b61063d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610801565b6040518082815260200191505060405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070f5780601f106106e45761010080835404028352916020019161070f565b820191906000526020600020905b8154815290600101906020018083116106f257829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60076020528060005260406000206000915090505481565b60045481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107e45780601f106107b9576101008083540402835291602001916107e4565b820191906000526020600020905b8154815290600101906020018083116107c757829003601f168201915b505050505081565b60055481565b6107fd338383610826565b5050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561084c57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561089a57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561092957600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a7230582048dd25e97ad9db1b7e162197e788a3ce47d5ef7ea686d42c1fd47c0ca6427c420029"
}