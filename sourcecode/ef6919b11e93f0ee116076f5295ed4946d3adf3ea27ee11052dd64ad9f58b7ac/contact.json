{
  "address": "0x5ab2d437ec6d8e52b2191efafd985826a73d97de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AKJToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address addr, string roleName);\n  event RoleRemoved(address addr, string roleName);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param addr address\n   * @param roleName the name of the role\n   * // reverts\n   */\n  function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param addr address\n   * @param roleName the name of the role\n   * @return bool\n   */\n  function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param roleName the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n}\n\ncontract MultiOwnable {\n    using SafeMath for uint256;\n\n    mapping(address => bool) public isOwner;\n    address[] public ownerHistory;\n    uint256 public ownerCount;\n\n\n    event OwnerAddedEvent(address indexed _newOwner);\n    event OwnerRemovedEvent(address indexed _oldOwner);\n\n    constructor() public\n    {\n        address owner = msg.sender;\n        setOwner(owner);\n    }\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender]);\n        _;\n    }\n\n    function ownerHistoryCount() public view returns (uint) {\n        return ownerHistory.length;\n    }\n\n    function addOwner(address owner) onlyOwner public {\n        require(owner != address(0));\n        require(!isOwner[owner]);\n        setOwner(owner);\n        emit OwnerAddedEvent(owner);\n    }\n\n    function removeOwner(address owner) onlyOwner public {\n        require(ownerCount > 1);\n        require(isOwner[owner]);\n        isOwner[owner] = false;\n        ownerCount = ownerCount.sub(1);\n        emit OwnerRemovedEvent(owner);\n    }\n\n    function setOwner(address owner) internal {\n        ownerHistory.push(owner);\n        isOwner[owner] = true;\n        ownerCount = ownerCount.add(1);\n    }\n}\n\ncontract AccessControl is RBAC, MultiOwnable {\n    event AddedToWhitelist(address addr);\n    event RemovedFromWhitelist(address addr);\n    event AdminAddressAdded(address addr);\n    event AdminAddressRemoved(address addr);\n\n    string public constant ROLE_WHITELISTED = \"whitelist\";\n    string public constant ROLE_ADMIN = \"admin\";\n\n\n    constructor() public\n    {\n        addToAdminlist(msg.sender);\n        addToWhitelist(msg.sender);\n    }\n\n    /**\n     * @dev Throws if called by any account that's not whitelisted.\n     */\n    modifier onlyAdmin()\n    {\n        checkRole(msg.sender, ROLE_ADMIN);\n        _;\n    }\n\n    modifier onlyFromWhitelisted() {\n        checkRole(msg.sender, ROLE_WHITELISTED);\n        _;\n    }\n\n    modifier onlyWhitelisted(address first)\n    {\n        checkRole(msg.sender, ROLE_WHITELISTED);\n        checkRole(first, ROLE_WHITELISTED);\n        _;\n    }\n\n    modifier onlyWhitelistedParties(address first, address second)\n    {\n        checkRole(msg.sender, ROLE_WHITELISTED);\n        checkRole(first, ROLE_WHITELISTED);\n        checkRole(second, ROLE_WHITELISTED);\n        _;\n    }\n\n    /**\n    *\n    * WHITELIST FUNCTIONS\n    *\n    */\n\n    /**\n     * @dev add an address to the whitelist\n     * @param addr address\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n     */\n    function addToWhitelist(address addr)\n    onlyAdmin\n    public\n    {\n        addRole(addr, ROLE_WHITELISTED);\n        emit AddedToWhitelist(addr);\n    }\n\n    /**\n     * @dev add addresses to the whitelist\n     * @param addrs addresses\n     * @return true if at least one address was added to the whitelist,\n     * false if all addresses were already in the whitelist\n     */\n    function addManyToWhitelist(address[] addrs)\n    onlyAdmin\n    public\n    {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            addToWhitelist(addrs[i]);\n        }\n    }\n\n    /**\n     * @dev remove an address from the whitelist\n     * @param addr address\n     * @return true if the address was removed from the whitelist,\n     * false if the address wasn't in the whitelist in the first place\n     */\n    function removeFromWhitelist(address addr)\n    onlyAdmin\n    public\n    {\n        removeRole(addr, ROLE_WHITELISTED);\n        emit RemovedFromWhitelist(addr);\n    }\n\n    /**\n     * @dev remove addresses from the whitelist\n     * @param addrs addresses\n     * @return true if at least one address was removed from the whitelist,\n     * false if all addresses weren't in the whitelist in the first place\n     */\n    function removeManyFromWhitelist(address[] addrs)\n    onlyAdmin\n    public\n    {\n        for (uint256 i = 0; i < addrs.length; i++) {\n            removeFromWhitelist(addrs[i]);\n        }\n    }\n\n    /**\n     * @dev getter to determine if address is in whitelist\n     */\n    function whitelist(address addr)\n    public\n    view\n    returns (bool)\n    {\n        return hasRole(addr, ROLE_WHITELISTED);\n    }\n\n    /**\n    *\n    * ADMIN LIST FUNCTIONS\n    *\n    */\n\n    /**\n     * @dev add an address to the adminlist\n     * @param addr address\n     * @return true if the address was added to the adminlist, false if the address was already in the adminlist\n     */\n    function addToAdminlist(address addr)\n    onlyOwner\n    public\n    {\n        addRole(addr, ROLE_ADMIN);\n        emit AdminAddressAdded(addr);\n    }\n\n    function removeFromAdminlist(address addr)\n    onlyOwner\n    public\n    {\n        removeRole(addr, ROLE_ADMIN);\n        emit AdminAddressRemoved(addr);\n    }\n\n    /**\n     * @dev getter to determine if address is in adminlist\n     */\n    function admin(address addr)\n    public\n    view\n    returns (bool)\n    {\n        return hasRole(addr, ROLE_ADMIN);\n    }\n\n}\n\n\ncontract AKJToken is BurnableToken, StandardToken, AccessControl\n{\n  string public constant name = \"AKJ\"; // solium-disable-line uppercase\n  string public constant symbol = \"AKJ\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); // Creates 1.000.000.000 with a given amount of \"decimals\"\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n  function transfer(address _to, uint256 _value) public onlyWhitelisted(_to) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public onlyWhitelistedParties(_from, _to) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public onlyWhitelisted(_spender) returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromAdminlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHistoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeManyFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToAdminlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336200002781640100000000620000af810204565b506200003c3364010000000062000133810204565b6200005033640100000000620001e1810204565b6b033b2e3c9fd0803ce8000000600181905533600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3620004ef565b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054600160a060020a031916600160a060020a0384169081179091556000908152600460205260409020805460ff1916821790556006546200012d91640100000000620002c081026200164d1704565b60065550565b3360009081526004602052604090205460ff1615156200015257600080fd5b620001a2816040805190810160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250620002d4640100000000026401000000009004565b60408051600160a060020a038316815290517f089aa9975328102f8cdff40d2e2b75ad3b940f83f42c2e13c43ed875ff8f046a9181900360200190a150565b62000231336040805190810160405280600581526020017f61646d696e0000000000000000000000000000000000000000000000000000008152506200040a640100000000026401000000009004565b62000281816040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250620002d4640100000000026401000000009004565b60408051600160a060020a038316815290517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039181900360200190a150565b81810182811015620002ce57fe5b92915050565b62000350826003836040518082805190602001908083835b602083106200030d5780518252601f199092019160209182019101620002ec565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506401000000006200048a81026200175d1704565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620003ca578181015183820152602001620003b0565b50505050905090810190601f168015620003f85780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b62000486826003836040518082805190602001908083835b60208310620004435780518252601f19909201916020918201910162000422565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050640100000000620004af81026200110c1704565b5050565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b620004c48282640100000000620004d0810204565b15156200048657600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b6117ce80620004ff6000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461018f578063095ea7b3146102195780630988ca8c146102515780630db02622146102ba578063173825d9146102e157806318160ddd1461030257806318b919e914610317578063217fe6c61461032c57806322f44e1a1461039357806323b872dd146103b45780632f54bf6e146103de5780632ff2e9dc146103ff578063313ce56714610414578063370348531461043f57806342966c6814610454578063461fc0901461046c57806363a846f8146104a057806366188463146104c15780637065cb48146104e557806370a08231146105065780638ab1d681146105275780638c10671c1461054857806395d89b411461018f5780639b19251a1461059d578063a9059cbb146105be578063d391014b146105e2578063d73dd623146105f7578063dd62ed3e1461061b578063e43252d714610642578063f674d79914610663578063f74be98a146106b8575b600080fd5b34801561019b57600080fd5b506101a46106d9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061023d600160a060020a0360043516602435610710565b604080519115158252519081900360200190f35b34801561025d57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102b8958335600160a060020a031695369560449491939091019190819084018382808284375094975061077f9650505050505050565b005b3480156102c657600080fd5b506102cf6107ed565b60408051918252519081900360200190f35b3480156102ed57600080fd5b506102b8600160a060020a03600435166107f3565b34801561030e57600080fd5b506102cf6108b5565b34801561032357600080fd5b506101a46108bb565b34801561033857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261023d958335600160a060020a03169536956044949193909101919081908401838280828437509497506108e09650505050505050565b34801561039f57600080fd5b506102b8600160a060020a0360043516610953565b3480156103c057600080fd5b5061023d600160a060020a03600435811690602435166044356109da565b3480156103ea57600080fd5b5061023d600160a060020a0360043516610a7a565b34801561040b57600080fd5b506102cf610a8f565b34801561042057600080fd5b50610429610a9f565b6040805160ff9092168252519081900360200190f35b34801561044b57600080fd5b506102cf610aa4565b34801561046057600080fd5b506102b8600435610aaa565b34801561047857600080fd5b50610484600435610ab7565b60408051600160a060020a039092168252519081900360200190f35b3480156104ac57600080fd5b5061023d600160a060020a0360043516610adf565b3480156104cd57600080fd5b5061023d600160a060020a0360043516602435610b11565b3480156104f157600080fd5b506102b8600160a060020a0360043516610c01565b34801561051257600080fd5b506102cf600160a060020a0360043516610c9a565b34801561053357600080fd5b506102b8600160a060020a0360043516610cb5565b34801561055457600080fd5b50604080516020600480358082013583810280860185019096528085526102b895369593946024949385019291829185019084908082843750949750610d4b9650505050505050565b3480156105a957600080fd5b5061023d600160a060020a0360043516610dac565b3480156105ca57600080fd5b5061023d600160a060020a0360043516602435610ddb565b3480156105ee57600080fd5b506101a4610e42565b34801561060357600080fd5b5061023d600160a060020a0360043516602435610e64565b34801561062757600080fd5b506102cf600160a060020a0360043581169060243516610efd565b34801561064e57600080fd5b506102b8600160a060020a0360043516610f28565b34801561066f57600080fd5b50604080516020600480358082013583810280860185019096528085526102b895369593946024949385019291829185019084908082843750949750610fbe9650505050505050565b3480156106c457600080fd5b506102b8600160a060020a036004351661101f565b60408051808201909152600381527f414b4a0000000000000000000000000000000000000000000000000000000000602082015281565b6000826107403360408051908101604052806009815260200160008051602061178383398151915281525061077f565b61076d8160408051908101604052806009815260200160008051602061178383398151915281525061077f565b61077784846110a6565b949350505050565b6107e9826003836040518082805190602001908083835b602083106107b55780518252601f199092019160209182019101610796565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061110c565b5050565b60065481565b3360009081526004602052604090205460ff16151561081157600080fd5b60065460011061082057600080fd5b600160a060020a03811660009081526004602052604090205460ff16151561084757600080fd5b600160a060020a0381166000908152600460205260409020805460ff1916905560065461087b90600163ffffffff61112116565b600655604051600160a060020a038216907f6740775dd30bf47d42458b7044f4a4b0a275934f8a4f9269c8af6ab00b3a1e4590600090a250565b60015490565b6040805180820190915260098152600080516020611783833981519152602082015281565b600061094c836003846040518082805190602001908083835b602083106109185780518252601f1990920191602091820191016108f9565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611133565b9392505050565b3360009081526004602052604090205460ff16151561097157600080fd5b61099b8160408051908101604052806005815260200160d960020a6430b236b4b702815250611152565b60408051600160a060020a038316815290517fc41dab03d4639245f86ebd733046feb495209977c224698a4d1318fec207af5a9181900360200190a150565b60008383610a0b3360408051908101604052806009815260200160008051602061178383398151915281525061077f565b610a388260408051908101604052806009815260200160008051602061178383398151915281525061077f565b610a658160408051908101604052806009815260200160008051602061178383398151915281525061077f565b610a70868686611273565b9695505050505050565b60046020526000908152604090205460ff1681565b6b033b2e3c9fd0803ce800000081565b601281565b60055490565b610ab433826113ea565b50565b6005805482908110610ac557fe5b600091825260209091200154600160a060020a0316905081565b6000610b0b8260408051908101604052806005815260200160d960020a6430b236b4b7028152506108e0565b92915050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610b6657336000908152600260209081526040808320600160a060020a0388168452909152812055610b9b565b610b76818463ffffffff61112116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b3360009081526004602052604090205460ff161515610c1f57600080fd5b600160a060020a0381161515610c3457600080fd5b600160a060020a03811660009081526004602052604090205460ff1615610c5a57600080fd5b610c63816114eb565b604051600160a060020a038216907f0775e4f247a7723929d271ccf476b51fb4284053cb3fd6cf3400228a9c02dbb890600090a250565b600160a060020a031660009081526020819052604090205490565b610cdf3360408051908101604052806005815260200160d960020a6430b236b4b70281525061077f565b610d0c81604080519081016040528060098152602001600080516020611783833981519152815250611152565b60408051600160a060020a038316815290517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579181900360200190a150565b6000610d773360408051908101604052806005815260200160d960020a6430b236b4b70281525061077f565b5060005b81518110156107e957610da48282815181101515610d9557fe5b90602001906020020151610f28565b600101610d7b565b6000610b0b826040805190810160405280600981526020016000805160206117838339815191528152506108e0565b600082610e0b3360408051908101604052806009815260200160008051602061178383398151915281525061077f565b610e388160408051908101604052806009815260200160008051602061178383398151915281525061077f565b610777848461156c565b604080518082019091526005815260d960020a6430b236b4b702602082015281565b336000908152600260209081526040808320600160a060020a0386168452909152812054610e98908363ffffffff61164d16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b610f523360408051908101604052806005815260200160d960020a6430b236b4b70281525061077f565b610f7f8160408051908101604052806009815260200160008051602061178383398151915281525061165a565b60408051600160a060020a038316815290517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039181900360200190a150565b6000610fea3360408051908101604052806005815260200160d960020a6430b236b4b70281525061077f565b5060005b81518110156107e957611017828281518110151561100857fe5b90602001906020020151610cb5565b600101610fee565b3360009081526004602052604090205460ff16151561103d57600080fd5b6110678160408051908101604052806005815260200160d960020a6430b236b4b70281525061165a565b60408051600160a060020a038316815290517f089aa9975328102f8cdff40d2e2b75ad3b940f83f42c2e13c43ed875ff8f046a9181900360200190a150565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6111168282611133565b15156107e957600080fd5b60008282111561112d57fe5b50900390565b600160a060020a03166000908152602091909152604090205460ff1690565b6111bc826003836040518082805190602001908083835b602083106111885780518252601f199092019160209182019101611169565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061173b565b7fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a82826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561123457818101518382015260200161121c565b50505050905090810190601f1680156112615780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6000600160a060020a038316151561128a57600080fd5b600160a060020a0384166000908152602081905260409020548211156112af57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156112df57600080fd5b600160a060020a038416600090815260208190526040902054611308908363ffffffff61112116565b600160a060020a03808616600090815260208190526040808220939093559085168152205461133d908363ffffffff61164d16565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461137f908363ffffffff61112116565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a03821660009081526020819052604090205481111561140f57600080fd5b600160a060020a038216600090815260208190526040902054611438908263ffffffff61112116565b600160a060020a038316600090815260208190526040902055600154611464908263ffffffff61112116565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091556000908152600460205260409020805460ff1916821790556006546115669161164d565b60065550565b6000600160a060020a038316151561158357600080fd5b3360009081526020819052604090205482111561159f57600080fd5b336000908152602081905260409020546115bf908363ffffffff61112116565b3360009081526020819052604080822092909255600160a060020a038516815220546115f1908363ffffffff61164d16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b81810182811015610b0b57fe5b6116c4826003836040518082805190602001908083835b602083106116905780518252601f199092019160209182019101611671565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061175d565b7fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360008381101561123457818101518382015260200161121c565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a72305820f8f0a7f294967411ba55a8fd7df660266a5bbc4e2e8df9ec6a0829593c1334350029"
}