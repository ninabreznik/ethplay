{
  "address": "0x82ea2e7834bb0d6224dd6fd7125d44b83d6d6809",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BalanceScanner",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\npragma solidity 0.5.1;\n\n/**\n * @title Partial ERC-20 token interface\n */\ncontract Token {\n  function balanceOf (address) public view returns (uint);\n}\n\n/**\n * @title An Ether or token balance scanner\n * @author Maarten Zuidhoorn\n */\ncontract BalanceScanner {\n  /**\n   * @notice Get the Ether balance for all addresses specified\n   * @param addresses The addresses to get the Ether balance for\n   * @return The Ether balance for all addresses in the same order as specified\n   */\n  function etherBalances(address[] calldata addresses) external view returns (uint[] memory balances) {\n    balances = new uint[](addresses.length);\n\n    for (uint i = 0; i < addresses.length; i++) {\n      balances[i] = addresses[i].balance;\n    }\n  }\n\n  /**\n   * @notice Get the ERC-20 token balance of `token` for all addresses specified\n   * @dev This does not check if the `token` address specified is actually an ERC-20 token\n   * @param addresses The addresses to get the token balance for\n   * @param token The address of the ERC-20 token contract\n   * @return The token balance for all addresses in the same order as specified\n   */\n  function tokenBalances(address[] calldata addresses, address token) external view returns (uint[] memory balances) {\n    balances = new uint[](addresses.length);\n    Token tokenContract = Token(token);\n\n    for (uint i = 0; i < addresses.length; i++) {\n      balances[i] = tokenContract.balanceOf(addresses[i]);\n    }\n  }\n\n  /**\n   * @notice This contract does not accept ETH payments.\n   */\n  function() external payable {\n    revert();\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610484806100206000396000f3fe608060405260043610610046576000357c010000000000000000000000000000000000000000000000000000000090048063aad330911461004b578063dbdbb51b14610146575b600080fd5b34801561005757600080fd5b506100ef6004803603604081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460208302840111640100000000831117156100bf57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610221565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610132578082015181840152602081019050610117565b505050509050019250505060405180910390f35b34801561015257600080fd5b506101ca6004803603602081101561016957600080fd5b810190808035906020019064010000000081111561018657600080fd5b82018360208201111561019857600080fd5b803590602001918460208302840111640100000000831117156101ba57600080fd5b909192939192939050505061039e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561020d5780820151818401526020810190506101f2565b505050509050019250505060405180910390f35b6060838390506040519080825280602002602001820160405280156102555781602001602082028038833980820191505090505b509050600082905060008090505b85859050811015610395578173ffffffffffffffffffffffffffffffffffffffff166370a08231878784818110151561029857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561033157600080fd5b505afa158015610345573d6000803e3d6000fd5b505050506040513d602081101561035b57600080fd5b8101908080519060200190929190505050838281518110151561037a57fe5b90602001906020020181815250508080600101915050610263565b50509392505050565b6060828290506040519080825280602002602001820160405280156103d25781602001602082028038833980820191505090505b50905060008090505b838390508110156104515783838281811015156103f457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631828281518110151561043657fe5b906020019060200201818152505080806001019150506103db565b509291505056fea165627a7a72305820d81589e50b9f122ad35002394b532972be7906e2897f630acf49c77712c88eed0029"
}