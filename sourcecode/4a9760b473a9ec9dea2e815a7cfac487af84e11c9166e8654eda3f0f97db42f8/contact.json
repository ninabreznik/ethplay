{
  "address": "0x1fc52f1abade452dd4674477d4711951700b3d27",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NokuMasterToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-09\n*/\n\npragma solidity 0.4.13;\ncontract Burnable {\n\n    event LogBurned(address indexed burner, uint256 indexed amount);\n\n    function burn(uint256 amount) returns (bool burned);\n}\ncontract Mintable {\n\n    function mint(address to, uint256 amount) returns (bool minted);\n\n    function mintLocked(address to, uint256 amount) returns (bool minted);\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n    using SafeERC20 for ERC20Basic;\n\n    // ERC20 basic token contract being held\n    ERC20Basic public token;\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 public releaseTime;\n\n    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) {\n        //require(_token != address(0));\n        //require(_beneficiary != address(0));\n        require(_releaseTime > now);\n\n        token = _token;\n        beneficiary = _beneficiary;\n        releaseTime = _releaseTime;\n    }\n\n    /**\n    * @notice Transfers tokens held by timelock to beneficiary.\n    */\n    function release() public {\n        require(now >= releaseTime);\n\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n\n        token.safeTransfer(beneficiary, amount);\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n* @title TokenVesting\n* @dev A token holder contract that can release its token balance gradually like a typical vesting\n* scheme, with a cliff and vesting period. Optionally revocable by the owner.\n*/\ncontract TokenVesting is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20Basic;\n\n    event LogVestingCreated(address indexed beneficiary, uint256 startTime, uint256 indexed cliff,\n        uint256 indexed duration, bool revocable);\n    event LogVestedTokensReleased(address indexed token, uint256 indexed released);\n    event LogVestingRevoked(address indexed token, uint256 indexed refunded);\n\n    // Beneficiary of tokens after they are released\n    address public beneficiary;\n\n    // The duration in seconds of the cliff in which tokens will begin to vest\n    uint256 public cliff;\n    \n    // When the vesting starts as timestamp in seconds from Unix epoch\n    uint256 public startTime;\n    \n    // The duration in seconds of the period in which the tokens will vest\n    uint256 public duration;\n\n    // Flag indicating whether the vesting is revocable or not\n    bool public revocable;\n\n    mapping (address => uint256) public released;\n    mapping (address => bool) public revoked;\n\n    /**\n    * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n    * _beneficiary, gradually in a linear fashion until _startTime + _duration. By then all\n    * of the balance will have vested.\n    * @param _beneficiary The address of the beneficiary to whom vested tokens are transferred\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch\n    * @param _cliff The duration in seconds of the cliff in which tokens will begin to vest\n    * @param _duration The duration in seconds of the period in which the tokens will vest\n    * @param _revocable Flag indicating whether the vesting is revocable or not\n    */\n    function TokenVesting(address _beneficiary, uint256 _startTime, uint256 _cliff, uint256 _duration, bool _revocable) public {\n        require(_beneficiary != address(0));\n        require(_startTime >= now);\n        require(_duration > 0);\n        require(_cliff <= _duration);\n\n        beneficiary = _beneficiary;\n        startTime = _startTime;\n        cliff = _startTime.add(_cliff);\n        duration = _duration;\n        revocable = _revocable;\n\n        LogVestingCreated(beneficiary, startTime, cliff, duration, revocable);\n    }\n\n    /**\n    * @notice Transfers vested tokens to beneficiary.\n    * @param token ERC20 token which is being vested\n    */\n    function release(ERC20Basic token) public {\n        uint256 unreleased = releasableAmount(token);\n        require(unreleased > 0);\n\n        released[token] = released[token].add(unreleased);\n\n        token.safeTransfer(beneficiary, unreleased);\n\n        LogVestedTokensReleased(address(token), unreleased);\n    }\n\n    /**\n    * @notice Allows the owner to revoke the vesting. Tokens already vested\n    * remain in the contract, the rest are returned to the owner.\n    * @param token ERC20 token which is being vested\n    */\n    function revoke(ERC20Basic token) public onlyOwner {\n        require(revocable);\n        require(!revoked[token]);\n\n        uint256 balance = token.balanceOf(this);\n\n        uint256 unreleased = releasableAmount(token);\n        uint256 refundable = balance.sub(unreleased);\n\n        revoked[token] = true;\n\n        token.safeTransfer(owner, refundable);\n\n        LogVestingRevoked(address(token), refundable);\n    }\n\n    /**\n    * @dev Calculates the amount that has already vested but hasn't been released yet.\n    * @param token ERC20 token which is being vested\n    */\n    function releasableAmount(ERC20Basic token) public constant returns (uint256) {\n        return vestedAmount(token).sub(released[token]);\n    }\n\n    /**\n    * @dev Calculates the amount that has already vested.\n    * @param token ERC20 token which is being vested\n    */\n    function vestedAmount(ERC20Basic token) public constant returns (uint256) {\n        uint256 currentBalance = token.balanceOf(this);\n        uint256 totalBalance = currentBalance.add(released[token]);\n\n        if (now < cliff) {\n            return 0;\n        } else if (now >= startTime.add(duration) || revoked[token]) {\n            return totalBalance;\n        } else {\n            return totalBalance.mul(now.sub(startTime)).div(duration);\n        }\n    }\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\ncontract AdaptableToken is Burnable, Mintable, PausableToken {\n\n    uint256 public transferableFromBlock;\n\n    uint256 public lockEndBlock;\n    \n    mapping (address => uint256) public initiallyLockedAmount;\n    \n    function AdaptableToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) internal {\n        require(_lockEndBlock > _transferableFromBlock);\n        transferableFromBlock = _transferableFromBlock;\n        lockEndBlock = _lockEndBlock;\n    }\n\n    modifier canTransfer(address _from, uint _value) {\n        require(block.number >= transferableFromBlock);\n\n        if (block.number < lockEndBlock) {\n            uint256 locked = lockedBalanceOf(_from);\n            if (locked > 0) {\n                uint256 newBalance = balanceOf(_from).sub(_value);\n                require(newBalance >= locked);\n            }\n        }\n        _;\n    }\n\n    function lockedBalanceOf(address _to) public constant returns(uint256) {\n        uint256 locked = initiallyLockedAmount[_to];\n        if (block.number >= lockEndBlock) return 0;\n        else if (block.number <= transferableFromBlock) return locked;\n\n        uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\n        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n        return locked.sub(released);\n    }\n\n    function transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    modifier canMint() {\n        require(!mintingFinished());\n        _;\n    }\n\n    function mintingFinished() public constant returns(bool finished) {\n        return block.number >= transferableFromBlock;\n    }\n\n    /**\n    * @dev Mint new tokens.\n    * @param _to The address that will receieve the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Mint new locked tokens, which will unlock progressively.\n    * @param _to The address that will receieve the minted locked tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n        initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\n        return mint(_to, _amount);\n    }\n\n    /**\n     * @dev Mint timelocked tokens.\n     * @param _to The address that will receieve the minted locked tokens.\n     * @param _amount The amount of tokens to mint.\n     * @param _releaseTime The token release time as timestamp from Unix epoch.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public\n        onlyOwner canMint returns (TokenTimelock tokenTimelock) {\n\n        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n        mint(timelock, _amount);\n\n        return timelock;\n    }\n\n    /**\n    * @dev Mint vested tokens.\n    * @param _to The address that will receieve the minted vested tokens.\n    * @param _amount The amount of tokens to mint.\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n    * @param _duration The duration in seconds of the period in which the tokens will vest.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public\n        onlyOwner canMint returns (TokenVesting tokenVesting) {\n\n        TokenVesting vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n        mint(vesting, _amount);\n\n        return vesting;\n    }\n\n    /**\n    * @dev Burn tokens.\n    * @param _amount The amount of tokens to burn.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function burn(uint256 _amount) public returns (bool burned) {\n        //require(0 < _amount && _amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        totalSupply = totalSupply.sub(_amount);\n\n        Transfer(msg.sender, address(0), _amount);\n        \n        return true;\n    }\n\n    /**\n     * @dev Release vested tokens to beneficiary.\n     * @param _vesting The token vesting to release.\n     */\n    function releaseVested(TokenVesting _vesting) public {\n        require(_vesting != address(0));\n\n        _vesting.release(this);\n    }\n\n    /**\n     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n     * @param _vesting The token vesting to revoke.\n     */\n    function revokeVested(TokenVesting _vesting) public onlyOwner {\n        require(_vesting != address(0));\n\n        _vesting.revoke(this);\n    }\n}\ncontract NokuMasterToken is AdaptableToken {\n    string public constant name = \"NOKU\";\n    string public constant symbol = \"NOKU\";\n    uint8 public constant decimals = 18;\n\n    function NokuMasterToken(uint256 _transferableFromBlock, uint256 _lockEndBlock)\n        AdaptableToken(_transferableFromBlock, _lockEndBlock) public {\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"mintVested\",\"outputs\":[{\"name\":\"tokenVesting\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"releaseVested\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintLocked\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"revokeVested\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"mintTimelocked\",\"outputs\":[{\"name\":\"tokenTimelock\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableFromBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initiallyLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_transferableFromBlock\",\"type\":\"uint256\"},{\"name\":\"_lockEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBurned\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60405160408061231e83398101604052808051919060200180519150505b81815b5b60038054600160a060020a03191633600160a060020a03161790555b81811161006957600080fd5b600482905560058190555b50505b50505b612295806100896000396000f300606060405236156200016b5763ffffffff60e060020a60003504166305d2035b81146200017057806306fdde03146200019a578063095ea7b3146200022b57806318160ddd146200026457806323b872dd146200028c578063313ce56714620002cb57806339e613d914620002f75780633f4ba83a146200033e5780634069925a146200035657806340c10f19146200037a57806342966c6814620003b35780635143e24614620003e05780635935573614620004195780635c975abb146200044d57806366188463146200047757806370a0823114620004b05780638456cb5914620004e45780638587edbb14620004fc5780638da5cb5b146200052457806395d89b41146200019a578063a9059cbb14620005e7578063b8eeb6601462000620578063c14a3b8c1462000644578063c78b200c1462000688578063d73dd62314620006b0578063dd62ed3e14620006e9578063f2fde38b1462000723578063f559468c1462000747575b600080fd5b34156200017c57600080fd5b620001866200077b565b604051901515815260200160405180910390f35b3415620001a657600080fd5b620001b062000785565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015620001ef5780820151818401525b602001620001d4565b50505050905090810190601f1680156200021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200023757600080fd5b62000186600160a060020a0360043516602435620007a6565b604051901515815260200160405180910390f35b34156200027057600080fd5b6200027a620007d7565b60405190815260200160405180910390f35b34156200029857600080fd5b62000186600160a060020a0360043581169060243516604435620007dd565b604051901515815260200160405180910390f35b3415620002d757600080fd5b620002e162000863565b60405160ff909116815260200160405180910390f35b34156200030357600080fd5b62000322600160a060020a036004351660243560443560643562000868565b604051600160a060020a03909116815260200160405180910390f35b34156200034a57600080fd5b6200035462000913565b005b34156200036257600080fd5b62000354600160a060020a036004351662000989565b005b34156200038657600080fd5b62000186600160a060020a036004351660243562000a07565b604051901515815260200160405180910390f35b3415620003bf57600080fd5b6200018660043562000aca565b604051901515815260200160405180910390f35b3415620003ec57600080fd5b62000186600160a060020a036004351660243562000b5e565b604051901515815260200160405180910390f35b34156200042557600080fd5b6200027a600160a060020a036004351662000bed565b60405190815260200160405180910390f35b34156200045957600080fd5b6200018662000ca7565b604051901515815260200160405180910390f35b34156200048357600080fd5b62000186600160a060020a036004351660243562000cb7565b604051901515815260200160405180910390f35b3415620004bc57600080fd5b6200027a600160a060020a036004351662000ce8565b60405190815260200160405180910390f35b3415620004f057600080fd5b6200035462000d07565b005b34156200050857600080fd5b6200027a62000d82565b60405190815260200160405180910390f35b34156200053057600080fd5b6200032262000d88565b604051600160a060020a03909116815260200160405180910390f35b3415620001a657600080fd5b620001b062000785565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015620001ef5780820151818401525b602001620001d4565b50505050905090810190601f1680156200021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415620005f357600080fd5b62000186600160a060020a036004351660243562000db8565b604051901515815260200160405180910390f35b34156200062c57600080fd5b62000354600160a060020a036004351662000e3c565b005b34156200065057600080fd5b62000322600160a060020a036004351660243560443562000ed7565b604051600160a060020a03909116815260200160405180910390f35b34156200069457600080fd5b6200027a62000f6f565b60405190815260200160405180910390f35b3415620006bc57600080fd5b62000186600160a060020a036004351660243562000f75565b604051901515815260200160405180910390f35b3415620006f557600080fd5b6200027a600160a060020a036004358116906024351662000fa6565b60405190815260200160405180910390f35b34156200072f57600080fd5b62000354600160a060020a036004351662000fd3565b005b34156200075357600080fd5b6200027a600160a060020a036004351662001061565b60405190815260200160405180910390f35b6004544310155b90565b604080519081016040526004815260e060020a634e4f4b5502602082015281565b60035460009060a060020a900460ff1615620007c157600080fd5b620007cd838362001073565b90505b5b92915050565b60005481565b600083826000806004544310151515620007f657600080fd5b60055443101562000845576200080c8462000bed565b9150600082111562000845576200083583620008288662000ce8565b9063ffffffff620010cf16565b9050818110156200084557600080fd5b5b5b62000854888888620010e7565b94505b5b505050509392505050565b601281565b600354600090819033600160a060020a039081169116146200088957600080fd5b620008936200077b565b156200089e57600080fd5b85846000856001620008af62001527565b600160a060020a03909516855260208501939093526040808501929092526060840152901515608083015260a09091019051809103906000f0801515620008f557600080fd5b905062000903818662000a07565b508091505b5b5b50949350505050565b60035433600160a060020a039081169116146200092f57600080fd5b60035460a060020a900460ff1615156200094857600080fd5b6003805460a060020a60ff02191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b600160a060020a03811615156200099f57600080fd5b80600160a060020a031663191655873060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620009ee57600080fd5b6102c65a03f1151562000a0057600080fd5b5050505b50565b60035460009033600160a060020a0390811691161462000a2657600080fd5b62000a306200077b565b1562000a3b57600080fd5b60005462000a50908363ffffffff6200111a16565b6000908155600160a060020a03841681526001602052604090205462000a7d908363ffffffff6200111a16565b600160a060020a0384166000818152600160205260408082209390935590916000805160206200222a8339815191529085905190815260200160405180910390a35060015b5b5b92915050565b600160a060020a03331660009081526001602052604081205462000af5908363ffffffff620010cf16565b600160a060020a0333166000908152600160205260408120919091555462000b24908363ffffffff620010cf16565b600090815533600160a060020a03166000805160206200222a8339815191528460405190815260200160405180910390a35060015b919050565b60035460009033600160a060020a0390811691161462000b7d57600080fd5b62000b876200077b565b1562000b9257600080fd5b600160a060020a03831660009081526006602052604090205462000bbd908363ffffffff6200111a16565b600160a060020a038416600090815260066020526040902055620007cd838362000a07565b90505b5b5b92915050565b600160a060020a03811660009081526006602052604081205460055482908190431062000c1e576000935062000c9f565b600454431162000c315782935062000c9f565b5b62000c5d62000c4f600454600554620010cf90919063ffffffff16565b849063ffffffff6200113516565b915062000c888262000c7b60045443620010cf90919063ffffffff16565b9063ffffffff6200115216565b905062000c9c838263ffffffff620010cf16565b93505b505050919050565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161562000cd257600080fd5b620007cd838362001184565b90505b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035433600160a060020a0390811691161462000d2357600080fd5b60035460a060020a900460ff161562000d3b57600080fd5b6003805460a060020a60ff02191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b60055481565b600354600160a060020a031681565b604080519081016040526004815260e060020a634e4f4b5502602082015281565b60003382600080600454431015151562000dd157600080fd5b60055443101562000e205762000de78462000bed565b9150600082111562000e205762000e1083620008288662000ce8565b9063ffffffff620010cf16565b90508181101562000e2057600080fd5b5b5b62000e2e878762001273565b94505b5b5050505092915050565b60035433600160a060020a0390811691161462000e5857600080fd5b600160a060020a038116151562000e6e57600080fd5b80600160a060020a03166374a8f1033060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620009ee57600080fd5b6102c65a03f1151562000a0057600080fd5b5050505b5b50565b600354600090819033600160a060020a0390811691161462000ef857600080fd5b62000f026200077b565b1562000f0d57600080fd5b30858462000f1a62001538565b600160a060020a0393841681529190921660208201526040808201929092526060019051809103906000f080151562000f5257600080fd5b905062000f60818562000a07565b508091505b5b5b509392505050565b60045481565b60035460009060a060020a900460ff161562000f9057600080fd5b620007cd8383620012a4565b90505b5b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161462000fef57600080fd5b600160a060020a03811615156200100557600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360038054600160a060020a031916600160a060020a0383161790555b5b50565b60066020526000908152604090205481565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291906000805160206200224a8339815191529085905190815260200160405180910390a35060015b92915050565b600082821115620010dc57fe5b508082035b92915050565b60035460009060a060020a900460ff16156200110257600080fd5b6200110f8484846200133a565b90505b5b9392505050565b6000828201838110156200112a57fe5b8091505b5092915050565b60008082848115156200114457fe5b0490508091505b5092915050565b60008282028315806200117057508284828115156200116d57fe5b04145b15156200112a57fe5b8091505b5092915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115620011e357600160a060020a0333811660009081526002602090815260408083209388168352929052908120556200121c565b620011f5818463ffffffff620010cf16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020546000805160206200224a833981519152915190815260200160405180910390a3600191505b5092915050565b60035460009060a060020a900460ff16156200128e57600080fd5b620007cd83836200145c565b90505b5b92915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054620012de908363ffffffff6200111a16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290916000805160206200224a83398151915291905190815260200160405180910390a35060015b92915050565b600080600160a060020a03841615156200135357600080fd5b50600160a060020a038085166000818152600260209081526040808320339095168352938152838220549282526001905291909120546200139b908463ffffffff620010cf16565b600160a060020a038087166000908152600160205260408082209390935590861681522054620013d2908463ffffffff6200111a16565b600160a060020a038516600090815260016020526040902055620013fd818463ffffffff620010cf16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206200222a8339815191529086905190815260200160405180910390a3600191505b509392505050565b6000600160a060020a03831615156200147457600080fd5b600160a060020a0333166000908152600160205260409020546200149f908363ffffffff620010cf16565b600160a060020a033381166000908152600160205260408082209390935590851681522054620014d6908363ffffffff6200111a16565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206200222a8339815191529085905190815260200160405180910390a35060015b92915050565b6040516109e7806200154a83390190565b6040516102f98062001f318339019056006060604052341561000f57600080fd5b60405160a0806109e783398101604052808051919060200180519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a038516151561007457600080fd5b4284101561008157600080fd5b6000821161008e57600080fd5b8183111561009b57600080fd5b60018054600160a060020a031916600160a060020a03871617905560038490556100d2848464010000000061014b810261075c1704565b600281905560048390556005805460ff19168315151790819055600154600354859392600160a060020a03909216917ff57e0a7a87565bf66d5d7a9c145ba21624dcce4fc47828b552b3910370fcd88a919060ff16604051918252151560208201526040908101905180910390a45b5050505050610165565b60008282018381101561015a57fe5b8091505b5092915050565b610873806101746000396000f300606060405236156100a95763ffffffff60e060020a6000350416630fb5a6b481146100ae57806313d033c0146100d35780631726cbc8146100f85780631916558714610129578063384711cc1461014a57806338af3eed1461017b57806374a8f103146101aa57806378e97925146101cb578063872a7810146101f05780638da5cb5b146102175780639852595c14610246578063f2fde38b14610277578063fa01dc0614610298575b600080fd5b34156100b957600080fd5b6100c16102cb565b60405190815260200160405180910390f35b34156100de57600080fd5b6100c16102d1565b60405190815260200160405180910390f35b341561010357600080fd5b6100c1600160a060020a03600435166102d7565b60405190815260200160405180910390f35b341561013457600080fd5b610148600160a060020a0360043516610311565b005b341561015557600080fd5b6100c1600160a060020a03600435166103c2565b60405190815260200160405180910390f35b341561018657600080fd5b61018e610505565b604051600160a060020a03909116815260200160405180910390f35b34156101b557600080fd5b610148600160a060020a0360043516610514565b005b34156101d657600080fd5b6100c1610674565b60405190815260200160405180910390f35b34156101fb57600080fd5b61020361067a565b604051901515815260200160405180910390f35b341561022257600080fd5b61018e610683565b604051600160a060020a03909116815260200160405180910390f35b341561025157600080fd5b6100c1600160a060020a0360043516610692565b60405190815260200160405180910390f35b341561028257600080fd5b610148600160a060020a03600435166106a4565b005b34156102a357600080fd5b610203600160a060020a0360043516610730565b604051901515815260200160405180910390f35b60045481565b60025481565b600160a060020a038116600090815260066020526040812054610309906102fd846103c2565b9063ffffffff61074516565b90505b919050565b600061031c826102d7565b90506000811161032b57600080fd5b600160a060020a038216600090815260066020526040902054610354908263ffffffff61075c16565b600160a060020a038084166000818152600660205260409020929092556001546103869291168363ffffffff61077616565b8082600160a060020a03167fc59809262d5a30c230302eec1bdf982b62d1e8cb477facf281f8f0343bc081c460405160405180910390a35b5050565b600080600083600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561041e57600080fd5b6102c65a03f1151561042f57600080fd5b5050506040518051600160a060020a0386166000908152600660205260409020549093506104659150839063ffffffff61075c16565b905060025442101561047a57600092506104fc565b60045460035461048f9163ffffffff61075c16565b421015806104b55750600160a060020a03841660009081526007602052604090205460ff165b156104c2578092506104fc565b6104f96004546104ed6104e06003544261074590919063ffffffff16565b849063ffffffff6107fc16565b9063ffffffff61082b16565b92505b5b5b5050919050565b600154600160a060020a031681565b600080548190819033600160a060020a0390811691161461053457600080fd5b60055460ff16151561054557600080fd5b600160a060020a03841660009081526007602052604090205460ff161561056b57600080fd5b83600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105c257600080fd5b6102c65a03f115156105d357600080fd5b5050506040518051905092506105e8846102d7565b91506105fa838363ffffffff61074516565b600160a060020a038086166000818152600760205260408120805460ff1916600117905554929350610635929091168363ffffffff61077616565b8084600160a060020a03167f49f9f5e483e60c8b0fb5f0a1e586dd006acde1a033b11e44cecd93090e571c1b60405160405180910390a35b5b50505050565b60035481565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60005433600160a060020a039081169116146106bf57600080fd5b600160a060020a03811615156106d457600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0383161790555b5b50565b60076020526000908152604090205460ff1681565b60008282111561075157fe5b508082035b92915050565b60008282018381101561076b57fe5b8091505b5092915050565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107d357600080fd5b6102c65a03f115156107e457600080fd5b5050506040518051905015156107f657fe5b5b505050565b6000828202831580610818575082848281151561081557fe5b04145b151561076b57fe5b8091505b5092915050565b600080828481151561083957fe5b0490508091505b50929150505600a165627a7a723058200111152d0a8d9911893d96c878d94db6af2454c223474323e3f8c8442a03d8f100296060604052341561000f57600080fd5b6040516060806102f98339810160405280805191906020018051919060200180519150505b42811161004057600080fd5b60008054600160a060020a03808616600160a060020a031992831617909255600180549285169290911691909117905560028190555b5050505b610270806100896000396000f300606060405263ffffffff60e060020a60003504166338af3eed811461004557806386d1a69f14610074578063b91d400114610089578063fc0c546a146100ae575b600080fd5b341561005057600080fd5b6100586100dd565b604051600160a060020a03909116815260200160405180910390f35b341561007f57600080fd5b6100876100ec565b005b341561009457600080fd5b61009c6101a9565b60405190815260200160405180910390f35b34156100b957600080fd5b6100586101af565b604051600160a060020a03909116815260200160405180910390f35b600154600160a060020a031681565b6002546000904210156100fe57600080fd5b60008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561015957600080fd5b6102c65a03f1151561016a57600080fd5b50505060405180519150506000811161018257600080fd5b6001546000546101a591600160a060020a0391821691168363ffffffff6101be16565b5b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519050151561023e57fe5b5b5050505600a165627a7a72305820f24f29ef53cf3fb806f926d02c6bc8aa7660803f26053808e75f1bda5b08fc960029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058204c356406b0b2da61c04925a8bc5b845c6fd5acfe51cf776d659833d554a7df8d002900000000000000000000000000000000000000000000000000000000004b5bcd00000000000000000000000000000000000000000000000000000000006b704d",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000004b5bcd00000000000000000000000000000000000000000000000000000000006b704d"
}