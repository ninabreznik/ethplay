{
  "address": "0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Trace Token",
  "contractName": "TracToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-24\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n library SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n   function Ownable() public { owner = msg.sender; }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n   modifier onlyOwner() { require(msg.sender == owner); _; }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n   function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\n contract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\n contract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\n contract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\n contract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n   function approve(address _spender, uint256 _value) public returns (bool) {\n    // mitigating the race condition\n    assert(allowed[msg.sender][_spender] == 0 || _value == 0);\n    \n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n   function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n   function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n      } else {\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n    }\n\n  }\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\n contract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n   function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n   function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n contract TracToken is MintableToken {\n\n  string public constant name = 'Trace Token';\n  string public constant symbol = 'TRAC';\n  uint8 public constant decimals = 18; // one TRAC = 10^18 Tracks\n  uint256 public startTime = 1516028400; // initial startTime from tokensale contract\n  uint256 public constant bountyReward = 1e25;\n  uint256 public constant preicoAndAdvisors = 4e25;\n  uint256 public constant liquidityPool = 25e24;\n  uint256 public constant futureDevelopment = 1e26; \n  uint256 public constant teamAndFounders = 75e24;\n  uint256 public constant CORRECTION = 9605598917469000000000;  // overrun tokens\n\n  // Notice: Including compensation for the overminting in initial contract for 9605598917469000000000 TRACKs (~9605.6 Trace tokens)\n  uint256[8] public founderAmounts = [uint256( teamAndFounders.div(8).sub(CORRECTION) ),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)];\n  uint256[2] public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)];\n\n  // Withdraw multisig wallet\n  address public wallet;\n\n  // Withdraw multisig wallet\n  address public teamAndFoundersWallet;\n\n  // Withdraw multisig wallet\n  address public advisorsAndPreICO;\n  uint256 public TOTAL_NUM_TOKENS = 5e26;\n\n\n  function TracToken(address _wallet,address _teamAndFoundersWallet,address _advisorsAndPreICO) public {\n    require(_wallet!=0x0);\n    require(_teamAndFoundersWallet!=0x0);\n    require(_advisorsAndPreICO!=0x0);\n    wallet = _wallet;\n    teamAndFoundersWallet = _teamAndFoundersWallet;\n    advisorsAndPreICO = _advisorsAndPreICO;\n  }\n\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event TransferAllowed(bool transferIsAllowed);\n\n  modifier canTransfer() {\n    require(mintingFinished);\n    _;        \n  }\n\n  function transferFrom(address from, address to, uint256 value) canTransfer public returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n\n  function transfer(address to, uint256 value) canTransfer public returns (bool) {\n    return super.transfer(to, value);\n  }\n\n  function mint(address contributor, uint256 amount) onlyOwner public returns (bool) {\n    return super.mint(contributor, amount);\n  }\n\n  function mintMany(address[] contributors, uint256[] amounts) onlyOwner public returns (bool) {\n     address contributor;\n     uint256 amount;\n     require(contributors.length == amounts.length);\n\n     for (uint i = 0; i < contributors.length; i++) {\n      contributor = contributors[i];\n      amount = amounts[i];\n      require(mint(contributor, amount));\n    }\n    return true;\n  }\n\n  function endMinting() onlyOwner public returns (bool) {\n    require(!mintingFinished);\n    TransferAllowed(true);\n    return super.finishMinting();\n  }\n\n  function withdrawTokenToFounders() public {\n  \n    if (now > startTime + 720 days && founderAmounts[7]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[7]);\n      founderAmounts[7] = 0;\n    }\n\n    if (now > startTime + 630 days && founderAmounts[6]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[6]);\n      founderAmounts[6] = 0;\n    }\n    if (now > startTime + 540 days && founderAmounts[5]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[5]);\n      founderAmounts[5] = 0;\n    }\n    if (now > startTime + 450 days && founderAmounts[4]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[4]);\n      founderAmounts[4] = 0;\n    }\n    if (now > startTime + 360 days&& founderAmounts[3]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[3]);\n      founderAmounts[3] = 0;\n    }\n    if (now > startTime + 270 days && founderAmounts[2]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[2]);\n      founderAmounts[2] = 0;\n    }\n    if (now > startTime + 180 days && founderAmounts[1]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[1]);\n      founderAmounts[1] = 0;\n    }\n    if (now > startTime + 90 days && founderAmounts[0]>0){\n      this.transfer(teamAndFoundersWallet, founderAmounts[0]);\n      founderAmounts[0] = 0;\n    }\n  }\n\n  function withdrawTokensToAdvisors() public {\n    if (now > startTime + 180 days && preicoAndAdvisorsAmounts[1]>0){\n      this.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[1]);\n      preicoAndAdvisorsAmounts[1] = 0;\n    }\n\n    if (now > startTime + 90 days && preicoAndAdvisorsAmounts[0]>0){\n      this.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[0]);\n      preicoAndAdvisorsAmounts[0] = 0;\n    }\n  }\n\n\n  function allocateRestOfTokens() onlyOwner public{\n    require(totalSupply > TOTAL_NUM_TOKENS.div(2));\n    require(totalSupply < TOTAL_NUM_TOKENS);\n    require(!mintingFinished);\n    mint(wallet, bountyReward);\n    mint(advisorsAndPreICO,  preicoAndAdvisors.div(5));\n    mint(wallet, liquidityPool);\n    mint(wallet, futureDevelopment);\n    mint(this, teamAndFounders.sub(CORRECTION));\n    mint(this, preicoAndAdvisors.mul(4).div(5));\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preicoAndAdvisorsAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokenToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintMany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoAndAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndFoundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureDevelopment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAndPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_NUM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORRECTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokensToAdvisors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateRestOfTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"founderAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_teamAndFoundersWallet\",\"type\":\"address\"},{\"name\":\"_advisorsAndPreICO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferIsAllowed\",\"type\":\"bool\"}],\"name\":\"TransferAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600360146101000a81548160ff021916908315150217905550635a5cc1f0600455610100604051908101604052806200008f690208b876aacb387962006200007260086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b620004c46401000000000262002c06179091906401000000009004565b8152602001620000c360086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b8152602001620000f760086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b81526020016200012b60086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b81526020016200015f60086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b81526020016200019360086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b8152602001620001c760086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b8152602001620001fb60086a3e09de2596099e2b000000620004a86401000000000262002e61179091906401000000009004565b81525060059060086200021092919062000514565b5060408051908101604052806200026e60056200025160026a2116545850052128000000620004de6401000000000262002e7c179091906401000000009004565b620004a86401000000000262002e61179091906401000000009004565b8152602001620002c56005620002a860026a2116545850052128000000620004de6401000000000262002e7c179091906401000000009004565b620004a86401000000000262002e61179091906401000000009004565b815250600d906002620002da92919062000559565b506b019d971e4fe8401e740000006012553415620002f757600080fd5b604051606080620034b18339810160405280805190602001909190805190602001909190805190602001909190505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008373ffffffffffffffffffffffffffffffffffffffff16141515156200038e57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515620003b557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515620003dc57600080fd5b82600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620005c6565b6000808284811515620004b757fe5b0490508091505092915050565b6000828211151515620004d357fe5b818303905092915050565b60008082840290506000841480620005015750828482811515620004fe57fe5b04145b15156200050a57fe5b8091505092915050565b826008810192821562000546579160200282015b828111156200054557825182559160200191906001019062000528565b5b5090506200055591906200059e565b5090565b82600281019282156200058b579160200282015b828111156200058a5782518255916020019190600101906200056d565b5b5090506200059a91906200059e565b5090565b620005c391905b80821115620005bf576000816000905550600101620005a5565b5090565b90565b612edb80620005d66000396000f3006060604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101b15780630688ec24146101de57806306fdde0314610215578063095ea7b3146102a357806318160ddd146102fd57806323b872dd14610326578063241673e81461039f578063313ce567146103b45780634029a3ce146103e357806340c10f1914610495578063521eb273146104ef5780636618846314610544578063665a11ca1461059e57806370a08231146105c757806378e97925146106145780637d64bcb41461063d5780638883478e1461066a5780638b8ecffa146106935780638da5cb5b146106e857806395d89b411461073d578063a10f43a3146107cb578063a2948cdf146107f4578063a9059cbb1461081d578063c2572c5114610877578063c519099d146108cc578063c8e7e5ef146108f5578063ce5e9ffb1461091e578063d73dd62314610947578063dd62ed3e146109a1578063e844ca3414610a0d578063ee43d30f14610a22578063ef70aebf14610a37578063f2fde38b14610a64578063fff83edf14610a9d575b600080fd5b34156101bc57600080fd5b6101c4610ad4565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101ff6004808035906020019091905050610ae7565b6040518082815260200191505060405180910390f35b341561022057600080fd5b610228610b01565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026857808201518184015260208101905061024d565b50505050905090810190601f1680156102955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ae57600080fd5b6102e3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b3a565b604051808215151515815260200191505060405180910390f35b341561030857600080fd5b610310610cbe565b6040518082815260200191505060405180910390f35b341561033157600080fd5b610385600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cc4565b604051808215151515815260200191505060405180910390f35b34156103aa57600080fd5b6103b2610cf5565b005b34156103bf57600080fd5b6103c76116ea565b604051808260ff1660ff16815260200191505060405180910390f35b34156103ee57600080fd5b61047b600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506116ef565b604051808215151515815260200191505060405180910390f35b34156104a057600080fd5b6104d5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117d2565b604051808215151515815260200191505060405180910390f35b34156104fa57600080fd5b610502611842565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561054f57600080fd5b610584600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611868565b604051808215151515815260200191505060405180910390f35b34156105a957600080fd5b6105b1611af9565b6040518082815260200191505060405180910390f35b34156105d257600080fd5b6105fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b08565b6040518082815260200191505060405180910390f35b341561061f57600080fd5b610627611b51565b6040518082815260200191505060405180910390f35b341561064857600080fd5b610650611b57565b604051808215151515815260200191505060405180910390f35b341561067557600080fd5b61067d611c03565b6040518082815260200191505060405180910390f35b341561069e57600080fd5b6106a6611c12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f357600080fd5b6106fb611c38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561074857600080fd5b610750611c5e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610790578082015181840152602081019050610775565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107d657600080fd5b6107de611c97565b6040518082815260200191505060405180910390f35b34156107ff57600080fd5b610807611ca6565b6040518082815260200191505060405180910390f35b341561082857600080fd5b61085d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cb5565b604051808215151515815260200191505060405180910390f35b341561088257600080fd5b61088a611ce4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108d757600080fd5b6108df611d0a565b6040518082815260200191505060405180910390f35b341561090057600080fd5b610908611d19565b6040518082815260200191505060405180910390f35b341561092957600080fd5b610931611d1f565b6040518082815260200191505060405180910390f35b341561095257600080fd5b610987600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611d2d565b604051808215151515815260200191505060405180910390f35b34156109ac57600080fd5b6109f7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f29565b6040518082815260200191505060405180910390f35b3415610a1857600080fd5b610a20611fb0565b005b3415610a2d57600080fd5b610a3561222e565b005b3415610a4257600080fd5b610a4a612440565b604051808215151515815260200191505060405180910390f35b3415610a6f57600080fd5b610a9b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612503565b005b3415610aa857600080fd5b610abe600480803590602001909190505061265b565b6040518082815260200191505060405180910390f35b600360149054906101000a900460ff1681565b600d81600281101515610af657fe5b016000915090505481565b6040805190810160405280600b81526020017f547261636520546f6b656e00000000000000000000000000000000000000000081525081565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480610bc65750600082145b1515610bce57fe5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000600360149054906101000a900460ff161515610ce157600080fd5b610cec848484612675565b90509392505050565b6303b538006004540142118015610d1d5750600060056007600881101515610d1957fe5b0154115b15610e34573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056007600881101515610d7157fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610e0057600080fd5b6102c65a03f11515610e1157600080fd5b5050506040518051905050600060056007600881101515610e2e57fe5b01819055505b63033e91006004540142118015610e5c5750600060056006600881101515610e5857fe5b0154115b15610f73573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056006600881101515610eb057fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610f3f57600080fd5b6102c65a03f11515610f5057600080fd5b5050506040518051905050600060056006600881101515610f6d57fe5b01819055505b6302c7ea006004540142118015610f9a57506000600580600881101515610f9657fe5b0154115b156110af573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600580600881101515610fed57fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561107c57600080fd5b6102c65a03f1151561108d57600080fd5b505050604051805190505060006005806008811015156110a957fe5b01819055505b630251430060045401421180156110d757506000600560046008811015156110d357fe5b0154115b156111ee573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600460088110151561112b57fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156111ba57600080fd5b6102c65a03f115156111cb57600080fd5b50505060405180519050506000600560046008811015156111e857fe5b01819055505b6301da9c006004540142118015611216575060006005600360088110151561121257fe5b0154115b1561132d573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600360088110151561126a57fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156112f957600080fd5b6102c65a03f1151561130a57600080fd5b505050604051805190505060006005600360088110151561132757fe5b01819055505b630163f5006004540142118015611355575060006005600260088110151561135157fe5b0154115b1561146c573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560026008811015156113a957fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561143857600080fd5b6102c65a03f1151561144957600080fd5b505050604051805190505060006005600260088110151561146657fe5b01819055505b62ed4e006004540142118015611493575060006005600160088110151561148f57fe5b0154115b156115aa573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560016008811015156114e757fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561157657600080fd5b6102c65a03f1151561158757600080fd5b50505060405180519050506000600560016008811015156115a457fe5b01819055505b6276a70060045401421180156115d157506000600560006008811015156115cd57fe5b0154115b156116e8573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600060088110151561162557fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156116b457600080fd5b6102c65a03f115156116c557600080fd5b50505060405180519050506000600560006008811015156116e257fe5b01819055505b565b601281565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175157600080fd5b8451865114151561176157600080fd5b600090505b85518110156117c557858181518110151561177d57fe5b906020019060200201519250848181518110151561179757fe5b9060200190602002015191506117ad83836117d2565b15156117b857600080fd5b8080600101915050611766565b6001935050505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183057600080fd5b61183a8383612a34565b905092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611979576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0d565b61198c8382612c0690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6a14adf4b7320334b900000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60045481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bb557600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6a211654585005212800000081565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f545241430000000000000000000000000000000000000000000000000000000081525081565b6a084595161401484a00000081565b6a52b7d2dcc80cd2e400000081565b6000600360149054906101000a900460ff161515611cd257600080fd5b611cdc8383612c1f565b905092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6a3e09de2596099e2b00000081565b60125481565b690208b876aacb3879620081565b6000611dbe82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e4390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b62ed4e006004540142118015611fd757506000600d6001600281101515611fd357fe5b0154115b156120ee573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d600160028110151561202b57fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156120ba57600080fd5b6102c65a03f115156120cb57600080fd5b50505060405180519050506000600d60016002811015156120e857fe5b01819055505b6276a700600454014211801561211557506000600d600060028110151561211157fe5b0154115b1561222c573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d600060028110151561216957fe5b01546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156121f857600080fd5b6102c65a03f1151561220957600080fd5b50505060405180519050506000600d600060028110151561222657fe5b01819055505b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561228a57600080fd5b6122a06002601254612e6190919063ffffffff16565b6000541115156122af57600080fd5b6012546000541015156122c157600080fd5b600360149054906101000a900460ff161515156122dd57600080fd5b612314600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166a084595161401484a0000006117d2565b5061235f601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661235a60056a2116545850052128000000612e6190919063ffffffff16565b6117d2565b50612397600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166a14adf4b7320334b90000006117d2565b506123cf600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166a52b7d2dcc80cd2e40000006117d2565b50612401306123fc690208b876aacb387962006a3e09de2596099e2b000000612c0690919063ffffffff16565b6117d2565b5061243d30612438600561242a60046a2116545850052128000000612e7c90919063ffffffff16565b612e6190919063ffffffff16565b6117d2565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561249e57600080fd5b600360149054906101000a900460ff161515156124ba57600080fd5b7f09453fb3c77c88037c1b664345201b4e2c2e71c35ef789fb3f61972c140e0ac56001604051808215151515815260200191505060405180910390a16124fe611b57565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561255f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561259b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60058160088110151561266a57fe5b016000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156126b257600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561270057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561278b57600080fd5b6127dd82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c0690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061287282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e4390919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061294482600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c0690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a9257600080fd5b600360149054906101000a900460ff16151515612aae57600080fd5b612ac382600054612e4390919063ffffffff16565b600081905550612b1b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e4390919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000828211151515612c1457fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612c5c57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612caa57600080fd5b612cfc82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c0690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d9182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e4390919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808284019050838110151515612e5757fe5b8091505092915050565b6000808284811515612e6f57fe5b0490508091505092915050565b60008082840290506000841480612e9d5750828482811515612e9a57fe5b04145b1515612ea557fe5b80915050929150505600a165627a7a72305820e7eb907fd80db9bd6d78e3bf70611c778e204671c31048396ae9297ee798aa09002900000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e",
  "constructorArguments": "00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e"
}