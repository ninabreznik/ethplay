{
  "address": "0xd5852ba94e2ffffd2bcf6986c42bfc88b956fb7f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Mama",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity >=0.4.22 <0.6.0;  \n  \ncontract owned {  \n    address public owner;  \n  \n    constructor() public {  \n        owner = msg.sender;  \n    }  \n  \n    modifier onlyOwner {  \n        require(msg.sender == owner);  \n        _;  \n    }  \n  \n    function transferOwnership(address newOwner) onlyOwner public {  \n        owner = newOwner;  \n    }  \n}  \n  \ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }  \n  \ncontract TokenERC20 {  \n    // Public variables of the token  \n    string public name;  \n    string public symbol;  \n    uint8 public decimals = 18;  \n    // 18 decimals is the strongly suggested default, avoid changing it  \n    uint256 public totalSupply;  \n  \n    // This creates an array with all balances  \n    mapping (address => uint256) public balanceOf;  \n    mapping (address => mapping (address => uint256)) public allowance;  \n  \n    // This generates a public event on the blockchain that will notify clients  \n    event Transfer(address indexed from, address indexed to, uint256 value);  \n      \n    // This generates a public event on the blockchain that will notify clients  \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);  \n  \n    // This notifies clients about the amount burnt  \n    event Burn(address indexed from, uint256 value);  \n  \n    /** \n     * Constrctor function \n     * \n     * Initializes contract with initial supply tokens to the creator of the contract \n     */  \n    constructor(  \n        uint256 initialSupply,  \n        string memory tokenName,  \n        string memory tokenSymbol  \n    ) public {  \n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount  \n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens  \n        name = tokenName;                                       // Set the name for display purposes  \n        symbol = tokenSymbol;                                   // Set the symbol for display purposes  \n    }  \n  \n    /** \n     * Internal transfer, only can be called by this contract \n     */  \n    function _transfer(address _from, address _to, uint _value) internal {  \n        // Prevent transfer to 0x0 address. Use burn() instead  \n        require(_to != address(0x0));  \n        // Check if the sender has enough  \n        require(balanceOf[_from] >= _value);  \n        // Check for overflows  \n        require(balanceOf[_to] + _value > balanceOf[_to]);  \n        // Save this for an assertion in the future  \n        uint previousBalances = balanceOf[_from] + balanceOf[_to];  \n        // Subtract from the sender  \n        balanceOf[_from] -= _value;  \n        // Add the same to the recipient  \n        balanceOf[_to] += _value;  \n        emit Transfer(_from, _to, _value);  \n        // Asserts are used to use static analysis to find bugs in your code. They should never fail  \n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  \n    }  \n  \n    /** \n     * Transfer tokens \n     * \n     * Send `_value` tokens to `_to` from your account \n     * \n     * @param _to The address of the recipient \n     * @param _value the amount to send \n     */  \n    function transfer(address _to, uint256 _value) public returns (bool success) {  \n        _transfer(msg.sender, _to, _value);  \n        return true;  \n    }  \n  \n    /** \n     * Transfer tokens from other address \n     * \n     * Send `_value` tokens to `_to` in behalf of `_from` \n     * \n     * @param _from The address of the sender \n     * @param _to The address of the recipient \n     * @param _value the amount to send \n     */  \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {  \n        require(_value <= allowance[_from][msg.sender]);     // Check allowance  \n        allowance[_from][msg.sender] -= _value;  \n        _transfer(_from, _to, _value);  \n        return true;  \n    }  \n  \n    /** \n     * Set allowance for other address \n     * \n     * Allows `_spender` to spend no more than `_value` tokens in your behalf \n     * \n     * @param _spender The address authorized to spend \n     * @param _value the max amount they can spend \n     */  \n    function approve(address _spender, uint256 _value) public  \n        returns (bool success) {  \n        allowance[msg.sender][_spender] = _value;  \n        emit Approval(msg.sender, _spender, _value);  \n        return true;  \n    }  \n  \n    /** \n     * Set allowance for other address and notify \n     * \n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it \n     * \n     * @param _spender The address authorized to spend \n     * @param _value the max amount they can spend \n     * @param _extraData some extra information to send to the approved contract \n     */  \n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)  \n        public  \n        returns (bool success) {  \n        tokenRecipient spender = tokenRecipient(_spender);  \n        if (approve(_spender, _value)) {  \n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);  \n            return true;  \n        }  \n    }  \n  \n    /** \n     * Destroy tokens \n     * \n     * Remove `_value` tokens from the system irreversibly \n     * \n     * @param _value the amount of money to burn \n     */  \n    function burn(uint256 _value) public returns (bool success) {  \n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough  \n        balanceOf[msg.sender] -= _value;            // Subtract from the sender  \n        totalSupply -= _value;                      // Updates totalSupply  \n        emit Burn(msg.sender, _value);  \n        return true;  \n    }  \n  \n    /** \n     * Destroy tokens from other account \n     * \n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`. \n     * \n     * @param _from the address of the sender \n     * @param _value the amount of money to burn \n     */  \n    function burnFrom(address _from, uint256 _value) public returns (bool success) {  \n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough  \n        require(_value <= allowance[_from][msg.sender]);    // Check allowance  \n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance  \n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance  \n        totalSupply -= _value;                              // Update totalSupply  \n        emit Burn(_from, _value);  \n        return true;  \n    }  \n}  \n  \n/******************************************/  \n/*       ADVANCED TOKEN STARTS HERE       */  \n/******************************************/  \n  \ncontract Mama is owned, TokenERC20 {  \n  \n    uint256 public sellPrice;  \n    uint256 public buyPrice;  \n  \n    mapping (address => bool) public frozenAccount;  \n  \n    /* This generates a public event on the blockchain that will notify clients */  \n    event FrozenFunds(address target, bool frozen);  \n  \n    /* Initializes contract with initial supply tokens to the creator of the contract */  \n    constructor(  \n        uint256 initialSupply,  \n        string memory tokenName,  \n        string memory tokenSymbol  \n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}  \n  \n    /* Internal transfer, only can be called by this contract */  \n    function _transfer(address _from, address _to, uint _value) internal {  \n        require (_to != address(0x0));                          // Prevent transfer to 0x0 address. Use burn() instead  \n        require (balanceOf[_from] >= _value);                   // Check if the sender has enough  \n        require (balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows  \n        require(!frozenAccount[_from]);                         // Check if sender is frozen  \n        require(!frozenAccount[_to]);                           // Check if recipient is frozen  \n        balanceOf[_from] -= _value;                             // Subtract from the sender  \n        balanceOf[_to] += _value;                               // Add the same to the recipient  \n        emit Transfer(_from, _to, _value);  \n    }  \n  \n    /// @notice Create `mintedAmount` tokens and send it to `target`  \n    /// @param target Address to receive the tokens  \n    /// @param mintedAmount the amount of tokens it will receive  \n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {  \n        balanceOf[target] += mintedAmount;  \n        totalSupply += mintedAmount;  \n        emit Transfer(address(0), address(this), mintedAmount);  \n        emit Transfer(address(this), target, mintedAmount);  \n    }  \n  \n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens  \n    /// @param target Address to be frozen  \n    /// @param freeze either to freeze it or not  \n    function freezeAccount(address target, bool freeze) onlyOwner public {  \n        frozenAccount[target] = freeze;  \n        emit FrozenFunds(target, freeze);  \n    }  \n  \n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth  \n    /// @param newSellPrice Price the users can sell to the contract  \n    /// @param newBuyPrice Price users can buy from the contract  \n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {  \n        sellPrice = newSellPrice;  \n        buyPrice = newBuyPrice;  \n    }  \n  \n    /// @notice Buy tokens from contract by sending ether  \n    function buy() payable public {  \n        uint amount = msg.value / buyPrice;                 // calculates the amount  \n        _transfer(address(this), msg.sender, amount);       // makes the transfers  \n    }  \n  \n    /// @notice Sell `amount` tokens to contract  \n    /// @param amount amount of tokens to be sold  \n    function sell(uint256 amount) public {  \n        address myAddress = address(this);  \n        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy  \n        _transfer(msg.sender, address(this), amount);       // makes the transfers  \n        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks  \n    }  \n}",
  "bytecode": "60806040526003805460ff191660121790553480156200001e57600080fd5b506040516200100538038062001005833981018060405260608110156200004457600080fd5b8151602083018051919392830192916401000000008111156200006657600080fd5b820160208101848111156200007a57600080fd5b81516401000000008111828201871017156200009557600080fd5b50509291906020018051640100000000811115620000b257600080fd5b82016020810184811115620000c657600080fd5b8151640100000000811182820187101715620000e157600080fd5b5050600080546001600160a01b03191633908117825560035460ff16600a0a88026004819055908252600560209081526040909220558551919450869350859250849162000136916001919085019062000159565b5080516200014c90600290602084019062000159565b50505050505050620001fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019c57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cc578251825591602001919060010190620001af565b50620001da929150620001de565b5090565b620001fb91905b80821115620001da5760008155600101620001e5565b90565b610df7806200020e6000396000f3fe6080604052600436106101355760003560e01c80638620410b116100ab578063b414d4b61161006f578063b414d4b614610458578063cae9ca511461048b578063dd62ed3e14610553578063e4849b321461058e578063e724529c146105b8578063f2fde38b146105f357610135565b80638620410b146103bc5780638da5cb5b146103d157806395d89b4114610402578063a6f2ae3a14610417578063a9059cbb1461041f57610135565b8063313ce567116100fd578063313ce567146102ad57806342966c68146102d85780634b7503341461030257806370a082311461031757806379c650681461034a57806379cc67901461038357610135565b806305fefda71461013a57806306fdde031461016c578063095ea7b3146101f657806318160ddd1461024357806323b872dd1461026a575b600080fd5b34801561014657600080fd5b5061016a6004803603604081101561015d57600080fd5b5080359060200135610626565b005b34801561017857600080fd5b50610181610648565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101bb5781810151838201526020016101a3565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020257600080fd5b5061022f6004803603604081101561021957600080fd5b506001600160a01b0381351690602001356106d5565b604080519115158252519081900360200190f35b34801561024f57600080fd5b5061025861073b565b60408051918252519081900360200190f35b34801561027657600080fd5b5061022f6004803603606081101561028d57600080fd5b506001600160a01b03813581169160208101359091169060400135610741565b3480156102b957600080fd5b506102c26107b1565b6040805160ff9092168252519081900360200190f35b3480156102e457600080fd5b5061022f600480360360208110156102fb57600080fd5b50356107ba565b34801561030e57600080fd5b50610258610832565b34801561032357600080fd5b506102586004803603602081101561033a57600080fd5b50356001600160a01b0316610838565b34801561035657600080fd5b5061016a6004803603604081101561036d57600080fd5b506001600160a01b03813516906020013561084a565b34801561038f57600080fd5b5061022f600480360360408110156103a657600080fd5b506001600160a01b038135169060200135610900565b3480156103c857600080fd5b506102586109d1565b3480156103dd57600080fd5b506103e66109d7565b604080516001600160a01b039092168252519081900360200190f35b34801561040e57600080fd5b506101816109e6565b61016a610a3e565b34801561042b57600080fd5b5061022f6004803603604081101561044257600080fd5b506001600160a01b038135169060200135610a5c565b34801561046457600080fd5b5061022f6004803603602081101561047b57600080fd5b50356001600160a01b0316610a72565b34801561049757600080fd5b5061022f600480360360608110156104ae57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156104de57600080fd5b8201836020820111156104f057600080fd5b8035906020019184600183028401116401000000008311171561051257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a87945050505050565b34801561055f57600080fd5b506102586004803603604081101561057657600080fd5b506001600160a01b0381358116916020013516610b8f565b34801561059a57600080fd5b5061016a600480360360208110156105b157600080fd5b5035610bac565b3480156105c457600080fd5b5061016a600480360360408110156105db57600080fd5b506001600160a01b0381351690602001351515610c00565b3480156105ff57600080fd5b5061016a6004803603602081101561061657600080fd5b50356001600160a01b0316610c7b565b6000546001600160a01b0316331461063d57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106cd5780601f106106a2576101008083540402835291602001916106cd565b820191906000526020600020905b8154815290600101906020018083116106b057829003601f168201915b505050505081565b3360008181526006602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b6001600160a01b038316600090815260066020908152604080832033845290915281205482111561077157600080fd5b6001600160a01b03841660009081526006602090815260408083203384529091529020805483900390556107a6848484610cb4565b5060015b9392505050565b60035460ff1681565b336000908152600560205260408120548211156107d657600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b6000546001600160a01b0316331461086157600080fd5b6001600160a01b03821660009081526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a36040805182815290516001600160a01b0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b03821660009081526005602052604081205482111561092557600080fd5b6001600160a01b038316600090815260066020908152604080832033845290915290205482111561095557600080fd5b6001600160a01b0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60085481565b6000546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106cd5780601f106106a2576101008083540402835291602001916106cd565b60006008543481610a4b57fe5b049050610a59303383610cb4565b50565b6000610a69338484610cb4565b50600192915050565b60096020526000908152604090205460ff1681565b600083610a9481856106d5565b15610b8757604051600160e01b638f4ffcb102815233600482018181526024830187905230604484018190526080606485019081528751608486015287516001600160a01b03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610b16578181015183820152602001610afe565b50505050905090810190601f168015610b435780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b5050505060019150506107aa565b509392505050565b600660209081526000928352604080842090915290825290205481565b6007543090820281311015610bc057600080fd5b610bcb333084610cb4565b6007546040513391840280156108fc02916000818181858888f19350505050158015610bfb573d6000803e3d6000fd5b505050565b6000546001600160a01b03163314610c1757600080fd5b6001600160a01b038216600081815260096020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b6000546001600160a01b03163314610c9257600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038216610cc757600080fd5b6001600160a01b038316600090815260056020526040902054811115610cec57600080fd5b6001600160a01b0382166000908152600560205260409020548181011015610d1357600080fd5b6001600160a01b03831660009081526009602052604090205460ff1615610d3957600080fd5b6001600160a01b03821660009081526009602052604090205460ff1615610d5f57600080fd5b6001600160a01b03808416600081815260056020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350505056fea165627a7a72305820132b5b7e5f9e4a08d8af2ea3672645b807690e04e313ff4fdaa6432450e8bc500029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000044d616d610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d554d0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000044d616d610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d554d0000000000000000000000000000000000000000000000000000000000"
}