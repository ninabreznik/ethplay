{
  "address": "0x47702926113be41e270826fc260b29ca758a56b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SixFriends",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.24;\n\n/*\n  Реализация смарт контракта по типу 6 друзей\n*/\n\ncontract SixFriends {\n\n    using SafeMath for uint;\n\n    address public ownerAddress; //Адресс владельца\n    uint private percentMarketing = 8; //Проценты на маркетинг\n    uint private percentAdministrator = 2; //Проценты администрации\n\n    uint public c_total_hexagons; //Количество гексагонов всего\n    mapping(address =>  uint256) public Bills; //Баланс для вывода\n\n    uint256 public BillsTotal; //суммарная проведенная сумма\n\n    struct Node {\n        uint256 usd;\n        bool cfw;\n        uint256 min; //Стоимость входа\n        uint c_hexagons; //Количество гексагонов\n        mapping(address => bytes32[]) Addresses; //Адресс => уникальные ссылки\n        mapping(address => uint256[6]) Statistics; //Адресс => статистика по рефералам\n        mapping(bytes32 => address[6]) Hexagons; //Уникальная ссылка (keccak256) => 6 кошельков\n    }\n\n    mapping (uint256 => Node) public Nodes; //все типы\n\n    //Проверяет что сумма перевода достаточна\n    modifier enoughMoney(uint256 tp) {\n        require (msg.value >= Nodes[0].min, \"Insufficient funds\");\n        _;\n    }\n\n    //Проверяет что тот кто перевел владелец кошелька\n    modifier onlyOwner {\n        require (msg.sender == ownerAddress, \"Only owner\");\n        _;\n    }\n\n    //Ранее создан\n    modifier allReadyCreate(uint256 tp) {\n        require (Nodes[tp].cfw == false);\n        _;\n    }\n\n    //Проверяю что человек запросивший являетя владельцем баланса\n    modifier recipientOwner(address recipient) {\n        require (Bills[recipient] > 0);\n        require (msg.sender == recipient);\n        _;\n    }\n\n    //Функция для оплаты\n    function pay(bytes32 ref, uint256 tp) public payable enoughMoney(tp) {\n\n        if (Nodes[tp].Hexagons[ref][0] == 0) ref = Nodes[tp].Addresses[ownerAddress][0]; //Если ref не найдена то берется первое значение\n\n        createHexagons(ref, tp); //Передаю текущую ref, добавляю новые 6 друзей\n\n        uint256 marketing_pay = ((msg.value / 100) * (percentMarketing + percentAdministrator));\n        uint256 friend_pay = msg.value - marketing_pay;\n\n        //Перевожу деньги на счета клиентов\n        for(uint256 i = 0; i < 6; i++)\n            Bills[Nodes[tp].Hexagons[ref][i]] += friend_pay.div(6);\n\n        //Перевожу коммисию на маркетинг\n        Bills[ownerAddress] += marketing_pay;\n\n        //Суммирую всего выплат\n        BillsTotal += msg.value;\n    }\n\n    function getHexagons(bytes32 ref, uint256 tp) public view returns (address, address, address, address, address, address)\n    {\n        return (Nodes[tp].Hexagons[ref][0], Nodes[tp].Hexagons[ref][1], Nodes[tp].Hexagons[ref][2], Nodes[tp].Hexagons[ref][3], Nodes[tp].Hexagons[ref][4], Nodes[tp].Hexagons[ref][0]);\n    }\n\n    //Запросить деньги и обнулить счет\n    function getMoney(address recipient) public recipientOwner(recipient) {\n        recipient.transfer(Bills[recipient]);\n        Bills[recipient] = 0;\n    }\n\n    //Передаю переданную рефку и добавляю новый гексагон\n    function createHexagons(bytes32 ref, uint256 tp) internal {\n\n        Nodes[tp].c_hexagons++; //Увеличиваю счетчик гексагонов и транзакций\n        c_total_hexagons++; //Увеличиваю счетчик гексагонов и транзакций\n\n        bytes32 new_ref = createRef(Nodes[tp].c_hexagons);\n\n        //Прохожу по переданной рефке и создаю кошельки\n        for(uint8 i = 0; i < 5; i++)\n        {\n            Nodes[tp].Hexagons[new_ref][i] = Nodes[tp].Hexagons[ref][i + 1]; //Добавляю новый гексагон\n            Nodes[tp].Statistics[Nodes[tp].Hexagons[ref][i]][5 - i]++; //Добавляю статистку\n        }\n\n        Nodes[tp].Statistics[Nodes[tp].Hexagons[ref][i]][0]++; //Добавляю статистку\n\n        Nodes[tp].Hexagons[new_ref][5] = msg.sender;\n        Nodes[tp].Addresses[msg.sender].push(new_ref); //Добавляю рефку\n    }\n\n    //Создаю новый гексагон с указанием его стоимости и порядкового номера\n    function createFirstWallets(uint256 usd, uint256 tp) public onlyOwner allReadyCreate(tp) {\n\n        bytes32 new_ref = createRef(1);\n\n        Nodes[tp].Hexagons[new_ref] = [ownerAddress, ownerAddress, ownerAddress, ownerAddress, ownerAddress, ownerAddress];\n        Nodes[tp].Addresses[ownerAddress].push(new_ref);\n\n        Nodes[tp].c_hexagons = 1; //Количество гексагонов\n        Nodes[tp].usd = usd; //Сколько стоит членский взнос в эту ноду в долларах\n        Nodes[tp].cfw = true; //Нода помечается как созданная\n\n        c_total_hexagons++;\n    }\n\n    //Создаю реферальную ссылку на основе номера блока и типа контракта\n    function createRef(uint hx) internal pure returns (bytes32) {\n        uint256 _unixTimestamp;\n        uint256 _timeExpired;\n        return keccak256(abi.encodePacked(hx, _unixTimestamp, _timeExpired));\n    }\n\n    //Получаю количество ссылок для адреса\n    function countAddressRef(address adr, uint256 tp) public view returns (uint count) {\n        count = Nodes[tp].Addresses[adr].length;\n    }\n\n    //Получаю ссылку\n    function getAddress(address adr, uint256 i, uint256 tp) public view returns(bytes32) {\n        return Nodes[tp].Addresses[adr][i];\n    }\n\n    //Возвращение статистики\n    function getStatistics(address adr, uint256 tp) public view returns(uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        return (Nodes[tp].Statistics[adr][0], Nodes[tp].Statistics[adr][1], Nodes[tp].Statistics[adr][2], Nodes[tp].Statistics[adr][3], Nodes[tp].Statistics[adr][4], Nodes[tp].Statistics[adr][5]);\n    }\n\n    //Устанавливаю стоимость входа\n    function setMin(uint value, uint256 tp) public onlyOwner {\n        Nodes[tp].min = value;\n    }\n\n    //Получение минимальной стоимости\n    function getMin(uint256 tp) public view returns (uint256) {\n        return Nodes[tp].min;\n    }\n\n    //Получаю тотал денег\n    function getBillsTotal() public view returns (uint256) {\n        return BillsTotal;\n    }\n\n    constructor() public {\n        ownerAddress = msg.sender;\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "608060405260086001556002805534801561001957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c23806100696000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303251a08146100e05780634dc8f892146101175780634f4412d4146101425780636af58d8314610199578063717d5527146101da5780638768fa941461021d5780638f84aa09146102545780639e358a8a146102ab578063a4efe323146102d6578063a83733a41461035a578063cfba6865146103b4578063d0ee4de0146103df578063d2cf20dc1461040d578063faa7b7291461046e578063fc4977df146104e1575b600080fd5b3480156100ec57600080fd5b50610115600480360381019080803590602001909291908035906020019092919050505061065b565b005b34801561012357600080fd5b5061012c61073e565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b50610183600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b3480156101a557600080fd5b506101c46004803603810190808035906020019092919050505061075c565b6040518082815260200191505060405180910390f35b3480156101e657600080fd5b5061021b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061077c565b005b34801561022957600080fd5b5061025260048036038101908080359060200190929190803590602001909291905050506108d4565b005b34801561026057600080fd5b50610269610d39565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b757600080fd5b506102c0610d5e565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b50610321600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d64565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b34801561036657600080fd5b5061038560048036038101908080359060200190929190505050610fd5565b604051808581526020018415151515815260200183815260200182815260200194505050505060405180910390f35b3480156103c057600080fd5b506103c9611012565b6040518082815260200191505060405180910390f35b61040b60048036038101908080356000191690602001909291908035906020019092919050505061101c565b005b34801561041957600080fd5b50610458600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611341565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b506104c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506113a2565b60405180826000191660001916815260200191505060405180910390f35b3480156104ed57600080fd5b5061051a600480360381019080803560001916906020019092919080359060200190929190505050611418565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4f6e6c79206f776e65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8160066000838152602001908152602001600020600201819055505050565b60035481565b60046020528060005260406000206000915090505481565b600060066000838152602001908152602001600020600201549050919050565b806000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156107cb57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561088a573d6000803e3d6000fd5b506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4f6e6c79206f776e65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600015156006600083815260200190815260200160002060010160009054906101000a900460ff1615151415156109d157600080fd5b6109db6001611671565b915060c0604051908101604052806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506006600085815260200190815260200160002060060160008460001916600019168152602001908152602001600020906006610c16929190611b37565b506006600084815260200190815260200160002060040160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055506001600660008581526020019081526020016000206003018190555083600660008581526020019081526020016000206000018190555060016006600085815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060036000815480929190600101919050555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000806000806000806006600088815260200190815260200160002060050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600681101515610dce57fe5b01546006600089815260200190815260200160002060050160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600681101515610e3157fe5b0154600660008a815260200190815260200160002060050160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600681101515610e9457fe5b0154600660008b815260200190815260200160002060050160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600681101515610ef757fe5b0154600660008c815260200190815260200160002060050160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600681101515610f5a57fe5b0154600660008d815260200190815260200160002060050160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600681101515610fbd57fe5b01549550955095509550955095509295509295509295565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154908060030154905084565b6000600554905090565b600080600083600660008081526020019081526020016000206002015434101515156110b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e73756666696369656e742066756e6473000000000000000000000000000081525060200191505060405180910390fd5b6000600660008781526020019081526020016000206006016000886000191660001916815260200190815260200160002060006006811015156110ef57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111bd576006600086815260200190815260200160002060040160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154811015156111af57fe5b906000526020600020015495505b6111c78686611711565b600254600154016064348115156111da57fe5b040293508334039250600091505b60068210156112bb57611205600684611b1c90919063ffffffff16565b600460006006600089815260200190815260200160002060060160008a600019166000191681526020019081526020016000208560068110151561124557fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081806001019250506111e8565b83600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555034600560008282540192505081905550505050505050565b60006006600083815260200190815260200160002060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905092915050565b60006006600083815260200190815260200160002060040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561140457fe5b906000526020600020015490509392505050565b6000806000806000806006600088815260200190815260200160002060060160008960001916600019168152602001908152602001600020600060068110151561145e57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006600089815260200190815260200160002060060160008a6000191660001916815260200190815260200160002060016006811015156114bd57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008a815260200190815260200160002060060160008b60001916600019168152602001908152602001600020600260068110151561151c57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008b815260200190815260200160002060060160008c60001916600019168152602001908152602001600020600360068110151561157b57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008c815260200190815260200160002060060160008d6000191660001916815260200190815260200160002060046006811015156115da57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008d815260200190815260200160002060060160008e60001916600019168152602001908152602001600020600060068110151561163957fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550955095509550955095509295509295509295565b60008060008382826040516020018084815260200183815260200182815260200193505050506040516020818303038152906040526040518082805190602001908083835b6020831015156116db57805182526020820191506020810190506020830392506116b6565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092505050919050565b600080600660008481526020019081526020016000206003016000815480929190600101919050555060036000815480929190600101919050555061176b6006600085815260200190815260200160002060030154611671565b9150600090505b60058160ff1610156119445760066000848152602001908152602001600020600601600085600019166000191681526020019081526020016000206001820160ff166006811015156117c057fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066000858152602001908152602001600020600601600084600019166000191681526020019081526020016000208260ff1660068110151561182157fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060066000848152602001908152602001600020600501600060066000868152602001908152602001600020600601600087600019166000191681526020019081526020016000208360ff166006811015156118b757fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160050360ff1660068110151561192657fe5b01600081548092919060010191905055508080600101915050611772565b60066000848152602001908152602001600020600501600060066000868152602001908152602001600020600601600087600019166000191681526020019081526020016000208360ff1660068110151561199b57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600681101515611a0557fe5b01600081548092919060010191905055503360066000858152602001908152602001600020600601600084600019166000191681526020019081526020016000206005600681101515611a5457fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600084815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555050505050565b6000808284811515611b2a57fe5b0490508091505092915050565b8260068101928215611ba3579160200282015b82811115611ba25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b4a565b5b509050611bb09190611bb4565b5090565b611bf491905b80821115611bf057600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611bba565b5090565b905600a165627a7a723058204afd7b298c2dbea57d5604cb064ea36ae4edc4a8c5842e356ba29fa3b9e9611b0029"
}