{
  "address": "0x5e0af01930c8dc676a6dc7133bd86370a0be3953",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Touch",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-04\n*/\n\n/**\n * @title Moderated\n * @dev restricts execution of 'onlyModerator' modified functions to the contract moderator\n * @dev restricts execution of 'ifUnrestricted' modified functions to when unrestricted\n *      boolean state is true\n * @dev allows for the extraction of ether or other ERC20 tokens mistakenly sent to this address\n */\ncontract Moderated {\n\n    address public moderator;\n\n    bool public unrestricted;\n\n    modifier onlyModerator {\n        require(msg.sender == moderator);\n        _;\n    }\n\n    modifier ifUnrestricted {\n        require(unrestricted);\n        _;\n    }\n\n    modifier onlyPayloadSize(uint numWords) {\n        assert(msg.data.length >= numWords * 32 + 4);\n        _;\n    }\n\n    function Moderated() public {\n        moderator = msg.sender;\n        unrestricted = true;\n    }\n\n    function reassignModerator(address newModerator) public onlyModerator {\n        moderator = newModerator;\n    }\n\n    function restrict() public onlyModerator {\n        unrestricted = false;\n    }\n\n    function unrestrict() public onlyModerator {\n        unrestricted = true;\n    }\n\n    /// This method can be used to extract tokens mistakenly sent to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    function extract(address _token) public returns (bool) {\n        require(_token != address(0x0));\n        Token token = Token(_token);\n        uint256 balance = token.balanceOf(this);\n        return token.transfer(moderator, balance);\n    }\n\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(_addr) }\n        return (size > 0);\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract Token {\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations that are safe for uint256 against overflow and negative values\n * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// @dev Assign moderation of contract to CrowdSale\n\ncontract Touch is Moderated {\n\tusing SafeMath for uint256;\n\n\t\tstring public name = \"Touch. Token\";\n\t\tstring public symbol = \"TST\";\n\t\tuint8 public decimals = 18;\n\n        uint256 public maximumTokenIssue = 1000000000 * 10**18;\n\n\t\tmapping(address => uint256) internal balances;\n\t\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\t\tuint256 internal totalSupply_;\n\n\t\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t\t/**\n\t\t* @dev total number of tokens in existence\n\t\t*/\n\t\tfunction totalSupply() public view returns (uint256) {\n\t\t\treturn totalSupply_;\n\t\t}\n\n\t\t/**\n\t\t* @dev transfer token for a specified address\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t\t*/\n\t\tfunction transfer(address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n\t\t    return _transfer(msg.sender, _to, _value);\n\t\t}\n\n\t\t/**\n\t\t* @dev Transfer tokens from one address to another\n\t\t* @param _from address The address which you want to send tokens from\n\t\t* @param _to address The address which you want to transfer to\n\t\t* @param _value uint256 the amount of tokens to be transferred\n\t\t*/\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(3) returns (bool) {\n\t\t    require(_value <= allowed[_from][msg.sender]);\n\t\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\t    return _transfer(_from, _to, _value);\n\t\t}\n\n\t\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n\t\t\t// Do not allow transfers to 0x0 or to this contract\n\t\t\trequire(_to != address(0x0) && _to != address(this));\n\t\t\t// Do not allow transfer of value greater than sender's current balance\n\t\t\trequire(_value <= balances[_from]);\n\t\t\t// Update balance of sending address\n\t\t\tbalances[_from] = balances[_from].sub(_value);\n\t\t\t// Update balance of receiving address\n\t\t\tbalances[_to] = balances[_to].add(_value);\n\t\t\t// An event to make the transfer easy to find on the blockchain\n\t\t\tTransfer(_from, _to, _value);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* @dev Gets the balance of the specified address.\n\t\t* @param _owner The address to query the the balance of.\n\t\t* @return An uint256 representing the amount owned by the passed address.\n\t\t*/\n\t\tfunction balanceOf(address _owner) public view returns (uint256) {\n\t\t\treturn balances[_owner];\n\t\t}\n\n\t\t/**\n\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t\t*\n\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\t* @param _spender The address which will spend the funds.\n\t\t* @param _value The amount of tokens to be spent.\n\t\t*/\n\t\tfunction approve(address _spender, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool sucess) {\n\t\t\t// Can only approve when value has not already been set or is zero\n\t\t\trequire(allowed[msg.sender][_spender] == 0 || _value == 0);\n\t\t\tallowed[msg.sender][_spender] = _value;\n\t\t\tApproval(msg.sender, _spender, _value);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t\t* @param _owner address The address which owns the funds.\n\t\t* @param _spender address The address which will spend the funds.\n\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\n\t\t*/\n\t\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\t\treturn allowed[_owner][_spender];\n\t\t}\n\n\t\t/**\n\t\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n\t\t*\n\t\t* approve should be called when allowed[_spender] == 0. To increment\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n\t\t* the first transaction is mined)\n\t\t* From MonolithDAO Token.sol\n\t\t* @param _spender The address which will spend the funds.\n\t\t* @param _addedValue The amount of tokens to increase the allowance by.\n\t\t*/\n\t\tfunction increaseApproval(address _spender, uint256 _addedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n\t\t\trequire(_addedValue > 0);\n\t\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t\t*\n\t\t* approve should be called when allowed[_spender] == 0. To decrement\n\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n\t\t* the first transaction is mined)\n\t\t* From MonolithDAO Token.sol\n\t\t* @param _spender The address which will spend the funds.\n\t\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t\t*/\n\t\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n\t\t\tuint256 oldValue = allowed[msg.sender][_spender];\n\t\t\trequire(_subtractedValue > 0);\n\t\t\tif (_subtractedValue > oldValue) {\n\t\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t\t} else {\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t\t}\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* @dev Function to mint tokens\n\t\t* @param _to The address that will receive the minted tokens.\n\t\t* @param _amount The amount of tokens to mint.\n\t\t* @return A boolean that indicates if the operation was successful.\n\t\t*/\n\t\tfunction generateTokens(address _to, uint _amount) internal returns (bool) {\n\t\t\ttotalSupply_ = totalSupply_.add(_amount);\n\t\t\tbalances[_to] = balances[_to].add(_amount);\n\t\t\tTransfer(address(0x0), _to, _amount);\n\t\t\treturn true;\n\t\t}\n\t\t/**\n\t\t* @dev fallback function - reverts transaction\n\t\t*/\n    \tfunction () external payable {\n    \t    revert();\n    \t}\n\n    \tfunction Touch () public {\n    \t\tgenerateTokens(msg.sender, maximumTokenIssue);\n    \t}\n\n}",
  "bytecode": "60806040526040805190810160405280600c81526020017f546f7563682e20546f6b656e00000000000000000000000000000000000000008152506001908051906020019062000051929190620002ba565b506040805190810160405280600381526020017f5453540000000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f929190620002ba565b506012600360006101000a81548160ff021916908360ff1602179055506b033b2e3c9fd0803ce8000000600455348015620000d957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff021916908315150217905550620001523360045462000159640100000000026401000000009004565b5062000369565b600062000180826007546200029b6401000000000262001866179091906401000000009004565b600781905550620001e882600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200029b6401000000000262001866179091906401000000009004565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808284019050838110151515620002b057fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fd57805160ff19168380011785556200032e565b828001600101855582156200032e579182015b828111156200032d57825182559160200191906001019062000310565b5b5090506200033d919062000341565b5090565b6200036691905b808211156200036257600081600090555060010162000348565b5090565b90565b6118b080620003796000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610101578063095ea7b31461019157806318160ddd146101f657806323b872dd1461022157806326278f86146102a6578063313ce567146102d557806338743904146103065780633b06903e1461035d5780634d493f24146103a057806366188463146103cb57806370a082311461043057806395d89b41146104875780639649d98b14610517578063a9059cbb1461052e578063ad57a2df14610593578063c7a5d285146105aa578063d73dd62314610605578063dd62ed3e1461066a575b600080fd5b34801561010d57600080fd5b506101166106e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015657808201518184015260208101905061013b565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019d57600080fd5b506101dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061077f565b604051808215151515815260200191505060405180910390f35b34801561020257600080fd5b5061020b61093a565b6040518082815260200191505060405180910390f35b34801561022d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610944565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102bb610b27565b604051808215151515815260200191505060405180910390f35b3480156102e157600080fd5b506102ea610b3a565b604051808260ff1660ff16815260200191505060405180910390f35b34801561031257600080fd5b5061031b610b4d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036957600080fd5b5061039e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b72565b005b3480156103ac57600080fd5b506103b5610c10565b6040518082815260200191505060405180910390f35b3480156103d757600080fd5b50610416600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c16565b604051808215151515815260200191505060405180910390f35b34801561043c57600080fd5b50610471600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eea565b6040518082815260200191505060405180910390f35b34801561049357600080fd5b5061049c610f33565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104dc5780820151818401526020810190506104c1565b50505050905090810190601f1680156105095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052357600080fd5b5061052c610fd1565b005b34801561053a57600080fd5b50610579600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611048565b604051808215151515815260200191505060405180910390f35b34801561059f57600080fd5b506105a8611090565b005b3480156105b657600080fd5b506105eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611108565b604051808215151515815260200191505060405180910390f35b34801561061157600080fd5b50610650600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061132b565b604051808215151515815260200191505060405180910390f35b34801561067657600080fd5b506106cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611569565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107775780601f1061074c57610100808354040283529160200191610777565b820191906000526020600020905b81548152906001019060200180831161075a57829003601f168201915b505050505081565b60008060149054906101000a900460ff16151561079b57600080fd5b6002600460208202016000369050101515156107b357fe5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148061083e5750600083145b151561084957600080fd5b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000600754905090565b60008060149054906101000a900460ff16151561096057600080fd5b60036004602082020160003690501015151561097857fe5b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610a0357600080fd5b610a9283600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f090919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b1d858585611609565b9150509392505050565b600060149054906101000a900460ff1681565b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bcd57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b600080600060149054906101000a900460ff161515610c3457600080fd5b600260046020820201600036905010151515610c4c57fe5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600084111515610cda57600080fd5b81841115610d69576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dfd565b610d7c84836115f090919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019250505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fc95780601f10610f9e57610100808354040283529160200191610fc9565b820191906000526020600020905b815481529060010190602001808311610fac57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102c57600080fd5b60008060146101000a81548160ff021916908315150217905550565b60008060149054906101000a900460ff16151561106457600080fd5b60026004602082020160003690501015151561107c57fe5b611087338585611609565b91505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110eb57600080fd5b6001600060146101000a81548160ff021916908315150217905550565b60008060008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561114857600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d602081101561121057600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156112e757600080fd5b505af11580156112fb573d6000803e3d6000fd5b505050506040513d602081101561131157600080fd5b810190808051906020019092919050505092505050919050565b60008060149054906101000a900460ff16151561134757600080fd5b60026004602082020160003690501015151561135f57fe5b60008311151561136e57600080fd5b6113fd83600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461186690919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156115fe57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561167357503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561167e57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156116cc57600080fd5b61171e82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f090919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117b382600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461186690919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561187a57fe5b80915050929150505600a165627a7a72305820f5cfa314f1296aa67a38d10319001d54b974b8a572309b34f5d194d486e11ff00029"
}