{
  "address": "0x9564d50dd41b92777359a8be94eff9255d8c4213",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GamePool",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-25\n*/\n\npragma solidity ^0.4.24;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n    function getPrice(string _datasource) public returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n}\n\ncontract OraclizeAddrResolverI {\n    function getAddress() public returns (address _addr);\n}\n\n/*\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nlibrary Buffer {\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if(a > b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n     *      would exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n        if(data.length + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, data.length) * 2);\n        }\n\n        uint dest;\n        uint src;\n        uint len = data.length;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n            dest := add(add(bufptr, buflen), 32)\n            // Update buffer length\n            mstore(bufptr, add(buflen, mload(data)))\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, uint8 data) internal pure {\n        if(buf.buf.length + 1 > buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length)\n            let dest := add(add(bufptr, buflen), 32)\n            mstore8(dest, data)\n            // Update buffer length\n            mstore(bufptr, add(buflen, 1))\n        }\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        if(len + buf.buf.length > buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n            let dest := add(add(bufptr, buflen), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length\n            mstore(bufptr, add(buflen, len))\n        }\n        return buf;\n    }\n}\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n        if(value <= 23) {\n            buf.append(uint8((major << 5) | value));\n        } else if(value <= 0xFF) {\n            buf.append(uint8((major << 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value <= 0xFFFF) {\n            buf.append(uint8((major << 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value <= 0xFFFFFFFF) {\n            buf.append(uint8((major << 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n            buf.append(uint8((major << 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\n        buf.append(uint8((major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\n        if(value >= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n\n/*\nEnd solidity-cborutils\n */\n\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            oraclize_setNetwork(networkID_auto);\n\n        if(address(oraclize) != OAR.getAddress())\n            oraclize = OraclizeI(OAR.getAddress());\n\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n      return oraclize_setNetwork();\n      networkID; // silence the warning and remain backwards compatible\n    }\n    function oraclize_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) public {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) public {\n      return;\n      myid; result; proof; // Silence compiler warnings\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal pure returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal pure returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    using CBOR for Buffer.buffer;\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeString(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < arr.length; i++) {\n            buf.encodeBytes(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n\n    function oraclize_getNetworkName() internal view returns (string) {\n        return oraclize_network_name;\n    }\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        require((_nbytes > 0) && (_nbytes <= 32));\n        // Convert from seconds to ledger timer ticks\n        _delay *= 10;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            // the following variables can be relaxed\n            // check relaxed random contract under ethereum-examples repo\n            // for an idea on how to override and replace comit hash vars\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n        }\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n        return queryId;\n    }\n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n\n        bytes32 sigr;\n        bytes32 sigs;\n\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(keccak256(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(keccak256(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = byte(1); //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n        if (sigok == false) return false;\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n        return sigok;\n    }\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        require(proofVerified);\n\n        _;\n    }\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n        bool match_ = true;\n\n        require(prefix.length == n_random_bytes);\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n            if (content[i] != prefix[i]) match_ = false;\n        }\n\n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n        uint minLength = length + toOffset;\n\n        // Buffer too small\n        require(to.length >= minLength); // Should be a better way?\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n\n}\n// </ORACLIZE_API>\n\ncontract GamePool is Ownable, usingOraclize {\n    using SafeMath for uint256;\n    \n    enum RecordType { StartExRate, EndExRate, RandY }\n    \n    struct QueryRecord {\n        RecordType recordType;\n        uint256 gameId;\n        uint256 arg;\n    }\n    \n    mapping (bytes32 => QueryRecord) public queryRecords;\n    \n    GameLogic.Instance[] public games;\n    GameLogic.GameBets[] gameBets;\n    \n    address public txFeeReceiver;\n    uint256 public oraclizeFee;\n    \n    uint256 public MIN_BET = 100 finney; // 0.1 ether.\n    uint256 public HIDDEN_TIME_BEFORE_CLOSE = 5 minutes;\n    uint256 public ORICALIZE_GAS_LIMIT = 120000;\n    uint256 public CLAIM_AWARD_TIME_AFTER_CLOSE = 30 days;\n    uint256 public CLAIM_REFUND_TIME_AFTER_CLOSE = 6 hours;\n    uint256 public MAX_FETCHING_TIME_FOR_END_EXRATE = 3 hours;\n    \n    event StartExRateUpdated(uint256 indexed gameId, uint256 coinId, int32 rate, uint256 timeStamp);\n    event EndExRateUpdated(uint256 indexed gameId, uint256 coinId, int32 rate, uint256 timeStamp);\n    event GameYChoosed(uint256 indexed gameId, uint8 Y);\n    \n    event Log(string message);\n    event LogAddr(address addr);\n    event CoinBet(uint256 indexed gameId, uint256 coinId, address player, uint256 amount);\n    event CoinLargestBetChanged(uint256 indexed gameId, uint256 coinId, uint256 amount);\n    event SendAwards(uint256 indexed gameId, address player, uint256 awards);\n    event RefundClaimed(uint256 indexed gameId, address player, uint256 amount);\n    event OraclizeFeeReceived(uint256 received);\n    event OraclizeFeeUsed(uint256 used);\n    event SentOraclizeQuery(bytes32 queryId);\n    event SendTxFee(address receiver, uint256 feeAmount);\n    event GetUnclaimedAwards(uint256 indexed gameId, address receiver, uint256 feeAmount);\n    event GetUnclaimedRefunds(uint256 indexed gameId, address receiver, uint256 feeAmount);\n    \n    event GameCreated(uint256 gameId);\n    \n    event GameClosed(uint256 indexed gameId);\n    event GameExtended(uint256 indexed gameId, uint256 closeTime);\n    event GameWaitToClose(uint256 indexed gameId);\n    event GameReady(uint256 indexed gameId);\n    event GameOpened(uint256 indexed gameId);\n    \n    modifier hasGameId(uint256 _gameId) {\n         require(_gameId < games.length && games.length == gameBets.length);\n         _;\n    }\n    \n    modifier hasCoinId(uint256 _coinId) {\n         require(_coinId < 5);\n         _;\n    }\n    \n    constructor(address _txFeeReceiver) public {\n        require(address(0) != _txFeeReceiver);\n        txFeeReceiver = _txFeeReceiver;\n        \n        //OAR = OraclizeAddrResolverI(0x0BffB729b30063E53A341ba6a05dfE8f817E7a53);\n        //emit LogAddr(oraclize_cbAddress());\n    }\n    \n    function packedCommonData() \n        public \n        view \n        returns (address _txFeeReceiver\n            , uint256 _minimumBets\n            , uint256 _hiddenTimeLengthBeforeClose\n            , uint256 _claimAwardTimeAfterClose\n            , uint256 _claimRefundTimeAfterColose\n            , uint256 _maximumFetchingTimeForEndExRate\n            , uint256 _numberOfGames)\n    {\n        _txFeeReceiver = txFeeReceiver;\n        _minimumBets = MIN_BET;\n        _hiddenTimeLengthBeforeClose = HIDDEN_TIME_BEFORE_CLOSE;\n        _claimAwardTimeAfterClose = CLAIM_AWARD_TIME_AFTER_CLOSE;\n        _claimRefundTimeAfterColose = CLAIM_REFUND_TIME_AFTER_CLOSE;\n        _maximumFetchingTimeForEndExRate = MAX_FETCHING_TIME_FOR_END_EXRATE;\n        _numberOfGames = games.length;\n    }\n    \n    function createNewGame(uint256 _openTime\n        , uint256 _duration\n        , string _coinName0\n        , string _coinName1\n        , string _coinName2\n        , string _coinName3\n        , string _coinName4\n        , uint8[50] _YDistribution\n        , uint8 _A\n        , uint8 _B\n        , uint16 _txFee\n        , uint256 _minDiffBets) onlyOwner public\n    {\n        // Check inputs.\n        require(_A <= 100 && _B <= 100 && _A + _B <= 100);\n        \n        require(_YDistribution[0] <= 100);\n        require(_YDistribution[1] <= 100);\n        require(_YDistribution[2] <= 100);\n        require(_YDistribution[3] <= 100);\n        require(_YDistribution[4] <= 100);\n        require(_YDistribution[5] <= 100);\n        require(_YDistribution[6] <= 100);\n        require(_YDistribution[7] <= 100);\n        require(_YDistribution[8] <= 100);\n        require(_YDistribution[9] <= 100);\n        require(_YDistribution[10] <= 100);\n        require(_YDistribution[11] <= 100);\n        require(_YDistribution[12] <= 100);\n        require(_YDistribution[13] <= 100);\n        require(_YDistribution[14] <= 100);\n        require(_YDistribution[15] <= 100);\n        require(_YDistribution[16] <= 100);\n        require(_YDistribution[17] <= 100);\n        require(_YDistribution[18] <= 100);\n        require(_YDistribution[19] <= 100);\n        require(_YDistribution[20] <= 100);\n        require(_YDistribution[21] <= 100);\n        require(_YDistribution[22] <= 100);\n        require(_YDistribution[23] <= 100);\n        require(_YDistribution[24] <= 100);\n        require(_YDistribution[25] <= 100);\n        require(_YDistribution[26] <= 100);\n        require(_YDistribution[27] <= 100);\n        require(_YDistribution[28] <= 100);\n        require(_YDistribution[29] <= 100);\n        require(_YDistribution[30] <= 100);\n        require(_YDistribution[31] <= 100);\n        require(_YDistribution[32] <= 100);\n        require(_YDistribution[33] <= 100);\n        require(_YDistribution[34] <= 100);\n        require(_YDistribution[35] <= 100);\n        require(_YDistribution[36] <= 100);\n        require(_YDistribution[37] <= 100);\n        require(_YDistribution[38] <= 100);\n        require(_YDistribution[39] <= 100);\n        require(_YDistribution[40] <= 100);\n        require(_YDistribution[41] <= 100);\n        require(_YDistribution[42] <= 100);\n        require(_YDistribution[43] <= 100);\n        require(_YDistribution[44] <= 100);\n        require(_YDistribution[45] <= 100);\n        require(_YDistribution[46] <= 100);\n        require(_YDistribution[47] <= 100);\n        require(_YDistribution[48] <= 100);\n        require(_YDistribution[49] <= 100);\n        \n        require(_openTime >= now);\n        require(_duration > 0);\n        \n        require(_txFee <= 1000); // < 100%\n        \n        if (0 != games.length) {\n            GameLogic.State state = GameLogic.state(games[games.length - 1]\n                , gameBets[games.length - 1]);\n            require(GameLogic.State.Closed == state || GameLogic.State.Error == state);\n        }\n        \n        // Create new game data.\n        games.length++;\n        gameBets.length++;\n        \n        GameLogic.Instance storage game = games[games.length - 1];\n        \n        game.id = games.length - 1;\n        game.openTime = _openTime;\n        game.closeTime = _openTime + _duration - 1;\n        game.duration = _duration;\n        game.hiddenTimeBeforeClose = HIDDEN_TIME_BEFORE_CLOSE;\n        game.claimTimeAfterClose = CLAIM_AWARD_TIME_AFTER_CLOSE\n            | (CLAIM_REFUND_TIME_AFTER_CLOSE << 128);\n        game.maximumFetchingTimeForEndExRate = MAX_FETCHING_TIME_FOR_END_EXRATE;\n        \n        game.coins[0].name = _coinName0;\n        game.coins[1].name = _coinName1;\n        game.coins[2].name = _coinName2;\n        game.coins[3].name = _coinName3;\n        game.coins[4].name = _coinName4;\n        \n        game.YDistribution = _YDistribution;\n        game.A = _A;\n        game.B = _B;\n        game.txFee = _txFee;\n        game.minDiffBets = _minDiffBets;\n        game.isFinished = false;\n        game.isYChoosed = false;\n        \n        emit GameCreated(game.id);\n    }\n    \n    function gamePackedCommonData(uint256 _gameId)\n        hasGameId(_gameId)\n        public\n        view\n        returns (uint256 openTime\n            , uint256 closeTime\n            , uint256 duration\n            , uint8[50] YDistribution\n            , uint8 Y\n            , uint8 A\n            , uint8 B\n            , uint8 state\n            , uint8 winnerMasks\n            , uint16 txFee\n            , uint256 minDiffBets)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        openTime = game.openTime;\n        closeTime = game.closeTime;\n        duration = game.duration;\n        YDistribution = game.YDistribution;\n        Y = game.Y;\n        A = game.A;\n        B = game.B;\n        state = uint8(GameLogic.state(game, bets));\n        txFee = game.txFee;\n        minDiffBets = game.minDiffBets;\n        \n        winnerMasks = gameWinnerMask(_gameId);\n    }\n    \n    function gameWinnerMask(uint256 _gameId)\n        hasGameId(_gameId)\n        public\n        view\n        returns (uint8 winnerMasks)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        \n        winnerMasks = 0;\n        for (_gameId = 0; _gameId < game.winnerCoinIds.length; ++_gameId) {\n            winnerMasks |= uint8(1 << game.winnerCoinIds[_gameId]);\n        }\n    }\n    \n    \n    function gameCoinData(uint256 _gameId, uint256 _coinId)\n        hasGameId(_gameId)\n        hasCoinId(_coinId)\n        public \n        view \n        returns (string name, int32 startExRate, uint256 timeStampOfStartExRate\n                 , int32 endExRate, uint256 timeStampOfEndExRate)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        \n        name = game.coins[_coinId].name;\n        startExRate = int32(game.coins[_coinId].startExRate);\n        timeStampOfStartExRate = game.coins[_coinId].timeStampOfStartExRate;\n        endExRate = int32(game.coins[_coinId].endExRate);\n        timeStampOfEndExRate = game.coins[_coinId].timeStampOfEndExRate;\n    }\n    \n    function gamePackedCoinData(uint256 _gameId)\n        hasGameId(_gameId)\n        public \n        view \n        returns (bytes32[5] encodedName\n            , uint256[5] timeStampOfStartExRate\n            , uint256[5] timeStampOfEndExRate\n            , int32[5] startExRate\n            , int32[5] endExRate)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        \n        for (uint256 i = 0 ; i < 5; ++i) {\n            encodedName[i] = GameLogic.encodeCoinName(game.coins[i].name);\n            startExRate[i] = int32(game.coins[i].startExRate);\n            timeStampOfStartExRate[i] = game.coins[i].timeStampOfStartExRate;\n            endExRate[i] = int32(game.coins[i].endExRate);\n            timeStampOfEndExRate[i] = game.coins[i].timeStampOfEndExRate;\n        }\n    }\n    \n    function gameBetData(uint256 _gameId, uint256 _coinId)\n        hasGameId(_gameId)\n        hasCoinId(_coinId)\n        public \n        view \n        returns (uint256 totalBets, uint256 largestBets, uint256 numberOfBets)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        if (!GameLogic.isBetInformationHidden(game)) {\n            GameLogic.CoinBets storage c = bets.coinbets[_coinId];\n            totalBets = c.totalBetAmount;\n            numberOfBets = c.bets.length;\n            largestBets = c.largestBetAmount;\n        }\n    }\n    \n    function gamePackedBetData(uint256 _gameId)\n        hasGameId(_gameId)\n        public \n        view \n        returns (uint256[5] totalBets\n            , uint256[5] largestBets\n            , uint256[5] numberOfBets)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        for (uint256 i = 0; i < 5; ++i) {\n            if (GameLogic.isBetInformationHidden(game)) {\n                totalBets[i] = largestBets[i] = numberOfBets[i] = 0;\n            } else {\n                GameLogic.CoinBets storage c = bets.coinbets[i];\n                \n                totalBets[i] = c.totalBetAmount;\n                largestBets[i] = c.largestBetAmount;\n                numberOfBets[i] = c.bets.length;\n            }\n        }\n    }\n    \n    function numberOfGames() public view returns (uint256) {\n        return games.length;\n    }\n    \n    function gameNumberOfWinnerCoinIds(uint256 _gameId) \n        hasGameId(_gameId)\n        public \n        view \n        returns (uint256)\n    {\n        return games[_gameId].winnerCoinIds.length;\n    }\n    \n    function gameWinnerCoinIds(uint256 _gameId, uint256 _winnerId) \n        hasGameId(_gameId)\n        public\n        view\n        returns (uint256)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        require(_winnerId < game.winnerCoinIds.length);\n        \n        return game.winnerCoinIds[_winnerId];\n    }\n    \n    function gameState(uint256 _gameId) public view returns (GameLogic.State) {\n        if (_gameId < games.length) {\n            return GameLogic.state(games[_gameId], gameBets[_gameId]);\n        } else {\n            return GameLogic.State.NotExists;\n        }\n    }\n    \n    function isBetInformationHidden(uint256 _gameId) \n        hasGameId(_gameId)\n        public\n        view\n        returns (bool)\n    {\n        return GameLogic.isBetInformationHidden(games[_gameId]);\n    }\n    \n    function bet(uint256 _gameId, uint256 _coinId) \n        hasGameId(_gameId)\n        hasCoinId(_coinId)\n        public \n        payable\n    {\n        require(msg.value >= MIN_BET);\n        \n        GameLogic.Instance storage game = games[_gameId];\n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        GameLogic.bet(game, bets, _coinId, txFeeReceiver);\n    }\n    \n    function fetchStartExRate(uint256 _gameId) \n        hasGameId(_gameId)\n        onlyOwner\n        public\n    {\n        // Check the game state.\n        GameLogic.Instance storage game = games[_gameId];\n        require(GameLogic.state(game, gameBets[_gameId]) == GameLogic.State.Created);\n        \n        // Check the tx fee amount.\n        require(address(this).balance >= oraclizeFee);\n        \n        // Query all start exchange rate.\n        string memory url;\n        bytes32 queryId;\n        \n        for (uint256 i = 0; i < 5; ++i) {\n            url = strConcat(\"json(https://api.binance.com/api/v3/ticker/price?symbol=\", game.coins[i].name, \"USDT).price\");\n            queryId = _doOraclizeQuery(url);\n            queryRecords[queryId] = QueryRecord(RecordType.StartExRate, game.id, i);\n        }\n    }    \n    \n    function fetchEndExRate(uint256 _gameId) \n        hasGameId(_gameId)\n        onlyOwner\n        public \n    {\n        // Check the game state.\n        GameLogic.Instance storage game = games[_gameId];\n        require(GameLogic.state(game, gameBets[_gameId]) == GameLogic.State.Stop);\n        \n        // Check the tx fee amount.\n        require(address(this).balance >= oraclizeFee);\n        \n        // Query all end exchange rate.\n        string memory url;\n        bytes32 queryId;\n        \n        for (uint256 i = 0; i < 5; ++i) {\n            url = strConcat(\"json(https://api.binance.com/api/v3/ticker/price?symbol=\", game.coins[i].name, \"USDT).price\");\n            queryId = _doOraclizeQuery(url);\n            queryRecords[queryId] = QueryRecord(RecordType.EndExRate, game.id, i);\n        }\n        \n        // Query rand y.\n        queryId = _doOraclizeQuery(\"https://www.random.org/integers/?num=1&min=0&max=49&col=1&base=10&format=plain&rnd=new\");\n        queryRecords[queryId] = QueryRecord(RecordType.RandY, game.id, 0);\n    }\n    \n    function close(uint256 _gameId) \n        hasGameId(_gameId)\n        onlyOwner \n        public\n        returns (bool)\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        GameLogic.GameBets storage bets = gameBets[_gameId];\n            \n        require(GameLogic.state(game, bets) == GameLogic.State.WaitToClose);\n        \n        if (0 != bets.totalAwards) {\n            GameLogic.tryClose(game, bets);\n        }\n\n        if (game.isFinished) {\n            GameLogic.calculateAwardForCoin(game, bets, bets.totalAwards);\n            emit GameClosed(_gameId);\n        } else {\n            game.Y = 0;\n            game.isYChoosed = false;\n            game.coins[0].endExRate = 0;\n            game.coins[1].endExRate = 0;\n            game.coins[2].endExRate = 0;\n            game.coins[3].endExRate = 0;\n            game.coins[4].endExRate = 0;\n            game.coins[0].timeStampOfEndExRate = 0;\n            game.coins[1].timeStampOfEndExRate = 0;\n            game.coins[2].timeStampOfEndExRate = 0;\n            game.coins[3].timeStampOfEndExRate = 0;\n            game.coins[4].timeStampOfEndExRate = 0;\n            \n            // ((now - open) / duration + 1) * duration + open - 1;\n            game.closeTime = now.sub(game.openTime).div(game.duration).add(1).mul(game.duration).add(game.openTime).sub(1);\n            emit GameExtended(_gameId, game.closeTime);\n        }\n        \n        return game.isFinished;\n    }\n    \n    function calculateAwardAmount(uint256 _gameId) \n        hasGameId(_gameId)\n        public\n        view\n        returns (uint256)\n    {\n        GameLogic.State queryGameState = gameState(_gameId);\n        if (GameLogic.State.Closed == queryGameState) {\n            GameLogic.Instance storage game = games[_gameId];\n            GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n            return GameLogic.calculateAwardAmount(game, bets);\n        } else {\n            return 0;\n        }\n    }\n    \n    function calculateRefund(uint256 _gameId) \n        hasGameId(_gameId)\n        public\n        view\n        returns (uint256)\n    {\n        GameLogic.State queryGameState = gameState(_gameId);\n        if (GameLogic.State.Error == queryGameState) {\n            GameLogic.Instance storage game = games[_gameId];\n            GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n            return GameLogic.calculateRefundAmount(game, bets);\n        } else {\n            return 0;\n        }\n    }\n    \n    function getAwards(uint256 _gameId) hasGameId(_gameId) public {\n        uint256 amount = calculateAwardAmount(_gameId);\n        if (0 < amount) {\n            GameLogic.GameBets storage bets = gameBets[_gameId];\n            require(bets.totalAwards.sub(bets.claimedAwards) >= amount);\n            \n            bets.isAwardTransfered[msg.sender] = true;\n            bets.claimedAwards = bets.claimedAwards.add(amount);\n            \n            msg.sender.transfer(amount);\n            emit SendAwards(_gameId, msg.sender, amount);\n        }\n    }\n    \n    function claimRefunds(uint256 _gameId) hasGameId(_gameId) public {\n        uint256 amount = calculateRefund(_gameId);\n        if (0 < amount) {\n            GameLogic.GameBets storage bets = gameBets[_gameId];\n            \n            bets.isRefunded[msg.sender] = true;\n            bets.claimedRefunds = bets.claimedRefunds.add(amount);\n            \n            msg.sender.transfer(amount);\n            emit RefundClaimed(_gameId, msg.sender, amount);\n        }\n    }\n    \n    function withdrawOraclizeFee() public onlyOwner {\n        require(address(this).balance >= oraclizeFee);\n        uint256 amount = oraclizeFee;\n        oraclizeFee = 0;\n        owner().transfer(amount);\n    }\n    \n    function getUnclaimedAward(uint256 _gameId) \n        hasGameId(_gameId) \n        onlyOwner \n        public\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        require(GameLogic.endTimeOfAwardsClaiming(game) < now);\n        \n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        uint256 amount = bets.totalAwards.sub(bets.claimedAwards);\n        bets.claimedAwards = bets.totalAwards;\n        \n        owner().transfer(amount);\n        emit GetUnclaimedAwards(_gameId, owner(), amount);\n    }\n    \n    function getUnclaimedRefunds(uint256 _gameId) \n        hasGameId(_gameId) \n        onlyOwner \n        public\n    {\n        GameLogic.Instance storage game = games[_gameId];\n        require(GameLogic.endTimeOfRefundsClaiming(game) < now);\n        \n        GameLogic.GameBets storage bets = gameBets[_gameId];\n        \n        uint256 amount = bets.totalAwards.sub(bets.claimedRefunds);\n        bets.claimedRefunds = bets.totalAwards;\n        \n        owner().transfer(amount);\n        emit GetUnclaimedRefunds(_gameId, owner(), amount);\n    }\n    \n    function sendOraclizeFee() public payable {\n        oraclizeFee = oraclizeFee.add(msg.value);\n        emit OraclizeFeeReceived(msg.value);\n    }\n    \n    function () public payable {\n        sendOraclizeFee();\n    }\n    \n    // Callback for oraclize query.\n    function __callback(bytes32 _id, string _result) public {\n        assert(msg.sender == oraclize_cbAddress());\n        \n        uint256 gameId = queryRecords[_id].gameId;\n        GameLogic.Instance storage game = games[gameId];\n        GameLogic.GameBets storage gameBet = gameBets[gameId];\n        \n        if (RecordType.RandY == queryRecords[_id].recordType) {\n            if (now <= game.closeTime.add(game.maximumFetchingTimeForEndExRate)) {\n                game.Y = game.YDistribution[parseInt(_result)];\n                game.isYChoosed = true;\n                delete queryRecords[_id];\n                emit GameYChoosed(gameId, game.Y);\n            \n                if (GameLogic.state(game, gameBet) == GameLogic.State.WaitToClose) {\n                    emit GameWaitToClose(gameId);\n                }   \n            } else {\n                delete queryRecords[_id];\n            }\n            \n        } else {\n            uint256 coinId = queryRecords[_id].arg;\n            if (RecordType.StartExRate == queryRecords[_id].recordType) {\n                if (now <= game.closeTime) {\n                    game.coins[coinId].startExRate = int256(parseInt(_result, 5));\n                    game.coins[coinId].timeStampOfStartExRate = now;\n                    \n                    delete queryRecords[_id];\n                    emit StartExRateUpdated(gameId, coinId, int32(game.coins[coinId].startExRate), now);\n                \n                    if (GameLogic.state(game, gameBet) == GameLogic.State.Ready) {\n                        emit GameReady(gameId);\n                    } else if (GameLogic.state(game, gameBet) == GameLogic.State.Open) {\n                        emit GameOpened(gameId);\n                    }\n                } else {\n                    delete queryRecords[_id];\n                }\n            } else if (RecordType.EndExRate == queryRecords[_id].recordType) {\n                if (now <= game.closeTime.add(game.maximumFetchingTimeForEndExRate)) {\n                    game.coins[coinId].endExRate = int256(parseInt(_result, 5));\n                    game.coins[coinId].timeStampOfEndExRate = now;\n                    delete queryRecords[_id];\n                    emit EndExRateUpdated(gameId, coinId, int32(game.coins[coinId].endExRate), now);\n                \n                    if (GameLogic.state(game, gameBet) == GameLogic.State.WaitToClose) {\n                        emit GameWaitToClose(gameId);\n                    }\n                } else {\n                    delete queryRecords[_id];\n                }\n            } else {\n                revert();\n            }\n        }\n    }\n    \n    function _doOraclizeQuery(string url) private returns (bytes32) {\n        uint256 fee = oraclize_getPrice(\"URL\", ORICALIZE_GAS_LIMIT);\n        require(fee <= oraclizeFee);\n        oraclizeFee = oraclizeFee.sub(fee);\n        \n        bytes32 queryId = oraclize_query(\"URL\", url, ORICALIZE_GAS_LIMIT);\n        \n        emit OraclizeFeeUsed(fee);\n        emit SentOraclizeQuery(queryId);\n        \n        return queryId;\n    }\n}\nlibrary GameLogic {\n    using SafeMath for uint256;\n\n    enum State { NotExists, Created, Ready, Open, Stop, WaitToClose, Closed, Error }\n    enum CompareResult { Equal, Less, Greater }\n\n    struct Bets {\n        uint256 betAmount;\n        uint256 totalBetAmountByFar;\n    }\n\n    struct Coin {\n        string name;\n        int256 startExRate;\n        uint256 timeStampOfStartExRate;\n        int256 endExRate;\n        uint256 timeStampOfEndExRate;\n    }\n\n    struct CoinBets {\n        uint256 largestBetAmount;\n        uint256 numberOfLargestBetTx;\n        uint256 totalBetAmount;\n        Bets[] bets;\n        mapping (address => uint256[]) playerBetMap;\n        uint256 yThreshold;\n        uint256 awardAmountBeforeY;\n        uint256 awardAmountAfterY;\n        uint256 awardAmountForLargestBetPlayers;\n        uint256 totalBetAmountBeforeY;\n        uint256 totalBetAmountAfterY;\n    }\n\n    struct Instance {\n        uint256 id;\n        \n        uint256 openTime;\n        uint256 closeTime;\n        uint256 duration;\n        uint256 hiddenTimeBeforeClose;\n        uint256 claimTimeAfterClose;    // [0~127] award, [128~255]refunds\n        uint256 maximumFetchingTimeForEndExRate;\n        \n        uint8[50] YDistribution;\n        uint8 Y;\n        uint8 A;\n        uint8 B;\n        uint16 txFee;\n        bool isFinished;\n        bool isYChoosed;\n        uint256 minDiffBets;\n        \n        uint256[] winnerCoinIds;\n        \n        Coin[5] coins;\n    }\n\n    struct GameBets {\n        CoinBets[5] coinbets;\n        mapping (address => bool) isAwardTransfered;\n        mapping (address => bool) isRefunded;\n        uint256 totalAwards;\n        uint256 claimedAwards;\n        uint256 claimedRefunds;\n    }\n    \n    event CoinBet(uint256 indexed gameId, uint256 coinId, address player, uint256 amount);\n    event CoinLargestBetChanged(uint256 indexed gameId, uint256 coinId, uint256 amount);\n    event SendTxFee(address receiver, uint256 feeAmount);\n\n    function isEndExRateAndYFetched(Instance storage game) \n        public\n        view\n        returns (bool)\n    {\n        return (0 != game.coins[0].endExRate && \n                0 != game.coins[1].endExRate &&\n                0 != game.coins[2].endExRate &&\n                0 != game.coins[3].endExRate &&\n                0 != game.coins[4].endExRate &&\n                game.isYChoosed);\n    }\n\n    function isStartExRateFetched(Instance storage game) \n        public\n        view\n        returns (bool)\n    {\n        return (0 != game.coins[0].startExRate && \n                0 != game.coins[1].startExRate &&\n                0 != game.coins[2].startExRate &&\n                0 != game.coins[3].startExRate &&\n                0 != game.coins[4].startExRate);\n    }\n\n    function state(Instance storage game, GameBets storage bets) \n        public \n        view \n        returns (State)\n    {\n        if (game.isFinished) {\n            return State.Closed;\n        } else if (now > game.closeTime.add(game.maximumFetchingTimeForEndExRate)) {\n            if (!isEndExRateAndYFetched(game)) {\n                return State.Error;\n            } else {\n                return State.WaitToClose;\n            }\n        } else if (now > game.closeTime) {\n            if (!isStartExRateFetched(game)) {\n                return State.Error;\n            } else if (isEndExRateAndYFetched(game) || 0 == bets.totalAwards) {\n                return State.WaitToClose;\n            } else {\n                return State.Stop;\n            }\n        } else {\n            if (isStartExRateFetched(game)) {\n                if (now >= game.openTime) {\n                    return State.Open;\n                } else {\n                    return State.Ready;\n                }\n            } else {\n                return State.Created;\n            }\n        }\n    }\n\n    function tryClose(Instance storage game, GameBets storage bets)\n        public \n        returns (bool) \n    {\n        require(state(game, bets) == State.WaitToClose);\n        \n        uint256 largestIds = 0;\n        uint256 smallestIds = 0;\n        uint256 otherIds = 0;\n        \n        uint256 i = 0;\n        CompareResult result;\n        for (; i < 5; ++i) {\n            // Remove the orphan coins which no one has bet.\n            if (bets.coinbets[i].totalBetAmount == 0) {\n                continue;\n            }\n            \n            // Compare with the largest coin id.\n            if (0 == (largestIds & 0x7)) {\n                largestIds = i + 1;\n                continue;\n            } else {\n                result = compare(game.coins[(largestIds & 0x7) - 1], game.coins[i]);\n                if (CompareResult.Equal == result) {\n                    largestIds = pushToLargestOrSmallestIds(bets, largestIds, i);\n                    continue;\n                } else if (CompareResult.Less == result) {\n                    if (0 == (smallestIds & 0x7)) {\n                        smallestIds = largestIds;\n                    } else {\n                        otherIds = pushToOtherIds(bets, otherIds, largestIds);\n                    }\n                    \n                    largestIds = i + 1;\n                    continue;\n                }\n            }\n            \n            // Compare with the smallest coin id.\n            if (0 == (smallestIds & 0x7)) {\n                smallestIds = i + 1;\n                continue;\n            } else {\n                result = compare(game.coins[(smallestIds & 0x7) - 1], game.coins[i]);\n                if (CompareResult.Equal == result) {\n                    smallestIds = pushToLargestOrSmallestIds(bets, smallestIds, i);\n                    continue;\n                } else if (CompareResult.Greater == result) {\n                    if (0 == (largestIds & 0x7)) {\n                        largestIds = smallestIds;\n                    } else {\n                        otherIds = pushToOtherIds(bets, otherIds, smallestIds);\n                    }\n                        \n                    smallestIds = i + 1;\n                    continue;\n                }\n            }\n            \n            // Assign to 'other' group.\n            otherIds = pushToOtherIds(bets, otherIds, i + 1);\n        }\n        \n        // Choose winners.\n        require(otherIds < 512);\n        \n        if (smallestIds == 0) {\n            if (largestIds != 0) {\n                game.isFinished = true;\n                convertTempIdsToWinnerIds(game, largestIds);\n                return true;\n            } else {\n                return false;\n            }\n        }\n        \n        i = bets.coinbets[(largestIds & 0x7) - 1].largestBetAmount;\n        uint256 j = bets.coinbets[(smallestIds & 0x7) - 1].largestBetAmount;\n        \n        // Compare largest and smallest group.\n        if (i > j.add(game.minDiffBets)) {\n            game.isFinished = true;\n            convertTempIdsToWinnerIds(game, largestIds);\n        } else if (j > i.add(game.minDiffBets)) {\n            game.isFinished = true;\n            convertTempIdsToWinnerIds(game, smallestIds);\n        } else {\n            // Compare other group.\n            if (otherIds < 8 && otherIds != 0) {\n                // sole winner.\n                game.isFinished = true;\n                convertTempIdsToWinnerIds(game, otherIds);\n            } else if (otherIds >= 8) {\n\t\t\t\t// compare.\n\t\t\t\ti = bets.coinbets[(otherIds & 0x7) - 1].totalBetAmount;\n\t\t\t\tj = bets.coinbets[((otherIds >> 3) & 0x7) - 1].totalBetAmount;\n\n\t\t\t\tif (i > j + game.minDiffBets) {\n\t\t\t\t\tgame.isFinished = true;\n\t\t\t\t\tconvertTempIdsToWinnerIds(game, otherIds & 0x7);\n\t\t\t\t} \n\t\t\t}\n        }\n        \n        return game.isFinished;\n    }\n\n    function bet(Instance storage game, GameBets storage gameBets, uint256 coinId, address txFeeReceiver)\n        public \n    {\n        require(coinId < 5);\n        require(state(game, gameBets) == State.Open);\n        require(address(0) != txFeeReceiver && address(this) != txFeeReceiver);\n        \n        uint256 txFeeAmount = msg.value.mul(game.txFee).div(1000);\n        if (0 < txFeeAmount) {\n            txFeeReceiver.transfer(txFeeAmount);\n            emit SendTxFee(txFeeReceiver, txFeeAmount);\n        }\n        \n        CoinBets storage c = gameBets.coinbets[coinId];\n        \n        c.bets.length++;\n        Bets storage b = c.bets[c.bets.length - 1];\n        b.betAmount = msg.value.sub(txFeeAmount);\n        \n        c.totalBetAmount = b.betAmount.add(c.totalBetAmount);\n        b.totalBetAmountByFar = c.totalBetAmount;\n        gameBets.totalAwards =  gameBets.totalAwards.add(b.betAmount);\n        \n        c.playerBetMap[msg.sender].push(c.bets.length - 1);\n        \n        if (b.betAmount > c.largestBetAmount) {\n            c.largestBetAmount = b.betAmount;\n            c.numberOfLargestBetTx = 1;\n            \n            emit CoinLargestBetChanged(game.id, coinId, b.betAmount);\n            \n        } else if (b.betAmount == c.largestBetAmount) {\n            ++c.numberOfLargestBetTx;\n        }\n        \n        emit CoinBet(game.id, coinId, msg.sender, b.betAmount);\n    }\n\n    function isBetInformationHidden(Instance storage game) \n        public \n        view \n        returns (bool)\n    {\n        return now <= game.closeTime \n            && now.add(game.hiddenTimeBeforeClose) > game.closeTime;\n    }\n\n    function calculateAwardForCoin(Instance storage game\n        , GameBets storage bets\n        , uint256 awardAmount\n    ) \n        public\n    {\n        require(state(game, bets) == State.Closed);\n        awardAmount = awardAmount.div(game.winnerCoinIds.length);\n        \n        for (uint256 i = 0; i < game.winnerCoinIds.length; ++i) {\n            CoinBets storage c = bets.coinbets[game.winnerCoinIds[i]];\n            require(c.bets.length > 0);\n            \n            c.yThreshold = c.bets.length.mul(uint256(game.Y)).div(100);\n            if (c.yThreshold.mul(100) < c.bets.length.mul(uint256(game.Y))) {\n                ++c.yThreshold;\n            }\n            \n            c.awardAmountAfterY = awardAmount.mul(game.B).div(100);\n           \n            if (c.yThreshold == 0) {\n                c.awardAmountBeforeY = 0;\n                c.totalBetAmountBeforeY = 0;\n            } else if (c.bets.length == 1) {\n                c.awardAmountBeforeY = awardAmount;\n                c.awardAmountAfterY = 0;\n                c.totalBetAmountBeforeY = c.totalBetAmount;\n            } else {\n                c.awardAmountBeforeY = awardAmount.mul(game.A).div(100);\n                c.totalBetAmountBeforeY = c.bets[c.yThreshold - 1].totalBetAmountByFar;\n            }\n            \n            c.awardAmountForLargestBetPlayers = awardAmount\n                .sub(c.awardAmountBeforeY)\n                .sub(c.awardAmountAfterY)\n                .div(c.numberOfLargestBetTx);\n            \n            c.totalBetAmountAfterY = c.totalBetAmount.sub(c.totalBetAmountBeforeY);\n        }\n    }\n\n    function calculateAwardAmount(Instance storage game, GameBets storage bets)\n        public \n        view \n        returns (uint256 amount)\n    {\n        require(state(game, bets) == State.Closed);\n        require(0 < game.winnerCoinIds.length);\n        \n        if (bets.isAwardTransfered[msg.sender]) {\n            return 0;\n        } else if (endTimeOfAwardsClaiming(game) < now) {\n            return 0;\n        }\n    \n        amount = 0;\n        \n        for (uint256 i = 0; i < game.winnerCoinIds.length; ++i) {\n            CoinBets storage c = bets.coinbets[game.winnerCoinIds[i]];\n            uint256[] storage betIdList = c.playerBetMap[msg.sender];\n            \n            for (uint256 j = 0; j < betIdList.length; ++j) {\n                Bets storage b = c.bets[betIdList[j]];\n                if (betIdList[j] < c.yThreshold) {\n                    amount = amount.add(\n                        c.awardAmountBeforeY.mul(b.betAmount).div(c.totalBetAmountBeforeY));\n                } else {\n                    amount = amount.add(\n                        c.awardAmountAfterY.mul(b.betAmount).div(c.totalBetAmountAfterY));\n                }\n                \n                if (b.betAmount == c.largestBetAmount) {\n                    amount = amount.add(c.awardAmountForLargestBetPlayers);\n                }\n            }\n        }\n    }\n\n    function calculateRefundAmount(Instance storage game, GameBets storage bets)\n        public \n        view \n        returns (uint256 amount)\n    {\n        require(state(game, bets) == State.Error);\n        amount = 0;\n        \n        if (bets.isRefunded[msg.sender]) {\n            return 0;\n        } else if (endTimeOfRefundsClaiming(game) < now) {\n            return 0;\n        }\n        \n        for (uint256 i = 0; i < 5; ++i) {\n            CoinBets storage c = bets.coinbets[i];\n            uint256[] storage betIdList = c.playerBetMap[msg.sender];\n            \n            for (uint256 j = 0; j < betIdList.length; ++j) {\n                Bets storage b = c.bets[betIdList[j]];\n                amount = amount.add(b.betAmount);\n            }\n        }\n    }\n\n    function compare(Coin storage coin0, Coin storage coin1) \n        public\n        view\n        returns (CompareResult)\n    {\n        int256 value0 = (coin0.endExRate - coin0.startExRate) * coin1.startExRate;\n        int256 value1 = (coin1.endExRate - coin1.startExRate) * coin0.startExRate;\n        \n        if (value0 == value1) {\n            return CompareResult.Equal;\n        } else if (value0 < value1) {\n            return CompareResult.Less;\n        } else {\n            return CompareResult.Greater;\n        }\n    }\n\n    function pushToLargestOrSmallestIds(GameBets storage bets\n        , uint256 currentIds\n        , uint256 newId\n    )\n        public\n        view\n        returns (uint256)\n    {\n        require(currentIds < 2048); // maximum capacity is 5.\n    \n        if (currentIds == 0) {\n            return newId + 1;\n        } else {\n            uint256 id = (currentIds & 0x7) - 1;\n            if (bets.coinbets[newId].largestBetAmount >= bets.coinbets[id].largestBetAmount) {\n                return (currentIds << 3) | (newId + 1);\n            } else {\n                return (id + 1) | (pushToLargestOrSmallestIds(bets, currentIds >> 3, newId) << 3);\n            }\n        }\n    }\n\n    function pushToOtherIds(GameBets storage bets, uint256 currentIds, uint256 newIds)\n        public\n        view\n        returns (uint256)\n    {\n        require(currentIds < 2048);\n        require(newIds < 2048 && newIds > 0);\n    \n        if (newIds >= 8) {\n            return pushToOtherIds(bets\n                , pushToOtherIds(bets, currentIds, newIds >> 3)\n                , newIds & 0x7);\n        } else {\n            if (currentIds == 0) {\n                return newIds;\n            } else {\n                uint256 id = (currentIds & 0x7) - 1;\n                if (bets.coinbets[newIds - 1].totalBetAmount >= bets.coinbets[id].totalBetAmount) {\n                    return (currentIds << 3) | newIds;\n                } else {\n                    return (id + 1) | (pushToOtherIds(bets, currentIds >> 3, newIds) << 3);\n                }\n            }\n        }\n    }\n\n    function convertTempIdsToWinnerIds(Instance storage game, uint256 ids) public\n    {\n        if (ids > 0) {\n            game.winnerCoinIds.push((ids & 0x7) - 1);\n            convertTempIdsToWinnerIds(game, ids >> 3);\n        }\n    }\n\n    function utf8ToUint(byte char) public pure returns (uint256) {\n        uint256 utf8Num = uint256(char);\n        if (utf8Num > 47 && utf8Num < 58) {\n            return utf8Num;\n        } else if (utf8Num > 64 && utf8Num < 91) {\n            return utf8Num;\n        } else {\n            revert();\n        }\n    }\n\n    function encodeCoinName(string str) pure public returns (bytes32) {\n        bytes memory bString = bytes(str);\n        require(bString.length <= 32);\n        \n        uint256 retVal = 0;\n        uint256 offset = 248;\n        for (uint256 i = 0; i < bString.length; ++i) {\n            retVal |= utf8ToUint(bString[i]) << offset;\n            offset -= 8;\n        }\n        return bytes32(retVal);\n    }\n    \n    function endTimeOfAwardsClaiming(Instance storage game) \n        view \n        public \n        returns (uint256)\n    {\n        return game.closeTime.add(game.claimTimeAfterClose & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n    }\n    \n    function endTimeOfRefundsClaiming(Instance storage game) \n        view \n        public \n        returns (uint256)\n    {\n        return  game.closeTime.add(game.claimTimeAfterClose >> 128);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"txFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"fetchStartExRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"packedCommonData\",\"outputs\":[{\"name\":\"_txFeeReceiver\",\"type\":\"address\"},{\"name\":\"_minimumBets\",\"type\":\"uint256\"},{\"name\":\"_hiddenTimeLengthBeforeClose\",\"type\":\"uint256\"},{\"name\":\"_claimAwardTimeAfterClose\",\"type\":\"uint256\"},{\"name\":\"_claimRefundTimeAfterColose\",\"type\":\"uint256\"},{\"name\":\"_maximumFetchingTimeForEndExRate\",\"type\":\"uint256\"},{\"name\":\"_numberOfGames\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"openTime\",\"type\":\"uint256\"},{\"name\":\"closeTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"hiddenTimeBeforeClose\",\"type\":\"uint256\"},{\"name\":\"claimTimeAfterClose\",\"type\":\"uint256\"},{\"name\":\"maximumFetchingTimeForEndExRate\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint8\"},{\"name\":\"A\",\"type\":\"uint8\"},{\"name\":\"B\",\"type\":\"uint8\"},{\"name\":\"txFee\",\"type\":\"uint16\"},{\"name\":\"isFinished\",\"type\":\"bool\"},{\"name\":\"isYChoosed\",\"type\":\"bool\"},{\"name\":\"minDiffBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"isBetInformationHidden\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"claimRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gamePackedCommonData\",\"outputs\":[{\"name\":\"openTime\",\"type\":\"uint256\"},{\"name\":\"closeTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"YDistribution\",\"type\":\"uint8[50]\"},{\"name\":\"Y\",\"type\":\"uint8\"},{\"name\":\"A\",\"type\":\"uint8\"},{\"name\":\"B\",\"type\":\"uint8\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"winnerMasks\",\"type\":\"uint8\"},{\"name\":\"txFee\",\"type\":\"uint16\"},{\"name\":\"minDiffBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_coinName0\",\"type\":\"string\"},{\"name\":\"_coinName1\",\"type\":\"string\"},{\"name\":\"_coinName2\",\"type\":\"string\"},{\"name\":\"_coinName3\",\"type\":\"string\"},{\"name\":\"_coinName4\",\"type\":\"string\"},{\"name\":\"_YDistribution\",\"type\":\"uint8[50]\"},{\"name\":\"_A\",\"type\":\"uint8\"},{\"name\":\"_B\",\"type\":\"uint8\"},{\"name\":\"_txFee\",\"type\":\"uint16\"},{\"name\":\"_minDiffBets\",\"type\":\"uint256\"}],\"name\":\"createNewGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_AWARD_TIME_AFTER_CLOSE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIDDEN_TIME_BEFORE_CLOSE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclizeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gameState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOraclizeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_REFUND_TIME_AFTER_CLOSE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_coinId\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_coinId\",\"type\":\"uint256\"}],\"name\":\"gameBetData\",\"outputs\":[{\"name\":\"totalBets\",\"type\":\"uint256\"},{\"name\":\"largestBets\",\"type\":\"uint256\"},{\"name\":\"numberOfBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queryRecords\",\"outputs\":[{\"name\":\"recordType\",\"type\":\"uint8\"},{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"arg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_coinId\",\"type\":\"uint256\"}],\"name\":\"gameCoinData\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"startExRate\",\"type\":\"int32\"},{\"name\":\"timeStampOfStartExRate\",\"type\":\"uint256\"},{\"name\":\"endExRate\",\"type\":\"int32\"},{\"name\":\"timeStampOfEndExRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getAwards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedAward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"calculateRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"fetchEndExRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORICALIZE_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FETCHING_TIME_FOR_END_EXRATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gameWinnerMask\",\"outputs\":[{\"name\":\"winnerMasks\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gamePackedBetData\",\"outputs\":[{\"name\":\"totalBets\",\"type\":\"uint256[5]\"},{\"name\":\"largestBets\",\"type\":\"uint256[5]\"},{\"name\":\"numberOfBets\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gameNumberOfWinnerCoinIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_winnerId\",\"type\":\"uint256\"}],\"name\":\"gameWinnerCoinIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"calculateAwardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gamePackedCoinData\",\"outputs\":[{\"name\":\"encodedName\",\"type\":\"bytes32[5]\"},{\"name\":\"timeStampOfStartExRate\",\"type\":\"uint256[5]\"},{\"name\":\"timeStampOfEndExRate\",\"type\":\"uint256[5]\"},{\"name\":\"startExRate\",\"type\":\"int32[5]\"},{\"name\":\"endExRate\",\"type\":\"int32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendOraclizeFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_txFeeReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"int32\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"StartExRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"int32\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"EndExRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Y\",\"type\":\"uint8\"}],\"name\":\"GameYChoosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinLargestBetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"awards\",\"type\":\"uint256\"}],\"name\":\"SendAwards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"OraclizeFeeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"used\",\"type\":\"uint256\"}],\"name\":\"OraclizeFeeUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"SentOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SendTxFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"GetUnclaimedAwards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"GetUnclaimedRefunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"closeTime\",\"type\":\"uint256\"}],\"name\":\"GameExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameWaitToClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405267016345785d8a0000600b5561012c600c556201d4c0600d5562278d00600e55615460600f55612a3060105534801561003c57600080fd5b50604051602080620050f2833981016040525160008054600160a060020a03191633179055600160a060020a038116151561007657600080fd5b60098054600160a060020a031916600160a060020a039290921691909117905561504c80620000a66000396000f3006080604052600436106101df5763ffffffff60e060020a6000350416630469effb81146101e95780630aebeb4e1461021a5780630d324348146102465780630ec0a5d71461025e578063117a5b90146102b55780631872a93f14610348578063191012091461036057806327dc297e1461037857806328307d77146103d65780632d8c5f561461047e57806330e64fdb1461061957806334a0d1581461063157806338bbfa501461065857806342c4c3d4146106f45780634c6226fc146107095780634e0e1a3e1461071e57806355b7c64d1461075a5780636540742f1461076f578063688e816d146107845780636ffcc71914610799578063715018a6146107a757806373dcdb53146107bc57806389649688146107f55780638da5cb5b1461083f5780638f32d59b1461085457806396e8d80c1461086957806398a73afa14610924578063a0d1be721461093c578063a8c6acda14610954578063af5cb30c1461096c578063aff61df014610984578063b0beec5614610999578063ccf0e080146109ae578063cfa526bc146109dc578063d2422a4414610a84578063d754b78814610a9c578063da7721e314610ab7578063db73c31d14610acf578063eca1e6fe146101df578063f2fde38b14610bcf578063f692807014610bf0575b6101e7610c05565b005b3480156101f557600080fd5b506101fe610c50565b60408051600160a060020a039092168252519081900360200190f35b34801561022657600080fd5b50610232600435610c5f565b604080519115158252519081900360200190f35b34801561025257600080fd5b506101e7600435610fd0565b34801561026a57600080fd5b506102736112c0565b60408051600160a060020a0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156102c157600080fd5b506102cd6004356112ee565b604080519e8f5260208f019d909d528d8d019b909b5260608d019990995260808c019790975260a08b019590955260c08a019390935260ff91821660e08a015281166101008901521661012087015261ffff16610140860152151561016085015215156101808401526101a083015251908190036101c00190f35b34801561035457600080fd5b50610232600435611385565b34801561036c57600080fd5b506101e760043561144a565b34801561038457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101e79583359536956044949193909101919081908401838280828437509497506115489650505050505050565b3480156103e257600080fd5b506103ee600435611b54565b604051808c81526020018b81526020018a815260200189603260200280838360005b83811015610428578181015183820152602001610410565b50505060ff9b8c1693909101928352505096881660208801525093861660408087019190915292861660608601529416608084015261ffff90931660a083015260c082015290519081900360e001945092505050f35b34801561048a57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101e794823594602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805161064081810190925295989796818101969550935060329250849150839080828437509396505060ff8435811695506020850135169361ffff6040820135169350606001359150611d479050565b34801561062557600080fd5b506101e7600435612543565b34801561063d57600080fd5b506106466126fd565b60408051918252519081900360200190f35b34801561066457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101e795833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506127039650505050505050565b34801561070057600080fd5b50610646612708565b34801561071557600080fd5b5061064661270e565b34801561072a57600080fd5b50610736600435612714565b6040518082600781111561074657fe5b60ff16815260200191505060405180910390f35b34801561076657600080fd5b506101e76127ef565b34801561077b57600080fd5b50610646612862565b34801561079057600080fd5b50610646612868565b6101e760043560243561286e565b3480156107b357600080fd5b506101e761299a565b3480156107c857600080fd5b506107d76004356024356129f5565b60408051938452602084019290925282820152519081900360600190f35b34801561080157600080fd5b5061080d600435612b27565b6040518084600281111561081d57fe5b60ff168152602001838152602001828152602001935050505060405180910390f35b34801561084b57600080fd5b506101fe612b4c565b34801561086057600080fd5b50610232612b5c565b34801561087557600080fd5b50610884600435602435612b6d565b60405180806020018660030b60030b81526020018581526020018460030b60030b8152602001838152602001828103825287818151815260200191508051906020019080838360005b838110156108e55781810151838201526020016108cd565b50505050905090810190601f1680156109125780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561093057600080fd5b506101e7600435612cdf565b34801561094857600080fd5b506101e7600435612e02565b34801561096057600080fd5b50610646600435612f94565b34801561097857600080fd5b506101e76004356130b4565b34801561099057600080fd5b506106466133cb565b3480156109a557600080fd5b506106466133d1565b3480156109ba57600080fd5b506109c66004356133d7565b6040805160ff9092168252519081900360200190f35b3480156109e857600080fd5b506109f4600435613468565b604051808460a080838360005b83811015610a19578181015183820152602001610a01565b5050505090500183600560200280838360005b83811015610a44578181015183820152602001610a2c565b5050505090500182600560200280838360005b83811015610a6f578181015183820152602001610a57565b50505050905001935050505060405180910390f35b348015610a9057600080fd5b50610646600435613620565b348015610aa857600080fd5b5061064660043560243561366d565b348015610ac357600080fd5b506106466004356136eb565b348015610adb57600080fd5b50610ae76004356137ca565b604051808660a080838360005b83811015610b0c578181015183820152602001610af4565b5050505090500185600560200280838360005b83811015610b37578181015183820152602001610b1f565b5050505090500184600560200280838360005b83811015610b62578181015183820152602001610b4a565b5050505090500183600560200280838360005b83811015610b8d578181015183820152602001610b75565b5050505090500182600560200280838360005b83811015610bb8578181015183820152602001610ba0565b505050509050019550505050505060405180910390f35b348015610bdb57600080fd5b506101e7600160a060020a0360043516613a35565b348015610bfc57600080fd5b50610646613a54565b600a54610c18903463ffffffff613a5a16565b600a556040805134815290517f5722387d8eb62f8c108fab4654a4b94fb6d3375f1a58985e88382b165690f9ad9181900360200190a1565b600954600160a060020a031681565b60008060008360078054905081108015610c7c5750600854600754145b1515610c8757600080fd5b610c8f612b5c565b1515610c9a57600080fd5b6007805486908110610ca857fe5b90600052602060002090602502019250600885815481101515610cc757fe5b60009182526020909120603c909102019150600573d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c85856040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610d3557600080fd5b505af4158015610d49573d6000803e3d6000fd5b505050506040513d6020811015610d5f57600080fd5b50516007811115610d6c57fe5b14610d7657600080fd5b603982015415610e075773d80c5f67366bd8362cd8d85dcdbfbffdce31c30263a79a9fd484846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610dda57600080fd5b505af4158015610dee573d6000803e3d6000fd5b505050506040513d6020811015610e0457600080fd5b50505b600983015465010000000000900460ff1615610ecb5773d80c5f67366bd8362cd8d85dcdbfbffdce31c3026373b330c5848485603901546040518463ffffffff1660e060020a02815260040180848152602001838152602001828152602001935050505060006040518083038186803b158015610e8357600080fd5b505af4158015610e97573d6000803e3d6000fd5b50506040518792507f71f4c9aec1b2c51302bcaf09a3f4985709759853536445493905081899603a219150600090a2610fb8565b60098301805466ff0000000000ff191690556000600f84018190556014840181905560198401819055601e8401819055602384018190556010840181905560158401819055601a8401819055601f840181905560248401556001808401546003850154610f7b9291610f6f91610f5790610f63858383610f4b4288613a77565b9063ffffffff613a8e16565b9063ffffffff613a5a16565b9063ffffffff613ab116565b9063ffffffff613a7716565b60028401819055604080519182525186917ff42bff50b2d4e041c7d3bdb0a7934ee7210c0c43a7c82e269c259d4af2448283919081900360200190a25b50506009015465010000000000900460ff1692915050565b600060606000808460078054905081108015610fef5750600854600754145b1515610ffa57600080fd5b611002612b5c565b151561100d57600080fd5b600780548790811061101b57fe5b600091825260209091206025909102019450600173d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c8760088a81548110151561105957fe5b90600052602060002090603c02016040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156110a557600080fd5b505af41580156110b9573d6000803e3d6000fd5b505050506040513d60208110156110cf57600080fd5b505160078111156110dc57fe5b146110e657600080fd5b600a54303110156110f657600080fd5b600091505b60058210156112b85761123d606060405190810160405280603881526020017f6a736f6e2868747470733a2f2f6170692e62696e616e63652e636f6d2f61706981526020017f2f76332f7469636b65722f70726963653f73796d626f6c3d000000000000000081525086600c018460058110151561117557fe5b60050201805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156111fd5780601f106111d2576101008083540402835291602001916111fd565b820191906000526020600020905b8154815290600101906020018083116111e057829003601f168201915b50505050506040805190810160405280600b81526020017f55534454292e7072696365000000000000000000000000000000000000000000815250613adf565b935061124884613b16565b6040805160608101909152909350806000815286546020808301919091526040918201859052600086815260069091522081518154829060ff1916600183600281111561129157fe5b021790555060208201518160010155604082015181600201559050508160010191506110fb565b505050505050565b600954600b54600c54600e54600f54601054600754600160a060020a03909616969495939492939192909190565b60078054829081106112fc57fe5b6000918252602090912060259091020180546001820154600283015460038401546004850154600586015460068701546009880154600a909801549698509496939592949193909260ff80831692610100810482169262010000820483169261ffff6301000000840416926501000000000081048216926601000000000000909104909116908e565b60075460009082908110801561139e5750600854600754145b15156113a957600080fd5b73d80c5f67366bd8362cd8d85dcdbfbffdce31c302638052b65e6007858154811015156113d257fe5b90600052602060002090602502016040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561141757600080fd5b505af415801561142b573d6000803e3d6000fd5b505050506040513d602081101561144157600080fd5b50519392505050565b60008082600780549050811080156114655750600854600754145b151561147057600080fd5b61147984612f94565b9250826000101561154257600880548590811061149257fe5b600091825260208083203384526038603c9093020191820190526040909120805460ff19166001179055603b8101549092506114d4908463ffffffff613a5a16565b603b830155604051339084156108fc029085906000818181858888f19350505050158015611506573d6000803e3d6000fd5b506040805133815260208101859052815186927ff3f402280ef0a7905e124aa621b65eaeb2725c343e8b36d398ed78c29daf285c928290030190a25b50505050565b600080600080611556613c38565b600160a060020a0316331461156757fe5b60008681526006602052604090206001015460078054919550908590811061158b57fe5b906000526020600020906025020192506008848154811015156115aa57fe5b600091825260208083208984526006909152604090922054603c909102909101925060ff1660028111156115da57fe5b6002141561179e57600683015460028401546115fb9163ffffffff613a5a16565b4211611777578260070161160e86613e2d565b6032811061161857fe5b602080820492909201546009860180546601000000000000601f9094166101000a90920460ff90811660ff199384161766ff000000000000191693909317815560008a81526006855260408082208054909416845560018401829055600290930155548151921682525186927fa02034f303e5e251f3fbcc381efa9dcbcc648d3c1a09d0acad3f31626d5fc3b5928290030190a260055b73d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c85856040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561170957600080fd5b505af415801561171d573d6000803e3d6000fd5b505050506040513d602081101561173357600080fd5b5051600781111561174057fe5b14156117725760405184907f2c781a0ba90a07a41a6ff282dfe42e6d9aa792d4bd110e076ef4fe7e32e5dc2590600090a25b611799565b6000868152600660205260408120805460ff1916815560018101829055600201555b6112b8565b506000858152600660205260409020600280820154915460ff16908111156117c257fe5b1515611a355760028301544211611777576117de856005613e40565b600c840182600581106117ed57fe5b60050201600101819055504283600c018260058110151561180a57fe5b60026005918202929092018201929092556000888152600660205260408120805460ff19168155600181018290559091015584907f0885ec063b11d2f8a37d8635f7f2ca1f98c5557b0f06e1b4587d303b9f3c3e57908390600c8701908290811061187157fe5b600502016001015442604051808481526020018360030b60030b8152602001828152602001935050505060405180910390a2600273d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c85856040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156118ff57600080fd5b505af4158015611913573d6000803e3d6000fd5b505050506040513d602081101561192957600080fd5b5051600781111561193657fe5b141561196c5760405184907f122c5e6d32f32c06ef4f827e5fba9a828fc49a071ed653c391975456a326112890600090a2611772565b600373d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c85856040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156119c857600080fd5b505af41580156119dc573d6000803e3d6000fd5b505050506040513d60208110156119f257600080fd5b505160078111156119ff57fe5b14156117725760405184907fc882ef929f6977685bbc272ef610963c15fdbefb6e09e0cce9b34e809a3031e490600090a2611799565b60008681526006602052604090205460ff166002811115611a5257fe5b60011415611b4f5760068301546002840154611a739163ffffffff613a5a16565b421161177757611a84856005613e40565b600c84018260058110611a9357fe5b60050201600301819055504283600c0182600581101515611ab057fe5b600590810291909101600401919091556000878152600660205260408120805460ff19168155600181018290556002015584907f249d705a9d98587b580b04c99bee9808aa33d4690188598bcadcb937c4043e20908390600c87019082908110611b1657fe5b600502016003015442604051808481526020018360030b60030b8152602001828152602001935050505060405180910390a260056116af565b600080fd5b6000806000611b61614c18565b60008060008060008060008060008d60078054905081108015611b875750600854600754145b1515611b9257600080fd5b60078f815481101515611ba157fe5b9060005260206000209060250201925060088f815481101515611bc057fe5b90600052602060002090603c0201915082600101549d5082600201549c5082600301549b5082600701603280602002604051908101604052809291908260328015611c3e576020028201916000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411611c0f5790505b5050506009860154604080517fdbed642c00000000000000000000000000000000000000000000000000000000815260048101899052602481018890529051949f5060ff8083169f50610100830481169e50620100009092049091169b5073d80c5f67366bd8362cd8d85dcdbfbffdce31c3029363dbed642c935060448083019350602092829003018186803b158015611cd757600080fd5b505af4158015611ceb573d6000803e3d6000fd5b505050506040513d6020811015611d0157600080fd5b50516007811115611d0e57fe5b6009840154600a8501549198506301000000900461ffff1695509350611d338f6133d7565b955050505091939597999b90929496989a50565b600080611d52612b5c565b1515611d5d57600080fd5b60648660ff1611158015611d75575060648560ff1611155b8015611d875750606485870160ff1611155b1515611d9257600080fd5b8651606460ff9091161115611da657600080fd5b6064876001602002015160ff161115611dbe57600080fd5b6064876002602002015160ff161115611dd657600080fd5b6064876003602002015160ff161115611dee57600080fd5b6064876004602002015160ff161115611e0657600080fd5b6064876005602002015160ff161115611e1e57600080fd5b6064876006602002015160ff161115611e3657600080fd5b6064876007602002015160ff161115611e4e57600080fd5b6064876008602002015160ff161115611e6657600080fd5b6064876009602002015160ff161115611e7e57600080fd5b606487600a602002015160ff161115611e9657600080fd5b606487600b602002015160ff161115611eae57600080fd5b606487600c602002015160ff161115611ec657600080fd5b606487600d602002015160ff161115611ede57600080fd5b606487600e602002015160ff161115611ef657600080fd5b606487600f602002015160ff161115611f0e57600080fd5b6064876010602002015160ff161115611f2657600080fd5b6064876011602002015160ff161115611f3e57600080fd5b6064876012602002015160ff161115611f5657600080fd5b6064876013602002015160ff161115611f6e57600080fd5b6064876014602002015160ff161115611f8657600080fd5b6064876015602002015160ff161115611f9e57600080fd5b6064876016602002015160ff161115611fb657600080fd5b6064876017602002015160ff161115611fce57600080fd5b6064876018602002015160ff161115611fe657600080fd5b6064876019602002015160ff161115611ffe57600080fd5b606487601a602002015160ff16111561201657600080fd5b606487601b602002015160ff16111561202e57600080fd5b606487601c602002015160ff16111561204657600080fd5b606487601d602002015160ff16111561205e57600080fd5b606487601e602002015160ff16111561207657600080fd5b606487601f602002015160ff16111561208e57600080fd5b60648760208002015160ff1611156120a557600080fd5b6064876021602002015160ff1611156120bd57600080fd5b6064876022602002015160ff1611156120d557600080fd5b6064876023602002015160ff1611156120ed57600080fd5b6064876024602002015160ff16111561210557600080fd5b6064876025602002015160ff16111561211d57600080fd5b6064876026602002015160ff16111561213557600080fd5b6064876027602002015160ff16111561214d57600080fd5b6064876028602002015160ff16111561216557600080fd5b6064876029602002015160ff16111561217d57600080fd5b606487602a602002015160ff16111561219557600080fd5b606487602b602002015160ff1611156121ad57600080fd5b606487602c602002015160ff1611156121c557600080fd5b606487602d602002015160ff1611156121dd57600080fd5b606487602e602002015160ff1611156121f557600080fd5b606487602f602002015160ff16111561220d57600080fd5b6064876030602002015160ff16111561222557600080fd5b6064876031602002015160ff16111561223d57600080fd5b428e101561224a57600080fd5b60008d1161225757600080fd5b6103e861ffff8516111561226a57600080fd5b6007541561236f576007805473d80c5f67366bd8362cd8d85dcdbfbffdce31c3029163dbed642c9160001981019081106122a057fe5b906000526020600020906025020160086001600780549050038154811015156122c557fe5b90600052602060002090603c02016040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561231157600080fd5b505af4158015612325573d6000803e3d6000fd5b505050506040513d602081101561233b57600080fd5b5051915081600781111561234b57fe5b60061480612364575081600781111561236057fe5b6007145b151561236f57600080fd5b60078054906123819060018301614c38565b5060088054906123949060018301614c64565b506007805460001981019081106123a757fe5b9060005260206000209060250201905060016007805490500381600001819055508d816001018190555060018d8f010381600201819055508c8160030181905550600c5481600401819055506080600f549060020a02600e5417816005018190555060105481600601819055508b81600c01600060058110151561242757fe5b600502016000019080519060200190612441929190614c90565b508a5161245790601183019060208e0190614c90565b50895161246d90601683019060208d0190614c90565b50885161248390601b83019060208c0190614c90565b50875161249990602080840191908b0190614c90565b506124a960078201886032614d0e565b50600981018054600a830185905561ff00191661010060ff898116919091029190911762ff0000191662010000918816919091021764ffff0000001916630100000061ffff8716021766ffff000000000019169055805460408051918252517fbd19c47e9925eb6f7be8bb1c13a841e0240aaeaf17f217e90022e9c8eb66877f916020908290030190a15050505050505050505050505050565b600080600083600780549050811080156125605750600854600754145b151561256b57600080fd5b612573612b5c565b151561257e57600080fd5b600780548690811061258c57fe5b906000526020600020906025020193504273d80c5f67366bd8362cd8d85dcdbfbffdce31c30263c47c4195866040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156125ef57600080fd5b505af4158015612603573d6000803e3d6000fd5b505050506040513d602081101561261957600080fd5b50511061262557600080fd5b600880548690811061263357fe5b90600052602060002090603c0201925061265e83603b01548460390154613a7790919063ffffffff16565b6039840154603b8501559150612672612b4c565b600160a060020a03166108fc839081150290604051600060405180830381858888f193505050501580156126aa573d6000803e3d6000fd5b50847f7db4d9421d504f87a4d6536c229fc8f724d2d1d46f43c4ef61befc7d8ee867136126d5612b4c565b60408051600160a060020a039092168252602082018690528051918290030190a25050505050565b600e5481565b505050565b600c5481565b600a5481565b6007546000908210156127e65773d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c60078481548110151561274a57fe5b906000526020600020906025020160088581548110151561276757fe5b90600052602060002090603c02016040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156127b357600080fd5b505af41580156127c7573d6000803e3d6000fd5b505050506040513d60208110156127dd57600080fd5b505190506127ea565b5060005b919050565b60006127f9612b5c565b151561280457600080fd5b600a543031101561281457600080fd5b50600a80546000909155612826612b4c565b600160a060020a03166108fc829081150290604051600060405180830381858888f1935050505015801561285e573d6000803e3d6000fd5b5050565b600b5481565b600f5481565b60008083600780549050811080156128895750600854600754145b151561289457600080fd5b83600581106128a257600080fd5b600b543410156128b157600080fd5b60078054879081106128bf57fe5b906000526020600020906025020193506008868154811015156128de57fe5b600091825260208220600954604080517f7feb54bb000000000000000000000000000000000000000000000000000000008152600481018a9052603c90940290920160248401819052604484018a9052600160a060020a039091166064840152905190955073d80c5f67366bd8362cd8d85dcdbfbffdce31c30292637feb54bb9260848082019391829003018186803b15801561297a57600080fd5b505af415801561298e573d6000803e3d6000fd5b50505050505050505050565b6129a2612b5c565b15156129ad57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b6000806000806000808760078054905081108015612a165750600854600754145b1515612a2157600080fd5b8760058110612a2f57600080fd5b600780548b908110612a3d57fe5b9060005260206000209060250201945060088a815481101515612a5c57fe5b90600052602060002090603c0201935073d80c5f67366bd8362cd8d85dcdbfbffdce31c302638052b65e866040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015612abe57600080fd5b505af4158015612ad2573d6000803e3d6000fd5b505050506040513d6020811015612ae857600080fd5b50511515612b1b57838960058110612afc57fe5b600b020192508260020154975082600301805490509550826000015496505b50505050509250925092565b60066020526000908152604090208054600182015460029092015460ff909116919083565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b606060008060008060008760078054905081108015612b8f5750600854600754145b1515612b9a57600080fd5b8760058110612ba857600080fd5b600780548b908110612bb657fe5b9060005260206000209060250201925082600c0189600581101515612bd757fe5b60050201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612c5f5780601f10612c3457610100808354040283529160200191612c5f565b820191906000526020600020905b815481529060010190602001808311612c4257829003601f168201915b5050505050975082600c0189600581101515612c7757fe5b6005020160010154965082600c0189600581101515612c9257fe5b6005020160020154955082600c0189600581101515612cad57fe5b6005020160030154945082600c0189600581101515612cc857fe5b600502016004015493505050509295509295909350565b6000808260078054905081108015612cfa5750600854600754145b1515612d0557600080fd5b612d0e846136eb565b92508260001015611542576008805485908110612d2757fe5b90600052602060002090603c0201915082612d5383603a01548460390154613a7790919063ffffffff16565b1015612d5e57600080fd5b3360009081526037830160205260409020805460ff19166001179055603a820154612d8f908463ffffffff613a5a16565b603a830155604051339084156108fc029085906000818181858888f19350505050158015612dc1573d6000803e3d6000fd5b506040805133815260208101859052815186927f985590b2eed98c5d26ad967509b8f4df1123409dd9bb595f29840bcf30e20720928290030190a250505050565b60008060008360078054905081108015612e1f5750600854600754145b1515612e2a57600080fd5b612e32612b5c565b1515612e3d57600080fd5b6007805486908110612e4b57fe5b906000526020600020906025020193504273d80c5f67366bd8362cd8d85dcdbfbffdce31c30263cb66e11d866040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015612eae57600080fd5b505af4158015612ec2573d6000803e3d6000fd5b505050506040513d6020811015612ed857600080fd5b505110612ee457600080fd5b6008805486908110612ef257fe5b90600052602060002090603c02019250612f1d83603a01548460390154613a7790919063ffffffff16565b6039840154603a8501559150612f31612b4c565b600160a060020a03166108fc839081150290604051600060405180830381858888f19350505050158015612f69573d6000803e3d6000fd5b50847f938cdaa92ae35ca2ad9f846e3d6c682675aa5fa2db297f546c1c07dd98abdea66126d5612b4c565b6000806000808460078054905081108015612fb25750600854600754145b1515612fbd57600080fd5b612fc686612714565b9350836007811115612fd457fe5b600714156130a6576007805487908110612fea57fe5b9060005260206000209060250201925060088681548110151561300957fe5b90600052602060002090603c0201915073d80c5f67366bd8362cd8d85dcdbfbffdce31c30263cdc3d36a84846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561307357600080fd5b505af4158015613087573d6000803e3d6000fd5b505050506040513d602081101561309d57600080fd5b505194506130ab565b600094505b50505050919050565b6000606060008084600780549050811080156130d35750600854600754145b15156130de57600080fd5b6130e6612b5c565b15156130f157600080fd5b60078054879081106130ff57fe5b600091825260209091206025909102019450600473d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbed642c8760088a81548110151561313d57fe5b90600052602060002090603c02016040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561318957600080fd5b505af415801561319d573d6000803e3d6000fd5b505050506040513d60208110156131b357600080fd5b505160078111156131c057fe5b146131ca57600080fd5b600a54303110156131da57600080fd5b600091505b60058210156132d457613259606060405190810160405280603881526020017f6a736f6e2868747470733a2f2f6170692e62696e616e63652e636f6d2f61706981526020017f2f76332f7469636b65722f70726963653f73796d626f6c3d000000000000000081525086600c018460058110151561117557fe5b935061326484613b16565b6040805160608101909152909350806001815286546020808301919091526040918201859052600086815260069091522081518154829060ff191660018360028111156132ad57fe5b021790555060208201518160010155604082015181600201559050508160010191506131df565b61335f608060405190810160405280605681526020017f68747470733a2f2f7777772e72616e646f6d2e6f72672f696e7465676572732f81526020017f3f6e756d3d31266d696e3d30266d61783d343926636f6c3d3126626173653d3181526020017f3026666f726d61743d706c61696e26726e643d6e657700000000000000000000815250613b16565b6040805160608101909152909350806002815286546020808301919091526000604092830181905286815260069091522081518154829060ff191660018360028111156133a857fe5b021790555060208201516001820155604090910151600290910155505050505050565b600d5481565b60105481565b60008082600780549050811080156133f25750600854600754145b15156133fd57600080fd5b600780548590811061340b57fe5b9060005260206000209060250201915060009250600093505b600b82015484101561346157600b820180548590811061344057fe5b906000526020600020015460019060020a0283179250836001019350613424565b5050919050565b613470614d9d565b613478614d9d565b613480614d9d565b600080600080876007805490508110801561349e5750600854600754145b15156134a957600080fd5b600780548a9081106134b757fe5b906000526020600020906025020194506008898154811015156134d657fe5b90600052602060002090603c02019350600092505b60058310156136145773d80c5f67366bd8362cd8d85dcdbfbffdce31c302638052b65e866040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561354657600080fd5b505af415801561355a573d6000803e3d6000fd5b505050506040513d602081101561357057600080fd5b5051156135b557600086846005811061358557fe5b6020020181905287846005811061359857fe5b602002018190528884600581106135ab57fe5b6020020152613609565b8383600581106135c157fe5b600b02019150816002015488846005811015156135da57fe5b602002015281548784600581106135ed57fe5b6020020152600382015486846005811061360357fe5b60200201525b8260010192506134eb565b50505050509193909250565b6007546000908290811080156136395750600854600754145b151561364457600080fd5b600780548490811061365257fe5b60009182526020909120600b60259092020101549392505050565b60008083600780549050811080156136885750600854600754145b151561369357600080fd5b60078054869081106136a157fe5b9060005260206000209060250201915081600b0180549050841015156136c657600080fd5b600b82018054859081106136d657fe5b90600052602060002001549250505092915050565b60008060008084600780549050811080156137095750600854600754145b151561371457600080fd5b61371d86612714565b935083600781111561372b57fe5b600614156130a657600780548790811061374157fe5b9060005260206000209060250201925060088681548110151561376057fe5b90600052602060002090603c0201915073d80c5f67366bd8362cd8d85dcdbfbffdce31c30263dbfd425084846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561307357600080fd5b6137d2614d9d565b6137da614d9d565b6137e2614d9d565b6137ea614d9d565b6137f2614d9d565b600080876007805490508110801561380d5750600854600754145b151561381857600080fd5b600780548a90811061382657fe5b90600052602060002090602502019250600091505b6005821015613a295773d80c5f67366bd8362cd8d85dcdbfbffdce31c30263e4721c9a600c8501846005811061386d57fe5b60405160e060020a63ffffffff8516028152602060048201908152600592909202929092018054600260001961010060018416150201909116046024840181905290928291604490910190849080156139075780601f106138dc57610100808354040283529160200191613907565b820191906000526020600020905b8154815290600101906020018083116138ea57829003601f168201915b50509250505060206040518083038186803b15801561392557600080fd5b505af4158015613939573d6000803e3d6000fd5b505050506040513d602081101561394f57600080fd5b505188836005811061395d57fe5b6020020152600c8301826005811061397157fe5b6005020160010154858360058110151561398757fe5b600392830b90920b60209092020152600c830182600581106139a557fe5b600502016002015487836005811015156139bb57fe5b6020020152600c830182600581106139cf57fe5b600502016003015484836005811015156139e557fe5b600392830b90920b60209092020152600c83018260058110613a0357fe5b60050201600401548683600581101515613a1957fe5b602002015260019091019061383b565b50505091939590929450565b613a3d612b5c565b1515613a4857600080fd5b613a5181613fb2565b50565b60075490565b600082820183811015613a6c57600080fd5b8091505b5092915050565b60008083831115613a8757600080fd5b5050900390565b600080808311613a9d57600080fd5b8284811515613aa857fe5b04949350505050565b600080831515613ac45760009150613a70565b50828202828482811515613ad457fe5b0414613a6c57600080fd5b6060613b0e84848460206040519081016040528060008152506020604051908101604052806000815250614022565b949350505050565b6000806000613b5c6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250600d54614283565b600a54909250821115613b6e57600080fd5b600a54613b81908363ffffffff613a7716565b600a5560408051808201909152600381527f55524c00000000000000000000000000000000000000000000000000000000006020820152600d54613bc7919086906144d5565b6040805184815290519192507fb35fb06fed523df055e4f85a8d8adcb8fa51121ae4fb43f0fb360482e3022c82919081900360200190a16040805182815290517f3c16a87e829b447c1fd5319a9bb7d93dafa1cb7eae917f564ee7b128ffdcab129181900360200190a19392505050565b600154600090600160a060020a03161580613c655750600154613c6390600160a060020a03166148da565b155b15613c7657613c7460006148de565b505b600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613cc957600080fd5b505af1158015613cdd573d6000803e3d6000fd5b505050506040513d6020811015613cf357600080fd5b5051600254600160a060020a03908116911614613da957600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613d5d57600080fd5b505af1158015613d71573d6000803e3d6000fd5b505050506040513d6020811015613d8757600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600260009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613dfc57600080fd5b505af1158015613e10573d6000803e3d6000fd5b505050506040513d6020811015613e2657600080fd5b5051905090565b6000613e3a826000613e40565b92915050565b6000828180805b8351811015613f955783517f300000000000000000000000000000000000000000000000000000000000000090859083908110613e8057fe5b90602001015160f860020a900460f860020a02600160f860020a03191610158015613ef6575083517f390000000000000000000000000000000000000000000000000000000000000090859083908110613ed657fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b15613f4f578115613f1557851515613f0d57613f95565b600019909501945b600a8302925060308482815181101515613f2b57fe5b90602001015160f860020a900460f860020a0260f860020a90040383019250613f8d565b8381815181101515613f5d57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602e60f860020a021415613f8d57600191505b600101613e47565b6000861115613fa75785600a0a830292505b509095945050505050565b600160a060020a0381161515613fc757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f19166020018201604052801561407b578160200160208202803883390190505b50935083925060009150600090505b88518110156140e85788818151811015156140a157fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156140c857fe5b906020010190600160f860020a031916908160001a90535060010161408a565b5060005b875181101561414a57878181518110151561410357fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561412a57fe5b906020010190600160f860020a031916908160001a9053506001016140ec565b5060005b86518110156141ac57868181518110151561416557fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561418c57fe5b906020010190600160f860020a031916908160001a90535060010161414e565b5060005b855181101561420e5785818151811015156141c757fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156141ee57fe5b906020010190600160f860020a031916908160001a9053506001016141b0565b5060005b845181101561427057848181518110151561422957fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561425057fe5b906020010190600160f860020a031916908160001a905350600101614212565b50909d9c50505050505050505050505050565b600154600090600160a060020a031615806142b057506001546142ae90600160a060020a03166148da565b155b156142c1576142bf60006148de565b505b600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561431457600080fd5b505af1158015614328573d6000803e3d6000fd5b505050506040513d602081101561433e57600080fd5b5051600254600160a060020a039081169116146143f457600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156143a857600080fd5b505af11580156143bc573d6000803e3d6000fd5b505050506040513d60208110156143d257600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810185905260048101918252855160448201528551600160a060020a0390931692632ef3accc9287928792829160640190602086019080838360005b8381101561447457818101518382015260200161445c565b50505050905090810190601f1680156144a15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156144c157600080fd5b505af115801561142b573d6000803e3d6000fd5b6001546000908190600160a060020a03161580614504575060015461450290600160a060020a03166148da565b155b156145155761451360006148de565b505b600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561456857600080fd5b505af115801561457c573d6000803e3d6000fd5b505050506040513d602081101561459257600080fd5b5051600254600160a060020a0390811691161461464857600160009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156145fc57600080fd5b505af1158015614610573d6000803e3d6000fd5b505050506040513d602081101561462657600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b838110156146c85781810151838201526020016146b0565b50505050905090810190601f1680156146f55780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561471557600080fd5b505af1158015614729573d6000803e3d6000fd5b505050506040513d602081101561473f57600080fd5b50519050670de0b6b3a76400003a84020181111561476057600091506148d2565b6002546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b838110156147f35781810151838201526020016147db565b50505050905090810190601f1680156148205780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561485357818101518382015260200161483b565b50505050905090810190601f1680156148805780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b1580156148a257600080fd5b505af11580156148b6573d6000803e3d6000fd5b50505050506040513d60208110156148cd57600080fd5b505191505b509392505050565b3b90565b6000613e3a600080614903731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6148da565b11156149745760018054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015261496c90614c05565b506001612b59565b600061499373c03a2615d5efaf5f49f60b7bb6583eaec212fdf16148da565b11156149fc5760018054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015261496c90614c05565b6000614a1b73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6148da565b1115614a845760018054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015261496c90614c05565b6000614aa373146500cfd35b22e4a392fe0adc06de1a1368ed486148da565b1115614b0c5760018054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015261496c90614c05565b6000614b2b736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756148da565b1115614b5d575060018054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475178155612b59565b6000614b7c7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6148da565b1115614bae575060018054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf178155612b59565b6000614bcd7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6148da565b1115614bff575060018054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa178155612b59565b50600090565b805161285e906003906020840190614c90565b610640604051908101604052806032906020820280388339509192915050565b815481835581811115612703576025028160250283600052602060002091820191016127039190614dbc565b81548183558181111561270357603c0281603c0283600052602060002091820191016127039190614e46565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614cd157805160ff1916838001178555614cfe565b82800160010185558215614cfe579182015b82811115614cfe578251825591602001919060010190614ce3565b50614d0a929150614e7e565b5090565b600283019183908215614d915791602002820160005b83821115614d6257835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302614d24565b8015614d8f5782816101000a81549060ff0219169055600101602081600001049283019260010302614d62565b505b50614d0a929150614e98565b60a0604051908101604052806005906020820280388339509192915050565b612b5991905b80821115614d0a576000808255600182018190556002820181905560038201819055600482018190556005820181905560068201819055614e066007830182614eb6565b60098201805466ffffffffffffff191690556000600a8301819055614e2f90600b840190614ec4565b614e3d600c83016000614ee2565b50602501614dc2565b612b5991905b80821115614d0a576000614e608282614ef1565b50600060398201819055603a8201819055603b820155603c01614e4c565b612b5991905b80821115614d0a5760008155600101614e84565b612b5991905b80821115614d0a57805460ff19168155600101614e9e565b506000815560010160009055565b5080546000825590600052602060002090810190613a519190614e7e565b50613a51906019810190614f00565b50613a51906037810190614f3f565b612b5991905b80821115614d0a576000614f1a8282614fa0565b5060006001820181905560028201819055600382018190556004820155600501614f06565b612b5991905b80821115614d0a5760008082556001820181905560028201819055614f6d6003830182614fe4565b5060006005820181905560068201819055600782018190556008820181905560098201819055600a820155600b01614f45565b50805460018160011615610100020316600290046000825580601f10614fc65750613a51565b601f016020900490600052602060002090810190613a519190614e7e565b5080546000825560020290600052602060002090810190613a519190612b5991905b80821115614d0a57600080825560018201556002016150065600a165627a7a7230582037b8ce62a842a79aefb17ff523c2de7496ec4ae1cff41a375496e8f06f99d5bd00290000000000000000000000002fd7837786639b6bc554ccfbb9a2c9edc56374d8",
  "constructorArguments": "0000000000000000000000002fd7837786639b6bc554ccfbb9a2c9edc56374d8",
  "libraries": [
    {
      "name": "GameLogic",
      "address": "0xd80C5f67366bd8362CD8D85DCDbFBFFdce31c302"
    }
  ]
}