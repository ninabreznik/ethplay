{
  "address": "0xaaa688ac2755cb6a27d123a0300bcf793c9ed019",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClockAuction",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC721Basic {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId) public;\n\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    //    function safeTransferFrom(\n    //        address _from,\n    //        address _to,\n    //        uint256 _tokenId,\n    //        bytes _data\n    //    )\n    //    public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n    function name() public view returns (string _name);\n\n    function symbol() public view returns (string _symbol);\n\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract ToonInterface is ERC721 {\n\n    function isToonInterface() external pure returns (bool);\n\n    /**\n    * @notice   Returns an address of the toon author. 0x0 if\n    *           the toon has been created by us.\n    */\n    function authorAddress() external view returns (address);\n\n    /**\n    * @notice   Returns maximum supply. In other words there will\n    *           be never more toons that that number. It has to\n    *           be constant.\n    *           If there is no limit function returns 0.\n    */\n    function maxSupply() external view returns (uint256);\n\n    function getToonInfo(uint _id) external view returns (\n        uint genes,\n        uint birthTime,\n        address owner\n    );\n\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\n\ncontract Withdrawable {\n\n    mapping(address => uint) private pendingWithdrawals;\n\n    event Withdrawal(address indexed receiver, uint amount);\n    event BalanceChanged(address indexed _address, uint oldBalance, uint newBalance);\n\n    /**\n    * Returns amount of wei that given address is able to withdraw.\n    */\n    function getPendingWithdrawal(address _address) public view returns (uint) {\n        return pendingWithdrawals[_address];\n    }\n\n    /**\n    * Add pending withdrawal for an address.\n    */\n    function addPendingWithdrawal(address _address, uint _amount) internal {\n        require(_address != 0x0);\n\n        uint oldBalance = pendingWithdrawals[_address];\n        pendingWithdrawals[_address] += _amount;\n\n        emit BalanceChanged(_address, oldBalance, oldBalance + _amount);\n    }\n\n    /**\n    * Withdraws all pending withdrawals.\n    */\n    function withdraw() external {\n        uint amount = getPendingWithdrawal(msg.sender);\n        require(amount > 0);\n\n        pendingWithdrawals[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\n        emit Withdrawal(msg.sender, amount);\n        emit BalanceChanged(msg.sender, amount, 0);\n    }\n\n}\n\ncontract ClockAuctionBase is Withdrawable, Pausable {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Address of a contract\n        address _contract;\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ToonInterface[] public toonContracts;\n    mapping(address => uint256) addressToIndex;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Values 0-10,000 map to 0%-100%\n    // Author's share from the owner cut.\n    uint256 public authorShare;\n\n    // Map from token ID to their corresponding auction.\n    //    mapping(uint256 => Auction) tokenIdToAuction;\n    mapping(address => mapping(uint256 => Auction)) tokenToAuction;\n\n    event AuctionCreated(address indexed _contract, uint256 indexed tokenId,\n        uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(address indexed _contract, uint256 indexed tokenId,\n        uint256 totalPrice, address indexed winner);\n    event AuctionCancelled(address indexed _contract, uint256 indexed tokenId);\n\n    /**\n    * @notice   Adds a new toon contract.\n    */\n    function addToonContract(address _toonContractAddress) external onlyOwner {\n        ToonInterface _interface = ToonInterface(_toonContractAddress);\n        require(_interface.isToonInterface());\n\n        uint _index = toonContracts.push(_interface) - 1;\n        addressToIndex[_toonContractAddress] = _index;\n    }\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _contract - address of a toon contract\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _contract, address _claimant, uint256 _tokenId)\n    internal\n    view\n    returns (bool) {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        address _owner = _interface.ownerOf(_tokenId);\n\n        return (_owner == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _contract, address _owner, uint256 _tokenId) internal {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        // it will throw if transfer fails\n        _interface.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _contract, address _receiver, uint256 _tokenId) internal {\n        ToonInterface _interface = _interfaceByAddress(_contract);\n        // it will throw if transfer fails\n        _interface.transferFrom(this, _receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(address _contract, uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        _isAddressSupportedContract(_contract);\n        tokenToAuction[_contract][_tokenId] = _auction;\n\n        emit AuctionCreated(\n            _contract,\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(address _contract, uint256 _tokenId, address _seller) internal {\n        _removeAuction(_contract, _tokenId);\n        _transfer(_contract, _seller, _tokenId);\n        emit AuctionCancelled(_contract, _tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(address _contract, uint256 _tokenId, uint256 _bidAmount)\n    internal\n    returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        ToonInterface _interface = _interfaceByAddress(auction._contract);\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_contract, _tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut;\n            uint256 authorCut;\n            uint256 sellerProceeds;\n            (auctioneerCut, authorCut, sellerProceeds) = _computeCut(_interface, price);\n\n            if (authorCut > 0) {\n                address authorAddress = _interface.authorAddress();\n                addPendingWithdrawal(authorAddress, authorCut);\n            }\n\n            addPendingWithdrawal(owner, auctioneerCut);\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        emit AuctionSuccessful(_contract, _tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(address _contract, uint256 _tokenId) internal {\n        delete tokenToAuction[_contract][_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n    internal\n    view\n    returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n    internal\n    pure\n    returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(ToonInterface _interface, uint256 _price) internal view returns (\n        uint256 ownerCutValue,\n        uint256 authorCutValue,\n        uint256 sellerProceeds\n    ) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n\n        uint256 _totalCut = _price * ownerCut / 10000;\n        uint256 _authorCut = 0;\n        uint256 _ownerCut = 0;\n        if (_interface.authorAddress() != 0x0) {\n            _authorCut = _totalCut * authorShare / 10000;\n        }\n\n        _ownerCut = _totalCut - _authorCut;\n        uint256 _sellerProfit = _price - _ownerCut - _authorCut;\n        require(_sellerProfit + _ownerCut + _authorCut == _price);\n\n        return (_ownerCut, _authorCut, _sellerProfit);\n    }\n\n    function _interfaceByAddress(address _address) internal view returns (ToonInterface) {\n        uint _index = addressToIndex[_address];\n        ToonInterface _interface = toonContracts[_index];\n        require(_address == address(_interface));\n\n        return _interface;\n    }\n\n    function _isAddressSupportedContract(address _address) internal view returns (bool) {\n        uint _index = addressToIndex[_address];\n        ToonInterface _interface = toonContracts[_index];\n        return _address == address(_interface);\n    }\n}\n\ncontract ClockAuction is ClockAuctionBase {\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    bool public isSaleClockAuction = true;\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _ownerCut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    /// @param _authorShare - percent share of the author of the toon.\n    ///  Calculated from the ownerCut\n    constructor(uint256 _ownerCut, uint256 _authorShare) public {\n        require(_ownerCut <= 10000);\n        require(_authorShare <= 10000);\n\n        ownerCut = _ownerCut;\n        authorShare = _authorShare;\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        address _contract,\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n    external\n    whenNotPaused\n    {\n        require(_isAddressSupportedContract(_contract));\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        _escrow(_contract, _seller, _tokenId);\n\n        Auction memory auction = Auction(\n            _contract,\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_contract, _tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(address _contract, uint256 _tokenId)\n    external\n    payable\n    whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_contract, _tokenId, msg.value);\n        _transfer(_contract, msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(address _contract, uint256 _tokenId)\n    external\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_contract, _tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(address _contract, uint256 _tokenId)\n    whenPaused\n    onlyOwner\n    external\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_contract, _tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(address _contract, uint256 _tokenId)\n    external\n    view\n    returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt,\n        uint256 currentPrice\n    ) {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n\n        if (!_isOnAuction(auction)) {\n            return (0x0, 0, 0, 0, 0, 0);\n        }\n\n        return (\n        auction.seller,\n        auction.startingPrice,\n        auction.endingPrice,\n        auction.duration,\n        auction.startedAt,\n        getCurrentPrice(_contract, _tokenId)\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(address _contract, uint256 _tokenId)\n    public\n    view\n    returns (uint256)\n    {\n        Auction storage auction = tokenToAuction[_contract][_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000001860000000000000000000000000000000000000000000000000000000000001388"
}