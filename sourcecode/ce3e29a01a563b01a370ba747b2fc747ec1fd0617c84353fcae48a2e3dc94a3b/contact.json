{
  "address": "0x9bf25700727d10a857099d1033ce2cc493c3b61a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StreamityEscrow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath\n{\n    function mul(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n\n        assert(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient\n{\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\ncontract TokenERC20 is Ownable\n{\n    using SafeMath for uint;\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint256 public decimals = 18;\n    uint256 DEC = 10 ** uint256(decimals);\n    uint256 public totalSupply;\n    uint256 public avaliableSupply;\n    uint256 public buyPrice = 1000000000000000000 wei;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public\n    {\n        totalSupply = initialSupply.mul(DEC);  // Update total supply with the decimal amount\n        balanceOf[this] = totalSupply;         // Give the creator all initial tokens\n        avaliableSupply = balanceOf[this];     // Show how much tokens on contract\n        name = tokenName;                      // Set the name for display purposes\n        symbol = tokenSymbol;                  // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     *\n     * @param _from - address of the contract\n     * @param _to - address of the investor\n     * @param _value - tokens for the investor\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal\n    {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        returns (bool success)\n    {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success)\n    {\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner\n        returns (bool success)\n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public\n        returns (bool success)\n    {\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\n\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public\n        returns (bool success)\n    {\n        uint oldValue = allowance[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n            allowance[msg.sender][_spender] = 0;\n        } else {\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public onlyOwner\n        returns (bool success)\n    {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        avaliableSupply = avaliableSupply.sub(_value);\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public onlyOwner\n        returns (bool success)\n    {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);              // Update totalSupply\n        avaliableSupply = avaliableSupply.sub(_value);\n\n        emit Burn(_from, _value);\n\n        return true;\n    }\n}\n\ncontract ERC20Extending is TokenERC20\n{\n    using SafeMath for uint;\n\n    /**\n    * Function for transfer ethereum from contract to any address\n    *\n    * @param _to - address of the recipient\n    * @param amount - ethereum\n    */\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\n    {\n        _to.transfer(amount);\n    }\n\n    /**\n    * Function for transfer tokens from contract to any address\n    *\n    */\n    function transferTokensFromContract(address _to, uint256 _value) public onlyOwner\n    {\n        avaliableSupply = avaliableSupply.sub(_value);\n        _transfer(this, _to, _value);\n    }\n}\n\ncontract Pauseble is TokenERC20\n{\n    event EPause();\n    event EUnpause();\n\n    bool public paused = true;\n    uint public startIcoDate = 0;\n\n    modifier whenNotPaused()\n    {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused()\n    {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner\n    {\n        paused = true;\n        emit EPause();\n    }\n\n    function pauseInternal() internal\n    {\n        paused = true;\n        emit EPause();\n    }\n\n    function unpause() public onlyOwner\n    {\n        paused = false;\n        emit EUnpause();\n    }\n\n    function unpauseInternal() internal\n    {\n        paused = false;\n        emit EUnpause();\n    }\n}\n\ncontract StreamityCrowdsale is Pauseble\n{\n    using SafeMath for uint;\n\n    uint public stage = 0;\n\n    event CrowdSaleFinished(string info);\n\n    struct Ico {\n        uint256 tokens;             // Tokens in crowdsale\n        uint startDate;             // Date when crowsale will be starting, after its starting that property will be the 0\n        uint endDate;               // Date when crowdsale will be stop\n        uint8 discount;             // Discount\n        uint8 discountFirstDayICO;  // Discount. Only for first stage ico\n    }\n\n    Ico public ICO;\n\n    /**\n    * Expanding of the functionality\n    *\n    * @param _numerator - Numerator - value (10000)\n    * @param _denominator - Denominator - value (10000)\n    *\n    * example: price 1000 tokens by 1 ether = changeRate(1, 1000)\n    */\n    function changeRate(uint256 _numerator, uint256 _denominator) public onlyOwner\n        returns (bool success)\n    {\n        if (_numerator == 0) _numerator = 1;\n        if (_denominator == 0) _denominator = 1;\n\n        buyPrice = (_numerator.mul(DEC)).div(_denominator);\n\n        return true;\n    }\n\n    /*\n    * Function show in contract what is now\n    *\n    */\n    function crowdSaleStatus() internal constant\n        returns (string)\n    {\n        if (1 == stage) {\n            return \"Pre-ICO\";\n        } else if(2 == stage) {\n            return \"ICO first stage\";\n        } else if (3 == stage) {\n            return \"ICO second stage\";\n        } else if (4 >= stage) {\n            return \"feature stage\";\n        }\n\n        return \"there is no stage at present\";\n    }\n\n    /*\n    * Function for selling tokens in crowd time.\n    *\n    */\n    function sell(address _investor, uint256 amount) internal\n    {\n        uint256 _amount = (amount.mul(DEC)).div(buyPrice);\n\n        if (1 == stage) {\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\n        }\n        else if (2 == stage)\n        {\n            if (now <= ICO.startDate + 1 days)\n            {\n                  if (0 == ICO.discountFirstDayICO) {\n                      ICO.discountFirstDayICO = 20;\n                  }\n\n                  _amount = _amount.add(withDiscount(_amount, ICO.discountFirstDayICO));\n            } else {\n                _amount = _amount.add(withDiscount(_amount, ICO.discount));\n            }\n        } else if (3 == stage) {\n            _amount = _amount.add(withDiscount(_amount, ICO.discount));\n        }\n\n        if (ICO.tokens < _amount)\n        {\n            emit CrowdSaleFinished(crowdSaleStatus());\n            pauseInternal();\n\n            revert();\n        }\n\n        ICO.tokens = ICO.tokens.sub(_amount);\n        avaliableSupply = avaliableSupply.sub(_amount);\n\n        _transfer(this, _investor, _amount);\n    }\n\n    /*\n    * Function for start crowdsale (any)\n    *\n    * @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\n    * @param _startDate - When crowdsale will be start - unix timestamp (1512231703 )\n    * @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\n    * @param _discount - Discount for the crowd - humanlive value (7) same as 7 %\n    * @param _discount - Discount for the crowds first day - humanlive value (7) same as 7 %\n    */\n    function startCrowd(uint256 _tokens, uint _startDate, uint _endDate, uint8 _discount, uint8 _discountFirstDayICO) public onlyOwner\n    {\n        require(_tokens * DEC <= avaliableSupply);  // require to set correct tokens value for crowd\n        startIcoDate = _startDate;\n        ICO = Ico (_tokens * DEC, _startDate, _startDate + _endDate * 1 days , _discount, _discountFirstDayICO);\n        stage = stage.add(1);\n        unpauseInternal();\n    }\n\n    /**\n    * Function for web3js, should be call when somebody will buy tokens from website. This function only delegator.\n    *\n    * @param _investor - address of investor (who payed)\n    * @param _amount - ethereum\n    */\n    function transferWeb3js(address _investor, uint256 _amount) external onlyOwner\n    {\n        sell(_investor, _amount);\n    }\n\n    /**\n    * Function for adding discount\n    *\n    */\n    function withDiscount(uint256 _amount, uint _percent) internal pure\n        returns (uint256)\n    {\n        return (_amount.mul(_percent)).div(100);\n    }\n}\n\ncontract StreamityContract is ERC20Extending, StreamityCrowdsale\n{\n    using SafeMath for uint;\n\n    uint public weisRaised;  // how many weis was raised on crowdsale\n\n    /* Streamity tokens Constructor */\n    function StreamityContract() public TokenERC20(130000000, \"Streamity\", \"STM\") {} //change before send !!!\n\n    /**\n    * Function payments handler\n    *\n    */\n    function () public payable\n    {\n        assert(msg.value >= 1 ether / 10);\n        require(now >= ICO.startDate);\n\n        if (now >= ICO.endDate) {\n            pauseInternal();\n            emit CrowdSaleFinished(crowdSaleStatus());\n        }\n\n\n        if (0 != startIcoDate) {\n            if (now < startIcoDate) {\n                revert();\n            } else {\n                startIcoDate = 0;\n            }\n        }\n\n        if (paused == false) {\n            sell(msg.sender, msg.value);\n            weisRaised = weisRaised.add(msg.value);\n        }\n    }\n}\n\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancy_lock);\n    reentrancy_lock = true;\n    _;\n    reentrancy_lock = false;\n  }\n\n}\n\n/**\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n}\n\ncontract ContractToken {\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n}\n\ncontract StreamityEscrow is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using ECRecovery for bytes32;\n\n    uint8 constant public STATUS_NO_DEAL = 0x0;\n    uint8 constant public STATUS_DEAL_WAIT_CONFIRMATION = 0x01;\n    uint8 constant public STATUS_DEAL_APPROVE = 0x02;\n    uint8 constant public STATUS_DEAL_RELEASE = 0x03;\n\n    TokenERC20 public streamityContractAddress;\n    \n    uint256 public availableForWithdrawal;\n\n    uint32 public requestCancelationTime;\n\n    mapping(bytes32 => Deal) public streamityTransfers;\n\n    function StreamityEscrow(address streamityContract) public {\n        require(streamityContract != 0x0);\n        requestCancelationTime = 2 hours;\n        streamityContractAddress = TokenERC20(streamityContract);\n    }\n\n    struct Deal {\n        uint256 value;\n        uint256 cancelTime;\n        address seller;\n        address buyer;\n        uint8 status;\n        uint256 commission;\n        bool isAltCoin;\n    }\n\n    event StartDealEvent(bytes32 _hashDeal, address _seller, address _buyer);\n    event ApproveDealEvent(bytes32 _hashDeal, address _seller, address _buyer);\n    event ReleasedEvent(bytes32 _hashDeal, address _seller, address _buyer);\n    event SellerCancelEvent(bytes32 _hashDeal, address _seller, address _buyer);\n    \n    function pay(bytes32 _tradeID, address _seller, address _buyer, uint256 _value, uint256 _commission, bytes _sign) \n    external \n    payable \n    {\n        require(msg.value > 0);\n        require(msg.value == _value);\n        require(msg.value > _commission);\n        bytes32 _hashDeal = keccak256(_tradeID, _seller, _buyer, msg.value, _commission);\n        verifyDeal(_hashDeal, _sign);\n        startDealForUser(_hashDeal, _seller, _buyer, _commission, msg.value, false);\n    }\n\n    function () public payable {\n        availableForWithdrawal = availableForWithdrawal.add(msg.value);\n    }\n\n    function payAltCoin(bytes32 _tradeID, address _seller, address _buyer, uint256 _value, uint256 _commission, bytes _sign) \n    external \n    {\n        bytes32 _hashDeal = keccak256(_tradeID, _seller, _buyer, _value, _commission);\n        verifyDeal(_hashDeal, _sign);\n        bool result = streamityContractAddress.transferFrom(msg.sender, address(this), _value);\n        require(result == true);\n        startDealForUser(_hashDeal, _seller, _buyer, _commission, _value, true);\n    }\n\n    function verifyDeal(bytes32 _hashDeal, bytes _sign) private view {\n        require(_hashDeal.recover(_sign) == owner);\n        require(streamityTransfers[_hashDeal].status == STATUS_NO_DEAL); \n    }\n\n    function startDealForUser(bytes32 _hashDeal, address _seller, address _buyer, uint256 _commission, uint256 _value, bool isAltCoin) \n    private returns(bytes32) \n    {\n        Deal storage userDeals = streamityTransfers[_hashDeal];\n        userDeals.seller = _seller;\n        userDeals.buyer = _buyer;\n        userDeals.value = _value; \n        userDeals.commission = _commission; \n        userDeals.cancelTime = block.timestamp.add(requestCancelationTime); \n        userDeals.status = STATUS_DEAL_WAIT_CONFIRMATION;\n        userDeals.isAltCoin = isAltCoin;\n        emit StartDealEvent(_hashDeal, _seller, _buyer);\n        \n        return _hashDeal;\n    }\n\n    function withdrawCommisionToAddress(address _to, uint256 _amount) external onlyOwner {\n        require(_amount <= availableForWithdrawal); \n        availableForWithdrawal = availableForWithdrawal.sub(_amount);\n        _to.transfer(_amount);\n    }\n\n    function withdrawCommisionToAddressAltCoin(address _to, uint256 _amount) external onlyOwner {\n        streamityContractAddress.transfer(_to, _amount);\n    }\n\n    function getStatusDeal(bytes32 _hashDeal) external view returns (uint8) {\n        return streamityTransfers[_hashDeal].status;\n    }\n    \n    // _additionalComission is wei\n    uint256 constant GAS_releaseTokens = 60000;\n    function releaseTokens(bytes32 _hashDeal, uint256 _additionalGas) \n    external \n    nonReentrant\n    returns(bool) \n    {\n        Deal storage deal = streamityTransfers[_hashDeal];\n\n        if (deal.status == STATUS_DEAL_APPROVE) {\n            deal.status = STATUS_DEAL_RELEASE; \n            bool result = false;\n\n            if (deal.isAltCoin == false)\n                result = transferMinusComission(deal.buyer, deal.value, deal.commission.add((msg.sender == owner ? (GAS_releaseTokens.add(_additionalGas)).mul(tx.gasprice) : 0)));\n            else \n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.buyer, deal.value, deal.commission);\n\n            if (result == false) {\n                deal.status = STATUS_DEAL_APPROVE; \n                return false;   \n            }\n\n            emit ReleasedEvent(_hashDeal, deal.seller, deal.buyer);\n            delete streamityTransfers[_hashDeal];\n            return true;\n        }\n        \n        return false;\n    }\n\n    function releaseTokensForce(bytes32 _hashDeal) \n    external onlyOwner\n    nonReentrant\n    returns(bool) \n    {\n        Deal storage deal = streamityTransfers[_hashDeal];\n        uint8 prevStatus = deal.status; \n        if (deal.status != STATUS_NO_DEAL) {\n            deal.status = STATUS_DEAL_RELEASE; \n            bool result = false;\n\n            if (deal.isAltCoin == false)\n                result = transferMinusComission(deal.buyer, deal.value, deal.commission);\n            else \n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.buyer, deal.value, deal.commission);\n\n            if (result == false) {\n                deal.status = prevStatus; \n                return false;   \n            }\n\n            emit ReleasedEvent(_hashDeal, deal.seller, deal.buyer);\n            delete streamityTransfers[_hashDeal];\n            return true;\n        }\n        \n        return false;\n    }\n\n    uint256 constant GAS_cancelSeller = 30000;\n    function cancelSeller(bytes32 _hashDeal, uint256 _additionalGas) \n    external onlyOwner\n    nonReentrant\t\n    returns(bool)   \n    {\n        Deal storage deal = streamityTransfers[_hashDeal];\n\n        if (deal.cancelTime > block.timestamp)\n            return false;\n\n        if (deal.status == STATUS_DEAL_WAIT_CONFIRMATION) {\n            deal.status = STATUS_DEAL_RELEASE; \n\n            bool result = false;\n            if (deal.isAltCoin == false)\n                result = transferMinusComission(deal.seller, deal.value, GAS_cancelSeller.add(_additionalGas).mul(tx.gasprice));\n            else \n                result = transferMinusComissionAltCoin(streamityContractAddress, deal.seller, deal.value, _additionalGas);\n\n            if (result == false) {\n                deal.status = STATUS_DEAL_WAIT_CONFIRMATION; \n                return false;   \n            }\n\n            emit SellerCancelEvent(_hashDeal, deal.seller, deal.buyer);\n            delete streamityTransfers[_hashDeal];\n            return true;\n        }\n        \n        return false;\n    }\n\n    function approveDeal(bytes32 _hashDeal) \n    external \n    onlyOwner \n    nonReentrant\t\n    returns(bool) \n    {\n        Deal storage deal = streamityTransfers[_hashDeal];\n        \n        if (deal.status == STATUS_DEAL_WAIT_CONFIRMATION) {\n            deal.status = STATUS_DEAL_APPROVE;\n            emit ApproveDealEvent(_hashDeal, deal.seller, deal.buyer);\n            return true;\n        }\n        \n        return false;\n    }\n\n    function transferMinusComission(address _to, uint256 _value, uint256 _commission) \n    private returns(bool) \n    {\n        uint256 _totalComission = _commission; \n        \n        require(availableForWithdrawal.add(_totalComission) >= availableForWithdrawal); // Check for overflows\n\n        availableForWithdrawal = availableForWithdrawal.add(_totalComission); \n\n        _to.transfer(_value.sub(_totalComission));\n        return true;\n    }\n\n    function transferMinusComissionAltCoin(TokenERC20 _contract, address _to, uint256 _value, uint256 _commission) \n    private returns(bool) \n    {\n        uint256 _totalComission = _commission; \n        _contract.transfer(_to, _value.sub(_totalComission));\n        return true;\n    }\n\n    function setStreamityContractAddress(address newAddress) \n    external onlyOwner \n    {\n        streamityContractAddress = TokenERC20(newAddress);\n    }\n\n    // For other Tokens\n    function transferToken(ContractToken _tokenContract, address _transferTo, uint256 _value) onlyOwner external {\n        _tokenContract.transfer(_transferTo, _value);\n    }\n    function transferTokenFrom(ContractToken _tokenContract, address _transferTo, address _transferFrom, uint256 _value) onlyOwner external {\n        _tokenContract.transferFrom(_transferTo, _transferFrom, _value);\n    }\n    function approveToken(ContractToken _tokenContract, address _spender, uint256 _value) onlyOwner external {\n        _tokenContract.approve(_spender, _value);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_NO_DEAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableForWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"getStatusDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"streamityContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"streamityTransfers\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cancelTime\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"isAltCoin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_RELEASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_APPROVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommisionToAddressAltCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"payAltCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"releaseTokensForce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setStreamityContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommisionToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_transferTo\",\"type\":\"address\"},{\"name\":\"_transferFrom\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"cancelSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashDeal\",\"type\":\"bytes32\"}],\"name\":\"approveDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DEAL_WAIT_CONFIRMATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_transferTo\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCancelationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"streamityContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"StartDealEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"ApproveDealEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"ReleasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hashDeal\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"SellerCancelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051602080611723833981016040525160008054600160a060020a03191633179055600160a060020a038116151561005957600080fd5b6003805463ffffffff1916611c2017905560018054600160a060020a03909216600160a060020a03199092169190911790556116898061009a6000396000f3006080604052600436106101195763ffffffff60e060020a60003504166303b9b4f9811461013157806330e9f6ed1461016057806335ba9af81461018b57806341b6f6ce146101b25780634f1fa7ef146101ca57806353122f56146101fb5780635937de141461025c5780636583e239146102715780638b845c1d146102865780638da5cb5b146102ac57806392a93d33146102c1578063a9a1fb9614610302578063b0dbce711461031a578063da3e33971461033b578063e0f4758014610365578063e599490514610389578063e5a17818146103b9578063f28c0716146103d4578063f2dfa136146103ec578063f2fde38b14610401578063f5537ede14610422578063fd8bcf6d1461044c578063fe908b7a1461047a575b60025461012c903463ffffffff6104ae16565b600255005b34801561013d57600080fd5b5061014c6004356024356104c4565b604080519115158252519081900360200190f35b34801561016c57600080fd5b5061017561070a565b6040805160ff9092168252519081900360200190f35b34801561019757600080fd5b506101a061070f565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610175600435610715565b3480156101d657600080fd5b506101df610734565b60408051600160a060020a039092168252519081900360200190f35b34801561020757600080fd5b50610213600435610743565b604080519788526020880196909652600160a060020a039485168787015292909316606086015260ff16608085015260a0840191909152151560c0830152519081900360e00190f35b34801561026857600080fd5b50610175610794565b34801561027d57600080fd5b50610175610799565b34801561029257600080fd5b506102aa600160a060020a036004351660243561079e565b005b3480156102b857600080fd5b506101df61083f565b3480156102cd57600080fd5b506102aa6004803590600160a060020a036024803582169260443590921691606435916084359160a43591820191013561084e565b34801561030e57600080fd5b5061014c60043561099f565b34801561032657600080fd5b506102aa600160a060020a0360043516610bad565b34801561034757600080fd5b506102aa600160a060020a0360043581169060243516604435610bf3565b34801561037157600080fd5b506102aa600160a060020a0360043516602435610c9e565b34801561039557600080fd5b506102aa600160a060020a0360043581169060243581169060443516606435610d15565b3480156103c557600080fd5b5061014c600435602435610dca565b3480156103e057600080fd5b5061014c600435610fd2565b3480156103f857600080fd5b506101756110dd565b34801561040d57600080fd5b506102aa600160a060020a03600435166110e2565b34801561042e57600080fd5b506102aa600160a060020a0360043581169060243516604435611176565b34801561045857600080fd5b506104616111f0565b6040805163ffffffff9092168252519081900360200190f35b6102aa6004803590600160a060020a036024803582169260443590921691606435916084359160a4359182019101356111fc565b6000828201838110156104bd57fe5b9392505050565b600080548190819060a060020a900460ff16156104e057600080fd5b6000805460a060020a60ff02191660a060020a90811782558682526004602052604090912060038101549093500460ff16600214156106ed575060038101805460a060020a60ff02191674030000000000000000000000000000000000000000179055600581015460009060ff1615156105c057600382015482546000546105b992600160a060020a0390811692916105b4911633146105815760006105a3565b6105a33a61059761ea608b63ffffffff6104ae16565b9063ffffffff6112be16565b60048701549063ffffffff6104ae16565b6112e2565b90506105ea565b6001546003830154835460048501546105e793600160a060020a039081169316919061136c565b90505b8015156106235760038201805460a060020a60ff02191674020000000000000000000000000000000000000000179055600092506106f2565b6002820154600383015460408051888152600160a060020a039384166020820152919092168183015290517ff6fa827616c433d804e6640e57ef007771e25349e04446dfe9c048a69b4aef779181900360600190a160008581526004602081905260408220828155600180820184905560028201805473ffffffffffffffffffffffffffffffffffffffff1916905560038201805474ffffffffffffffffffffffffffffffffffffffffff19169055918101929092556005909101805460ff1916905592506106f2565b600092505b50506000805460a060020a60ff021916905592915050565b600081565b60025481565b60009081526004602052604090206003015460a060020a900460ff1690565b600154600160a060020a031681565b600460208190526000918252604090912080546001820154600283015460038401549484015460059094015492949193600160a060020a03918216939183169260ff60a060020a9091048116921687565b600381565b600281565b600054600160a060020a031633146107b557600080fd5b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb91604480830192600092919082900301818387803b15801561082357600080fd5b505af1158015610837573d6000803e3d6000fd5b505050505050565b600054600160a060020a031681565b604080518881526c01000000000000000000000000600160a060020a03808a168202602080850191909152908916909102603483015260488201879052606882018690528251918290036088018220601f85018290048202830182019093528382526000916108d491849190879087908190840183828082843750611405945050505050565b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018990529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561094757600080fd5b505af115801561095b573d6000803e3d6000fd5b505050506040513d602081101561097157600080fd5b5051905060018115151461098457600080fd5b610993828989888a6001611555565b50505050505050505050565b60008054819081908190600160a060020a031633146109bd57600080fd5b60005460a060020a900460ff16156109d457600080fd5b6000805460a060020a60ff02191660a060020a90811782558682526004602052604090912060038101549094500460ff1691508115610b90575060038201805460a060020a60ff02191674030000000000000000000000000000000000000000179055600582015460009060ff161515610a6f57600383015483546004850154610a6892600160a060020a031691906112e2565b9050610a99565b600154600384015484546004860154610a9693600160a060020a039081169316919061136c565b90505b801515610ac65760038301805460a060020a60ff02191660a060020a60ff85160217905560009350610b95565b6002830154600384015460408051888152600160a060020a039384166020820152919092168183015290517ff6fa827616c433d804e6640e57ef007771e25349e04446dfe9c048a69b4aef779181900360600190a160008581526004602081905260408220828155600180820184905560028201805473ffffffffffffffffffffffffffffffffffffffff1916905560038201805474ffffffffffffffffffffffffffffffffffffffffff19169055918101929092556005909101805460ff191690559350610b95565b600093505b50506000805460a060020a60ff021916905550919050565b600054600160a060020a03163314610bc457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610c0a57600080fd5b82600160a060020a031663095ea7b383836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050506040513d6020811015610c9757600080fd5b5050505050565b600054600160a060020a03163314610cb557600080fd5b600254811115610cc457600080fd5b600254610cd7908263ffffffff61164b16565b600255604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610d10573d6000803e3d6000fd5b505050565b600054600160a060020a03163314610d2c57600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b158015610da057600080fd5b505af1158015610db4573d6000803e3d6000fd5b505050506040513d602081101561083757600080fd5b6000805481908190600160a060020a03163314610de657600080fd5b60005460a060020a900460ff1615610dfd57600080fd5b6000805460a060020a60ff02191660a060020a1781558581526004602052604090206001810154909250421015610e3757600092506106f2565b600382015460a060020a900460ff16600114156106ed575060038101805460a060020a60ff02191674030000000000000000000000000000000000000000179055600581015460009060ff161515610ebb5760028201548254610eb491600160a060020a0316906105b43a6105976175308a63ffffffff6104ae16565b9050610ee0565b60015460028301548354610edd92600160a060020a039081169216908761136c565b90505b801515610f085760038201805460a060020a60ff02191660a060020a179055600092506106f2565b6002820154600383015460408051888152600160a060020a039384166020820152919092168183015290517ffc2da483b193ee3021dffb921f0fcb089c9318b30b63250e2e5d0be6ac5ed8469181900360600190a160008581526004602081905260408220828155600180820184905560028201805473ffffffffffffffffffffffffffffffffffffffff1916905560038201805474ffffffffffffffffffffffffffffffffffffffffff19169055918101929092556005909101805460ff1916905592506106f2565b600080548190600160a060020a03163314610fec57600080fd5b60005460a060020a900460ff161561100357600080fd5b506000805460a060020a60ff02191660a060020a90811782558382526004602052604090912060038101549091900460ff16600114156110c25760038101805460a060020a60ff021916740200000000000000000000000000000000000000001790819055600282015460408051868152600160a060020a039283166020820152919092168183015290517fa2cd0f243a44961385e90ee4cca3f1581e1014788936e12115c211265f34fbcb916060908290030190a1600191506110c7565b600091505b506000805460a060020a60ff0219169055919050565b600181565b600054600160a060020a031633146110f957600080fd5b600160a060020a038116151561110e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461118d57600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c6d57600080fd5b60035463ffffffff1681565b600034811061120a57600080fd5b34851461121657600080fd5b34841061122257600080fd5b50604080518881526c01000000000000000000000000600160a060020a03808a1682026020808501919091529089169091026034830152346048830152606882018690528251918290036088018220601f85018290048202830182019093528382526112a4918391869086908190840183828082843750611405945050505050565b6112b381888887346000611555565b505050505050505050565b60008282028315806112da57508284828115156112d757fe5b04145b15156104bd57fe5b60025460009082906112fa818363ffffffff6104ae16565b101561130557600080fd5b600254611318908263ffffffff6104ae16565b600255600160a060020a0385166108fc611338868463ffffffff61164b16565b6040518115909202916000818181858888f19350505050158015611360573d6000803e3d6000fd5b50600195945050505050565b600081600160a060020a03861663a9059cbb8661138f878563ffffffff61164b16565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156113e157600080fd5b505af11580156113f5573d6000803e3d6000fd5b5060019998505050505050505050565b60008054604080517f19045a250000000000000000000000000000000000000000000000000000000081526004810186815260248201928352855160448301528551600160a060020a039094169473dfaf4f7ba8e3af089ebaec4259847049796c2739946319045a2594899489949391926064909101916020860191908190849084905b838110156114a1578181015183820152602001611489565b50505050905090810190601f1680156114ce5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156114ec57600080fd5b505af4158015611500573d6000803e3d6000fd5b505050506040513d602081101561151657600080fd5b5051600160a060020a03161461152b57600080fd5b60008281526004602052604090206003015460a060020a900460ff161561155157600080fd5b5050565b60008681526004602081905260408220600281018054600160a060020a03808b1673ffffffffffffffffffffffffffffffffffffffff199283161790925560038084018054938b169390921692909217905585825591810186905590546115c790429063ffffffff908116906104ae16565b600182015560038101805460a060020a60ff02191660a060020a17905560058101805484151560ff1990911617905560408051898152600160a060020a03808a16602083015288168183015290517fbefa990333ef4d20a2b9cec2b1901be2750b757182f35d2373675ed20d3a0f1f9181900360600190a150959695505050505050565b60008282111561165757fe5b509003905600a165627a7a7230582052d5638c4ae99eae2d83b0c881f8d57d23b00fa3742c7a51ecf44ed1ddee69970029000000000000000000000000611171923b84185e9328827cfaae6630481ecc7a",
  "constructorArguments": "000000000000000000000000611171923b84185e9328827cfaae6630481ecc7a",
  "libraries": [
    {
      "name": "ECRecovery",
      "address": "0xdfaf4f7bA8e3af089EBAEC4259847049796c2739"
    }
  ]
}