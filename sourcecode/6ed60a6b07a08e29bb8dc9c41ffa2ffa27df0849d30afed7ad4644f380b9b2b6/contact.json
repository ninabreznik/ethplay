{
  "address": "0x5caebd3b32e210e85ce3e9d51638b9c445481567",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CarToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-21\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_account) }\n    return size > 0;\n  }\n\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 _tokenId) internal view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(_exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(_exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[email protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (self & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (self & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (self & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (self & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\n\ncontract CarToken is ERC721Token, Ownable {\n    using strings for *;\n    \n    address factory;\n\n    /*\n    * Car Types:\n    * 0 - Unknown\n    * 1 - SUV\n    * 2 - Truck\n    * 3 - Hovercraft\n    * 4 - Tank\n    * 5 - Lambo\n    * 6 - Buggy\n    * 7 - midgrade type 2\n    * 8 - midgrade type 3\n    * 9 - Hatchback\n    * 10 - regular type 2\n    * 11 - regular type 3\n    */\n    uint public constant UNKNOWN_TYPE = 0;\n    uint public constant SUV_TYPE = 1;\n    uint public constant TANKER_TYPE = 2;\n    uint public constant HOVERCRAFT_TYPE = 3;\n    uint public constant TANK_TYPE = 4;\n    uint public constant LAMBO_TYPE = 5;\n    uint public constant DUNE_BUGGY = 6;\n    uint public constant MIDGRADE_TYPE2 = 7;\n    uint public constant MIDGRADE_TYPE3 = 8;\n    uint public constant HATCHBACK = 9;\n    uint public constant REGULAR_TYPE2 = 10;\n    uint public constant REGULAR_TYPE3 = 11;\n    \n    string public constant METADATA_URL = \"https://vault.warriders.com/\";\n    \n    //Number of premium type cars\n    uint public PREMIUM_TYPE_COUNT = 5;\n    //Number of midgrade type cars\n    uint public MIDGRADE_TYPE_COUNT = 3;\n    //Number of regular type cars\n    uint public REGULAR_TYPE_COUNT = 3;\n\n    mapping(uint256 => uint256) public maxBznTankSizeOfPremiumCarWithIndex;\n    mapping(uint256 => uint256) public maxBznTankSizeOfMidGradeCarWithIndex;\n    mapping(uint256 => uint256) public maxBznTankSizeOfRegularCarWithIndex;\n\n    /**\n     * Whether any given car (tokenId) is special\n     */\n    mapping(uint256 => bool) public isSpecial;\n    /**\n     * The type of any given car (tokenId)\n     */\n    mapping(uint256 => uint) public carType;\n    /**\n     * The total supply for any given type (int)\n     */\n    mapping(uint => uint256) public carTypeTotalSupply;\n    /**\n     * The current supply for any given type (int)\n     */\n    mapping(uint => uint256) public carTypeSupply;\n    /**\n     * Whether any given type (int) is special\n     */\n    mapping(uint => bool) public isTypeSpecial;\n\n    /**\n    * How much BZN any given car (tokenId) can hold\n    */\n    mapping(uint256 => uint256) public tankSizes;\n    \n    /**\n     * Given any car type (uint), get the max tank size for that type (uint256)\n     */\n    mapping(uint => uint256) public maxTankSizes;\n    \n    mapping (uint => uint[]) public premiumTotalSupplyForCar;\n    mapping (uint => uint[]) public midGradeTotalSupplyForCar;\n    mapping (uint => uint[]) public regularTotalSupplyForCar;\n\n    modifier onlyFactory {\n        require(msg.sender == factory, \"Not authorized\");\n        _;\n    }\n\n    constructor(address factoryAddress) public ERC721Token(\"WarRiders\", \"WR\") {\n        factory = factoryAddress;\n\n        carTypeTotalSupply[UNKNOWN_TYPE] = 0; //Unknown\n        carTypeTotalSupply[SUV_TYPE] = 20000; //SUV\n        carTypeTotalSupply[TANKER_TYPE] = 9000; //Tanker\n        carTypeTotalSupply[HOVERCRAFT_TYPE] = 600; //Hovercraft\n        carTypeTotalSupply[TANK_TYPE] = 300; //Tank\n        carTypeTotalSupply[LAMBO_TYPE] = 100; //Lambo\n        carTypeTotalSupply[DUNE_BUGGY] = 40000; //migrade type 1\n        carTypeTotalSupply[MIDGRADE_TYPE2] = 50000; //midgrade type 2\n        carTypeTotalSupply[MIDGRADE_TYPE3] = 60000; //midgrade type 3\n        carTypeTotalSupply[HATCHBACK] = 200000; //regular type 1\n        carTypeTotalSupply[REGULAR_TYPE2] = 300000; //regular type 2\n        carTypeTotalSupply[REGULAR_TYPE3] = 500000; //regular type 3\n        \n        maxTankSizes[SUV_TYPE] = 200; //SUV tank size\n        maxTankSizes[TANKER_TYPE] = 450; //Tanker tank size\n        maxTankSizes[HOVERCRAFT_TYPE] = 300; //Hovercraft tank size\n        maxTankSizes[TANK_TYPE] = 200; //Tank tank size\n        maxTankSizes[LAMBO_TYPE] = 250; //Lambo tank size\n        maxTankSizes[DUNE_BUGGY] = 120; //migrade type 1 tank size\n        maxTankSizes[MIDGRADE_TYPE2] = 110; //midgrade type 2 tank size\n        maxTankSizes[MIDGRADE_TYPE3] = 100; //midgrade type 3 tank size\n        maxTankSizes[HATCHBACK] = 90; //regular type 1 tank size\n        maxTankSizes[REGULAR_TYPE2] = 70; //regular type 2 tank size\n        maxTankSizes[REGULAR_TYPE3] = 40; //regular type 3 tank size\n        \n        maxBznTankSizeOfPremiumCarWithIndex[1] = 200; //SUV tank size\n        maxBznTankSizeOfPremiumCarWithIndex[2] = 450; //Tanker tank size\n        maxBznTankSizeOfPremiumCarWithIndex[3] = 300; //Hovercraft tank size\n        maxBznTankSizeOfPremiumCarWithIndex[4] = 200; //Tank tank size\n        maxBznTankSizeOfPremiumCarWithIndex[5] = 250; //Lambo tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[1] = 100; //migrade type 1 tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[2] = 110; //midgrade type 2 tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[3] = 120; //midgrade type 3 tank size\n        maxBznTankSizeOfRegularCarWithIndex[1] = 40; //regular type 1 tank size\n        maxBznTankSizeOfRegularCarWithIndex[2] = 70; //regular type 2 tank size\n        maxBznTankSizeOfRegularCarWithIndex[3] = 90; //regular type 3 tank size\n\n        isTypeSpecial[HOVERCRAFT_TYPE] = true;\n        isTypeSpecial[TANK_TYPE] = true;\n        isTypeSpecial[LAMBO_TYPE] = true;\n    }\n\n    function isCarSpecial(uint256 tokenId) public view returns (bool) {\n        return isSpecial[tokenId];\n    }\n\n    function getCarType(uint256 tokenId) public view returns (uint) {\n        return carType[tokenId];\n    }\n\n    function mint(uint256 _tokenId, string _metadata, uint cType, uint256 tankSize, address newOwner) public onlyFactory {\n        //Since any invalid car type would have a total supply of 0 \n        //This require will also enforce that a valid cType is given\n        require(carTypeSupply[cType] < carTypeTotalSupply[cType], \"This type has reached total supply\");\n        \n        //This will enforce the tank size is less than the max\n        require(tankSize <= maxTankSizes[cType], \"Tank size provided bigger than max for this type\");\n        \n        if (isPremium(cType)) {\n            premiumTotalSupplyForCar[cType].push(_tokenId);\n        } else if (isMidGrade(cType)) {\n            midGradeTotalSupplyForCar[cType].push(_tokenId);\n        } else {\n            regularTotalSupplyForCar[cType].push(_tokenId);\n        }\n\n        super._mint(newOwner, _tokenId);\n        super._setTokenURI(_tokenId, _metadata);\n\n        carType[_tokenId] = cType;\n        isSpecial[_tokenId] = isTypeSpecial[cType];\n        carTypeSupply[cType] = carTypeSupply[cType] + 1;\n        tankSizes[_tokenId] = tankSize;\n    }\n    \n    function isPremium(uint cType) public pure returns (bool) {\n        return cType == SUV_TYPE || cType == TANKER_TYPE || cType == HOVERCRAFT_TYPE || cType == TANK_TYPE || cType == LAMBO_TYPE;\n    }\n    \n    function isMidGrade(uint cType) public pure returns (bool) {\n        return cType == DUNE_BUGGY || cType == MIDGRADE_TYPE2 || cType == MIDGRADE_TYPE3;\n    }\n    \n    function isRegular(uint cType) public pure returns (bool) {\n        return cType == HATCHBACK || cType == REGULAR_TYPE2 || cType == REGULAR_TYPE3;\n    }\n    \n    function getTotalSupplyForType(uint cType) public view returns (uint256) {\n        return carTypeSupply[cType];\n    }\n    \n    function getPremiumCarsForVariant(uint variant) public view returns (uint[]) {\n        return premiumTotalSupplyForCar[variant];\n    }\n    \n    function getMidgradeCarsForVariant(uint variant) public view returns (uint[]) {\n        return midGradeTotalSupplyForCar[variant];\n    }\n\n    function getRegularCarsForVariant(uint variant) public view returns (uint[]) {\n        return regularTotalSupplyForCar[variant];\n    }\n\n    function getPremiumCarSupply(uint variant) public view returns (uint) {\n        return premiumTotalSupplyForCar[variant].length;\n    }\n    \n    function getMidgradeCarSupply(uint variant) public view returns (uint) {\n        return midGradeTotalSupplyForCar[variant].length;\n    }\n\n    function getRegularCarSupply(uint variant) public view returns (uint) {\n        return regularTotalSupplyForCar[variant].length;\n    }\n    \n    function exists(uint256 _tokenId) public view returns (bool) {\n        return super._exists(_tokenId);\n    }\n}",
  "bytecode": "60806040526005600e556003600f5560036010553480156200002057600080fd5b50604051602080620026dd83398101604081815291518282018352600982527f57617252696465727300000000000000000000000000000000000000000000006020808401919091528351808501909452600284527f57520000000000000000000000000000000000000000000000000000000000009084015291620000cf7f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006200074a810204565b620001037f80ac58cd000000000000000000000000000000000000000000000000000000006401000000006200074a810204565b815162000118906005906020850190620007b7565b5080516200012e906006906020840190620007b7565b50620001637f780e9d63000000000000000000000000000000000000000000000000000000006401000000006200074a810204565b620001977f5b5e139f000000000000000000000000000000000000000000000000000000006401000000006200074a810204565b5050600c805433600160a060020a031991821617909155600d8054909116600160a060020a039290921691909117905560007f0263c2b778d062355049effc2dece97bc6547ff8a88a3258daa512061c2153dd819055614e207f4c4dc693d7db52f85fe052106f4b4b920e78e8ef37dee82878a60ab8585faf49556123287fcaff291fe014adc6b72a172705750b4cabe8f8667664d2924a166caab2885648556102587ff06d282f967055cb1eee17e04aa005b9682a620f4bbcfaee55ba78607a3d87ae5561012c7fec061709de2491458f4c981032059d7d19b0e55f45018bac6b3e660bdc959a5981905560647f5696377e725b42a372ecc45f0fbdab5e9555865aef54619ad9381892f667bbf0819055619c407fc6a239f207aea309a1b4879cb5411b8facfc2bc1e4cc4717ff2598676c399b5f5561c3507f5c9294642c77fdf0ce4b0f45159c977165b1ec2ef3bb94ee3e2a496634c781e85561ea607f5d722ae86c7aff0f95f426cf86f75793e8cd1a526603df14563c190f75fd2ef35562030d407f650982f08e47212452de30f662e413cf6044e641dedc09b52c1617e804a2611e55620493e07fd5b9797c47f98351da0d9dc8805f06430ade47345ddb9b2bd6f346a04809cc41556207a1207fcfa8b17cfe829ccfb82a1b8bc946a78d914318562253e01c04a5bbac5c20f86b5560c87ff88cd8d612926ebb404e40725c01084b6e9b3ce0344cde068570342cbd448c618190556101c27f4c287b3e2c2cb129ae3ba596d613d760b15affdac7242e12903c37a886ea1c4f8190557f4ac83fca211703e3ddb90093cd219714e5e3715bf0b4fd15b0441390534a24e28490557f06b28f262ad931a15c9e47271fc159a891b2bcb0da2659cac5bbfed4886cf26e82905560fa7f82f07edc09f3a46c1925d02252613a7fcc7be7d03b538b0c268df85f2f13a7ab81905560787fe7513fcd4f864b78baf560f46c15980b6aa41b90911efc4ce7454b83cce613b1819055606e7f2247382acc746a936c6b9b694445e53b16ccce9ebaa44dd1ce1d5f0641b0797b8190557f687151c9c7964c905d515053234445b7256d6eb52f0f0fb698ac00a08a410abf869055605a7f3a9dcd6f76534b067931c1cc4a24cb9c117c7d95c716bce6d59bb4825bc6713381905560467fdbe7ff1220189de7e6173da9d377e212c5f94fd76a3505f188b6c362d3973d9d81905560287fcbecd97c0264932d894d2765644768ec1239a8c0656fd9914fd89b4e0c9317458190557f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b5528890557f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c628969096557f9bfbaa59f8e10e7868f8b402de9d605a390c45ddaebd8c9de3c6f31e733c87ff989098557f251164fe1d8864fe5e86082eae9c288bc2b58695a4d28538dfe86e9e4f175585959095557fc550213cee30afd5e67ccba7be3d381bbc169034ae08eb3ec9168caca9fe55e7929092557f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a3949094557f8e1fee8c88a9e04123b21e90cae2727a7715bf522a1e46eb5934ccd05203a6b2557f0f36ad39aee03e7108cc48f54934702a5f0d4066f10344cebf8198978d86976a929092557f4155c2f711f2cdd34f8262ab8fb9b7020a700fe7b6948222152f7670d1fdf34d919091557f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed1923919091557f0d2a6872ef858a7f8ead18dc4f3f2e8d35c853d47e2816cbb9cdd49202554e0c5560186020527f7a6340a7048c03c55288da75abed74d2ce9194201bafb03be53c0a7cca591495805460ff1990811660019081179092557f5b650d93b25a5c652bc6f9215f522b521daf6d36977dcec1343c2a8310b869d6805482168317905560059092527f2288853b49db4f36075bf4a8cfdae4e5e3b39b7b03937d0a9148b051a6f64c5c80549092161790556200085c565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200077a57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007fa57805160ff19168380011785556200082a565b828001600101855582156200082a579182015b828111156200082a5782518255916020019190600101906200080d565b50620008389291506200083c565b5090565b6200085991905b8082111562000838576000815560010162000843565b90565b611e71806200086c6000396000f3006080604052600436106102ea5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146102ef578063029bca781461032557806306f94c7d1461033d57806306fdde0314610367578063081812fc146103f1578063085ff39a14610425578063095ea7b31461048d5780630f092c44146104b357806311e847b6146104c857806318160ddd146104dd57806319fa8f50146104f25780631dbdd7921461052457806320b748f41461053957806323b872dd1461054e5780632423a088146105785780632f745c591461058d5780632fc60405146105b1578063310f4cdd146105c657806332da45bc1461063a5780633b58d5d7146106525780633c0dabdb1461066a5780633cb3ea68146106825780634060d9f51461069757806342842e0e146106af5780634d6c3427146106d95780634f558e79146106ee5780634f6ccce7146107065780635c9a7a8b1461071e5780636352211e1461073657806368f017461461074e57806370a0823114610766578063715018a61461078757806373d289951461079c5780637444b227146107b45780637c6aafd1146107cc5780637f5ba3cc146107e4578063867befba146107f95780638da5cb5b1461080e57806391bb6f521461082357806395d89b411461083b57806397e28ba514610850578063a22c81ec14610868578063a22cb4651461087d578063a3715d1d146108a3578063a3804052146108be578063ab7faa6e146108d9578063af4e4494146108f4578063b850ae3614610909578063b88d4fde14610921578063c4c68b4414610990578063c5ab6e35146109a8578063c87b56dd146109c0578063cba57e38146109d8578063cf64da7f146109f0578063d2b001fb14610a05578063d748c2e414610a1a578063d99969df14610a32578063dceda27b14610a47578063e1911d7014610a5f578063e84ac26214610a74578063e97ebd3f14610a8c578063e985e9c514610aa4578063f2fde38b14610acb575b600080fd5b3480156102fb57600080fd5b50610311600160e060020a031960043516610aec565b604080519115158252519081900360200190f35b34801561033157600080fd5b50610311600435610b0b565b34801561034957600080fd5b50610355600435610b43565b60408051918252519081900360200190f35b34801561037357600080fd5b5061037c610b55565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103b657818101518382015260200161039e565b50505050905090810190601f1680156103e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103fd57600080fd5b50610409600435610bec565b60408051600160a060020a039092168252519081900360200190f35b34801561043157600080fd5b5061043d600435610c07565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610479578181015183820152602001610461565b505050509050019250505060405180910390f35b34801561049957600080fd5b506104b1600160a060020a0360043516602435610c69565b005b3480156104bf57600080fd5b50610355610d1f565b3480156104d457600080fd5b50610355610d24565b3480156104e957600080fd5b50610355610d29565b3480156104fe57600080fd5b50610507610d2f565b60408051600160e060020a03199092168252519081900360200190f35b34801561053057600080fd5b50610355610d53565b34801561054557600080fd5b50610355610d59565b34801561055a57600080fd5b506104b1600160a060020a0360043581169060243516604435610d5e565b34801561058457600080fd5b50610355610dec565b34801561059957600080fd5b50610355600160a060020a0360043516602435610df1565b3480156105bd57600080fd5b50610355610e3e565b3480156105d257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526104b19583359536956044949193909101919081908401838280828437509497505084359550505060208301359260400135600160a060020a03169150610e439050565b34801561064657600080fd5b50610355600435611109565b34801561065e57600080fd5b5061035560043561111b565b34801561067657600080fd5b5061035560043561112d565b34801561068e57600080fd5b5061035561113f565b3480156106a357600080fd5b50610311600435611144565b3480156106bb57600080fd5b506104b1600160a060020a0360043581169060243516604435611159565b3480156106e557600080fd5b5061035561117a565b3480156106fa57600080fd5b50610311600435611180565b34801561071257600080fd5b5061035560043561118b565b34801561072a57600080fd5b506103556004356111c0565b34801561074257600080fd5b506104096004356111d2565b34801561075a57600080fd5b506103556004356111f6565b34801561077257600080fd5b50610355600160a060020a0360043516611208565b34801561079357600080fd5b506104b161123b565b3480156107a857600080fd5b506103116004356112a9565b3480156107c057600080fd5b5061043d6004356112c7565b3480156107d857600080fd5b5061043d600435611327565b3480156107f057600080fd5b50610355611387565b34801561080557600080fd5b5061035561138c565b34801561081a57600080fd5b50610409611391565b34801561082f57600080fd5b506103116004356113a0565b34801561084757600080fd5b5061037c6113b5565b34801561085c57600080fd5b50610355600435611416565b34801561087457600080fd5b50610355611428565b34801561088957600080fd5b506104b1600160a060020a0360043516602435151561142d565b3480156108af57600080fd5b506103556004356024356114b1565b3480156108ca57600080fd5b506103556004356024356114e1565b3480156108e557600080fd5b506103556004356024356114fc565b34801561090057600080fd5b50610355611517565b34801561091557600080fd5b5061031160043561151c565b34801561092d57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526104b194600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061153a9650505050505050565b34801561099c57600080fd5b50610355600435611562565b3480156109b457600080fd5b50610355600435611574565b3480156109cc57600080fd5b5061037c600435611586565b3480156109e457600080fd5b50610311600435611631565b3480156109fc57600080fd5b50610355611646565b348015610a1157600080fd5b5061035561164b565b348015610a2657600080fd5b50610355600435611651565b348015610a3e57600080fd5b50610355611663565b348015610a5357600080fd5b50610355600435611668565b348015610a6b57600080fd5b5061037c61167a565b348015610a8057600080fd5b506103556004356116b1565b348015610a9857600080fd5b506103556004356116c3565b348015610ab057600080fd5b50610311600160a060020a03600435811690602435166116d5565b348015610ad757600080fd5b506104b1600160a060020a0360043516611703565b600160e060020a03191660009081526020819052604090205460ff1690565b60006001821480610b1c5750600282145b80610b275750600382145b80610b325750600482145b80610b3d5750600582145b92915050565b601a6020526000908152604090205481565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b6000818152601b6020908152604091829020805483518184028101840190945280845260609392830182828015610c5d57602002820191906000526020600020905b815481526020019060010190808311610c49575b50505050509050919050565b6000610c74826111d2565b9050600160a060020a038381169082161415610c8f57600080fd5b33600160a060020a0382161480610cab5750610cab81336116d5565b1515610cb657600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600881565b600981565b60095490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600f5481565b600b81565b610d683382611726565b1515610d7357600080fd5b600160a060020a0382161515610d8857600080fd5b610d928382611785565b610d9c83826117f6565b610da682826118fd565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081565b6000610dfc83611208565b8210610e0757600080fd5b600160a060020a0383166000908152600760205260409020805483908110610e2b57fe5b9060005260206000200154905092915050565b600481565b600d54600160a060020a03163314610ebc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b60008381526016602090815260408083205460179092529091205410610f6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f54686973207479706520686173207265616368656420746f74616c207375707060448201527f6c79000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000838152601a602052604090205482111561100c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f54616e6b2073697a652070726f766964656420626967676572207468616e206d60448201527f617820666f722074686973207479706500000000000000000000000000000000606482015290519081900360840190fd5b61101583610b0b565b15611040576000838152601b6020908152604082208054600181018255908352912001859055611096565b611049836112a9565b15611074576000838152601c6020908152604082208054600181018255908352912001859055611096565b6000838152601d60209081526040822080546001810182559083529120018590555b6110a08186611946565b6110aa8585611995565b506000848152601560209081526040808320859055848352601882528083205487845260148352818420805460ff191660ff90921615159190911790559382526017815283822080546001019055948152601990945292209190915550565b60156020526000908152604090205481565b6000908152601b602052604090205490565b6000908152601c602052604090205490565b600581565b60009081526014602052604090205460ff1690565b611175838383602060405190810160405280600081525061153a565b505050565b60105481565b6000610b3d826119c8565b6000611195610d29565b82106111a057600080fd5b60098054839081106111ae57fe5b90600052602060002001549050919050565b60009081526015602052604090205490565b600081815260016020526040812054600160a060020a0316801515610b3d57600080fd5b60176020526000908152604090205481565b6000600160a060020a038216151561121f57600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a0316331461125257600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b600060068214806112ba5750600782145b80610b3d57505060081490565b6000818152601c6020908152604091829020805483518184028101840190945280845260609392830182828015610c5d5760200282019190600052602060002090815481526020019060010190808311610c495750505050509050919050565b6000818152601d6020908152604091829020805483518184028101840190945280845260609392830182828015610c5d5760200282019190600052602060002090815481526020019060010190808311610c495750505050509050919050565b600a81565b600181565b600c54600160a060020a031681565b60186020526000908152604090205460ff1681565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610be15780601f10610bb657610100808354040283529160200191610be1565b60136020526000908152604090205481565b600781565b600160a060020a03821633141561144357600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b601c602052816000526040600020818154811015156114cc57fe5b90600052602060002001600091509150505481565b601b602052816000526040600020818154811015156114cc57fe5b601d602052816000526040600020818154811015156114cc57fe5b600281565b6000600982148061152d5750600a82145b80610b3d575050600b1490565b611545848484610d5e565b611551848484846119e5565b151561155c57600080fd5b50505050565b60009081526017602052604090205490565b60166020526000908152604090205481565b6060611591826119c8565b151561159c57600080fd5b6000828152600b602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610c5d5780601f1061160457610100808354040283529160200191610c5d565b820191906000526020600020905b8154815290600101906020018083116116125750939695505050505050565b60146020526000908152604090205460ff1681565b600381565b600e5481565b60196020526000908152604090205481565b600681565b6000908152601d602052604090205490565b60408051808201909152601c81527f68747470733a2f2f7661756c742e7761727269646572732e636f6d2f00000000602082015281565b60116020526000908152604090205481565b60126020526000908152604090205481565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600160a060020a0316331461171a57600080fd5b61172381611b52565b50565b600080611732836111d2565b905080600160a060020a031684600160a060020a0316148061176d575083600160a060020a031661176284610bec565b600160a060020a0316145b8061177d575061177d81856116d5565b949350505050565b81600160a060020a0316611798826111d2565b600160a060020a0316146117ab57600080fd5b600081815260026020526040902054600160a060020a0316156117f2576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b60008060006118058585611bd0565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061184090600163ffffffff611c6616565b600160a060020a03861660009081526007602052604090208054919350908390811061186857fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156118a857fe5b6000918252602080832090910192909255600160a060020a03871681526007909152604090208054906118df906000198301611d89565b50600093845260086020526040808520859055908452909220555050565b60006119098383611c7d565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6119508282611d0d565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b61199e826119c8565b15156119a957600080fd5b6000828152600b60209081526040909120825161117592840190611dad565b600090815260016020526040902054600160a060020a0316151590565b6000806119fa85600160a060020a0316611d68565b1515611a095760019150611b49565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015611a9c578181015183820152602001611a84565b50505050905090810190601f168015611ac95780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611aeb57600080fd5b505af1158015611aff573d6000803e3d6000fd5b505050506040513d6020811015611b1557600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a0381161515611b6757600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81600160a060020a0316611be3826111d2565b600160a060020a031614611bf657600080fd5b600160a060020a038216600090815260036020526040902054611c2090600163ffffffff611c6616565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008083831115611c7657600080fd5b5050900390565b600081815260016020526040902054600160a060020a031615611c9f57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054611ced91611d70565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a0382161515611d2257600080fd5b611d2c82826118fd565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b600082820183811015611d8257600080fd5b9392505050565b81548183558181111561117557600083815260209020611175918101908301611e2b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611dee57805160ff1916838001178555611e1b565b82800160010185558215611e1b579182015b82811115611e1b578251825591602001919060010190611e00565b50611e27929150611e2b565b5090565b610be991905b80821115611e275760008155600101611e315600a165627a7a72305820473b9a412b765137470a2795f1072f6b585fb45d4e9ad8b54ba1897071f676880029000000000000000000000000e6963576e14aad7743ef627b1ada417fc4c8d321",
  "constructorArguments": "000000000000000000000000e6963576e14aad7743ef627b1ada417fc4c8d321"
}