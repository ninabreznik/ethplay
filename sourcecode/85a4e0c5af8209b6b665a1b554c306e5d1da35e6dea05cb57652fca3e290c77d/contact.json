{
  "address": "0x78b37409628e10df0b661c6b205b872a4df8dd6e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Account",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity 0.4.24;\n\ncontract SelfAuthorized {\n    modifier authorized() {\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\n        _;\n    }\n}\n\n\ncontract ErrorUtils {\n\n    event LogError(string methodSig, string errMsg);\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\n\n}\n\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\n    event  Deposit(address indexed _owner, uint _value);\n    event  Withdrawal(address indexed _owner, uint _value);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\ncontract Utils {\n\n    modifier addressValid(address _address) {\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\n        _;\n    }\n\n}\n\n\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ninterface ERC20 {\n\n    function name() external view returns(string);\n    function symbol() external view returns(string);\n    function decimals() external view returns(uint8);\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address tokenOwner) external view returns (uint balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract MasterCopy is SelfAuthorized {\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n  // It should also always be ensured that the address is stored alone (uses a full word)\n    address masterCopy;\n\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\n  /// @param _masterCopy New contract address.\n    function changeMasterCopy(address _masterCopy)\n        public\n        authorized\n    {\n        // Master copy address cannot be null.\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n}\n\n\ncontract Config is DSNote, DSAuth, Utils {\n\n    WETH9 public weth9;\n    mapping (address => bool) public isAccountHandler;\n    mapping (address => bool) public isAdmin;\n    address[] public admins;\n    bool public disableAdminControl = false;\n    \n    event LogAdminAdded(address indexed _admin, address _by);\n    event LogAdminRemoved(address indexed _admin, address _by);\n\n    constructor() public {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    modifier onlyAdmin(){\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function setWETH9\n    (\n        address _weth9\n    ) \n        public\n        auth\n        note\n        addressValid(_weth9) \n    {\n        weth9 = WETH9(_weth9);\n    }\n\n    function setAccountHandler\n    (\n        address _accountHandler,\n        bool _isAccountHandler\n    )\n        public\n        auth\n        note\n        addressValid(_accountHandler)\n    {\n        isAccountHandler[_accountHandler] = _isAccountHandler;\n    }\n\n    function toggleAdminsControl() \n        public\n        auth\n        note\n    {\n        disableAdminControl = !disableAdminControl;\n    }\n\n    function isAdminValid(address _admin)\n        public\n        view\n        returns (bool)\n    {\n        if(disableAdminControl) {\n            return true;\n        } else {\n            return isAdmin[_admin];\n        }\n    }\n\n    function getAllAdmins()\n        public\n        view\n        returns(address[])\n    {\n        return admins;\n    }\n\n    function addAdmin\n    (\n        address _admin\n    )\n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\n\n        admins.push(_admin);\n        isAdmin[_admin] = true;\n\n        emit LogAdminAdded(_admin, msg.sender);\n    }\n\n    function removeAdmin\n    (\n        address _admin\n    ) \n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\n\n        isAdmin[_admin] = false;\n\n        for (uint i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == _admin) {\n                admins[i] = admins[admins.length - 1];\n                admins.length -= 1;\n                break;\n            }\n        }\n\n        emit LogAdminRemoved(_admin, msg.sender);\n    }\n}\n\n\n\nlibrary ECRecovery {\n\n    function recover(bytes32 _hash, bytes _sig)\n        internal\n        pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}\n\n\ncontract Utils2 {\n    using ECRecovery for bytes32;\n    \n    function _recoverSigner(bytes32 _hash, bytes _signature) \n        internal\n        pure\n        returns(address _signer)\n    {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n}\n\n\n\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\n\n    address[] public users;\n    mapping (address => bool) public isUser;\n    mapping (bytes32 => bool) public actionCompleted;\n\n    WETH9 public weth9;\n    Config public config;\n    bool public isInitialized = false;\n\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\n    event LogUserAdded(address indexed user, address by);\n    event LogUserRemoved(address indexed user, address by);\n    event LogImplChanged(address indexed newImpl, address indexed oldImpl);\n\n    modifier initialized() {\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!isInitialized, \"Account::_ ACCOUNT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    modifier userExists(address _user) {\n        require(isUser[_user], \"Account::_ INVALID_USER\");\n        _;\n    }\n\n    modifier userDoesNotExist(address _user) {\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Account::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    modifier onlyHandler(){\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\n        _;\n    }\n\n    function init(address _user, address _config)\n        public \n        notInitialized\n    {\n        users.push(_user);\n        isUser[_user] = true;\n        config = Config(_config);\n        weth9 = config.weth9();\n        isInitialized = true;\n    }\n    \n    function getAllUsers() public view returns (address[]) {\n        return users;\n    }\n\n    function balanceFor(address _token) public view returns (uint _balance){\n        _balance = ERC20(_token).balanceOf(this);\n    }\n    \n    function transferBySystem\n    (   \n        address _token,\n        address _to,\n        uint _value\n    ) \n        external \n        onlyHandler\n        note \n        initialized\n    {\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n        ERC20(_token).transfer(_to, _value);\n\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\n    }\n    \n    function transferByUser\n    (   \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt,\n        bytes _signature\n    )\n        external\n        addressValid(_to)\n        note\n        initialized\n        onlyAdmin\n    {\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        if(ERC20(_token).balanceOf(this) < _value){\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n        \n        if (_token == address(weth9)) {\n            weth9.withdraw(_value);\n            _to.transfer(_value);\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTransferByUser(_token, _to, _value, signer);\n    }\n\n    function addUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_user)\n        userDoesNotExist(_user)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        users.push(_user);\n        isUser[_user] = true;\n\n        emit LogUserAdded(_user, signer);\n    }\n\n    function removeUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        note\n        userExists(_user) \n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n        \n        if(users.length == 1){\n            emit LogError(\"Account::removeUser\",  \"ACC_SHOULD_HAVE_ATLEAST_ONE_USER\");\n            return;\n        }\n        \n        if(!isUser[signer]){\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        actionCompleted[actionHash] = true;\n\n        // should delete value from isUser map? delete isUser[_user]?\n        isUser[_user] = false;\n        for (uint i = 0; i < users.length - 1; i++) {\n            if (users[i] == _user) {\n                users[i] = users[users.length - 1];\n                users.length -= 1;\n                break;\n            }\n        }\n\n        emit LogUserRemoved(_user, signer);\n    }\n\n    function _getTransferActionHash\n    ( \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _token,\n                _to,\n                _value,\n                _salt\n            )\n        );\n    }\n\n    function _getUserActionHash\n    ( \n        address _user,\n        string _action,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _user,\n                _action,\n                _salt\n            )\n        );\n    }\n\n    // to directly send ether to contract\n    function() external payable {\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\n\n        if(msg.sender != address(weth9)){\n            weth9.deposit.value(msg.value)();\n        }\n    }\n\n    function changeImpl\n    (\n        address _to,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_to)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_to, \"CHANGE_ACCOUNT_IMPLEMENTATION\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::changeImpl\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::changeImpl\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        address oldImpl = masterCopy;\n        this.changeMasterCopy(_to);\n        \n        emit LogImplChanged(_to, oldImpl);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transferByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"actionCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth9\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceFor\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"changeImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"changeMasterCopy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBySystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogTransferBySystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogTransferByUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldImpl\",\"type\":\"address\"}],\"name\":\"LogImplChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bytes32Value\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogErrorWithHintBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressValue\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"methodSig\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"LogErrorWithHintAddress\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "60806040526005805460a060020a60ff021916905534801561002057600080fd5b506126ca806100306000396000f3006080604052600436106100c15763ffffffff60e060020a6000350416630b94a94581146101d7578063365b98b214610214578063392e53cd146102485780634209fff1146102715780634d41bc8e1461029257806350879c1c146102aa578063556849ea146102bf5780636a44f65f146102f2578063792280c31461032357806379502c55146103545780637de7edef1461036957806393ef43df1461038a578063b91ab1a6146103b4578063e2842d79146103e5578063f09a40161461044a575b361580156100cf5750600034115b151561014b576040805160e560020a62461bcd02815260206004820152602860248201527f4163636f756e743a3a66616c6c6261636b20494e56414c49445f45544845525f60448201527f5452414e53464552000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454600160a060020a031633146101d55760048054604080517fd0e30db00000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263d0e30db0923492808301926000929182900301818588803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b50505050505b005b3480156101e357600080fd5b506101d5600160a060020a036004803582169160248035909116916044359160643591608435918201910135610471565b34801561022057600080fd5b5061022c600435610b29565b60408051600160a060020a039092168252519081900360200190f35b34801561025457600080fd5b5061025d610b51565b604080519115158252519081900360200190f35b34801561027d57600080fd5b5061025d600160a060020a0360043516610b61565b34801561029e57600080fd5b5061025d600435610b76565b3480156102b657600080fd5b5061022c610b8b565b3480156102cb57600080fd5b506102e0600160a060020a0360043516610b9a565b60408051918252519081900360200190f35b3480156102fe57600080fd5b506101d560048035600160a060020a0316906024803591604435918201910135610c30565b34801561032f57600080fd5b506101d560048035600160a060020a031690602480359160443591820191013561114a565b34801561036057600080fd5b5061022c6115ac565b34801561037557600080fd5b506101d5600160a060020a03600435166115bb565b34801561039657600080fd5b506101d5600160a060020a03600435811690602435166044356116ec565b3480156103c057600080fd5b506101d560048035600160a060020a0316906024803591604435918201910135611a70565b3480156103f157600080fd5b506103fa611ffa565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561043657818101518382015260200161041e565b505050509050019250505060405180910390f35b34801561045657600080fd5b506101d5600160a060020a036004358116906024351661205d565b60008086600160a060020a03811615156104d5576040805160e560020a62461bcd02815260206004820152601860248201527f5574696c733a3a5f20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a460055460a060020a900460ff161515610585576040805160e560020a62461bcd028152602060048201526022602482015260008051602061263f833981519152604482015260f260020a61115102606482015290519081900360840190fd5b6005546040805160e060020a639c14ee290281523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b1580156105d557600080fd5b505af11580156105e9573d6000803e3d6000fd5b505050506040513d60208110156105ff57600080fd5b50511515610645576040805160e560020a62461bcd028152602060048201819052602482015260008051602061261f833981519152604482015290519081900360640190fd5b6106518b8b8b8b61223a565b60008181526003602052604090205490955060ff16156106e057604080518181526017818301527f4163636f756e743a3a7472616e73666572427955736572000000000000000000606082015260806020820181905260189082015260008051602061265f83398151915260a0820152905160008051602061267f8339815191529181900360c00190a1610b1c565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518a91600160a060020a038e16916370a08231916024808201926020929091908290030181600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d602081101561076e57600080fd5b505110156107fd57604080518181526017818301527f4163636f756e743a3a7472616e736665724279557365720000000000000000006060820152608060208201819052601f908201527f494e53554646494349454e545f42414c414e43455f494e5f4143434f554e540060a0820152905160008051602061267f8339815191529181900360c00190a1610b1c565b6108378588888080601f016020809104026020016040519081016040528093929190818152602001838380828437506122fa945050505050565b600160a060020a03811660009081526002602052604090205490945060ff1615156108df57604080518181526017818301527f4163636f756e743a3a7472616e7366657242795573657200000000000000000060608201526080602082018190526022908201526000805160206125ff83398151915260a082015260f260020a6113950260c0820152905160008051602061267f8339815191529181900360e00190a1610b1c565b6000858152600360205260409020805460ff19166001179055600454600160a060020a038c8116911614156109c65760048054604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081529283018c905251600160a060020a0390911691632e1a7d4d91602480830192600092919082900301818387803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b5050604051600160a060020a038d1692508b156108fc0291508b906000818181858888f193505050501580156109c0573d6000803e3d6000fd5b50610ad1565b8a600160a060020a031663a9059cbb8b8b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505050506040513d6020811015610a5357600080fd5b50511515610ad1576040805160e560020a62461bcd02815260206004820152602d60248201527f4163636f756e743a3a7472616e7366657242795573657220544f4b454e5f545260448201527f414e534645525f4641494c454400000000000000000000000000000000000000606482015290519081900360840190fd5b604080518a8152600160a060020a0386811660208301528251818e1693918f16927fd035e49162c5fa2d7dd7e4e4cf1b24c64f8169a3ea33156ea6e0e02349be61e592908290030190a35b5050505050505050505050565b6001805482908110610b3757fe5b600091825260209091200154600160a060020a0316905081565b60055460a060020a900460ff1681565b60026020526000908152604090205460ff1681565b60036020526000908152604090205460ff1681565b600454600160a060020a031681565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a082319160248082019260209290919082900301818787803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050506040513d6020811015610c2857600080fd5b505192915050565b6040805134808252602082018381523693830184905260009384936004359360243593849386933393600160e060020a03198a35169390928a929091606082018484808284376040519201829003965090945050505050a487600160a060020a0381161515610ce9576040805160e560020a62461bcd02815260206004820152601860248201527f5574696c733a3a5f20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b600160a060020a038916600090815260026020526040902054899060ff1615610d5c576040805160e560020a62461bcd02815260206004820152601f60248201527f4163636f756e743a3a5f20555345525f444f45535f4e4f545f45584953545300604482015290519081900360640190fd5b60055460a060020a900460ff161515610dbb576040805160e560020a62461bcd028152602060048201526022602482015260008051602061263f833981519152604482015260f260020a61115102606482015290519081900360840190fd5b6005546040805160e060020a639c14ee290281523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b505050506040513d6020811015610e3557600080fd5b50511515610e7b576040805160e560020a62461bcd028152602060048201819052602482015260008051602061261f833981519152604482015290519081900360640190fd5b610ebb8a6040805190810160405280600881526020017f4144445f555345520000000000000000000000000000000000000000000000008152508b61231c565b60008181526003602052604090205490965060ff1615610f4a57604080518181526010818301527f4163636f756e743a3a6164645573657200000000000000000000000000000000606082015260806020820181905260189082015260008051602061265f83398151915260a0820152905160008051602061267f8339815191529181900360c00190a161113e565b610f848689898080601f016020809104026020016040519081016040528093929190818152602001838380828437506122fa945050505050565b600160a060020a03811660009081526002602052604090205490955060ff16151561102c57604080518181526010818301527f4163636f756e743a3a616464557365720000000000000000000000000000000060608201526080602082018190526022908201526000805160206125ff83398151915260a082015260f260020a6113950260c0820152905160008051602061267f8339815191529181900360e00190a161113e565b600160036000886000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555060018a90806001815401808255809150509060018203906000526020600020016000909192909190916101000a815481600160a060020a030219169083600160a060020a03160217905550506001600260008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff02191690831515021790555089600160a060020a03167f341c3eb6378732c9923fd02ea04564f599626c0f9b3fc49526dfd712d7cf7a54866040518082600160a060020a0316600160a060020a0316815260200191505060405180910390a25b50505050505050505050565b60408051348082526020820183815236938301849052600093849384936004359360243593849386933393600160e060020a03198a35169391928a9291606082018484808284376040519201829003965090945050505050a488600160a060020a0381161515611204576040805160e560020a62461bcd02815260206004820152601860248201527f5574696c733a3a5f20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b60055460a060020a900460ff161515611263576040805160e560020a62461bcd028152602060048201526022602482015260008051602061263f833981519152604482015260f260020a61115102606482015290519081900360840190fd5b6005546040805160e060020a639c14ee290281523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b50511515611323576040805160e560020a62461bcd028152602060048201819052602482015260008051602061261f833981519152604482015290519081900360640190fd5b6113638a6040805190810160405280601d81526020017f4348414e47455f4143434f554e545f494d504c454d454e544154494f4e0000008152508b61231c565b60008181526003602052604090205490965060ff16156113f257604080518181526013818301527f4163636f756e743a3a6368616e6765496d706c00000000000000000000000000606082015260806020820181905260189082015260008051602061265f83398151915260a0820152905160008051602061267f8339815191529181900360c00190a161113e565b61142c8689898080601f016020809104026020016040519081016040528093929190818152602001838380828437506122fa945050505050565b600160a060020a03811660009081526002602052604090205490955060ff1615156114d457604080518181526013818301527f4163636f756e743a3a6368616e6765496d706c0000000000000000000000000060608201526080602082018190526022908201526000805160206125ff83398151915260a082015260f260020a6113950260c0820152905160008051602061267f8339815191529181900360e00190a161113e565b600086815260036020526040808220805460ff19166001179055815481517f7de7edef000000000000000000000000000000000000000000000000000000008152600160a060020a038e8116600483015292519290911696503092637de7edef9260248084019382900301818387803b15801561155057600080fd5b505af1158015611564573d6000803e3d6000fd5b5050604051600160a060020a0380881693508d1691507f46d1374f5d35916e487a873e8b564d81557708de676898818464dbe0271c66f190600090a350505050505050505050565b600554600160a060020a031681565b333014611638576040805160e560020a62461bcd02815260206004820152602c60248201527f4d6574686f642063616e206f6e6c792062652063616c6c65642066726f6d207460448201527f68697320636f6e74726163740000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03811615156116bd576040805160e560020a62461bcd028152602060048201526024808201527f496e76616c6964206d617374657220636f707920616464726573732070726f7660448201527f6964656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554604080517f6147f6d20000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691636147f6d2916024808201926020929091908290030181600087803b15801561175257600080fd5b505af1158015611766573d6000803e3d6000fd5b505050506040513d602081101561177c57600080fd5b505115156117d4576040805160e560020a62461bcd02815260206004820152601e60248201527f4163636f756e743a3a5f20494e56414c49445f4143435f48414e444c45520000604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a460055460a060020a900460ff161515611884576040805160e560020a62461bcd028152602060048201526022602482015260008051602061263f833981519152604482015260f260020a61115102606482015290519081900360840190fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518491600160a060020a038816916370a08231916024808201926020929091908290030181600087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b50511015611990576040805160e560020a62461bcd02815260206004820152603960248201527f4163636f756e743a3a7472616e73666572427953797374656d20494e5355464660448201527f494349454e545f42414c414e43455f494e5f4143434f554e5400000000000000606482015290519081900360840190fd5b84600160a060020a031663a9059cbb85856040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156119f357600080fd5b505af1158015611a07573d6000803e3d6000fd5b505050506040513d6020811015611a1d57600080fd5b5050604080518481523360208201528151600160a060020a0380881693908916927fb841ece5c9472ec2e69da4ef0be8184c8d115d7fdbf8447d4db91e8b7e4d9cc4929081900390910190a35050505050565b60408051348082526020820183815236938301849052600093849384936004359360243593849386933393600160e060020a03198a35169391928a9291606082018484808284376040519201829003965090945050505050a4600160a060020a038916600090815260026020526040902054899060ff161515611b3d576040805160e560020a62461bcd02815260206004820152601760248201527f4163636f756e743a3a5f20494e56414c49445f55534552000000000000000000604482015290519081900360640190fd5b60055460a060020a900460ff161515611b9c576040805160e560020a62461bcd028152602060048201526022602482015260008051602061263f833981519152604482015260f260020a61115102606482015290519081900360840190fd5b6005546040805160e060020a639c14ee290281523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b158015611bec57600080fd5b505af1158015611c00573d6000803e3d6000fd5b505050506040513d6020811015611c1657600080fd5b50511515611c5c576040805160e560020a62461bcd028152602060048201819052602482015260008051602061261f833981519152604482015290519081900360640190fd5b611c9c8a6040805190810160405280600b81526020017f52454d4f56455f555345520000000000000000000000000000000000000000008152508b61231c565b60008181526003602052604090205490965060ff1615611d2b57604080518181526013818301527f4163636f756e743a3a72656d6f76655573657200000000000000000000000000606082015260806020820181905260189082015260008051602061265f83398151915260a0820152905160008051602061267f8339815191529181900360c00190a161113e565b611d658689898080601f016020809104026020016040519081016040528093929190818152602001838380828437506122fa945050505050565b600180549196501415611df857604080518181526013818301527f4163636f756e743a3a72656d6f76655573657200000000000000000000000000606082015260806020808301829052908201527f4143435f53484f554c445f484156455f41544c454153545f4f4e455f5553455260a0820152905160008051602061267f8339815191529181900360c00190a161113e565b600160a060020a03851660009081526002602052604090205460ff161515611e9d57604080518181526013818301527f4163636f756e743a3a72656d6f7665557365720000000000000000000000000060608201526080602082018190526022908201526000805160206125ff83398151915260a082015260f260020a6113950260c0820152905160008051602061267f8339815191529181900360e00190a161113e565b6000868152600360209081526040808320805460ff19908116600117909155600160a060020a038e168452600290925282208054909116905593505b60015460001901841015611fad5789600160a060020a0316600185815481101515611f0057fe5b600091825260209091200154600160a060020a03161415611fa257600180546000198101908110611f2d57fe5b60009182526020909120015460018054600160a060020a039092169186908110611f5357fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600180546000190190611f9c90826125b7565b50611fad565b600190930192611ed9565b60408051600160a060020a0387811682529151918c16917fcc173a9909e9ded8a96a84eace3a366f698a6a1486a3baa74f66d91aead2d12d9181900360200190a250505050505050505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561205257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612034575b505050505090505b90565b60055460a060020a900460ff16156120e5576040805160e560020a62461bcd02815260206004820152602660248201527f4163636f756e743a3a5f204143434f554e545f414c52454144595f494e49544960448201527f414c495a45440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a0380861673ffffffffffffffffffffffffffffffffffffffff1992831681179093556000928352600260209081526040808520805460ff1916909617909555600580548784169416939093179283905584517f50879c1c000000000000000000000000000000000000000000000000000000008152945192909116936350879c1c93600480830194928390030190829087803b1580156121b857600080fd5b505af11580156121cc573d6000803e3d6000fd5b505050506040513d60208110156121e257600080fd5b505160048054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff1990921691909117905550506005805474ff0000000000000000000000000000000000000000191660a060020a179055565b604080516c01000000000000000000000000308102602080840191909152600160a060020a038089168302603485015287169091026048830152605c8201859052607c80830185905283518084039091018152609c909201928390528151600093918291908401908083835b602083106122c55780518252601f1990920191602091820191016122a6565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b60006123158261230985612438565b9063ffffffff6124e216565b9392505050565b6000308484846040516020018085600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183805190602001908083835b602083106123a25780518252601f199092019160209182019101612383565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201908190528351939650945084935085019190508083835b602083106124045780518252601f1990920191602091820191016123e5565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c909201928390528151600093918291908401908083835b602083106124b05780518252601f199092019160209182019101612491565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b600080600080845160411415156124fc57600093506125ae565b50505060208201516040830151606084015160001a601b60ff8216101561252157601b015b8060ff16601b1415801561253957508060ff16601c14155b1561254757600093506125ae565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156125a1573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b8154818355818111156125db576000838152602090206125db9181019083016125e0565b505050565b61205a91905b808211156125fa57600081556001016125e6565b509056005349474e45525f4e4f545f415554484f52495a45445f574954485f4143434f554163636f756e743a3a5f20494e56414c49445f41444d494e5f4143434f554e544163636f756e743a3a5f204143434f554e545f4e4f545f494e495449414c495a414354494f4e5f414c52454144595f504552464f524d45440000000000000000b070cb3e4fef70e12d8e599444f6395a8ff59f4db70ac633f9d5c5db734a4d37a165627a7a723058209d28c22889344416d749161bb7e76ef7107fcba51dec3d8b8c42b042a4a01f730029"
}