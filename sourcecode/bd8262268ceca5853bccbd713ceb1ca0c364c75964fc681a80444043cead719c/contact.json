{
  "address": "0xb150a5c1e3f5acca0afa9ebb6f0ef612ccba0842",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hodl",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-20\n*/\n\npragma solidity ^0.4.23;\n\ncontract EIP20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    // solhint-disable-next-line no-simple-event-func-name  \n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract OwnableContract {\n \n    address superOwner;\n\t\t\n\tconstructor() public { \n        superOwner = msg.sender;  \n    }\n\t\n\tmodifier onlyOwner() {\n        require(msg.sender == superOwner);\n        _;\n    } \n    \n    function viewSuperOwner() public view returns (address owner) {\n        return superOwner;\n    }\n    \n\tfunction changeOwner(address newOwner) onlyOwner public {\n        superOwner = newOwner;\n    }\n}\n\n\ncontract BlockableContract is OwnableContract{\n \n    bool public blockedContract;\n\t\n\tconstructor() public { \n        blockedContract = false;  \n    }\n\t\n\tmodifier contractActive() {\n        require(!blockedContract);\n        _;\n    } \n\t\n\tfunction doBlockContract() onlyOwner public {\n        blockedContract = true;\n    }\n    \n    function unBlockContract() onlyOwner public {\n        blockedContract = false;\n    }\n}\n\ncontract Hodl is BlockableContract{\n    \n    struct Safe{\n        uint256 id;\n        address user;\n        address tokenAddress;\n        uint256 amount;\n        uint256 time;\n    }\n    \n    /**\n    * @dev safes variables\n    */\n    mapping( address => uint256[]) public _userSafes;\n    mapping( uint256 => Safe) private _safes;\n    uint256 private _currentIndex;\n    \n    mapping( address => uint256) public _totalSaved;\n     \n    /**\n    * @dev owner variables\n    */\n    uint256 public comission; //0..100\n    mapping( address => uint256) private _systemReserves;\n    address[] public _listedReserves;\n     \n    /**\n    * constructor\n    */\n    constructor() public { \n        _currentIndex = 1;\n        comission = 10;\n    }\n    \n// F1 - fallback function to receive donation eth //\n    function () public payable {\n        require(msg.value>0);\n        _systemReserves[0x0] = add(_systemReserves[0x0], msg.value);\n    }\n    \n// F2 - how many safes has the user //\n    function GetUserSafesLength(address a) public view returns (uint256 length) {\n        return _userSafes[a].length;\n    }\n    \n// F3 - how many tokens are reserved for owner as comission //\n    function GetReserveAmount(address tokenAddress) public view returns (uint256 amount){\n        return _systemReserves[tokenAddress];\n    }\n    \n// F4 - returns safe's values' //\n    function Getsafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 time)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.time);\n    }\n    \n    \n// F5 - add new hodl safe (ETH) //\n    function HodlEth(uint256 time) public contractActive payable {\n        require(msg.value > 0);\n        require(time>now);\n        \n        _userSafes[msg.sender].push(_currentIndex);\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, 0x0, msg.value, time); \n        \n        _totalSaved[0x0] = add(_totalSaved[0x0], msg.value);\n        \n        _currentIndex++;\n    }\n    \n// F6 add new hodl safe (ERC20 token) //\n    function ClaimHodlToken(address tokenAddress, uint256 amount, uint256 time) public contractActive {\n        require(tokenAddress != 0x0);\n        require(amount>0);\n        require(time>now);\n          \n        EIP20Interface token = EIP20Interface(tokenAddress);\n        require( token.transferFrom(msg.sender, address(this), amount) );\n        \n        _userSafes[msg.sender].push(_currentIndex);\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, tokenAddress, amount, time);\n        \n        _totalSaved[tokenAddress] = add(_totalSaved[tokenAddress], amount);\n        \n        _currentIndex++;\n    }\n    \n// F7 - user, claim back a hodl safe //\n    function UserRetireHodl(uint256 id) public {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.user == msg.sender);\n        \n        RetireHodl(id);\n    }\n    \n// F8 - private retire hodl safe action //\n    function RetireHodl(uint256 id) private {\n        Safe storage s = _safes[id]; \n        require(s.id != 0); \n        \n        if(s.time < now) //hodl complete\n        {\n            if(s.tokenAddress == 0x0) \n                PayEth(s.user, s.amount);\n            else  \n                PayToken(s.user, s.tokenAddress, s.amount);\n        }\n        else //hodl in progress\n        {\n            uint256 realComission = mul(s.amount, comission) / 100;\n            uint256 realAmount = sub(s.amount, realComission);\n            \n            if(s.tokenAddress == 0x0) \n                PayEth(s.user, realAmount);\n            else  \n                PayToken(s.user, s.tokenAddress, realAmount);\n                \n            StoreComission(s.tokenAddress, realComission);\n        }\n        \n        DeleteSafe(s);\n    }\n    \n// F9 - private pay eth to address //\n    function PayEth(address user, uint256 amount) private {\n        require(address(this).balance >= amount);\n        user.transfer(amount);\n    }\n    \n// F10 - private pay token to address //\n    function PayToken(address user, address tokenAddress, uint256 amount) private{\n        EIP20Interface token = EIP20Interface(tokenAddress);\n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }\n    \n// F11 - store comission from unfinished hodl //\n    function StoreComission(address tokenAddress, uint256 amount) private {\n        _systemReserves[tokenAddress] = add(_systemReserves[tokenAddress], amount);\n        \n        bool isNew = true;\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\n            if(_listedReserves[i] == tokenAddress) {\n                isNew = false;\n                break;\n            }\n        } \n        \n        if(isNew) _listedReserves.push(tokenAddress); \n    }\n    \n// F12 - delete safe values in storage //\n    function DeleteSafe(Safe s) private  {\n        _totalSaved[s.tokenAddress] = sub(_totalSaved[s.tokenAddress], s.amount);\n        delete _safes[s.id];\n        \n        uint256[] storage vector = _userSafes[msg.sender];\n        uint256 size = vector.length; \n        for(uint256 i = 0; i < size; i++) {\n            if(vector[i] == s.id) {\n                vector[i] = vector[size-1];\n                vector.length--;\n                break;\n            }\n        } \n    }\n    \n    \n// F13 // OWNER - owner retire hodl safe //\n    function OwnerRetireHodl(uint256 id) public onlyOwner {\n        Safe storage s = _safes[id]; \n        require(s.id != 0); \n        RetireHodl(id);\n    }\n\n// F14 - owner, change comission value //\n    function ChangeComission(uint256 newComission) onlyOwner public {\n        comission = newComission;\n    }\n    \n// F15 - owner withdraw eth reserved from comissions //\n    function WithdrawReserve(address tokenAddress) onlyOwner public\n    {\n        require(_systemReserves[tokenAddress] > 0);\n        \n        uint256 amount = _systemReserves[tokenAddress];\n        _systemReserves[tokenAddress] = 0;\n        \n        EIP20Interface token = EIP20Interface(tokenAddress);\n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n    \n// F16 - owner withdraw token reserved from comission //\n    function WithdrawAllReserves() onlyOwner public {\n        //eth\n        uint256 x = _systemReserves[0x0];\n        if(x > 0 && x <= address(this).balance) {\n            _systemReserves[0x0] = 0;\n            msg.sender.transfer( _systemReserves[0x0] );\n        }\n         \n        //tokens\n        address ta;\n        EIP20Interface token;\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\n            ta = _listedReserves[i];\n            if(_systemReserves[ta] > 0)\n            { \n                x = _systemReserves[ta];\n                _systemReserves[ta] = 0;\n                \n                token = EIP20Interface(ta);\n                token.transfer(msg.sender, x);\n            }\n        } \n        \n        _listedReserves.length = 0; \n    }\n    \n// F17 - owner remove free eth //\n    function WithdrawSpecialEth(uint256 amount) onlyOwner public\n    {\n        require(amount > 0); \n        uint256 freeBalance = address(this).balance - _totalSaved[0x0];\n        require(freeBalance >= amount); \n        msg.sender.transfer(amount);\n    }\n    \n// F18 - owner remove free token //\n    function WithdrawSpecialToken(address tokenAddress, uint256 amount) onlyOwner public\n    {\n        EIP20Interface token = EIP20Interface(tokenAddress);\n        uint256 freeBalance = token.balanceOf(address(this)) - _totalSaved[tokenAddress];\n        require(freeBalance >= amount);\n        token.transfer(msg.sender, amount);\n    } \n    \n    \n    //AUX - @dev Multiplies two numbers, throws on overflow. //\n\t\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    \n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633600160a060020a03161760a060020a60ff02191681556001600355600a6005556114ef90819061005090396000f3006080604052600436106101035763ffffffff60e060020a60003504166311a3311c811461014e57806313e60074146101845780631c019a521461019e5780632929dc09146101d25780633a4b4532146101e75780633e0fddbd146101fc5780633e8cc27314610223578063588c2a6d14610238578063666a73701461025957806371ea29df1461027a5780638678c2b9146102a35780639aaa38a6146102ae5780639c81806d146102c6578063a6f9dae1146102de578063a871ffdc146102ff578063b65ae7691461034e578063d3a516d314610372578063d64ee8d214610387578063d702db811461039c578063d9d61a10146103b4578063ed26e60d146103d5575b6000341161011057600080fd5b6000805260066020526000805160206114a48339815191525461013390346103f6565b6000805260066020526000805160206114a483398151915255005b34801561015a57600080fd5b50610172600160a060020a0360043516602435610409565b60408051918252519081900360200190f35b34801561019057600080fd5b5061019c600435610439565b005b3480156101aa57600080fd5b506101b660043561047e565b60408051600160a060020a039092168252519081900360200190f35b3480156101de57600080fd5b5061019c6104a6565b3480156101f357600080fd5b50610172610666565b34801561020857600080fd5b5061019c600160a060020a036004351660243560443561066c565b34801561022f57600080fd5b5061019c610863565b34801561024457600080fd5b5061019c600160a060020a03600435166108b5565b34801561026557600080fd5b50610172600160a060020a0360043516610a3c565b34801561028657600080fd5b5061028f610a4e565b604080519115158252519081900360200190f35b61019c600435610a6f565b3480156102ba57600080fd5b5061019c600435610bd0565b3480156102d257600080fd5b5061019c600435610bf0565b3480156102ea57600080fd5b5061019c600160a060020a0360043516610c99565b34801561030b57600080fd5b50610317600435610ce3565b60408051958652600160a060020a039485166020870152929093168483015260608401526080830191909152519081900360a00190f35b34801561035a57600080fd5b5061019c600160a060020a0360043516602435610d20565b34801561037e57600080fd5b506101b6610e85565b34801561039357600080fd5b5061019c610e95565b3480156103a857600080fd5b5061019c600435610ed0565b3480156103c057600080fd5b50610172600160a060020a0360043516610f08565b3480156103e157600080fd5b50610172600160a060020a0360043516610f23565b8181018281101561040357fe5b92915050565b60016020528160005260406000208181548110151561042457fe5b90600052602060002001600091509150505481565b6000805433600160a060020a0390811691161461045557600080fd5b5060008181526002602052604090208054151561047157600080fd5b61047a82610f3e565b5050565b600780548290811061048c57fe5b600091825260209091200154600160a060020a0316905081565b6000805481908190819033600160a060020a039081169116146104c857600080fd5b600080805260066020526000805160206114a4833981519152549450841180156104fc575030600160a060020a0316318411155b1561054f57600080805260066020526000805160206114a483398151915281905560405133600160a060020a0316916108fc9181818181818888f1935050505015801561054d573d6000803e3d6000fd5b505b5060005b60075481101561065257600780548290811061056b57fe5b6000918252602080832090910154600160a060020a031680835260069091526040822054909450111561064a57600160a060020a03808416600081815260066020908152604080832080549084905581517fa9059cbb000000000000000000000000000000000000000000000000000000008152339096166004870152602486018190529051909850879650929363a9059cbb9360448083019491928390030190829087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d602081101561064757600080fd5b50505b600101610553565b600061065f600782611466565b5050505050565b60055481565b6000805474010000000000000000000000000000000000000000900460ff161561069557600080fd5b600160a060020a03841615156106aa57600080fd5b600083116106b757600080fd5b4282116106c357600080fd5b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152308116602483015260448201859052915185928316916323b872dd9160648083019260209291908290030181600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d602081101561076257600080fd5b5051151561076f57600080fd5b600160a060020a033381166000818152600160208181526040808420600380548254808701845592875284872090920191909155815160a08101835281548082528185019788528c8916828501818152606084018e8152608085018e8152938a526002808952878b20955186559a519885018054998d1673ffffffffffffffffffffffffffffffffffffffff199a8b16179055905199840180549a909b1699909716989098179098559351908401559451600492830155928252909152205461083890846103f6565b600160a060020a03909416600090815260046020526040902093909355505060038054600101905550565b60005433600160a060020a0390811691161461087e57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60008054819033600160a060020a039081169116146108d357600080fd5b600160a060020a038316600090815260066020526040812054116108f657600080fd5b5050600160a060020a03808216600081815260066020908152604080832080549084905581517f70a08231000000000000000000000000000000000000000000000000000000008152309096166004870152905190948694869490936370a0823193602480850194929391928390030190829087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050506040513d60208110156109a257600080fd5b505110156109af57600080fd5b80600160a060020a031663a9059cbb33846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b505050506040513d602081101561065f57600080fd5b60046020526000908152604090205481565b60005474010000000000000000000000000000000000000000900460ff1681565b60005474010000000000000000000000000000000000000000900460ff1615610a9757600080fd5b60003411610aa457600080fd5b428111610ab057600080fd5b600160a060020a033381166000818152600160208181526040808420600380548254808701845592875284872090920191909155815160a08101835281548082528185019788528184018781523460608401818152608085018d8152938a526002808952968a209451855599519784018054988c1673ffffffffffffffffffffffffffffffffffffffff19998a161790559051948301805495909a16949096169390931790975594519486019490945592516004948501559080529190527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec54610b99916103f6565b6000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec5550600380546001019055565b60005433600160a060020a03908116911614610beb57600080fd5b600555565b6000805433600160a060020a03908116911614610c0c57600080fd5b60008211610c1957600080fd5b506000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec5430600160a060020a0316310381811015610c5e57600080fd5b604051600160a060020a0333169083156108fc029084906000818181858888f19350505050158015610c94573d6000803e3d6000fd5b505050565b60005433600160a060020a03908116911614610cb457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000908152600260208190526040909120805460018201549282015460038301546004909301549194600160a060020a0394851694909116929190565b60008054819033600160a060020a03908116911614610d3e57600080fd5b600160a060020a0380851660008181526004602081815260408084205481517f70a0823100000000000000000000000000000000000000000000000000000000815230909716938701939093525189975091946370a0823193602480830194928390030190829087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b505050506040513d6020811015610dde57600080fd5b505103905082811015610df057600080fd5b81600160a060020a031663a9059cbb33856040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e5357600080fd5b505af1158015610e67573d6000803e3d6000fd5b505050506040513d6020811015610e7d57600080fd5b505050505050565b600054600160a060020a03165b90565b60005433600160a060020a03908116911614610eb057600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b600081815260026020526040902080541515610eeb57600080fd5b600181015433600160a060020a0390811691161461047157600080fd5b600160a060020a031660009081526001602052604090205490565b600160a060020a031660009081526006602052604090205490565b6000818152600260205260408120805490919081901515610f5e57600080fd5b4283600401541015610fcb576002830154600160a060020a03161515610fa05760018301546003840154610f9b91600160a060020a0316906110b7565b610fc6565b600183015460028401546003850154610fc692600160a060020a03908116921690611104565b611064565b6064610fdd84600301546005546111ff565b811515610fe657fe5b049150610ff7836003015483611228565b6002840154909150600160a060020a0316151561102b57600183015461102690600160a060020a0316826110b7565b61104c565b6001830154600284015461104c91600160a060020a03908116911683611104565b600283015461106490600160a060020a03168361123a565b6040805160a081018252845481526001850154600160a060020a0390811660208301526002860154169181019190915260038401546060820152600484015460808201526110b190611337565b50505050565b600160a060020a033016318111156110ce57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610c94573d6000803e3d6000fd5b60008290508181600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b505050506040513d602081101561118f57600080fd5b5051101561119c57600080fd5b80600160a060020a031663a9059cbb85846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e5357600080fd5b600082151561121057506000610403565b5081810281838281151561122057fe5b041461040357fe5b60008282111561123457fe5b50900390565b600160a060020a038216600090815260066020526040812054819061125f90846103f6565b600160a060020a0385166000908152600660205260408120919091556001925090505b6007548110156112d15783600160a060020a03166007828154811015156112a557fe5b600091825260209091200154600160a060020a031614156112c957600091506112d1565b600101611282565b81156110b157600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff1990911617905550505050565b604080820151600160a060020a031660009081526004602052908120546060830151829182916113679190611228565b604080860151600160a060020a03908116600090815260046020818152848320959095558851825260028086528483208381556001808201805473ffffffffffffffffffffffffffffffffffffffff19908116909155928201805490931690925560038101849055909101829055339092168152925281208054909450925090505b818110156110b1578351835484908390811061140157fe5b9060005260206000200154141561145e57826001830381548110151561142357fe5b9060005260206000200154838281548110151561143c57fe5b6000918252602090912001558254611458846000198301611466565b506110b1565b6001016113e9565b815481835581811115610c9457600083815260209020610c94918101908301610e9291905b8082111561149f576000815560010161148b565b5090560054cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8a165627a7a723058209a1342727c8b826e5d295d88302c186684b3044feb11a30f5473f17fe14ba4420029"
}