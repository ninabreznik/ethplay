{
  "address": "0x7ec0a611e7d491fbeef62dbebbdb3e65e019bf9b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Trickle",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity 0.5.8;\n\n/**\n * Trickle is a decentralized program allowing people to create\n * secure fixed hourly rate agreements leveraging the power of blockchain technology.\n * Trickle works with any ERC20-compatible tokens on top of Ethereum, including stablecoins.\n *\n * Brought to you by DreamTeam <https://token.dreamteam.gg>.\n * Learn more about Trickle <https://github.com/dreamteam-gg/trickle-dapp>.\n * Access this DApp at <https://trickle.gg> or <http://zitros.github.io/trickle-dapp>.\n */\ncontract Trickle {\n\n    using SafeMath for uint256;\n\n    event AgreementCreated(\n        uint256 indexed agreementId,\n        address token,\n        address indexed recipient,\n        address indexed sender,\n        uint256 start,\n        uint256 duration,\n        uint256 totalAmount,\n        uint256 createdAt\n    );\n    event AgreementCanceled(\n        uint256 indexed agreementId,\n        address token,\n        address indexed recipient,\n        address indexed sender,\n        uint256 start,\n        uint256 duration,\n        uint256 amountReleased,\n        uint256 amountCanceled,\n        uint256 canceledAt\n    );\n    event Withdraw(\n        uint256 indexed agreementId,\n        address token,\n        address indexed recipient,\n        address indexed sender,\n        uint256 amountReleased,\n        uint256 releasedAt\n    );\n\n    uint256 private lastAgreementId;\n\n    struct Agreement {\n        uint256 meta; // Metadata packs 3 values to save on storage:\n                      // + uint48 start;    // Timestamp with agreement start. Up to year 999999+.\n                      // + uint48 duration; // Agreement duration. Up to year 999999+.\n                      // + uint160 token;   // Token address converted to uint.\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        address recipient;\n        address sender;\n    }\n\n    mapping (uint256 => Agreement) private agreements;\n\n    modifier agreementPartiesOnly(uint256 agreementId) {\n        require (\n            msg.sender == agreements[agreementId].sender ||\n            msg.sender == agreements[agreementId].recipient,\n            \"Allowed only for agreement's sender or recipient\"\n        );\n        _;\n    }\n\n    modifier validAgreement(uint256 agreementId) {\n        require(agreements[agreementId].releasedAmount < agreements[agreementId].totalAmount, \"Agreement is completed or does not exists\");\n        _;\n    }\n\n    function createAgreement(IERC20 token, address recipient, uint256 totalAmount, uint48 duration, uint48 start) external {\n        require(duration > 0, \"Duration must be greater than zero\");\n        require(totalAmount > 0, \"Total Amount must be greater than zero\");\n        require(start > 0, \"Start must be greater than zero\");\n        require(token != IERC20(0x0), \"Token must be a valid Ethereum address\");\n        require(recipient != address(0x0), \"Recipient must be a valid Ethereum address\");\n\n        uint256 agreementId = ++lastAgreementId;\n\n        agreements[agreementId] = Agreement({\n            meta: encodeMeta(start, duration, uint256(address(token))),\n            recipient: recipient,\n            totalAmount: totalAmount,\n            sender: msg.sender,\n            releasedAmount: 0\n        });\n\n        token.transferFrom(agreements[agreementId].sender, address(this), agreements[agreementId].totalAmount);\n\n        emit AgreementCreated(\n            agreementId,\n            address(token),\n            recipient,\n            msg.sender,\n            start,\n            duration,\n            totalAmount,\n            block.timestamp\n        );\n    }\n\n    function getAgreement(uint256 agreementId) external view returns (\n        address token,\n        address recipient,\n        address sender,\n        uint256 start,\n        uint256 duration,\n        uint256 totalAmount,\n        uint256 releasedAmount\n    ) {\n        (start, duration, token) = decodeMeta(agreements[agreementId].meta);\n        sender = agreements[agreementId].sender;\n        totalAmount = agreements[agreementId].totalAmount;\n        releasedAmount = agreements[agreementId].releasedAmount;\n        recipient = agreements[agreementId].recipient;\n    }\n\n    function withdrawTokens(uint256 agreementId) public validAgreement(agreementId) {\n        uint256 unreleased = withdrawableAmount(agreementId);\n        require(unreleased > 0, \"Nothing to withdraw\");\n\n        agreements[agreementId].releasedAmount = agreements[agreementId].releasedAmount.add(unreleased);\n        (, , address token) = decodeMeta(agreements[agreementId].meta);\n        IERC20(token).transfer(agreements[agreementId].recipient, unreleased);\n\n        emit Withdraw(\n            agreementId,\n            token,\n            agreements[agreementId].recipient,\n            agreements[agreementId].sender,\n            unreleased,\n            block.timestamp\n        );\n    }\n\n    function cancelAgreement(uint256 agreementId) external validAgreement(agreementId) agreementPartiesOnly(agreementId) {\n        if (withdrawableAmount(agreementId) > 0) {\n            withdrawTokens(agreementId);\n        }\n\n        uint256 releasedAmount = agreements[agreementId].releasedAmount;\n        uint256 canceledAmount = agreements[agreementId].totalAmount.sub(releasedAmount);\n\n        (uint256 start, uint256 duration, address token) = decodeMeta(agreements[agreementId].meta);\n\n        agreements[agreementId].releasedAmount = agreements[agreementId].totalAmount;\n        if (canceledAmount > 0) {\n            IERC20(token).transfer(agreements[agreementId].sender, canceledAmount);\n        }\n\n        emit AgreementCanceled(\n            agreementId,\n            token,\n            agreements[agreementId].recipient,\n            agreements[agreementId].sender,\n            start,\n            duration,\n            releasedAmount,\n            canceledAmount,\n            block.timestamp\n        );\n    }\n\n    function withdrawableAmount(uint256 agreementId) public view returns (uint256) {\n        return proportionalAmount(agreementId).sub(agreements[agreementId].releasedAmount);\n    }\n\n    function proportionalAmount(uint256 agreementId) private view returns (uint256) {\n        (uint256 start, uint256 duration, ) = decodeMeta(agreements[agreementId].meta);\n        if (block.timestamp >= start.add(duration)) {\n            return agreements[agreementId].totalAmount;\n        } else if (block.timestamp <= start) {\n            return 0;\n        } else {\n            return agreements[agreementId].totalAmount.mul(\n                block.timestamp.sub(start)\n            ).div(duration);\n        }\n    }\n\n    function encodeMeta(uint256 start, uint256 duration, uint256 token) private pure returns(uint256 result) {\n        require(\n            start < 2 ** 48 &&\n            duration < 2 ** 48 &&\n            token < 2 ** 160,\n            \"Start, Duration or Token Address provided have invalid values\"\n        );\n\n        result = start;\n        result |= duration << (48);\n        result |= token << (48 + 48);\n\n        return result;\n    }\n\n    function decodeMeta(uint256 meta) private pure returns(uint256 start, uint256 duration, address token) {\n        start = uint48(meta);\n        duration = uint48(meta >> (48));\n        token = address(meta >> (48 + 48));\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}",
  "bytecode": "608060405234801561001057600080fd5b50610e2a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063315a095d1461005c578063393c74321461007b5780634f9f6fe6146100c75780635686b54b1461012b578063d0cee66a14610148575b600080fd5b6100796004803603602081101561007257600080fd5b5035610177565b005b610079600480360360a081101561009157600080fd5b506001600160a01b03813581169160208101359091169060408101359065ffffffffffff60608201358116916080013516610383565b6100e4600480360360208110156100dd57600080fd5b50356106a2565b604080516001600160a01b039889168152968816602088015294909616858501526060850192909252608084015260a083015260c082019290925290519081900360e00190f35b6100796004803603602081101561014157600080fd5b5035610715565b6101656004803603602081101561015e57600080fd5b50356109a3565b60408051918252519081900360200190f35b6000818152600160208190526040909120908101546002909101548291116101d357604051600160e51b62461bcd028152600401808060200182810382526029815260200180610d996029913960400191505060405180910390fd5b60006101de836109a3565b9050600081116102385760408051600160e51b62461bcd02815260206004820152601360248201527f4e6f7468696e6720746f20776974686472617700000000000000000000000000604482015290519081900360640190fd5b60008381526001602052604090206002015461025a908263ffffffff6109d616565b60008481526001602052604081206002810192909255905461027b90610a3c565b6000878152600160209081526040808320600301548151600160e01b63a9059cbb0281526001600160a01b039182166004820152602481018a905291519497508716955063a9059cbb94506044808201949293918390030190829087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050506040513d602081101561030f57600080fd5b5050600084815260016020908152604091829020600481015460039091015483516001600160a01b038681168252938101879052428186015293519183169392169187917fae7c0fdf04394e630f0f88db0daac3232a0f060314499da12bfabe13dc9988ae9181900360600190a450505050565b60008265ffffffffffff16116103cd57604051600160e51b62461bcd028152600401808060200182810382526022815260200180610d2c6022913960400191505060405180910390fd5b6000831161040f57604051600160e51b62461bcd028152600401808060200182810382526026815260200180610cd66026913960400191505060405180910390fd5b60008165ffffffffffff161161046f5760408051600160e51b62461bcd02815260206004820152601f60248201527f5374617274206d7573742062652067726561746572207468616e207a65726f00604482015290519081900360640190fd5b6001600160a01b0385166104b757604051600160e51b62461bcd028152600401808060200182810382526026815260200180610cb06026913960400191505060405180910390fd5b6001600160a01b0384166104ff57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610d6f602a913960400191505060405180910390fd5b60008054600101908190556040805160a081019091528061053565ffffffffffff8086169087166001600160a01b038b16610a56565b81526020808201879052600060408084018290526001600160a01b03808b166060808701919091523360809687015287845260018086528385208851815588870151918101829055888501516002820155918801516003830180549185166001600160a01b03199283161790559790960151600491820180549184169190981617968790558251600160e01b6323b872dd02815296821690870152306024870152604486019490945251928a16936323b872dd936064808301949391928390030190829087803b15801561060857600080fd5b505af115801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b5050604080516001600160a01b03888116825265ffffffffffff8086166020840152861682840152606082018790524260808301529151339288169184917f947d2dc71b029f433aa0383a0ef9364b5a9ac4569897d6f8f7489a89b394e9909181900360a00190a4505050505050565b60008060008060008060006106cc600160008a815260200190815260200160002060000154610a3c565b60009a8b52600160208190526040909b2060048101549b8101546002820154600390920154929d6001600160a01b039384169d939093169b509399509197509195509350915050565b60008181526001602081905260409091209081015460029091015482911161077157604051600160e51b62461bcd028152600401808060200182810382526029815260200180610d996029913960400191505060405180910390fd5b60008281526001602052604090206004015482906001600160a01b03163314806107b457506000818152600160205260409020600301546001600160a01b031633145b6107f257604051600160e51b62461bcd028152600401808060200182810382526030815260200180610cfc6030913960400191505060405180910390fd5b60006107fd846109a3565b111561080c5761080c83610177565b600083815260016020819052604082206002810154910154909190610837908363ffffffff610ad616565b600086815260016020526040812054919250908190819061085790610a3c565b60008b8152600160208190526040909120908101546002909101559194509250905083156109185760008881526001602090815260408083206004908101548251600160e01b63a9059cbb0281526001600160a01b03918216928101929092526024820189905291519185169363a9059cbb9360448084019491939192918390030190829087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b50505b600088815260016020908152604091829020600481015460039091015483516001600160a01b038681168252938101889052808501879052606081018a9052608081018990524260a08201529351918316939216918b917f037c6326104780b5a3d469f8d6ca9106e82c1579a4e1200b92a10e2d1f6bda779181900360c00190a45050505050505050565b6000818152600160205260408120600201546109ce906109c284610b36565b9063ffffffff610ad616565b90505b919050565b600082820183811015610a335760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b65ffffffffffff80821692603083901c9091169160601c90565b6000660100000000000084108015610a745750660100000000000083105b8015610a835750600160a01b82105b610ac157604051600160e51b62461bcd02815260040180806020018281038252603d815260200180610dc2603d913960400191505060405180910390fd5b50606081901b603083901b8417179392505050565b600082821115610b305760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008181526001602052604081205481908190610b5290610a3c565b509092509050610b68828263ffffffff6109d616565b4210610b8957505050600081815260016020819052604090912001546109d1565b814211610b9b576000925050506109d1565b610bdd81610bd1610bb2428663ffffffff610ad616565b600088815260016020819052604090912001549063ffffffff610be616565b9063ffffffff610c4216565b925050506109d1565b600082610bf557506000610a36565b82820282848281610c0257fe5b0414610a3357604051600160e51b62461bcd028152600401808060200182810382526021815260200180610d4e6021913960400191505060405180910390fd5b6000808211610c9b5760408051600160e51b62461bcd02815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481610ca657fe5b0494935050505056fe546f6b656e206d75737420626520612076616c696420457468657265756d2061646472657373546f74616c20416d6f756e74206d7573742062652067726561746572207468616e207a65726f416c6c6f776564206f6e6c7920666f722061677265656d656e7427732073656e646572206f7220726563697069656e744475726174696f6e206d7573742062652067726561746572207468616e207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526563697069656e74206d75737420626520612076616c696420457468657265756d206164647265737341677265656d656e7420697320636f6d706c65746564206f7220646f6573206e6f742065786973747353746172742c204475726174696f6e206f7220546f6b656e20416464726573732070726f7669646564206861766520696e76616c69642076616c756573a165627a7a72305820db816e2826c89a332aef22b98454e23552a23a2c4b1fa3b5859ea406d52460aa0029"
}