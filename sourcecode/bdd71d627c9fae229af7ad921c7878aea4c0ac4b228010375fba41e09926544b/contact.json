{
  "address": "0xfa9f699e5273864aace6ba20e1448e41c387aa00",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpendToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-19\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * IMultiOwned\n *\n * Interface that allows multiple owners\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ninterface IMultiOwned {\n\n    /**\n     * Returns true if `_account` is an owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) public view returns (bool);\n\n\n    /**\n     * Returns the amount of owners\n     *\n     * @return The amount of owners\n     */\n    function getOwnerCount() public view returns (uint);\n\n\n    /**\n     * Gets the owner at `_index`\n     *\n     * @param _index The index of the owner\n     * @return The address of the owner found at `_index`\n     */\n    function getOwnerAt(uint _index) public view returns (address);\n\n\n     /**\n     * Adds `_account` as a new owner\n     *\n     * @param _account The account to add as an owner\n     */\n    function addOwner(address _account) public;\n\n\n    /**\n     * Removes `_account` as an owner\n     *\n     * @param _account The account to remove as an owner\n     */\n    function removeOwner(address _account) public;\n}\n\n\n/**\n * MultiOwned\n *\n * Allows multiple owners\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ncontract MultiOwned is IMultiOwned {\n\n    // Owners\n    mapping (address => uint) private owners;\n    address[] private ownersIndex;\n\n\n     /**\n     * Access is restricted to owners only\n     */\n    modifier only_owner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n\n    /**\n     * The publisher is the initial owner\n     */\n    function MultiOwned() public {\n        ownersIndex.push(msg.sender);\n        owners[msg.sender] = 0;\n    }\n\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) public view returns (bool) {\n        return owners[_account] < ownersIndex.length && _account == ownersIndex[owners[_account]];\n    }\n\n\n    /**\n     * Returns the amount of owners\n     *\n     * @return The amount of owners\n     */\n    function getOwnerCount() public view returns (uint) {\n        return ownersIndex.length;\n    }\n\n\n    /**\n     * Gets the owner at `_index`\n     *\n     * @param _index The index of the owner\n     * @return The address of the owner found at `_index`\n     */\n    function getOwnerAt(uint _index) public view returns (address) {\n        return ownersIndex[_index];\n    }\n\n\n    /**\n     * Adds `_account` as a new owner\n     *\n     * @param _account The account to add as an owner\n     */\n    function addOwner(address _account) public only_owner {\n        if (!isOwner(_account)) {\n            owners[_account] = ownersIndex.push(_account) - 1;\n        }\n    }\n\n\n    /**\n     * Removes `_account` as an owner\n     *\n     * @param _account The account to remove as an owner\n     */\n    function removeOwner(address _account) public only_owner {\n        if (isOwner(_account)) {\n            uint indexToDelete = owners[_account];\n            address keyToMove = ownersIndex[ownersIndex.length - 1];\n            ownersIndex[indexToDelete] = keyToMove;\n            owners[keyToMove] = indexToDelete; \n            ownersIndex.length--;\n        }\n    }\n}\n\n\n/**\n * IObservable\n *\n * Allows observers to register and unregister with the \n * implementing smart-contract that is observable\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ninterface IObservable {\n\n\n    /**\n     * Returns true if `_account` is a registered observer\n     * \n     * @param _account The account to test against\n     * @return Whether the account is a registered observer\n     */\n    function isObserver(address _account) public view returns (bool);\n\n\n    /**\n     * Gets the amount of registered observers\n     * \n     * @return The amount of registered observers\n     */\n    function getObserverCount() public view returns (uint);\n\n\n    /**\n     * Gets the observer at `_index`\n     * \n     * @param _index The index of the observer\n     * @return The observers address\n     */\n    function getObserverAtIndex(uint _index) public view returns (address);\n\n\n    /**\n     * Register `_observer` as an observer\n     * \n     * @param _observer The account to add as an observer\n     */\n    function registerObserver(address _observer) public;\n\n\n    /**\n     * Unregister `_observer` as an observer\n     * \n     * @param _observer The account to remove as an observer\n     */\n    function unregisterObserver(address _observer) public;\n}\n\n\n/**\n * Abstract Observable\n *\n * Allows observers to register and unregister with the the \n * implementing smart-contract that is observable\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ncontract Observable is IObservable {\n\n\n    // Observers\n    mapping (address => uint) private observers;\n    address[] private observerIndex;\n\n\n    /**\n     * Returns true if `_account` is a registered observer\n     * \n     * @param _account The account to test against\n     * @return Whether the account is a registered observer\n     */\n    function isObserver(address _account) public view returns (bool) {\n        return observers[_account] < observerIndex.length && _account == observerIndex[observers[_account]];\n    }\n\n\n    /**\n     * Gets the amount of registered observers\n     * \n     * @return The amount of registered observers\n     */\n    function getObserverCount() public view returns (uint) {\n        return observerIndex.length;\n    }\n\n\n    /**\n     * Gets the observer at `_index`\n     * \n     * @param _index The index of the observer\n     * @return The observers address\n     */\n    function getObserverAtIndex(uint _index) public view returns (address) {\n        return observerIndex[_index];\n    }\n\n\n    /**\n     * Register `_observer` as an observer\n     * \n     * @param _observer The account to add as an observer\n     */\n    function registerObserver(address _observer) public {\n        require(canRegisterObserver(_observer));\n        if (!isObserver(_observer)) {\n            observers[_observer] = observerIndex.push(_observer) - 1;\n        }\n    }\n\n\n    /**\n     * Unregister `_observer` as an observer\n     * \n     * @param _observer The account to remove as an observer\n     */\n    function unregisterObserver(address _observer) public {\n        require(canUnregisterObserver(_observer));\n        if (isObserver(_observer)) {\n            uint indexToDelete = observers[_observer];\n            address keyToMove = observerIndex[observerIndex.length - 1];\n            observerIndex[indexToDelete] = keyToMove;\n            observers[keyToMove] = indexToDelete;\n            observerIndex.length--;\n        }\n    }\n\n\n    /**\n     * Returns whether it is allowed to register `_observer` by calling \n     * canRegisterObserver() in the implementing smart-contract\n     *\n     * @param _observer The address to register as an observer\n     * @return Whether the sender is allowed or not\n     */\n    function canRegisterObserver(address _observer) internal view returns (bool);\n\n\n    /**\n     * Returns whether it is allowed to unregister `_observer` by calling \n     * canRegisterObserver() in the implementing smart-contract\n     *\n     * @param _observer The address to unregister as an observer\n     * @return Whether the sender is allowed or not\n     */\n    function canUnregisterObserver(address _observer) internal view returns (bool);\n}\n\n\n\n/**\n * ITokenObserver\n *\n * Allows a token smart-contract to notify observers \n * when tokens are received\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ninterface ITokenObserver {\n\n\n    /**\n     * Called by the observed token smart-contract in order \n     * to notify the token observer when tokens are received\n     *\n     * @param _from The address that the tokens where send from\n     * @param _value The amount of tokens that was received\n     */\n    function notifyTokensReceived(address _from, uint _value) public;\n}\n\n\n/**\n * TokenObserver\n *\n * Allows observers to be notified by an observed token smart-contract\n * when tokens are received\n *\n * #created 09/10/2017\n * #author Frank Bonnet\n */\ncontract TokenObserver is ITokenObserver {\n\n\n    /**\n     * Called by the observed token smart-contract in order \n     * to notify the token observer when tokens are received\n     *\n     * @param _from The address that the tokens where send from\n     * @param _value The amount of tokens that was received\n     */\n    function notifyTokensReceived(address _from, uint _value) public {\n        onTokensReceived(msg.sender, _from, _value);\n    }\n\n\n    /**\n     * Event handler\n     * \n     * Called by `_token` when a token amount is received\n     *\n     * @param _token The token contract that received the transaction\n     * @param _from The account or contract that send the transaction\n     * @param _value The value of tokens that where received\n     */\n    function onTokensReceived(address _token, address _from, uint _value) internal;\n}\n\n\n\n/**\n * ITokenRetriever\n *\n * Allows tokens to be retrieved from a contract\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ninterface ITokenRetriever {\n\n    /**\n     * Extracts tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract) public;\n}\n\n\n/**\n * TokenRetriever\n *\n * Allows tokens to be retrieved from a contract\n *\n * #created 18/10/2017\n * #author Frank Bonnet\n */\ncontract TokenRetriever is ITokenRetriever {\n\n    /**\n     * Extracts tokens from the contract\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract) public {\n        IToken tokenInstance = IToken(_tokenContract);\n        uint tokenBalance = tokenInstance.balanceOf(this);\n        if (tokenBalance > 0) {\n            tokenInstance.transfer(msg.sender, tokenBalance);\n        }\n    }\n}\n\n\n/**\n * Input validation\n *\n * Validates argument length\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract InputValidator {\n\n\n    /**\n     * ERC20 Short Address Attack fix\n     */\n    modifier safe_arguments(uint _numArgs) {\n        assert(msg.data.length == _numArgs * 32 + 4);\n        _;\n    }\n}\n\n\n/**\n * ERC20 compatible token interface\n *\n * - Implements ERC 20 Token standard\n * - Implements short address attack fix\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ninterface IToken { \n\n    /** \n     * Get the total supply of tokens\n     * \n     * @return The total supply\n     */\n    function totalSupply() public view returns (uint);\n\n\n    /** \n     * Get balance of `_owner` \n     * \n     * @param _owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _owner) public view returns (uint);\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public returns (bool);\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) public returns (bool);\n\n\n    /** \n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n     * \n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public view returns (uint);\n}\n\n\n/**\n * ERC20 compatible token\n *\n * - Implements ERC 20 Token standard\n * - Implements short address attack fix\n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract Token is IToken, InputValidator {\n\n    // Ethereum token standard\n    string public standard = \"Token 0.3.1\";\n    string public name;        \n    string public symbol;\n    uint8 public decimals;\n\n    // Token state\n    uint internal totalTokenSupply;\n\n    // Token balances\n    mapping (address => uint) internal balances;\n\n    // Token allowances\n    mapping (address => mapping (address => uint)) internal allowed;\n\n\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    /** \n     * Construct ERC20 token\n     * \n     * @param _name The full token name\n     * @param _symbol The token symbol (aberration)\n     * @param _decimals The token precision\n     */\n    function Token(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        balances[msg.sender] = 0;\n        totalTokenSupply = 0;\n    }\n\n\n    /** \n     * Get the total token supply\n     * \n     * @return The total supply\n     */\n    function totalSupply() public view returns (uint) {\n        return totalTokenSupply;\n    }\n\n\n    /** \n     * Get balance of `_owner` \n     * \n     * @param _owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address _owner) public view returns (uint) {\n        return balances[_owner];\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public safe_arguments(2) returns (bool) {\n\n        // Check if the sender has enough tokens\n        require(balances[msg.sender] >= _value);   \n\n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Transfer tokens\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        // Notify listeners\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not \n     */\n    function transferFrom(address _from, address _to, uint _value) public safe_arguments(3) returns (bool) {\n\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n\n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Check allowance\n        require(_value <= allowed[_from][msg.sender]);\n\n        // Transfer tokens\n        balances[_to] += _value;\n        balances[_from] -= _value;\n\n        // Update allowance\n        allowed[_from][msg.sender] -= _value;\n\n        // Notify listeners\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) public safe_arguments(2) returns (bool) {\n\n        // Update allowance\n        allowed[msg.sender][_spender] = _value;\n\n        // Notify listeners\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /** \n     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n     * \n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public view returns (uint) {\n      return allowed[_owner][_spender];\n    }\n}\n\n\n\n/**\n * IManagedToken\n *\n * Adds the following functionality to the basic ERC20 token\n * - Locking\n * - Issuing\n * - Burning \n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ninterface IManagedToken { \n\n    /** \n     * Returns true if the token is locked\n     * \n     * @return Whether the token is locked\n     */\n    function isLocked() public view returns (bool);\n\n\n    /**\n     * Locks the token so that the transfering of value is disabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function lock() public returns (bool);\n\n\n    /**\n     * Unlocks the token so that the transfering of value is enabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function unlock() public returns (bool);\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the tokens where sucessfully issued or not\n     */\n    function issue(address _to, uint _value) public returns (bool);\n\n\n    /**\n     * Burns `_value` tokens of `_from`\n     *\n     * @param _from The address that owns the tokens to be burned\n     * @param _value The amount of tokens to be burned\n     * @return Whether the tokens where sucessfully burned or not \n     */\n    function burn(address _from, uint _value) public returns (bool);\n}\n\n\n/**\n * ManagedToken\n *\n * Adds the following functionality to the basic ERC20 token\n * - Locking\n * - Issuing\n * - Burning \n *\n * #created 29/09/2017\n * #author Frank Bonnet\n */\ncontract ManagedToken is IManagedToken, Token, MultiOwned {\n\n    // Token state\n    bool internal locked;\n\n\n    /**\n     * Allow access only when not locked\n     */\n    modifier only_when_unlocked() {\n        require(!locked);\n        _;\n    }\n\n\n    /** \n     * Construct managed ERC20 token\n     * \n     * @param _name The full token name\n     * @param _symbol The token symbol (aberration)\n     * @param _decimals The token precision\n     * @param _locked Whether the token should be locked initially\n     */\n    function ManagedToken(string _name, string _symbol, uint8 _decimals, bool _locked) public \n        Token(_name, _symbol, _decimals) {\n        locked = _locked;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public only_when_unlocked returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) public only_when_unlocked returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    /** \n     * `msg.sender` approves `_spender` to spend `_value` tokens\n     * \n     * @param _spender The address of the account able to transfer the tokens\n     * @param _value The amount of tokens to be approved for transfer\n     * @return Whether the approval was successful or not\n     */\n    function approve(address _spender, uint _value) public returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n\n    /** \n     * Returns true if the token is locked\n     * \n     * @return Whether the token is locked\n     */\n    function isLocked() public view returns (bool) {\n        return locked;\n    }\n\n\n    /**\n     * Locks the token so that the transfering of value is enabled \n     *\n     * @return Whether the locking was successful or not\n     */\n    function lock() public only_owner returns (bool)  {\n        locked = true;\n        return locked;\n    }\n\n\n    /**\n     * Unlocks the token so that the transfering of value is enabled \n     *\n     * @return Whether the unlocking was successful or not\n     */\n    function unlock() public only_owner returns (bool)  {\n        locked = false;\n        return !locked;\n    }\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the approval was successful or not\n     */\n    function issue(address _to, uint _value) public only_owner safe_arguments(2) returns (bool) {\n        \n        // Check for overflows\n        require(balances[_to] + _value >= balances[_to]);\n\n        // Create tokens\n        balances[_to] += _value;\n        totalTokenSupply += _value;\n\n        // Notify listeners \n        Transfer(0, this, _value);\n        Transfer(this, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * Burns `_value` tokens of `_recipient`\n     *\n     * @param _from The address that owns the tokens to be burned\n     * @param _value The amount of tokens to be burned\n     * @return Whether the tokens where sucessfully burned or not\n     */\n    function burn(address _from, uint _value) public only_owner safe_arguments(2) returns (bool) {\n\n        // Check if the token owner has enough tokens\n        require(balances[_from] >= _value);\n\n        // Check for overflows\n        require(balances[_from] - _value <= balances[_from]);\n\n        // Burn tokens\n        balances[_from] -= _value;\n        totalTokenSupply -= _value;\n\n        // Notify listeners \n        Transfer(_from, 0, _value);\n        return true;\n    }\n}\n\n\n/**\n * Spend token (SPEND)\n *\n * SPEND is an ERC20 token as outlined within the whitepaper.\n *\n * #created 06/01/2018\n * #author Frank Bonnet\n */\ncontract SpendToken is ManagedToken, Observable, TokenRetriever {\n\n    /**\n     * Construct the managed token\n     */\n    function SpendToken() public ManagedToken(\"Spend Token\", \"SPEND\", 8, true) {}\n\n\n    /**\n     * Returns whether sender is allowed to register `_observer`\n     *\n     * @param _observer The address to register as an observer\n     * @return Whether the sender is allowed or not\n     */\n    function canRegisterObserver(address _observer) internal view returns (bool) {\n        return _observer != address(this) && isOwner(msg.sender);\n    }\n\n\n    /**\n     * Returns whether sender is allowed to unregister `_observer`\n     *\n     * @param _observer The address to unregister as an observer\n     * @return Whether the sender is allowed or not\n     */\n    function canUnregisterObserver(address _observer) internal view returns (bool) {\n        return msg.sender == _observer || isOwner(msg.sender);\n    }\n\n\n    /**\n     * Issues `_value` new tokens to `_to`\n     *\n     * @param _to The address to which the tokens will be issued\n     * @param _value The amount of new tokens to issue\n     * @return Whether the approval was successful or not\n     */\n    function issue(address _to, uint _value) public returns (bool) {\n        bool result = super.issue(_to, _value);\n        if (isObserver(_to)) {\n            ITokenObserver(_to).notifyTokensReceived(msg.sender, _value);\n        }\n\n        return result;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `msg.sender`\n     * - Notifies registered observers when the observer receives tokens\n     * \n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transfer(address _to, uint _value) public returns (bool) {\n        bool result = super.transfer(_to, _value);\n        if (isObserver(_to)) {\n            ITokenObserver(_to).notifyTokensReceived(msg.sender, _value);\n        }\n\n        return result;\n    }\n\n\n    /** \n     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n     * - Notifies registered observers when the observer receives tokens\n     * \n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount of token to be transferred\n     * @return Whether the transfer was successful or not\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (isObserver(_to)) {\n            ITokenObserver(_to).notifyTokensReceived(_from, _value);\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Failsafe mechanism\n     * \n     * Allows the owner to retrieve tokens from the contract that \n     * might have been send there by accident\n     *\n     * @param _tokenContract The address of ERC20 compatible token\n     */\n    function retrieveTokens(address _tokenContract) public only_owner {\n        super.retrieveTokens(_tokenContract);\n    }\n\n\n    /**\n     * Prevents the accidental sending of ether\n     */\n    function () public payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_observer\",\"type\":\"address\"}],\"name\":\"registerObserver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOwnerAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getObserverAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getObserverCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isObserver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_observer\",\"type\":\"address\"}],\"name\":\"unregisterObserver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600b81527f546f6b656e20302e332e31000000000000000000000000000000000000000000602082015260009080516200004d9291602001906200018d565b5034156200005a57600080fd5b604080519081016040908152600b82527f5370656e6420546f6b656e00000000000000000000000000000000000000000060208301528051908101604052600581527f5350454e4400000000000000000000000000000000000000000000000000000060208201526008600183838383838051620000dd9291602001906200018d565b506002828051620000f39291602001906200018d565b506003805460ff191660ff92909216919091179055505033600160a060020a0316600090815260056020526040812081905560045560088054600181016200013c838262000212565b5060009182526020808320919091018054600160a060020a03191633600160a060020a031690811790915582526007905260408120556009805460ff1916911515919091179055506200025e915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d057805160ff191683800117855562000200565b8280016001018555821562000200579182015b8281111562000200578251825591602001919060010190620001e3565b506200020e9291506200023e565b5090565b8154818355818115116200023957600083815260209020620002399181019083016200023e565b505050565b6200025b91905b808211156200020e576000815560010162000245565b90565b6111ea806200026e6000396000f30060606040526004361061013a5763ffffffff60e060020a60003504166306fdde03811461013f578063095ea7b3146101c9578063173825d9146101ff57806318160ddd1461022057806323b872dd146102455780632c07398d1461026d5780632f54bf6e1461028c578063313ce567146102ab57806355f28260146102d45780635a3b7e4214610306578063601fc832146103195780637065cb481461032f57806370a082311461034e57806377215c8d1461036d578063867904b41461038057806395d89b41146103a25780639dc29fac146103b5578063a4e2d634146103d7578063a69df4b5146103ea578063a9059cbb146103fd578063ac4ddd9f1461041f578063d9facbe01461043e578063dd62ed3e1461045d578063ef18374a14610482578063f83d08ba14610495578063f94d71a0146104a8575b600080fd5b341561014a57600080fd5b6101526104c7565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018e578082015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d457600080fd5b6101eb600160a060020a0360043516602435610565565b604051901515815260200160405180910390f35b341561020a57600080fd5b61021e600160a060020a0360043516610578565b005b341561022b57600080fd5b610233610655565b60405190815260200160405180910390f35b341561025057600080fd5b6101eb600160a060020a036004358116906024351660443561065c565b341561027857600080fd5b61021e600160a060020a03600435166106eb565b341561029757600080fd5b6101eb600160a060020a0360043516610770565b34156102b657600080fd5b6102be6107e0565b60405160ff909116815260200160405180910390f35b34156102df57600080fd5b6102ea6004356107e9565b604051600160a060020a03909116815260200160405180910390f35b341561031157600080fd5b610152610815565b341561032457600080fd5b6102ea600435610880565b341561033a57600080fd5b61021e600160a060020a0360043516610891565b341561035957600080fd5b610233600160a060020a0360043516610913565b341561037857600080fd5b61023361092e565b341561038b57600080fd5b6101eb600160a060020a0360043516602435610934565b34156103ad57600080fd5b6101526109c0565b34156103c057600080fd5b6101eb600160a060020a0360043516602435610a2b565b34156103e257600080fd5b6101eb610af1565b34156103f557600080fd5b6101eb610afa565b341561040857600080fd5b6101eb600160a060020a0360043516602435610b20565b341561042a57600080fd5b61021e600160a060020a0360043516610b2d565b341561044957600080fd5b6101eb600160a060020a0360043516610b4a565b341561046857600080fd5b610233600160a060020a0360043581169060243516610b99565b341561048d57600080fd5b610233610bc4565b34156104a057600080fd5b6101eb610bca565b34156104b357600080fd5b61021e600160a060020a0360043516610bf6565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b505050505081565b60006105718383610ccc565b9392505050565b60008061058433610770565b151561058f57600080fd5b61059883610770565b1561065057600160a060020a038316600090815260076020526040902054600880549193509060001981019081106105cc57fe5b60009182526020909120015460088054600160a060020a0390921692508291849081106105f557fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039485161790559183168152600790915260409020829055600880549061064e906000198301611161565b505b505050565b6004545b90565b60008061066a858585610d44565b905061067584610b4a565b156106e35783600160a060020a0316637cf5d66f868560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156106ce57600080fd5b6102c65a03f115156106df57600080fd5b5050505b949350505050565b6106f481610d62565b15156106ff57600080fd5b61070881610b4a565b151561076d576001600b80548060010182816107249190611161565b6000928352602080842092909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091558352600a909152604090912091900390555b50565b600854600160a060020a0382166000908152600760205260408120549091901080156107da5750600160a060020a0382166000908152600760205260409020546008805490919081106107bf57fe5b600091825260209091200154600160a060020a038381169116145b92915050565b60035460ff1681565b60006008828154811015156107fa57fe5b600091825260209091200154600160a060020a031692915050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561055d5780601f106105325761010080835404028352916020019161055d565b6000600b828154811015156107fa57fe5b61089a33610770565b15156108a557600080fd5b6108ae81610770565b151561076d576001600880548060010182816108ca9190611161565b6000928352602080842092909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03969096169586179055938252600790526040902091039055565b600160a060020a031660009081526005602052604090205490565b600b5490565b6000806109418484610d8a565b905061094c84610b4a565b156105715783600160a060020a0316637cf5d66f338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156109a557600080fd5b6102c65a03f115156109b657600080fd5b5050509392505050565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561055d5780601f106105325761010080835404028352916020019161055d565b6000610a3633610770565b1515610a4157600080fd5b600236604414610a4d57fe5b600160a060020a03841660009081526005602052604090205483901015610a7357600080fd5b600160a060020a0384166000908152600560205260409020548381031115610a9a57600080fd5b600160a060020a0384166000818152600560205260408082208054879003905560048054879003905590919060008051602061119f8339815191529086905190815260200160405180910390a35060019392505050565b60095460ff1690565b6000610b0533610770565b1515610b1057600080fd5b506009805460ff19169055600190565b6000806109418484610e60565b610b3633610770565b1515610b4157600080fd5b61076d81610e7d565b600b54600160a060020a0382166000908152600a60205260408120549091901080156107da5750600160a060020a0382166000908152600a6020526040902054600b805490919081106107bf57fe5b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60085490565b6000610bd533610770565b1515610be057600080fd5b506009805460ff19166001179081905560ff1690565b600080610c0283610f78565b1515610c0d57600080fd5b610c1683610b4a565b1561065057600160a060020a0383166000908152600a6020526040902054600b8054919350906000198101908110610c4a57fe5b600091825260209091200154600b8054600160a060020a039092169250829184908110610c7357fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039485161790559183168152600a90915260409020829055600b80549061064e906000198301611161565b6000600236604414610cda57fe5b600160a060020a03338116600081815260066020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35060019392505050565b60095460009060ff1615610d5757600080fd5b6106e3848484610f9e565b600030600160a060020a031682600160a060020a0316141580156107da57506107da33610770565b6000610d9533610770565b1515610da057600080fd5b600236604414610dac57fe5b600160a060020a0384166000908152600560205260409020548381011015610dd357600080fd5b600160a060020a038085166000908152600560205260408082208054870190556004805487019055309092169160008051602061119f8339815191529086905190815260200160405180910390a383600160a060020a031630600160a060020a031660008051602061119f8339815191528560405190815260200160405180910390a35060019392505050565b60095460009060ff1615610e7357600080fd5b61057183836110a9565b806000600160a060020a0382166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ed657600080fd5b6102c65a03f11515610ee757600080fd5b505050604051805191505060008111156106505781600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f5857600080fd5b6102c65a03f11515610f6957600080fd5b50505060405180515050505050565b600081600160a060020a031633600160a060020a031614806107da57506107da33610770565b6000600336606414610fac57fe5b600160a060020a03851660009081526005602052604090205483901015610fd257600080fd5b600160a060020a0384166000908152600560205260409020548381011015610ff957600080fd5b600160a060020a038086166000908152600660209081526040808320339094168352929052205483111561102c57600080fd5b600160a060020a03808516600081815260056020908152604080832080548901905589851680845281842080548a900390556006835281842033909616845294909152908190208054879003905590919060008051602061119f8339815191529086905190815260200160405180910390a3506001949350505050565b60006002366044146110b757fe5b600160a060020a033316600090815260056020526040902054839010156110dd57600080fd5b600160a060020a038416600090815260056020526040902054838101101561110457600080fd5b600160a060020a0333811660008181526005602052604080822080548890039055928716808252908390208054870190559160008051602061119f8339815191529086905190815260200160405180910390a35060019392505050565b8154818355818115116106505760008381526020902061065091810190830161065991905b8082111561119a5760008155600101611186565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820415dc90418e2e08fb7785d67fb335977dc698d233d70a61073afab6eaa201ea60029"
}