{
  "address": "0x1651b9c267249397c6c31477a9dfa2297a1387fb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenizedProperty",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\n/**\n * Copyright (c) 2019 blockimmo AG [emailÂ protected]\n * No license\n */\n\npragma solidity ^0.5.4;\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ncontract MoneyMarketInterface {\n  function getSupplyBalance(address account, address asset) public view returns (uint);\n  function supply(address asset, uint amount) public returns (uint);\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\n}\n\ncontract LoanEscrow is Pausable {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // configurable to any ERC20 (i.e. xCHF)\n  IERC20 public dai = IERC20(0xB4272071eCAdd69d933AdcD19cA99fe80664fc08);  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5  // 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(0x3FDA67f7583380E67ef93072294a7fAc882FD7E7);  // 0x6732c278C58FC90542cce498981844A073D693d7\n\n  event Deposited(address indexed from, uint256 daiAmount);\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\n  event Pulled(address indexed to, uint256 daiAmount);\n\n  mapping(address => uint256) public deposits;\n  mapping(address => uint256) public pulls;\n  uint256 public deposited;\n  uint256 public pulled;\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  function blockimmo() public view returns (address);\n\n  function withdrawInterest() public onlyBlockimmo {\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), address(dai)).add(dai.balanceOf(address(this))).add(pulled).sub(deposited);\n    require(amountInterest > 0, \"no interest\");\n\n    uint256 errorCode = (amountInterest > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), amountInterest.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    dai.safeTransfer(msg.sender, amountInterest);\n    emit InterestWithdrawn(msg.sender, amountInterest);\n  }\n\n  function withdrawMoneyMarket(uint256 _amountDai) public onlyBlockimmo {\n    uint256 errorCode = moneyMarket.withdraw(address(dai), _amountDai);\n    require(errorCode == 0, \"withdraw failed\");\n  }\n\n  function deposit(address _from, uint256 _amountDai) internal {\n    require(_from != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\n\n    if (!paused()) {\n      dai.safeApprove(address(moneyMarket), _amountDai);\n\n      uint256 errorCode = moneyMarket.supply(address(dai), _amountDai);\n      require(errorCode == 0, \"supply failed\");\n      require(dai.allowance(address(this), address(moneyMarket)) == 0, \"allowance not fully consumed by moneyMarket\");\n    }\n\n    deposits[_from] = deposits[_from].add(_amountDai);\n    deposited = deposited.add(_amountDai);\n    emit Deposited(_from, _amountDai);\n  }\n\n  function pull(address _to, uint256 _amountDai, bool _refund) internal {\n    require(_to != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    uint256 errorCode = (_amountDai > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), _amountDai.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    if (_refund) {\n      deposits[_to] = deposits[_to].sub(_amountDai);\n      deposited = deposited.sub(_amountDai);\n    } else {\n      pulls[_to] = pulls[_to].add(_amountDai);\n      pulled = pulled.add(_amountDai);\n    }\n\n    dai.safeTransfer(_to, _amountDai);\n    emit Pulled(_to, _amountDai);\n  }\n}\n\ncontract DividendDistributingToken is ERC20, LoanEscrow {\n  using SafeMath for uint256;\n\n  uint256 public constant POINTS_PER_DAI = uint256(10) ** 32;\n\n  uint256 public pointsPerToken = 0;\n  mapping(address => uint256) public credits;\n  mapping(address => uint256) public lastPointsPerToken;\n\n  event DividendsCollected(address indexed collector, uint256 amount);\n  event DividendsDeposited(address indexed depositor, uint256 amount);\n\n  function collectOwedDividends(address _account) public {\n    creditAccount(_account);\n\n    uint256 _dai = credits[_account].div(POINTS_PER_DAI);\n    credits[_account] = 0;\n\n    pull(_account, _dai, false);\n    emit DividendsCollected(_account, _dai);\n  }\n\n  function depositDividends() public {  // dividends\n    uint256 amount = dai.allowance(msg.sender, address(this));\n\n    uint256 fee = amount.div(100);\n    dai.safeTransferFrom(msg.sender, blockimmo(), fee);\n\n    deposit(msg.sender, amount.sub(fee));\n\n    // partially tokenized properties store the \"non-tokenized\" part in `this` contract, dividends not disrupted\n    uint256 issued = totalSupply().sub(unissued());\n    pointsPerToken = pointsPerToken.add(amount.sub(fee).mul(POINTS_PER_DAI).div(issued));\n\n    emit DividendsDeposited(msg.sender, amount);\n  }\n\n  function unissued() public view returns (uint256) {\n    return balanceOf(address(this));\n  }\n\n  function creditAccount(address _account) internal {\n    uint256 amount = balanceOf(_account).mul(pointsPerToken.sub(lastPointsPerToken[_account]));\n\n    uint256 _credits = credits[_account].add(amount);\n    if (credits[_account] != _credits)\n      credits[_account] = _credits;\n\n    if (lastPointsPerToken[_account] != pointsPerToken)\n      lastPointsPerToken[_account] = pointsPerToken;\n  }\n}\n\ncontract LandRegistryInterface {\n  function getProperty(string memory _eGrid) public view returns (address property);\n}\n\ncontract LandRegistryProxyInterface {\n  function owner() public view returns (address);\n  function landRegistry() public view returns (LandRegistryInterface);\n}\n\ncontract WhitelistInterface {\n  function checkRole(address _operator, string memory _permission) public view;\n}\n\ncontract WhitelistProxyInterface {\n  function whitelist() public view returns (WhitelistInterface);\n}\n\ncontract TokenizedProperty is DividendDistributingToken, ERC20Detailed, Ownable {\n  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56);  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(0x7223b032180CDb06Be7a3D634B1E10032111F367);  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\n\n  uint256 public constant NUM_TOKENS = 1000000;\n\n  modifier isValid() {\n    LandRegistryInterface registry = LandRegistryInterface(registryProxy.landRegistry());\n    require(registry.getProperty(name()) == address(this), \"invalid TokenizedProperty\");\n    _;\n  }\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  constructor(string memory _eGrid, string memory _grundstuck) public ERC20Detailed(_eGrid, _grundstuck, 18) {\n    uint256 totalSupply = NUM_TOKENS.mul(uint256(10) ** decimals());\n    _mint(msg.sender, totalSupply);\n\n    _approve(address(this), blockimmo(), ~uint256(0));  // enable blockimmo to issue `unissued` tokens in the future\n  }\n\n  function blockimmo() public view returns (address) {\n    return registryProxy.owner();\n  }\n\n  function burn(uint256 _value) public isValid {  // buyback\n    creditAccount(msg.sender);\n    _burn(msg.sender, _value);\n  }\n\n  function mint(address _to, uint256 _value) public isValid onlyBlockimmo returns (bool) {  // equity dilution\n    creditAccount(_to);\n    _mint(_to, _value);\n    return true;\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal isValid {\n    whitelistProxy.whitelist().checkRole(_to, \"authorized\");\n\n    creditAccount(_from);  // required for dividends...\n    creditAccount(_to);\n\n    super._transfer(_from, _to, _value);\n  }\n}",
  "bytecode": "60806040526004805474b4272071ecadd69d933adcd19ca99fe80664fc080061010060a860020a031990911617905560058054600160a060020a0319908116733fda67f7583380e67ef93072294a7fac882fd7e7179091556000600a5560108054821673e72ad2a335ae18e6c7cdb6daeb64b0330883cd5617905560118054909116737223b032180cdb06be7a3d634b1e10032111f367179055348015620000a657600080fd5b50604051620032443803806200324483398101806040526040811015620000cc57600080fd5b810190808051640100000000811115620000e557600080fd5b82016020810184811115620000f957600080fd5b81516401000000008111828201871017156200011457600080fd5b505092919060200180516401000000008111156200013157600080fd5b820160208101848111156200014557600080fd5b81516401000000008111828201871017156200016057600080fd5b5050929190505050818160126200018633620002a4640100000000026401000000009004565b6004805460ff191690558251620001a590600d906020860190620005bd565b508151620001bb90600e906020850190620005bd565b50600f805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360006200025a6200023b640100000000620002f6810204565b620f42409060ff16600a0a640100000000620027326200030082021704565b905062000271338264010000000062000338810204565b6200029b3062000289640100000000620003f7810204565b60001964010000000062000489810204565b5050506200065f565b620002bf600382640100000000620029fe6200051782021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600f5460ff165b90565b6000821515620003135750600062000332565b8282028284828115156200032357fe5b04146200032f57600080fd5b90505b92915050565b600160a060020a03821615156200034e57600080fd5b6002546200036b90826401000000006200186b6200057282021704565b600255600160a060020a038216600090815260208190526040902054620003a190826401000000006200186b6200057282021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b601054604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638da5cb5b916004808301926020929190829003018186803b1580156200045657600080fd5b505afa1580156200046b573d6000803e3d6000fd5b505050506040513d60208110156200048257600080fd5b5051905090565b600160a060020a03821615156200049f57600080fd5b600160a060020a0383161515620004b557600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03811615156200052d57600080fd5b62000542828264010000000062000585810204565b156200054d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200032f57600080fd5b6000600160a060020a03821615156200059d57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060057805160ff191683800117855562000630565b8280016001018555821562000630579182015b828111156200063057825182559160200191906001019062000613565b506200063e92915062000642565b5090565b620002fd91905b808211156200063e576000815560010162000649565b612bd5806200066f6000396000f3fe608060405234801561001057600080fd5b50600436106102615760003560e060020a90048063812bb2a31161014a578063b53dfd4d116100c7578063ef8b71511161008b578063ef8b71511461063b578063f280d77b14610643578063f2fde38b1461064b578063f4b9fa7514610671578063fc7e286d14610679578063fe5ff4681461069f57610261565b8063b53dfd4d146105cf578063d6d75f51146105f5578063dd62ed3e146105fd578063defa92ee1461062b578063eef49ee31461063357610261565b80638da5cb5b1161010e5780638da5cb5b1461055f5780638f32d59b1461056757806395d89b411461056f578063a457c2d714610577578063a9059cbb146105a357610261565b8063812bb2a3146104e657806382dc1ec4146105035780638456cb591461052957806387b95404146105315780638c15f82c1461053957610261565b806340c10f19116101e35780634fcb6f3a116101a75780634fcb6f3a1461047a5780635c975abb14610482578063664c35ab1461048a5780636ef8d66d146104b057806370a08231146104b8578063715018a6146104de57610261565b806340c10f19146103fb5780634149db481461042757806342966c681461042f57806346fbf68e1461044c5780634c4295921461047257610261565b806323b872dd1161022a57806323b872dd1461036b57806327cdf22e146103a1578063313ce567146103a957806339509351146103c75780633f4ba83a146103f357610261565b806263750c1461026657806306fdde0314610270578063095ea7b3146102ed57806318160ddd1461032d578063218d984b14610347575b600080fd5b61026e6106c5565b005b610278610b51565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b257818101518382015260200161029a565b50505050905090810190601f1680156102df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103196004803603604081101561030357600080fd5b50600160a060020a038135169060200135610be7565b604080519115158252519081900360200190f35b610335610bfe565b60408051918252519081900360200190f35b61034f610c04565b60408051600160a060020a039092168252519081900360200190f35b6103196004803603606081101561038157600080fd5b50600160a060020a03813581169160208101359091169060400135610c13565b61034f610c6a565b6103b1610c79565b6040805160ff9092168252519081900360200190f35b610319600480360360408110156103dd57600080fd5b50600160a060020a038135169060200135610c82565b61026e610cbe565b6103196004803603604081101561041157600080fd5b50600160a060020a038135169060200135610d22565b610335610f59565b61026e6004803603602081101561044557600080fd5b5035610f60565b6103196004803603602081101561046257600080fd5b5035600160a060020a031661113e565b610335611151565b610335611163565b610319611169565b610335600480360360208110156104a057600080fd5b5035600160a060020a0316611172565b61026e611184565b610335600480360360208110156104ce57600080fd5b5035600160a060020a031661118f565b61026e6111aa565b61026e600480360360208110156104fc57600080fd5b503561121a565b61026e6004803603602081101561051957600080fd5b5035600160a060020a0316611380565b61026e6113a0565b610335611406565b61026e6004803603602081101561054f57600080fd5b5035600160a060020a0316611416565b61034f6114c4565b6103196114d8565b6102786114ee565b6103196004803603604081101561058d57600080fd5b50600160a060020a03813516906020013561154f565b610319600480360360408110156105b957600080fd5b50600160a060020a03813516906020013561158b565b610335600480360360208110156105e557600080fd5b5035600160a060020a0316611598565b61034f6115aa565b6103356004803603604081101561061357600080fd5b50600160a060020a03813581169160200135166115b9565b61026e6115e4565b61033561177c565b610335611782565b61034f611788565b61026e6004803603602081101561066157600080fd5b5035600160a060020a0316611817565b61034f611833565b6103356004803603602081101561068f57600080fd5b5035600160a060020a0316611847565b610335600480360360208110156106b557600080fd5b5035600160a060020a0316611859565b6106cd611788565b600160a060020a0316331461072c576040805160e560020a62461bcd02815260206004820152600d60248201527f6f6e6c79426c6f636b696d6d6f00000000000000000000000000000000000000604482015290519081900360640190fd5b600061089c600854610890600954610884600460019054906101000a9004600160a060020a0316600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d60208110156107d557600080fd5b505160055460048054604080517fba3777310000000000000000000000000000000000000000000000000000000081523093810193909352600160a060020a03610100909204821660248401525192169163ba37773191604480820192602092909190829003018186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d602081101561087657600080fd5b50519063ffffffff61186b16565b9063ffffffff61186b16565b9063ffffffff61188416565b9050600081116108f6576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f20696e746572657374000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480546040805160e060020a6370a08231028152309381019390935251600092610100909204600160a060020a0316916370a08231916024808301926020929190829003018186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d602081101561097657600080fd5b50518211610985576000610aa3565b600554600480546040805160e060020a6370a08231028152309381019390935251600160a060020a039384169363f3fef3a3936101009093041691610a249183916370a08231916024808301926020929190829003018186803b1580156109eb57600080fd5b505afa1580156109ff573d6000803e3d6000fd5b505050506040513d6020811015610a1557600080fd5b5051869063ffffffff61188416565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a7657600080fd5b505af1158015610a8a573d6000803e3d6000fd5b505050506040513d6020811015610aa057600080fd5b50515b90508015610afb576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600454610b17906101009004600160a060020a03163384611899565b60408051838152905133917f0fb2ffd41401cdebe76e1a7cdcaed20ad31cf8d215f8209b73ec00525cb8d686919081900360200190a25050565b600d8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610bdd5780601f10610bb257610100808354040283529160200191610bdd565b820191906000526020600020905b815481529060010190602001808311610bc057829003601f168201915b5050505050905090565b6000610bf433848461191e565b5060015b92915050565b60025490565b601054600160a060020a031681565b6000610c208484846119aa565b600160a060020a038416600090815260016020908152604080832033808552925290912054610c60918691610c5b908663ffffffff61188416565b61191e565b5060019392505050565b601154600160a060020a031681565b600f5460ff1690565b336000818152600160209081526040808320600160a060020a03871684529091528120549091610bf4918590610c5b908663ffffffff61186b16565b610cc73361113e565b1515610cd257600080fd5b60045460ff161515610ce357600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600080601060009054906101000a9004600160a060020a0316600160a060020a031663bd4dc0246040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b5051905030600160a060020a03821663ab331a34610dbc610b51565b6040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e0b578181015183820152602001610df3565b50505050905090810190601f168015610e385780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610e5557600080fd5b505afa158015610e69573d6000803e3d6000fd5b505050506040513d6020811015610e7f57600080fd5b5051600160a060020a031614610edf576040805160e560020a62461bcd02815260206004820152601960248201527f696e76616c696420546f6b656e697a656450726f706572747900000000000000604482015290519081900360640190fd5b610ee7611788565b600160a060020a03163314610f46576040805160e560020a62461bcd02815260206004820152600d60248201527f6f6e6c79426c6f636b696d6d6f00000000000000000000000000000000000000604482015290519081900360640190fd5b610f4f84611cc0565b610c608484611da6565b620f424081565b601054604080517fbd4dc0240000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163bd4dc024916004808301926020929190829003018186803b158015610fbe57600080fd5b505afa158015610fd2573d6000803e3d6000fd5b505050506040513d6020811015610fe857600080fd5b5051905030600160a060020a03821663ab331a34611004610b51565b6040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561105357818101518382015260200161103b565b50505050905090810190601f1680156110805780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d60208110156110c757600080fd5b5051600160a060020a031614611127576040805160e560020a62461bcd02815260206004820152601960248201527f696e76616c696420546f6b656e697a656450726f706572747900000000000000604482015290519081900360640190fd5b61113033611cc0565b61113a3383611e50565b5050565b6000610bf860038363ffffffff611ef916565b6d04ee2d6d415b85acef810000000081565b600a5481565b60045460ff1690565b60076020526000908152604090205481565b61118d33611f30565b565b600160a060020a031660009081526020819052604090205490565b6111b26114d8565b15156111bd57600080fd5b600f546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600f805474ffffffffffffffffffffffffffffffffffffffff0019169055565b611222611788565b600160a060020a03163314611281576040805160e560020a62461bcd02815260206004820152600d60248201527f6f6e6c79426c6f636b696d6d6f00000000000000000000000000000000000000604482015290519081900360640190fd5b60055460048054604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a036101009093048316938101939093526024830185905251600093919091169163f3fef3a391604480830192602092919082900301818787803b1580156112fc57600080fd5b505af1158015611310573d6000803e3d6000fd5b505050506040513d602081101561132657600080fd5b50519050801561113a576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6113893361113e565b151561139457600080fd5b61139d81611f78565b50565b6113a93361113e565b15156113b457600080fd5b60045460ff16156113c457600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60006114113061118f565b905090565b61141f81611cc0565b600160a060020a0381166000908152600b6020526040812054611456906d04ee2d6d415b85acef810000000063ffffffff611fc016565b600160a060020a0383166000908152600b602052604081208190559091506114819083908390611fe4565b604080518281529051600160a060020a038416917f97e6e78d2df94abb37cadd04b8120a3ff229c90b3495b36dadc97ce7b49542c4919081900360200190a25050565b600f546101009004600160a060020a031690565b600f546101009004600160a060020a0316331490565b600e8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610bdd5780601f10610bb257610100808354040283529160200191610bdd565b336000818152600160209081526040808320600160a060020a03871684529091528120549091610bf4918590610c5b908663ffffffff61188416565b6000610bf43384846119aa565b600c6020526000908152604090205481565b600554600160a060020a031681565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60048054604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152339381019390935230602484015251600092610100909204600160a060020a03169163dd62ed3e916044808301926020929190829003018186803b15801561165657600080fd5b505afa15801561166a573d6000803e3d6000fd5b505050506040513d602081101561168057600080fd5b50519050600061169782606463ffffffff611fc016565b90506116be336116a5611788565b6004546101009004600160a060020a0316919084612374565b6116d7336116d2848463ffffffff61188416565b6123fc565b60006116ec6116e4611406565b610890610bfe565b905061173e61172f826117236d04ee2d6d415b85acef8100000000611717888863ffffffff61188416565b9063ffffffff61273216565b9063ffffffff611fc016565b600a549063ffffffff61186b16565b600a5560408051848152905133917f630819c75b5dd0ad6507f10e821c0d57f89fa4d9005de30999ec5380475c190e919081900360200190a2505050565b60085481565b60095481565b601054604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638da5cb5b916004808301926020929190829003018186803b1580156117e657600080fd5b505afa1580156117fa573d6000803e3d6000fd5b505050506040513d602081101561181057600080fd5b5051905090565b61181f6114d8565b151561182a57600080fd5b61139d8161275d565b6004546101009004600160a060020a031681565b60066020526000908152604090205481565b600b6020526000908152604090205481565b60008282018381101561187d57600080fd5b9392505050565b60008282111561189357600080fd5b50900390565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526119199084906127e6565b505050565b600160a060020a038216151561193357600080fd5b600160a060020a038316151561194857600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b601054604080517fbd4dc0240000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163bd4dc024916004808301926020929190829003018186803b158015611a0857600080fd5b505afa158015611a1c573d6000803e3d6000fd5b505050506040513d6020811015611a3257600080fd5b5051905030600160a060020a03821663ab331a34611a4e610b51565b6040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a9d578181015183820152602001611a85565b50505050905090810190601f168015611aca5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611ae757600080fd5b505afa158015611afb573d6000803e3d6000fd5b505050506040513d6020811015611b1157600080fd5b5051600160a060020a031614611b71576040805160e560020a62461bcd02815260206004820152601960248201527f696e76616c696420546f6b656e697a656450726f706572747900000000000000604482015290519081900360640190fd5b601160009054906101000a9004600160a060020a0316600160a060020a03166393e59dc16040518163ffffffff1660e060020a02815260040160206040518083038186803b158015611bc257600080fd5b505afa158015611bd6573d6000803e3d6000fd5b505050506040513d6020811015611bec57600080fd5b5051604080517f0988ca8c000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201839052600a60448301527f617574686f72697a656400000000000000000000000000000000000000000000606483015291519190921691630988ca8c916084808301926000929190829003018186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b50505050611ca684611cc0565b611caf83611cc0565b611cba8484846128e5565b50505050565b600160a060020a0381166000908152600c6020526040812054600a54611cf991611cf0919063ffffffff61188416565b6117178461118f565b600160a060020a0383166000908152600b602052604081205491925090611d26908363ffffffff61186b16565b600160a060020a0384166000908152600b60205260409020549091508114611d6457600160a060020a0383166000908152600b602052604090208190555b600a54600160a060020a0384166000908152600c60205260409020541461191957600a54600160a060020a0384166000908152600c6020526040902055505050565b600160a060020a0382161515611dbb57600080fd5b600254611dce908263ffffffff61186b16565b600255600160a060020a038216600090815260208190526040902054611dfa908263ffffffff61186b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0382161515611e6557600080fd5b600254611e78908263ffffffff61188416565b600255600160a060020a038216600090815260208190526040902054611ea4908263ffffffff61188416565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a0382161515611f1057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b611f4160038263ffffffff6129b216565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b611f8960038263ffffffff6129fe16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000808211611fce57600080fd5b60008284811515611fdb57fe5b04949350505050565b600160a060020a03831615801590611ffc5750600082115b1515612052576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c696420706172616d65746572287329000000000000000000000000604482015290519081900360640190fd5b600480546040805160e060020a6370a08231028152309381019390935251600092610100909204600160a060020a0316916370a08231916024808301926020929190829003018186803b1580156120a857600080fd5b505afa1580156120bc573d6000803e3d6000fd5b505050506040513d60208110156120d257600080fd5b505183116120e15760006121ff565b600554600480546040805160e060020a6370a08231028152309381019390935251600160a060020a039384169363f3fef3a39361010090930416916121809183916370a08231916024808301926020929190829003018186803b15801561214757600080fd5b505afa15801561215b573d6000803e3d6000fd5b505050506040513d602081101561217157600080fd5b5051879063ffffffff61188416565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156121d257600080fd5b505af11580156121e6573d6000803e3d6000fd5b505050506040513d60208110156121fc57600080fd5b50515b90508015612257576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b81156122ba57600160a060020a038416600090815260066020526040902054612286908463ffffffff61188416565b600160a060020a0385166000908152600660205260409020556008546122b2908463ffffffff61188416565b600855612313565b600160a060020a0384166000908152600760205260409020546122e3908463ffffffff61186b16565b600160a060020a03851660009081526007602052604090205560095461230f908463ffffffff61186b16565b6009555b60045461232f906101009004600160a060020a03168585611899565b604080518481529051600160a060020a038616917f8f6dc746d2ddfc02adada7fa1b00410b478496d5fed7a2b9020322b3959fe9ee919081900360200190a250505050565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611cba9085906127e6565b600160a060020a038216158015906124145750600081115b151561246a576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c696420706172616d65746572287329000000000000000000000000604482015290519081900360640190fd5b600454612487906101009004600160a060020a0316333084612374565b61248f611169565b1515612697576005546004546124b791600160a060020a036101009092048216911683612a4c565b60055460048054604080517ff2b9fdb8000000000000000000000000000000000000000000000000000000008152600160a060020a036101009093048316938101939093526024830185905251600093919091169163f2b9fdb891604480830192602092919082900301818787803b15801561253257600080fd5b505af1158015612546573d6000803e3d6000fd5b505050506040513d602081101561255c57600080fd5b5051905080156125b6576040805160e560020a62461bcd02815260206004820152600d60248201527f737570706c79206661696c656400000000000000000000000000000000000000604482015290519081900360640190fd5b60048054600554604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523094810194909452600160a060020a03918216602485015251610100909204169163dd62ed3e916044808301926020929190829003018186803b15801561262a57600080fd5b505afa15801561263e573d6000803e3d6000fd5b505050506040513d602081101561265457600080fd5b5051156126955760405160e560020a62461bcd02815260040180806020018281038252602b815260200180612b7f602b913960400191505060405180910390fd5b505b600160a060020a0382166000908152600660205260409020546126c0908263ffffffff61186b16565b600160a060020a0383166000908152600660205260409020556008546126ec908263ffffffff61186b16565b600855604080518281529051600160a060020a038416917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4919081900360200190a25050565b600082151561274357506000610bf8565b82820282848281151561275257fe5b041461187d57600080fd5b600160a060020a038116151561277257600080fd5b600f54604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f8054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6127f882600160a060020a0316612b76565b151561280357600080fd5b6000606083600160a060020a0316836040518082805190602001908083835b602083106128415780518252601f199092019160209182019101612822565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146128a3576040519150601f19603f3d011682016040523d82523d6000602084013e6128a8565b606091505b50915091508115156128b957600080fd5b600081511115611cba578080602001905160208110156128d857600080fd5b50511515611cba57600080fd5b600160a060020a03821615156128fa57600080fd5b600160a060020a038316600090815260208190526040902054612923908263ffffffff61188416565b600160a060020a038085166000908152602081905260408082209390935590841681522054612958908263ffffffff61186b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600160a060020a03811615156129c757600080fd5b6129d18282611ef9565b15156129dc57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515612a1357600080fd5b612a1d8282611ef9565b15612a2757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b801580612aeb5750604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612abd57600080fd5b505afa158015612ad1573d6000803e3d6000fd5b505050506040513d6020811015612ae757600080fd5b5051155b1515612af657600080fd5b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526119199084906127e6565b6000903b119056fe616c6c6f77616e6365206e6f742066756c6c7920636f6e73756d6564206279206d6f6e65794d61726b6574a165627a7a723058203eb860386d1e437905939650133907aa6e7daf98f0e01b14b44f6815d8b5f76f002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d426c7563632d4c6162732d4147000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009424c5543434c4142530000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d426c7563632d4c6162732d4147000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009424c5543434c4142530000000000000000000000000000000000000000000000"
}