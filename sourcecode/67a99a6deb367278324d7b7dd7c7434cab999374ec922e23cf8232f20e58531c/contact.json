{
  "address": "0x421b80101807be3503a697410c419ba491dd876e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YaluCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.4.24;\n\ncontract SafeMath {\n    function safeAdd(uint _a, uint _b) public pure returns (uint c) {\n        c = _a + _b;\n        require(c >= _a);\n    }\n    function safeSub(uint _a, uint _b) public pure returns (uint c) {\n        require(_b <= _a);\n        c = _a - _b;\n    }\n}\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address _tokenOwner) public view returns (uint balance);\n    function allowance(address _tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address _to, uint _tokens) public returns (bool success);\n    function approve(address _spender, uint _tokens) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _tokens) public returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint _tokens);\n    event Approval(address indexed _tokenOwner, address indexed _spender, uint _tokens);\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address _from, uint256 _tokens, address _token, bytes _extraData) public;\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract Pausable is Owned {\n  event Paused();\n  event Unpaused();\n\n  bool public paused = false;\n\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Paused();\n  }\n\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpaused();\n  }\n}\n\n\ncontract YaluCoin is ERC20Interface, Pausable, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) internal allowed;\n\n    constructor() public {\n        symbol = \"YLC\";\n        name = \"YaluCoin\";\n        decimals = 0;\n        _totalSupply = 1000000;\n        balances[0x9BE91439A3882dEF9EEfA0e89f790135219e1809] = _totalSupply;\n        emit Transfer(address(0), 0x9BE91439A3882dEF9EEfA0e89f790135219e1809, _totalSupply);\n    }\n\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n    function balanceOf(address _tokenOwner) public view returns (uint balance) {\n        return balances[_tokenOwner];\n    }\n\n    function transfer(address _to, uint _tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n        balances[_to] = safeAdd(balances[_to], _tokens);\n        emit Transfer(msg.sender, _to, _tokens);\n        return true;\n    }\n\n    function approve(address _spender, uint _tokens) public whenNotPaused  returns (bool success) {\n        allowed[msg.sender][_spender] = _tokens;\n        emit Approval(msg.sender, _spender, _tokens);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _tokens) public whenNotPaused returns (bool success) {\n        balances[_from] = safeSub(balances[_from], _tokens);\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _tokens);\n        balances[_to] = safeAdd(balances[_to], _tokens);\n        emit Transfer(_from, _to, _tokens);\n        return true;\n    }\n\n    function allowance(address _tokenOwner, address _spender) public view returns (uint remaining) {\n        return allowed[_tokenOwner][_spender];\n    }\n\n    function approveAndCall(address _spender, uint _tokens, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _tokens;\n        emit Approval(msg.sender, _spender, _tokens);\n        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _tokens, this, _extraData);\n        return true;\n    }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b5060008054600160a060020a031916331790556040805180820190915260038082527f594c430000000000000000000000000000000000000000000000000000000000602090920191825261007791600291610150565b506040805180820190915260088082527f59616c75436f696e00000000000000000000000000000000000000000000000060209092019182526100bc91600391610150565b506004805460ff19169055620f42406005819055739be91439a3882def9eefa0e89f790135219e18096000818152600660209081527f2b58bce930176a6e908d4390eb0703f99a09f1fd7221ce2c87cce479e8a775c78490556040805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019157805160ff19168380011785556101be565b828001600101855582156101be579182015b828111156101be5782518255916020019190600101906101a3565b506101ca9291506101ce565b5090565b6101e891905b808211156101ca57600081556001016101d4565b90565b610b8f806101fa6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806318160ddd146101d857806323b872dd146101ff578063313ce567146102295780633eaaf86b146102545780633f4ba83a146102695780635c975abb1461028057806370a082311461029557806379ba5097146102b65780638456cb59146102cb5780638da5cb5b146102e057806395d89b4114610311578063a293d1e814610326578063a9059cbb14610341578063cae9ca5114610365578063d4ee1d90146103ce578063dd62ed3e146103e3578063e6cb90131461040a578063f2fde38b14610425575b600080fd5b34801561012257600080fd5b5061012b610446565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a03600435166024356104d4565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101ed610556565b60408051918252519081900360200190f35b34801561020b57600080fd5b506101c4600160a060020a0360043581169060243516604435610588565b34801561023557600080fd5b5061023e61069b565b6040805160ff9092168252519081900360200190f35b34801561026057600080fd5b506101ed6106a4565b34801561027557600080fd5b5061027e6106aa565b005b34801561028c57600080fd5b506101c4610722565b3480156102a157600080fd5b506101ed600160a060020a0360043516610732565b3480156102c257600080fd5b5061027e61074d565b3480156102d757600080fd5b5061027e6107d5565b3480156102ec57600080fd5b506102f5610852565b60408051600160a060020a039092168252519081900360200190f35b34801561031d57600080fd5b5061012b610861565b34801561033257600080fd5b506101ed6004356024356108b9565b34801561034d57600080fd5b506101c4600160a060020a03600435166024356108ce565b34801561037157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101c4948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506109729650505050505050565b3480156103da57600080fd5b506102f5610ad3565b3480156103ef57600080fd5b506101ed600160a060020a0360043581169060243516610ae2565b34801561041657600080fd5b506101ed600435602435610b0d565b34801561043157600080fd5b5061027e600160a060020a0360043516610b1d565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104cc5780601f106104a1576101008083540402835291602001916104cc565b820191906000526020600020905b8154815290600101906020018083116104af57829003601f168201915b505050505081565b60015460009060a060020a900460ff16156104ee57600080fd5b336000818152600760209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005540390565b60015460009060a060020a900460ff16156105a257600080fd5b600160a060020a0384166000908152600660205260409020546105c590836108b9565b600160a060020a03851660009081526006602090815260408083209390935560078152828220338352905220546105fc90836108b9565b600160a060020a03808616600090815260076020908152604080832033845282528083209490945591861681526006909152205461063a9083610b0d565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b60055481565b600054600160a060020a031633146106c157600080fd5b60015460a060020a900460ff1615156106d957600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b60015460a060020a900460ff1681565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a0316331461076457600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031633146107ec57600080fd5b60015460a060020a900460ff161561080357600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104cc5780601f106104a1576101008083540402835291602001916104cc565b6000828211156108c857600080fd5b50900390565b336000908152600660205260408120546108e890836108b9565b3360009081526006602052604080822092909255600160a060020a038516815220546109149083610b0d565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000818152600760209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610a62578181015183820152602001610a4a565b50505050905090810190601f168015610a8f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b8181018281101561055057600080fd5b600054600160a060020a03163314610b3457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202158c68f6ef416ea1b6fed21575911caab2d6dfdbbf6d5057cc43f55e3d1ce4e0029"
}