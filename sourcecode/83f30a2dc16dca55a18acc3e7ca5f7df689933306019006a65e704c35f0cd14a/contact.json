{
  "address": "0x946048a75af11c300a274344887ec39452218b3d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MCH: Presale",
  "contractName": "HeroPresale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() public {\n    minters.add(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function renounceMinter() public {\n    minters.remove(msg.sender);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkAndCallSafeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) public view returns (string);\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string internal _name;\n\n  // Token symbol\n  string internal _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) public view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n    public\n  {\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n\n/**\n * @title ERC721Mintable\n * @dev ERC721 minting logic\n */\ncontract ERC721Mintable is ERC721Full, MinterRole {\n  event MintingFinished();\n\n  bool private _mintingFinished = false;\n\n  modifier onlyBeforeMintingFinished() {\n    require(!_mintingFinished);\n    _;\n  }\n\n  /**\n   * @return true if the minting is finished.\n   */\n  function mintingFinished() public view returns(bool) {\n    return _mintingFinished;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param tokenId The token id to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 tokenId\n  )\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n  {\n    _mint(to, tokenId);\n    return true;\n  }\n\n  function mintWithTokenURI(\n    address to,\n    uint256 tokenId,\n    string tokenURI\n  )\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n  {\n    mint(to, tokenId);\n    _setTokenURI(tokenId, tokenURI);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting()\n    public\n    onlyMinter\n    onlyBeforeMintingFinished\n    returns (bool)\n  {\n    _mintingFinished = true;\n    emit MintingFinished();\n    return true;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() public {\n    pausers.add(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function renouncePauser() public {\n    pausers.remove(msg.sender);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused();\n  event Unpaused();\n\n  bool private _paused = false;\n\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused();\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol\n\n/**\n * @title ERC721 Non-Fungible Pausable token\n * @dev ERC721 modified with pausable transfers.\n **/\ncontract ERC721Pausable is ERC721, Pausable {\n  function approve(\n    address to,\n    uint256 tokenId\n  )\n    public\n    whenNotPaused\n  {\n    super.approve(to, tokenId);\n  }\n\n  function setApprovalForAll(\n    address to,\n    bool approved\n  )\n    public\n    whenNotPaused\n  {\n    super.setApprovalForAll(to, approved);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n    whenNotPaused\n  {\n    super.transferFrom(from, to, tokenId);\n  }\n}\n\n// File: contracts/HeroAsset.sol\n\ncontract HeroAsset is ERC721Mintable, ERC721Pausable {\n\n    uint16 public constant HERO_TYPE_OFFSET = 10000;\n\n    string public tokenURIPrefix = \"https://www.mycryptoheroes.net/metadata/hero/\";\n    mapping(uint16 => uint16) private heroTypeToSupplyLimit;\n\n    constructor() public ERC721Full(\"MyCryptoHeroes:Hero\", \"MCHH\") {}\n\n    function setSupplyLimit(uint16 _heroType, uint16 _supplyLimit) external onlyMinter {\n        require(heroTypeToSupplyLimit[_heroType] == 0 || _supplyLimit < heroTypeToSupplyLimit[_heroType],\n            \"_supplyLimit is bigger\");\n        heroTypeToSupplyLimit[_heroType] = _supplyLimit;\n    }\n\n    function setTokenURIPrefix(string _tokenURIPrefix) external onlyMinter {\n        tokenURIPrefix = _tokenURIPrefix;\n    }\n\n    function getSupplyLimit(uint16 _heroType) public view returns (uint16) {\n        return heroTypeToSupplyLimit[_heroType];\n    }\n\n    function mintHeroAsset(address _owner, uint256 _tokenId) public onlyMinter {\n        uint16 _heroType = uint16(_tokenId / HERO_TYPE_OFFSET);\n        uint16 _heroTypeIndex = uint16(_tokenId % HERO_TYPE_OFFSET) - 1;\n        require(_heroTypeIndex < heroTypeToSupplyLimit[_heroType], \"supply over\");\n        _mint(_owner, _tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view returns (string) {\n        bytes32 tokenIdBytes;\n        if (tokenId == 0) {\n            tokenIdBytes = \"0\";\n        } else {\n            uint256 value = tokenId;\n            while (value > 0) {\n                tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n                tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n                value /= 10;\n            }\n        }\n\n        bytes memory prefixBytes = bytes(tokenURIPrefix);\n        bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n\n        uint8 i;\n        uint8 index = 0;\n        \n        for (i = 0; i < prefixBytes.length; i++) {\n            tokenURIBytes[index] = prefixBytes[i];\n            index++;\n        }\n        \n        for (i = 0; i < tokenIdBytes.length; i++) {\n            tokenURIBytes[index] = tokenIdBytes[i];\n            index++;\n        }\n        \n        return string(tokenURIBytes);\n    }\n\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param amount The amount that will be created.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != 0);\n    require(amount <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter = 1;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\n// File: contracts/HeroPresale.sol\n\ncontract HeroPresale is Ownable, Pausable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    struct HeroSale {\n        uint128 highestPrice;\n        uint128 previousPrice;\n        uint128 priceIncreaseTo;\n        uint64  since;\n        uint64  until;\n        uint64  previousSaleAt;\n        uint16  lowestPriceRate;\n        uint16  decreaseRate;\n        uint16  supplyLimit;\n        uint16  suppliedCounts;\n        uint8   currency;\n        bool    exists;\n    }\n    \n    mapping(uint16 => HeroSale) public heroTypeToHeroSales;\n    mapping(uint16 => uint256[]) public heroTypeIds;\n    mapping(uint16 => mapping(address => bool)) public hasAirDropHero;\n\n    ERC20 public coin;\n    HeroAsset public heroAsset;\n    uint16 constant internal SUPPLY_LIMIT_MAX = 10000;\n\n    event AddSalesEvent(\n        uint16 indexed heroType,\n        uint128 startPrice,\n        uint256 lowestPrice,\n        uint256 becomeLowestAt\n    );\n\n    event SoldHeroEvent(\n        uint16 indexed heroType,\n        uint256 soldPrice,\n        uint64  soldAt,\n        uint256 priceIncreaseTo,\n        uint256 lowestPrice,\n        uint256 becomeLowestAt,\n        address purchasedBy,\n        address indexed code,\n        uint8   currency\n    );\n\n    function setHeroAssetAddress(address _heroAssetAddress) external onlyOwner() {\n        heroAsset = HeroAsset(_heroAssetAddress);\n    }\n\n    function setCoinAddress(ERC20 _coinAddress) external onlyOwner() {\n        coin = _coinAddress;\n    }\n\n    function withdrawEther() external onlyOwner() {\n        owner().transfer(address(this).balance);\n    }\n\n    function withdrawEMONT() external onlyOwner() {\n        uint256 emontBalance = coin.balanceOf(this);\n        coin.approve(address(this), emontBalance);\n        coin.transferFrom(address(this), msg.sender, emontBalance);\n    }\n\n    function addSales(\n        uint16 _heroType,\n        uint128 _startPrice,\n        uint16 _lowestPriceRate,\n        uint16 _decreaseRate,\n        uint64 _since,\n        uint64 _until,\n        uint16 _supplyLimit,\n        uint8  _currency\n    ) external onlyOwner() {\n        require(!heroTypeToHeroSales[_heroType].exists, \"this heroType is already added sales\");\n        require(0 <= _lowestPriceRate && _lowestPriceRate <= 100, \"lowestPriceRate should be between 0 and 100\");\n        require(1 <= _decreaseRate && _decreaseRate <= 100, \"decreaseRate should be should be between 1 and 100\");\n        require (_until > _since, \"until should be later than since\");\n\n        HeroSale memory _herosale = HeroSale({\n            highestPrice: _startPrice,\n            previousPrice: _startPrice,\n            priceIncreaseTo: _startPrice,\n            since:_since,\n            until:_until,\n            previousSaleAt: _since,\n            lowestPriceRate: _lowestPriceRate,\n            decreaseRate: _decreaseRate,\n            supplyLimit:_supplyLimit,\n            suppliedCounts: 0,\n            currency: _currency,\n            exists: true\n        });\n\n        heroTypeToHeroSales[_heroType] = _herosale;\n        heroAsset.setSupplyLimit(_heroType, _supplyLimit);\n\n        uint256 _lowestPrice = uint256(_startPrice).mul(_lowestPriceRate).div(100);\n        uint256 _becomeLowestAt = uint256(86400).mul(uint256(100).sub(_lowestPriceRate)).div(_decreaseRate).add(_since);\n\n        emit AddSalesEvent(\n            _heroType,\n            _startPrice,\n            _lowestPrice,\n            _becomeLowestAt\n        );\n    }\n\n    function purchase(uint16 _heroType, address _code) external whenNotPaused() nonReentrant() payable {\n    // solium-disable-next-line security/no-block-members\n        return purchaseImpl(_heroType, uint64(block.timestamp), _code);\n    }\n\n    function purchaseByEMONT(uint16 _heroType, uint256 _price, address _code) external whenNotPaused() {\n      // solium-disable-next-line security/no-block-members\n        return purchaseByEMONTImpl(_heroType, _price, uint64(block.timestamp), _code);\n    }\n\n    function airDrop(uint16 _heroType) external whenNotPaused() {\n        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n        require(airDropHero(_heroType), \"currency is not 2 (airdrop)\");\n        require(!hasAirDropHero[_heroType][msg.sender]);\n        uint64 _at = uint64(block.timestamp);\n        require(isOnSale(_heroType, _at), \"out of sales period\");\n\n        createHero(_heroType, msg.sender);\n        hasAirDropHero[_heroType][msg.sender] = true;\n        heroSales.suppliedCounts++;\n        heroSales.previousSaleAt = _at;\n\n        emit SoldHeroEvent(\n            _heroType,\n            1,\n            _at,\n            1,\n            1,\n            1,\n            msg.sender,\n            0x0000000000000000000000000000000000000000,\n            2\n        );\n    }\n\n\n    function computeCurrentPrice(uint16 _heroType) external view returns (uint8, uint256){\n        // solium-disable-next-line security/no-block-members\n        return computeCurrentPriceImpl(_heroType, uint64(block.timestamp));\n    }\n\n    function canBePurchasedByETH(uint16 _heroType) internal view returns (bool){\n        return (heroTypeToHeroSales[_heroType].currency == 0);\n    }\n\n    function canBePurchasedByEMONT(uint16 _heroType) internal view returns (bool){\n        return (heroTypeToHeroSales[_heroType].currency == 1);\n    }\n\n    function airDropHero(uint16 _heroType) internal view returns (bool){\n        return (heroTypeToHeroSales[_heroType].currency == 2);\n    }\n\n    function isOnSale(uint16 _heroType, uint64 _now) internal view returns (bool){\n        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n        require(heroSales.exists, \"not exist sales of this heroType\");\n\n        if (heroSales.since <= _now && _now <= heroSales.until) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function computeCurrentPriceImpl(uint16 _heroType, uint64 _at) internal view returns (uint8, uint256) {\n        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n        require(heroSales.exists, \"not exist sales of this heroType\");\n        require(heroSales.previousSaleAt < _at, \"current timestamp should be later than previousSaleAt\");\n\n        uint256 _lowestPrice = uint256(heroSales.highestPrice).mul(heroSales.lowestPriceRate).div(100);\n        uint256 _secondsPassed = uint256(_at).sub(heroSales.previousSaleAt);\n        uint256 _decreasedPrice = uint256(heroSales.priceIncreaseTo).mul(_secondsPassed).mul(heroSales.decreaseRate).div(100).div(86400);\n        uint256 currentPrice;\n\n        if (uint256(heroSales.priceIncreaseTo).sub(_lowestPrice) > _decreasedPrice){\n            currentPrice = uint256(heroSales.priceIncreaseTo).sub(_decreasedPrice);\n        } else {\n            currentPrice = _lowestPrice;\n        }\n\n        return (1, currentPrice);\n    }\n\n    function purchaseImpl(uint16 _heroType, uint64 _at, address code)\n        internal\n    {\n        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n        require(canBePurchasedByETH(_heroType), \"currency is not 0 (eth)\");\n        require(isOnSale(_heroType, _at), \"out of sales period\");\n        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n        require(msg.value >= _price, \"value is less than the price\");\n\n        createHero(_heroType, msg.sender);\n\n        if (msg.value > _price){\n            msg.sender.transfer(msg.value.sub(_price));\n        }\n\n        heroSales.previousPrice = uint128(_price);\n        heroSales.suppliedCounts++;\n        heroSales.previousSaleAt = _at;\n\n        if (heroSales.previousPrice > heroSales.highestPrice){\n            heroSales.highestPrice = heroSales.previousPrice;\n        }\n\n        uint256 _priceIncreaseTo;\n        uint256 _lowestPrice;\n        uint256 _becomeLowestAt;\n\n        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n        } else {\n            _priceIncreaseTo = heroSales.previousPrice;\n            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n            _lowestPrice = heroSales.previousPrice;\n            _becomeLowestAt = _at;\n        }\n\n        address Invitees;\n\n        if (code == msg.sender){\n            Invitees = address(0x0);\n        } else {\n            Invitees = code;\n        }\n\n        emit SoldHeroEvent(\n            _heroType,\n            _price,\n            _at,\n            _priceIncreaseTo,\n            _lowestPrice,\n            _becomeLowestAt,\n            msg.sender,\n            Invitees,\n            0\n        );\n\n    }\n\n    function purchaseByEMONTImpl(uint16 _heroType, uint256 _inputPrice, uint64 _at, address _code)\n        internal\n    {\n        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n        require(canBePurchasedByEMONT(_heroType), \"currency is not 1 (EMONT)\");\n        require(isOnSale(_heroType, _at), \"out of sales period\");\n        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n        require(_inputPrice > _price, \"input price is not more than actual price\");\n\n        createHero(_heroType, msg.sender);\n        coin.transferFrom(msg.sender, address(this), _price);\n\n        heroSales.previousPrice = uint128(_price);\n        heroSales.suppliedCounts++;\n        heroSales.previousSaleAt = _at;\n\n        if (heroSales.previousPrice > heroSales.highestPrice){\n            heroSales.highestPrice = heroSales.previousPrice;\n        }\n\n        uint256 _priceIncreaseTo;\n        uint256 _lowestPrice;\n        uint256 _becomeLowestAt;\n\n        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n        } else {\n            _priceIncreaseTo = heroSales.previousPrice;\n            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n            _lowestPrice = heroSales.previousPrice;\n            _becomeLowestAt = _at;\n        }\n\n        address Invitees;\n\n        if (_code == msg.sender){\n            Invitees = address(0x0);\n        } else {\n            Invitees = _code;\n        }\n\n        emit SoldHeroEvent(\n            _heroType,\n            _price,\n            _at,\n            _priceIncreaseTo,\n            _lowestPrice,\n            _becomeLowestAt,\n            msg.sender,\n            Invitees,\n            1\n        );\n\n    }\n\n    function createHero(uint16 _heroType, address _owner) internal {\n        require(heroTypeToHeroSales[_heroType].exists, \"not exist sales of this heroType\");\n        require(heroTypeIds[_heroType].length < heroTypeToHeroSales[_heroType].supplyLimit, \"Heroes cant be created more than supplyLimit\");\n\n        uint256 _heroId = uint256(_heroType).mul(SUPPLY_LIMIT_MAX).add(heroTypeIds[_heroType].length).add(1);\n        heroTypeIds[_heroType].push(_heroId);\n        heroAsset.mintHeroAsset(_owner, _heroId);\n    }\n}",
  "bytecode": "60806040526002805460ff191690556001600381905560008054600160a060020a031916339081179091556100419190640100000000611d7161004682021704565b610080565b600160a060020a038116151561005b57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6124528061008f6000396000f30060806040526004361061013d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630396dcb0811461014257806304803c2a1461016f57806311df9995146101c657806315003368146101f757806316f38b631461020c57806328aa48b414610221578063396c8228146102c35780633f4ba83a146102de57806346fbf68e146102f35780635c975abb146103285780636980f4fb1461033d5780636ef8d66d1461036e578063715018a6146103835780637362377b1461039857806382dc1ec4146103ad5780638456cb59146103ce5780638da5cb5b146103e35780638f32d59b146103f8578063985df3a71461040d578063b0bdacc61461042e578063b27eb3e51461044f578063b673ddb71461046b578063e6d944a714610493578063f2fde38b146104cc575b600080fd5b34801561014e57600080fd5b5061016d61ffff60043516602435600160a060020a03604435166104ed565b005b34801561017b57600080fd5b5061016d61ffff6004358116906001608060020a03602435169060443581169060643581169067ffffffffffffffff60843581169160a4359091169060c4351660ff60e4351661050e565b3480156101d257600080fd5b506101db610b94565b60408051600160a060020a039092168252519081900360200190f35b34801561020357600080fd5b5061016d610ba3565b34801561021857600080fd5b506101db610d83565b34801561022d57600080fd5b5061023d61ffff60043516610d92565b604080516001608060020a039d8e1681529b8d1660208d015299909b168a8a015267ffffffffffffffff97881660608b015295871660808a01529390951660a088015261ffff91821660c0880152811660e087015292831661010086015290911661012084015260ff166101408301529115156101608201529051908190036101800190f35b61016d61ffff60043516600160a060020a0360243516610e5c565b3480156102ea57600080fd5b5061016d610e90565b3480156102ff57600080fd5b50610314600160a060020a0360043516610eea565b604080519115158252519081900360200190f35b34801561033457600080fd5b50610314610f03565b34801561034957600080fd5b5061035c61ffff60043516602435610f0c565b60408051918252519081900360200190f35b34801561037a57600080fd5b5061016d610f3c565b34801561038f57600080fd5b5061016d610f4f565b3480156103a457600080fd5b5061016d610fb7565b3480156103b957600080fd5b5061016d600160a060020a036004351661100d565b3480156103da57600080fd5b5061016d611069565b3480156103ef57600080fd5b506101db6110c5565b34801561040457600080fd5b506103146110d4565b34801561041957600080fd5b5061016d600160a060020a03600435166110e5565b34801561043a57600080fd5b5061016d600160a060020a0360043516611127565b34801561045b57600080fd5b5061016d61ffff60043516611169565b34801561047757600080fd5b5061031461ffff60043516600160a060020a0360243516611367565b34801561049f57600080fd5b506104af61ffff60043516611387565b6040805160ff909316835260208301919091528051918290030190f35b3480156104d857600080fd5b5061016d600160a060020a036004351661139d565b60025460ff16156104fd57600080fd5b610509838342846113b9565b505050565b6105166123c2565b6000806105216110d4565b151561052c57600080fd5b61ffff8b1660009081526004602052604090206002015471010000000000000000000000000000000000900460ff16156105d5576040805160e560020a62461bcd028152602060048201526024808201527f74686973206865726f5479706520697320616c7265616479206164646564207360448201527f616c657300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8861ffff166000111580156105ef575060648961ffff1611155b151561066b576040805160e560020a62461bcd02815260206004820152602b60248201527f6c6f776573745072696365526174652073686f756c642062652062657477656560448201527f6e203020616e6420313030000000000000000000000000000000000000000000606482015290519081900360840190fd5b8761ffff16600111158015610685575060648861ffff1611155b1515610701576040805160e560020a62461bcd02815260206004820152603260248201527f6465637265617365526174652073686f756c642062652073686f756c6420626560448201527f206265747765656e203120616e64203130300000000000000000000000000000606482015290519081900360840190fd5b67ffffffffffffffff80881690871611610765576040805160e560020a62461bcd02815260206004820181905260248201527f756e74696c2073686f756c64206265206c61746572207468616e2073696e6365604482015290519081900360640190fd5b610180604051908101604052808b6001608060020a031681526020018b6001608060020a031681526020018b6001608060020a031681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018867ffffffffffffffff1681526020018a61ffff1681526020018961ffff1681526020018661ffff168152602001600061ffff1681526020018560ff16815260200160011515815250925082600460008d61ffff1661ffff16815260200190815260200160002060008201518160000160006101000a8154816001608060020a0302191690836001608060020a0316021790555060208201518160000160106101000a8154816001608060020a0302191690836001608060020a0316021790555060408201518160010160006101000a8154816001608060020a0302191690836001608060020a0316021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160020160086101000a81548161ffff021916908361ffff16021790555060e082015181600201600a6101000a81548161ffff021916908361ffff16021790555061010082015181600201600c6101000a81548161ffff021916908361ffff16021790555061012082015181600201600e6101000a81548161ffff021916908361ffff1602179055506101408201518160020160106101000a81548160ff021916908360ff1602179055506101608201518160020160116101000a81548160ff021916908315150217905550905050600860009054906101000a9004600160a060020a0316600160a060020a0316636fa23f738c876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808361ffff1661ffff1681526020018261ffff1661ffff16815260200192505050600060405180830381600087803b158015610a9d57600080fd5b505af1158015610ab1573d6000803e3d6000fd5b50505050610ae66064610ada8b61ffff168d6001608060020a031661187490919063ffffffff16565b9063ffffffff6118ad16565b9150610b358767ffffffffffffffff16610b298a61ffff16610ada610b198e61ffff1660646118d090919063ffffffff16565b620151809063ffffffff61187416565b9063ffffffff6118e716565b604080516001608060020a038d16815260208101859052808201839052905191925061ffff8d16917fbb9aad0aec529392a851fee029d68b1fe345568b44c44e3e4ea716375f4949529181900360600190a25050505050505050505050565b600754600160a060020a031681565b6000610bad6110d4565b1515610bb857600080fd5b600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610c1e57600080fd5b505af1158015610c32573d6000803e3d6000fd5b505050506040513d6020811015610c4857600080fd5b5051600754604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152306004820152602481018490529051929350600160a060020a039091169163095ea7b3916044808201926020929091908290030181600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b505050506040513d6020811015610ce457600080fd5b5050600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015610d5957600080fd5b505af1158015610d6d573d6000803e3d6000fd5b505050506040513d602081101561050957600080fd5b600854600160a060020a031681565b6004602052600090815260409020805460018201546002909201546001608060020a0380831693608060020a938490048216939181169267ffffffffffffffff83830481169378010000000000000000000000000000000000000000000000009093048116929082169161ffff6801000000000000000082048116926a010000000000000000000083048216926c010000000000000000000000008104831692607060020a8204169160ff908204811691710100000000000000000000000000000000009004168c565b60025460ff1615610e6c57600080fd5b6003805460010190819055610e828342846118f9565b600354811461050957600080fd5b610e9933610eea565b1515610ea457600080fd5b60025460ff161515610eb557600080fd5b6002805460ff191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b6000610efd60018363ffffffff611d0316565b92915050565b60025460ff1690565b600560205281600052604060002081815481101515610f2757fe5b90600052602060002001600091509150505481565b610f4d60013363ffffffff611d3a16565b565b610f576110d4565b1515610f6257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610fbf6110d4565b1515610fca57600080fd5b610fd26110c5565b604051600160a060020a039190911690303180156108fc02916000818181858888f1935050505015801561100a573d6000803e3d6000fd5b50565b61101633610eea565b151561102157600080fd5b61103260018263ffffffff611d7116565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b61107233610eea565b151561107d57600080fd5b60025460ff161561108d57600080fd5b6002805460ff191660011790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b600054600160a060020a031690565b600054600160a060020a0316331490565b6110ed6110d4565b15156110f857600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61112f6110d4565b151561113a57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600090819060ff161561117e57600080fd5b61ffff83166000908152600460205260409020915061119c83611dab565b15156111f2576040805160e560020a62461bcd02815260206004820152601b60248201527f63757272656e6379206973206e6f742032202861697264726f70290000000000604482015290519081900360640190fd5b61ffff8316600090815260066020908152604080832033845290915290205460ff161561121e57600080fd5b504261122a8382611dd1565b1515611280576040805160e560020a62461bcd02815260206004820152601360248201527f6f7574206f662073616c657320706572696f6400000000000000000000000000604482015290519081900360640190fd5b61128a8333611ec4565b61ffff808416600081815260066020908152604080832033808552908352818420805460ff191660019081179091556002808a01805467ffffffffffffffff8b1667ffffffffffffffff19607060020a8084048d168701909c16909b026fffff00000000000000000000000000001990921691909117999099168917905583518281529485019790975283830181905260608401819052608084015260a083015260c0820194909452925190927f3db18ae119a752978a5fdd210c2d8457748cafadf61769dde052bb15edb62e7f919081900360e00190a3505050565b600660209081526000928352604080842090915290825290205460ff1681565b60008061139483426120dd565b91509150915091565b6113a56110d4565b15156113b057600080fd5b61100a816122fb565b61ffff8416600090815260046020526040812090808080806113da8a612378565b1515611430576040805160e560020a62461bcd02815260206004820152601960248201527f63757272656e6379206973206e6f7420312028454d4f4e542900000000000000604482015290519081900360640190fd5b61143a8a89611dd1565b1515611490576040805160e560020a62461bcd02815260206004820152601360248201527f6f7574206f662073616c657320706572696f6400000000000000000000000000604482015290519081900360640190fd5b61149a8a896120dd565b95505084891161151a576040805160e560020a62461bcd02815260206004820152602960248201527f696e707574207072696365206973206e6f74206d6f7265207468616e2061637460448201527f75616c2070726963650000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6115248a33611ec4565b600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561159757600080fd5b505af11580156115ab573d6000803e3d6000fd5b505050506040513d60208110156115c157600080fd5b505085546001608060020a03908116608060020a8783168102919091178089556002890180546fffff0000000000000000000000000000198116607060020a9182900461ffff908116600101169091021767ffffffffffffffff191667ffffffffffffffff8d161790558083169190049091161115611665578554608060020a81046001608060020a03166fffffffffffffffffffffffffffffffff199091161786555b600286015461ffff607060020a820481166c010000000000000000000000009092041611156117925760028601546116d69086906116d1906116c49061ffff6c010000000000000000000000008204811691607060020a9004166118d0565b889063ffffffff6118ad16565b6118e7565b6001870180546fffffffffffffffffffffffffffffffff19166001608060020a03838116919091179091558754600289015492965061172e92606492610ada926801000000000000000090920461ffff169116611874565b600287015490935061178b9067ffffffffffffffff8a1690610b29906a0100000000000000000000900461ffff16610ada888161176b828b6118d0565b61177f62015180606463ffffffff61187416565b9063ffffffff61187416565b91506117d7565b8554600187018054608060020a9092046001608060020a03166fffffffffffffffffffffffffffffffff1990921682179055935083925067ffffffffffffffff881691505b600160a060020a0387163314156117f0575060006117f3565b50855b6040805186815267ffffffffffffffff8a16602082015280820186905260608101859052608081018490523360a0820152600160c08201529051600160a060020a0383169161ffff8d16917f3db18ae119a752978a5fdd210c2d8457748cafadf61769dde052bb15edb62e7f9181900360e00190a350505050505050505050565b60008083151561188757600091506118a6565b5082820282848281151561189757fe5b04146118a257600080fd5b8091505b5092915050565b6000808083116118bc57600080fd5b82848115156118c757fe5b04949350505050565b600080838311156118e057600080fd5b5050900390565b6000828201838110156118a257600080fd5b61ffff83166000908152600460205260408120908080808061191a8961239e565b1515611970576040805160e560020a62461bcd02815260206004820152601760248201527f63757272656e6379206973206e6f742030202865746829000000000000000000604482015290519081900360640190fd5b61197a8989611dd1565b15156119d0576040805160e560020a62461bcd02815260206004820152601360248201527f6f7574206f662073616c657320706572696f6400000000000000000000000000604482015290519081900360640190fd5b6119da89896120dd565b95505034851115611a35576040805160e560020a62461bcd02815260206004820152601c60248201527f76616c7565206973206c657373207468616e2074686520707269636500000000604482015290519081900360640190fd5b611a3f8933611ec4565b84341115611a8557336108fc611a5b348863ffffffff6118d016565b6040518115909202916000818181858888f19350505050158015611a83573d6000803e3d6000fd5b505b85546001608060020a03908116608060020a8783168102919091178089556002890180546fffff0000000000000000000000000000198116607060020a9182900461ffff908116600101169091021767ffffffffffffffff191667ffffffffffffffff8d161790558083169190049091161115611b27578554608060020a81046001608060020a03166fffffffffffffffffffffffffffffffff199091161786555b600286015461ffff607060020a820481166c01000000000000000000000000909204161115611c22576002860154611b869086906116d1906116c49061ffff6c010000000000000000000000008204811691607060020a9004166118d0565b6001870180546fffffffffffffffffffffffffffffffff19166001608060020a038381169190911790915587546002890154929650611bde92606492610ada926801000000000000000090920461ffff169116611874565b6002870154909350611c1b9067ffffffffffffffff8a1690610b29906a0100000000000000000000900461ffff16610ada888161176b828b6118d0565b9150611c67565b8554600187018054608060020a9092046001608060020a03166fffffffffffffffffffffffffffffffff1990921682179055935083925067ffffffffffffffff881691505b600160a060020a038716331415611c8057506000611c83565b50855b6040805186815267ffffffffffffffff8a16602082015280820186905260608101859052608081018490523360a0820152600060c08201529051600160a060020a0383169161ffff8c16917f3db18ae119a752978a5fdd210c2d8457748cafadf61769dde052bb15edb62e7f9181900360e00190a3505050505050505050565b6000600160a060020a0382161515611d1a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515611d4f57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515611d8657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b61ffff166000908152600460205260409020600290810154608060020a900460ff161490565b61ffff82166000908152600460205260408120600281015471010000000000000000000000000000000000900460ff161515611e57576040805160e560020a62461bcd02815260206004820181905260248201527f6e6f742065786973742073616c6573206f662074686973206865726f54797065604482015290519081900360640190fd5b600181015467ffffffffffffffff808516608060020a9092041611801590611ead5750600181015467ffffffffffffffff7801000000000000000000000000000000000000000000000000909104811690841611155b15611ebb57600191506118a6565b600091506118a6565b61ffff821660009081526004602052604081206002015471010000000000000000000000000000000000900460ff161515611f49576040805160e560020a62461bcd02815260206004820181905260248201527f6e6f742065786973742073616c6573206f662074686973206865726f54797065604482015290519081900360640190fd5b61ffff8084166000908152600460209081526040808320600201546005909252909120546c0100000000000000000000000090910490911611611ffc576040805160e560020a62461bcd02815260206004820152602c60248201527f4865726f65732063616e742062652063726561746564206d6f7265207468616e60448201527f20737570706c794c696d69740000000000000000000000000000000000000000606482015290519081900360840190fd5b61ffff831660008181526005602052604090205461202b91600191610b2991829061271063ffffffff61187416565b61ffff84166000908152600560209081526040808320805460018101825590845291832090910183905560085481517f4d5b335d000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018690529251949550911692634d5b335d9260448084019391929182900301818387803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b50505050505050565b61ffff821660009081526004602052604081206002810154829190829081908190819071010000000000000000000000000000000000900460ff16151561216e576040805160e560020a62461bcd02815260206004820181905260248201527f6e6f742065786973742073616c6573206f662074686973206865726f54797065604482015290519081900360640190fd5b600285015467ffffffffffffffff808a169116106121fc576040805160e560020a62461bcd02815260206004820152603560248201527f63757272656e742074696d657374616d702073686f756c64206265206c61746560448201527f72207468616e2070726576696f757353616c6541740000000000000000000000606482015290519081900360840190fd5b6002850154855461222f91606491610ada916001608060020a039091169068010000000000000000900461ffff16611874565b60028601549094506122549067ffffffffffffffff8a8116911663ffffffff6118d016565b6002860154600187015491945061229a916201518091610ada9160649183916a010000000000000000000090910461ffff169061177f906001608060020a03168a611874565b600186015490925082906122bd906001608060020a03168663ffffffff6118d016565b11156122e85760018501546122e1906001608060020a03168363ffffffff6118d016565b90506122eb565b50825b6001999098509650505050505050565b600160a060020a038116151561231057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61ffff16600090815260046020526040902060020154608060020a900460ff1660011490565b61ffff16600090815260046020526040902060020154608060020a900460ff161590565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152905600a165627a7a72305820f98098e6ea4ba6a8b23a13c03df1115e245c511cb9ae500e5b4c64bc4af8f7d40029"
}