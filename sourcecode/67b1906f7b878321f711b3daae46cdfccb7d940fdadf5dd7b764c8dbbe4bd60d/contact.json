{
  "address": "0xc7ab7ffc4fc2f3c75ffb621f574d4b9c861330f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Registry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/lib/ownership/Ownable.sol\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n    constructor() public { owner = msg.sender; }\n\n    /// @dev Throws if called by any contract other than latest designated caller\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) public onlyOwner {\n       require(newOwner != address(0));\n       emit OwnershipTransferred(owner, newOwner);\n       owner = newOwner;\n    }\n}\n\n// File: contracts/lib/lifecycle/Destructible.sol\n\ncontract Destructible is Ownable {\n\tfunction selfDestruct() public onlyOwner {\n\t\tselfdestruct(owner);\n\t}\n}\n\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\n\ncontract ZapCoordinatorInterface is Ownable {\n\tfunction addImmutableContract(string contractName, address newAddress) external;\n\tfunction updateContract(string contractName, address newAddress) external;\n\tfunction getContractName(uint index) public view returns (string);\n\tfunction getContract(string contractName) public view returns (address);\n\tfunction updateAllDependencies() external;\n}\n\n// File: contracts/lib/ownership/Upgradable.sol\n\npragma solidity ^0.4.24;\n\ncontract Upgradable {\n\n\taddress coordinatorAddr;\n\tZapCoordinatorInterface coordinator;\n\n\tconstructor(address c) public{\n\t\tcoordinatorAddr = c;\n\t\tcoordinator = ZapCoordinatorInterface(c);\n\t}\n\n    function updateDependencies() external coordinatorOnly {\n       _updateDependencies();\n    }\n\n    function _updateDependencies() internal;\n\n    modifier coordinatorOnly() {\n    \trequire(msg.sender == coordinatorAddr, \"Error: Coordinator Only Function\");\n    \t_;\n    }\n}\n\n// File: contracts/platform/database/DatabaseInterface.sol\n\ncontract DatabaseInterface is Ownable {\n\tfunction setStorageContract(address _storageContract, bool _allowed) public;\n\t/*** Bytes32 ***/\n\tfunction getBytes32(bytes32 key) external view returns(bytes32);\n\tfunction setBytes32(bytes32 key, bytes32 value) external;\n\t/*** Number **/\n\tfunction getNumber(bytes32 key) external view returns(uint256);\n\tfunction setNumber(bytes32 key, uint256 value) external;\n\t/*** Bytes ***/\n\tfunction getBytes(bytes32 key) external view returns(bytes);\n\tfunction setBytes(bytes32 key, bytes value) external;\n\t/*** String ***/\n\tfunction getString(bytes32 key) external view returns(string);\n\tfunction setString(bytes32 key, string value) external;\n\t/*** Bytes Array ***/\n\tfunction getBytesArray(bytes32 key) external view returns (bytes32[]);\n\tfunction getBytesArrayIndex(bytes32 key, uint256 index) external view returns (bytes32);\n\tfunction getBytesArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushBytesArray(bytes32 key, bytes32 value) external;\n\tfunction setBytesArrayIndex(bytes32 key, uint256 index, bytes32 value) external;\n\tfunction setBytesArray(bytes32 key, bytes32[] value) external;\n\t/*** Int Array ***/\n\tfunction getIntArray(bytes32 key) external view returns (int[]);\n\tfunction getIntArrayIndex(bytes32 key, uint256 index) external view returns (int);\n\tfunction getIntArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushIntArray(bytes32 key, int value) external;\n\tfunction setIntArrayIndex(bytes32 key, uint256 index, int value) external;\n\tfunction setIntArray(bytes32 key, int[] value) external;\n\t/*** Address Array ***/\n\tfunction getAddressArray(bytes32 key) external view returns (address[]);\n\tfunction getAddressArrayIndex(bytes32 key, uint256 index) external view returns (address);\n\tfunction getAddressArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushAddressArray(bytes32 key, address value) external;\n\tfunction setAddressArrayIndex(bytes32 key, uint256 index, address value) external;\n\tfunction setAddressArray(bytes32 key, address[] value) external;\n}\n\n// File: contracts/platform/registry/RegistryInterface.sol\n\n// Technically an abstract contract, not interface (solidity compiler devs are working to fix this right now)\n\ncontract RegistryInterface {\n    function initiateProvider(uint256, bytes32) public returns (bool);\n    function initiateProviderCurve(bytes32, int256[], address) public returns (bool);\n    function setEndpointParams(bytes32, bytes32[]) public;\n    function getEndpointParams(address, bytes32) public view returns (bytes32[]);\n    function getProviderPublicKey(address) public view returns (uint256);\n    function getProviderTitle(address) public view returns (bytes32);\n    function setProviderParameter(bytes32, bytes) public;\n    function setProviderTitle(bytes32) public;\n    function clearEndpoint(bytes32) public;\n    function getProviderParameter(address, bytes32) public view returns (bytes);\n    function getAllProviderParams(address) public view returns (bytes32[]);\n    function getProviderCurveLength(address, bytes32) public view returns (uint256);\n    function getProviderCurve(address, bytes32) public view returns (int[]);\n    function isProviderInitiated(address) public view returns (bool);\n    function getAllOracles() external view returns (address[]);\n    function getProviderEndpoints(address) public view returns (bytes32[]);\n    function getEndpointBroker(address, bytes32) public view returns (address);\n}\n\n// File: contracts/platform/registry/Registry.sol\n\n// v1.0\n\n\n\n\n\ncontract Registry is Destructible, RegistryInterface, Upgradable {\n\n    event NewProvider(\n        address indexed provider,\n        bytes32 indexed title\n    );\n\n    event NewCurve(\n        address indexed provider,\n        bytes32 indexed endpoint,\n        int[] curve,\n        address indexed broker\n    );\n\n    DatabaseInterface public db;\n\n    constructor(address c) Upgradable(c) public {\n        _updateDependencies();\n    }\n\n    function _updateDependencies() internal {\n        address databaseAddress = coordinator.getContract(\"DATABASE\");\n        db = DatabaseInterface(databaseAddress);\n    }\n\n    /// @dev initiates a provider.\n    /// If no address->Oracle mapping exists, Oracle object is created\n    /// @param publicKey unique id for provider. used for encyrpted key swap for subscription endpoints\n    /// @param title name\n    function initiateProvider(\n        uint256 publicKey,\n        bytes32 title\n    )\n        public\n        returns (bool)\n    {\n        require(!isProviderInitiated(msg.sender), \"Error: Provider is already initiated\");\n        createOracle(msg.sender, publicKey, title);\n        addOracle(msg.sender);\n        emit NewProvider(msg.sender, title);\n        return true;\n    }\n\n    /// @dev initiates an endpoint specific provider curve\n    /// If oracle[specfifier] is uninitialized, Curve is mapped to endpoint\n    /// @param endpoint specifier of endpoint. currently \"smart_contract\" or \"socket_subscription\"\n    /// @param curve flattened array of all segments, coefficients across all polynomial terms, [e0,l0,c0,c1,c2,...]\n    /// @param broker address for endpoint. if non-zero address, only this address will be able to bond/unbond \n    function initiateProviderCurve(\n        bytes32 endpoint,\n        int256[] curve,\n        address broker\n    )\n        returns (bool)\n    {\n        // Provider must be initiated\n        require(isProviderInitiated(msg.sender), \"Error: Provider is not yet initiated\");\n        // Can't reset their curve\n        require(getCurveUnset(msg.sender, endpoint), \"Error: Curve is already set\");\n        // Can't initiate null endpoint\n        require(endpoint != bytes32(0), \"Error: Can't initiate null endpoint\");\n\n        setCurve(msg.sender, endpoint, curve);        \n        db.pushBytesArray(keccak256(abi.encodePacked('oracles', msg.sender, 'endpoints')), endpoint);\n        db.setBytes32(keccak256(abi.encodePacked('oracles', msg.sender, endpoint, 'broker')), bytes32(broker));\n\n        emit NewCurve(msg.sender, endpoint, curve, broker);\n\n        return true;\n    }\n\n    // Sets provider data\n    function setProviderParameter(bytes32 key, bytes value) public {\n        // Provider must be initiated\n        require(isProviderInitiated(msg.sender), \"Error: Provider is not yet initiated\");\n\n        if(!isProviderParamInitialized(msg.sender, key)){\n            // initialize this provider param\n            db.setNumber(keccak256(abi.encodePacked('oracles', msg.sender, 'is_param_set', key)), 1);\n            db.pushBytesArray(keccak256(abi.encodePacked('oracles', msg.sender, 'providerParams')), key);\n        }\n        db.setBytes(keccak256(abi.encodePacked('oracles', msg.sender, 'providerParams', key)), value);\n    }\n\n    // Gets provider data\n    function getProviderParameter(address provider, bytes32 key) public view returns (bytes){\n        // Provider must be initiated\n        require(isProviderInitiated(provider), \"Error: Provider is not yet initiated\");\n        require(isProviderParamInitialized(provider, key), \"Error: Provider Parameter is not yet initialized\");\n        return db.getBytes(keccak256(abi.encodePacked('oracles', provider, 'providerParams', key)));\n    }\n\n    // Gets keys of all provider params\n    function getAllProviderParams(address provider) public view returns (bytes32[]){\n        // Provider must be initiated\n        require(isProviderInitiated(provider), \"Error: Provider is not yet initiated\");\n        return db.getBytesArray(keccak256(abi.encodePacked('oracles', provider, 'providerParams')));\n    }\n\n    // Set endpoint specific parameters for a given endpoint\n    function setEndpointParams(bytes32 endpoint, bytes32[] endpointParams) public {\n        // Provider must be initiated\n        require(isProviderInitiated(msg.sender), \"Error: Provider is not yet initialized\");\n        // Can't set endpoint params on an unset provider\n        require(!getCurveUnset(msg.sender, endpoint), \"Error: Curve is not yet set\");\n\n        db.setBytesArray(keccak256(abi.encodePacked('oracles', msg.sender, 'endpointParams', endpoint)), endpointParams);\n    }\n\n    //Set title for registered provider account\n    function setProviderTitle(bytes32 title) public {\n\n        require(isProviderInitiated(msg.sender), \"Error: Provider is not initiated\");\n        db.setBytes32(keccak256(abi.encodePacked('oracles', msg.sender, \"title\")), title);\n    }\n\n    //Clear an endpoint with no bonds\n    function clearEndpoint(bytes32 endpoint) public {\n\n        require(isProviderInitiated(msg.sender), \"Error: Provider is not initiated\");\n\n        uint256 bound = db.getNumber(keccak256(abi.encodePacked('totalBound', msg.sender, endpoint)));\n        require(bound == 0, \"Error: Endpoint must have no bonds\");\n\n        int256[] memory nullArray = new int256[](0);\n        bytes32[] memory endpoints =  db.getBytesArray(keccak256(abi.encodePacked(\"oracles\", msg.sender, \"endpoints\")));\n        for(uint256 i = 0; i < endpoints.length; i++) {\n            if( endpoints[i] == endpoint ) {\n               db.setBytesArrayIndex(keccak256(abi.encodePacked(\"oracles\", msg.sender, \"endpoints\")), i, bytes32(0));\n               break; \n            }\n        }\n        db.pushBytesArray(keccak256(abi.encodePacked('oracles', msg.sender, 'endpoints')), bytes32(0));\n        db.setBytes32(keccak256(abi.encodePacked('oracles', msg.sender, endpoint, 'broker')), bytes32(0));\n        db.setIntArray(keccak256(abi.encodePacked('oracles', msg.sender, 'curves', endpoint)), nullArray);\n    }\n\n    /// @return public key\n    function getProviderPublicKey(address provider) public view returns (uint256) {\n        return getPublicKey(provider);\n    }\n\n    /// @return oracle name\n    function getProviderTitle(address provider) public view returns (bytes32) {\n        return getTitle(provider);\n    }\n\n\n    /// @dev get curve paramaters from oracle\n    function getProviderCurve(\n        address provider,\n        bytes32 endpoint\n    )\n        public\n        view\n        returns (int[])\n    {\n        require(!getCurveUnset(provider, endpoint), \"Error: Curve is not yet set\");\n        return db.getIntArray(keccak256(abi.encodePacked('oracles', provider, 'curves', endpoint)));\n    }\n\n    function getProviderCurveLength(address provider, bytes32 endpoint) public view returns (uint256){\n        require(!getCurveUnset(provider, endpoint), \"Error: Curve is not yet set\");\n        return db.getIntArray(keccak256(abi.encodePacked('oracles', provider, 'curves', endpoint))).length;\n    }\n\n    /// @dev is provider initiated\n    /// @param oracleAddress the provider address\n    /// @return Whether or not the provider has initiated in the Registry.\n    function isProviderInitiated(address oracleAddress) public view returns (bool) {\n        return getProviderTitle(oracleAddress) != 0;\n    }\n\n    /*** STORAGE FUNCTIONS ***/\n    /// @dev get public key of provider\n    function getPublicKey(address provider) public view returns (uint256) {\n        return db.getNumber(keccak256(abi.encodePacked(\"oracles\", provider, \"publicKey\")));\n    }\n\n    /// @dev get title of provider\n    function getTitle(address provider) public view returns (bytes32) {\n        return db.getBytes32(keccak256(abi.encodePacked(\"oracles\", provider, \"title\")));\n    }\n\n    /// @dev get the endpoints of a provider\n    function getProviderEndpoints(address provider) public view returns (bytes32[]) {\n        return db.getBytesArray(keccak256(abi.encodePacked(\"oracles\", provider, \"endpoints\")));\n    }\n\n    /// @dev get all endpoint params\n    function getEndpointParams(address provider, bytes32 endpoint) public view returns (bytes32[]) {\n        return db.getBytesArray(keccak256(abi.encodePacked('oracles', provider, 'endpointParams', endpoint)));\n    }\n\n    /// @dev get broker address for endpoint\n    function getEndpointBroker(address oracleAddress, bytes32 endpoint) public view returns (address) {\n        return address(db.getBytes32(keccak256(abi.encodePacked('oracles', oracleAddress, endpoint, 'broker'))));\n    }\n\n    function getCurveUnset(address provider, bytes32 endpoint) public view returns (bool) {\n        return db.getIntArrayLength(keccak256(abi.encodePacked('oracles', provider, 'curves', endpoint))) == 0;\n    }\n\n    /// @dev get provider address by index\n    function getOracleAddress(uint256 index) public view returns (address) {\n        return db.getAddressArrayIndex(keccak256(abi.encodePacked('oracleIndex')), index);\n    }\n\n    /// @dev get all oracle addresses\n    function getAllOracles() external view returns (address[]) {\n        return db.getAddressArray(keccak256(abi.encodePacked('oracleIndex')));\n    }\n\n    ///  @dev add new provider to mapping\n    function createOracle(address provider, uint256 publicKey, bytes32 title) private {\n        db.setNumber(keccak256(abi.encodePacked('oracles', provider, \"publicKey\")), uint256(publicKey));\n        db.setBytes32(keccak256(abi.encodePacked('oracles', provider, \"title\")), title);\n    }\n\n    /// @dev add new provider address to oracles array\n    function addOracle(address provider) private {\n        db.pushAddressArray(keccak256(abi.encodePacked('oracleIndex')), provider);\n    }\n\n    /// @dev initialize new curve for provider\n    /// @param provider address of provider\n    /// @param endpoint endpoint specifier\n    /// @param curve flattened array of all segments, coefficients across all polynomial terms, [l0,c0,c1,c2,..., ck, e0, ...]\n    function setCurve(\n        address provider,\n        bytes32 endpoint,\n        int[] curve\n    )\n        private\n    {\n        uint prevEnd = 1;\n        uint index = 0;\n\n        // Validate the curve\n        while ( index < curve.length ) {\n            // Validate the length of the piece\n            int len = curve[index];\n            require(len > 0, \"Error: Invalid Curve\");\n\n            // Validate the end index of the piece\n            uint endIndex = index + uint(len) + 1;\n            require(endIndex < curve.length, \"Error: Invalid Curve\");\n\n            // Validate that the end is continuous\n            int end = curve[endIndex];\n            require(uint(end) > prevEnd, \"Error: Invalid Curve\");\n\n            prevEnd = uint(end);\n            index += uint(len) + 2; \n        }\n\n        db.setIntArray(keccak256(abi.encodePacked('oracles', provider, 'curves', endpoint)), curve);\n    }\n\n    // Determines whether this parameter has been initialized\n    function isProviderParamInitialized(address provider, bytes32 key) private view returns (bool){\n        uint256 val = db.getNumber(keccak256(abi.encodePacked('oracles', provider, 'is_param_set', key)));\n        return (val == 1) ? true : false;\n    }\n\n    /*************************************** STORAGE ****************************************\n    * 'oracles', provider, 'endpoints' => {bytes32[]} array of endpoints for this oracle\n    * 'oracles', provider, 'endpointParams', endpoint => {bytes32[]} array of params for this endpoint\n    * 'oracles', provider, 'curves', endpoint => {uint[]} curve array for this endpoint\n    * 'oracles', provider, 'broker', endpoint => {bytes32} broker address for this endpoint\n    * 'oracles', provider, 'is_param_set', key => {uint} Is this provider parameter set (0/1)\n    * 'oracles', provider, \"publicKey\" => {uint} public key for this oracle\n    * 'oracles', provider, \"title\" => {bytes32} title of this oracle\n    ****************************************************************************************/\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b007eca49763f31edff95623ed6c23c8c1924a16"
}