{
  "address": "0x7a237f06f85710b66184afcdc55e2845f1b8f0eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WorkspaceFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/ownership/OwnableUpdated.sol\n\n/**\n * @title Ownable\n * @notice Implementation by OpenZeppelin\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n */\ncontract OwnableUpdated {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/token/TalaoToken.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title TalaoMarketplace\n * @dev This contract is allowing users to buy or sell Talao tokens at a price set by the owner\n * @author Blockchain Partner\n */\ncontract TalaoMarketplace is Ownable {\n  using SafeMath for uint256;\n\n  TalaoToken public token;\n\n  struct MarketplaceData {\n    uint buyPrice;\n    uint sellPrice;\n    uint unitPrice;\n  }\n\n  MarketplaceData public marketplace;\n\n  event SellingPrice(uint sellingPrice);\n  event TalaoBought(address buyer, uint amount, uint price, uint unitPrice);\n  event TalaoSold(address seller, uint amount, uint price, uint unitPrice);\n\n  /**\n  * @dev Constructor of the marketplace pointing to the TALAO token address\n  * @param talao the talao token address\n  **/\n  constructor(address talao)\n      public\n  {\n      token = TalaoToken(talao);\n  }\n\n  /**\n  * @dev Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n  * @param newSellPrice price the users can sell to the contract\n  * @param newBuyPrice price users can buy from the contract\n  * @param newUnitPrice to manage decimal issue 0,35 = 35 /100 (100 is unit)\n  */\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice, uint256 newUnitPrice)\n      public\n      onlyOwner\n  {\n      require (newSellPrice > 0 && newBuyPrice > 0 && newUnitPrice > 0, \"wrong inputs\");\n      marketplace.sellPrice = newSellPrice;\n      marketplace.buyPrice = newBuyPrice;\n      marketplace.unitPrice = newUnitPrice;\n  }\n\n  /**\n  * @dev Allow anyone to buy tokens against ether, depending on the buyPrice set by the contract owner.\n  * @return amount the amount of tokens bought\n  **/\n  function buy()\n      public\n      payable\n      returns (uint amount)\n  {\n      amount = msg.value.mul(marketplace.unitPrice).div(marketplace.buyPrice);\n      token.transfer(msg.sender, amount);\n      emit TalaoBought(msg.sender, amount, marketplace.buyPrice, marketplace.unitPrice);\n      return amount;\n  }\n\n  /**\n  * @dev Allow anyone to sell tokens for ether, depending on the sellPrice set by the contract owner.\n  * @param amount the number of tokens to be sold\n  * @return revenue ethers sent in return\n  **/\n  function sell(uint amount)\n      public\n      returns (uint revenue)\n  {\n      require(token.balanceOf(msg.sender) >= amount, \"sender has not enough tokens\");\n      token.transferFrom(msg.sender, this, amount);\n      revenue = amount.mul(marketplace.sellPrice).div(marketplace.unitPrice);\n      msg.sender.transfer(revenue);\n      emit TalaoSold(msg.sender, amount, marketplace.sellPrice, marketplace.unitPrice);\n      return revenue;\n  }\n\n  /**\n   * @dev Allows the owner to withdraw ethers from the contract.\n   * @param ethers quantity of ethers to be withdrawn\n   * @return true if withdrawal successful ; false otherwise\n   */\n  function withdrawEther(uint256 ethers)\n      public\n      onlyOwner\n  {\n      if (this.balance >= ethers) {\n          msg.sender.transfer(ethers);\n      }\n  }\n\n  /**\n   * @dev Allow the owner to withdraw tokens from the contract.\n   * @param tokens quantity of tokens to be withdrawn\n   */\n  function withdrawTalao(uint256 tokens)\n      public\n      onlyOwner\n  {\n      token.transfer(msg.sender, tokens);\n  }\n\n\n  /**\n  * @dev Fallback function ; only owner can send ether.\n  **/\n  function ()\n      public\n      payable\n      onlyOwner\n  {\n\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n    require(_releaseTime > now);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n   */\n  function release() public {\n    require(now >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n * @notice Talao token transfer function cannot fail thus there's no need for revocation.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20Basic token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    released[token] = released[token].add(unreleased);\n\n    token.safeTransfer(beneficiary, unreleased);\n\n    Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20Basic token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.safeTransfer(owner, refund);\n\n    Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n  function Crowdsale(uint256 _rate, uint256 _startTime, uint256 _endTime, address _wallet) public {\n    require(_rate > 0);\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  // removed view to be overriden\n  function validPurchase() internal returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n  using SafeMath for uint256;\n\n  enum State { Active, Refunding, Closed }\n\n  mapping (address => uint256) public deposited;\n  address public wallet;\n  State public state;\n\n  event Closed();\n  event RefundsEnabled();\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n  function RefundVault(address _wallet) public {\n    require(_wallet != address(0));\n    wallet = _wallet;\n    state = State.Active;\n  }\n\n  function deposit(address investor) onlyOwner public payable {\n    require(state == State.Active);\n    deposited[investor] = deposited[investor].add(msg.value);\n  }\n\n  function close() onlyOwner public {\n    require(state == State.Active);\n    state = State.Closed;\n    Closed();\n    wallet.transfer(this.balance);\n  }\n\n  function enableRefunds() onlyOwner public {\n    require(state == State.Active);\n    state = State.Refunding;\n    RefundsEnabled();\n  }\n\n  function refund(address investor) public {\n    require(state == State.Refunding);\n    uint256 depositedValue = deposited[investor];\n    deposited[investor] = 0;\n    investor.transfer(depositedValue);\n    Refunded(investor, depositedValue);\n  }\n}\n\n\n\n/**\n * @title RefundableCrowdsale\n * @dev Extension of Crowdsale contract that adds a funding goal, and\n * the possibility of users getting a refund if goal is not met.\n * Uses a RefundVault as the crowdsale's vault.\n */\ncontract RefundableCrowdsale is FinalizableCrowdsale {\n  using SafeMath for uint256;\n\n  // minimum amount of funds to be raised in weis\n  uint256 public goal;\n\n  // refund vault used to hold funds while crowdsale is running\n  RefundVault public vault;\n\n  function RefundableCrowdsale(uint256 _goal) public {\n    require(_goal > 0);\n    vault = new RefundVault(wallet);\n    goal = _goal;\n  }\n\n  // We're overriding the fund forwarding from Crowdsale.\n  // In addition to sending the funds, we want to call\n  // the RefundVault deposit function\n  function forwardFunds() internal {\n    vault.deposit.value(msg.value)(msg.sender);\n  }\n\n  // if crowdsale is unsuccessful, investors can claim refunds here\n  function claimRefund() public {\n    require(isFinalized);\n    require(!goalReached());\n\n    vault.refund(msg.sender);\n  }\n\n  // vault finalization task, called when owner calls finalize()\n  function finalization() internal {\n    if (goalReached()) {\n      vault.close();\n    } else {\n      vault.enableRefunds();\n    }\n\n    super.finalization();\n  }\n\n  function goalReached() public view returns (bool) {\n    return weiRaised >= goal;\n  }\n\n}\n\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowdsale with a max amount of funds raised\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  function CappedCrowdsale(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  // overriding Crowdsale#validPurchase to add extra cap logic\n  // @return true if investors can buy at the moment\n  // removed view to be overriden\n  function validPurchase() internal returns (bool) {\n    bool withinCap = weiRaised.add(msg.value) <= cap;\n    return super.validPurchase() && withinCap;\n  }\n\n  // overriding Crowdsale#hasEnded to add cap logic\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    bool capReached = weiRaised >= cap;\n    return super.hasEnded() || capReached;\n  }\n\n}\n\n/**\n * @title ProgressiveIndividualCappedCrowdsale\n * @dev Extension of Crowdsale with a progressive individual cap\n * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\n * @author Request.network ; some modifications by Blockchain Partner\n */\ncontract ProgressiveIndividualCappedCrowdsale is RefundableCrowdsale, CappedCrowdsale {\n\n    uint public startGeneralSale;\n    uint public constant TIME_PERIOD_IN_SEC = 1 days;\n    uint public constant minimumParticipation = 10 finney;\n    uint public constant GAS_LIMIT_IN_WEI = 5E10 wei; // limit gas price -50 Gwei wales stopper\n    uint256 public baseEthCapPerAddress;\n\n    mapping(address=>uint) public participated;\n\n    function ProgressiveIndividualCappedCrowdsale(uint _baseEthCapPerAddress, uint _startGeneralSale)\n        public\n    {\n        baseEthCapPerAddress = _baseEthCapPerAddress;\n        startGeneralSale = _startGeneralSale;\n    }\n\n    /**\n     * @dev setting cap before the general sale starts\n     * @param _newBaseCap the new cap\n     */\n    function setBaseCap(uint _newBaseCap)\n        public\n        onlyOwner\n    {\n        require(now < startGeneralSale);\n        baseEthCapPerAddress = _newBaseCap;\n    }\n\n    /**\n     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\n     * @return true if investors can buy at the moment\n     */\n    function validPurchase()\n        internal\n        returns(bool)\n    {\n        bool gasCheck = tx.gasprice <= GAS_LIMIT_IN_WEI;\n        uint ethCapPerAddress = getCurrentEthCapPerAddress();\n        participated[msg.sender] = participated[msg.sender].add(msg.value);\n        bool enough = participated[msg.sender] >= minimumParticipation;\n        return participated[msg.sender] <= ethCapPerAddress && enough && gasCheck;\n    }\n\n    /**\n     * @dev Get the current individual cap.\n     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\n     * @return individual cap in wei\n     */\n    function getCurrentEthCapPerAddress()\n        public\n        constant\n        returns(uint)\n    {\n        if (block.timestamp < startGeneralSale) return 0;\n        uint timeSinceStartInSec = block.timestamp.sub(startGeneralSale);\n        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\n\n        // for currentPeriod > 256 will always return 0\n        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\n    }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n/**\n * @title TalaoToken\n * @dev This contract details the TALAO token and allows freelancers to create/revoke vault access, appoint agents.\n * @author Blockchain Partner\n */\ncontract TalaoToken is MintableToken {\n  using SafeMath for uint256;\n\n  // token details\n  string public constant name = \"Talao\";\n  string public constant symbol = \"TALAO\";\n  uint8 public constant decimals = 18;\n\n  // the talao marketplace address\n  address public marketplace;\n\n  // talao tokens needed to create a vault\n  uint256 public vaultDeposit;\n  // sum of all talao tokens desposited\n  uint256 public totalDeposit;\n\n  struct FreelanceData {\n      // access price to the talent vault\n      uint256 accessPrice;\n      // address of appointed talent agent\n      address appointedAgent;\n      // how much the talent is sharing with its agent\n      uint sharingPlan;\n      // how much is the talent deposit\n      uint256 userDeposit;\n  }\n\n  // structure that defines a client access to a vault\n  struct ClientAccess {\n      // is he allowed to access the vault\n      bool clientAgreement;\n      // the block number when access was granted\n      uint clientDate;\n  }\n\n  // Vault allowance client x freelancer\n  mapping (address => mapping (address => ClientAccess)) public accessAllowance;\n\n  // Freelance data is public\n  mapping (address=>FreelanceData) public data;\n\n  enum VaultStatus {Closed, Created, PriceTooHigh, NotEnoughTokensDeposited, AgentRemoved, NewAgent, NewAccess, WrongAccessPrice}\n\n  // Those event notifies UI about vaults action with vault status\n  // Closed Vault access closed\n  // Created Vault access created\n  // PriceTooHigh Vault access price too high\n  // NotEnoughTokensDeposited not enough tokens to pay deposit\n  // AgentRemoved agent removed\n  // NewAgent new agent appointed\n  // NewAccess vault access granted to client\n  // WrongAccessPrice client not enough token to pay vault access\n  event Vault(address indexed client, address indexed freelance, VaultStatus status);\n\n  modifier onlyMintingFinished()\n  {\n      require(mintingFinished == true, \"minting has not finished\");\n      _;\n  }\n\n  /**\n  * @dev Let the owner set the marketplace address once minting is over\n  *      Possible to do it more than once to ensure maintainability\n  * @param theMarketplace the marketplace address\n  **/\n  function setMarketplace(address theMarketplace)\n      public\n      onlyMintingFinished\n      onlyOwner\n  {\n      marketplace = theMarketplace;\n  }\n\n  /**\n  * @dev Same ERC20 behavior, but require the token to be unlocked\n  * @param _spender address The address that will spend the funds.\n  * @param _value uint256 The amount of tokens to be spent.\n  **/\n  function approve(address _spender, uint256 _value)\n      public\n      onlyMintingFinished\n      returns (bool)\n  {\n      return super.approve(_spender, _value);\n  }\n\n  /**\n  * @dev Same ERC20 behavior, but require the token to be unlocked and sells some tokens to refill ether balance up to minBalanceForAccounts\n  * @param _to address The address to transfer to.\n  * @param _value uint256 The amount to be transferred.\n  **/\n  function transfer(address _to, uint256 _value)\n      public\n      onlyMintingFinished\n      returns (bool result)\n  {\n      return super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Same ERC20 behavior, but require the token to be unlocked\n  * @param _from address The address which you want to send tokens from.\n  * @param _to address The address which you want to transfer to.\n  * @param _value uint256 the amount of tokens to be transferred.\n  **/\n  function transferFrom(address _from, address _to, uint256 _value)\n      public\n      onlyMintingFinished\n      returns (bool)\n  {\n      return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Set allowance for other address and notify\n   *      Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   * @param _extraData some extra information to send to the approved contract\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n      public\n      onlyMintingFinished\n      returns (bool)\n  {\n      tokenRecipient spender = tokenRecipient(_spender);\n      if (approve(_spender, _value)) {\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\n          return true;\n      }\n  }\n\n  /**\n   * @dev Allows the owner to withdraw ethers from the contract.\n   * @param ethers quantity in weis of ethers to be withdrawn\n   * @return true if withdrawal successful ; false otherwise\n   */\n  function withdrawEther(uint256 ethers)\n      public\n      onlyOwner\n  {\n      msg.sender.transfer(ethers);\n  }\n\n  /**\n   * @dev Allow the owner to withdraw tokens from the contract without taking tokens from deposits.\n   * @param tokens quantity of tokens to be withdrawn\n   */\n  function withdrawTalao(uint256 tokens)\n      public\n      onlyOwner\n  {\n      require(balanceOf(this).sub(totalDeposit) >= tokens, \"too much tokens asked\");\n      _transfer(this, msg.sender, tokens);\n  }\n\n  /******************************************/\n  /*      vault functions start here        */\n  /******************************************/\n\n  /**\n  * @dev Allows anyone to create a vault access.\n  *      Vault deposit is transferred to token contract and sum is stored in totalDeposit\n  *      Price must be lower than Vault deposit\n  * @param price to pay to access certificate vault\n  */\n  function createVaultAccess (uint256 price)\n      public\n      onlyMintingFinished\n  {\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==false, \"vault already created\");\n      require(price<=vaultDeposit, \"price asked is too high\");\n      require(balanceOf(msg.sender)>vaultDeposit, \"user has not enough tokens to send deposit\");\n      data[msg.sender].accessPrice=price;\n      super.transfer(this, vaultDeposit);\n      totalDeposit = totalDeposit.add(vaultDeposit);\n      data[msg.sender].userDeposit=vaultDeposit;\n      data[msg.sender].sharingPlan=100;\n      accessAllowance[msg.sender][msg.sender].clientAgreement=true;\n      emit Vault(msg.sender, msg.sender, VaultStatus.Created);\n  }\n\n  /**\n  * @dev Closes a vault access, deposit is sent back to freelance wallet\n  *      Total deposit in token contract is reduced by user deposit\n  */\n  function closeVaultAccess()\n      public\n      onlyMintingFinished\n  {\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\n      require(_transfer(this, msg.sender, data[msg.sender].userDeposit), \"token deposit transfer failed\");\n      accessAllowance[msg.sender][msg.sender].clientAgreement=false;\n      totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);\n      data[msg.sender].sharingPlan=0;\n      emit Vault(msg.sender, msg.sender, VaultStatus.Closed);\n  }\n\n  /**\n  * @dev Internal transfer function used to transfer tokens from an address to another without prior authorization.\n  *      Only used in these situations:\n  *           * Send tokens from the contract to a token buyer (buy() function)\n  *           * Send tokens from the contract to the owner in order to withdraw tokens (withdrawTalao(tokens) function)\n  *           * Send tokens from the contract to a user closing its vault thus claiming its deposit back (closeVaultAccess() function)\n  * @param _from address The address which you want to send tokens from.\n  * @param _to address The address which you want to transfer to.\n  * @param _value uint256 the amount of tokens to be transferred.\n  * @return true if transfer is successful ; should throw otherwise\n  */\n  function _transfer(address _from, address _to, uint _value)\n      internal\n      returns (bool)\n  {\n      require(_to != 0x0, \"destination cannot be 0x0\");\n      require(balances[_from] >= _value, \"not enough tokens in sender wallet\");\n\n      balances[_from] = balances[_from].sub(_value);\n      balances[_to] = balances[_to].add(_value);\n      emit Transfer(_from, _to, _value);\n      return true;\n  }\n\n  /**\n  * @dev Appoint an agent or a new agent\n  *      Former agent is replaced by new agent\n  *      Agent will receive token on behalf of the freelance talent\n  * @param newagent agent to appoint\n  * @param newplan sharing plan is %, 100 means 100% for freelance\n  */\n  function agentApproval (address newagent, uint newplan)\n      public\n      onlyMintingFinished\n  {\n      require(newplan>=0&&newplan<=100, \"plan must be between 0 and 100\");\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\n      emit Vault(data[msg.sender].appointedAgent, msg.sender, VaultStatus.AgentRemoved);\n      data[msg.sender].appointedAgent=newagent;\n      data[msg.sender].sharingPlan=newplan;\n      emit Vault(newagent, msg.sender, VaultStatus.NewAgent);\n  }\n\n  /**\n   * @dev Set the quantity of tokens necessary for vault access creation\n   * @param newdeposit deposit (in tokens) for vault access creation\n   */\n  function setVaultDeposit (uint newdeposit)\n      public\n      onlyOwner\n  {\n      vaultDeposit = newdeposit;\n  }\n\n  /**\n  * @dev Buy unlimited access to a freelancer vault\n  *      Vault access price is transfered from client to agent or freelance depending on the sharing plan\n  *      Allowance is given to client and one stores block.number for future use\n  * @param freelance the address of the talent\n  * @return true if access is granted ; false if not\n  */\n  function getVaultAccess (address freelance)\n      public\n      onlyMintingFinished\n      returns (bool)\n  {\n      require(accessAllowance[freelance][freelance].clientAgreement==true, \"vault does not exist\");\n      require(accessAllowance[msg.sender][freelance].clientAgreement!=true, \"access was already granted\");\n      require(balanceOf(msg.sender)>data[freelance].accessPrice, \"user has not enough tokens to get access to vault\");\n\n      uint256 freelance_share = data[freelance].accessPrice.mul(data[freelance].sharingPlan).div(100);\n      uint256 agent_share = data[freelance].accessPrice.sub(freelance_share);\n      if(freelance_share>0) super.transfer(freelance, freelance_share);\n      if(agent_share>0) super.transfer(data[freelance].appointedAgent, agent_share);\n      accessAllowance[msg.sender][freelance].clientAgreement=true;\n      accessAllowance[msg.sender][freelance].clientDate=block.number;\n      emit Vault(msg.sender, freelance, VaultStatus.NewAccess);\n      return true;\n  }\n\n  /**\n  * @dev Simple getter to retrieve talent agent\n  * @param freelance talent address\n  * @return address of the agent\n  **/\n  function getFreelanceAgent(address freelance)\n      public\n      view\n      returns (address)\n  {\n      return data[freelance].appointedAgent;\n  }\n\n  /**\n  * @dev Simple getter to check if user has access to a freelance vault\n  * @param freelance talent address\n  * @param user user address\n  * @return true if access granted or false if not\n  **/\n  function hasVaultAccess(address freelance, address user)\n      public\n      view\n      returns (bool)\n  {\n      return ((accessAllowance[user][freelance].clientAgreement) || (data[freelance].appointedAgent == user));\n  }\n\n}\n\n// File: contracts/Foundation.sol\n\n/**\n * @title Foundation contract.\n * @author Talao, Polynomial.\n */\ncontract Foundation is OwnableUpdated {\n\n    // Registered foundation factories.\n    mapping(address => bool) public factories;\n\n    // Owners (EOA) to contract addresses relationships.\n    mapping(address => address) public ownersToContracts;\n\n    // Contract addresses to owners relationships.\n    mapping(address => address) public contractsToOwners;\n\n    // Index of known contract addresses.\n    address[] private contractsIndex;\n\n    // Members (EOA) to contract addresses relationships.\n    // In a Partnership.sol inherited contract, this allows us to create a\n    // modifier for most read functions in this contract that will authorize\n    // any account associated with an authorized Partnership contract.\n    mapping(address => address) public membersToContracts;\n\n    // Index of known members for each contract.\n    // These are EOAs that were added once, even if removed now.\n    mapping(address => address[]) public contractsToKnownMembersIndexes;\n\n    // Events for factories.\n    event FactoryAdded(address _factory);\n    event FactoryRemoved(address _factory);\n\n    /**\n     * @dev Add a factory.\n     */\n    function addFactory(address _factory) external onlyOwner {\n        factories[_factory] = true;\n        emit FactoryAdded(_factory);\n    }\n\n    /**\n     * @dev Remove a factory.\n     */\n    function removeFactory(address _factory) external onlyOwner {\n        factories[_factory] = false;\n        emit FactoryRemoved(_factory);\n    }\n\n    /**\n     * @dev Modifier for factories.\n     */\n    modifier onlyFactory() {\n        require(\n            factories[msg.sender],\n            \"You are not a factory\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Set initial owner of a contract.\n     */\n    function setInitialOwnerInFoundation(\n        address _contract,\n        address _account\n    )\n        external\n        onlyFactory\n    {\n        require(\n            contractsToOwners[_contract] == address(0),\n            \"Contract already has owner\"\n        );\n        require(\n            ownersToContracts[_account] == address(0),\n            \"Account already has contract\"\n        );\n        contractsToOwners[_contract] = _account;\n        contractsIndex.push(_contract);\n        ownersToContracts[_account] = _contract;\n        membersToContracts[_account] = _contract;\n    }\n\n    /**\n     * @dev Transfer a contract to another account.\n     */\n    function transferOwnershipInFoundation(\n        address _contract,\n        address _newAccount\n    )\n        external\n    {\n        require(\n            (\n                ownersToContracts[msg.sender] == _contract &&\n                contractsToOwners[_contract] == msg.sender\n            ),\n            \"You are not the owner\"\n        );\n        ownersToContracts[msg.sender] = address(0);\n        membersToContracts[msg.sender] = address(0);\n        ownersToContracts[_newAccount] = _contract;\n        membersToContracts[_newAccount] = _contract;\n        contractsToOwners[_contract] = _newAccount;\n        // Remark: we do not update the contracts members.\n        // It's the new owner's responsability to remove members, if needed.\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * This is called through the contract.\n     */\n    function renounceOwnershipInFoundation() external returns (bool success) {\n        // Remove members.\n        delete(contractsToKnownMembersIndexes[msg.sender]);\n        // Free the EOA, so he can become owner of a new contract.\n        delete(ownersToContracts[contractsToOwners[msg.sender]]);\n        // Assign the contract to no one.\n        delete(contractsToOwners[msg.sender]);\n        // Return.\n        success = true;\n    }\n\n    /**\n     * @dev Add a member EOA to a contract.\n     */\n    function addMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == address(0),\n            \"Address is already member of a contract\"\n        );\n        membersToContracts[_member] = ownersToContracts[msg.sender];\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Remove a member EOA to a contract.\n     */\n    function removeMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == ownersToContracts[msg.sender],\n            \"Address is not member of this contract\"\n        );\n        membersToContracts[_member] = address(0);\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Getter for contractsIndex.\n     * The automatic getter can not return array.\n     */\n    function getContractsIndex()\n        external\n        onlyOwner\n        view\n        returns (address[])\n    {\n        return contractsIndex;\n    }\n\n    /**\n     * @dev Prevents accidental sending of ether.\n     */\n    function() public {\n        revert(\"Prevent accidental sending of ether\");\n    }\n}\n\n// File: contracts/identity/ERC735.sol\n\n/**\n * @title ERC735 Claim Holder\n * @notice Implementation by Origin Protocol\n * @dev https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ERC735.sol\n */\ncontract ERC735 {\n\n    event ClaimRequested(\n        uint256 indexed claimRequestId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimChanged(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    function getClaim(bytes32 _claimId)\n        public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n    function getClaimIdsByTopic(uint256 _topic)\n        public view returns(bytes32[] claimIds);\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri)\n        public returns (bytes32 claimRequestId);\n    function removeClaim(bytes32 _claimId)\n        public returns (bool success);\n}\n\n// File: contracts/identity/ERC725.sol\n\n/**\n * @title ERC725 Proxy Identity\n * @notice Implementation by Origin Protocol\n * @dev https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ERC725.sol\n */\ncontract ERC725 {\n\n    uint256 constant MANAGEMENT_KEY = 1;\n    uint256 constant ACTION_KEY = 2;\n    uint256 constant CLAIM_SIGNER_KEY = 3;\n    uint256 constant ENCRYPTION_KEY = 4;\n\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n    function approve(uint256 _id, bool _approve) public returns (bool success);\n}\n\n// File: contracts/identity/KeyHolderLibrary.sol\n\n/**\n * @title Library for KeyHolder.\n * @notice Fork of Origin Protocol's implementation at\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/KeyHolderLibrary.sol\n * We want to add purpose to already existing key.\n * We do not want to have purpose J if you have purpose I and I < J\n * Exception: we want a key of purpose 1 to have all purposes.\n * @author Talao, Polynomial.\n */\nlibrary KeyHolderLibrary {\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event PurposeAdded(bytes32 indexed key, uint256 indexed purpose);\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    struct Key {\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\n        bytes32 key;\n    }\n\n    struct KeyHolderData {\n        uint256 executionNonce;\n        mapping (bytes32 => Key) keys;\n        mapping (uint256 => bytes32[]) keysByPurpose;\n        mapping (uint256 => Execution) executions;\n    }\n\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n    function init(KeyHolderData storage _keyHolderData)\n        public\n    {\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(1);\n        _keyHolderData.keys[_key].keyType = 1;\n        _keyHolderData.keysByPurpose[1].push(_key);\n        emit KeyAdded(_key, 1, 1);\n    }\n\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return (\n            _keyHolderData.keys[_key].purposes,\n            _keyHolderData.keys[_key].keyType,\n            _keyHolderData.keys[_key].key\n        );\n    }\n\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return (_keyHolderData.keys[_key].purposes);\n    }\n\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return _keyHolderData.keysByPurpose[_purpose];\n    }\n\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        _keyHolderData.keys[_key].key = _key;\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n        _keyHolderData.keys[_key].keyType = _type;\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(_key, _purpose, _type);\n\n        return true;\n    }\n\n    // We want to be able to add purpose to an existing key.\n    function addPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        returns (bool)\n    {\n        require(_keyHolderData.keys[_key].key == _key, \"Key does not exist\"); // Key should already exist\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n        emit PurposeAdded(_key, _purpose);\n\n        return true;\n    }\n\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n        emit Approved(_id, _approve);\n\n        if (_approve == true) {\n            _keyHolderData.executions[_id].approved = true;\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n            if (success) {\n                _keyHolderData.executions[_id].executed = true;\n                emit Executed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            } else {\n                emit ExecutionFailed(\n                    _id,\n                    _keyHolderData.executions[_id].to,\n                    _keyHolderData.executions[_id].value,\n                    _keyHolderData.executions[_id].data\n                );\n                return;\n            }\n        } else {\n            _keyHolderData.executions[_id].approved = false;\n        }\n        return true;\n    }\n\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n        if (\n            keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) ||\n            keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)\n        ) {\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n        }\n\n        _keyHolderData.executionNonce++;\n        return _keyHolderData.executionNonce-1;\n    }\n\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n        }\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n        // Remove purpose from key\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            if (purposes[i] == _purpose) {\n                purposes[i] = purposes[purposes.length - 1];\n                delete purposes[purposes.length - 1];\n                purposes.length--;\n                break;\n            }\n        }\n\n        // If no more purposes, delete key\n        if (purposes.length == 0) {\n            delete _keyHolderData.keys[_key];\n        }\n\n        // Remove key from keysByPurpose\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n        for (uint j = 0; j < keys.length; j++) {\n            if (keys[j] == _key) {\n                keys[j] = keys[keys.length - 1];\n                delete keys[keys.length - 1];\n                keys.length--;\n                break;\n            }\n        }\n\n        return true;\n    }\n\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool isThere)\n    {\n        if (_keyHolderData.keys[_key].key == 0) {\n            isThere = false;\n        }\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n        for (uint i = 0; i < purposes.length; i++) {\n            // We do not want to have purpose J if you have purpose I and I < J\n            // Exception: we want purpose 1 to have all purposes.\n            if (purposes[i] == _purpose || purposes[i] == 1) {\n                isThere = true;\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/identity/KeyHolder.sol\n\n/**\n * @title Manages an ERC 725 identity keys.\n * @notice Fork of Origin Protocol's implementation at\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/KeyHolder.sol\n *\n * We defined our own set of \"sub-ACTION\" keys:\n * - 20001 = read private profile & documents (grants isReader()).\n *  Usefull for contracts, for instance to add import contracts.\n * - 20002 = write \"Private profile\" & Documents (except issueDocument)\n * - 20003 = read Partnerships\n * - 20004 = blacklist / unblacklist for identityboxSendtext/identityboxSendfile\n * We also use:\n * - 3 = CLAIM = to issueDocument\n *\n * Moreover we can add purpose to already existing key.\n */\ncontract KeyHolder is ERC725 {\n    KeyHolderLibrary.KeyHolderData keyHolderData;\n\n    constructor() public {\n        KeyHolderLibrary.init(keyHolderData);\n    }\n\n    function getKey(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n    {\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n    }\n\n    function getKeyPurposes(bytes32 _key)\n        public\n        view\n        returns(uint256[] purposes)\n    {\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n    }\n\n    function getKeysByPurpose(uint256 _purpose)\n        public\n        view\n        returns(bytes32[] _keys)\n    {\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n    }\n\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n    }\n\n    function addPurpose(bytes32 _key, uint256 _purpose)\n        public\n        returns (bool)\n    {\n        return KeyHolderLibrary.addPurpose(keyHolderData, _key, _purpose);\n    }\n\n    function approve(uint256 _id, bool _approve)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n    }\n\n    function execute(address _to, uint256 _value, bytes _data)\n        public\n        returns (uint256 executionId)\n    {\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n    }\n\n    function removeKey(bytes32 _key, uint256 _purpose)\n        public\n        returns (bool success)\n    {\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n    }\n\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n        public\n        view\n        returns(bool exists)\n    {\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n    }\n\n}\n\n// File: contracts/identity/ClaimHolderLibrary.sol\n\n/**\n * @title Library for ClaimHolder.\n * @notice Fork of Origin Protocol's implementation at\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ClaimHolderLibrary.sol\n * @author Talao, Polynomial.\n */\nlibrary ClaimHolderLibrary {\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri\n    );\n\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer; // msg.sender\n        bytes signature; // this.address + topic + data\n        bytes data;\n        string uri;\n    }\n\n    struct Claims {\n        mapping (bytes32 => Claim) byId;\n        mapping (uint256 => bytes32[]) byTopic;\n    }\n\n    function addClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n        }\n\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\n\n        if (_claims.byId[claimId].issuer != _issuer) {\n            _claims.byTopic[_topic].push(claimId);\n        }\n\n        _claims.byId[claimId].topic = _topic;\n        _claims.byId[claimId].scheme = _scheme;\n        _claims.byId[claimId].issuer = _issuer;\n        _claims.byId[claimId].signature = _signature;\n        _claims.byId[claimId].data = _data;\n        _claims.byId[claimId].uri = _uri;\n\n        emit ClaimAdded(\n            claimId,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n\n        return claimId;\n    }\n\n    /**\n     * @dev Slightly modified version of Origin Protocol's implementation.\n     * getBytes for signature was originally getBytes(_signature, (i * 65), 65)\n     * and now isgetBytes(_signature, (i * 32), 32)\n     * and if signature is empty, just return empty.\n     */\n    function addClaims(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        uint offset = 0;\n        for (uint16 i = 0; i < _topic.length; i++) {\n            if (_signature.length > 0) {\n                addClaim(\n                    _keyHolderData,\n                    _claims,\n                    _topic[i],\n                    1,\n                    _issuer[i],\n                    getBytes(_signature, (i * 32), 32),\n                    getBytes(_data, offset, _offsets[i]),\n                    \"\"\n                );\n            } else {\n                addClaim(\n                    _keyHolderData,\n                    _claims,\n                    _topic[i],\n                    1,\n                    _issuer[i],\n                    \"\",\n                    getBytes(_data, offset, _offsets[i]),\n                    \"\"\n                );\n            }\n            offset += _offsets[i];\n        }\n    }\n\n    function removeClaim(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        bytes32 _claimId\n    )\n        public\n        returns (bool success)\n    {\n        if (msg.sender != address(this)) {\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n        }\n\n        emit ClaimRemoved(\n            _claimId,\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n\n        delete _claims.byId[_claimId];\n        return true;\n    }\n\n    /**\n     * @dev \"Update\" self-claims.\n     */\n    function updateSelfClaims(\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n        Claims storage _claims,\n        uint256[] _topic,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        uint offset = 0;\n        for (uint16 i = 0; i < _topic.length; i++) {\n            removeClaim(\n                _keyHolderData,\n                _claims,\n                keccak256(abi.encodePacked(msg.sender, _topic[i]))\n            );\n            addClaim(\n                _keyHolderData,\n                _claims,\n                _topic[i],\n                1,\n                msg.sender,\n                \"\",\n                getBytes(_data, offset, _offsets[i]),\n                \"\"\n            );\n            offset += _offsets[i];\n        }\n    }\n\n    function getClaim(Claims storage _claims, bytes32 _claimId)\n        public\n        view\n        returns(\n          uint256 topic,\n          uint256 scheme,\n          address issuer,\n          bytes signature,\n          bytes data,\n          string uri\n        )\n    {\n        return (\n            _claims.byId[_claimId].topic,\n            _claims.byId[_claimId].scheme,\n            _claims.byId[_claimId].issuer,\n            _claims.byId[_claimId].signature,\n            _claims.byId[_claimId].data,\n            _claims.byId[_claimId].uri\n        );\n    }\n\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n        internal\n        pure\n        returns (bytes)\n    {\n        bytes memory sig = new bytes(_length);\n        uint256 j = 0;\n        for (uint256 k = _offset; k < _offset + _length; k++) {\n            sig[j] = _str[k];\n            j++;\n        }\n        return sig;\n    }\n}\n\n// File: contracts/identity/ClaimHolder.sol\n\n/**\n * @title Manages ERC 735 claims.\n * @notice Fork of Origin Protocol's implementation at\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ClaimHolder.sol\n * @author Talao, Polynomial.\n */\ncontract ClaimHolder is KeyHolder, ERC735 {\n\n    ClaimHolderLibrary.Claims claims;\n\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes _signature,\n        bytes _data,\n        string _uri\n    )\n        public\n        returns (bytes32 claimRequestId)\n    {\n        return ClaimHolderLibrary.addClaim(\n            keyHolderData,\n            claims,\n            _topic,\n            _scheme,\n            _issuer,\n            _signature,\n            _data,\n            _uri\n        );\n    }\n\n    function addClaims(\n        uint256[] _topic,\n        address[] _issuer,\n        bytes _signature,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        ClaimHolderLibrary.addClaims(\n            keyHolderData,\n            claims,\n            _topic,\n            _issuer,\n            _signature,\n            _data,\n            _offsets\n        );\n    }\n\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n    }\n\n    function updateSelfClaims(\n        uint256[] _topic,\n        bytes _data,\n        uint256[] _offsets\n    )\n        public\n    {\n        ClaimHolderLibrary.updateSelfClaims(\n            keyHolderData,\n            claims,\n            _topic,\n            _data,\n            _offsets\n        );\n    }\n\n    function getClaim(bytes32 _claimId)\n        public\n        view\n        returns(\n            uint256 topic,\n            uint256 scheme,\n            address issuer,\n            bytes signature,\n            bytes data,\n            string uri\n        )\n    {\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n    }\n\n    function getClaimIdsByTopic(uint256 _topic)\n        public\n        view\n        returns(bytes32[] claimIds)\n    {\n        return claims.byTopic[_topic];\n    }\n}\n\n// File: contracts/identity/Identity.sol\n\n/**\n * @title The Identity is where ERC 725/735 and our custom code meet.\n * @author Talao, Polynomial.\n * @notice Mixes ERC 725/735, foundation, token,\n * constructor values that never change (creator, category, encryption keys)\n * and provides a box to receive decentralized files and texts.\n */\ncontract Identity is ClaimHolder {\n\n    // Foundation contract.\n    Foundation foundation;\n\n    // Talao token contract.\n    TalaoToken public token;\n\n    // Identity information struct.\n    struct IdentityInformation {\n        // Address of this contract creator (factory).\n        // bytes16 left on SSTORAGE 1 after this.\n        address creator;\n\n        // Identity category.\n        // 1001 => 1999: Freelancer.\n        // 2001 => 2999: Freelancer team.\n        // 3001 => 3999: Corporate marketplace.\n        // 4001 => 4999: Public marketplace.\n        // 5001 => 5999: Service provider.\n        // ..\n        // 64001 => 64999: ?\n        // bytes14 left after this on SSTORAGE 1.\n        uint16 category;\n\n        // Asymetric encryption key algorithm.\n        // We use an integer to store algo with offchain references.\n        // 1 => RSA 2048\n        // bytes12 left after this on SSTORAGE 1.\n        uint16 asymetricEncryptionAlgorithm;\n\n        // Symetric encryption key algorithm.\n        // We use an integer to store algo with offchain references.\n        // 1 => AES 128\n        // bytes10 left after this on SSTORAGE 1.\n        uint16 symetricEncryptionAlgorithm;\n\n        // Asymetric encryption public key.\n        // This one can be used to encrypt content especially for this\n        // contract owner, which is the only one to have the private key,\n        // offchain of course.\n        bytes asymetricEncryptionPublicKey;\n\n        // Encrypted symetric encryption key (in Hex).\n        // When decrypted, this passphrase can regenerate\n        // the symetric encryption key.\n        // This key encrypts and decrypts data to be shared with many people.\n        // Uses 0.5 SSTORAGE for AES 128.\n        bytes symetricEncryptionEncryptedKey;\n\n        // Other encrypted secret we might use.\n        bytes encryptedSecret;\n    }\n    // This contract Identity information.\n    IdentityInformation public identityInformation;\n\n    // Identity box: blacklisted addresses.\n    mapping(address => bool) public identityboxBlacklisted;\n\n    // Identity box: event when someone sent us a text.\n    event TextReceived (\n        address indexed sender,\n        uint indexed category,\n        bytes text\n    );\n\n    // Identity box: event when someone sent us an decentralized file.\n    event FileReceived (\n        address indexed sender,\n        uint indexed fileType,\n        uint fileEngine,\n        bytes fileHash\n    );\n\n    /**\n     * @dev Constructor.\n     */\n    constructor(\n        address _foundation,\n        address _token,\n        uint16 _category,\n        uint16 _asymetricEncryptionAlgorithm,\n        uint16 _symetricEncryptionAlgorithm,\n        bytes _asymetricEncryptionPublicKey,\n        bytes _symetricEncryptionEncryptedKey,\n        bytes _encryptedSecret\n    )\n        public\n    {\n        foundation = Foundation(_foundation);\n        token = TalaoToken(_token);\n        identityInformation.creator = msg.sender;\n        identityInformation.category = _category;\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\n        identityInformation.encryptedSecret = _encryptedSecret;\n    }\n\n    /**\n     * @dev Owner of this contract, in the Foundation sense.\n     * We do not allow this to be used externally,\n     * since a contract could fake ownership.\n     * In other contracts, you have to call the Foundation to\n     * know the real owner of this contract.\n     */\n    function identityOwner() internal view returns (address) {\n        return foundation.contractsToOwners(address(this));\n    }\n\n    /**\n     * @dev Check in Foundation if msg.sender is the owner of this contract.\n     * Same remark.\n     */\n    function isIdentityOwner() internal view returns (bool) {\n        return msg.sender == identityOwner();\n    }\n\n    /**\n     * @dev Modifier version of isIdentityOwner.\n     */\n    modifier onlyIdentityOwner() {\n        require(isIdentityOwner(), \"Access denied\");\n        _;\n    }\n\n    /**\n     * @dev Owner functions require open Vault in token.\n     */\n    function isActiveIdentityOwner() public view returns (bool) {\n        return isIdentityOwner() && token.hasVaultAccess(msg.sender, msg.sender);\n    }\n\n    /**\n     * @dev Modifier version of isActiveOwner.\n     */\n    modifier onlyActiveIdentityOwner() {\n        require(isActiveIdentityOwner(), \"Access denied\");\n        _;\n    }\n\n    /**\n     * @dev Does this contract owner have an open Vault in the token?\n     */\n    function isActiveIdentity() public view returns (bool) {\n        return token.hasVaultAccess(identityOwner(), identityOwner());\n    }\n\n    /**\n     * @dev Does msg.sender have an ERC 725 key with certain purpose,\n     * and does the contract owner have an open Vault in the token?\n     */\n    function hasIdentityPurpose(uint256 _purpose) public view returns (bool) {\n        return (\n            keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), _purpose) &&\n            isActiveIdentity()\n        );\n    }\n\n    /**\n     * @dev Modifier version of hasKeyForPurpose\n     */\n    modifier onlyIdentityPurpose(uint256 _purpose) {\n        require(hasIdentityPurpose(_purpose), \"Access denied\");\n        _;\n    }\n\n    /**\n     * @dev \"Send\" a text to this contract.\n     * Text can be encrypted on this contract asymetricEncryptionPublicKey,\n     * before submitting a TX here.\n     */\n    function identityboxSendtext(uint _category, bytes _text) external {\n        require(!identityboxBlacklisted[msg.sender], \"You are blacklisted\");\n        emit TextReceived(msg.sender, _category, _text);\n    }\n\n    /**\n     * @dev \"Send\" a \"file\" to this contract.\n     * File should be encrypted on this contract asymetricEncryptionPublicKey,\n     * before upload on decentralized file storage,\n     * before submitting a TX here.\n     */\n    function identityboxSendfile(\n        uint _fileType, uint _fileEngine, bytes _fileHash\n    )\n        external\n    {\n        require(!identityboxBlacklisted[msg.sender], \"You are blacklisted\");\n        emit FileReceived(msg.sender, _fileType, _fileEngine, _fileHash);\n    }\n\n    /**\n     * @dev Blacklist an address in this Identity box.\n     */\n    function identityboxBlacklist(address _address)\n        external\n        onlyIdentityPurpose(20004)\n    {\n        identityboxBlacklisted[_address] = true;\n    }\n\n    /**\n     * @dev Unblacklist.\n     */\n    function identityboxUnblacklist(address _address)\n        external\n        onlyIdentityPurpose(20004)\n    {\n        identityboxBlacklisted[_address] = false;\n    }\n}\n\n/**\n * @title Interface with clones or inherited contracts.\n */\ninterface IdentityInterface {\n    function identityInformation()\n        external\n        view\n        returns (address, uint16, uint16, uint16, bytes, bytes, bytes);\n    function identityboxSendtext(uint, bytes) external;\n}\n\n// File: contracts/math/SafeMathUpdated.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\nlibrary SafeMathUpdated {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/access/Partnership.sol\n\n/**\n * @title Provides partnership features between contracts.\n * @notice If msg.sender is the owner, in the Foundation sense\n * (see Foundation.sol, of another partnership contract that is\n * authorized in this partnership contract,\n * then he passes isPartnershipMember().\n * Obviously this function is meant to be used in modifiers\n * in contrats that inherit of this one and provide \"restricted\" content.\n * Partnerships are symetrical: when you request a partnership,\n * you automatically authorize the requested partnership contract.\n * Same thing when you remove a partnership.\n * This is done through symetrical functions,\n * where the user submits a tx on his own Partnership contract to ask partnership\n * to another and not on the other contract.\n * Convention here: _function = to be called by another partnership contract.\n * @author Talao, Polynomial.\n */\ncontract Partnership is Identity {\n\n    using SafeMathUpdated for uint;\n\n    // Foundation contract.\n    Foundation foundation;\n\n    // Authorization status.\n    enum PartnershipAuthorization { Unknown, Authorized, Pending, Rejected, Removed }\n\n    // Other Partnership contract information.\n    struct PartnershipContract {\n        // Authorization of this contract.\n        // bytes31 left after this on SSTORAGE 1.\n        PartnershipAuthorization authorization;\n        // Date of partnership creation.\n        // Let's avoid the 2038 year bug, even if this contract will be dead\n        // a lot sooner! It costs nothing, so...\n        // bytes26 left after this on SSTORAGE 1.\n        uint40 created;\n        // His symetric encryption key,\n        // encrypted on our asymetric encryption public key.\n        bytes symetricEncryptionEncryptedKey;\n    }\n    // Our main registry of Partnership contracts.\n    mapping(address => PartnershipContract) internal partnershipContracts;\n\n    // Index of known partnerships (contracts which interacted at least once).\n    address[] internal knownPartnershipContracts;\n\n    // Total of authorized Partnerships contracts.\n    uint public partnershipsNumber;\n\n    // Event when another Partnership contract has asked partnership.\n    event PartnershipRequested();\n\n    // Event when another Partnership contract has authorized our request.\n    event PartnershipAccepted();\n\n    /**\n     * @dev Constructor.\n     */\n    constructor(\n        address _foundation,\n        address _token,\n        uint16 _category,\n        uint16 _asymetricEncryptionAlgorithm,\n        uint16 _symetricEncryptionAlgorithm,\n        bytes _asymetricEncryptionPublicKey,\n        bytes _symetricEncryptionEncryptedKey,\n        bytes _encryptedSecret\n    )\n        Identity(\n            _foundation,\n            _token,\n            _category,\n            _asymetricEncryptionAlgorithm,\n            _symetricEncryptionAlgorithm,\n            _asymetricEncryptionPublicKey,\n            _symetricEncryptionEncryptedKey,\n            _encryptedSecret\n        )\n        public\n    {\n        foundation = Foundation(_foundation);\n        token = TalaoToken(_token);\n        identityInformation.creator = msg.sender;\n        identityInformation.category = _category;\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\n        identityInformation.encryptedSecret = _encryptedSecret;\n    }\n\n    /**\n     * @dev This function will be used in inherited contracts,\n     * to restrict read access to members of Partnership contracts\n     * which are authorized in this contract.\n     */\n    function isPartnershipMember() public view returns (bool) {\n        return partnershipContracts[foundation.membersToContracts(msg.sender)].authorization == PartnershipAuthorization.Authorized;\n    }\n\n    /**\n     * @dev Modifier version of isPartnershipMember.\n     * Not used for now, but could be useful.\n     */\n    modifier onlyPartnershipMember() {\n        require(isPartnershipMember());\n        _;\n    }\n\n    /**\n     * @dev Get partnership status in this contract for a user.\n     */\n    function getMyPartnershipStatus()\n        external\n        view\n        returns (uint authorization)\n    {\n        // If msg.sender has no Partnership contract, return Unknown (0).\n        if (foundation.membersToContracts(msg.sender) == address(0)) {\n            return uint(PartnershipAuthorization.Unknown);\n        } else {\n            return uint(partnershipContracts[foundation.membersToContracts(msg.sender)].authorization);\n        }\n    }\n\n    /**\n     * @dev Get the list of all known Partnership contracts.\n     */\n    function getKnownPartnershipsContracts()\n        external\n        view\n        onlyIdentityPurpose(20003)\n        returns (address[])\n    {\n        return knownPartnershipContracts;\n    }\n\n    /**\n     * @dev Get a Partnership contract information.\n     */\n    function getPartnership(address _hisContract)\n        external\n        view\n        onlyIdentityPurpose(20003)\n        returns (uint, uint, uint40, bytes, bytes)\n    {\n        (\n            ,\n            uint16 hisCategory,\n            ,\n            ,\n            bytes memory hisAsymetricEncryptionPublicKey,\n            ,\n        ) = IdentityInterface(_hisContract).identityInformation();\n        return (\n            hisCategory,\n            uint(partnershipContracts[_hisContract].authorization),\n            partnershipContracts[_hisContract].created,\n            hisAsymetricEncryptionPublicKey,\n            partnershipContracts[_hisContract].symetricEncryptionEncryptedKey\n        );\n    }\n\n    /**\n     * @dev Request partnership.\n     * The owner of this contract requests a partnership\n     * with another Partnership contract\n     * through THIS contract.\n     * We send him our symetric encryption key as well,\n     * encrypted on his symetric encryption public key.\n     * Encryption done offchain before submitting this TX.\n     */\n    function requestPartnership(address _hisContract, bytes _ourSymetricKey)\n        external\n        onlyIdentityPurpose(1)\n    {\n        // We can only request partnership with a contract\n        // if he's not already Known or Removed in our registry.\n        // If he is, we symetrically are already in his partnerships.\n        // Indeed when he asked a partnership with us,\n        // he added us in authorized partnerships.\n        require(\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Unknown ||\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Removed\n        );\n        // Request partnership in the other contract.\n        // Open interface on his contract.\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\n        bool success = hisInterface._requestPartnership(_ourSymetricKey);\n        // If partnership request was a success,\n        if (success) {\n            // If we do not know the Partnership contract yet,\n            if (partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Unknown) {\n                // Then add it to our partnerships index.\n                knownPartnershipContracts.push(_hisContract);\n            }\n            // Authorize Partnership contract in our contract.\n            partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Authorized;\n            // Record date of partnership creation.\n            partnershipContracts[_hisContract].created = uint40(now);\n            // Give the Partnership contrat's owner an ERC 725 \"Claim\" key.\n            addKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3, 1);\n            // Give the Partnership contract an ERC 725 \"Claim\" key.\n            addKey(keccak256(abi.encodePacked(_hisContract)), 3, 1);\n            // Increment our number of partnerships.\n            partnershipsNumber = partnershipsNumber.add(1);\n        }\n    }\n\n    /**\n     * @dev Symetry of requestPartnership.\n     * Called by Partnership contract wanting to partnership.\n     * He sends us his symetric encryption key as well,\n     * encrypted on our symetric encryption public key.\n     * So we can decipher all his content.\n     */\n    function _requestPartnership(bytes _hisSymetricKey)\n        external\n        returns (bool success)\n    {\n        require(\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Unknown ||\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Removed\n        );\n        // If this Partnership contract is Unknown,\n        if (partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Unknown) {\n            // Add the new partnership to our partnerships index.\n            knownPartnershipContracts.push(msg.sender);\n            // Record date of partnership creation.\n            partnershipContracts[msg.sender].created = uint40(now);\n        }\n        // Write Pending to our partnerships contract registry.\n        partnershipContracts[msg.sender].authorization = PartnershipAuthorization.Pending;\n        // Record his symetric encryption key,\n        // encrypted on our asymetric encryption public key.\n        partnershipContracts[msg.sender].symetricEncryptionEncryptedKey = _hisSymetricKey;\n        // Event for this contrat owner's UI.\n        emit PartnershipRequested();\n        // Return success.\n        success = true;\n    }\n\n    /**\n     * @dev Authorize Partnership.\n     * Before submitting this TX, we must have encrypted our\n     * symetric encryption key on his asymetric encryption public key.\n     */\n    function authorizePartnership(address _hisContract, bytes _ourSymetricKey)\n        external\n        onlyIdentityPurpose(1)\n    {\n        require(\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Pending,\n            \"Partnership must be Pending\"\n        );\n        // Authorize the Partnership contract in our contract.\n        partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Authorized;\n        // Record the date of partnership creation.\n        partnershipContracts[_hisContract].created = uint40(now);\n        // Give the Partnership contrat's owner an ERC 725 \"Claim\" key.\n        addKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3, 1);\n        // Give the Partnership contract an ERC 725 \"Claim\" key.\n        addKey(keccak256(abi.encodePacked(_hisContract)), 3, 1);\n        // Increment our number of partnerships.\n        partnershipsNumber = partnershipsNumber.add(1);\n        // Log an event in the new authorized partner contract.\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\n        hisInterface._authorizePartnership(_ourSymetricKey);\n    }\n\n    /**\n     * @dev Allows other Partnership contract to send an event when authorizing.\n     * He sends us also his symetric encryption key,\n     * encrypted on our asymetric encryption public key.\n     */\n    function _authorizePartnership(bytes _hisSymetricKey) external {\n        require(\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Authorized,\n            \"You have no authorized partnership\"\n        );\n        partnershipContracts[msg.sender].symetricEncryptionEncryptedKey = _hisSymetricKey;\n        emit PartnershipAccepted();\n    }\n\n    /**\n     * @dev Reject Partnership.\n     */\n    function rejectPartnership(address _hisContract)\n        external\n        onlyIdentityPurpose(1)\n    {\n        require(\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Pending,\n            \"Partner must be Pending\"\n        );\n        partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Rejected;\n    }\n\n    /**\n     * @dev Remove Partnership.\n     */\n    function removePartnership(address _hisContract)\n        external\n        onlyIdentityPurpose(1)\n    {\n        require(\n            (\n                partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Authorized ||\n                partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Rejected\n            ),\n            \"Partnership must be Authorized or Rejected\"\n        );\n        // Remove ourselves in the other Partnership contract.\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\n        bool success = hisInterface._removePartnership();\n        // If success,\n        if (success) {\n            // If it was an authorized partnership,\n            if (partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Authorized) {\n                // Remove the partnership creation date.\n                delete partnershipContracts[_hisContract].created;\n                // Remove his symetric encryption key.\n                delete partnershipContracts[_hisContract].symetricEncryptionEncryptedKey;\n                // Decrement our number of partnerships.\n                partnershipsNumber = partnershipsNumber.sub(1);\n            }\n            // If there is one, remove ERC 725 \"Claim\" key for Partnership contract owner.\n            if (keyHasPurpose(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3)) {\n                removeKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3);\n            }\n            // If there is one, remove ERC 725 \"Claim\" key for Partnership contract.\n            if (keyHasPurpose(keccak256(abi.encodePacked(_hisContract)), 3)) {\n                removeKey(keccak256(abi.encodePacked(_hisContract)), 3);\n            }\n            // Change his partnership to Removed in our contract.\n            // We want to have Removed instead of resetting to Unknown,\n            // otherwise if partnership is initiated again with him,\n            // our knownPartnershipContracts would have a duplicate entry.\n            partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Removed;\n        }\n    }\n\n    /**\n     * @dev Symetry of removePartnership.\n     * Called by the Partnership contract breaking partnership with us.\n     */\n    function _removePartnership() external returns (bool success) {\n        // He wants to break partnership with us, so we break too.\n        // If it was an authorized partnership,\n        if (partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Authorized) {\n            // Remove date of partnership creation.\n            delete partnershipContracts[msg.sender].created;\n            // Remove his symetric encryption key.\n            delete partnershipContracts[msg.sender].symetricEncryptionEncryptedKey;\n            // Decrement our number of partnerships.\n            partnershipsNumber = partnershipsNumber.sub(1);\n        }\n        // Would have liked to remove ERC 725 \"Claim\" keys here.\n        // Unfortunately we can not automate this. Indeed it would require\n        // the Partnership contract to have an ERC 725 Management key.\n\n        // Remove his authorization.\n        partnershipContracts[msg.sender].authorization = PartnershipAuthorization.Removed;\n        // We return to the calling contract that it's done.\n        success = true;\n    }\n\n    /**\n     * @dev Internal function to remove partnerships before selfdestruct.\n     */\n    function cleanupPartnership() internal returns (bool success) {\n        // For each known Partnership contract\n        for (uint i = 0; i < knownPartnershipContracts.length; i++) {\n            // If it was an authorized partnership,\n            if (partnershipContracts[knownPartnershipContracts[i]].authorization == PartnershipAuthorization.Authorized) {\n                // Remove ourselves in the other Partnership contract.\n                PartnershipInterface hisInterface = PartnershipInterface(knownPartnershipContracts[i]);\n                hisInterface._removePartnership();\n            }\n        }\n        success = true;\n    }\n}\n\n\n/**\n * @title Interface with clones, inherited contracts or services.\n */\ninterface PartnershipInterface {\n    function _requestPartnership(bytes) external view returns (bool);\n    function _authorizePartnership(bytes) external;\n    function _removePartnership() external returns (bool success);\n    function getKnownPartnershipsContracts() external returns (address[]);\n    function getPartnership(address)\n        external\n        returns (uint, uint, uint40, bytes, bytes);\n}\n\n// File: contracts/access/Permissions.sol\n\n/**\n * @title Permissions contract.\n * @author Talao, Polynomial.\n * @notice See ../identity/KeyHolder.sol as well.\n */\ncontract Permissions is Partnership {\n\n    // Foundation contract.\n    Foundation foundation;\n\n    // Talao token contract.\n    TalaoToken public token;\n\n    /**\n     * @dev Constructor.\n     */\n    constructor(\n        address _foundation,\n        address _token,\n        uint16 _category,\n        uint16 _asymetricEncryptionAlgorithm,\n        uint16 _symetricEncryptionAlgorithm,\n        bytes _asymetricEncryptionPublicKey,\n        bytes _symetricEncryptionEncryptedKey,\n        bytes _encryptedSecret\n    )\n        Partnership(\n            _foundation,\n            _token,\n            _category,\n            _asymetricEncryptionAlgorithm,\n            _symetricEncryptionAlgorithm,\n            _asymetricEncryptionPublicKey,\n            _symetricEncryptionEncryptedKey,\n            _encryptedSecret\n        )\n        public\n    {\n        foundation = Foundation(_foundation);\n        token = TalaoToken(_token);\n        identityInformation.creator = msg.sender;\n        identityInformation.category = _category;\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\n        identityInformation.encryptedSecret = _encryptedSecret;\n    }\n\n    /**\n     * @dev Is msg.sender a \"member\" of this contract, in the Foundation sense?\n     */\n    function isMember() public view returns (bool) {\n        return foundation.membersToContracts(msg.sender) == address(this);\n    }\n\n    /**\n     * @dev Read authorization for inherited contracts \"private\" data.\n     */\n    function isReader() public view returns (bool) {\n        // Get Vault access price in the token for this contract owner,\n        // in the Foundation sense.\n        (uint accessPrice,,,) = token.data(identityOwner());\n        // OR conditions for Reader:\n        // 1) Same code for\n        // 1.1) Sender is this contract owner and has an open Vault in the token.\n        // 1.2) Sender has vaultAccess to this contract owner in the token.\n        // 2) Owner has open Vault in the token and:\n        // 2.1) Sender is a member of this contract,\n        // 2.2) Sender is a member of an authorized Partner contract\n        // 2.3) Sender has an ERC 725 20001 key \"Reader\"\n        // 2.4) Owner has a free vaultAccess in the token\n        return(\n            token.hasVaultAccess(identityOwner(), msg.sender) ||\n            (\n                token.hasVaultAccess(identityOwner(), identityOwner()) &&\n                (\n                    isMember() ||\n                    isPartnershipMember() ||\n                    hasIdentityPurpose(20001) ||\n                    (accessPrice == 0 && msg.sender != address(0))\n                )\n            )\n        );\n    }\n\n    /**\n     * @dev Modifier version of isReader.\n     */\n    modifier onlyReader() {\n        require(isReader(), \"Access denied\");\n        _;\n    }\n}\n\n// File: contracts/content/Profile.sol\n\n/**\n * @title Profile contract.\n * @author Talao, Polynomial, Slowsense, Blockchain Partner.\n */\ncontract Profile is Permissions {\n\n    // \"Private\" profile.\n    // Access controlled by Permissions.sol.\n    // Nothing is really private on the blockchain,\n    // so data should be encrypted on symetric key.\n    struct PrivateProfile {\n        // Private email.\n        bytes email;\n\n        // Mobile number.\n        bytes mobile;\n    }\n    PrivateProfile internal privateProfile;\n\n    /**\n     * @dev Get private profile.\n     */\n    function getPrivateProfile()\n        external\n        view\n        onlyReader\n        returns (bytes, bytes)\n    {\n        return (\n            privateProfile.email,\n            privateProfile.mobile\n        );\n    }\n\n    /**\n     * @dev Set private profile.\n     */\n    function setPrivateProfile(\n        bytes _privateEmail,\n        bytes _mobile\n    )\n        external\n        onlyIdentityPurpose(20002)\n    {\n        privateProfile.email = _privateEmail;\n        privateProfile.mobile = _mobile;\n    }\n}\n\n// File: contracts/content/Documents.sol\n\n/**\n * @title A Documents contract allows to manage documents and share them.\n * @notice Also contracts that have an ERC 725 Claim key (3)\n * can add certified documents.\n * @author Talao, Polynomial, SlowSense, Blockchain Partners.\n */\ncontract Documents is Permissions {\n\n    using SafeMathUpdated for uint;\n\n    // Document struct.\n    struct Document {\n\n        // True if \"published\", false if \"unpublished\".\n        // 31 bytes remaining in SSTORAGE 1 after this.\n        bool published;\n\n        // True if doc is encrypted.\n        // 30 bytes remaining in SSTORAGE 1 after this.\n        bool encrypted;\n\n        // Position in index.\n        // 28 bytes remaining in SSTORAGE 1 after this.\n        uint16 index;\n\n        // Type of document:\n        // ...\n        // 50000 => 59999: experiences\n        // 60000 => max: certificates\n        // 26 bytes remaining in SSTORAGE 1 after this.\n        uint16 docType;\n\n        // Version of document type: 1 = \"work experience version 1\" document, if type_doc = 1\n        // 24 bytes remaining in SSTORAGE 1 after this.\n        uint16 docTypeVersion;\n\n        // ID of related experience, for certificates.\n        // 22 bytes remaining in SSTORAGE 1 after this.\n        uint16 related;\n\n        // ID of the file location engine.\n        // 1 = IPFS, 2 = Swarm, 3 = Filecoin, ...\n        // 20 bytes remaining in SSTORAGE 1 after this.\n        uint16 fileLocationEngine;\n\n        // Issuer of the document.\n        // SSTORAGE 1 full after this.\n        address issuer;\n\n        // Checksum of the file (SHA-256 offchain).\n        // SSTORAGE 2 filled after this.\n        bytes32 fileChecksum;\n\n        // Expiration date.\n        uint40 expires;\n\n        // Hash of the file location in a decentralized engine.\n        // Example: IPFS hash, Swarm hash, Filecoin hash...\n        // Uses 1 SSTORAGE for IPFS.\n        bytes fileLocationHash;\n    }\n\n    // Documents registry.\n    mapping(uint => Document) internal documents;\n\n    // Documents index.\n    uint[] internal documentsIndex;\n\n    // Documents counter.\n    uint internal documentsCounter;\n\n    // Event: new document added.\n    event DocumentAdded (uint id);\n\n    // Event: document removed.\n    event DocumentRemoved (uint id);\n\n    // Event: certificate issued.\n    event CertificateIssued (bytes32 indexed checksum, address indexed issuer, uint id);\n\n    // Event: certificate accepted.\n    event CertificateAccepted (bytes32 indexed checksum, address indexed issuer, uint id);\n\n    /**\n     * @dev Document getter.\n     * @param _id uint Document ID.\n     */\n    function getDocument(uint _id)\n        external\n        view\n        onlyReader\n        returns (\n            uint16,\n            uint16,\n            uint40,\n            address,\n            bytes32,\n            uint16,\n            bytes,\n            bool,\n            uint16\n        )\n    {\n        Document memory doc = documents[_id];\n        require(doc.published);\n        return(\n            doc.docType,\n            doc.docTypeVersion,\n            doc.expires,\n            doc.issuer,\n            doc.fileChecksum,\n            doc.fileLocationEngine,\n            doc.fileLocationHash,\n            doc.encrypted,\n            doc.related\n        );\n    }\n\n    /**\n     * @dev Get all published documents.\n     */\n    function getDocuments() external view onlyReader returns (uint[]) {\n        return documentsIndex;\n    }\n\n    /**\n     * @dev Create a document.\n     */\n    function createDocument(\n        uint16 _docType,\n        uint16 _docTypeVersion,\n        uint40 _expires,\n        bytes32 _fileChecksum,\n        uint16 _fileLocationEngine,\n        bytes _fileLocationHash,\n        bool _encrypted\n    )\n        external\n        onlyIdentityPurpose(20002)\n        returns(uint)\n    {\n        require(_docType < 60000);\n        _createDocument(\n            _docType,\n            _docTypeVersion,\n            _expires,\n            msg.sender,\n            _fileChecksum,\n            _fileLocationEngine,\n            _fileLocationHash,\n            _encrypted,\n            0\n        );\n        return documentsCounter;\n    }\n\n    /**\n     * @dev Issue a certificate.\n     */\n    function issueCertificate(\n        uint16 _docType,\n        uint16 _docTypeVersion,\n        bytes32 _fileChecksum,\n        uint16 _fileLocationEngine,\n        bytes _fileLocationHash,\n        bool _encrypted,\n        uint16 _related\n    )\n        external\n        returns(uint)\n    {\n        require(\n            keyHasPurpose(keccak256(abi.encodePacked(foundation.membersToContracts(msg.sender))), 3) &&\n            isActiveIdentity() &&\n            _docType >= 60000\n        );\n        uint id = _createDocument(\n            _docType,\n            _docTypeVersion,\n            0,\n            foundation.membersToContracts(msg.sender),\n            _fileChecksum,\n            _fileLocationEngine,\n            _fileLocationHash,\n            _encrypted,\n            _related\n        );\n        emit CertificateIssued(_fileChecksum, foundation.membersToContracts(msg.sender), id);\n        return id;\n    }\n\n    /**\n     * @dev Accept a certificate.\n     */\n    function acceptCertificate(uint _id) external onlyIdentityPurpose(20002) {\n        Document storage doc = documents[_id];\n        require(!doc.published && doc.docType >= 60000);\n        // Add to index.\n        doc.index = uint16(documentsIndex.push(_id).sub(1));\n        // Publish.\n        doc.published = true;\n        // Unpublish related experience, if published.\n        if (documents[doc.related].published) {\n            _deleteDocument(doc.related);\n        }\n        // Emit event.\n        emit CertificateAccepted(doc.fileChecksum, doc.issuer, _id);\n    }\n\n    /**\n     * @dev Create a document.\n     */\n    function _createDocument(\n        uint16 _docType,\n        uint16 _docTypeVersion,\n        uint40 _expires,\n        address _issuer,\n        bytes32 _fileChecksum,\n        uint16 _fileLocationEngine,\n        bytes _fileLocationHash,\n        bool _encrypted,\n        uint16 _related\n    )\n        internal\n        returns(uint)\n    {\n        // Increment documents counter.\n        documentsCounter = documentsCounter.add(1);\n        // Storage pointer.\n        Document storage doc = documents[documentsCounter];\n        // For certificates:\n        // - add the related experience\n        // - do not add to index\n        // - do not publish.\n        if (_docType >= 60000) {\n            doc.related = _related;\n        } else {\n            // Add to index.\n            doc.index = uint16(documentsIndex.push(documentsCounter).sub(1));\n            // Publish.\n            doc.published = true;\n        }\n        // Common data.\n        doc.encrypted = _encrypted;\n        doc.docType = _docType;\n        doc.docTypeVersion = _docTypeVersion;\n        doc.expires = _expires;\n        doc.fileLocationEngine = _fileLocationEngine;\n        doc.issuer = _issuer;\n        doc.fileChecksum = _fileChecksum;\n        doc.fileLocationHash = _fileLocationHash;\n        // Emit event.\n        emit DocumentAdded(documentsCounter);\n        // Return document ID.\n        return documentsCounter;\n    }\n\n    /**\n     * @dev Remove a document.\n     */\n    function deleteDocument (uint _id) external onlyIdentityPurpose(20002) {\n        _deleteDocument(_id);\n    }\n\n    /**\n     * @dev Remove a document.\n     */\n    function _deleteDocument (uint _id) internal {\n        Document storage docToDelete = documents[_id];\n        require (_id > 0);\n        require(docToDelete.published);\n        // If the removed document is not the last in the index,\n        if (docToDelete.index < (documentsIndex.length).sub(1)) {\n            // Find the last document of the index.\n            uint lastDocId = documentsIndex[(documentsIndex.length).sub(1)];\n            Document storage lastDoc = documents[lastDocId];\n            // Move it in the index in place of the document to delete.\n            documentsIndex[docToDelete.index] = lastDocId;\n            // Update this document that was moved from last position.\n            lastDoc.index = docToDelete.index;\n        }\n        // Remove last element from index.\n        documentsIndex.length --;\n        // Unpublish document.\n        docToDelete.published = false;\n        // Emit event.\n        emit DocumentRemoved(_id);\n    }\n\n    /**\n     * @dev \"Update\" a document.\n     * Updating a document makes no sense technically.\n     * Here we provide a function that deletes a doc & create a new one.\n     * But for UX it's very important to have this in 1 transaction.\n     */\n    function updateDocument(\n        uint _id,\n        uint16 _docType,\n        uint16 _docTypeVersion,\n        uint40 _expires,\n        bytes32 _fileChecksum,\n        uint16 _fileLocationEngine,\n        bytes _fileLocationHash,\n        bool _encrypted\n    )\n        external\n        onlyIdentityPurpose(20002)\n        returns (uint)\n    {\n        require(_docType < 60000);\n        _deleteDocument(_id);\n        _createDocument(\n            _docType,\n            _docTypeVersion,\n            _expires,\n            msg.sender,\n            _fileChecksum,\n            _fileLocationEngine,\n            _fileLocationHash,\n            _encrypted,\n            0\n        );\n        return documentsCounter;\n    }\n}\n\n\n/**\n * @title Interface with clones, inherited contracts or services.\n */\ninterface DocumentsInterface {\n    function getDocuments() external returns(uint[]);\n    function getDocument(uint)\n        external\n        returns (\n            uint16,\n            uint16,\n            uint40,\n            address,\n            bytes32,\n            uint16,\n            bytes,\n            bool,\n            uint16\n        );\n}\n\n// File: contracts/Workspace.sol\n\n/**\n * @title A Workspace contract.\n * @author Talao, Polynomial, SlowSense, Blockchain Partners.\n */\ncontract Workspace is Permissions, Profile, Documents {\n\n    /**\n     * @dev Constructor.\n     */\n    constructor(\n        address _foundation,\n        address _token,\n        uint16 _category,\n        uint16 _asymetricEncryptionAlgorithm,\n        uint16 _symetricEncryptionAlgorithm,\n        bytes _asymetricEncryptionPublicKey,\n        bytes _symetricEncryptionEncryptedKey,\n        bytes _encryptedSecret\n    )\n        Permissions(\n            _foundation,\n            _token,\n            _category,\n            _asymetricEncryptionAlgorithm,\n            _symetricEncryptionAlgorithm,\n            _asymetricEncryptionPublicKey,\n            _symetricEncryptionEncryptedKey,\n            _encryptedSecret\n        )\n        public\n    {\n        foundation = Foundation(_foundation);\n        token = TalaoToken(_token);\n        identityInformation.creator = msg.sender;\n        identityInformation.category = _category;\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\n        identityInformation.encryptedSecret = _encryptedSecret;\n    }\n\n    /**\n     * @dev Destroy contract.\n     */\n    function destroyWorkspace() external onlyIdentityOwner {\n        if (cleanupPartnership() && foundation.renounceOwnershipInFoundation()) {\n            selfdestruct(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Prevents accidental sending of ether.\n     */\n    function() public {\n        revert();\n    }\n}\n\n// File: contracts/WorkspaceFactory.sol\n\n/**\n * @title WorkspaceFactory contract.\n * @notice This contract can generate Workspaces and connect them with Foundation.\n * @author Talao, Polynomial, Slowsense, Blockchain Partner.\n */\n\ncontract WorkspaceFactory is OwnableUpdated {\n\n    // Foundation contract.\n    Foundation foundation;\n\n    // Talao token contract.\n    TalaoToken public token;\n\n    /**\n     * @dev Constructor.\n     */\n    constructor(address _foundation, address _token) public {\n        foundation = Foundation(_foundation);\n        token = TalaoToken(_token);\n    }\n\n    /**\n     * @dev Create a Workspace contract.\n     */\n    function createWorkspace (\n        uint16 _category,\n        uint16 _asymetricEncryptionAlgorithm,\n        uint16 _symetricEncryptionAlgorithm,\n        bytes _asymetricEncryptionPublicKey,\n        bytes _symetricEncryptionEncryptedKey,\n        bytes _encryptedSecret,\n        bytes _email\n    )\n        external\n        returns (address)\n    {\n        // Sender must have access to his Vault in the Token.\n        require(\n            token.hasVaultAccess(msg.sender, msg.sender),\n            \"Sender has no access to Vault\"\n        );\n        require(\n            (\n                _category == 1001 ||\n                _category == 2001 ||\n                _category == 3001 ||\n                _category == 4001 ||\n                _category == 5001\n            ),\n            \"Invalid category\"\n        );\n        // Create contract.\n        Workspace newWorkspace = new Workspace(\n            address(foundation),\n            address(token),\n            _category,\n            _asymetricEncryptionAlgorithm,\n            _symetricEncryptionAlgorithm,\n            _asymetricEncryptionPublicKey,\n            _symetricEncryptionEncryptedKey,\n            _encryptedSecret\n        );\n        // Add the email.\n        // @see https://github.com/ethereum/EIPs/issues/735#issuecomment-450647097\n        newWorkspace.addClaim(101109097105108, 1, msg.sender, \"\", _email, \"\");\n        // Add an ECDSA ERC 725 key for initial owner with MANAGER purpose\n        newWorkspace.addKey(keccak256(abi.encodePacked(msg.sender)), 1, 1);\n        // Remove this factory ERC 725 MANAGER key.\n        newWorkspace.removeKey(keccak256(abi.encodePacked(address(this))), 1);\n        // Set initial owner in Foundation to msg.sender.\n        foundation.setInitialOwnerInFoundation(address(newWorkspace), msg.sender);\n        // Return new contract address.\n        return address(newWorkspace);\n    }\n\n    /**\n     * @dev Prevents accidental sending of ether.\n     */\n    function() public {\n        revert(\"Prevent accidental sending of ether\");\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516040806160a5833981016040819052815160209092015160008054600160a060020a03191633178082559192600160a060020a0392909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a03938416600160a060020a03199182161790915560028054929093169116179055615ff8806100ad6000396000f300608060405260043610620000655763ffffffff60e060020a600035041663715018a68114620001005780638da5cb5b146200011a5780638f32d59b146200014e578063f2fde38b146200017a578063f3a760d5146200019e578063fc0c546a14620001fa575b3480156200007257600080fd5b50604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f50726576656e74206163636964656e74616c2073656e64696e67206f6620657460448201527f6865720000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b3480156200010d57600080fd5b506200011862000212565b005b3480156200012757600080fd5b50620001326200027f565b60408051600160a060020a039092168252519081900360200190f35b3480156200015b57600080fd5b50620001666200028e565b604080519115158252519081900360200190f35b3480156200018757600080fd5b5062000118600160a060020a03600435166200029f565b348015620001ab57600080fd5b50620001326004803561ffff9081169160248035831692604435169160643580830192908201359160843580830192908201359160a43580830192908201359160c435918201910135620002c3565b3480156200020757600080fd5b5062000132620008fa565b6200021c6200028e565b15156200022857600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b620002a96200028e565b1515620002b557600080fd5b620002c08162000909565b50565b600254604080517e6d96e00000000000000000000000000000000000000000000000000000000081523360048201819052602482015290516000928392600160a060020a0390911691626d96e09160448082019260209290919082900301818787803b1580156200033357600080fd5b505af115801562000348573d6000803e3d6000fd5b505050506040513d60208110156200035f57600080fd5b50511515620003cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f53656e64657220686173206e6f2061636365737320746f205661756c74000000604482015290519081900360640190fd5b8c61ffff166103e91480620003e957508c61ffff166107d1145b80620003fa57508c61ffff16610bb9145b806200040b57508c61ffff16610fa1145b806200041c57508c61ffff16611389145b15156200048a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063617465676f727900000000000000000000000000000000604482015290519081900360640190fd5b600154600254600160a060020a0391821691168e8e8e8e8e8e8e8e8e620004b062000987565b600160a060020a03808d1682528b16602082015261ffff808b16604083015289811660608301528816608082015261010060a0820181815290820187905260c0820160e0830161012084018a8a80828437909101858103845288815260200190508888808284379091018581038352868152602001905086868082843782019150509e505050505050505050505050505050604051809103906000f0801580156200055f573d6000803e3d6000fd5b50905080600160a060020a031663b1a34e0d655bf54bd106d460013388886040518663ffffffff1660e060020a0281526004018086815260200185815260200184600160a060020a0316600160a060020a031681526020018060200180602001806020018481038452600081526020016020018481038352868682818152602001925080828437820191505084810382526000815260200160200198505050505050505050602060405180830381600087803b1580156200061f57600080fd5b505af115801562000634573d6000803e3d6000fd5b505050506040513d60208110156200064b57600080fd5b5050604080516c010000000000000000000000003302602082810191909152825180830360140181526034909201928390528151600160a060020a03851693631d3812409392909182918401908083835b60208310620006bd5780518252601f1990920191602091820191016200069c565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a02835260048301526001602483018190526044830152925160648083019650939450929083900301905081600087803b1580156200072d57600080fd5b505af115801562000742573d6000803e3d6000fd5b505050506040513d60208110156200075957600080fd5b5050604080516c010000000000000000000000003002602082810191909152825180830360140181526034909201928390528151600160a060020a038516936353d413c59392909182918401908083835b60208310620007cb5780518252601f199092019160209182019101620007aa565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a028352600483015260016024830152925160448083019650939450929083900301905081600087803b1580156200083457600080fd5b505af115801562000849573d6000803e3d6000fd5b505050506040513d60208110156200086057600080fd5b5050600154604080517fd5c81a05000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301523360248301529151919092169163d5c81a0591604480830192600092919082900301818387803b158015620008d057600080fd5b505af1158015620008e5573d6000803e3d6000fd5b50929f9e505050505050505050505050505050565b600254600160a060020a031681565b600160a060020a03811615156200091f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051615634806200099983390190560060806040523480156200001157600080fd5b50604051620056343803806200563483398101604081815282516020840151828501516060860151608087015160a088015160c089015160e08a01517f30864be5000000000000000000000000000000000000000000000000000000008a52600060048b018190529851979a969995989497939692830195918301949201928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a928a927366d1a905667807f0b86734b4dee3c784e180bbe9926330864be59260248082019391829003018186803b158015620000f857600080fd5b505af41580156200010d573d6000803e3d6000fd5b505060068054600160a060020a0319908116600160a060020a038d811691909117909255600780548216928c1692909217909155600880543392169190911760a060020a61ffff0219167401000000000000000000000000000000000000000061ffff8b8116919091029190911760b060020a61ffff0219167601000000000000000000000000000000000000000000008a8316021760c060020a61ffff02191678010000000000000000000000000000000000000000000000009189169190910217905550508251620001e99060099060208601906200059c565b508151620001ff90600a9060208501906200059c565b5080516200021590600b9060208401906200059c565b50505050505050505087600d60006101000a815481600160a060020a030219169083600160a060020a0316021790555086600760006101000a815481600160a060020a030219169083600160a060020a0316021790555033600860000160006101000a815481600160a060020a030219169083600160a060020a0316021790555085600860000160146101000a81548161ffff021916908361ffff16021790555084600860000160166101000a81548161ffff021916908361ffff16021790555083600860000160186101000a81548161ffff021916908361ffff1602179055508260086001019080519060200190620003119291906200059c565b5081516200032790600a9060208501906200059c565b5080516200033d90600b9060208401906200059c565b50505050505050505087601160006101000a815481600160a060020a030219169083600160a060020a0316021790555086601260006101000a815481600160a060020a030219169083600160a060020a0316021790555033600860000160006101000a815481600160a060020a030219169083600160a060020a0316021790555085600860000160146101000a81548161ffff021916908361ffff16021790555084600860000160166101000a81548161ffff021916908361ffff16021790555083600860000160186101000a81548161ffff021916908361ffff1602179055508260086001019080519060200190620004399291906200059c565b5081516200044f90600a9060208501906200059c565b5080516200046590600b9060208401906200059c565b50505050505050505087601160006101000a815481600160a060020a030219169083600160a060020a0316021790555086601260006101000a815481600160a060020a030219169083600160a060020a0316021790555033600860000160006101000a815481600160a060020a030219169083600160a060020a0316021790555085600860000160146101000a81548161ffff021916908361ffff16021790555084600860000160166101000a81548161ffff021916908361ffff16021790555083600860000160186101000a81548161ffff021916908361ffff1602179055508260086001019080519060200190620005619291906200059c565b5081516200057790600a9060208501906200059c565b5080516200058d90600b9060208401906200059c565b50505050505050505062000641565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005df57805160ff19168380011785556200060f565b828001600101855582156200060f579182015b828111156200060f578251825591602001919060010190620005f2565b506200061d92915062000621565b5090565b6200063e91905b808211156200061d576000815560010162000628565b90565b614fe380620006516000396000f3006080604052600436106102375763ffffffff60e060020a600035041663018f2da18114610249578063023e16f31461027257806308524d891461029457806312aaac70146102c157806317721bdb1461033a5780631ca882e01461045c5780631d381240146104b257806321c148f0146104d057806328c51e06146106135780633f9b250a1461062b578063491a06761461071b5780634dcc7396146107365780634eee424a1461089157806353d413c5146108a957806354bdbb6b146108c45780635ad078c9146108d95780635da601fd146108fa5780635e8c2aa61461091a57806361b2e53b1461093b5780636b8f4613146109a0578063747442d3146109cd5780637b935c20146109ea57806380d93864146109ff57806380e9e9e114610a4957806383c23d0614610a615780638af1d76b14610a765780638f0b676a14610a8b5780639010f72614610ad957806392afc61014610af1578063984bdb3714610b06578063a0fb149714610b32578063a477949814610b4a578063a679e9ae14610c16578063a7d742ba14610c3a578063a8717a0d14610c5b578063ae4936cb14610d4e578063b1a34e0d14610d63578063b61d27f614610e4b578063c222008a14610eb4578063c4e23a1c14610ecc578063c5573ec814610ee1578063c9100bcb14610f02578063d02982cf14611085578063d202158d1461109a578063ec7ed53b146110b5578063edec6f26146110d6578063ef2d8700146110fe578063fb307b3414611113578063fc0c546a1461112b575b34801561024357600080fd5b50600080fd5b34801561025557600080fd5b5061025e61115c565b604080519115158252519081900360200190f35b34801561027e57600080fd5b506102926004803560248101910135611215565b005b3480156102a057600080fd5b5061029260048035600160a060020a031690602480359081019101356112fb565b3480156102cd57600080fd5b506102d960043561162e565b60408051602080820185905291810183905260608082528551908201528451909182916080830191878101910280838360005b8381101561032457818101518382015260200161030c565b5050505090500194505050505060405180910390f35b34801561034657600080fd5b5061035b600160a060020a0360043516611747565b604051808681526020018581526020018464ffffffffff1664ffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156103bc5781810151838201526020016103a4565b50505050905090810190601f1680156103e95780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561041c578181015183820152602001610404565b50505050905090810190601f1680156104495780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561046857600080fd5b506104a061ffff6004803582169160248035821692604435926064358116926084359081019201359060a43515159060c43516611a40565b60408051918252519081900360200190f35b3480156104be57600080fd5b5061025e600435602435604435611d0c565b3480156104dc57600080fd5b506040805160206004803580820135838102808601850190965280855261029295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611dc29650505050505050565b34801561061f57600080fd5b5061025e600435611fd1565b34801561063757600080fd5b50610643600435612085565b6040805161ffff808c1682528a811660208084019190915264ffffffffff8b1693830193909352600160a060020a03891660608301526080820188905286811660a083015284151560e0830152831661010082015261012060c0820181815286519183019190915285519192909161014084019187019080838360005b838110156106d85781810151838201526020016106c0565b50505050905090810190601f1680156107055780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561072757600080fd5b5061025e6004356024356122a0565b34801561074257600080fd5b5061074b61234e565b6040518088600160a060020a0316600160a060020a031681526020018761ffff1661ffff1681526020018661ffff1661ffff1681526020018561ffff1661ffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156107d25781810151838201526020016107ba565b50505050905090810190601f1680156107ff5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561083257818101518382015260200161081a565b50505050905090810190601f16801561085f5780820380516001836020036101000a031916815260200191505b5084810382528551815285516020918201918701908083836000838110156106d85781810151838201526020016106c0565b34801561089d57600080fd5b5061025e60043561256e565b3480156108b557600080fd5b5061025e60043560243561261a565b3480156108d057600080fd5b5061025e612695565b3480156108e557600080fd5b50610292600160a060020a0360043516612716565b34801561090657600080fd5b5061025e600480356024810191013561278b565b34801561092657600080fd5b50610292600160a060020a03600435166128d6565b34801561094757600080fd5b506109506129c8565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561098c578181015183820152602001610974565b505050509050019250505060405180910390f35b3480156109ac57600080fd5b5061029260048035600160a060020a03169060248035908101910135612a7c565b3480156109d957600080fd5b5061025e6004356024351515612d7d565b3480156109f657600080fd5b506104a0612df9565b348015610a0b57600080fd5b506104a061ffff600480358216916024803582169264ffffffffff6044351692606435926084359091169160a43591820191013560c4351515612dff565b348015610a5557600080fd5b50610950600435612eb9565b348015610a6d57600080fd5b506104a0612f1c565b348015610a8257600080fd5b5061025e61305e565b348015610a9757600080fd5b506104a0600480359061ffff6024803582169260443583169264ffffffffff60643516926084359260a4359092169160c43591820191013560e43515156130e9565b348015610ae557600080fd5b506109506004356131ad565b348015610afd57600080fd5b5061029261329b565b348015610b1257600080fd5b506102926024600480358281019290820135918135918201910135613380565b348015610b3e57600080fd5b506102926004356133e9565b348015610b5657600080fd5b50604080516020600480358082013583810280860185019096528085526102929536959394602494938501929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506134469650505050505050565b348015610c2257600080fd5b506102926004803590602480359081019101356135b1565b348015610c4657600080fd5b50610292600160a060020a0360043516613679565b348015610c6757600080fd5b50610c70613b05565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610cb1578181015183820152602001610c99565b50505050905090810190601f168015610cde5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610d11578181015183820152602001610cf9565b50505050905090810190601f168015610d3e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610d5a57600080fd5b5061025e613c7c565b348015610d6f57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526104a0948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750613ea09650505050505050565b348015610e5757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526104a0948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506140979650505050505050565b348015610ec057600080fd5b50610292600435614178565b348015610ed857600080fd5b5061025e614303565b348015610eed57600080fd5b50610292600160a060020a03600435166143b4565b348015610f0e57600080fd5b50610f1a600435614426565b6040518087815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610f83578181015183820152602001610f6b565b50505050905090810190601f168015610fb05780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610fe3578181015183820152602001610fcb565b50505050905090810190601f1680156110105780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561104357818101518382015260200161102b565b50505050905090810190601f1680156110705780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561109157600080fd5b5061025e6145db565b3480156110a657600080fd5b5061025e60043560243561466a565b3480156110c157600080fd5b5061025e600160a060020a03600435166146e5565b3480156110e257600080fd5b50610292600480359060248035916044359182019101356146fa565b34801561110a57600080fd5b506109506147cb565b34801561111f57600080fd5b5061095060043561486f565b34801561113757600080fd5b506111406148e2565b60408051600160a060020a039092168252519081900360200190f35b600754600090600160a060020a0316626d96e06111776148f1565b61117f6148f1565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a0316815260200192505050602060405180830381600087803b1580156111e357600080fd5b505af11580156111f7573d6000803e3d6000fd5b505050506040513d602081101561120d57600080fd5b505190505b90565b6001336000908152600e602052604090205460ff16600481111561123557fe5b146112b0576040805160e560020a62461bcd02815260206004820152602260248201527f596f752068617665206e6f20617574686f72697a656420706172746e6572736860448201527f6970000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600e602052604090206112cd906001018383614dc7565b506040517f02d5877e69cb2f3f36c2aaf0a7b86a3158a4181fe0226d4fe1e4eb006774f43f90600090a15050565b6000600161130881611fd1565b151561134c576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6002600160a060020a0386166000908152600e602052604090205460ff16600481111561137557fe5b146113ca576040805160e560020a62461bcd02815260206004820152601b60248201527f506172746e657273686970206d7573742062652050656e64696e670000000000604482015290519081900360640190fd5b600160a060020a038581166000818152600e602090815260408083208054600160ff199091161765ffffffffff0019166101004264ffffffffff1602179055600d54815160e060020a632ba06e670281526004810195909552905161150f959190911693632ba06e679360248083019493928390030190829087803b15801561145257600080fd5b505af1158015611466573d6000803e3d6000fd5b505050506040513d602081101561147c57600080fd5b505160408051600160a060020a03909216606060020a0260208084019190915281516014818503018152603490930191829052825182918401908083835b602083106114d95780518252601f1990920191602091820191016114ba565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060036001611d0c565b50611579856040516020018082600160a060020a0316600160a060020a0316606060020a028152601401915050604051602081830303815290604052604051808280519060200190808383602083106114d95780518252601f1990920191602091820191016114ba565b5060105461158e90600163ffffffff61494016565b6010556040517f023e16f300000000000000000000000000000000000000000000000000000000815260206004820190815260248201859052869350600160a060020a0384169163023e16f3918791879190819060440184848082843782019150509350505050600060405180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b505050505050505050565b604080517fb01a9fb30000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905291516060929182917366d1a905667807f0b86734b4dee3c784e180bbe99163b01a9fb39160448083019286929190829003018186803b1580156116a757600080fd5b505af41580156116bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260608110156116e457600080fd5b8101908080516401000000008111156116fc57600080fd5b8201602081018481111561170f57600080fd5b815185602082028301116401000000008211171561172c57600080fd5b50506020820151604090920151909891975095509350505050565b600080600060608060006060614e2361175f81611fd1565b15156117a3576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b88600160a060020a0316634dcc73966040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156117e157600080fd5b505af11580156117f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561181e57600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561185457600080fd5b8201602081018481111561186757600080fd5b815164010000000081118282018710171561188157600080fd5b5050929190602001805164010000000081111561189d57600080fd5b820160208101848111156118b057600080fd5b81516401000000008111828201871017156118ca57600080fd5b505092919060200180516401000000008111156118e657600080fd5b820160208101848111156118f957600080fd5b815164010000000081118282018710171561191357600080fd5b505092919050505050509550505093505082600e60008b600160a060020a0316600160a060020a0316815260200190815260200160002060000160009054906101000a900460ff16600481111561196657fe5b600160a060020a038b166000908152600e6020908152604091829020805460019182018054855160026101009583161586026000190190921691909104601f810186900486028201860190965285815261ffff97909716969290910464ffffffffff16938893919291839190830182828015611a235780601f106119f857610100808354040283529160200191611a23565b820191906000526020600020905b815481529060010190602001808311611a0657829003601f168201915b505050505090509750975097509750975050505091939590929450565b6011546040805160e360020a631e78cfe902815233600482015290516000928392611b5392600160a060020a039092169163f3c67f489160248082019260209290919082900301818887803b158015611a9857600080fd5b505af1158015611aac573d6000803e3d6000fd5b505050506040513d6020811015611ac257600080fd5b505160408051600160a060020a03909216606060020a0260208084019190915281516014818503018152603490930191829052825182918401908083835b60208310611b1f5780518252601f199092019160209182019101611b00565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600361466a565b8015611b625750611b6261115c565b8015611b74575061ea608a61ffff1610155b1515611b7f57600080fd5b6011546040805160e360020a631e78cfe90281523360048201529051611c3e928d928d92600092600160a060020a03169163f3c67f4891602480830192602092919082900301818787803b158015611bd657600080fd5b505af1158015611bea573d6000803e3d6000fd5b505050506040513d6020811015611c0057600080fd5b5051604080516020601f8d018190048102820181019092528b81528e918e91908e908e90819084018382808284378201915050505050508b8b614956565b6011546040805160e360020a631e78cfe90281523360048201529051929350600160a060020a039091169163f3c67f48916024808201926020929091908290030181600087803b158015611c9157600080fd5b505af1158015611ca5573d6000803e3d6000fd5b505050506040513d6020811015611cbb57600080fd5b5051604080518381529051600160a060020a03909216918a917f36b518fed88ed88d56e6197f8ca72f326d86ff0612dc364838d93c4d5daab5a9919081900360200190a39998505050505050505050565b604080517f5d601c3a00000000000000000000000000000000000000000000000000000000815260006004820181905260248201869052604482018590526064820184905291517366d1a905667807f0b86734b4dee3c784e180bbe991635d601c3a916084808301926020929190829003018186803b158015611d8e57600080fd5b505af4158015611da2573d6000803e3d6000fd5b505050506040513d6020811015611db857600080fd5b5051949350505050565b734cbfa8c91e8e5ed0ea9d86127806435a6d5c067263428e59ee6000600488888888886040518863ffffffff1660e060020a02815260040180888152602001878152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015611e53578181015183820152602001611e3b565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015611e92578181015183820152602001611e7a565b50505050905001868103845289818151815260200191508051906020019080838360005b83811015611ece578181015183820152602001611eb6565b50505050905090810190601f168015611efb5780820380516001836020036101000a031916815260200191505b5086810383528851815288516020918201918a019080838360005b83811015611f2e578181015183820152602001611f16565b50505050905090810190601f168015611f5b5780820380516001836020036101000a031916815260200191505b508681038252875181528751602091820191808a01910280838360005b83811015611f90578181015183820152602001611f78565b505050509050019c5050505050505050505050505060006040518083038186803b158015611fbd57600080fd5b505af4158015611623573d6000803e3d6000fd5b6000612070336040516020018082600160a060020a0316600160a060020a0316606060020a0281526014019150506040516020818303038152906040526040518082805190602001908083835b6020831061203d5780518252601f19909201916020918201910161201e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208361466a565b801561207f575061207f61115c565b92915050565b600080600080600080606060008061209b614e41565b6120a3613c7c565b15156120e7576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b60008b815260156020908152604091829020825161016081018452815460ff8082161515835261010080830490911615158386015261ffff6201000083048116848801526401000000008304811660608501526601000000000000830481166080850152680100000000000000008304811660a08501526a010000000000000000000083041660c0840152600160a060020a03606060020a9092049190911660e08301526001808401548284015260028085015464ffffffffff166101208501526003850180548851601f94821615909502600019011691909104918201869004860283018601909652808252919492936101408601939192908301828280156122325780601f1061220757610100808354040283529160200191612232565b820191906000526020600020905b81548152906001019060200180831161221557829003601f168201915b50505050508152505090508060000151151561224d57600080fd5b806060015181608001518261012001518360e001518461010001518560c0015186610140015187602001518860a00151829250995099509950995099509950995099509950509193959799909294969850565b604080517fabefd8e7000000000000000000000000000000000000000000000000000000008152600060048201819052602482018590526044820184905291517366d1a905667807f0b86734b4dee3c784e180bbe99163abefd8e7916064808301926020929190829003018186803b15801561231b57600080fd5b505af415801561232f573d6000803e3d6000fd5b505050506040513d602081101561234557600080fd5b50519392505050565b600880546009805460408051602060026101006001861615026000190190941693909304601f8101849004840282018401909252818152600160a060020a0385169574010000000000000000000000000000000000000000860461ffff908116967601000000000000000000000000000000000000000000008104821696780100000000000000000000000000000000000000000000000090910490911694919390918301828280156124425780601f1061241757610100808354040283529160200191612442565b820191906000526020600020905b81548152906001019060200180831161242557829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156124d45780601f106124a9576101008083540402835291602001916124d4565b820191906000526020600020905b8154815290600101906020018083116124b757829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156125645780601f1061253957610100808354040283529160200191612564565b820191906000526020600020905b81548152906001019060200180831161254757829003601f168201915b5050505050905087565b604080517f5c02fae1000000000000000000000000000000000000000000000000000000008152600060048281018290526024830152604482018490529151734cbfa8c91e8e5ed0ea9d86127806435a6d5c067291635c02fae1916064808301926020929190829003018186803b1580156125e857600080fd5b505af41580156125fc573d6000803e3d6000fd5b505050506040513d602081101561261257600080fd5b505192915050565b604080517f3f47616d000000000000000000000000000000000000000000000000000000008152600060048201819052602482018590526044820184905291517366d1a905667807f0b86734b4dee3c784e180bbe991633f47616d916064808301926020929190829003018186803b15801561231b57600080fd5b600061269f614b5a565b80156127115750600754604080517e6d96e0000000000000000000000000000000000000000000000000000000008152336004820181905260248201529051600160a060020a0390921691626d96e0916044808201926020929091908290030181600087803b1580156111e357600080fd5b905090565b614e2461272281611fd1565b1515612766576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b50600160a060020a03166000908152600c60205260409020805460ff19166001179055565b600080336000908152600e602052604090205460ff1660048111156127ac57fe5b14806127d557506004336000908152600e602052604090205460ff1660048111156127d357fe5b145b15156127e057600080fd5b336000908152600e602052604081205460ff1660048111156127fe57fe5b141561287b57600f8054600181019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180543373ffffffffffffffffffffffffffffffffffffffff1990911681179091556000908152600e60205260409020805465ffffffffff0019166101004264ffffffffff16021790555b336000908152600e60205260409020805460ff191660021781556128a3906001018484614dc7565b506040517f0d2494fa9d986b19f5bdb30578b098459e79b21b39c38f53775fd34657d868c090600090a150600192915050565b60016128e181611fd1565b1515612925576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6002600160a060020a0383166000908152600e602052604090205460ff16600481111561294e57fe5b146129a3576040805160e560020a62461bcd02815260206004820152601760248201527f506172746e6572206d7573742062652050656e64696e67000000000000000000604482015290519081900360640190fd5b50600160a060020a03166000908152600e60205260409020805460ff19166003179055565b6060614e236129d681611fd1565b1515612a1a576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b600f805480602002602001604051908101604052809291908181526020018280548015612a7057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612a52575b505050505091505b5090565b6000806001612a8a81611fd1565b1515612ace576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b600160a060020a0386166000908152600e602052604081205460ff166004811115612af557fe5b1480612b2757506004600160a060020a0387166000908152600e602052604090205460ff166004811115612b2557fe5b145b1515612b3257600080fd5b6040517f5da601fd00000000000000000000000000000000000000000000000000000000815260206004820190815260248201869052879450600160a060020a03851691635da601fd918891889190819060440184848082843782019150509350505050602060405180830381600087803b158015612bb057600080fd5b505af1158015612bc4573d6000803e3d6000fd5b505050506040513d6020811015612bda57600080fd5b505191508115612d7557600160a060020a0386166000908152600e602052604081205460ff166004811115612c0b57fe5b1415612c6a57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b600160a060020a038681166000818152600e602090815260408083208054600160ff199091161765ffffffffff0019166101004264ffffffffff1602179055600d54815160e060020a632ba06e6702815260048101959095529051612cf2959190911693632ba06e679360248083019493928390030190829087803b15801561145257600080fd5b50612d5c866040516020018082600160a060020a0316600160a060020a0316606060020a028152601401915050604051602081830303815290604052604051808280519060200190808383602083106114d95780518252601f1990920191602091820191016114ba565b50601054612d7190600163ffffffff61494016565b6010555b505050505050565b604080517f67d4865f00000000000000000000000000000000000000000000000000000000815260006004820181905260248201859052831515604483015291517366d1a905667807f0b86734b4dee3c784e180bbe9916367d4865f916064808301926020929190829003018186803b15801561231b57600080fd5b60105481565b6000614e22612e0d81611fd1565b1515612e51576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b61ea6061ffff8b1610612e6357600080fd5b612ea78a8a8a338b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508a6000614956565b50506017549998505050505050505050565b600081815260056020908152604091829020805483518184028101840190945280845260609392830182828015612f1057602002820191906000526020600020905b81548152600190910190602001808311612efb575b50505050509050919050565b600d546040805160e360020a631e78cfe902815233600482015290516000928392600160a060020a039091169163f3c67f489160248082019260209290919082900301818787803b158015612f7057600080fd5b505af1158015612f84573d6000803e3d6000fd5b505050506040513d6020811015612f9a57600080fd5b5051600160a060020a03161415612fb55760005b9050611212565b600d546040805160e360020a631e78cfe90281523360048201529051600e92600092600160a060020a039091169163f3c67f489160248082019260209290919082900301818787803b15801561300a57600080fd5b505af115801561301e573d6000803e3d6000fd5b505050506040513d602081101561303457600080fd5b5051600160a060020a0316815260208101919091526040016000205460ff166004811115612fae57fe5b60006001336000908152600e602052604090205460ff16600481111561308057fe5b14156130c957336000908152600e60205260408120805465ffffffffff00191681556130b191600190910190614e9f565b6010546130c590600163ffffffff614b7d16565b6010555b50336000908152600e60205260409020805460ff19166004179055600190565b6000614e226130f781611fd1565b151561313b576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b61ea6061ffff8b161061314d57600080fd5b6131568b614b8f565b61319a8a8a8a338b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508a6000614956565b50506017549a9950505050505050505050565b60607366d1a905667807f0b86734b4dee3c784e180bbe963746199f96000846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060006040518083038186803b15801561320a57600080fd5b505af415801561321e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561324757600080fd5b81019080805164010000000081111561325f57600080fd5b8201602081018481111561327257600080fd5b815185602082028301116401000000008211171561328f57600080fd5b50909695505050505050565b6132a3614b5a565b15156132e7576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6132ef614cbd565b80156133765750601160009054906101000a9004600160a060020a0316600160a060020a0316638f2691cc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561334957600080fd5b505af115801561335d573d6000803e3d6000fd5b505050506040513d602081101561337357600080fd5b50515b1561337e5733ff5b565b614e2261338c81611fd1565b15156133d0576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6133dc60138686614dc7565b50612d7560148484614dc7565b614e226133f581611fd1565b1515613439576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b61344282614b8f565b5050565b734cbfa8c91e8e5ed0ea9d86127806435a6d5c067263e4832fc6600060048686866040518663ffffffff1660e060020a02815260040180868152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156134cd5781810151838201526020016134b5565b50505050905001848103835286818151815260200191508051906020019080838360005b838110156135095781810151838201526020016134f1565b50505050905090810190601f1680156135365780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b8381101561356b578181015183820152602001613553565b505050509050019850505050505050505060006040518083038186803b15801561359457600080fd5b505af41580156135a8573d6000803e3d6000fd5b50505050505050565b336000908152600c602052604090205460ff1615613619576040805160e560020a62461bcd02815260206004820152601360248201527f596f752061726520626c61636b6c697374656400000000000000000000000000604482015290519081900360640190fd5b8233600160a060020a03167f05150cb7936a26705cc0a79475d44bb1a6dc530605fbaab1a7a86a162b66222884846040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a3505050565b600080600161368781611fd1565b15156136cb576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6001600160a060020a0385166000908152600e602052604090205460ff1660048111156136f457fe5b148061372657506003600160a060020a0385166000908152600e602052604090205460ff16600481111561372457fe5b145b15156137a2576040805160e560020a62461bcd02815260206004820152602a60248201527f506172746e657273686970206d75737420626520417574686f72697a6564206f60448201527f722052656a656374656400000000000000000000000000000000000000000000606482015290519081900360840190fd5b83925082600160a060020a0316638af1d76b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156137e357600080fd5b505af11580156137f7573d6000803e3d6000fd5b505050506040513d602081101561380d57600080fd5b505191508115613aff576001600160a060020a0385166000908152600e602052604090205460ff16600481111561384057fe5b141561389257600160a060020a0384166000908152600e60205260408120805465ffffffffff001916815561387a91600190910190614e9f565b60105461388e90600163ffffffff614b7d16565b6010555b600d546040805160e060020a632ba06e67028152600160a060020a03878116600483015291516138e9939290921691632ba06e67916024808201926020929091908290030181600087803b158015611a9857600080fd5b15613a0257600d546040805160e060020a632ba06e67028152600160a060020a0387811660048301529151613a00939290921691632ba06e67916024808201926020929091908290030181600087803b15801561394557600080fd5b505af1158015613959573d6000803e3d6000fd5b505050506040513d602081101561396f57600080fd5b505160408051600160a060020a03909216606060020a0260208084019190915281516014818503018152603490930191829052825182918401908083835b602083106139cc5780518252601f1990920191602091820191016139ad565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600361261a565b505b613a6b846040516020018082600160a060020a0316600160a060020a0316606060020a02815260140191505060405160208183030381529060405260405180828051906020019080838360208310611b1f5780518252601f199092019160209182019101611b00565b15613adb57613ad9846040516020018082600160a060020a0316600160a060020a0316606060020a028152601401915050604051602081830303815290604052604051808280519060200190808383602083106139cc5780518252601f1990920191602091820191016139ad565b505b600160a060020a0384166000908152600e60205260409020805460ff191660041790555b50505050565b606080613b10613c7c565b1515613b54576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6013805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815260149290918491830182828015613bdf5780601f10613bb457610100808354040283529160200191613bdf565b820191906000526020600020905b815481529060010190602001808311613bc257829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015613c6d5780601f10613c4257610100808354040283529160200191613c6d565b820191906000526020600020905b815481529060010190602001808311613c5057829003601f168201915b50505050509050915091509091565b6012546000908190600160a060020a031663b90d3d0c613c9a6148f1565b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050608060405180830381600087803b158015613ce557600080fd5b505af1158015613cf9573d6000803e3d6000fd5b505050506040513d6080811015613d0f57600080fd5b5051601254909150600160a060020a0316626d96e0613d2c6148f1565b6040805160e060020a63ffffffff8516028152600160a060020a0390921660048301523360248301525160448083019260209291908290030181600087803b158015613d7757600080fd5b505af1158015613d8b573d6000803e3d6000fd5b505050506040513d6020811015613da157600080fd5b505180613e9a5750601254600160a060020a0316626d96e0613dc16148f1565b613dc96148f1565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a0316815260200192505050602060405180830381600087803b158015613e2d57600080fd5b505af1158015613e41573d6000803e3d6000fd5b505050506040513d6020811015613e5757600080fd5b50518015613e9a5750613e686145db565b80613e765750613e76614303565b80613e875750613e87614e21611fd1565b80613e9a575080158015613e9a57503315155b91505090565b6000734cbfa8c91e8e5ed0ea9d86127806435a6d5c067263bd2d0c28600060048a8a8a8a8a8a6040518963ffffffff1660e060020a0281526004018089815260200188815260200187815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015613f4d578181015183820152602001613f35565b50505050905090810190601f168015613f7a5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613fad578181015183820152602001613f95565b50505050905090810190601f168015613fda5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561400d578181015183820152602001613ff5565b50505050905090810190601f16801561403a5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b15801561406057600080fd5b505af4158015614074573d6000803e3d6000fd5b505050506040513d602081101561408a57600080fd5b5051979650505050505050565b60007366d1a905667807f0b86734b4dee3c784e180bbe963e9356c6f60008686866040518563ffffffff1660e060020a0281526004018085815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561412b578181015183820152602001614113565b50505050905090810190601f1680156141585780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b158015611d8e57600080fd5b6000614e2261418681611fd1565b15156141ca576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b6000838152601560205260409020805490925060ff161580156141fd5750815461ea6064010000000090910461ffff1610155b151561420857600080fd5b6016805460018181018084556000939093527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289909101859055614251919063ffffffff614b7d16565b8254600163ffff0000199091166201000061ffff938416021760ff1916178084556801000000000000000090041660009081526015602052604090205460ff16156142b15781546142b19068010000000000000000900461ffff16614b8f565b81546001830154604080518681529051606060020a909304600160a060020a0316927f47324225634f28f9dce66d27f63808da9fdf4d1c1b6e518122bf040f41e99c5e916020908290030190a3505050565b600d546040805160e360020a631e78cfe90281523360048201529051600092600192600e928592600160a060020a03169163f3c67f4891602480830192602092919082900301818787803b15801561435a57600080fd5b505af115801561436e573d6000803e3d6000fd5b505050506040513d602081101561438457600080fd5b5051600160a060020a0316815260208101919091526040016000205460ff1660048111156143ae57fe5b14905090565b614e246143c081611fd1565b1515614404576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b50600160a060020a03166000908152600c60205260409020805460ff19169055565b60008060006060806060734cbfa8c91e8e5ed0ea9d86127806435a6d5c0672638522d0eb6004896040518363ffffffff1660e060020a0281526004018083815260200182600019166000191681526020019250505060006040518083038186803b15801561449357600080fd5b505af41580156144a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c08110156144d057600080fd5b81516020830151604084015160608501805193959294919391830192916401000000008111156144ff57600080fd5b8201602081018481111561451257600080fd5b815164010000000081118282018710171561452c57600080fd5b5050929190602001805164010000000081111561454857600080fd5b8201602081018481111561455b57600080fd5b815164010000000081118282018710171561457557600080fd5b5050929190602001805164010000000081111561459157600080fd5b820160208101848111156145a457600080fd5b81516401000000008111828201871017156145be57600080fd5b505092919050505095509550955095509550955091939550919395565b6011546040805160e360020a631e78cfe902815233600482015290516000923092600160a060020a039091169163f3c67f489160248082019260209290919082900301818887803b15801561462f57600080fd5b505af1158015614643573d6000803e3d6000fd5b505050506040513d602081101561465957600080fd5b5051600160a060020a031614905090565b604080517fd8188a40000000000000000000000000000000000000000000000000000000008152600060048201819052602482018590526044820184905291517366d1a905667807f0b86734b4dee3c784e180bbe99163d8188a40916064808301926020929190829003018186803b15801561231b57600080fd5b600c6020526000908152604090205460ff1681565b336000908152600c602052604090205460ff1615614762576040805160e560020a62461bcd02815260206004820152601360248201527f596f752061726520626c61636b6c697374656400000000000000000000000000604482015290519081900360640190fd5b8333600160a060020a03167f32f8dc42e98366985a87dcc6a8c1d94974eb112f58c75ef95901be58cf266a3d858585604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a350505050565b60606147d5613c7c565b1515614819576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020614f98833981519152604482015290519081900360640190fd5b601680548060200260200160405190810160405280929190818152602001828054801561486557602002820191906000526020600020905b815481526020019060010190808311614851575b5050505050905090565b604080517f0f982bac0000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905291516060927366d1a905667807f0b86734b4dee3c784e180bbe992630f982bac9260448083019392829003018186803b15801561320a57600080fd5b601254600160a060020a031681565b6006546040805160e060020a632ba06e670281523060048201529051600092600160a060020a031691632ba06e6791602480830192602092919082900301818787803b1580156111e357600080fd5b60008282018381101561494f57fe5b9392505050565b60008061496f600160175461494090919063ffffffff16565b60178190556000908152601560205260409020905061ea6061ffff8c16106149b857805469ffff000000000000000019166801000000000000000061ffff851602178155614a26565b6017546016805460018181018084556000939093527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428990910192909255614a049163ffffffff614b7d16565b815460ff1961ffff92909216620100000263ffff000019909116171660011781555b838160000160016101000a81548160ff0219169083151502179055508a8160000160046101000a81548161ffff021916908361ffff160217905550898160000160066101000a81548161ffff021916908361ffff160217905550888160020160006101000a81548164ffffffffff021916908364ffffffffff1602179055508581600001600a6101000a81548161ffff021916908361ffff1602179055508781600001600c6101000a815481600160a060020a030219169083600160a060020a031602179055508681600101816000191690555084816003019080519060200190614b12929190614ee6565b5060175460408051918252517f1436ef0a63d102072b70744adedc4e9c88487529e51f8624fc3ab50904472f1e9181900360200190a150506017549998505050505050505050565b6000614b646148f1565b600160a060020a031633600160a060020a031614905090565b600082821115614b8957fe5b50900390565b60008181526015602052604081209080808411614bab57600080fd5b825460ff161515614bbb57600080fd5b601654614bcf90600163ffffffff614b7d16565b835462010000900461ffff161015614c685760168054614bf690600163ffffffff614b7d16565b81548110614c0057fe5b6000918252602080832091909101548083526015909152604090912084546016805493955091935084926201000090910461ffff16908110614c3e57fe5b6000918252602090912001558254815463ffff00001916620100009182900461ffff169091021781555b6016805490614c7b906000198301614f54565b50825460ff191683556040805185815290517f480c8c4f142c9ceb3d0b0d7675300f10573a6cd66fca3390578e7851815464599181900360200190a150505050565b600080805b600f54821015614dbe576001600e6000600f85815481101515614ce157fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff166004811115614d1457fe5b1415614db357600f805483908110614d2857fe5b9060005260206000200160009054906101000a9004600160a060020a0316905080600160a060020a0316638af1d76b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015614d8657600080fd5b505af1158015614d9a573d6000803e3d6000fd5b505050506040513d6020811015614db057600080fd5b50505b600190910190614cc2565b60019250505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614e085782800160ff19823516178555614e35565b82800160010185558215614e35579182015b82811115614e35578235825591602001919060010190614e1a565b50612a78929150614f7d565b604080516101608101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082019290925261014081019190915290565b50805460018160011615610100020316600290046000825580601f10614ec55750614ee3565b601f016020900490600052602060002090810190614ee39190614f7d565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614f2757805160ff1916838001178555614e35565b82800160010185558215614e35579182015b82811115614e35578251825591602001919060010190614f39565b815481835581811115614f7857600083815260209020614f78918101908301614f7d565b505050565b61121291905b80821115612a785760008155600101614f8356004163636573732064656e69656400000000000000000000000000000000000000a165627a7a723058204a4b28318aae76d1a236bd3d56df9bcb9335af8caa35001e2a38845ee8e910e30029a165627a7a723058200f464fa14a96d60ae79a568084c8a7095c022b50168818c718fdecca6a3aa58b0029000000000000000000000000d46883ddff92cc0474255f2f8134c63f8209171d0000000000000000000000001d4ccc31dab6ea20f461d329a0562c1c58412515",
  "constructorArguments": "000000000000000000000000d46883ddff92cc0474255f2f8134c63f8209171d0000000000000000000000001d4ccc31dab6ea20f461d329a0562c1c58412515",
  "libraries": [
    {
      "name": "KeyHolderLibrary",
      "address": "0x66d1a905667807f0b86734b4dee3c784e180bbe9"
    },
    {
      "name": "ClaimHolderLibrary",
      "address": "0x4cbfa8c91e8e5ed0ea9d86127806435a6d5c0672"
    }
  ]
}