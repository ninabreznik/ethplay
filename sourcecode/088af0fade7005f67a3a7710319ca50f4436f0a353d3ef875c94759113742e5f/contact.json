{
  "address": "0xdd9b2703ed5338df73d81e07980c349eb5210a08",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title ERC20\n * @dev ERC20 interface\n */\ncontract ERC20 {\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n\n/**\n * @title MiniMe interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20MiniMe is ERC20, Controlled {\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool);\n    function totalSupply() public constant returns (uint);\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint);\n    function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled) public returns(address);\n    function generateTokens(address _owner, uint _amount) public returns (bool);\n    function destroyTokens(address _owner, uint _amount)  public returns (bool);\n    function enableTransfers(bool _transfersEnabled) public;\n    function isContract(address _addr) constant internal returns(bool);\n    function claimTokens(address _token) public;\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Etheal TokenVesting for Advisors\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20MiniMe token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    require(token.transfer(beneficiary, unreleased));\n\n    Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20MiniMe token which is being vested\n   */\n  function revoke(ERC20MiniMe token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    require(token.transfer(owner, refund));\n\n    Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20MiniMe token which is being vested\n   */\n  function releasableAmount(ERC20MiniMe token) public constant returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20MiniMe token which is being vested\n   */\n  function vestedAmount(ERC20MiniMe token) public constant returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160a08061090f833981016040528080519190602001805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a039081169190911790915590925086161515905061007157600080fd5b8183111561007e57600080fd5b60018054600160a060020a031916600160a060020a0387161790556005805460ff191682151517905560048290556100c384846401000000006100d2810261079b1704565b600255505050600355506100e8565b6000828201838110156100e157fe5b9392505050565b610818806100f76000396000f3006060604052600436106100ab5763ffffffff60e060020a6000350416630fb5a6b481146100b057806313d033c0146100d55780631726cbc8146100e85780631916558714610107578063384711cc1461012857806338af3eed1461014757806374a8f10314610176578063872a7810146101955780638da5cb5b146101bc5780639852595c146101cf578063be9a6555146101ee578063f2fde38b14610201578063fa01dc0614610220575b600080fd5b34156100bb57600080fd5b6100c361023f565b60405190815260200160405180910390f35b34156100e057600080fd5b6100c3610245565b34156100f357600080fd5b6100c3600160a060020a036004351661024b565b341561011257600080fd5b610126600160a060020a0360043516610283565b005b341561013357600080fd5b6100c3600160a060020a036004351661039c565b341561015257600080fd5b61015a6104dd565b604051600160a060020a03909116815260200160405180910390f35b341561018157600080fd5b610126600160a060020a03600435166104ec565b34156101a057600080fd5b6101a86106a9565b604051901515815260200160405180910390f35b34156101c757600080fd5b61015a6106b2565b34156101da57600080fd5b6100c3600160a060020a03600435166106c1565b34156101f957600080fd5b6100c36106d3565b341561020c57600080fd5b610126600160a060020a03600435166106d9565b341561022b57600080fd5b6101a8600160a060020a0360043516610774565b60045481565b60025481565b600160a060020a03811660009081526006602052604081205461027d906102718461039c565b9063ffffffff61078916565b92915050565b600061028e8261024b565b90506000811161029d57600080fd5b600160a060020a0382166000908152600660205260409020546102c6908263ffffffff61079b16565b600160a060020a0380841660008181526006602052604080822094909455600154919363a9059cbb939290921691859190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561033f57600080fd5b6102c65a03f1151561035057600080fd5b50505060405180519050151561036557600080fd5b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5658160405190815260200160405180910390a15050565b600080600083600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156103f857600080fd5b6102c65a03f1151561040957600080fd5b5050506040518051600160a060020a03861660009081526006602052604090205490935061043f9150839063ffffffff61079b16565b905060025442101561045457600092506104d6565b6004546003546104699163ffffffff61079b16565b4210158061048f5750600160a060020a03841660009081526007602052604090205460ff165b1561049c578092506104d6565b6104d36004546104c76104ba6003544261078990919063ffffffff16565b849063ffffffff6107b116565b9063ffffffff6107d516565b92505b5050919050565b600154600160a060020a031681565b600080548190819033600160a060020a0390811691161461050c57600080fd5b60055460ff16151561051d57600080fd5b600160a060020a03841660009081526007602052604090205460ff161561054357600080fd5b83600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561059a57600080fd5b6102c65a03f115156105ab57600080fd5b5050506040518051905092506105c08461024b565b91506105d2838363ffffffff61078916565b600160a060020a03808616600081815260076020526040808220805460ff191660011790558154949550919363a9059cbb931691859190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561065157600080fd5b6102c65a03f1151561066257600080fd5b50505060405180519050151561067757600080fd5b7f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a150505050565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60035481565b60005433600160a060020a039081169116146106f457600080fd5b600160a060020a038116151561070957600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60076020526000908152604090205460ff1681565b60008282111561079557fe5b50900390565b6000828201838110156107aa57fe5b9392505050565b60008282028315806107cd57508284828115156107ca57fe5b04145b15156107aa57fe5b60008082848115156107e357fe5b049493505050505600a165627a7a7230582009649e1f374e51bd346858160f9ce8785feb3bfeb10e4f09b72214fac4485c0e0029000000000000000000000000dd3914e3c30521b1cac0db3a269079eadba4f96e000000000000000000000000000000000000000000000000000000005b53c900000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "000000000000000000000000dd3914e3c30521b1cac0db3a269079eadba4f96e000000000000000000000000000000000000000000000000000000005b53c900000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000000000001"
}