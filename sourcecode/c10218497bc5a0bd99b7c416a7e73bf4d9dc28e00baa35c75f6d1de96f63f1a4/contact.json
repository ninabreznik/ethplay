{
  "address": "0x0c963a1b52eb97c5e457c7d76696f8b95c3087ed",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokoinToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     **/\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     **/\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    \n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     **/\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    /**\n     * @dev Adds two numbers, throws on overflow.\n     **/\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n **/\n \ncontract Ownable {\n    address payable public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n     **/\n   constructor() public {\n      owner = msg.sender;\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     **/\n    modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n    \n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     **/\n    function transferOwnership(address payable newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n}\n\n/* @title ControlledAccess\n * @dev The ControlledAccess contract allows function to be restricted to users\n * that possess a signed authorization from the owner of the contract. This signed\n * message includes the user to give permission to and the contract address to prevent\n * reusing the same authorization message on different contract with same owner. \n */\n\n/**\n * @title ERC20Basic interface\n * @dev Basic ERC20 interface\n **/\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n **/\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n\n  event Vested(address beneficiary, uint256 amount);\n  event Released(address beneficiary, uint256 amount);\n\n  struct Balance {\n      uint256 value;\n      uint256 start;\n      uint256 currentPeriod;\n  }\n\n  mapping(address => Balance) private balances;\n  mapping (address => uint256) private released;\n  uint256 private period;\n  uint256 private duration;\n  mapping (uint256 => uint256) private percentagePerPeriod;\n\n  constructor() public {\n    owner = msg.sender;\n    period = 4;\n    duration = 7884000;\n    percentagePerPeriod[0] = 15;\n    percentagePerPeriod[1] = 20;\n    percentagePerPeriod[2] = 30;\n    percentagePerPeriod[3] = 35;\n  }\n  \n  function balanceOf(address _owner) public view returns(uint256) {\n      return balances[_owner].value.sub(released[_owner]);\n  }\n    /**\n   * @notice Vesting token to beneficiary but not released yet.\n   * ERC20 token which is being vested\n   */\n  function vesting(address _beneficiary, uint256 _amount) public onlyOwner {\n      if(balances[_beneficiary].start == 0){\n          balances[_beneficiary].start = now;\n      }\n\n      balances[_beneficiary].value = balances[_beneficiary].value.add(_amount);\n      emit Vested(_beneficiary, _amount);\n  }\n  \n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * ERC20 token which is being vested\n   */\n  function release(address _beneficiary) public onlyOwner {\n    require(balances[_beneficiary].currentPeriod.add(1) <= period);\n    require(balances[_beneficiary].value > released[_beneficiary]);\n    require(balances[_beneficiary].start != 0);\n    require(now >= balances[_beneficiary].start.add((balances[_beneficiary].currentPeriod.add(1) * duration)));\n\n    uint256 amountReleasedThisPeriod = balances[_beneficiary].value.mul(percentagePerPeriod[balances[_beneficiary].currentPeriod]);\n    amountReleasedThisPeriod = amountReleasedThisPeriod.div(100);\n    released[_beneficiary] = released[_beneficiary].add(amountReleasedThisPeriod);\n    balances[_beneficiary].currentPeriod = balances[_beneficiary].currentPeriod.add(1);\n\n    BasicToken(owner).transfer(_beneficiary, amountReleasedThisPeriod);\n\n    emit Released(_beneficiary, amountReleasedThisPeriod);\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n **/\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n    \n    /**\n     * @dev total number of tokens in existence\n     **/\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n    \n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     **/\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     **/\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n    mapping (address => mapping (address => uint256)) allowed;\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     **/\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n    \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     **/\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     **/\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     **/\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     **/\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n\n/**\n * @title Configurable\n * @dev Configurable varriables of the contract\n **/\ncontract Configurable {\n    uint256 public constant cap = 2000000000*10**18;\n    uint256 public basePrice = 314815*10**16; // tokens per 1 ether\n    uint256 public tokensSold = 0;\n    uint256 public tokensSoldInICO = 0;\n    uint256 public tokensSoldInPrivateSales = 0;\n    \n    uint256 public constant tokenReserve = 2000000000*10**18;\n    uint256 public constant tokenReserveForICO = 70000000*10**18;\n    uint256 public constant tokenReserveForPrivateSales = 630000000*10**18;\n    uint256 public remainingTokens = 0;\n    uint256 public remainingTokensForICO = 0;\n    uint256 public remainingTokensForPrivateSales = 0;\n\n    uint256 public minTransaction = 1.76 ether;\n    uint256 public maxTransaction = 29.41 ether;\n\n    uint256 public discountUntilSales = 1176.47 ether;\n    uint256 public totalSalesInEther = 0;\n    mapping(address => bool) public buyerGetDiscount;\n}\n\ncontract BurnableToken is BasicToken, Ownable {\n    event Burn(address indexed burner, uint256 value);\n    \n    function burn(uint256 _value) public onlyOwner {\n        _burn(msg.sender, _value);\n      }\n      \n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\n/**\n * @title CrowdsaleToken \n * @dev Contract to preform crowd sale with token\n **/\ncontract CrowdsaleToken is StandardToken, Configurable, BurnableToken  {\n    /**\n     * @dev enum of current crowd sale state\n     **/\n     enum Stages {\n        none,\n        icoStart,\n        icoEnd\n    }\n    \n    bool  public haltedICO = false;\n    Stages currentStage;\n    TokenVesting public tokenVestingContract;\n  \n    /**\n     * @dev constructor of CrowdsaleToken\n     **/\n    constructor() public {\n        currentStage = Stages.none;\n        balances[owner] = balances[owner].add(tokenReserve);\n        totalSupply_ = totalSupply_.add(tokenReserve);\n\n        remainingTokens = cap;\n        remainingTokensForICO = tokenReserveForICO;\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales;\n        tokenVestingContract = new TokenVesting();\n        emit Transfer(address(this), owner, tokenReserve);\n    }\n    \n    /**\n     * @dev fallback function to send ether to for Crowd sale\n     **/\n    function () external payable {\n        \n        require(!haltedICO);\n        require(currentStage == Stages.icoStart);\n        require(msg.value > 0);\n        require(remainingTokensForICO > 0);\n        require(minTransaction <= msg.value);\n        require(maxTransaction >= msg.value);\n        \n        uint256 weiAmount = msg.value; // Calculate tokens to sell\n        uint256 bonusTokens;\n        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\n        uint256 returnWei = 0;\n\n        //Check is discount is valid or not\n        if (totalSalesInEther.add(weiAmount) <= discountUntilSales && !buyerGetDiscount[msg.sender]) {\n            bonusTokens = tokens.div(10);\n\n            totalSalesInEther = totalSalesInEther.add(weiAmount);\n            buyerGetDiscount[msg.sender] = true;\n        }\n        \n        if (tokensSoldInICO.add(tokens.add(bonusTokens)) > tokenReserveForICO) {\n            uint256 newTokens = tokenReserveForICO.sub(tokensSoldInICO);\n            bonusTokens = newTokens.sub(tokens);\n\n            if (bonusTokens <= 0) {\n                bonusTokens = 0;\n            }\n\n            tokens = newTokens.sub(bonusTokens);\n            returnWei = tokens.div(basePrice).div(1 ether);\n        }\n        \n        //Calculate token sold in ICO and remaining token\n        tokensSoldInICO = tokensSoldInICO.add(tokens.add(bonusTokens));\n        remainingTokensForICO = tokenReserveForICO.sub(tokensSoldInICO);\n\n        tokensSold = tokensSold.add(tokens.add(bonusTokens)); // Increment raised amount\n        remainingTokens = cap.sub(tokensSold);\n\n        if(returnWei > 0){\n            msg.sender.transfer(returnWei);\n            emit Transfer(address(this), msg.sender, returnWei);\n        }\n        \n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        balances[owner] = balances[owner].sub(tokens);\n        emit Transfer(address(this), msg.sender, tokens);\n        owner.transfer(weiAmount);// Send money to owner\n    }\n    \n    function sendPrivate(address _to, uint256 _tokens) external payable onlyOwner {\n        require(_to != address(0));\n        require(address(tokenVestingContract) != address(0));\n        require(remainingTokensForPrivateSales > 0);\n        require(tokenReserveForPrivateSales >= tokensSoldInPrivateSales.add(_tokens));\n\n        //Calculate token sold in private sales and remaining token\n        tokensSoldInPrivateSales = tokensSoldInPrivateSales.add(_tokens);\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales.sub(tokensSoldInPrivateSales);\n\n        tokensSold = tokensSold.add(_tokens); // Increment raised amount\n        remainingTokens = cap.sub(tokensSold);\n\n        balances[address(tokenVestingContract)] = balances[address(tokenVestingContract)].add(_tokens);\n        tokenVestingContract.vesting(_to, _tokens);\n\n        balances[owner] = balances[owner].sub(_tokens);\n        emit Transfer(address(this), address(tokenVestingContract), _tokens);\n    }\n\n    function release(address _to) external onlyOwner {\n        tokenVestingContract.release(_to);\n    }\n\n    /**\n     * @dev startIco starts the public ICO\n     **/\n    function startIco() public onlyOwner {\n        require(currentStage != Stages.icoEnd);\n        currentStage = Stages.icoStart;\n    }\n    \n    event icoHalted(address sender);\n    function haltICO() public onlyOwner {\n        haltedICO = true;\n        emit icoHalted(msg.sender);\n    }\n\n    event icoResumed(address sender);\n    function resumeICO() public onlyOwner {\n        haltedICO = false;\n        emit icoResumed(msg.sender);\n    }\n\n    /**\n     * @dev endIco closes down the ICO \n     **/\n    function endIco() internal {\n        currentStage = Stages.icoEnd;\n        // Transfer any remaining tokens\n        if(remainingTokens > 0)\n            balances[owner] = balances[owner].add(remainingTokens);\n        // transfer any remaining ETH balance in the contract to the owner\n        owner.transfer(address(this).balance); \n    }\n\n\n    /**\n     * @dev finalizeIco closes down the ICO and sets needed varriables\n     **/\n    function finalizeIco() public onlyOwner {\n        require(currentStage != Stages.icoEnd);\n        endIco();\n    }\n\n    function setDiscountUntilSales(uint256 _discountUntilSales) public onlyOwner {\n        discountUntilSales = _discountUntilSales;\n    }\n    \n    function setBasePrice(uint256 _basePrice) public onlyOwner {\n        basePrice = _basePrice;\n    }\n\n    function setMinTransaction(uint256 _minTransaction) public onlyOwner {\n        minTransaction = _minTransaction;\n    }\n\n    function setMaxTransaction(uint256 _maxTransaction) public onlyOwner {\n        maxTransaction = _maxTransaction;\n    }\n\n    function addTokenSoldInICO(uint256 _amount) public onlyOwner {\n        tokensSoldInICO = tokensSoldInICO.add(_amount);\n        remainingTokensForICO = tokenReserveForICO.sub(tokensSoldInICO);\n\n        tokensSold = tokensSold.add(_amount);\n        remainingTokens = cap.sub(_amount);\n    }\n\n    function addTokenSoldInPrivateSales(uint256 _amount) public onlyOwner {\n        tokensSoldInPrivateSales = tokensSoldInPrivateSales.add(_amount);\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales.sub(tokensSoldInPrivateSales);\n\n        tokensSold = tokensSold.add(_amount);\n        remainingTokens = cap.sub(_amount);\n    }\n}\n\n/**\n * @title TokoinToken \n * @dev Contract to create the Tokoin Token\n **/\ncontract TokoinToken is CrowdsaleToken {\n    string public constant name = \"Tokoin\";\n    string public constant symbol = \"TOKO\";\n    uint32 public constant decimals = 18;\n}",
  "bytecode": "608060405268aaa95b9162edff000060035560006004556000600555600060065560006007556000600855600060095567186cc6acd4b00000600a55680198254f2ddc3d0000600b55683fc6cd0fcb77cf0000600c556000600d556000600f60146101000a81548160ff02191690831515021790555033600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600f60156101000a81548160ff02191690836002811115620000d657fe5b02179055506200016a6b06765c793fa10079d0000000600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200033e6401000000000262001414179091906401000000009004565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001ff6b06765c793fa10079d00000006001546200033e6401000000000262001414179091906401000000009004565b6001819055506b06765c793fa10079d00000006007819055506a39e7139a8c08fa060000006008819055506b02091fb06eec50ca36000000600981905550620002476200035b565b604051809103906000f08015801562000264573d6000803e3d6000fd5b50601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6b06765c793fa10079d00000006040518082815260200191505060405180910390a36200036c565b600081830190508281101515156200035257fe5b80905092915050565b604051610dba80620036fd83390190565b613381806200037c6000396000f3fe608060405260043610610214576000357c010000000000000000000000000000000000000000000000000000000090048063037b27f91461084757806306fdde031461089e578063095ea7b31461092e5780631247d35e146109a1578063129caa18146109cc57806314ec5673146109e357806318160ddd14610a0e5780631916558714610a395780631c79770914610a8a57806323b872dd14610ac5578063313ce56714610b58578063355274ea14610b8f57806342966c6814610bba578063518ab2a814610bf557806357bb7d7b14610c2057806359679ca414610c4b5780636618846314610c765780636e9ba9f614610ce957806370a0823114610d2457806375bd5d6014610d89578063800eecb014610db457806389311e6f14610ddf5780638da5cb5b14610df6578063903a3ef614610e4d57806395d89b4114610e6457806397e9ed6c14610ef45780639cbd7da514610f5d578063a7be2fb114610f74578063a9059cbb14610f9f578063ab5a188714611012578063b43485af1461104d578063bdef77d914611088578063bf583903146110c3578063c3f70b52146110ee578063c7876ea414611119578063cbcb317114611144578063d426111c1461116f578063d73dd6231461119e578063dcf192e014611211578063dd62ed3e1461123c578063de4b3262146112c1578063e57c431a146112fc578063f2fde38b14611327578063f4a68fa214611378575b600f60149054906101000a900460ff1615151561023057600080fd5b6001600281111561023d57fe5b600f60159054906101000a900460ff16600281111561025857fe5b14151561026457600080fd5b60003411151561027357600080fd5b600060085411151561028457600080fd5b34600a541115151561029557600080fd5b34600b54101515156102a657600080fd5b60003490506000806102dd670de0b6b3a76400006102cf600354866113c690919063ffffffff16565b6113fe90919063ffffffff16565b90506000809050600c546102fc85600d5461141490919063ffffffff16565b111580156103545750600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156103e35761036d600a836113fe90919063ffffffff16565b925061038484600d5461141490919063ffffffff16565b600d819055506001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b6a39e7139a8c08fa06000000610416610405858561141490919063ffffffff16565b60055461141490919063ffffffff16565b11156104ac57600061043e6005546a39e7139a8c08fa0600000061143090919063ffffffff16565b9050610453838261143090919063ffffffff16565b935060008411151561046457600093505b610477848261143090919063ffffffff16565b92506104a8670de0b6b3a764000061049a600354866113fe90919063ffffffff16565b6113fe90919063ffffffff16565b9150505b6104d36104c2848461141490919063ffffffff16565b60055461141490919063ffffffff16565b6005819055506104f96005546a39e7139a8c08fa0600000061143090919063ffffffff16565b600881905550610526610515848461141490919063ffffffff16565b60045461141490919063ffffffff16565b60048190555061054d6004546b06765c793fa10079d000000061143090919063ffffffff16565b6007819055506000811115610609573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105a2573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b61065a826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061070f82600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610840573d6000803e3d6000fd5b5050505050005b34801561085357600080fd5b5061085c611449565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108aa57600080fd5b506108b361146f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108f35780820151818401526020810190506108d8565b50505050905090810190601f1680156109205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561093a57600080fd5b506109876004803603604081101561095157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114a8565b604051808215151515815260200191505060405180910390f35b3480156109ad57600080fd5b506109b661159a565b6040518082815260200191505060405180910390f35b3480156109d857600080fd5b506109e16115a0565b005b3480156109ef57600080fd5b506109f861167c565b6040518082815260200191505060405180910390f35b348015610a1a57600080fd5b50610a23611682565b6040518082815260200191505060405180910390f35b348015610a4557600080fd5b50610a8860048036036020811015610a5c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061168c565b005b348015610a9657600080fd5b50610ac360048036036020811015610aad57600080fd5b81019080803590602001909291905050506117c0565b005b348015610ad157600080fd5b50610b3e60048036036060811015610ae857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611826565b604051808215151515815260200191505060405180910390f35b348015610b6457600080fd5b50610b6d611be0565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b348015610b9b57600080fd5b50610ba4611be5565b6040518082815260200191505060405180910390f35b348015610bc657600080fd5b50610bf360048036036020811015610bdd57600080fd5b8101908080359060200190929190505050611bf5565b005b348015610c0157600080fd5b50610c0a611c5e565b6040518082815260200191505060405180910390f35b348015610c2c57600080fd5b50610c35611c64565b6040518082815260200191505060405180910390f35b348015610c5757600080fd5b50610c60611c6a565b6040518082815260200191505060405180910390f35b348015610c8257600080fd5b50610ccf60048036036040811015610c9957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c79565b604051808215151515815260200191505060405180910390f35b348015610cf557600080fd5b50610d2260048036036020811015610d0c57600080fd5b8101908080359060200190929190505050611f0a565b005b348015610d3057600080fd5b50610d7360048036036020811015610d4757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fea565b6040518082815260200191505060405180910390f35b348015610d9557600080fd5b50610d9e612032565b6040518082815260200191505060405180910390f35b348015610dc057600080fd5b50610dc9612042565b6040518082815260200191505060405180910390f35b348015610deb57600080fd5b50610df4612048565b005b348015610e0257600080fd5b50610e0b6120fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e5957600080fd5b50610e62612124565b005b348015610e7057600080fd5b50610e796121be565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610eb9578082015181840152602081019050610e9e565b50505050905090810190601f168015610ee65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610f0057600080fd5b50610f4360048036036020811015610f1757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121f7565b604051808215151515815260200191505060405180910390f35b348015610f6957600080fd5b50610f72612217565b005b348015610f8057600080fd5b50610f896122f3565b6040518082815260200191505060405180910390f35b348015610fab57600080fd5b50610ff860048036036040811015610fc257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122f9565b604051808215151515815260200191505060405180910390f35b34801561101e57600080fd5b5061104b6004803603602081101561103557600080fd5b8101908080359060200190929190505050612518565b005b34801561105957600080fd5b506110866004803603602081101561107057600080fd5b810190808035906020019092919050505061257e565b005b34801561109457600080fd5b506110c1600480360360208110156110ab57600080fd5b81019080803590602001909291905050506125e4565b005b3480156110cf57600080fd5b506110d86126c5565b6040518082815260200191505060405180910390f35b3480156110fa57600080fd5b506111036126cb565b6040518082815260200191505060405180910390f35b34801561112557600080fd5b5061112e6126d1565b6040518082815260200191505060405180910390f35b34801561115057600080fd5b506111596126d7565b6040518082815260200191505060405180910390f35b34801561117b57600080fd5b506111846126e7565b604051808215151515815260200191505060405180910390f35b3480156111aa57600080fd5b506111f7600480360360408110156111c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126fa565b604051808215151515815260200191505060405180910390f35b34801561121d57600080fd5b506112266128f6565b6040518082815260200191505060405180910390f35b34801561124857600080fd5b506112ab6004803603604081101561125f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128fc565b6040518082815260200191505060405180910390f35b3480156112cd57600080fd5b506112fa600480360360208110156112e457600080fd5b8101908080359060200190929190505050612983565b005b34801561130857600080fd5b506113116129e9565b6040518082815260200191505060405180910390f35b34801561133357600080fd5b506113766004803603602081101561134a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129ef565b005b6113c46004803603604081101561138e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b47565b005b6000808314156113d957600090506113f8565b81830290508183828115156113ea57fe5b041415156113f457fe5b8090505b92915050565b6000818381151561140b57fe5b04905092915050565b6000818301905082811015151561142757fe5b80905092915050565b600082821115151561143e57fe5b818303905092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600681526020017f546f6b6f696e000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600a5481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115fc57600080fd5b6001600f60146101000a81548160ff0219169083151502179055507f7da9a28fc739c49fc1c69da8d04ef41c147a30006543f598ca93a161abcf859c33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60085481565b6000600154905090565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e857600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319165587826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b5050505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181c57600080fd5b80600c8190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561186357600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156118b057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561193b57600080fd5b61198c826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a1f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611af082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6b06765c793fa10079d000000081565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5157600080fd5b611c5b3382613017565b50565b60045481565b60055481565b6a39e7139a8c08fa0600000081565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611d8a576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e1e565b611d9d838261143090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f6657600080fd5b611f7b8160055461141490919063ffffffff16565b600581905550611fa16005546a39e7139a8c08fa0600000061143090919063ffffffff16565b600881905550611fbc8160045461141490919063ffffffff16565b600481905550611fe1816b06765c793fa10079d000000061143090919063ffffffff16565b60078190555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6b02091fb06eec50ca3600000081565b600c5481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120a457600080fd5b6002808111156120b057fe5b600f60159054906101000a900460ff1660028111156120cb57fe5b141515156120d857600080fd5b6001600f60156101000a81548160ff021916908360028111156120f757fe5b0217905550565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218057600080fd5b60028081111561218c57fe5b600f60159054906101000a900460ff1660028111156121a757fe5b141515156121b457600080fd5b6121bc6131ca565b565b6040805190810160405280600481526020017f544f4b4f0000000000000000000000000000000000000000000000000000000081525081565b600e6020528060005260406000206000915054906101000a900460ff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561227357600080fd5b6000600f60146101000a81548160ff0219169083151502179055507f32d5b39251895444e61ec25a5758001a188524eb2257fae0122fe5adabd5ede533604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60065481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561233657600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561238357600080fd5b6123d4826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612467826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257457600080fd5b80600b8190555050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125da57600080fd5b80600a8190555050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561264057600080fd5b6126558160065461141490919063ffffffff16565b60068190555061267c6006546b02091fb06eec50ca3600000061143090919063ffffffff16565b6009819055506126978160045461141490919063ffffffff16565b6004819055506126bc816b06765c793fa10079d000000061143090919063ffffffff16565b60078190555050565b60075481565b600b5481565b60035481565b6b06765c793fa10079d000000081565b600f60149054906101000a900460ff1681565b600061278b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600d5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129df57600080fd5b8060038190555050565b60095481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a4b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a8757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ba357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612bdf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612c3d57600080fd5b6000600954111515612c4e57600080fd5b612c638160065461141490919063ffffffff16565b6b02091fb06eec50ca3600000010151515612c7d57600080fd5b612c928160065461141490919063ffffffff16565b600681905550612cb96006546b02091fb06eec50ca3600000061143090919063ffffffff16565b600981905550612cd48160045461141490919063ffffffff16565b600481905550612cfb6004546b06765c793fa10079d000000061143090919063ffffffff16565b600781905550612d7481600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663143ee5b983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612e9d57600080fd5b505af1158015612eb1573d6000803e3d6000fd5b50505050612f2881600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561306457600080fd5b6130b5816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461143090919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061310c8160015461143090919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6002600f60156101000a81548160ff021916908360028111156131e957fe5b0217905550600060075411156132d35761326e600754600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141490919063ffffffff16565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015613352573d6000803e3d6000fd5b5056fea165627a7a72305820e792f29a6c433cd0dfc9b612f4a31d992518d75f9708c399e659c9d2a29781fa0029608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460038190555062784ce0600481905550600f60056000808152602001908152602001600020819055506014600560006001815260200190815260200160002081905550601e6005600060028152602001908152602001600020819055506023600560006003815260200190815260200160002081905550610ca1806101196000396000f3fe608060405260043610610067576000357c010000000000000000000000000000000000000000000000000000000090048063143ee5b91461006c57806319165587146100c757806370a08231146101185780638da5cb5b1461017d578063f2fde38b146101d4575b600080fd5b34801561007857600080fd5b506100c56004803603604081101561008f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610225565b005b3480156100d357600080fd5b50610116600480360360208110156100ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041c565b005b34801561012457600080fd5b506101676004803603602081101561013b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109db565b6040518082815260200191505060405180910390f35b34801561018957600080fd5b50610192610a78565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e057600080fd5b50610223600480360360208110156101f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9d565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028057600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156103135742600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b61036881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610bf290919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507ed5958799b183a7b738d3ad5e711305293dd5076a37a4e3b7e6611dea6114f38282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561047757600080fd5b6003546104cf60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610bf290919063ffffffff16565b111515156104dc57600080fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411151561056b57600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141515156105bd57600080fd5b61066a60045461061860018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610bf290919063ffffffff16565b02600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610bf290919063ffffffff16565b421015151561067857600080fd5b600061072460056000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610c0e90919063ffffffff16565b905061073a606482610c4690919063ffffffff16565b905061078e81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf290919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061082660018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610bf290919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b505050506040513d602081101561095a57600080fd5b8101908080519060200190929190505050507fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000610a71600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610c5c90919063ffffffff16565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b3457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183019050828110151515610c0557fe5b80905092915050565b600080831415610c215760009050610c40565b8183029050818382811515610c3257fe5b04141515610c3c57fe5b8090505b92915050565b60008183811515610c5357fe5b04905092915050565b6000828211151515610c6a57fe5b81830390509291505056fea165627a7a7230582001d3178c8967b0fa2c1b339a2a03369901c587ebb8eed1975a389da4dd9b33270029"
}