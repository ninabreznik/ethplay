{
  "address": "0xce3ad07c9c7a5f89d39eb1449913d3feecabcf8d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EOSclassic",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-03\n*/\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title EOSclassic\n */\n\n// Imports\n\n\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    // solium-disable-next-line security/no-send\n    assert(owner.send(address(this).balance));\n  }\n}\n\n\n// Contract to help import the original EOS Crowdsale public key\ncontract EOSContractInterface\n{\n    mapping (address => string) public keys;\n    function balanceOf( address who ) constant returns (uint value);\n}\n\n// EOSclassic smart contract \ncontract EOSclassic is StandardToken, HasNoEther \n{\n    // Welcome to EOSclassic\n    string public constant name = \"EOSclassic\";\n    string public constant symbol = \"EOSC\";\n    uint8 public constant decimals = 18;\n\n    // Total amount minted\n    uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(decimals));\n    \n    // Amount given to founders\n    uint public constant foundersAllocation = 100000000 * (10 ** uint(decimals));   \n\n    // Contract address of the original EOS contracts\n    address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\n    address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf;\n    \n    // Map EOS keys; if not empty it should be favored over the original crowdsale address\n    mapping (address => string) public keys;\n    \n    // Keep track of EOS->EOSclassic claims\n    mapping (address => bool) public eosClassicClaimed;\n\n    // LogClaim is called any time an EOS crowdsale user claims their EOSclassic equivalent\n    event LogClaim (address user, uint amount);\n\n    // LogRegister is called any time a user registers a new EOS public key\n    event LogRegister (address user, string key);\n\n    // ************************************************************\n    // Constructor; mints all tokens, assigns founder's allocation\n    // ************************************************************\n    constructor() public \n    {\n        // Define total supply\n        totalSupply_ = TOTAL_SUPPLY;\n        // Allocate total supply of tokens to smart contract for disbursement\n        balances[address(this)] = TOTAL_SUPPLY;\n        // Announce initial allocation\n        emit Transfer(0x0, address(this), TOTAL_SUPPLY);\n        \n        // Transfer founder's allocation\n        balances[address(this)] = balances[address(this)].sub(foundersAllocation);\n        balances[msg.sender] = balances[msg.sender].add(foundersAllocation);\n        // Announce founder's allocation\n        emit Transfer(address(this), msg.sender, foundersAllocation);\n    }\n\n    // Function that checks the original EOS token for a balance\n    function queryEOSTokenBalance(address _address) view public returns (uint) \n    {\n        //return ERC20Basic(eosCrowdsaleAddress).balanceOf(_address);\n        EOSContractInterface eosTokenContract = EOSContractInterface(eosTokenAddress);\n        return eosTokenContract.balanceOf(_address);\n    }\n\n    // Function that returns any registered EOS address from the original EOS crowdsale\n    function queryEOSCrowdsaleKey(address _address) view public returns (string) \n    {\n        EOSContractInterface eosCrowdsaleContract = EOSContractInterface(eosCrowdsaleAddress);\n        return eosCrowdsaleContract.keys(_address);\n    }\n\n    // Use to claim EOS Classic from the calling address\n    function claimEOSclassic() external returns (bool) \n    {\n        return claimEOSclassicFor(msg.sender);\n    }\n\n    // Use to claim EOSclassic for any Ethereum address \n    function claimEOSclassicFor(address _toAddress) public returns (bool)\n    {\n        // Ensure that an address has been passed\n        require (_toAddress != address(0));\n        // Ensure that the address isn't unrecoverable\n        require (_toAddress != 0x00000000000000000000000000000000000000B1);\n        // Ensure this address has not already been claimed\n        require (isClaimed(_toAddress) == false);\n\n        \n        // Query the original EOS Crowdsale for address balance\n        uint _eosContractBalance = queryEOSTokenBalance(_toAddress);\n        \n        // Ensure that address had some balance in the crowdsale\n        require (_eosContractBalance > 0);\n        \n        // Sanity check: ensure we have enough tokens to send\n        require (_eosContractBalance <= balances[address(this)]);\n\n        // Mark address as claimed\n        eosClassicClaimed[_toAddress] = true;\n        \n        // Convert equivalent amount of EOS to EOSclassic\n        // Transfer EOS Classic tokens from this contract to claiming address\n        balances[address(this)] = balances[address(this)].sub(_eosContractBalance);\n        balances[_toAddress] = balances[_toAddress].add(_eosContractBalance);\n        \n        // Broadcast transfer \n        emit Transfer(address(this), _toAddress, _eosContractBalance);\n        \n        // Broadcast claim\n        emit LogClaim(_toAddress, _eosContractBalance);\n        \n        // Success!\n        return true;\n    }\n\n    // Check any address to see if its EOSclassic has already been claimed\n    function isClaimed(address _address) public view returns (bool) \n    {\n        return eosClassicClaimed[_address];\n    }\n\n    // Returns the latest EOS key registered.\n    // EOS token holders that never registered their EOS public key \n    // can do so using the 'register' function in EOSclassic and then request restitution \n    // via the EOS mainnet arbitration process.\n    // EOS holders that previously registered can update their keys here;\n    // This contract could be used in future key snapshots for future EOS forks.\n    function getMyEOSKey() external view returns (string)\n    {\n        return getEOSKeyFor(msg.sender);\n    }\n\n    // Return the registered EOS public key for the passed address\n    function getEOSKeyFor(address _address) public view returns (string)\n    {\n        string memory _eosKey;\n\n        // Get any key registered with EOSclassic\n        _eosKey = keys[_address];\n\n        if (bytes(_eosKey).length > 0) {\n            // EOSclassic key was registered; return this over the original crowdsale address\n            return _eosKey;\n        } else {\n            // EOSclassic doesn't have an EOS public key registered; return any original crowdsale key\n            _eosKey = queryEOSCrowdsaleKey(_address);\n            return _eosKey;\n        }\n    }\n\n    // EOSclassic developer's note: the registration function is identical\n    // to the original EOS crowdsale registration function with only the\n    // freeze function removed, and 'emit' added to the LogRegister event,\n    // per updated Solidity standards.\n    //\n    // Value should be a public key.  Read full key import policy.\n    // Manually registering requires a base58\n    // encoded using the STEEM, BTS, or EOS public key format.\n    function register(string key) public {\n        assert(bytes(key).length <= 64);\n\n        keys[msg.sender] = key;\n\n        emit LogRegister(msg.sender, key);\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000341415156200006357600080fd5b601260ff16600a0a633b9aca0002600181905550601260ff16600a0a633b9aca00026000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601260ff16600a0a633b9aca00026040518082815260200191505060405180910390a362000192601260ff16600a0a6305f5e100026000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002fc64010000000002620024bc179091906401000000009004565b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000242601260ff16600a0a6305f5e100026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200031664010000000002620024d5179091906401000000009004565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601260ff16600a0a6305f5e100026040518082815260200191505060405180910390a362000333565b60008282111515156200030b57fe5b818303905092915050565b600081830190508281101515156200032a57fe5b80905092915050565b6125c280620003436000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610179578063095ea7b31461020957806318160ddd1461026e5780631be47ac2146102995780631db580fa146103555780631fca8bd91461038057806323b872dd1461043c5780632d0ff779146104c15780632e6eaa36146104f0578063313ce5671461054b578063661884631461057c578063670d14b2146105e157806370a082311461069d5780638cc08025146106f45780638da5cb5b1461074f578063902d55a5146107a657806395d89b41146107d15780639f727c2714610861578063a43ac40314610878578063a9059cbb146108cf578063ad29ca6d14610934578063ae0996fc1461098b578063cb2971b114610a1b578063d73dd62314610a72578063dd62ed3e14610ad7578063f2c298be14610b4e578063f2fde38b14610bb7578063fa2f29b614610bfa575b34801561017657600080fd5b50005b34801561018557600080fd5b5061018e610c55565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ce5780820151818401526020810190506101b3565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021557600080fd5b50610254600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c8e565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b50610283610d80565b6040518082815260200191505060405180910390f35b3480156102a557600080fd5b506102da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d8a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031a5780820151818401526020810190506102ff565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036157600080fd5b5061036a610ed9565b6040518082815260200191505060405180910390f35b34801561038c57600080fd5b506103c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610eea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104015780820151818401526020810190506103e6565b50505050905090810190601f16801561042e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044857600080fd5b506104a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fee565b604051808215151515815260200191505060405180910390f35b3480156104cd57600080fd5b506104d66113a8565b604051808215151515815260200191505060405180910390f35b3480156104fc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b8565b604051808215151515815260200191505060405180910390f35b34801561055757600080fd5b506105606113d8565b604051808260ff1660ff16815260200191505060405180910390f35b34801561058857600080fd5b506105c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113dd565b604051808215151515815260200191505060405180910390f35b3480156105ed57600080fd5b50610622600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061166e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610662578082015181840152602081019050610647565b50505050905090810190601f16801561068f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106a957600080fd5b506106de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061171e565b6040518082815260200191505060405180910390f35b34801561070057600080fd5b50610735600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611766565b604051808215151515815260200191505060405180910390f35b34801561075b57600080fd5b506107646117bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b257600080fd5b506107bb6117e2565b6040518082815260200191505060405180910390f35b3480156107dd57600080fd5b506107e66117f3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561082657808201518184015260208101905061080b565b50505050905090810190601f1680156108535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561086d57600080fd5b5061087661182c565b005b34801561088457600080fd5b506108b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611900565b6040518082815260200191505060405180910390f35b3480156108db57600080fd5b5061091a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119f8565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b50610949611c17565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561099757600080fd5b506109a0611c2f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109e05780820151818401526020810190506109c5565b50505050905090810190601f168015610a0d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a2757600080fd5b50610a30611c3f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a7e57600080fd5b50610abd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c57565b604051808215151515815260200191505060405180910390f35b348015610ae357600080fd5b50610b38600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e53565b6040518082815260200191505060405180910390f35b348015610b5a57600080fd5b50610bb5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611eda565b005b348015610bc357600080fd5b50610bf8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061200f565b005b348015610c0657600080fd5b50610c3b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612167565b604051808215151515815260200191505060405180910390f35b6040805190810160405280600a81526020017f454f53636c61737369630000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b6060600073d0a6e6c54dbc68db5db3a091b171a77407ff7ccf90508073ffffffffffffffffffffffffffffffffffffffff1663670d14b2846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610e4057600080fd5b505af1158015610e54573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610e7e57600080fd5b810190808051640100000000811115610e9657600080fd5b82810190506020810184811115610eac57600080fd5b8151856001820283011164010000000082111715610ec957600080fd5b5050929190505050915050919050565b601260ff16600a0a6305f5e1000281565b606080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fc05780601f10610f9557610100808354040283529160200191610fc0565b820191906000526020600020905b815481529060010190602001808311610fa357829003601f168201915b50505050509050600081511115610fd957809150610fe8565b610fe283610d8a565b90508091505b50919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561102b57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561107857600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561110357600080fd5b611154826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111e7826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112b882600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60006113b333612167565b905090565b60056020528060005260406000206000915054906101000a900460ff1681565b601281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156114ee576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611582565b61150183826124bc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117165780601f106116eb57610100808354040283529160200191611716565b820191906000526020600020905b8154815290600101906020018083116116f957829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601260ff16600a0a633b9aca000281565b6040805190810160405280600481526020017f454f53430000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188857600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156118fe57fe5b565b6000807386fa049857e0209aa7d9e616f7eb3b3b78ecfdb090508073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156119b557600080fd5b505af11580156119c9573d6000803e3d6000fd5b505050506040513d60208110156119df57600080fd5b8101908080519060200190929190505050915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611a3557600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611a8257600080fd5b611ad3826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b66826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b73d0a6e6c54dbc68db5db3a091b171a77407ff7ccf81565b6060611c3a33610eea565b905090565b7386fa049857e0209aa7d9e616f7eb3b3b78ecfdb081565b6000611ce882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040815111151515611ee857fe5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611f3b9291906124f1565b507fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad223382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611fd1578082015181840152602081019050611fb6565b50505050905090810190601f168015611ffe5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561206b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120a757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121a657600080fd5b60b173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121e257600080fd5b600015156121ef84611766565b15151415156121fd57600080fd5b61220683611900565b905060008111151561221757600080fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561226457600080fd5b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061230d816000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123a0816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a37ffce6d5860f911bc27ece1365300332d2ddbe20c1adc46ee2eddd8f72c48053b28382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001915050919050565b60008282111515156124ca57fe5b818303905092915050565b600081830190508281101515156124e857fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061253257805160ff1916838001178555612560565b82800160010185558215612560579182015b8281111561255f578251825591602001919060010190612544565b5b50905061256d9190612571565b5090565b61259391905b8082111561258f576000816000905550600101612577565b5090565b905600a165627a7a72305820dc1e61f54f68106929f6b884cb5a8cb9bac19bf796aa0f456a40893eba07f2d00029"
}