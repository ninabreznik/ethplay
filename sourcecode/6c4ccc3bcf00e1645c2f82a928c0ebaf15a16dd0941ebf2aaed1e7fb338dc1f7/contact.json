{
  "address": "0x2e98a6804e4b6c832ed0ca876a943abd3400b224",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bela Token",
  "contractName": "Bela",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-01\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**************************************************************\n * @title Bela Token Contract\n * @file Bela.sol\n * @author Joe Jordan, BurgTech Solutions\n * @version 1.0\n *\n * @section LICENSE\n *\n * Contact for licensing details. All rights reserved.\n *\n * @section DESCRIPTION\n *\n * This is an ERC20-based token with staking functionality.\n *\n *************************************************************/\n//////////////////////////////////\n/// OpenZeppelin library imports\n//////////////////////////////////\n\n///* Truffle format \n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  //event MintFinished();\n\n  //bool public mintingFinished = false;\n\n  /*\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n  */\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) internal returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   \n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n  */\n}\n\n\n\n\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be send to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n*/\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\n\n///* Remix format\n//import \"./MintableToken.sol\";\n//import \"./HasNoEther.sol\";\n\n\ncontract Bela is MintableToken, HasNoEther \n{\n    // Using libraries \n    using SafeMath for uint;\n\n    //////////////////////////////////////////////////\n    /// State Variables for the Bela token contract\n    //////////////////////////////////////////////////\n    \n    //////////////////////\n    // ERC20 token state\n    //////////////////////\n    \n    /**\n    These state vars are handled in the OpenZeppelin libraries;\n    we display them here for the developer's information.\n    ***\n    // ERC20Basic - Store account balances\n    mapping (address => uint256) public balances;\n\n    // StandardToken - Owner of account approves transfer of an amount to another account\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    // \n    uint256 public totalSupply;\n    */\n    \n    //////////////////////\n    // Human token state\n    //////////////////////\n    string public constant name = \"Bela\";\n    string public constant symbol = \"BELA\";\n    uint8 public constant  decimals = 18;\n\n    ///////////////////////////////////////////////////////////\n    // State vars for custom staking and budget functionality\n    ///////////////////////////////////////////////////////////\n\n    // Owner last minted time\n    uint public ownerTimeLastMinted;\n    // Owner minted tokens per second\n    uint public ownerMintRate;\n\n    /// Stake minting\n    // Minted tokens per second for all stakers\n    uint private globalMintRate;\n    // Total tokens currently staked\n    uint public totalBelaStaked; \n\n    // struct that will hold user stake\n    struct TokenStakeData {\n        uint initialStakeBalance;\n        uint initialStakeTime;\n        uint initialStakePercentage;\n        address stakeSplitAddress;\n    }\n    \n    // Track all tokens staked\n    mapping (address => TokenStakeData) public stakeBalances;\n\n    // Fire a loggable event when tokens are staked\n    event Stake(address indexed staker, address indexed stakeSplitAddress, uint256 value);\n\n    // Fire a loggable event when staked tokens are vested\n    event Vest(address indexed vester, address indexed stakeSplitAddress, uint256 stakedAmount, uint256 stakingGains);\n\n    //////////////////////////////////////////////////\n    /// Begin Bela token functionality\n    //////////////////////////////////////////////////\n\n    /// @dev Bela token constructor\n    function Bela() public\n    {\n        // Define owner\n        owner = msg.sender;\n        // Define initial owner supply. (ether here is used only to get the decimals right)\n        uint _initOwnerSupply = 41000000 ether;\n        // One-time bulk mint given to owner\n        bool _success = mint(msg.sender, _initOwnerSupply);\n        // Abort if initial minting failed for whatever reason\n        require(_success);\n\n        ////////////////////////////////////\n        // Set up state minting variables\n        ////////////////////////////////////\n\n        // Set last minted to current block.timestamp ('now')\n        ownerTimeLastMinted = now;\n        \n        // 4500 minted tokens per day, 86400 seconds in a day\n        ownerMintRate = calculateFraction(4500, 86400, decimals);\n        \n        // 4,900,000 targeted minted tokens per year via staking; 31,536,000 seconds per year\n        globalMintRate = calculateFraction(4900000, 31536000, decimals);\n    }\n\n    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 30 days \n    function stakeBela(uint _stakeAmount) external\n    {\n        // Require that tokens are staked successfully\n        require(stakeTokens(_stakeAmount));\n    }\n\n    /// @dev staking function which allows users to split the interest earned with another address\n    function stakeBelaSplit(uint _stakeAmount, address _stakeSplitAddress) external\n    {\n        // Require that a Bela split actually be split with an address\n        require(_stakeSplitAddress > 0);\n        // Store split address into stake mapping\n        stakeBalances[msg.sender].stakeSplitAddress = _stakeSplitAddress;\n        // Require that tokens are staked successfully\n        require(stakeTokens(_stakeAmount));\n\n    }\n\n    /// @dev allows users to reclaim any staked tokens\n    /// @return bool on success\n    function claimStake() external returns (bool success)\n    {\n        /// Sanity checks: \n        // require that there was some amount vested\n        require(stakeBalances[msg.sender].initialStakeBalance > 0);\n        // require that time has elapsed\n        require(now > stakeBalances[msg.sender].initialStakeTime);\n\n        // Calculate the time elapsed since the tokens were originally staked\n        uint _timePassedSinceStake = now.sub(stakeBalances[msg.sender].initialStakeTime);\n\n        // Calculate tokens to mint\n        uint _tokensToMint = calculateStakeGains(_timePassedSinceStake);\n\n        // Add the original stake back to the user's balance\n        balances[msg.sender] += stakeBalances[msg.sender].initialStakeBalance;\n        \n        // Subtract stake balance from totalBelaStaked\n        totalBelaStaked -= stakeBalances[msg.sender].initialStakeBalance;\n        \n        // Mint the new tokens; the new tokens are added to the user's balance\n        if (stakeBalances[msg.sender].stakeSplitAddress > 0) \n        {\n            // Splitting stake, so mint half to sender and half to stakeSplitAddress\n            mint(msg.sender, _tokensToMint.div(2));\n            mint(stakeBalances[msg.sender].stakeSplitAddress, _tokensToMint.div(2));\n        } else {\n            // Not spliting stake; mint all new tokens and give them to msg.sender \n            mint(msg.sender, _tokensToMint);\n        }\n        \n        // Fire an event to tell the world of the newly vested tokens\n        Vest(msg.sender, stakeBalances[msg.sender].stakeSplitAddress, stakeBalances[msg.sender].initialStakeBalance, _tokensToMint);\n\n        // Clear out stored data from mapping\n        stakeBalances[msg.sender].initialStakeBalance = 0;\n        stakeBalances[msg.sender].initialStakeTime = 0;\n        stakeBalances[msg.sender].initialStakePercentage = 0;\n        stakeBalances[msg.sender].stakeSplitAddress = 0;\n\n        return true;\n    }\n\n    /// @dev Allows user to check their staked balance\n    function getStakedBalance() view external returns (uint stakedBalance) \n    {\n        return stakeBalances[msg.sender].initialStakeBalance;\n    }\n\n    /// @dev allows contract owner to claim their mint\n    function ownerClaim() external onlyOwner\n    {\n        // Sanity check: ensure that we didn't travel back in time\n        require(now > ownerTimeLastMinted);\n        \n        uint _timePassedSinceLastMint;\n        uint _tokenMintCount;\n        bool _mintingSuccess;\n\n        // Calculate the number of seconds that have passed since the owner last took a claim\n        _timePassedSinceLastMint = now.sub(ownerTimeLastMinted);\n\n        // Sanity check: ensure that some time has passed since the owner last claimed\n        assert(_timePassedSinceLastMint > 0);\n\n        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\n        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, ownerMintRate);\n\n        // Mint the owner's tokens; this also increases totalSupply\n        _mintingSuccess = mint(msg.sender, _tokenMintCount);\n\n        // Sanity check: ensure that the minting was successful\n        require(_mintingSuccess);\n        \n        // New minting was a success! Set last time minted to current block.timestamp (now)\n        ownerTimeLastMinted = now;\n    }\n\n    /// @dev stake function reduces the user's total available balance. totalSupply is unaffected\n    /// @param _value determines how many tokens a user wants to stake\n    function stakeTokens(uint256 _value) private returns (bool success)\n    {\n        /// Sanity Checks:\n        // You can only stake as many tokens as you have\n        require(_value <= balances[msg.sender]);\n        // You can only stake tokens if you have not already staked tokens\n        require(stakeBalances[msg.sender].initialStakeBalance == 0);\n\n        // Subtract stake amount from regular token balance\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        // Add stake amount to staked balance\n        stakeBalances[msg.sender].initialStakeBalance = _value;\n\n        // Increment the global staked tokens value\n        totalBelaStaked += _value;\n\n        /// Determine percentage of global stake\n        stakeBalances[msg.sender].initialStakePercentage = calculateFraction(_value, totalBelaStaked, decimals);\n        \n        // Save the time that the stake started\n        stakeBalances[msg.sender].initialStakeTime = now;\n\n        // Fire an event to tell the world of the newly staked tokens\n        Stake(msg.sender, stakeBalances[msg.sender].stakeSplitAddress, _value);\n\n        return true;\n    }\n\n    /// @dev Helper function to claimStake that modularizes the minting via staking calculation \n    function calculateStakeGains(uint _timePassedSinceStake) view private returns (uint mintTotal)\n    {\n        // Store seconds in a day (need it in variable to use SafeMath)\n        uint _secondsPerDay = 86400;\n        uint _finalStakePercentage;     // store our stake percentage at the time of stake claim\n        uint _stakePercentageAverage;   // store our calculated average minting rate ((initial+final) / 2)\n        uint _finalMintRate;            // store our calculated final mint rate (in Bela-per-second)\n        uint _tokensToMint = 0;         // store number of new tokens to be minted\n        \n        // Determine the amount to be newly minted upon vesting, if any\n        if (_timePassedSinceStake > _secondsPerDay) {\n            \n            /// We've passed the minimum staking time; calculate minting rate average ((initialRate + finalRate) / 2)\n            \n            // First, calculate our final stake percentage based upon the total amount of Bela staked\n            _finalStakePercentage = calculateFraction(stakeBalances[msg.sender].initialStakeBalance, totalBelaStaked, decimals);\n\n            // Second, calculate average of initial and final stake percentage\n            _stakePercentageAverage = calculateFraction((stakeBalances[msg.sender].initialStakePercentage.add(_finalStakePercentage)), 2, 0);\n\n            // Finally, calculate our final mint rate (in Bela-per-second)\n            _finalMintRate = globalMintRate.mul(_stakePercentageAverage); \n            _finalMintRate = _finalMintRate.div(1 ether);\n            \n            // Tokens were staked for enough time to mint new tokens; determine how many\n            if (_timePassedSinceStake > _secondsPerDay.mul(30)) {\n                // Tokens were staked for the maximum amount of time (30 days)\n                _tokensToMint = calculateMintTotal(_secondsPerDay.mul(30), _finalMintRate);\n            } else {\n                // Tokens were staked for a mintable amount of time, but less than the 30-day max\n                _tokensToMint = calculateMintTotal(_timePassedSinceStake, _finalMintRate);\n            }\n        } \n        \n        // Return the amount of new tokens to be minted\n        return _tokensToMint;\n\n    }\n\n    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type \n    /// @param _numerator is the top part of the fraction we are calculating\n    /// @param _denominator is the bottom part of the fraction we are calculating\n    /// @param _precision tells the function how many significant digits to calculate out to\n    /// @return quotient returns the result of our fraction calculation\n    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) \n    {\n        // Take passed value and expand it to the required precision\n        _numerator = _numerator.mul(10 ** (_precision + 1));\n        // handle last-digit rounding\n        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\n        return (_quotient);\n    }\n\n    /// @dev Determines mint total based upon how many seconds have passed\n    /// @param _timeInSeconds takes the time that has elapsed since the last minting\n    /// @return uint with the calculated number of new tokens to mint\n    function calculateMintTotal(uint _timeInSeconds, uint _mintRate) pure private returns(uint mintAmount)\n    {\n        // Calculates the amount of tokens to mint based upon the number of seconds passed\n        return(_timeInSeconds.mul(_mintRate));\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBelaStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalances\",\"outputs\":[{\"name\":\"initialStakeBalance\",\"type\":\"uint256\"},{\"name\":\"initialStakeTime\",\"type\":\"uint256\"},{\"name\":\"initialStakePercentage\",\"type\":\"uint256\"},{\"name\":\"stakeSplitAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakeBela\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"name\":\"_stakeSplitAddress\",\"type\":\"address\"}],\"name\":\"stakeBelaSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMintRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTimeLastMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimStake\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stakeSplitAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stakeSplitAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingGains\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60008033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000341415156200006457600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a21ea16741ed20ec90000009150620000d33383620001536401000000000262001ef2176401000000009004565b9050801515620000e257600080fd5b426004819055506200011361119462015180601260ff16620002e36401000000000262002514176401000000009004565b60058190555062000145624ac4a06301e13380601260ff16620002e36401000000000262002514176401000000009004565b6006819055505050620003cb565b60006200017a82600054620003516401000000000262001eb7179091906401000000009004565b600081905550620001e282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003516401000000000262001eb7179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806200030f60018401600a0a866200037064010000000002620024d9179091906401000000009004565b9450600a6005620003388688620003af64010000000002620024be179091906401000000009004565b018115156200034357fe5b049050809150509392505050565b60008082840190508381101515156200036657fe5b8091505092915050565b6000806000841415620003875760009150620003a8565b82840290508284828115156200039957fe5b04141515620003a457fe5b8091505b5092915050565b6000808284811515620003be57fe5b0490508091505092915050565b61258d80620003db6000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610140578063071da02f146101ce578063095ea7b3146101f757806318160ddd1461025157806323b872dd1461027a578063313ce567146102f35780633b317dab146103225780634dbe5889146103b057806366188463146103c557806370a082311461041f578063769658671461046c5780638c2305fd146104955780638da5cb5b146104b857806395d89b411461050d57806398290c531461059b5780639f727c27146105dd578063a0d8b4e9146105f2578063a9059cbb1461061b578063ac18564414610675578063d73dd6231461069e578063dd62ed3e146106f8578063eb32117314610764578063f2fde38b14610791575b341561013e57600080fd5b005b341561014b57600080fd5b6101536107ca565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610193578082015181840152602081019050610178565b50505050905090810190601f1680156101c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d957600080fd5b6101e1610803565b6040518082815260200191505060405180910390f35b341561020257600080fd5b610237600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610809565b604051808215151515815260200191505060405180910390f35b341561025c57600080fd5b6102646108fb565b6040518082815260200191505060405180910390f35b341561028557600080fd5b6102d9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610901565b604051808215151515815260200191505060405180910390f35b34156102fe57600080fd5b610306610cc0565b604051808260ff1660ff16815260200191505060405180910390f35b341561032d57600080fd5b610359600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cc5565b604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b34156103bb57600080fd5b6103c3610d15565b005b34156103d057600080fd5b610405600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ddb565b604051808215151515815260200191505060405180910390f35b341561042a57600080fd5b610456600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061106c565b6040518082815260200191505060405180910390f35b341561047757600080fd5b61047f6110b5565b6040518082815260200191505060405180910390f35b34156104a057600080fd5b6104b660048080359060200190919050506110ff565b005b34156104c357600080fd5b6104cb611116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561051857600080fd5b61052061113c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610560578082015181840152602081019050610545565b50505050905090810190601f16801561058d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105a657600080fd5b6105db600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611175565b005b34156105e857600080fd5b6105f0611233565b005b34156105fd57600080fd5b610605611307565b6040518082815260200191505060405180910390f35b341561062657600080fd5b61065b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061130d565b604051808215151515815260200191505060405180910390f35b341561068057600080fd5b610688611531565b6040518082815260200191505060405180910390f35b34156106a957600080fd5b6106de600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611537565b604051808215151515815260200191505060405180910390f35b341561070357600080fd5b61074e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611733565b6040518082815260200191505060405180910390f35b341561076f57600080fd5b6107776117ba565b604051808215151515815260200191505060405180910390f35b341561079c57600080fd5b6107c8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d46565b005b6040805190810160405280600481526020017f42656c610000000000000000000000000000000000000000000000000000000081525081565b60075481565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561093e57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561098c57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a1757600080fd5b610a6982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9e90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610afe82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bd082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b60086020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7657600080fd5b60045442111515610d8657600080fd5b610d9b60045442611e9e90919063ffffffff16565b9250600083111515610da957fe5b610db583600554611ed5565b9150610dc13383611ef2565b9050801515610dcf57600080fd5b42600481905550505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610eec576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f80565b610eff8382611e9e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b61110881612062565b151561111357600080fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f42454c410000000000000000000000000000000000000000000000000000000081525081565b60008173ffffffffffffffffffffffffffffffffffffffff1611151561119a57600080fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061122482612062565b151561122f57600080fd5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128f57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561130557fe5b565b60055481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561134a57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561139857600080fd5b6113ea82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061147f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60045481565b60006115c882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411151561180f57600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101544211151561185f57600080fd5b6118b4600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015442611e9e90919063ffffffff16565b91506118bf8261235d565b9050600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546007600082825403925050819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161115611ac657611a4033611a3b6002846124be90919063ffffffff16565b611ef2565b50611ac0600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611abb6002846124be90919063ffffffff16565b611ef2565b50611ad2565b611ad03382611ef2565b505b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd9c1851563fe01face9bb04f31b9adad0fb3db6ed6f78845f9c04eadedb494d2600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015484604051808381526020018281526020019250505060405180910390a36000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019250505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611da257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611dde57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515611eac57fe5b818303905092915050565b6000808284019050838110151515611ecb57fe5b8091505092915050565b6000611eea82846124d990919063ffffffff16565b905092915050565b6000611f0982600054611eb790919063ffffffff16565b600081905550611f6182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156120b257600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414151561210357600080fd5b61215582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508160076000828254019250508190555061220082600754601260ff16612514565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555042600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f7846040518082815260200191505060405180910390a360019050919050565b60008060008060008062015180945060009050848711156124b1576123cb600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600754601260ff16612514565b935061242e61242585600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611eb790919063ffffffff16565b60026000612514565b9250612445836006546124d990919063ffffffff16565b9150612462670de0b6b3a7640000836124be90919063ffffffff16565b9150612478601e866124d990919063ffffffff16565b8711156124a35761249c612496601e876124d990919063ffffffff16565b83611ed5565b90506124b0565b6124ad8783611ed5565b90505b5b8095505050505050919050565b60008082848115156124cc57fe5b0490508091505092915050565b60008060008414156124ee576000915061250d565b82840290508284828115156124ff57fe5b0414151561250957fe5b8091505b5092915050565b60008061253060018401600a0a866124d990919063ffffffff16565b9450600a600561254986886124be90919063ffffffff16565b0181151561255357fe5b0490508091505093925050505600a165627a7a72305820134fac44e88f46fa28b8ff6b71932272a30c56fec768e99f2ead57cbb5a5a3e80029"
}