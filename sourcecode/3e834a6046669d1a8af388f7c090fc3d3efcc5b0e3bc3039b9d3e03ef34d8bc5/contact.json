{
  "address": "0x8ca3bbb1ad06c9099d0fd93812f633dd6c8e0d84",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FUJIBank",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\npragma solidity ^0.5.0;\n\n\ncontract FUJIBank {\n    using SafeMath for uint256;\n\n    struct InvestorInfo {\n        uint256 invested;\n        uint256 lockbox;\n        uint256 withdrawn;\n        uint256 lastInvestmentTime;\n    }\n    \n    mapping (address => InvestorInfo) public investors;\n    mapping (address => uint256) public affiliateCommission;\n    mapping (address => uint256) public devCommission;\n\n    uint256 public investorsCount;\n    uint256 public lockboxTotal;\n    uint256 public withdrawnProfitTotal;\n    uint256 public affiliateCommissionWithdrawnTotal;\n    \n    uint256 public donatedTotal;\n    uint256 public gamesIncomeTotal;\n    \n    address private constant dev_0_master = 0x8345dfc331c020446cE8C123ea802d8562261eab;\n    address private constant dev_1_master = 0x70F5B907d743AD845F987b14a373C436Ba1E9059;\n    address private dev_0_escrow = 0x8345dfc331c020446cE8C123ea802d8562261eab;\n    address private dev_1_escrow = 0x70F5B907d743AD845F987b14a373C436Ba1E9059;\n\n    uint256 public constant minInvest = 0.025 ether;\n\n    event Invested(address investor, uint256 amount);\n    event Renvested(address investor, uint256 amount);\n    event WithdrawnAffiliateCommission(address affiliate, uint256 amount);\n    event WithdrawnProfit(address investor, uint256 amount);\n    event WithdrawnLockbox(address investor, uint256 amount);\n\n    /**\n     * PUBLIC\n     */\n\n     /**\n     * @dev Donation for FUJI ecosystem.\n     * TESTED\n     */\n    function() external payable {\n        //  5% - to developers\n        uint256 devFee = msg.value.div(40);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        donatedTotal = donatedTotal.add(msg.value);\n    }\n\n    /**\n     * @dev Accepts income from games for Onigiry ecosystem.\n     * TESTED\n     */\n    function fromGame() external payable {\n        //  8% - to developers\n        uint256 devFee = msg.value.div(50).mul(2);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        gamesIncomeTotal = gamesIncomeTotal.add(msg.value);\n    }\n\n    /**\n     * @dev Returns invested amount for investor.\n     * @param _address Investor address.\n     * @return invested amount.\n     * TESTED\n     */\n    function getInvested(address _address) public view returns(uint256) {\n        return investors[_address].invested;\n    }\n\n    /**\n     * @dev Returns lockbox amount for investor.\n     * @param _address Investor address.\n     * @return lockbox amount.\n     * TESTED\n     */\n    function getLockBox(address _address) public view returns(uint256) {\n        return investors[_address].lockbox;\n    }\n\n    /**\n     * @dev Returns withdrawn amount for investor.\n     * @param _address Investor address.\n     * @return withdrawn amount.\n     * TESTED\n     */\n    function getWithdrawn(address _address) public view returns(uint256) {\n        return investors[_address].withdrawn;\n    }\n\n    /**\n     * @dev Returns last investment time amount for investor.\n     * @param _address Investor address.\n     * @return last investment time.\n     * TESTED\n     */\n    function getLastInvestmentTime(address _address) public view returns(uint256) {\n        return investors[_address].lastInvestmentTime;\n    }\n\n    /**\n     * @dev Gets balance for current contract.\n     * @return balance for current contract.\n     * TESTED\n     */\n    function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Calculates sum for lockboxes and dev fees.\n     * @return Amount of guaranteed balance by constract.\n     * TESTED\n     */\n    function guaranteedBalance() public view returns(uint256) {\n        return lockboxTotal.add(devCommission[dev_0_escrow]).add(devCommission[dev_1_escrow]);\n    }\n\n    /**\n     * @dev User invests funds.\n     * @param _affiliate affiliate address.\n     * TESTED\n     */\n    function invest(address _affiliate) public payable {\n        require(msg.value >= minInvest, \"min 0.025 eth\");\n\n        uint256 profit = calculateProfit(msg.sender);\n        if(profit > 0){\n            msg.sender.transfer(profit);\n        }\n\n        //  1% - to affiliateCommission\n        if(_affiliate != msg.sender && _affiliate != address(0)) {\n            uint256 commission = msg.value.div(100);\n            affiliateCommission[_affiliate] = affiliateCommission[_affiliate].add(commission);\n        }\n\n        if(getLastInvestmentTime(msg.sender) == 0) {\n            investorsCount = investorsCount.add(1);\n        }\n\n        uint256 lockboxAmount = msg.value.div(100).mul(84);\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxAmount);\n        investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\n        investors[msg.sender].lastInvestmentTime = now;\n        delete investors[msg.sender].withdrawn;\n        \n        lockboxTotal = lockboxTotal.add(lockboxAmount);\n        \n        //  8% - to developers\n        uint256 devFee = msg.value.div(50).mul(2);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n\n        emit Invested(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Updates escrow address for developer.\n     * @param _address Address of escrow to be used.\n     * TESTED\n     */\n    function updateDevEscrow(address _address) public {\n        require(msg.sender == dev_0_master || msg.sender == dev_1_master, \"not dev\");\n        (msg.sender == dev_0_master) ? dev_0_escrow = _address : dev_1_escrow = _address;\n    }\n\n    /**\n     * @dev Allows developer to withdraw commission.\n     * TESTED\n     */\n    function withdrawDevCommission() public {\n        uint256 commission = devCommission[msg.sender];\n        require(commission > 0, \"no dev commission\");\n        require(address(this).balance.sub(commission) >= lockboxTotal, \"not enough funds\");\n\n        delete devCommission[msg.sender];\n        msg.sender.transfer(commission);\n    }\n    \n    /**\n     * @dev Withdraws affiliate commission for current address.\n     * TESTED\n     */\n    function withdrawAffiliateCommission() public {\n        uint256 commission = affiliateCommission[msg.sender];\n        require(commission > 0, \"no commission\");\n        require(address(this).balance.sub(commission) >= guaranteedBalance(), \"not enough funds\");\n\n        delete affiliateCommission[msg.sender];\n        affiliateCommissionWithdrawnTotal = affiliateCommissionWithdrawnTotal.add(commission);\n\n        msg.sender.transfer(commission);\n\n        emit WithdrawnAffiliateCommission(msg.sender, commission);\n    }\n\n    /**\n     * @dev Allows investor to withdraw profit.\n     * TESTED\n     */\n    function withdrawProfit() public {\n        uint256 profit = calculateProfit(msg.sender);\n        require(profit > 0, \"no profit\");\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\n\n        investors[msg.sender].lastInvestmentTime = now;\n        investors[msg.sender].withdrawn = investors[msg.sender].withdrawn.add(profit);\n\n        withdrawnProfitTotal = withdrawnProfitTotal.add(profit);\n        \n        //  4% - to developers\n        uint256 devFee = profit.div(50);\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\n        \n        //  3% - stay in contract\n        msg.sender.transfer(profit.div(100).mul(93));\n\n        emit WithdrawnProfit(msg.sender, profit);\n    }\n\n    /**\n     * @dev Allows investor to withdraw lockbox funds, close deposit and clear all data.\n     * @notice Pending profit stays in contract.\n     * TESTED\n     */\n    function withdrawLockBoxAndClose() public {\n        uint256 lockboxAmount = getLockBox(msg.sender);\n        require(lockboxAmount > 0, \"no investments\");\n\n        delete investors[msg.sender];\n        investorsCount = investorsCount.sub(1);\n        lockboxTotal = lockboxTotal.sub(lockboxAmount);\n\n        msg.sender.transfer(lockboxAmount);\n\n        emit WithdrawnLockbox(msg.sender, lockboxAmount);\n    }\n    \n    /**\n     * @dev Reinvests pending profit.\n     * TESTED\n     */\n    function reinvestProfit() public {\n        uint256 profit = calculateProfit(msg.sender);\n        require(profit > 0, \"no profit\");\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\n        \n        uint256 lockboxFromProfit = profit.div(100).mul(84);\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxFromProfit);\n        investors[msg.sender].lastInvestmentTime = now;\n        investors[msg.sender].invested = investors[msg.sender].invested.add(profit);\n\n        lockboxTotal = lockboxTotal.add(lockboxFromProfit);\n\n        emit Renvested(msg.sender, profit);\n    }\n\n    /**\n     * @dev Calculates pending profit for provided customer.\n     * @param _investor Address of investor.\n     * @return pending profit.\n     * TESTED\n     */\n    function calculateProfit(address _investor) public view returns(uint256){\n        uint256 hourDifference = now.sub(investors[_investor].lastInvestmentTime).div(3600);\n        uint256 rate = percentRateInternal(investors[_investor].lockbox);\n        uint256 calculatedPercent = hourDifference.mul(rate);\n        return investors[_investor].lockbox.div(100000).mul(calculatedPercent);\n    }\n\n    /**\n     * @dev Calculates rate for lockbox balance for msg.sender.\n     * @param _balance Balance to calculate percentage.\n     * @return rate for lockbox balance.\n     * TESTED\n     */\n    function percentRateInternal(uint256 _balance) public pure returns(uint256) {\n        /**\n            ~ .99 -    - 0.6%\n            1 ~ 50     - 0.96% \n            51 ~ 100   - 1.2% \n            100 ~ 250  - 1.44% \n            250 ~      - 1.8% \n         */\n        uint256 step_1 = .99 ether;\n        uint256 step_2 = 50 ether;\n        uint256 step_3 = 100 ether;\n        uint256 step_4 = 250 ether;\n\n        uint256 dailyPercent_0 = 25;   //  0.6%\n        uint256 dailyPercent_1 = 40;   //  0.96%\n        uint256 dailyPercent_2 = 50;   //  1.2%\n        uint256 dailyPercent_3 = 60;   //  1.44%\n        uint256 dailyPercent_4 = 75;   //  1.8%\n\n        if (_balance >= step_4) {\n            return dailyPercent_4;\n        } else if (_balance >= step_3 && _balance < step_4) {\n            return dailyPercent_3;\n        } else if (_balance >= step_2 && _balance < step_3) {\n            return dailyPercent_2;\n        } else if (_balance >= step_1 && _balance < step_2) {\n            return dailyPercent_1;\n        }\n\n        return dailyPercent_0;\n    }\n\n    /**\n     * @dev Calculates rate for lockbox balance for msg.sender. User for public\n     * @param _balance Balance to calculate percentage.\n     * @return rate for lockbox balance.\n     * TESTED\n     */\n    function percentRatePublic(uint256 _balance) public pure returns(uint256) {\n        /**\n            ~ .99 -    - 0.6%\n            1 ~ 50     - 0.96% \n            51 ~ 100   - 1.2% \n            100 ~ 250  - 1.44% \n            250 ~      - 1.8% \n         */\n        uint256 step_1 = .99 ether;\n        uint256 step_2 = 50 ether;\n        uint256 step_3 = 100 ether;\n        uint256 step_4 = 250 ether;\n\n        uint256 dailyPercent_0 = 60;   //  0.6%\n        uint256 dailyPercent_1 = 96;   //  0.96%\n        uint256 dailyPercent_2 = 120;   //  1.2%\n        uint256 dailyPercent_3 = 144;   //  1.44%\n        uint256 dailyPercent_4 = 180;   //  1.8%\n\n        if (_balance >= step_4) {\n            return dailyPercent_4;\n        } else if (_balance >= step_3 && _balance < step_4) {\n            return dailyPercent_3;\n        } else if (_balance >= step_2 && _balance < step_3) {\n            return dailyPercent_2;\n        } else if (_balance >= step_1 && _balance < step_2) {\n            return dailyPercent_1;\n        }\n\n        return dailyPercent_0;\n    }\n}",
  "bytecode": "6080604052738345dfc331c020446ce8c123ea802d8562261eab600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507370f5b907d743ad845f987b14a373c436ba1e9059600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100ba57600080fd5b50612921806100ca6000396000f3fe60806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f9c7931461034757806312065fe01461038b57806315682cc9146103b6578063197748e0146104075780632ae2b643146104325780632b71105114610497578063550dd212146104c2578063567541a9146104ed5780635e70dec51461053c57806363fd9e38146105a1578063699333aa146105cc5780636c116a2e146105e35780636f7bc9be146106485780637cc7310f146106c2578063959499b6146106ed57806398f3f8e614610704578063a360fea714610769578063ae66d94814610773578063b1c17506146107d8578063b77fc5491461083d578063c1a6351714610854578063c831ae031461086b578063c858257214610896578063cc38c8ee146108fb578063d6b9bf2614610926578063e1f4e68d14610951578063e3b61135146109a0575b60006101756028346109b790919063ffffffff16565b90506101eb8160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102c48160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061033e346007546109e190919063ffffffff16565b60078190555050005b6103896004803603602081101561035d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a02565b005b34801561039757600080fd5b506103a061107b565b6040518082815260200191505060405180910390f35b3480156103c257600080fd5b50610405600480360360208110156103d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061109a565b005b34801561041357600080fd5b5061041c61126c565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b506104816004803603602081101561045557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611272565b6040518082815260200191505060405180910390f35b3480156104a357600080fd5b506104ac6112bd565b6040518082815260200191505060405180910390f35b3480156104ce57600080fd5b506104d76112c3565b6040518082815260200191505060405180910390f35b3480156104f957600080fd5b506105266004803603602081101561051057600080fd5b81019080803590602001909291905050506113b3565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b5061058b6004803603602081101561055f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a4565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b506105b66114ef565b6040518082815260200191505060405180910390f35b3480156105d857600080fd5b506105e16114fa565b005b3480156105ef57600080fd5b506106326004803603602081101561060657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116e6565b6040518082815260200191505060405180910390f35b34801561065457600080fd5b506106976004803603602081101561066b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611731565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156106ce57600080fd5b506106d7611761565b6040518082815260200191505060405180910390f35b3480156106f957600080fd5b50610702611767565b005b34801561071057600080fd5b506107536004803603602081101561072757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c34565b6040518082815260200191505060405180910390f35b610771611c4c565b005b34801561077f57600080fd5b506107c26004803603602081101561079657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e47565b6040518082815260200191505060405180910390f35b3480156107e457600080fd5b50610827600480360360208110156107fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e92565b6040518082815260200191505060405180910390f35b34801561084957600080fd5b50610852611fd7565b005b34801561086057600080fd5b5061086961224e565b005b34801561087757600080fd5b50610880612420565b6040518082815260200191505060405180910390f35b3480156108a257600080fd5b506108e5600480360360208110156108b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612426565b6040518082815260200191505060405180910390f35b34801561090757600080fd5b5061091061243e565b6040518082815260200191505060405180910390f35b34801561093257600080fd5b5061093b612444565b6040518082815260200191505060405180910390f35b34801561095d57600080fd5b5061098a6004803603602081101561097457600080fd5b810190808035906020019092919050505061244a565b6040518082815260200191505060405180910390f35b3480156109ac57600080fd5b506109b561253b565b005b600080821115156109c757600080fd5b600082848115156109d457fe5b0490508091505092915050565b60008082840190508381101515156109f857600080fd5b8091505092915050565b6658d15e176280003410151515610a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d696e20302e303235206574680000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610a8c33611e92565b90506000811115610adf573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610add573d6000803e3d6000fd5b505b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b485750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610bfc576000610b636064346109b790919063ffffffff16565b9050610bb781600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000610c07336116e6565b1415610c2a57610c2360016003546109e190919063ffffffff16565b6003819055505b6000610c536054610c456064346109b790919063ffffffff16565b61289590919063ffffffff16565b9050610ca9816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109e190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610d42346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109e190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009055610e27816004546109e190919063ffffffff16565b6004819055506000610e566002610e486032346109b790919063ffffffff16565b61289590919063ffffffff16565b9050610ecc8160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fa58160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc33334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150505050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b738345dfc331c020446ce8c123ea802d8562261eab73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061112757507370f5b907d743ad845f987b14a373c436ba1e905973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561119b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f6e6f74206465760000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b738345dfc331c020446ce8c123ea802d8562261eab73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112275780600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055611268565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555b5050565b60045481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60035481565b60006113ae60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113a060026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546109e190919063ffffffff16565b6109e190919063ffffffff16565b905090565b600080670dbd2fc137a30000905060006802b5e3af16b18800009050600068056bc75e2d6310000090506000680d8d726b7177a8000090506000601990506000602890506000603290506000603c90506000604b9050858b1015156114235780995050505050505050505061149f565b868b101580156114325750858b105b156114485781995050505050505050505061149f565b878b101580156114575750868b105b1561146d5782995050505050505050505061149f565b888b1015801561147c5750878b105b156114925783995050505050505050505061149f565b8499505050505050505050505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6658d15e1762800081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6e6f2064657620636f6d6d697373696f6e00000000000000000000000000000081525060200191505060405180910390fd5b6004546115e3823073ffffffffffffffffffffffffffffffffffffffff16316128d390919063ffffffff16565b10151515611659576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116e2573d6000803e3d6000fd5b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60055481565b600061177233611e92565b90506000811115156117ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f2070726f666974000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6117f46112c3565b61181e823073ffffffffffffffffffffffffffffffffffffffff16316128d390919063ffffffff16565b10151515611894576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555061192e816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546109e190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550611988816005546109e190919063ffffffff16565b60058190555060006119a46032836109b790919063ffffffff16565b9050611a1a8160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611af38160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc611b99605d611b8b6064876109b790919063ffffffff16565b61289590919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015611bc4573d6000803e3d6000fd5b507f9acd446c7c5d67289e9ab24bf8d274c3e60b36709aad13c9ccefec55a25c00bb3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60026020528060005260406000206000915090505481565b6000611c756002611c676032346109b790919063ffffffff16565b61289590919063ffffffff16565b9050611ceb8160026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dc48160026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e190919063ffffffff16565b60026000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e3e346008546109e190919063ffffffff16565b60088190555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600080611efd610e10611eef6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154426128d390919063ffffffff16565b6109b790919063ffffffff16565b90506000611f4b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546113b3565b90506000611f62828461289590919063ffffffff16565b9050611fcd81611fbf620186a06000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109b790919063ffffffff16565b61289590919063ffffffff16565b9350505050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515612093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f20636f6d6d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b61209b6112c3565b6120c5823073ffffffffffffffffffffffffffffffffffffffff16316128d390919063ffffffff16565b1015151561213b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055612193816006546109e190919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121df573d6000803e3d6000fd5b507ff00b94e6d3eae70f13396fc1316a95fffe65e4e4268f517278311cd9618e75e33382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000612259336114a4565b90506000811115156122d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f20696e766573746d656e747300000000000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055505061234a60016003546128d390919063ffffffff16565b600381905550612365816004546128d390919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156123b1573d6000803e3d6000fd5b507f2a14c6c4baf70f0f57eb7d8bed4856b2a7f80a238a2dce681b404e0cae9dce7b3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60075481565b60016020528060005260406000206000915090505481565b60065481565b60085481565b600080670dbd2fc137a30000905060006802b5e3af16b18800009050600068056bc75e2d6310000090506000680d8d726b7177a8000090506000603c9050600060609050600060789050600060909050600060b49050858b1015156124ba57809950505050505050505050612536565b868b101580156124c95750858b105b156124df57819950505050505050505050612536565b878b101580156124ee5750868b105b1561250457829950505050505050505050612536565b888b101580156125135750878b105b1561252957839950505050505050505050612536565b8499505050505050505050505b919050565b600061254633611e92565b90506000811115156125c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f2070726f666974000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6125c86112c3565b6125f2823073ffffffffffffffffffffffffffffffffffffffff16316128d390919063ffffffff16565b10151515612668576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f7420656e6f7567682066756e64730000000000000000000000000000000081525060200191505060405180910390fd5b600061269160546126836064856109b790919063ffffffff16565b61289590919063ffffffff16565b90506126e7816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546109e190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506127c6826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109e190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612820816004546109e190919063ffffffff16565b6004819055507f31b79d553a711214890a10f851808f023529bb2f0ce14b7954818f3746c8f1743383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000808314156128a857600090506128cd565b600082840290508284828115156128bb57fe5b041415156128c857600080fd5b809150505b92915050565b60008282111515156128e457600080fd5b60008284039050809150509291505056fea165627a7a7230582063117d1a7e156b2854ecd20d65ed828cd8a6dce5fb233f6fb44a606f298f75640029"
}