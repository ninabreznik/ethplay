{
  "address": "0x000000085824f23a070c2474442ed014c0e46b58",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NRM",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-12\n*/\n\npragma solidity 0.5.8;\n\n// ----------------------------------------------------------------------------\n// NRM token main contract (2019)\n//\n// Symbol       : NRM\n// Name         : Neuromachine Eternal\n// Total supply : 4.958.333.333 (burnable)\n// Decimals     : 18\n//\n// Telegram @SergeyKalich\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) { c = a + b; require(c >= a); }\n    function sub(uint a, uint b) internal pure returns (uint c) { require(b <= a); c = a - b; }\n    function mul(uint a, uint b) internal pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); }\n    function div(uint a, uint b) internal pure returns (uint c) { require(b > 0); c = a / b; }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint tokens, address token, bytes memory data) public;\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed from, address indexed to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address transferOwner) public onlyOwner {\n        require(transferOwner != newOwner);\n        newOwner = transferOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// NRM ERC20 Token - Neuromachine token contract\n// ----------------------------------------------------------------------------\ncontract NRM is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    bool public running = true;\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    address FreezeAddress = address(7);\n    uint FreezeTokens;\n    uint FreezeTokensReleaseTime = 1580169600;\n\n    // ------------------------------------------------------------------------\n    // Contract init. Set symbol, name, decimals and initial fixed supply\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"NRM\";\n        name = \"Neuromachine Eternal\";\n        decimals = 18;\n        _totalSupply = 4958333333 * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n\n    // ------------------------------------------------------------------------\n    // Freeze team tokens until January 28, 2020\n    // ------------------------------------------------------------------------\n        FreezeTokens = _totalSupply.mul(30).div(100);\n        balances[owner] = balances[owner].sub(FreezeTokens);\n        balances[FreezeAddress] = balances[FreezeAddress].add(FreezeTokens);\n        emit Transfer(owner, FreezeAddress, FreezeTokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Unfreeze team tokens after January 28, 2020\n    // ------------------------------------------------------------------------\n    function unfreezeTeamTokens(address unFreezeAddress) public onlyOwner returns (bool success) {\n        require(now >= FreezeTokensReleaseTime);\n        balances[FreezeAddress] = balances[FreezeAddress].sub(FreezeTokens);\n        balances[unFreezeAddress] = balances[unFreezeAddress].add(FreezeTokens);\n        emit Transfer(FreezeAddress, unFreezeAddress, FreezeTokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Start-stop contract functions:\n    // transfer, approve, transferFrom, approveAndCall\n    // ------------------------------------------------------------------------\n    modifier isRunning {\n        require(running);\n        _;\n    }\n\n    function startStop () public onlyOwner returns (bool success) {\n        if (running) { running = false; } else { running = true; }\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public isRunning returns (bool success) {\n        require(tokens <= balances[msg.sender]);\n        require(to != address(0));\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public isRunning returns (bool success) {\n        _approve(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Increase the amount of tokens that an owner allowed to a spender.\n    // ------------------------------------------------------------------------\n    function increaseAllowance(address spender, uint addedTokens) public isRunning returns (bool success) {\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedTokens));\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Decrease the amount of tokens that an owner allowed to a spender.\n    // ------------------------------------------------------------------------\n    function decreaseAllowance(address spender, uint subtractedTokens) public isRunning returns (bool success) {\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedTokens));\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes memory data) public isRunning returns (bool success) {\n        _approve(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Approve an address to spend another addresses' tokens.\n    // ------------------------------------------------------------------------\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0));\n        require(spender != address(0));\n        allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public isRunning returns (bool success) {\n        require(to != address(0));\n        balances[from] = balances[from].sub(tokens);\n        _approve(from, msg.sender, allowed[from][msg.sender].sub(tokens));\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Tokens burn\n    // ------------------------------------------------------------------------\n    function burnTokens(uint tokens) public returns (bool success) {\n        require(tokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        _totalSupply = _totalSupply.sub(tokens);\n        emit Transfer(msg.sender, address(0), tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Tokens multisend from owner only by owner\n    // ------------------------------------------------------------------------\n    function multisend(address[] memory to, uint[] memory values) public onlyOwner returns (uint) {\n        require(to.length == values.length);\n        require(to.length < 100);\n        uint sum;\n        for (uint j; j < values.length; j++) {\n            sum += values[j];\n        }\n        balances[owner] = balances[owner].sub(sum);\n        for (uint i; i < to.length; i++) {\n            balances[to[i]] = balances[to[i]].add(values[i]);\n            emit Transfer(owner, to[i], values[i]);\n        }\n        return(to.length);\n    }\n}",
  "bytecode": "608060405260018054600160a01b60ff02191674010000000000000000000000000000000000000000179055600880546001600160a01b0319166007179055635e2f7980600a553480156200005357600080fd5b50600080546001600160a01b031916331790556040805180820190915260038082527f4e524d00000000000000000000000000000000000000000000000000000000006020909201918252620000ac91600291620002db565b506040805180820190915260148082527f4e6575726f6d616368696e6520457465726e616c0000000000000000000000006020909201918252620000f391600391620002db565b5060048054601260ff19909116179081905560ff16600a0a6401278a2995026005819055600080546001600160a01b0390811682526006602090815260408084208590558354815195865290519216936000805160206200153f833981519152929081900390910190a362000194606462000180601e6005546200026960201b620011231790919060201c565b6200029360201b620011441790919060201c565b6009819055600080546001600160a01b0316815260066020908152604090912054620001cb92909162001076620002b4821b17901c565b600080546001600160a01b039081168252600660209081526040808420949094556009546008549092168352929091205462000213929091906200108b620002ca821b17901c565b600880546001600160a01b039081166000908152600660209081526040808320959095559254905460095485519081529451918316949216926000805160206200153f833981519152928290030190a362000380565b818102821580620002835750818382816200028057fe5b04145b6200028d57600080fd5b92915050565b6000808211620002a257600080fd5b818381620002ac57fe5b049392505050565b600082821115620002c457600080fd5b50900390565b818101828110156200028d57600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031e57805160ff19168380011785556200034e565b828001600101855582156200034e579182015b828111156200034e57825182559160200191906001019062000331565b506200035c92915062000360565b5090565b6200037d91905b808211156200035c576000815560010162000367565b90565b6111af80620003906000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063cae9ca511161007c578063cae9ca51146104c4578063d4ee1d901461057f578063d85bd52614610587578063dc39d06d1461058f578063dd62ed3e146105bb578063f2fde38b146105e957610142565b80638da5cb5b1461031957806395d89b411461033d578063a457c2d714610345578063a9059cbb14610371578063aad41a411461039d57610142565b8063313ce5671161010a578063313ce5671461027a57806339509351146102985780636d1b229d146102c457806370a08231146102e157806371098a351461030757806379ba50971461030f57610142565b806301d6e35b1461014757806306fdde0314610181578063095ea7b3146101fe57806318160ddd1461022a57806323b872dd14610244575b600080fd5b61016d6004803603602081101561015d57600080fd5b50356001600160a01b031661060f565b604080519115158252519081900360200190f35b6101896106f2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c35781810151838201526020016101ab565b50505050905090810190601f1680156101f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61016d6004803603604081101561021457600080fd5b506001600160a01b038135169060200135610780565b6102326107ae565b60408051918252519081900360200190f35b61016d6004803603606081101561025a57600080fd5b506001600160a01b038135811691602081013590911690604001356107b4565b6102826108cc565b6040805160ff9092168252519081900360200190f35b61016d600480360360408110156102ae57600080fd5b506001600160a01b0381351690602001356108d5565b61016d600480360360208110156102da57600080fd5b5035610929565b610232600480360360208110156102f757600080fd5b50356001600160a01b03166109b9565b61016d6109d4565b610317610a30565b005b610321610aab565b604080516001600160a01b039092168252519081900360200190f35b610189610aba565b61016d6004803603604081101561035b57600080fd5b506001600160a01b038135169060200135610b12565b61016d6004803603604081101561038757600080fd5b506001600160a01b038135169060200135610b66565b610232600480360360408110156103b357600080fd5b8101906020810181356401000000008111156103ce57600080fd5b8201836020820111156103e057600080fd5b8035906020019184602083028401116401000000008311171561040257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561045257600080fd5b82018360208201111561046457600080fd5b8035906020019184602083028401116401000000008311171561048657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c4c945050505050565b61016d600480360360608110156104da57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561050a57600080fd5b82018360208201111561051c57600080fd5b8035906020019184600183028401116401000000008311171561053e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e21945050505050565b610321610f33565b61016d610f42565b61016d600480360360408110156105a557600080fd5b506001600160a01b038135169060200135610f52565b610232600480360360408110156105d157600080fd5b506001600160a01b0381358116916020013516610ff7565b610317600480360360208110156105ff57600080fd5b50356001600160a01b0316611022565b600080546001600160a01b0316331461062757600080fd5b600a5442101561063657600080fd5b6009546008546001600160a01b03166000908152600660205260409020546106639163ffffffff61107616565b6008546001600160a01b0390811660009081526006602052604080822093909355600954918516815291909120546106a09163ffffffff61108b16565b6001600160a01b038084166000818152600660209081526040918290209490945560085460095482519081529151929493169260008051602061116483398151915292918290030190a3506001919050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b505050505081565b600154600090600160a01b900460ff1661079957600080fd5b6107a433848461109b565b5060015b92915050565b60055490565b600154600090600160a01b900460ff166107cd57600080fd5b6001600160a01b0383166107e057600080fd5b6001600160a01b038416600090815260066020526040902054610809908363ffffffff61107616565b6001600160a01b038516600090815260066020908152604080832093909355600781528282203380845291529190205461085491869161084f908663ffffffff61107616565b61109b565b6001600160a01b03831660009081526006602052604090205461087d908363ffffffff61108b16565b6001600160a01b03808516600081815260066020908152604091829020949094558051868152905191939288169260008051602061116483398151915292918290030190a35060019392505050565b60045460ff1681565b600154600090600160a01b900460ff166108ee57600080fd5b3360008181526007602090815260408083206001600160a01b03881684529091529020546107a49190859061084f908663ffffffff61108b16565b3360009081526006602052604081205482111561094557600080fd5b33600090815260066020526040902054610965908363ffffffff61107616565b33600090815260066020526040902055600554610988908363ffffffff61107616565b60055560408051838152905160009133916000805160206111648339815191529181900360200190a3506001919050565b6001600160a01b031660009081526006602052604090205490565b600080546001600160a01b031633146109ec57600080fd5b600154600160a01b900460ff1615610a135760018054600160a01b60ff0219169055610a2a565b60018054600160a01b60ff021916600160a01b1790555b50600190565b6001546001600160a01b03163314610a4757600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107785780601f1061074d57610100808354040283529160200191610778565b600154600090600160a01b900460ff16610b2b57600080fd5b3360008181526007602090815260408083206001600160a01b03881684529091529020546107a49190859061084f908663ffffffff61107616565b600154600090600160a01b900460ff16610b7f57600080fd5b33600090815260066020526040902054821115610b9b57600080fd5b6001600160a01b038316610bae57600080fd5b33600090815260066020526040902054610bce908363ffffffff61107616565b33600090815260066020526040808220929092556001600160a01b03851681522054610c00908363ffffffff61108b16565b6001600160a01b0384166000818152600660209081526040918290209390935580518581529051919233926000805160206111648339815191529281900390910190a350600192915050565b600080546001600160a01b03163314610c6457600080fd5b8151835114610c7257600080fd5b6064835110610c8057600080fd5b6000805b8351811015610cb257838181518110610c9957fe5b6020026020010151820191508080600101915050610c84565b50600080546001600160a01b0316815260066020526040902054610cdc908263ffffffff61107616565b600080546001600160a01b03168152600660205260408120919091555b8451811015610e1757610d60848281518110610d1157fe5b602002602001015160066000888581518110610d2957fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461108b90919063ffffffff16565b60066000878481518110610d7057fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550848181518110610da857fe5b60200260200101516001600160a01b03166000809054906101000a90046001600160a01b03166001600160a01b0316600080516020611164833981519152868481518110610df257fe5b60200260200101516040518082815260200191505060405180910390a3600101610cf9565b5050915192915050565b600154600090600160a01b900460ff16610e3a57600080fd5b610e4533858561109b565b604051600160e01b638f4ffcb102815233600482018181526024830186905230604484018190526080606485019081528651608486015286516001600160a01b038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610ec2578181015183820152602001610eaa565b50505050905090810190601f168015610eef5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b506001979650505050505050565b6001546001600160a01b031681565b600154600160a01b900460ff1681565b600080546001600160a01b03163314610f6a57600080fd5b6000805460408051600160e01b63a9059cbb0281526001600160a01b0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610fc457600080fd5b505af1158015610fd8573d6000803e3d6000fd5b505050506040513d6020811015610fee57600080fd5b50519392505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b6000546001600160a01b0316331461103957600080fd5b6001546001600160a01b038281169116141561105457600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008282111561108557600080fd5b50900390565b818101828110156107a857600080fd5b6001600160a01b0383166110ae57600080fd5b6001600160a01b0382166110c157600080fd5b6001600160a01b03808416600081815260076020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b81810282158061113b57508183828161113857fe5b04145b6107a857600080fd5b600080821161115257600080fd5b81838161115b57fe5b04939250505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820dd3cbdea223d143e0152ef625ee6a85041d8a0a0ee4621a3596124bf83c0ec4f0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}