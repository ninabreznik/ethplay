{
  "address": "0x2b78a837c37549539c62ab54a235a8e19fea812f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Cent.co: Wallet",
  "contractName": "CentWallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-06\n*/\n\npragma solidity ^0.4.25;\n\ncontract CentWallet {\n\n    struct Wallet {\n        uint256 balance;\n        mapping(address => bool) linked;\n        // prevent signature replay:\n        uint64 debitNonce;\n        uint64 withdrawNonce;\n    }\n\n    address[] public admins;\n\n    mapping(bytes32 => Wallet) private wallets;\n    mapping(address => bool) private isAdmin;\n\n    uint256 private escrowBalance;\n\n    modifier onlyAdmin {\n        require(isAdmin[msg.sender]);\n        _;\n    }\n\n    modifier onlyRootAdmin {\n        require(msg.sender == admins[0]);\n        _;\n    }\n\n    event Deposit(\n        bytes32 indexed walletID,\n        address indexed sender,\n        uint256 indexed value\n    );\n\n    event Link(\n        bytes32 indexed walletID,\n        address indexed agent\n    );\n\n    event Debit(\n        bytes32 indexed walletID,\n        uint256 indexed nonce,\n        uint256 indexed value\n    );\n\n    event Settle(\n        bytes32 indexed walletID,\n        uint256 indexed requestID,\n        uint256 indexed value\n    );\n\n    event Withdraw(\n        bytes32 indexed walletID,\n        uint256 indexed nonce,\n        uint256 indexed value,\n        address recipient\n    );\n\n    constructor() public\n    {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n//  PUBLIC CALLABLE BY ANYONE\n    /**\n     * Add funds to the wallet associated with an address + username\n     * Create a wallet if none exists.\n     */\n    function deposit(\n        bytes32 walletID) payable public\n    {\n        wallets[walletID].balance += msg.value;\n\n        emit Deposit(walletID, msg.sender, msg.value);\n    }\n\n//  PUBLIC CALLABLE BY ADMIN\n    /**\n     * Add an authorized signer to a wallet.\n     */\n    function link(\n        bytes32[] walletIDs,\n        bytes32[] nameIDs,\n        address[] agents,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == nameIDs.length &&\n            walletIDs.length == agents.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            address agent = agents[i];\n\n            address signer = getMessageSigner(\n                getLinkDigest(walletID, agent), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (wallet.linked[signer] || walletID == getWalletDigest(nameIDs[i], signer)) {\n                wallet.linked[agent] = true;\n\n                emit Link(walletID, agent);\n            }\n        }\n    }\n\n    /**\n     * Debit funds from a user's balance and add them to the escrow balance.\n     */\n    function debit(\n        bytes32[] walletIDs,\n        uint256[] values,\n        uint64[] nonces,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == values.length &&\n            walletIDs.length == nonces.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        uint256 additionalEscrow = 0;\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            uint256 value = values[i];\n            uint64 nonce = nonces[i];\n\n            address signer = getMessageSigner(\n                getDebitDigest(walletID, value, nonce), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (\n                wallet.debitNonce < nonce &&\n                wallet.balance >= value &&\n                wallet.linked[signer]\n            ) {\n                wallet.debitNonce = nonce;\n                wallet.balance -= value;\n\n                emit Debit(walletID, nonce, value);\n\n                additionalEscrow += value;\n            }\n        }\n\n        escrowBalance += additionalEscrow;\n    }\n\n    /**\n     * Withdraws funds from this contract, debiting the user's wallet.\n     */\n    function withdraw(\n        bytes32[] walletIDs,\n        address[] recipients,\n        uint256[] values,\n        uint64[] nonces,\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\n    {\n        require(\n            walletIDs.length == recipients.length &&\n            walletIDs.length == values.length &&\n            walletIDs.length == nonces.length &&\n            walletIDs.length == v.length &&\n            walletIDs.length == r.length &&\n            walletIDs.length == s.length\n        );\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            address recipient = recipients[i];\n            uint256 value = values[i];\n            uint64 nonce = nonces[i];\n\n            address signer = getMessageSigner(\n                getWithdrawDigest(walletID, recipient, value, nonce), v[i], r[i], s[i]\n            );\n\n            Wallet storage wallet = wallets[walletID];\n\n            if (\n                wallet.withdrawNonce < nonce &&\n                wallet.balance >= value &&\n                wallet.linked[signer] &&\n                recipient.send(value)\n            ) {\n                wallet.withdrawNonce = nonce;\n                wallet.balance -= value;\n\n                emit Withdraw(walletID, nonce, value, recipient);\n            }\n        }\n    }\n\n    /**\n     * Settles funds from admin escrow into user wallets.\n     */\n    function settle(\n        bytes32[] walletIDs,\n        uint256[] requestIDs,\n        uint256[] values) onlyAdmin public\n    {\n        require(\n            walletIDs.length == requestIDs.length &&\n            walletIDs.length == values.length\n        );\n\n        uint256 remainingEscrow = escrowBalance;\n\n        for (uint i = 0; i < walletIDs.length; i++) {\n            bytes32 walletID = walletIDs[i];\n            uint256 value = values[i];\n\n            require(value <= remainingEscrow);\n\n            wallets[walletID].balance += value;\n            remainingEscrow -= value;\n\n            emit Settle(walletID, requestIDs[i], value);\n        }\n\n        escrowBalance = remainingEscrow;\n    }\n\n//  PURE GETTERS - FOR SIGNATURE GENERATION / VERIFICATION\n    function getMessageSigner(\n        bytes32 message,\n        uint8 v, bytes32 r, bytes32 s) public pure returns(address)\n    {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedMessage = keccak256(\n            abi.encodePacked(prefix, message)\n        );\n        return ecrecover(prefixedMessage, v, r, s);\n    }\n\n    function getNameDigest(\n        string name) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(name));\n    }\n\n    function getWalletDigest(\n        bytes32 name,\n        address root) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            name, root\n        ));\n    }\n\n    function getLinkDigest(\n        bytes32 walletID,\n        address agent) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, agent\n        ));\n    }\n\n    function getDebitDigest(\n        bytes32 walletID,\n        uint256 value,\n        uint64 nonce) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, value, nonce\n        ));\n    }\n\n    function getWithdrawDigest(\n        bytes32 walletID,\n        address recipient,\n        uint256 value,\n        uint64 nonce) public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n            walletID, recipient, value, nonce\n        ));\n    }\n\n//  VIEW GETTERS - READ WALLET STATE\n    function getDebitNonce(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].debitNonce + 1;\n    }\n\n    function getWithdrawNonce(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].withdrawNonce + 1;\n    }\n\n    function getLinkStatus(\n        bytes32 walletID,\n        address member) public view returns (bool)\n    {\n        return wallets[walletID].linked[member];\n    }\n\n    function getBalance(\n        bytes32 walletID) public view returns (uint256)\n    {\n        return wallets[walletID].balance;\n    }\n\n    function getEscrowBalance() public view returns (uint256)\n    {\n      return escrowBalance;\n    }\n\n//  ADMIN MANAGEMENT\n    function addAdmin(\n        address newAdmin) onlyRootAdmin public\n    {\n        require(!isAdmin[newAdmin]);\n\n        isAdmin[newAdmin] = true;\n        admins.push(newAdmin);\n    }\n\n    function removeAdmin(\n        address oldAdmin) onlyRootAdmin public\n    {\n        require(isAdmin[oldAdmin] && admins[0] != oldAdmin);\n\n        bool found = false;\n        for (uint i = 1; i < admins.length - 1; i++) {\n            if (!found && admins[i] == oldAdmin) {\n                found = true;\n            }\n            if (found) {\n                admins[i] = admins[i + 1];\n            }\n        }\n\n        admins.length--;\n        isAdmin[oldAdmin] = false;\n    }\n\n    function changeRootAdmin(\n        address newRootAdmin) onlyRootAdmin public\n    {\n        if (isAdmin[newRootAdmin] && admins[0] != newRootAdmin) {\n            // Remove them & shorten the array so long as they are not currently root\n            removeAdmin(newRootAdmin);\n        }\n        admins[0] = newRootAdmin;\n        isAdmin[newRootAdmin] = true;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"requestIDs\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getMessageSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getLinkDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getNameDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRootAdmin\",\"type\":\"address\"}],\"name\":\"changeRootAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"getWithdrawDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"getDebitDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"root\",\"type\":\"address\"}],\"name\":\"getWalletDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"nameIDs\",\"type\":\"bytes32[]\"},{\"name\":\"agents\",\"type\":\"address[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getDebitNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEscrowBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getLinkStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Debit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600181810183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018054600160a060020a03191633908117909155825260026020526040909120805460ff1916909117905561190e806100796000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303612cb5811461011657806314bfd6d0146101df5780631785f53c146102135780632a856fcf146102345780632bfd91d4146103a65780633d44c476146103ca5780634eb933bf1461040057806362502fe7146105ab57806366eb463f146106045780636e7c1c2b14610625578063704802751461065957806371eb97101461067a5780638e739461146106a25780639dc4ca42146103ca578063b214faa5146106ba578063b5a030d8146106c5578063bb0c08b614610837578063c56e610e1461084f578063de9b33f914610864578063f8dcc3e01461087c575b600080fd5b34801561012257600080fd5b50604080516020600480358082013583810280860185019096528085526101dd95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506108b49650505050505050565b005b3480156101eb57600080fd5b506101f76004356109bd565b60408051600160a060020a039092168252519081900360200190f35b34801561021f57600080fd5b506101dd600160a060020a03600435166109e5565b34801561024057600080fd5b50604080516020600480358082013583810280860185019096528085526101dd95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b789650505050505050565b3480156103b257600080fd5b506101f760043560ff60243516604435606435610d7f565b3480156103d657600080fd5b506103ee600435600160a060020a0360243516610ee0565b60408051918252519081900360200190f35b34801561040c57600080fd5b50604080516020600480358082013583810280860185019096528085526101dd95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f7e9650505050505050565b3480156105b757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ee9436949293602493928401919081908401838280828437509497506111f19650505050505050565b34801561061057600080fd5b506101dd600160a060020a03600435166112bb565b34801561063157600080fd5b506103ee600435600160a060020a036024351660443567ffffffffffffffff606435166113ac565b34801561066557600080fd5b506101dd600160a060020a036004351661147e565b34801561068657600080fd5b506103ee60043560243567ffffffffffffffff60443516611543565b3480156106ae57600080fd5b506103ee6004356115f6565b6101dd600435611608565b3480156106d157600080fd5b50604080516020600480358082013583810280860185019096528085526101dd95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061164e9650505050505050565b34801561084357600080fd5b506103ee60043561180a565b34801561085b57600080fd5b506103ee611832565b34801561087057600080fd5b506103ee600435611839565b34801561088857600080fd5b506108a0600435600160a060020a036024351661186d565b604080519115158252519081900360200190f35b3360009081526002602052604081205481908190819060ff1615156108d857600080fd5b855187511480156108ea575084518751145b15156108f557600080fd5b6003549350600092505b86518310156109b257868381518110151561091657fe5b906020019060200201519150848381518110151561093057fe5b6020908102909101015190508381111561094957600080fd5b600082815260016020526040902080548201905585519381900393819087908590811061097257fe5b6020908102909101015160405184907f0cd738c9c0bbe501d6da72544aaef2b26bfdcbffa10507ff2755918321897c5690600090a46001909201916108ff565b505050600355505050565b60008054829081106109cb57fe5b600091825260209091200154600160a060020a0316905081565b6000806000808154811015156109f757fe5b600091825260209091200154600160a060020a03163314610a1757600080fd5b600160a060020a03831660009081526002602052604090205460ff168015610a6b575082600160a060020a0316600080815481101515610a5357fe5b600091825260209091200154600160a060020a031614155b1515610a7657600080fd5b506000905060015b60005460001901811015610b415781158015610ac5575082600160a060020a0316600082815481101515610aae57fe5b600091825260209091200154600160a060020a0316145b15610acf57600191505b8115610b39576000805460018301908110610ae657fe5b60009182526020822001548154600160a060020a03909116919083908110610b0a57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b600101610a7e565b6000805490610b5490600019830161189b565b505050600160a060020a03166000908152600260205260409020805460ff19169055565b3360009081526002602052604081205481908190819081908190819060ff161515610ba257600080fd5b8b518d51148015610bb457508a518d51145b8015610bc1575089518d51145b8015610bce575088518d51145b8015610bdb575087518d51145b1515610be657600080fd5b60009650600095505b8c51861015610d67578c86815181101515610c0657fe5b9060200190602002015194508b86815181101515610c2057fe5b9060200190602002015193508a86815181101515610c3a57fe5b906020019060200201519250610ca1610c54868686611543565b8b88815181101515610c6257fe5b906020019060200201518b89815181101515610c7a57fe5b906020019060200201518b8a815181101515610c9257fe5b90602001906020020151610d7f565b60008681526001602052604090206002810154919350915067ffffffffffffffff8085169116108015610cd5575080548411155b8015610cfb5750600160a060020a038216600090815260018201602052604090205460ff165b15610d5c5760028101805467ffffffffffffffff191667ffffffffffffffff85169081179091558154859003825560405185919087907f7268e507839e4153e67d3077766172d7413186c098053936a070dc179ad7938290600090a4958301955b600190950194610bef565b50506003805490950190945550505050505050505050565b604080518082018252601c8082527f19457468657265756d205369676e6564204d6573736167653a0a33320000000060208084019182529351600094859385938b939092019182918083835b60208310610dea5780518252601f199092019160209182019101610dcb565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310610e4a5780518252601f199092019160209182019101610e2b565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600080845283830180875282905260ff8e1684870152606084018d9052608084018c905294519097506001965060a080840196509194601f19820194509281900390910191865af1158015610eca573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b6040805160208082018590526c01000000000000000000000000600160a060020a0385160282840152825160348184030181526054909201928390528151600093918291908401908083835b60208310610f4b5780518252601f199092019160209182019101610f2c565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b3360009081526002602052604081205481908190819081908190819060ff161515610fa857600080fd5b8c518e51148015610fba57508b518e51145b8015610fc757508a518e51145b8015610fd4575089518e51145b8015610fe1575088518e51145b8015610fee575087518e51145b1515610ff957600080fd5b600096505b8d518710156111e1578d8781518110151561101557fe5b9060200190602002015195508c8781518110151561102f57fe5b9060200190602002015194508b8781518110151561104957fe5b9060200190602002015193508a8781518110151561106357fe5b9060200190602002015192506110bc61107e878787876113ac565b8b8981518110151561108c57fe5b906020019060200201518b8a8151811015156110a457fe5b906020019060200201518b8b815181101515610c9257fe5b60008781526001602052604090206002810154919350915067ffffffffffffffff80851668010000000000000000909204161080156110fc575080548411155b80156111225750600160a060020a038216600090815260018201602052604090205460ff165b801561114f5750604051600160a060020a0386169085156108fc029086906000818181858888f193505050505b156111d65760028101805467ffffffffffffffff85166801000000000000000081026fffffffffffffffff000000000000000019909216919091179091558154859003825560408051600160a060020a0388168152905186929189917f7b840614242a6f8bab9f3a654f6ce3aa212f8a4e3f3d3a9845a91bb891394cbc9181900360200190a45b600190960195610ffe565b5050505050505050505050505050565b6000816040516020018082805190602001908083835b602083106112265780518252601f199092019160209182019101611207565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106112895780518252601f19909201916020918201910161126a565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b60008054819081106112c957fe5b600091825260209091200154600160a060020a031633146112e957600080fd5b600160a060020a03811660009081526002602052604090205460ff16801561133d575080600160a060020a031660008081548110151561132557fe5b600091825260209091200154600160a060020a031614155b1561134b5761134b816109e5565b8060008081548110151561135b57fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03948516179055929091168152600290915260409020805460ff19166001179055565b6040805160208082018790526c01000000000000000000000000600160a060020a038716028284015260548201859052780100000000000000000000000000000000000000000000000067ffffffffffffffff85160260748301528251605c818403018152607c909201928390528151600093918291908401908083835b602083106114495780518252601f19909201916020918201910161142a565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600080548190811061148c57fe5b600091825260209091200154600160a060020a031633146114ac57600080fd5b600160a060020a03811660009081526002602052604090205460ff16156114d257600080fd5b600160a060020a03166000818152600260205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b604080516020808201869052818301859052780100000000000000000000000000000000000000000000000067ffffffffffffffff8516026060830152825160488184030181526068909201928390528151600093918291908401908083835b602083106115c25780518252601f1990920191602091820191016115a3565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b60009081526001602052604090205490565b60008181526001602052604080822080543490810190915590519091339184917f182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac91a450565b33600090815260026020526040812054819081908190819060ff16151561167457600080fd5b89518b51148015611686575088518b51145b8015611693575087518b51145b80156116a0575086518b51145b80156116ad575085518b51145b15156116b857600080fd5b600094505b8a518510156117fd578a858151811015156116d457fe5b90602001906020020151935088858151811015156116ee57fe5b9060200190602002015192506117456117078585610ee0565b898781518110151561171557fe5b90602001906020020151898881518110151561172d57fe5b906020019060200201518989815181101515610c9257fe5b6000858152600160208181526040808420600160a060020a038616855292830190915290912054919350915060ff168061179e575061179b8a8681518110151561178b57fe5b9060200190602002015183610ee0565b84145b156117f257600160a060020a038316600081815260018381016020526040808320805460ff19169092179091555186917fe96896758b540353b26660205100e2756a7e5495f07920d72859afc60e5f913691a35b6001909401936116bd565b5050505050505050505050565b60009081526001602081905260409091206002015467ffffffffffffffff9081169091011690565b6003545b90565b60009081526001602081905260409091206002015468010000000000000000900467ffffffffffffffff9081169091011690565b6000828152600160208181526040808420600160a060020a0386168552909201905290205460ff1692915050565b8154818355818111156118bf576000838152602090206118bf9181019083016118c4565b505050565b61183691905b808211156118de57600081556001016118ca565b50905600a165627a7a723058200c0c159cab950b01532c66a895c1a4da49a0fb8fc725f7a5d7a4871ad47b60ce0029"
}