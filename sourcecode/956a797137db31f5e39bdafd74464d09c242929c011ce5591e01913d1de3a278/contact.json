{
  "address": "0xba50933c268f567bdc86e1ac131be072c6b0b71a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ARPAToken",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity 0.5.4;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 internal _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the a\n     * specified account.\n     * @param initalOwner The address of the inital owner.\n     */\n    constructor (address initalOwner) internal {\n        _owner = initalOwner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ARPAToken\n * @dev ARPA is an ownable, mintable, pausable and burnable ERC20 token\n */\ncontract ARPAToken is ERC20, Ownable {\n    using SafeMath for uint;\n\n    string public constant name = \"ARPA Token\";\n    uint8 public constant decimals = 18;\n    string public constant symbol = \"ARPA\";\n    uint public constant maxSupply = 2 * 10**9 * 10**uint(decimals); // 2 billion\n    uint public constant initalSupply = 14 * 10**8 * 10**uint(decimals); // 1.4 billion\n    \n    bool public paused; // True when circulation is paused.\n\n    mapping (address => bool) public minter;\n\n    /**\n     * @dev Throws if called by any account that is not a minter.\n     */\n    modifier onlyMinter() {\n        require(minter[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Throws if called when the circulation is paused.\n     */\n    modifier whenNotPaused() {\n        require(paused == false);\n        _;\n    }\n\n    /**\n     * @dev The ARPAToken constructor sets the original manager of the contract to the a\n     * specified account, and send all the inital supply to it.\n     * @param manager The address of the first manager of this contract.\n     */\n    constructor(address manager) public Ownable(manager) {\n        _balances[manager] = initalSupply;\n        _totalSupply = initalSupply;\n    }\n\n    /**\n     * @dev Add an address to the minter list.\n     * @param minterAddress The address to be added as a minter.\n     */\n    function addMinter(address minterAddress) public onlyOwner {\n        minter[minterAddress] = true;\n    }\n\n    /**\n     * @dev Remove an address from the minter list.\n     * @param minterAddress The address to be removed from minters.\n     */\n    function removeMinter(address minterAddress) public onlyOwner {\n        minter[minterAddress] = false;\n    }\n\n    /**\n     * @dev Function to mint tokens by a minter\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     * @notice 30% of the ARPA token are issued by the mining process.\n     */\n    function mint(address to, uint value) public onlyMinter returns (bool) {\n        require(_totalSupply.add(value) <= maxSupply);\n        _mint(to, value);\n        return true;\n    }\n\n    /**\n     * @dev Function to pause all the circulation in the case of emergency.\n     */\n    function pause() public onlyOwner {\n        paused = true;\n    }\n\n    /**\n     * @dev Function to recover all the circulation from emergency.\n     */\n    function unpause() public onlyOwner {\n        paused = false;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610e4d8339810180604052602081101561003057600080fd5b505160038054600160a060020a031916600160a060020a0380841691909117918290556040518392909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600160a060020a031660009081526020819052604090206b04860d8812f0b3887800000090819055600255610d8e806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106101ab576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100fb578063983b2d56116100b4578063ce4a7a831161008e578063ce4a7a83146104c2578063d5abeb01146104ca578063dd62ed3e146104d2578063f2fde38b14610500576101ab565b8063983b2d5614610444578063a457c2d71461046a578063a9059cbb14610496576101ab565b8063715018a6146103d457806379cc6790146103dc5780638456cb59146104085780638da5cb5b146104105780638f32d59b1461043457806395d89b411461043c576101ab565b8063395093511161016857806340c10f191161014257806340c10f191461035d57806342966c68146103895780635c975abb146103a657806370a08231146103ae576101ab565b806339509351146103035780633dd08c381461032f5780633f4ba83a14610355576101ab565b806306fdde03146101b0578063095ea7b31461022d57806318160ddd1461026d57806323b872dd146102875780633092afd5146102bd578063313ce567146102e5575b600080fd5b6101b8610526565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f25781810151838201526020016101da565b50505050905090810190601f16801561021f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102596004803603604081101561024357600080fd5b50600160a060020a03813516906020013561055d565b604080519115158252519081900360200190f35b610275610588565b60408051918252519081900360200190f35b6102596004803603606081101561029d57600080fd5b50600160a060020a0381358116916020810135909116906040013561058e565b6102e3600480360360208110156102d357600080fd5b5035600160a060020a03166105bb565b005b6102ed6105ef565b6040805160ff9092168252519081900360200190f35b6102596004803603604081101561031957600080fd5b50600160a060020a0381351690602001356105f4565b6102596004803603602081101561034557600080fd5b5035600160a060020a0316610618565b6102e361062d565b6102596004803603604081101561037357600080fd5b50600160a060020a038135169060200135610660565b6102e36004803603602081101561039f57600080fd5b50356106bd565b6102596106ca565b610275600480360360208110156103c457600080fd5b5035600160a060020a03166106da565b6102e36106f5565b6102e3600480360360408110156103f257600080fd5b50600160a060020a03813516906020013561075f565b6102e361076d565b6104186107a6565b60408051600160a060020a039092168252519081900360200190f35b6102596107b5565b6101b86107c6565b6102e36004803603602081101561045a57600080fd5b5035600160a060020a03166107fd565b6102596004803603604081101561048057600080fd5b50600160a060020a038135169060200135610834565b610259600480360360408110156104ac57600080fd5b50600160a060020a038135169060200135610858565b61027561087c565b61027561088c565b610275600480360360408110156104e857600080fd5b50600160a060020a038135811691602001351661089c565b6102e36004803603602081101561051657600080fd5b5035600160a060020a03166108c7565b60408051808201909152600a81527f4152504120546f6b656e00000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561057757600080fd5b61058183836108e3565b9392505050565b60025490565b60035460009060a060020a900460ff16156105a857600080fd5b6105b38484846108f0565b949350505050565b6105c36107b5565b15156105ce57600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b601281565b60035460009060a060020a900460ff161561060e57600080fd5b6105818383610947565b60046020526000908152604090205460ff1681565b6106356107b5565b151561064057600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b3360009081526004602052604081205460ff16151561067e57600080fd5b6002546b06765c793fa10079d00000009061069f908463ffffffff61098316565b11156106aa57600080fd5b6106b48383610995565b50600192915050565b6106c73382610a3f565b50565b60035460a060020a900460ff1681565b600160a060020a031660009081526020819052604090205490565b6106fd6107b5565b151561070857600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6107698282610ae8565b5050565b6107756107b5565b151561078057600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b600354600160a060020a031690565b600354600160a060020a0316331490565b60408051808201909152600481527f4152504100000000000000000000000000000000000000000000000000000000602082015281565b6108056107b5565b151561081057600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b60035460009060a060020a900460ff161561084e57600080fd5b6105818383610b2d565b60035460009060a060020a900460ff161561087257600080fd5b6105818383610b69565b6b04860d8812f0b3887800000081565b6b06765c793fa10079d000000081565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6108cf6107b5565b15156108da57600080fd5b6106c781610b76565b60006106b4338484610bf4565b60006108fd848484610c80565b600160a060020a03841660009081526001602090815260408083203380855292529091205461093d918691610938908663ffffffff610d4d16565b610bf4565b5060019392505050565b336000818152600160209081526040808320600160a060020a038716845290915281205490916106b4918590610938908663ffffffff61098316565b60008282018381101561058157600080fd5b600160a060020a03821615156109aa57600080fd5b6002546109bd908263ffffffff61098316565b600255600160a060020a0382166000908152602081905260409020546109e9908263ffffffff61098316565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0382161515610a5457600080fd5b600254610a67908263ffffffff610d4d16565b600255600160a060020a038216600090815260208190526040902054610a93908263ffffffff610d4d16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b610af28282610a3f565b600160a060020a038216600090815260016020908152604080832033808552925290912054610769918491610938908563ffffffff610d4d16565b336000818152600160209081526040808320600160a060020a038716845290915281205490916106b4918590610938908663ffffffff610d4d16565b60006106b4338484610c80565b600160a060020a0381161515610b8b57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610c0957600080fd5b600160a060020a0383161515610c1e57600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a0382161515610c9557600080fd5b600160a060020a038316600090815260208190526040902054610cbe908263ffffffff610d4d16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610cf3908263ffffffff61098316565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610d5c57600080fd5b5090039056fea165627a7a723058205eafaecbfa042d1cb9ed16ea1338bbdc069be6470e748462697593dc5208a4510029000000000000000000000000b29306da849201c350cefaa4cfd891f80d23bdba",
  "constructorArguments": "000000000000000000000000b29306da849201c350cefaa4cfd891f80d23bdba"
}