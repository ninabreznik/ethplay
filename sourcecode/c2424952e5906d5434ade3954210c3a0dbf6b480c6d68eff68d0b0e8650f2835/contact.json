{
  "address": "0xda700511935407f50a73b91d78f2b89bf6d58828",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZabToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.4.23;\n\n// ----------------------------------------------------------------------------\n//\n// ZAB token public sale contract\n//\n// For details, please visit: http://ZAB.io\n//\n//\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n//\n// SafeMath\n//\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n\n}\n\n// ----------------------------------------------------------------------------\n//\n// Owned\n//\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n    address public owner;\n    address public newOwner;\n\n    mapping(address => bool) public isAdmin;\n\n    event OwnershipTransferProposed(address indexed _from, address indexed _to);\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n    event AdminChange(address indexed _admin, bool _status);\n\n    modifier onlyOwner {require(msg.sender == owner); _;}\n    modifier onlyAdmin {require(isAdmin[msg.sender]); _;}\n\n    constructor() public {\n        owner = msg.sender;\n        isAdmin[owner] = true;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0x0));\n        emit OwnershipTransferProposed(owner, _newOwner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function addAdmin(address _a) public onlyOwner {\n        require(isAdmin[_a] == false);\n        isAdmin[_a] = true;\n        emit AdminChange(_a, true);\n    }\n\n    function removeAdmin(address _a) public onlyOwner {\n        require(isAdmin[_a] == true);\n        isAdmin[_a] = false;\n        emit AdminChange(_a, false);\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// Wallet\n//\n// ----------------------------------------------------------------------------\n\ncontract Wallet is Owned {\n\n    address public wallet;\n\n    event WalletUpdated(address newWallet);\n\n    constructor() public {\n        wallet = owner;\n    }\n\n    function setWallet(address _wallet) public onlyOwner {\n        require(_wallet != address(0x0));\n        wallet = _wallet;\n        emit WalletUpdated(_wallet);\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC20Interface\n//\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function totalSupply() public view returns (uint);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC Token Standard #20\n//\n// ----------------------------------------------------------------------------\n\ncontract ERC20Token is ERC20Interface, Owned {\n\n    using SafeMath for uint;\n\n    uint public tokensIssuedTotal;\n    mapping(address => uint) balances;\n    mapping(address => mapping (address => uint)) allowed;\n\n    function totalSupply() public view returns (uint) {\n        return tokensIssuedTotal;\n    }\n    // Includes BOTH locked AND unlocked tokens\n\n    function balanceOf(address _owner) public view returns (uint) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint _amount) public returns (bool) {\n        require(_to != 0x0);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint _amount) public returns (bool) {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n        require(_to != 0x0);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// LockSlots\n//\n// ----------------------------------------------------------------------------\n\ncontract LockSlots is ERC20Token {\n\n    using SafeMath for uint;\n\n    uint public constant LOCK_SLOTS = 5;\n    mapping(address => uint[LOCK_SLOTS]) public lockTerm;\n    mapping(address => uint[LOCK_SLOTS]) public lockAmnt;\n    mapping(address => bool) public mayHaveLockedTokens;\n\n    event RegisteredLockedTokens(address indexed account, uint indexed idx, uint tokens, uint term);\n\n    function registerLockedTokens(address _account, uint _tokens, uint _term) internal returns (uint idx) {\n        require(_term > now, \"lock term must be in the future\");\n\n        // find a slot (clean up while doing this)\n        // use either the existing slot with the exact same term,\n        // of which there can be at most one, or the first empty slot\n        idx = 9999;\n        uint[LOCK_SLOTS] storage term = lockTerm[_account];\n        uint[LOCK_SLOTS] storage amnt = lockAmnt[_account];\n        for (uint i; i < LOCK_SLOTS; i++) {\n            if (term[i] < now) {\n                term[i] = 0;\n                amnt[i] = 0;\n                if (idx == 9999) idx = i;\n            }\n            if (term[i] == _term) idx = i;\n        }\n\n        // fail if no slot was found\n        require(idx != 9999, \"registerLockedTokens: no available slot found\");\n\n        // register locked tokens\n        if (term[idx] == 0) term[idx] = _term;\n        amnt[idx] = amnt[idx].add(_tokens);\n        mayHaveLockedTokens[_account] = true;\n        emit RegisteredLockedTokens(_account, idx, _tokens, _term);\n    }\n\n    // public view functions\n\n    function lockedTokens(address _account) public view returns (uint) {\n        if (!mayHaveLockedTokens[_account]) return 0;\n        return pNumberOfLockedTokens(_account);\n    }\n\n    function unlockedTokens(address _account) public view returns (uint) {\n        return balances[_account].sub(lockedTokens(_account));\n    }\n\n    function isAvailableLockSlot(address _account, uint _term) public view returns (bool) {\n        if (!mayHaveLockedTokens[_account]) return true;\n        if (_term < now) return true;\n        uint[LOCK_SLOTS] storage term = lockTerm[_account];\n        for (uint i; i < LOCK_SLOTS; i++) {\n            if (term[i] < now || term[i] == _term) return true;\n        }\n        return false;\n    }\n\n    // internal and private functions\n\n    function unlockedTokensInternal(address _account) internal returns (uint) {\n        // updates mayHaveLockedTokens if necessary\n        if (!mayHaveLockedTokens[_account]) return balances[_account];\n        uint locked = pNumberOfLockedTokens(_account);\n        if (locked == 0) mayHaveLockedTokens[_account] = false;\n        return balances[_account].sub(locked);\n    }\n\n    function pNumberOfLockedTokens(address _account) private view returns (uint locked) {\n        uint[LOCK_SLOTS] storage term = lockTerm[_account];\n        uint[LOCK_SLOTS] storage amnt = lockAmnt[_account];\n        for (uint i; i < LOCK_SLOTS; i++) {\n            if (term[i] >= now) locked = locked.add(amnt[i]);\n        }\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ZabIcoDates\n//\n// ----------------------------------------------------------------------------\n\ncontract ZabIcoDates is Owned {\n\n    uint public dateMainStart = 1556524800; // 04/29/2019 @ 8:00am (UTC)\n    uint public dateMainEnd   = 1556611200; // 04/30/2019 @ 8:00am (UTC)\n    uint public constant DATE_LIMIT = 1556524800 + 180 days; ///AFTER DME\n\n    event IcoDateUpdated(uint id, uint unixts);\n\n    // check dates\n\n    modifier checkDateOrder {\n      _ ;\n      require ( dateMainStart < dateMainEnd ) ;\n      require ( dateMainEnd < DATE_LIMIT ) ;\n    }\n\n    constructor() public checkDateOrder() {\n        require(now < dateMainStart);\n    }\n\n    // set ico dates\n\n    function setDateMainStart(uint _unixts) public onlyOwner checkDateOrder {\n        require(now < _unixts && now < dateMainStart);\n        dateMainStart = _unixts;\n        emit IcoDateUpdated(1, _unixts);\n    }\n\n    function setDateMainEnd(uint _unixts) public onlyOwner checkDateOrder {\n        require(now < _unixts && now < dateMainEnd);\n        dateMainEnd = _unixts;\n        emit IcoDateUpdated(2, _unixts);\n    }\n\n    // where are we? Passed first day or not?\n\n    function isMainFirstDay() public view returns (bool) {\n        if (now > dateMainStart && now <= dateMainStart + 1 days) return true;\n        return false;\n    }\n\n    function isMain() public view returns (bool) {\n        if (now > dateMainStart && now < dateMainEnd) return true;\n        return false;\n    }\n\n}\n\n// ----------------------------------------------------------------------------\n//\n// Zab public token sale\n//\n// ----------------------------------------------------------------------------\n\ncontract ZabToken is ERC20Token, Wallet, LockSlots, ZabIcoDates {\n\n    // Utility variable\n\n    uint constant E18 = 10**18;\n\n    // Basic token data\n\n    string public constant name = \"ZAB Token\";\n    string public constant symbol = \"ZAB\";\n    uint8 public constant decimals = 18;\n\n    // Token number of possible tokens in existance\n\n    uint public constant MAX_TOTAL_TOKEN_SUPPLY = 100 * E18;\n\n\n    // crowdsale parameters\n    // Opening ETH Rate: USD$463.28\n    // Therefore, 1 ETH = 11582 ZAB\n\n\n    uint public tokensPerEth = 100;\n\n    // USD$2,000,000/463.28 = 4317.043668 ether\n    // 4317.043668 ether/2551 addresses = 1.692294656 ether per address for the first 24 hours\n\n    uint public constant MINIMUM_CONTRIBUTION = 0.02 ether;\n    uint public constant MAXIMUM_FIRST_DAY_CONTRIBUTION = 0.05 ether; /// amount token per bayer\n\n    uint public constant TOKEN_MAIN_CAP = 20 * E18; /// How much you would sale in token sale\n\n    bool public tokensTradeable;\n\n    // whitelisting\n\n    mapping(address => bool) public whitelist;\n    uint public numberWhitelisted;\n\n    // track main sale\n\n    uint public tokensMain;\n    mapping(address => uint) public balancesMain;\n\n    uint public totalEthContributed;\n    mapping(address => uint) public ethContributed;\n\n    // tracking tokens minted\n\n    uint public tokensMinted;\n    mapping(address => uint) public balancesMinted;\n    mapping(address => mapping(uint => uint)) public balancesMintedByType;\n\n    // migration variable\n\n    bool public isMigrationPhaseOpen;\n\n    // Events ---------------------------------------------\n\n    event UpdatedTokensPerEth(uint tokensPerEth);\n    event Whitelisted(address indexed account, uint countWhitelisted);\n    event TokensMinted(uint indexed mintType, address indexed account, uint tokens, uint term);\n    event RegisterContribution(address indexed account, uint tokensIssued, uint ethContributed, uint ethReturned);\n    event TokenExchangeRequested(address indexed account, uint tokens);\n\n    // Basic Functions ------------------------------------\n\n    constructor() public {}\n\n    function () public payable {\n        buyTokens();\n    }\n\n    // Information functions\n\n\n    function availableToMint() public view returns (uint) {\n        return MAX_TOTAL_TOKEN_SUPPLY.sub(TOKEN_MAIN_CAP).sub(tokensMinted);\n    }\n\n    function firstDayTokenLimit() public view returns (uint) {\n        return ethToTokens(MAXIMUM_FIRST_DAY_CONTRIBUTION);\n    }\n\n    function ethToTokens(uint _eth) public view returns (uint tokens) {\n        tokens = _eth.mul(tokensPerEth);\n    }\n\n    function tokensToEth(uint _tokens) public view returns (uint eth) {\n        eth = _tokens / tokensPerEth;\n    }\n\n    // Admin functions\n\n    function addToWhitelist(address _account) public onlyAdmin {\n        pWhitelist(_account);\n    }\n\n    function addToWhitelistMultiple(address[] _addresses) public onlyAdmin {\n        for (uint i; i < _addresses.length; i++) {\n            pWhitelist(_addresses[i]);\n        }\n    }\n\n    function pWhitelist(address _account) internal {\n        if (whitelist[_account]) return;\n        whitelist[_account] = true;\n        numberWhitelisted = numberWhitelisted.add(1);\n        emit Whitelisted(_account, numberWhitelisted);\n    }\n\n    // Owner functions ------------------------------------\n\n    function updateTokensPerEth(uint _tokens_per_eth) public onlyOwner {\n        require(now < dateMainStart);\n        tokensPerEth = _tokens_per_eth;\n        emit UpdatedTokensPerEth(tokensPerEth);\n    }\n\n    // Only owner can make tokens tradable at any time, or if the date is\n    // greater than the end of the mainsale date plus 20 weeks, allow\n    // any caller to make tokensTradeable.\n\n    function makeTradeable() public {\n        require(msg.sender == owner || now > dateMainEnd + 20 weeks);\n        tokensTradeable = true;\n    }\n\n    function openMigrationPhase() public onlyOwner {\n        require(now > dateMainEnd);\n        isMigrationPhaseOpen = true;\n    }\n\n    // Token minting --------------------------------------\n\n    function mintTokens(uint _mint_type, address _account, uint _tokens) public onlyOwner {\n        pMintTokens(_mint_type, _account, _tokens, 0);\n    }\n\n    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n        require(_accounts.length == _tokens.length);\n        for (uint i; i < _accounts.length; i++) {\n            pMintTokens(_mint_type, _accounts[i], _tokens[i], 0);\n        }\n    }\n\n    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n        pMintTokens(_mint_type, _account, _tokens, _term);\n    }\n\n    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n        require(_accounts.length == _tokens.length);\n        require(_accounts.length == _terms.length);\n        for (uint i; i < _accounts.length; i++) {\n            pMintTokens(_mint_type, _accounts[i], _tokens[i], _terms[i]);\n        }\n    }\n\n    function pMintTokens(uint _mint_type, address _account, uint _tokens, uint _term) private {\n        require(whitelist[_account]);\n        require(_account != 0x0);\n        require(_tokens > 0);\n        require(_tokens <= availableToMint(), \"not enough tokens available to mint\");\n        require(_term == 0 || _term > now, \"either without lock term, or lock term must be in the future\");\n\n        // register locked tokens (will throw if no slot is found)\n        if (_term > 0) registerLockedTokens(_account, _tokens, _term);\n\n        // update\n        balances[_account] = balances[_account].add(_tokens);\n        balancesMinted[_account] = balancesMinted[_account].add(_tokens);\n        balancesMintedByType[_account][_mint_type] = balancesMintedByType[_account][_mint_type].add(_tokens);\n        tokensMinted = tokensMinted.add(_tokens);\n        tokensIssuedTotal = tokensIssuedTotal.add(_tokens);\n\n        // log event\n        emit Transfer(0x0, _account, _tokens);\n        emit TokensMinted(_mint_type, _account, _tokens, _term);\n    }\n\n    // Main sale ------------------------------------------\n\n    function buyTokens() private {\n\n        require(isMain());\n        require(msg.value >= MINIMUM_CONTRIBUTION);\n        require(whitelist[msg.sender]);\n\n        uint tokens_available = TOKEN_MAIN_CAP.sub(tokensMain);\n\n        // adjust tokens_available on first day, if necessary\n        if (isMainFirstDay()) {\n            uint tokens_available_first_day = firstDayTokenLimit().sub(balancesMain[msg.sender]);\n            if (tokens_available_first_day < tokens_available) {\n                tokens_available = tokens_available_first_day;\n            }\n        }\n\n        require (tokens_available > 0);\n\n        uint tokens_requested = ethToTokens(msg.value);\n        uint tokens_issued = tokens_requested;\n\n        uint eth_contributed = msg.value;\n        uint eth_returned;\n\n        if (tokens_requested > tokens_available) {\n            tokens_issued = tokens_available;\n            eth_returned = tokensToEth(tokens_requested.sub(tokens_available));\n            eth_contributed = msg.value.sub(eth_returned);\n        }\n\n        balances[msg.sender] = balances[msg.sender].add(tokens_issued);\n        balancesMain[msg.sender] = balancesMain[msg.sender].add(tokens_issued);\n        tokensMain = tokensMain.add(tokens_issued);\n        tokensIssuedTotal = tokensIssuedTotal.add(tokens_issued);\n\n        ethContributed[msg.sender] = ethContributed[msg.sender].add(eth_contributed);\n        totalEthContributed = totalEthContributed.add(eth_contributed);\n\n        // ether transfers\n        if (eth_returned > 0) msg.sender.transfer(eth_returned);\n        wallet.transfer(eth_contributed);\n\n        // log\n        emit Transfer(0x0, msg.sender, tokens_issued);\n        emit RegisterContribution(msg.sender, tokens_issued, eth_contributed, eth_returned);\n    }\n\n    // Token exchange / migration to new platform ---------\n\n    function requestTokenExchangeMax() public {\n        requestTokenExchange(unlockedTokensInternal(msg.sender));\n    }\n\n    function requestTokenExchange(uint _tokens) public {\n        require(isMigrationPhaseOpen);\n        require(_tokens > 0 && _tokens <= unlockedTokensInternal(msg.sender));\n        balances[msg.sender] = balances[msg.sender].sub(_tokens);\n        tokensIssuedTotal = tokensIssuedTotal.sub(_tokens);\n        emit Transfer(msg.sender, 0x0, _tokens);\n        emit TokenExchangeRequested(msg.sender, _tokens);\n    }\n\n    // ERC20 functions -------------------\n\n    /* Transfer out any accidentally sent ERC20 tokens */\n\n    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\n        return ERC20Interface(_token_address).transfer(owner, _amount);\n    }\n\n    /* Override \"transfer\" */\n\n    function transfer(address _to, uint _amount) public returns (bool success) {\n        require(tokensTradeable);\n        require(_amount <= unlockedTokensInternal(msg.sender));\n        return super.transfer(_to, _amount);\n    }\n\n    /* Multiple token transfers from one address to save gas */\n\n    function transferMultiple(address[] _addresses, uint[] _amounts) external {\n        require(_addresses.length <= 100);\n        require(_addresses.length == _amounts.length);\n\n        // do the transfers\n        for (uint j; j < _addresses.length; j++) {\n            transfer(_addresses[j], _amounts[j]);\n        }\n\n    }\n\n}",
  "bytecode": "6080604052635cc6af00600a55635cc80080600b556064600c553480156200002657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a54421015156200015357600080fd5b600b54600a541015156200016657600080fd5b635db3fd00600b541015156200017b57600080fd5b61442d806200018b6000396000f30060806040526004361061030c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063068ae02b1461031657806306fdde0314610341578063095ea7b3146103d15780631785f53c1461043657806318160ddd1461047957806323b872dd146104a457806324d7806c14610529578063282c3cf7146105845780632c2622db146105af578063313ce567146105da57806332e785af1461060b5780633bba340c146106625780633deaf6d41461068d5780634104044b146106b857806343e7e4da146107195780634cd2c47b1461080f578063521eb27314610870578063531163c1146108c75780635eb7413a146108f25780635f538fd414610949578063604269d114610960578063632e082a1461098f5780636b8f155a146109be5780636de9f32b146109e95780637048027514610a1457806370a0823114610a5757806374601c3c14610aae57806379ba509714610ad957806379ca9ad414610af0578063836115fe14610b31578063837b68c814610b8857806384ef077814610bb5578063897e47f514610be05780638d006d1114610c0d5780638d0bba0314610c6e5780638d6819be14610c995780638da5cb5b14610cf05780638e2a219214610d475780638fe6677d14610d9e57806395d89b4114610e045780639981bd6114610e945780639b19251a14610eab5780639ea407be14610f06578063a03fb4c014610f33578063a05fccef14610f4a578063a4c8932214610f9d578063a9059cbb14610fde578063aa63dea414611043578063ad4018421461106e578063c1b728b51461109b578063c408efba1461114e578063cb2822531461117d578063cbdc5aa4146111a8578063cbdd69b5146111d7578063d4ee1d9014611202578063d8690c2214611259578063dc39d06d146112be578063dd2d4ea014611323578063dd62ed3e1461134e578063deaa59df146113c5578063e184d8c814611408578063e43252d714611469578063e74f8eff146114ac578063f2fde38b146114d7578063f49e1e391461151a578063f96f5b3514611575575b6103146115cc565b005b34801561032257600080fd5b5061032b611acb565b6040518082815260200191505060405180910390f35b34801561034d57600080fd5b50610356611ad3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039657808201518184015260208101905061037b565b50505050905090810190601f1680156103c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103dd57600080fd5b5061041c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b0c565b604051808215151515815260200191505060405180910390f35b34801561044257600080fd5b50610477600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bfe565b005b34801561048557600080fd5b5061048e611d66565b6040518082815260200191505060405180910390f35b3480156104b057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d70565b604051808215151515815260200191505060405180910390f35b34801561053557600080fd5b5061056a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612040565b604051808215151515815260200191505060405180910390f35b34801561059057600080fd5b50610599612060565b6040518082815260200191505060405180910390f35b3480156105bb57600080fd5b506105c461206f565b6040518082815260200191505060405180910390f35b3480156105e657600080fd5b506105ef612074565b604051808260ff1660ff16815260200191505060405180910390f35b34801561061757600080fd5b5061064c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612079565b6040518082815260200191505060405180910390f35b34801561066e57600080fd5b50610677612091565b6040518082815260200191505060405180910390f35b34801561069957600080fd5b506106a2612097565b6040518082815260200191505060405180910390f35b3480156106c457600080fd5b5061071760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506120a2565b005b34801561072557600080fd5b5061080d6004803603810190808035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061210f565b005b34801561081b57600080fd5b5061085a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121fb565b6040518082815260200191505060405180910390f35b34801561087c57600080fd5b50610885612222565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108d357600080fd5b506108dc612248565b6040518082815260200191505060405180910390f35b3480156108fe57600080fd5b50610933600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612257565b6040518082815260200191505060405180910390f35b34801561095557600080fd5b5061095e6122c6565b005b34801561096c57600080fd5b5061097561234e565b604051808215151515815260200191505060405180910390f35b34801561099b57600080fd5b506109a4612378565b604051808215151515815260200191505060405180910390f35b3480156109ca57600080fd5b506109d36123a8565b6040518082815260200191505060405180910390f35b3480156109f557600080fd5b506109fe6123ae565b6040518082815260200191505060405180910390f35b348015610a2057600080fd5b50610a55600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123b4565b005b348015610a6357600080fd5b50610a98600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061251c565b6040518082815260200191505060405180910390f35b348015610aba57600080fd5b50610ac3612565565b6040518082815260200191505060405180910390f35b348015610ae557600080fd5b50610aee6125a9565b005b348015610afc57600080fd5b50610b1b60048036038101908080359060200190929190505050612706565b6040518082815260200191505060405180910390f35b348015610b3d57600080fd5b50610b72600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061271d565b6040518082815260200191505060405180910390f35b348015610b9457600080fd5b50610bb360048036038101908080359060200190929190505050612780565b005b348015610bc157600080fd5b50610bca61290f565b6040518082815260200191505060405180910390f35b348015610bec57600080fd5b50610c0b60048036038101908080359060200190929190505050612915565b005b348015610c1957600080fd5b50610c58600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506129fb565b6040518082815260200191505060405180910390f35b348015610c7a57600080fd5b50610c83612a20565b6040518082815260200191505060405180910390f35b348015610ca557600080fd5b50610cee60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a2b565b005b348015610cfc57600080fd5b50610d05612a98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d5357600080fd5b50610d88600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612abd565b6040518082815260200191505060405180910390f35b348015610daa57600080fd5b50610e0260048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612ad5565b005b348015610e1057600080fd5b50610e19612b6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e59578082015181840152602081019050610e3e565b50505050905090810190601f168015610e865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ea057600080fd5b50610ea9612ba3565b005b348015610eb757600080fd5b50610eec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bb6565b604051808215151515815260200191505060405180910390f35b348015610f1257600080fd5b50610f3160048036038101908080359060200190929190505050612bd6565b005b348015610f3f57600080fd5b50610f48612c84565b005b348015610f5657600080fd5b50610f9b600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050612d0d565b005b348015610fa957600080fd5b50610fc860048036038101908080359060200190929190505050612d9f565b6040518082815260200191505060405180910390f35b348015610fea57600080fd5b50611029600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dbd565b604051808215151515815260200191505060405180910390f35b34801561104f57600080fd5b50611058612e03565b6040518082815260200191505060405180910390f35b34801561107a57600080fd5b5061109960048036038101908080359060200190929190505050612e09565b005b3480156110a757600080fd5b5061114c600480360381019080803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612eef565b005b34801561115a57600080fd5b50611163612fb4565b604051808215151515815260200191505060405180910390f35b34801561118957600080fd5b50611192612fc7565b6040518082815260200191505060405180910390f35b3480156111b457600080fd5b506111bd612fcd565b604051808215151515815260200191505060405180910390f35b3480156111e357600080fd5b506111ec612fe0565b6040518082815260200191505060405180910390f35b34801561120e57600080fd5b50611217612fe6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561126557600080fd5b506112a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061300c565b604051808215151515815260200191505060405180910390f35b3480156112ca57600080fd5b50611309600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061311c565b604051808215151515815260200191505060405180910390f35b34801561132f57600080fd5b50611338613280565b6040518082815260200191505060405180910390f35b34801561135a57600080fd5b506113af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613286565b6040518082815260200191505060405180910390f35b3480156113d157600080fd5b50611406600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061330d565b005b34801561141457600080fd5b50611453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061344b565b6040518082815260200191505060405180910390f35b34801561147557600080fd5b506114aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613472565b005b3480156114b857600080fd5b506114c16134d6565b6040518082815260200191505060405180910390f35b3480156114e357600080fd5b50611518600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134ed565b005b34801561152657600080fd5b5061155b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613643565b604051808215151515815260200191505060405180910390f35b34801561158157600080fd5b506115b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613663565b6040518082815260200191505060405180910390f35b6000806000806000806115dd61234e565b15156115e857600080fd5b66470de4df82000034101515156115fe57600080fd5b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561165657600080fd5b611676601054670de0b6b3a764000060140261367b90919063ffffffff16565b9550611680612378565b156116ed576116de601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d06134d6565b61367b90919063ffffffff16565b9450858510156116ec578495505b5b6000861115156116fc57600080fd5b61170534612d9f565b93508392503491508584111561174b5785925061173361172e878661367b90919063ffffffff16565b612706565b9050611748813461367b90919063ffffffff16565b91505b61179d83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061183283601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061188a8360105461369790919063ffffffff16565b6010819055506118a58360035461369790919063ffffffff16565b6003819055506118fd82601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119558260125461369790919063ffffffff16565b60128190555060008111156119ac573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156119aa573d6000803e3d6000fd5b505b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611a14573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167fa9952e76453aae9003d5a21b7df6196de99382fa7a34336df0107ab6bf9a966084848460405180848152602001838152602001828152602001935050505060405180910390a2505050505050565b635db3fd0081565b6040805190810160405280600981526020017f5a414220546f6b656e000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5957600080fd5b60011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611cb857600080fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faff098f53523369cef878ae47c10d27a8a918f0da3221b889da1776ab58f553f6000604051808215151515815260200191505060405180910390a250565b6000600354905090565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515611d9757600080fd5b611de982600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ebb82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f8d82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60026020528060005260406000206000915054906101000a900460ff1681565b670de0b6b3a764000060640281565b600581565b601281565b60156020528060005260406000206000915090505481565b600b5481565b66b1a2bc2ec5000081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120fd57600080fd5b612109848484846136b3565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561216c57600080fd5b8251845114151561217c57600080fd5b8151845114151561218c57600080fd5b5b83518110156121f4576121e78585838151811015156121a857fe5b9060200190602002015185848151811015156121c057fe5b9060200190602002015185858151811015156121d857fe5b906020019060200201516136b3565b808060010191505061218d565b5050505050565b60076020528160005260406000208160058110151561221657fe5b01600091509150505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000060140281565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156122b557600090506122c1565b6122be82613b67565b90505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561232157600080fd5b600b544211151561233157600080fd5b6001601760006101000a81548160ff021916908315150217905550565b6000600a54421180156123625750600b5442105b156123705760019050612375565b600090505b90565b6000600a5442118015612392575062015180600a54014211155b156123a057600190506123a5565b600090505b90565b600f5481565b60145481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561240f57600080fd5b60001515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561246e57600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faff098f53523369cef878ae47c10d27a8a918f0da3221b889da1776ab58f553f6001604051808215151515815260200191505060405180910390a250565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006125a4601454612596670de0b6b3a7640000601402670de0b6b3a764000060640261367b90919063ffffffff16565b61367b90919063ffffffff16565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561260557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600c548281151561271557fe5b049050919050565b600061277961272b83612257565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b9050919050565b601760009054906101000a900460ff16151561279b57600080fd5b6000811180156127b357506127af33613c4b565b8111155b15156127be57600080fd5b61281081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128688160035461367b90919063ffffffff16565b60038190555060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167f601012ba5835327e038c684c419b1aa1ecc88c5527dfededb4d244c46b5a9849826040518082815260200191505060405180910390a250565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561297057600080fd5b80421080156129805750600b5442105b151561298b57600080fd5b80600b819055507fe20f93714281a7d40fd1b62a497dd1cc4df6b45409601908f02827ff1eb7d892600282604051808381526020018281526020019250505060405180910390a1600b54600a541015156129e457600080fd5b635db3fd00600b541015156129f857600080fd5b50565b6016602052816000526040600020602052806000526040600020600091509150505481565b66470de4df82000081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a8657600080fd5b612a9383838360006136b3565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612b2f57600080fd5b5b8151811015612b6657612b598282815181101515612b4a57fe5b90602001906020020151613db0565b8080600101915050612b30565b5050565b6040805190810160405280600381526020017f5a4142000000000000000000000000000000000000000000000000000000000081525081565b612bb4612baf33613c4b565b612780565b565b600e6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c3157600080fd5b600a5442101515612c4157600080fd5b80600c819055507fd4846a8a7a6a67b4d03c988c19d73bb6f3cb8a3805f84c9a2273bc781c2c0598600c546040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612ce5575062b89200600b540142115b1515612cf057600080fd5b6001600d60006101000a81548160ff021916908315150217905550565b600060648585905011151515612d2257600080fd5b8282905085859050141515612d3657600080fd5b5b84849050811015612d9857612d8a8585838181101515612d5357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168484848181101515612d7e57fe5b90506020020135612dbd565b508080600101915050612d37565b5050505050565b6000612db6600c5483613ecf90919063ffffffff16565b9050919050565b6000600d60009054906101000a900460ff161515612dda57600080fd5b612de333613c4b565b8211151515612df157600080fd5b612dfb8383613f00565b905092915050565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e6457600080fd5b8042108015612e745750600a5442105b1515612e7f57600080fd5b80600a819055507fe20f93714281a7d40fd1b62a497dd1cc4df6b45409601908f02827ff1eb7d892600182604051808381526020018281526020019250505060405180910390a1600b54600a54101515612ed857600080fd5b635db3fd00600b54101515612eec57600080fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f4c57600080fd5b81518351141515612f5c57600080fd5b5b8251811015612fae57612fa1848483815181101515612f7857fe5b906020019060200201518484815181101515612f9057fe5b9060200190602002015160006136b3565b8080600101915050612f5d565b50505050565b601760009054906101000a900460ff1681565b60125481565b600d60009054906101000a900460ff1681565b600c5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561306d5760019250613114565b4284101561307e5760019250613114565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091505b600581101561310f574282826005811015156130d857fe5b015410806130f457508382826005811015156130f057fe5b0154145b156131025760019250613114565b80806001019150506130c0565b600092505b505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561317957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561323d57600080fd5b505af1158015613251573d6000803e3d6000fd5b505050506040513d602081101561326757600080fd5b8101908080519060200190929190505050905092915050565b60105481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561336857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156133a457600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4edbfac5b40fe46ac1af1fd222b224b38cfeeb9e21bd4fc6344526c245f7549b81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60086020528160005260406000208160058110151561346657fe5b01600091509150505481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156134ca57600080fd5b6134d381613db0565b50565b60006134e866b1a2bc2ec50000612d9f565b905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561354857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561358457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60096020528060005260406000206000915054906101000a900460ff1681565b60136020528060005260406000206000915090505481565b600082821115151561368c57600080fd5b818303905092915050565b600081830190508281101515156136ad57600080fd5b92915050565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561370b57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561373157600080fd5b60008211151561374057600080fd5b613748612565565b82111515156137e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f6e6f7420656e6f75676820746f6b656e7320617661696c61626c6520746f206d81526020017f696e74000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008114806137f357504281115b151561388d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c8152602001807f65697468657220776974686f7574206c6f636b207465726d2c206f72206c6f6381526020017f6b207465726d206d75737420626520696e20746865206675747572650000000081525060400191505060405180910390fd5b60008111156138a3576138a18383836140c0565b505b6138f582600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061398a82601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a3082601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205461369790919063ffffffff16565b601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002081905550613a998260145461369790919063ffffffff16565b601481905550613ab48260035461369790919063ffffffff16565b6003819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff16847f9c6dd8089f114717d5c17f4d3d9bf6c1991925a49ef90e23b9ba026bf8654b428484604051808381526020018281526020019250505060405180910390a350505050565b600080600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091505b6005811015613c4357428382600581101515613c0857fe5b0154101515613c3657613c338282600581101515613c2257fe5b01548561369790919063ffffffff16565b93505b8080600101915050613bf0565b505050919050565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613ce857600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150613daa565b613cf183613b67565b90506000811415613d55576000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b613da781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b91505b50919050565b600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613e0757613ecc565b6001600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613e756001600f5461369790919063ffffffff16565b600f819055508073ffffffffffffffffffffffffffffffffffffffff167f6ea640312e182de387819fbeb13be00db3171a445412852248559054871c4199600f546040518082815260200191505060405180910390a25b50565b600081830290506000831480613eef5750818382811515613eec57fe5b04145b1515613efa57600080fd5b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515613f2757600080fd5b613f7982600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367b90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061400e82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461369790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600080428511151561413d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6c6f636b207465726d206d75737420626520696e20746865206675747572650081525060200191505060405180910390fd5b61270f9350600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091505b6005811015614246574283826005811015156141dd57fe5b0154101561421e57600083826005811015156141f557fe5b01819055506000828260058110151561420a57fe5b018190555061270f84141561421d578093505b5b84838260058110151561422d57fe5b01541415614239578093505b80806001019150506141c5565b61270f84141515156142e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f72656769737465724c6f636b6564546f6b656e733a206e6f20617661696c616281526020017f6c6520736c6f7420666f756e640000000000000000000000000000000000000081525060400191505060405180910390fd5b600083856005811015156142f657fe5b015414156143135784838560058110151561430d57fe5b01819055505b61433586838660058110151561432557fe5b015461369790919063ffffffff16565b828560058110151561434357fe5b01819055506001600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550838773ffffffffffffffffffffffffffffffffffffffff167f38a498f3e82bfca1855324fb5e974db2a1cbc0df8145844464ab159abd4311948888604051808381526020018281526020019250505060405180910390a350505093925050505600a165627a7a72305820258fd12f859cb9a77ccb2b1eb6922bbb185722cf2596c1fc1f60299f43ef1c5a0029"
}