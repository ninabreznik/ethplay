{
  "address": "0x3f48b298b478408e51e3111f021f38ba8d59fa9c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SignkeysCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\ncontract SignkeysToken is ERC20Pausable, ERC20Detailed, Ownable {\n\n    uint8 public constant DECIMALS = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 2E9 * (10 ** uint256(DECIMALS));\n\n    /* Address where fees will be transferred */\n    address public feeChargingAddress;\n\n    /* Nonces */\n    mapping(address => uint256) public nonces;\n\n    function setFeeChargingAddress(address _feeChargingAddress) external onlyOwner {\n        feeChargingAddress = _feeChargingAddress;\n        emit FeeChargingAddressChanges(_feeChargingAddress);\n    }\n\n    /* Fee charging address changed */\n    event FeeChargingAddressChanges(address newFeeChargingAddress);\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public ERC20Detailed(\"SignkeysToken\", \"KEYS\", DECIMALS) {\n        _mint(owner(), INITIAL_SUPPLY);\n    }\n\n    function transferWithSignature(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 feeAmount,\n        uint256 nonce,\n        uint256 expiration,\n        uint8 v,\n        bytes32 r,\n        bytes32 s) public {\n        require(expiration >= now, \"Signature expired\");\n        require(feeChargingAddress != 0x0, \"Fee charging address must be set\");\n\n        address receivedSigner = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    from, to, amount, feeAmount, nonce, expiration\n                )\n            ), v, r, s);\n\n        require(nonce > nonces[from], \"Wrong nonce\");\n        nonces[from] = nonce;\n\n        require(receivedSigner == from, \"Something wrong with signature\");\n        _transfer(from, to, amount);\n        _transfer(from, feeChargingAddress, feeAmount);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool success) {\n        require(_spender != address(this));\n        require(super.approve(_spender, _value));\n        require(_spender.call(_data));\n        return true;\n    }\n\n    function() payable external {\n        revert();\n    }\n}\n\ncontract SignkeysBonusProgram is Ownable {\n    using SafeMath for uint256;\n\n    /* Token contract */\n    SignkeysToken public token;\n\n    /* Crowdsale contract */\n    SignkeysCrowdsale public crowdsale;\n\n    /* SignkeysBonusProgramRewards contract to keep bonus state */\n    SignkeysBonusProgramRewards public bonusProgramRewards;\n\n    /* Ranges in which we transfer the given amount of tokens as reward. See arrays below.\n     For example, if this array is [199, 1000, 10000] and referrerRewards array is [5, 50],\n       it considers as follows:\n       [0, 199] - 0 tokens\n       [200, 1000] - 5 tokens\n       [1001, 10000] - 50 tokens,\n       > 10000 - 50 tokens\n       */\n    uint256[] public referralBonusTokensAmountRanges = [199, 1000, 10000, 100000, 1000000, 10000000];\n\n    /* Amount of tokens as bonus for referrer according to referralBonusTokensAmountRanges */\n    uint256[] public referrerRewards = [5, 50, 500, 5000, 50000];\n\n    /* Amount of tokens as bonus for buyer according to referralBonusTokensAmountRanges */\n    uint256[] public buyerRewards = [5, 50, 500, 5000, 50000];\n\n    /* Purchase amount ranges in cents for any purchase.\n     For example, if this array is [2000, 1000000, 10000000] and purchaseRewardsPercents array is [10, 15, 20],\n       it considers as follows:\n       [2000, 1000000) - 10% of tokens\n       [1000000, 10000000) - 15% of tokens\n       > 100000000 - 20% tokens\n       */\n    uint256[] public purchaseAmountRangesInCents = [2000, 1000000, 10000000];\n\n    /* Percetage of reward for any purchase according to purchaseAmountRangesInCents */\n    uint256[] public purchaseRewardsPercents = [10, 15, 20];\n\n    event BonusSent(\n        address indexed referrerAddress,\n        uint256 referrerBonus,\n        address indexed buyerAddress,\n        uint256 buyerBonus,\n        uint256 purchaseBonus,\n        uint256 couponBonus\n    );\n\n    constructor(address _token, address _bonusProgramRewards) public {\n        token = SignkeysToken(_token);\n        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\n    }\n\n    function setCrowdsaleContract(address _crowdsale) public onlyOwner {\n        crowdsale = SignkeysCrowdsale(_crowdsale);\n    }\n\n    function setBonusProgramRewardsContract(address _bonusProgramRewards) public onlyOwner {\n        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\n    }\n\n    /* Calculate bonus for the given amount of tokens according to referralBonusTokensAmountRanges\n    and rewards array which is one of referrerRewards or buyerRewards */\n    function calcBonus(uint256 tokensAmount, uint256[] rewards) private view returns (uint256) {\n        uint256 multiplier = 10 ** uint256(token.decimals());\n        if (tokensAmount <= multiplier.mul(referralBonusTokensAmountRanges[0])) {\n            return 0;\n        }\n        for (uint i = 1; i < referralBonusTokensAmountRanges.length; i++) {\n            uint min = referralBonusTokensAmountRanges[i - 1];\n            uint max = referralBonusTokensAmountRanges[i];\n            if (tokensAmount > min.mul(multiplier) && tokensAmount <= max.mul(multiplier)) {\n                return multiplier.mul(rewards[i - 1]);\n            }\n        }\n        if (tokensAmount >= referralBonusTokensAmountRanges[referralBonusTokensAmountRanges.length - 1].mul(multiplier)) {\n            return multiplier.mul(rewards[rewards.length - 1]);\n        }\n    }\n\n    function calcPurchaseBonus(uint256 amountCents, uint256 tokensAmount) private view returns (uint256) {\n        if (amountCents < purchaseAmountRangesInCents[0]) {\n            return 0;\n        }\n        for (uint i = 1; i < purchaseAmountRangesInCents.length; i++) {\n            if (amountCents >= purchaseAmountRangesInCents[i - 1] && amountCents < purchaseAmountRangesInCents[i]) {\n                return tokensAmount.mul(purchaseRewardsPercents[i - 1]).div(100);\n            }\n        }\n        if (amountCents >= purchaseAmountRangesInCents[purchaseAmountRangesInCents.length - 1]) {\n            return tokensAmount.mul(purchaseRewardsPercents[purchaseAmountRangesInCents.length - 1]).div(100);\n        }\n    }\n\n    /* Having referrer, buyer, amount of purchased tokens, value of purchased tokens in cents and coupon campaign id\n    this method transfer all the required bonuses to referrer and buyer */\n    function sendBonus(address referrer, address buyer, uint256 _tokensAmount, uint256 _valueCents, uint256 _couponCampaignId) external returns (uint256)  {\n        require(msg.sender == address(crowdsale), \"Bonus may be sent only by crowdsale contract\");\n\n        uint256 referrerBonus = 0;\n        uint256 buyerBonus = 0;\n        uint256 purchaseBonus = 0;\n        uint256 couponBonus = 0;\n\n        uint256 referrerBonusAmount = calcBonus(_tokensAmount, referrerRewards);\n        uint256 buyerBonusAmount = calcBonus(_tokensAmount, buyerRewards);\n        uint256 purchaseBonusAmount = calcPurchaseBonus(_valueCents, _tokensAmount);\n\n        if (referrer != 0x0 && !bonusProgramRewards.areReferralBonusesSent(buyer)) {\n            if (referrerBonusAmount > 0 && token.balanceOf(this) > referrerBonusAmount) {\n                token.transfer(referrer, referrerBonusAmount);\n                bonusProgramRewards.setReferralBonusesSent(buyer, true);\n                referrerBonus = referrerBonusAmount;\n            }\n\n            if (buyerBonusAmount > 0 && token.balanceOf(this) > buyerBonusAmount) {\n                bonusProgramRewards.setReferralBonusesSent(buyer, true);\n                buyerBonus = buyerBonusAmount;\n            }\n        }\n\n        if (token.balanceOf(this) > purchaseBonusAmount.add(buyerBonus)) {\n            purchaseBonus = purchaseBonusAmount;\n        }\n\n        if (_couponCampaignId > 0 && !bonusProgramRewards.isCouponUsed(buyer, _couponCampaignId)) {\n            if (\n                token.balanceOf(this) > purchaseBonusAmount\n                .add(buyerBonus)\n                .add(bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId))\n            ) {\n                bonusProgramRewards.setCouponUsed(buyer, _couponCampaignId, true);\n                couponBonus = bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId);\n            }\n        }\n\n        if (buyerBonus > 0 || purchaseBonus > 0 || couponBonus > 0) {\n            token.transfer(buyer, buyerBonus.add(purchaseBonus).add(couponBonus));\n        }\n\n        emit BonusSent(referrer, referrerBonus, buyer, buyerBonus, purchaseBonus, couponBonus);\n    }\n\n    function getReferralBonusTokensAmountRanges() public view returns (uint256[]) {\n        return referralBonusTokensAmountRanges;\n    }\n\n    function getReferrerRewards() public view returns (uint256[]) {\n        return referrerRewards;\n    }\n\n    function getBuyerRewards() public view returns (uint256[]) {\n        return buyerRewards;\n    }\n\n    function getPurchaseRewardsPercents() public view returns (uint256[]) {\n        return purchaseRewardsPercents;\n    }\n\n    function getPurchaseAmountRangesInCents() public view returns (uint256[]) {\n        return purchaseAmountRangesInCents;\n    }\n\n    function setReferralBonusTokensAmountRanges(uint[] ranges) public onlyOwner {\n        referralBonusTokensAmountRanges = ranges;\n    }\n\n    function setReferrerRewards(uint[] rewards) public onlyOwner {\n        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\n        referrerRewards = rewards;\n    }\n\n    function setBuyerRewards(uint[] rewards) public onlyOwner {\n        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\n        buyerRewards = rewards;\n    }\n\n    function setPurchaseAmountRangesInCents(uint[] ranges) public onlyOwner {\n        purchaseAmountRangesInCents = ranges;\n    }\n\n    function setPurchaseRewardsPercents(uint[] rewards) public onlyOwner {\n        require(rewards.length == purchaseAmountRangesInCents.length);\n        purchaseRewardsPercents = rewards;\n    }\n\n    /* Withdraw all tokens from contract for any emergence case */\n    function withdrawTokens() external onlyOwner {\n        uint256 amount = token.balanceOf(this);\n        address tokenOwner = token.owner();\n        token.transfer(tokenOwner, amount);\n    }\n}\n\ncontract SignkeysBonusProgramRewards is Ownable {\n    using SafeMath for uint256;\n\n    /* Bonus program contract */\n    SignkeysBonusProgram public bonusProgram;\n\n    /* How much bonuses to send according for the given coupon campaign */\n    mapping(uint256 => uint256) private _couponCampaignBonusTokensAmount;\n\n    /* Check if referrer already got the bonuses from the invited token receiver */\n    mapping(address => bool) private _areReferralBonusesSent;\n\n    /* Check if coupon of the given campaign was used by the token receiver */\n    mapping(address => mapping(uint256 => bool)) private _isCouponUsed;\n\n    function setBonusProgram(address _bonusProgram) public onlyOwner {\n        bonusProgram = SignkeysBonusProgram(_bonusProgram);\n    }\n\n    modifier onlyBonusProgramContract() {\n        require(msg.sender == address(bonusProgram), \"Bonus program rewards state may be changed only by bonus program contract\");\n        _;\n    }\n\n    function addCouponCampaignBonusTokensAmount(uint256 _couponCampaignId, uint256 amountOfBonuses) public onlyOwner {\n        _couponCampaignBonusTokensAmount[_couponCampaignId] = amountOfBonuses;\n    }\n\n    function getCouponCampaignBonusTokensAmount(uint256 _couponCampaignId) public view returns (uint256)  {\n        return _couponCampaignBonusTokensAmount[_couponCampaignId];\n    }\n\n    function isCouponUsed(address buyer, uint256 couponCampaignId) public view returns (bool)  {\n        return _isCouponUsed[buyer][couponCampaignId];\n    }\n\n    function setCouponUsed(address buyer, uint256 couponCampaignId, bool isUsed) public onlyBonusProgramContract {\n        _isCouponUsed[buyer][couponCampaignId] = isUsed;\n    }\n\n    function areReferralBonusesSent(address buyer) public view returns (bool)  {\n        return _areReferralBonusesSent[buyer];\n    }\n\n    function setReferralBonusesSent(address buyer, bool areBonusesSent) public onlyBonusProgramContract {\n        _areReferralBonusesSent[buyer] = areBonusesSent;\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\ncontract SignkeysCrowdsale is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    uint256 public constant INITIAL_TOKEN_PRICE_CENTS = 10;\n\n    /* Token contract */\n    SignkeysToken public signkeysToken;\n\n    /* Bonus program contract*/\n    SignkeysBonusProgram public signkeysBonusProgram;\n\n    /* signer address, can be set by owner only */\n    address public signer;\n\n    /* ETH funds will be transferred to this address */\n    address public wallet;\n\n    /* Role that provide tokens calling sendTokens method */\n    address public administrator;\n\n    /* Current token price in cents */\n    uint256 public tokenPriceCents;\n\n    /* Buyer bought the amount of tokens with tokenPrice */\n    event BuyTokens(\n        address indexed buyer,\n        address indexed tokenReceiver,\n        uint256 tokenPrice,\n        uint256 amount\n    );\n\n    /* Admin sent the amount of tokens to the tokenReceiver */\n    event SendTokens(\n        address indexed tokenReceiver,\n        uint256 amount\n    );\n\n    /* Wallet changed */\n    event WalletChanged(address newWallet);\n\n    /* Administrator changed */\n    event AdministratorChanged(address newAdministrator);\n\n    /* Signer changed */\n    event CrowdsaleSignerChanged(address newSigner);\n\n    /* Token price changed */\n    event TokenPriceChanged(uint256 oldPrice, uint256 newPrice);\n\n    constructor(\n        address _token,\n        address _bonusProgram,\n        address _wallet,\n        address _signer\n    ) public {\n        require(_token != 0x0, \"Token contract for crowdsale must be set\");\n        require(_bonusProgram != 0x0, \"Referrer smart contract for crowdsale must be set\");\n\n        require(_wallet != 0x0, \"Wallet for fund transferring must be set\");\n        require(_signer != 0x0, \"Signer must be set\");\n\n        signkeysToken = SignkeysToken(_token);\n        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\n\n        signer = _signer;\n        wallet = _wallet;\n\n        tokenPriceCents = INITIAL_TOKEN_PRICE_CENTS;\n    }\n\n    function setSignerAddress(address _signer) external onlyOwner {\n        signer = _signer;\n        emit CrowdsaleSignerChanged(_signer);\n    }\n\n    function setWalletAddress(address _wallet) external onlyOwner {\n        wallet = _wallet;\n        emit WalletChanged(_wallet);\n    }\n\n    function setAdministratorAddress(address _administrator) external onlyOwner {\n        administrator = _administrator;\n        emit AdministratorChanged(_administrator);\n    }\n\n    function setBonusProgram(address _bonusProgram) external onlyOwner {\n        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\n    }\n\n    function setTokenPriceCents(uint256 _tokenPriceCents) external onlyOwner {\n        emit TokenPriceChanged(tokenPriceCents, _tokenPriceCents);\n        tokenPriceCents = _tokenPriceCents;\n    }\n\n    /**\n     * @dev Make an investment.\n     *\n     * @param _tokenReceiver address where the tokens need to be transfered\n     * @param _referrer address of user that invited _tokenReceiver for this purchase\n     * @param _tokenPrice price per one token including decimals\n     * @param _minWei minimal amount of wei buyer should invest\n     * @param _expiration expiration on token\n     */\n    function buyTokens(\n        address _tokenReceiver,\n        address _referrer,\n        uint256 _couponCampaignId, // starts with 1 if there is some, 0 means no coupon\n        uint256 _tokenPrice,\n        uint256 _minWei,\n        uint256 _expiration,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) payable external nonReentrant {\n        require(_expiration >= now, \"Signature expired\");\n        require(_tokenReceiver != 0x0, \"Token receiver must be provided\");\n        require(_minWei > 0, \"Minimal amount to purchase must be greater than 0\");\n\n        require(wallet != 0x0, \"Wallet must be set\");\n        require(msg.value >= _minWei, \"Purchased amount is less than min amount to invest\");\n\n        address receivedSigner = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    _tokenPrice, _minWei, _tokenReceiver, _referrer, _couponCampaignId, _expiration\n                )\n            ), _v, _r, _s);\n\n        require(receivedSigner == signer, \"Something wrong with signature\");\n\n        uint256 tokensAmount = msg.value.mul(10 ** uint256(signkeysToken.decimals())).div(_tokenPrice);\n        require(signkeysToken.balanceOf(this) >= tokensAmount, \"Not enough tokens in sale contract\");\n\n        // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our wallet\n        wallet.transfer(msg.value);\n\n        _sendTokens(_tokenReceiver, _referrer, _couponCampaignId, tokensAmount);\n\n        emit BuyTokens(msg.sender, _tokenReceiver, _tokenPrice, tokensAmount);\n    }\n\n    function sendTokens(\n        address _tokenReceiver,\n        address _referrer,\n        uint256 _couponCampaignId,\n        uint256 tokensAmount\n    ) external {\n        require(msg.sender == administrator, \"sendTokens() method may be called only by administrator \");\n        _sendTokens(_tokenReceiver, _referrer, _couponCampaignId, tokensAmount);\n        emit SendTokens(_tokenReceiver, tokensAmount);\n    }\n\n    function _sendTokens(\n        address _tokenReceiver,\n        address _referrer,\n        uint256 _couponCampaignId,\n        uint256 tokensAmount\n    ) private {\n        signkeysToken.transfer(_tokenReceiver, tokensAmount);\n\n        // send bonuses according to signkeys bonus program\n        signkeysBonusProgram.sendBonus(\n            _referrer,\n            _tokenReceiver,\n            tokensAmount,\n            (tokensAmount.mul(tokenPriceCents).div(10 ** uint256(signkeysToken.decimals()))),\n            _couponCampaignId);\n    }\n\n\n    /**\n     * Don't expect to just send in money and get tokens.\n     */\n    function() payable external {\n        revert();\n    }\n\n    /* Withdraw all tokens from contract for any emergence case */\n    function withdrawTokens() external onlyOwner {\n        uint256 amount = signkeysToken.balanceOf(this);\n        address tokenOwner = signkeysToken.owner();\n        signkeysToken.transfer(tokenOwner, amount);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signkeysBonusProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"setAdministratorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_couponCampaignId\",\"type\":\"uint256\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signkeysToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_couponCampaignId\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_minWei\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusProgram\",\"type\":\"address\"}],\"name\":\"setBonusProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPriceCents\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceCents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_TOKEN_PRICE_CENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_bonusProgram\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdministrator\",\"type\":\"address\"}],\"name\":\"AdministratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"CrowdsaleSignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160808061152f833981016040818152825160208401519184015160609094015160008054600160a060020a0319163317808255929593949192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018055600160a060020a038416151561011d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f546f6b656e20636f6e747261637420666f722063726f776473616c65206d757360448201527f7420626520736574000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03831615156101ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f526566657272657220736d61727420636f6e747261637420666f722063726f7760448201527f6473616c65206d75737420626520736574000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038216151561025757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f57616c6c657420666f722066756e64207472616e7366657272696e67206d757360448201527f7420626520736574000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a03811615156102ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5369676e6572206d757374206265207365740000000000000000000000000000604482015290519081900360640190fd5b60028054600160a060020a03958616600160a060020a03199182161790915560038054948616948216949094179093556004805491851691841691909117905560058054919093169116179055600a6007556112008061032f6000396000f3006080604052600436106100ed5763ffffffff60e060020a600035041663046dc16681146100f2578063238ac9331461011557806343297433146101465780634bbafdb51461015b578063521eb2731461017c5780637024be2a14610191578063715018a6146101be578063849b2fe1146101d35780638c6c8323146101e85780638d8f2adb1461021b5780638da5cb5b146102305780638f32d59b146102455780639733c2301461026e578063ac1a386a1461028f578063ae6a916e146102b0578063dd6b6b7c146102d7578063e6c6aa6f146102ef578063f2fde38b14610304578063f53d0a8e14610325575b600080fd5b3480156100fe57600080fd5b50610113600160a060020a036004351661033a565b005b34801561012157600080fd5b5061012a6103ae565b60408051600160a060020a039092168252519081900360200190f35b34801561015257600080fd5b5061012a6103bd565b34801561016757600080fd5b50610113600160a060020a03600435166103cc565b34801561018857600080fd5b5061012a610440565b34801561019d57600080fd5b50610113600160a060020a036004358116906024351660443560643561044f565b3480156101ca57600080fd5b50610113610528565b3480156101df57600080fd5b5061012a610592565b610113600160a060020a036004358116906024351660443560643560843560a43560ff60c4351660e435610104356105a1565b34801561022757600080fd5b50610113610bd2565b34801561023c57600080fd5b5061012a610daa565b34801561025157600080fd5b5061025a610db9565b604080519115158252519081900360200190f35b34801561027a57600080fd5b50610113600160a060020a0360043516610dca565b34801561029b57600080fd5b50610113600160a060020a0360043516610e0c565b3480156102bc57600080fd5b506102c5610e80565b60408051918252519081900360200190f35b3480156102e357600080fd5b50610113600435610e86565b3480156102fb57600080fd5b506102c5610edb565b34801561031057600080fd5b50610113600160a060020a0360043516610ee0565b34801561033157600080fd5b5061012a610eff565b610342610db9565b151561034d57600080fd5b60048054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f1b1b9c288f2159b637e39a719c23512e9170a5f55d665e0ecf39daf1e24e962e9181900360200190a150565b600454600160a060020a031681565b600354600160a060020a031681565b6103d4610db9565b15156103df57600080fd5b60068054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f0ec7f9681329637c95f9cce74f1a2662257b0f1b2715915661acb31e6bafc2c79181900360200190a150565b600554600160a060020a031681565b600654600160a060020a031633146104d7576040805160e560020a62461bcd02815260206004820152603860248201527f73656e64546f6b656e732829206d6574686f64206d61792062652063616c6c6560448201527f64206f6e6c792062792061646d696e6973747261746f72200000000000000000606482015290519081900360840190fd5b6104e384848484610f0e565b604080518281529051600160a060020a038616917f09bd3894cb7ab22415416dac0fecc519855a4b0842f1c9115e562ef557ab577b919081900360200190a250505050565b610530610db9565b151561053b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600254600160a060020a031681565b60018054810190819055600090819042871015610608576040805160e560020a62461bcd02815260206004820152601160248201527f5369676e61747572652065787069726564000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038c161515610668576040805160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e207265636569766572206d7573742062652070726f766964656400604482015290519081900360640190fd5b600088116106e6576040805160e560020a62461bcd02815260206004820152603160248201527f4d696e696d616c20616d6f756e7420746f207075726368617365206d7573742060448201527f62652067726561746572207468616e2030000000000000000000000000000000606482015290519081900360840190fd5b600554600160a060020a03161515610748576040805160e560020a62461bcd02815260206004820152601260248201527f57616c6c6574206d757374206265207365740000000000000000000000000000604482015290519081900360640190fd5b348811156107c6576040805160e560020a62461bcd02815260206004820152603260248201527f50757263686173656420616d6f756e74206973206c657373207468616e206d6960448201527f6e20616d6f756e7420746f20696e766573740000000000000000000000000000606482015290519081900360840190fd5b600189898e8e8e8c6040516020018087815260200186815260200185600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183815260200182815260200196505050505050506040516020818303038152906040526040518082805190602001908083835b602083106108815780518252601f199092019160209182019101610862565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008084528383018087529190915260ff8e1683860152606083018d9052608083018c9052935160a08084019750919550601f1981019492819003909101925090865af11580156108fd573d6000803e3d6000fd5b5050604051601f190151600454909450600160a060020a038086169116149050610971576040805160e560020a62461bcd02815260206004820152601e60248201527f536f6d657468696e672077726f6e672077697468207369676e61747572650000604482015290519081900360640190fd5b610a1689610a0a600260009054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109cb57600080fd5b505af11580156109df573d6000803e3d6000fd5b505050506040513d60208110156109f557600080fd5b5051349060ff16600a0a63ffffffff6110fb16565b9063ffffffff61113416565b600254604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519294508492600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610a8157600080fd5b505af1158015610a95573d6000803e3d6000fd5b505050506040513d6020811015610aab57600080fd5b50511015610b29576040805160e560020a62461bcd02815260206004820152602260248201527f4e6f7420656e6f75676820746f6b656e7320696e2073616c6520636f6e74726160448201527f6374000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600554604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610b62573d6000803e3d6000fd5b50610b6f8c8c8c85610f0e565b604080518a8152602081018490528151600160a060020a038f169233927e77a7b9b8b8207f3903ca75eade7730a828eadd952909ed2de6b640b069fb17929081900390910190a36001548114610bc457600080fd5b505050505050505050505050565b600080610bdd610db9565b1515610be857600080fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b505050506040513d6020811015610c7857600080fd5b5051600254604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051929450600160a060020a0390911691638da5cb5b916004808201926020929091908290030181600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d6020811015610d0757600080fd5b5051600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03808516600483015260248201879052915193945091169163a9059cbb916044808201926020929091908290030181600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050506040513d6020811015610da457600080fd5b50505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b610dd2610db9565b1515610ddd57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610e14610db9565b1515610e1f57600080fd5b60058054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f3ce716f94fe275e52428cbf6b7f388e5a65976d4edabc34355a77f5e89655bdc9181900360200190a150565b60075481565b610e8e610db9565b1515610e9957600080fd5b600754604080519182526020820183905280517f23c6ec2e2c4752cf5eafabbd0ae9246dce6d5c78f1ed2fde615826e084eee0689281900390910190a1600755565b600a81565b610ee8610db9565b1515610ef357600080fd5b610efc81611157565b50565b600654600160a060020a031681565b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050506040513d6020811015610fa757600080fd5b5050600354600254604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051600160a060020a039384169363dda186119388938a93889361106693169163313ce5679160048083019260209291908290030181600087803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b505050506040513d602081101561104757600080fd5b505160075460ff909116600a0a90610a0a90899063ffffffff6110fb16565b6040805160e060020a63ffffffff8816028152600160a060020a0395861660048201529390941660248401526044830191909152606482015260848101869052905160a48083019260209291908290030181600087803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b505050506040513d60208110156110f357600080fd5b505050505050565b60008083151561110e576000915061112d565b5082820282848281151561111e57fe5b041461112957600080fd5b8091505b5092915050565b60008080831161114357600080fd5b828481151561114e57fe5b04949350505050565b600160a060020a038116151561116c57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058203938b8c688629a7b7451ac2206aad1d5418139c379b19a63a54f954d751352d200290000000000000000000000004993bc704ab81e5826e7cd5ca71ebf3f66e9850500000000000000000000000047215e517445526dc09057fb9eb07ba50d854be6000000000000000000000000a790ecce7988cf8e84eac0930805aee164394b66000000000000000000000000a790ecce7988cf8e84eac0930805aee164394b66",
  "constructorArguments": "0000000000000000000000004993bc704ab81e5826e7cd5ca71ebf3f66e9850500000000000000000000000047215e517445526dc09057fb9eb07ba50d854be6000000000000000000000000a790ecce7988cf8e84eac0930805aee164394b66000000000000000000000000a790ecce7988cf8e84eac0930805aee164394b66"
}