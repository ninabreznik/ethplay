{
  "address": "0xfad0bafc9859e85687091cc18c63f07fb14a453f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MintableToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\ncontract Ownable {\n  address private _owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\ncontract FINPointRecord is Ownable {\n    using SafeMath for uint256;\n\n    // claimRate is the multiplier to calculate the number of FIN ERC20 claimable per FIN points reorded\n    // e.g., 100 = 1:1 claim ratio\n    // this claim rate can be seen as a kind of airdrop for exsisting FIN point holders at the time of claiming\n    uint256 public claimRate;\n\n    // an address map used to store the per account claimable FIN ERC20 record\n    // as a result of swapped FIN points\n    mapping (address => uint256) public claimableFIN;\n\n    event FINRecordCreate(\n        address indexed _recordAddress,\n        uint256 _finPointAmount,\n        uint256 _finERC20Amount\n    );\n\n    event FINRecordUpdate(\n        address indexed _recordAddress,\n        uint256 _finPointAmount,\n        uint256 _finERC20Amount\n    );\n\n    event FINRecordMove(\n        address indexed _oldAddress,\n        address indexed _newAddress,\n        uint256 _finERC20Amount\n    );\n\n    event ClaimRateSet(uint256 _claimRate);\n\n    /**\n     * Throws if claim rate is not set\n    */\n    modifier canRecord() {\n        require(claimRate > 0);\n        _;\n    }\n    /**\n     * @dev sets the claim rate for FIN ERC20\n     * @param _claimRate is the claim rate applied during record creation\n    */\n    function setClaimRate(uint256 _claimRate) public onlyOwner{\n        require(_claimRate <= 1000); // maximum 10x migration rate\n        require(_claimRate >= 100); // minimum 1x migration rate\n        claimRate = _claimRate;\n        emit ClaimRateSet(claimRate);\n    }\n\n    /**\n    * @dev Used to calculate and store the amount of claimable FIN ERC20 from existing FIN point balances\n    * @param _recordAddress - the registered address assigned to FIN ERC20 claiming\n    * @param _finPointAmount - the original amount of FIN points to be moved, this param should always be entered as base units\n    * i.e., 1 FIN = 10**18 base units\n    * @param _applyClaimRate - flag to apply the claim rate or not, any Finterra Technologies company FIN point allocations\n    * are strictly moved at one to one and do not recive the claim (airdrop) bonus applied to FIN point user balances\n    */\n    function recordCreate(address _recordAddress, uint256 _finPointAmount, bool _applyClaimRate) public onlyOwner canRecord {\n        require(_finPointAmount >= 100000); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\n\n        uint256 finERC20Amount;\n\n        if(_applyClaimRate == true) {\n            finERC20Amount = _finPointAmount.mul(claimRate).div(100);\n        } else {\n            finERC20Amount = _finPointAmount;\n        }\n\n        claimableFIN[_recordAddress] = claimableFIN[_recordAddress].add(finERC20Amount);\n\n        emit FINRecordCreate(_recordAddress, _finPointAmount, claimableFIN[_recordAddress]);\n    }\n\n    /**\n    * @dev Used to calculate and update the amount of claimable FIN ERC20 from existing FIN point balances\n    * @param _recordAddress - the registered address assigned to FIN ERC20 claiming\n    * @param _finPointAmount - the original amount of FIN points to be migrated, this param should always be entered as base units\n    * i.e., 1 FIN = 10**18 base units\n    * @param _applyClaimRate - flag to apply claim rate or not, any Finterra Technologies company FIN point allocations\n    * are strictly migrated at one to one and do not recive the claim (airdrop) bonus applied to FIN point user balances\n    */\n    function recordUpdate(address _recordAddress, uint256 _finPointAmount, bool _applyClaimRate) public onlyOwner canRecord {\n        require(_finPointAmount >= 100000); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors\n\n        uint256 finERC20Amount;\n\n        if(_applyClaimRate == true) {\n            finERC20Amount = _finPointAmount.mul(claimRate).div(100);\n        } else {\n            finERC20Amount = _finPointAmount;\n        }\n\n        claimableFIN[_recordAddress] = finERC20Amount;\n\n        emit FINRecordUpdate(_recordAddress, _finPointAmount, claimableFIN[_recordAddress]);\n    }\n\n    /**\n    * @dev Used to move FIN ERC20 records from one address to another, primarily in case a user has lost access to their originally registered account\n    * @param _oldAddress - the original registered address\n    * @param _newAddress - the new registerd address\n    */\n    function recordMove(address _oldAddress, address _newAddress) public onlyOwner canRecord {\n        require(claimableFIN[_oldAddress] != 0);\n        require(claimableFIN[_newAddress] == 0);\n\n        claimableFIN[_newAddress] = claimableFIN[_oldAddress];\n        claimableFIN[_oldAddress] = 0;\n\n        emit FINRecordMove(_oldAddress, _newAddress, claimableFIN[_newAddress]);\n    }\n\n    /**\n    * @dev Used to retrieve the FIN ERC20 migration records for an address, for FIN ERC20 claiming\n    * @param _recordAddress - the registered address where FIN ERC20 tokens can be claimed\n    * @return uint256 - the amount of recorded FIN ERC20 after FIN point migration\n    */\n    function recordGet(address _recordAddress) public view returns (uint256) {\n        return claimableFIN[_recordAddress];\n    }\n\n    // cannot send ETH to this contract\n    function () public payable {\n        revert (); \n    }  \n\n}\ncontract Claimable is Ownable {\n    // FINPointRecord var definition\n    FINPointRecord public finPointRecordContract;\n\n    // an address map used to store the mintAllowed flag, so we do not mint more than once\n    mapping (address => bool) public isMinted;\n\n    event RecordSourceTransferred(\n        address indexed previousRecordContract,\n        address indexed newRecordContract\n    );\n\n\n    /**\n    * @dev The Claimable constructor sets the original `claimable record contract` to the provided _claimContract\n    * address.\n    */\n    constructor(FINPointRecord _finPointRecordContract) public {\n        finPointRecordContract = _finPointRecordContract;\n    }\n\n\n    /**\n    * @dev Allows to change the record information source contract.\n    * @param _newRecordContract The address of the new record contract\n    */\n    function transferRecordSource(FINPointRecord _newRecordContract) public onlyOwner {\n        _transferRecordSource(_newRecordContract);\n    }\n\n    /**\n    * @dev Transfers the reference of the record contract to a newRecordContract.\n    * @param _newRecordContract The address of the new record contract\n    */\n    function _transferRecordSource(FINPointRecord _newRecordContract) internal {\n        require(_newRecordContract != address(0));\n        emit RecordSourceTransferred(finPointRecordContract, _newRecordContract);\n        finPointRecordContract = _newRecordContract;\n    }\n}\ncontract ERC20Interface {\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function allowance(address owner, address spender)public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value)public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner,address indexed spender,uint256 value);\n\n}\ncontract StandardToken is ERC20Interface {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply_;\n\n    // the following variables need to be here for scoping to properly freeze normal transfers after migration has started\n    // migrationStart flag\n    bool public migrationStart;\n    // var for storing the the TimeLock contract deployment address (for vesting FIN allocations)\n    TimeLock public timeLockContract;\n\n    /**\n     * @dev Modifier for allowing only TimeLock transactions to occur after the migration period has started\n    */\n    modifier migrateStarted {\n        if(migrationStart == true){\n            require(msg.sender == address(timeLockContract));\n        }\n        _;\n    }\n\n    constructor(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public migrateStarted returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n        )\n        public\n        migrateStarted\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\ncontract TimeLock {\n    //FINERC20 var definition\n    MintableToken public ERC20Contract;\n    // custom data structure to hold locked funds and time\n    struct accountData {\n        uint256 balance;\n        uint256 releaseTime;\n    }\n\n    event Lock(address indexed _tokenLockAccount, uint256 _lockBalance, uint256 _releaseTime);\n    event UnLock(address indexed _tokenUnLockAccount, uint256 _unLockBalance, uint256 _unLockTime);\n\n    // only one locked account per address\n    mapping (address => accountData) public accounts;\n\n    /**\n    * @dev Constructor in which we pass the ERC20Contract address for reference and method calls\n    */\n\n    constructor(MintableToken _ERC20Contract) public {\n        ERC20Contract = _ERC20Contract;\n    }\n\n    function timeLockTokens(uint256 _lockTimeS) public {\n\n        uint256 lockAmount = ERC20Contract.allowance(msg.sender, this); // get this time lock contract's approved amount of tokens\n\n\n        require(lockAmount != 0); // check that this time lock contract has been approved to lock an amount of tokens on the msg.sender's behalf\n\n        if (accounts[msg.sender].balance > 0) { // if locked balance already exists, add new amount to the old balance and retain the same release time\n            accounts[msg.sender].balance = SafeMath.add(accounts[msg.sender].balance, lockAmount);\n      } else { // else populate the balance and set the release time for the newly locked balance\n            accounts[msg.sender].balance = lockAmount;\n            accounts[msg.sender].releaseTime = SafeMath.add(block.timestamp, _lockTimeS);\n        }\n\n        emit Lock(msg.sender, lockAmount, accounts[msg.sender].releaseTime);\n\n        ERC20Contract.transferFrom(msg.sender, this, lockAmount);\n\n    }\n\n    function tokenRelease() public {\n        // check if user has funds due for pay out because lock time is over\n        require (accounts[msg.sender].balance != 0 && accounts[msg.sender].releaseTime <= block.timestamp);\n        uint256 transferUnlockedBalance = accounts[msg.sender].balance;\n        accounts[msg.sender].balance = 0;\n        accounts[msg.sender].releaseTime = 0;\n        emit UnLock(msg.sender, transferUnlockedBalance, block.timestamp);\n        ERC20Contract.transfer(msg.sender, transferUnlockedBalance);\n    }\n\n    /**\n    * @dev Used to retrieve FIN ERC20 contract address that this deployment is attatched to\n    * @return address - the FIN ERC20 contract address that this deployment is attatched to\n    */\n    function getERC20() public view returns (address) {\n        return ERC20Contract;\n    }\n}\ncontract FINERC20Migrate is Ownable {\n    using SafeMath for uint256;\n\n    // Address map used to store the per account migratable FIN balances\n    // as per the account's FIN ERC20 tokens on the Ethereum Network\n\n    mapping (address => uint256) public migratableFIN;\n    \n    MintableToken public ERC20Contract;\n\n    constructor(MintableToken _finErc20) public {\n        ERC20Contract = _finErc20;\n    }   \n\n    // Note: _totalMigratableFIN is a running total of FIN claimed as migratable in this contract, \n    // but does not represent the actual amount of FIN migrated to the Gallactic network\n    event FINMigrateRecordUpdate(\n        address indexed _account,\n        uint256 _totalMigratableFIN\n    ); \n\n    /**\n    * @dev Used to calculate and store the amount of FIN ERC20 token balances to be migrated to the Gallactic network\n    * \n    * @param _balanceToMigrate - the requested balance to reserve for migration (in most cases this should be the account's total balance)\n    *    - primarily included as a parameter for simple validation on the Gallactic side of the migration\n    */\n    function initiateMigration(uint256 _balanceToMigrate) public {\n        uint256 migratable = ERC20Contract.migrateTransfer(msg.sender, _balanceToMigrate);\n        migratableFIN[msg.sender] = migratableFIN[msg.sender].add(migratable);\n        emit FINMigrateRecordUpdate(msg.sender, migratableFIN[msg.sender]);\n    }\n\n    /**\n    * @dev Used to retrieve the FIN ERC20 total migration records for an Etheruem account\n    * @param _account - the account to be checked for a migratable balance\n    * @return uint256 - the running total amount of migratable FIN ERC20 tokens\n    */\n    function getFINMigrationRecord(address _account) public view returns (uint256) {\n        return migratableFIN[_account];\n    }\n\n    /**\n    * @dev Used to retrieve FIN ERC20 contract address that this deployment is attatched to\n    * @return address - the FIN ERC20 contract address that this deployment is attatched to\n    */\n    function getERC20() public view returns (address) {\n        return ERC20Contract;\n    }\n}\ncontract MintableToken is StandardToken, Claimable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event SetMigrationAddress(address _finERC20MigrateAddress);\n    event SetTimeLockAddress(address _timeLockAddress);\n    event MigrationStarted();\n    event Migrated(address indexed account, uint256 amount);\n\n    bool public mintingFinished = false;\n\n    // var for storing the the FINERC20Migrate contract deployment address (for migration to the GALLACTIC network)\n    FINERC20Migrate public finERC20MigrationContract;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Modifier allowing only the set FINERC20Migrate.sol deployment to call a function\n    */\n    modifier onlyMigrate {\n        require(msg.sender == address(finERC20MigrationContract));\n        _;\n    }\n\n    /**\n    * @dev Constructor to pass the finPointMigrationContract address to the Claimable constructor\n    */\n    constructor(FINPointRecord _finPointRecordContract, string _name, string _symbol, uint8 _decimals)\n\n    public\n    Claimable(_finPointRecordContract)\n    StandardToken(_name, _symbol, _decimals) {\n\n    }\n\n   // fallback to prevent send ETH to this contract\n    function () public payable {\n        revert (); \n    }  \n\n    /**\n    * @dev Allows addresses with FIN migration records to claim thier ERC20 FIN tokens. This is the only way minting can occur.\n    * @param _ethAddress address for the token holder\n    */\n    function mintAllowance(address _ethAddress) public onlyOwner {\n        require(finPointRecordContract.recordGet(_ethAddress) != 0);\n        require(isMinted[_ethAddress] == false);\n        isMinted[_ethAddress] = true;\n        mint(msg.sender, finPointRecordContract.recordGet(_ethAddress));\n        approve(_ethAddress, finPointRecordContract.recordGet(_ethAddress));\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n        private\n        canMint\n        returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop all minting of new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n   /**\n    * @dev Function to set the migration contract address\n    * @return True if the operation was successful.\n    */\n    function setMigrationAddress(FINERC20Migrate _finERC20MigrationContract) public onlyOwner returns (bool) {\n        // check that this FIN ERC20 deployment is the migration contract's attached ERC20 token\n        require(_finERC20MigrationContract.getERC20() == address(this));\n\n        finERC20MigrationContract = _finERC20MigrationContract;\n        emit SetMigrationAddress(_finERC20MigrationContract);\n        return true;\n    }\n\n   /**\n    * @dev Function to set the TimeLock contract address\n    * @return True if the operation was successful.\n    */\n    function setTimeLockAddress(TimeLock _timeLockContract) public onlyOwner returns (bool) {\n        // check that this FIN ERC20 deployment is the timelock contract's attached ERC20 token\n        require(_timeLockContract.getERC20() == address(this));\n\n        timeLockContract = _timeLockContract;\n        emit SetTimeLockAddress(_timeLockContract);\n        return true;\n    }\n\n   /**\n    * @dev Function to start the migration period\n    * @return True if the operation was successful.\n    */\n    function startMigration() onlyOwner public returns (bool) {\n        require(migrationStart == false);\n        // check that the FIN migration contract address is set\n        require(finERC20MigrationContract != address(0));\n        // // check that the TimeLock contract address is set\n        require(timeLockContract != address(0));\n\n        migrationStart = true;\n        emit MigrationStarted();\n\n        return true;\n    }\n\n    /**\n     * @dev Function to modify the FIN ERC-20 balance in compliance with migration to FIN ERC-777 on the GALLACTIC Network\n     *      - called by the FIN-ERC20-MIGRATE FINERC20Migrate.sol Migration Contract to record the amount of tokens to be migrated\n     * @dev modifier onlyMigrate - Permissioned only to the deployed FINERC20Migrate.sol Migration Contract\n     * @param _account The Ethereum account which holds some FIN ERC20 balance to be migrated to Gallactic\n     * @param _amount The amount of FIN ERC20 to be migrated\n    */\n    function migrateTransfer(address _account, uint256 _amount) onlyMigrate public returns (uint256) {\n\n        require(migrationStart == true);\n\n        uint256 userBalance = balanceOf(_account);\n        require(userBalance >= _amount);\n\n        emit Migrated(_account, _amount);\n\n        balances[_account] = balances[_account].sub(_amount);\n\n        return _amount;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finPointRecordContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_finERC20MigrationContract\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLockContract\",\"type\":\"address\"}],\"name\":\"setTimeLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finERC20MigrationContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"mintAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecordContract\",\"type\":\"address\"}],\"name\":\"transferRecordSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_finPointRecordContract\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_finERC20MigrateAddress\",\"type\":\"address\"}],\"name\":\"SetMigrationAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockAddress\",\"type\":\"address\"}],\"name\":\"SetTimeLockAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRecordContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRecordContract\",\"type\":\"address\"}],\"name\":\"RecordSourceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600a60006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162002c1d38038062002c1d833981018060405281019080805190602001909291908051820192919060200180518201929190602001805190602001909291905050508383838382600290805190602001906200008e92919062000153565b508160039080519060200190620000a792919062000153565b5080600460006101000a81548160ff021916908360ff16021790555050505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000202565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019657805160ff1916838001178555620001c7565b82800160010185558215620001c7579182015b82811115620001c6578251825591602001919060010190620001a9565b5b509050620001d69190620001da565b5090565b620001ff91905b80821115620001fb576000816000905550600101620001e1565b5090565b90565b612a0b80620002126000396000f300608060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461018557806306fdde03146101b4578063095ea7b31461024457806318160ddd146102a957806318264f33146102d457806323b872dd1461030357806327e235e31461038857806328043306146103df5780632f6603621461044057806330d4165d14610497578063313ce567146104c6578063324536eb146104f757806332925b57146105225780634732a7dc1461057957806366188463146105d457806370a0823114610639578063715018a6146106905780637cc0a9d4146106a75780637d64bcb4146107025780638da5cb5b146107315780638f32d59b146107885780638f72d7c5146107b757806395d89b411461080e578063a9059cbb1461089e578063c5119ff814610903578063d73dd62314610946578063dd62ed3e146109ab578063f2fde38b14610a22578063f9f2a7ce14610a65578063fb6b8f9a14610ac0575b600080fd5b34801561019157600080fd5b5061019a610b03565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c9610b16565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102095780820151818401526020810190506101ee565b50505050905090810190601f1680156102365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025057600080fd5b5061028f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bb4565b604051808215151515815260200191505060405180910390f35b3480156102b557600080fd5b506102be610ca6565b6040518082815260200191505060405180910390f35b3480156102e057600080fd5b506102e9610cb0565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b5061036e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df1565b604051808215151515815260200191505060405180910390f35b34801561039457600080fd5b506103c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611225565b6040518082815260200191505060405180910390f35b3480156103eb57600080fd5b5061042a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061123d565b6040518082815260200191505060405180910390f35b34801561044c57600080fd5b506104556113c3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a357600080fd5b506104ac6113e9565b604051808215151515815260200191505060405180910390f35b3480156104d257600080fd5b506104db6113fc565b604051808260ff1660ff16815260200191505060405180910390f35b34801561050357600080fd5b5061050c61140f565b6040518082815260200191505060405180910390f35b34801561052e57600080fd5b50610537611415565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058557600080fd5b506105ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061143b565b604051808215151515815260200191505060405180910390f35b3480156105e057600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d5565b604051808215151515815260200191505060405180910390f35b34801561064557600080fd5b5061067a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611866565b6040518082815260200191505060405180910390f35b34801561069c57600080fd5b506106a56118ae565b005b3480156106b357600080fd5b506106e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061196a565b604051808215151515815260200191505060405180910390f35b34801561070e57600080fd5b50610717611b04565b604051808215151515815260200191505060405180910390f35b34801561073d57600080fd5b50610746611b83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079457600080fd5b5061079d611bad565b604051808215151515815260200191505060405180910390f35b3480156107c357600080fd5b506107cc611c05565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561081a57600080fd5b50610823611c2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610863578082015181840152602081019050610848565b50505050905090810190601f1680156108905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108aa57600080fd5b506108e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cc9565b604051808215151515815260200191505060405180910390f35b34801561090f57600080fd5b50610944600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f62565b005b34801561095257600080fd5b50610991600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061233a565b604051808215151515815260200191505060405180910390f35b3480156109b757600080fd5b50610a0c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612536565b6040518082815260200191505060405180910390f35b348015610a2e57600080fd5b50610a63600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125bd565b005b348015610a7157600080fd5b50610aa6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125dc565b604051808215151515815260200191505060405180910390f35b348015610acc57600080fd5b50610b01600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125fc565b005b600a60009054906101000a900460ff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b6000610cba611bad565b1515610cc557600080fd5b60001515600660009054906101000a900460ff161515141515610ce757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610d4557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610da357600080fd5b6001600660006101000a81548160ff0219169083151502179055507f882ea0955bd5561a49a52ef27eb0a7b8263561bd890de2ccfbc107df7724f18860405160405180910390a16001905090565b600060011515600660009054906101000a900460ff1615151415610e6c57600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6b57600080fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ea857600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ef557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f8057600080fd5b610fd1826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261b90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611064826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461263c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061113582600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60006020528060005260406000206000915090505481565b600080600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129c57600080fd5b60011515600660009054906101000a900460ff1615151415156112be57600080fd5b6112c784611866565b90508281101515156112d857600080fd5b8373ffffffffffffffffffffffffffffffffffffffff167f8b80bd19aea7b735bc6d75db8d6adbe18b28c30d62b3555245eb67b2340caedc846040518082815260200191505060405180910390a2611377836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261b90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505092915050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff1681565b600460009054906101000a900460ff1681565b60055481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611445611bad565b151561145057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16634ece90a86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114cb57600080fd5b505af11580156114df573d6000803e3d6000fd5b505050506040513d60208110156114f557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561152857600080fd5b81600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff7b198fb0410a876ac251fa9d60f6edea0c92db3062f935e58555650f67874ba82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156116e6576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061177a565b6116f9838261261b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6118b6611bad565b15156118c157600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000611974611bad565b151561197f57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16634ece90a86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119fa57600080fd5b505af1158015611a0e573d6000803e3d6000fd5b505050506040513d6020811015611a2457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515611a5757600080fd5b81600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3b4e29869e7c5b1a252f0eaf21b87bd3f40f490fc225bf947439138a0549de9582604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000611b0e611bad565b1515611b1957600080fd5b600a60009054906101000a900460ff16151515611b3557600080fd5b6001600a60006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cc15780601f10611c9657610100808354040283529160200191611cc1565b820191906000526020600020905b815481529060010190602001808311611ca457829003601f168201915b505050505081565b600060011515600660009054906101000a900460ff1615151415611d4457600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4357600080fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611d8057600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611dcd57600080fd5b611e1e826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261b90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611eb1826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461263c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b611f6a611bad565b1515611f7557600080fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663992817b9836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561203457600080fd5b505af1158015612048573d6000803e3d6000fd5b505050506040513d602081101561205e57600080fd5b81019080805190602001909291905050501415151561207c57600080fd5b60001515600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156120db57600080fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061223433600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663992817b9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156121f457600080fd5b505af1158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b810190808051906020019092919050505061265d565b5061233681600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663992817b9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156122f657600080fd5b505af115801561230a573d6000803e3d6000fd5b505050506040513d602081101561232057600080fd5b8101908080519060200190929190505050610bb4565b5050565b60006123cb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461263c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6125c5611bad565b15156125d057600080fd5b6125d9816127e7565b50565b60096020528060005260406000206000915054906101000a900460ff1681565b612604611bad565b151561260f57600080fd5b612618816128e3565b50565b60008083831115151561262d57600080fd5b82840390508091505092915050565b600080828401905083811015151561265357600080fd5b8091505092915050565b6000600a60009054906101000a900460ff1615151561267b57600080fd5b6126908260055461263c90919063ffffffff16565b6005819055506126e7826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461263c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561282357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561291f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3058ca99522ea9d7898a2f5ee4ce82e313a593407ae8045cf975c081be40f73760405160405180910390a380600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582061c6e231faf5fe7a08d6f4eebebee228adec1b933eb4e7fe5486e91a90b1ebe20029000000000000000000000000baca61bda46d0c5849e1c3f7812818df46cacbcb000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f46494e20455243323020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000346494e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000baca61bda46d0c5849e1c3f7812818df46cacbcb000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f46494e20455243323020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000346494e0000000000000000000000000000000000000000000000000000000000"
}