{
  "address": "0x20B1bc618F79D9977b7Cce3F0523128178ea6a7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NiftyFootballAdmin",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/INiftyTradingCardCreator.sol\n\npragma solidity 0.5.0;\n\ninterface INiftyTradingCardCreator {\n    function mintCard(\n        uint256 _cardType,\n        uint256 _nationality,\n        uint256 _position,\n        uint256 _ethnicity,\n        uint256 _kit,\n        uint256 _colour,\n        address _to\n    ) external returns (uint256 _tokenId);\n\n    function setAttributes(\n        uint256 _tokenId,\n        uint256 _strength,\n        uint256 _speed,\n        uint256 _intelligence,\n        uint256 _skill\n    ) external returns (bool);\n\n    function setName(\n        uint256 _tokenId,\n        uint256 _firstName,\n        uint256 _lastName\n    ) external returns (bool);\n\n    function setAttributesAndName(\n        uint256 _tokenId,\n        uint256 _strength,\n        uint256 _speed,\n        uint256 _intelligence,\n        uint256 _skill,\n        uint256 _firstName,\n        uint256 _lastName\n    ) external returns (bool);\n}\n\n// File: contracts/generators/INiftyFootballTradingCardGenerator.sol\n\npragma solidity 0.5.0;\n\ncontract INiftyFootballTradingCardGenerator {\n    function generateCard(address _sender) external returns (uint256 _nationality, uint256 _position, uint256 _ethnicity, uint256 _kit, uint256 _colour);\n\n    function generateAttributes(address _sender, uint256 _base) external returns (uint256 strength, uint256 speed, uint256 intelligence, uint256 skill);\n\n    function generateName(address _sender) external returns (uint256 firstName, uint256 lastName);\n}\n\n// File: contracts/NiftyFootballAdmin.sol\n\npragma solidity 0.5.0;\n\n\n\n\n\n\ncontract NiftyFootballAdmin is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    INiftyFootballTradingCardGenerator public generator;\n    INiftyTradingCardCreator public creator;\n\n    uint256 public cardTypeDefault = 100;\n    uint256 public attributesBase = 50;\n\n    constructor (\n        INiftyFootballTradingCardGenerator _generator,\n        INiftyTradingCardCreator _creator\n    ) public {\n        generator = _generator;\n        creator = _creator;\n    }\n\n    function generateAndAssignCard(\n        uint256 _nationality,\n        uint256 _position,\n        uint256 _ethnicity,\n        uint256 _kit,\n        uint256 _colour,\n        uint256 _firstName,\n        uint256 _lastName,\n        address _to\n    ) public onlyOwner returns (uint256) {\n\n        // 100 for special\n        uint256 tokenId = creator.mintCard(cardTypeDefault, _nationality, _position, _ethnicity, _kit, _colour, _to);\n        \n        // Generate attributes as normal\n        (uint256 _strength, uint256 _speed, uint256 _intelligence, uint256 _skill) = generator.generateAttributes(msg.sender, attributesBase);\n\n        creator.setAttributesAndName(tokenId, _strength, _speed, _intelligence, _skill, _firstName, _lastName);\n\n        return tokenId;\n    }\n\n    function setCardTypeDefault(uint256 _newDefaultCardType) public onlyOwner returns (bool) {\n        cardTypeDefault = _newDefaultCardType;\n        return true;\n    }\n\n    function setAttributesBase(uint256 _newAttributesBase) public onlyOwner returns (bool) {\n        attributesBase = _newAttributesBase;\n        return true;\n    }\n\n    function setFutballCardsGenerator(INiftyFootballTradingCardGenerator _futballCardsGenerator) public onlyOwner returns (bool) {\n        generator = _futballCardsGenerator;\n        return true;\n    }\n}",
  "bytecode": "60806040526064600455603260055534801561001a57600080fd5b50604051604080610c898339810180604052604081101561003a57600080fd5b50805160209091015160008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361009e336401000000006100d8810204565b60028054600160a860020a031916610100600160a060020a039485160217905560038054600160a060020a031916919092161790556101b5565b6100f0600182640100000000610a4b61012782021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561013c57600080fd5b61014f828264010000000061017e810204565b1561015957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216151561019557600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610ac5806101c46000396000f3fe6080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461010057806335d16743146101315780633c31d9581461016f5780633f4ba83a146101a257806346fbf68e146101b95780635c975abb146101ec57806369451b5b146102015780636b0cbf05146102285780636ef8d66d14610286578063715018a61461029b5780637afa1eed146102b057806382dc1ec4146102c55780638456cb59146102f85780638da5cb5b1461030d5780638f32d59b1461032257806396e7089d14610337578063d91b68ce1461034c578063f2fde38b14610376575b600080fd5b34801561010c57600080fd5b506101156103a9565b60408051600160a060020a039092168252519081900360200190f35b34801561013d57600080fd5b5061015b6004803603602081101561015457600080fd5b50356103b8565b604080519115158252519081900360200190f35b34801561017b57600080fd5b5061015b6004803603602081101561019257600080fd5b5035600160a060020a03166103d6565b3480156101ae57600080fd5b506101b7610422565b005b3480156101c557600080fd5b5061015b600480360360208110156101dc57600080fd5b5035600160a060020a0316610486565b3480156101f857600080fd5b5061015b61049f565b34801561020d57600080fd5b506102166104a8565b60408051918252519081900360200190f35b34801561023457600080fd5b50610216600480360361010081101561024c57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e00135600160a060020a03166104ae565b34801561029257600080fd5b506101b761074c565b3480156102a757600080fd5b506101b7610757565b3480156102bc57600080fd5b506101156107c1565b3480156102d157600080fd5b506101b7600480360360208110156102e857600080fd5b5035600160a060020a03166107d5565b34801561030457600080fd5b506101b76107f5565b34801561031957600080fd5b5061011561085b565b34801561032e57600080fd5b5061015b61086a565b34801561034357600080fd5b5061021661087b565b34801561035857600080fd5b5061015b6004803603602081101561036f57600080fd5b5035610881565b34801561038257600080fd5b506101b76004803603602081101561039957600080fd5b5035600160a060020a031661089f565b600354600160a060020a031681565b60006103c261086a565b15156103cd57600080fd5b50600555600190565b60006103e061086a565b15156103eb57600080fd5b5060028054600160a060020a0383166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556001919050565b61042b33610486565b151561043657600080fd5b60025460ff16151561044757600080fd5b6002805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061049960018363ffffffff6108bb16565b92915050565b60025460ff1690565b60055481565b60006104b861086a565b15156104c357600080fd5b60035460048054604080517f9b34918e00000000000000000000000000000000000000000000000000000000815292830191909152602482018c9052604482018b9052606482018a90526084820189905260a48201889052600160a060020a0385811660c484015290516000939190911691639b34918e9160e480830192602092919082900301818787803b15801561055b57600080fd5b505af115801561056f573d6000803e3d6000fd5b505050506040513d602081101561058557600080fd5b5051600254600554604080517fa56e9fd7000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251929350600092839283928392610100909204600160a060020a03169163a56e9fd79160448082019260809290919082900301818787803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050506040513d608081101561063057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050509350935093509350600360009054906101000a9004600160a060020a0316600160a060020a0316637c4c890e86868686868f8f6040518863ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180888152602001878152602001868152602001858152602001848152602001838152602001828152602001975050505050505050602060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b505050506040513d602081101561073857600080fd5b50949e9d5050505050505050505050505050565b610755336108f2565b565b61075f61086a565b151561076a57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6002546101009004600160a060020a031681565b6107de33610486565b15156107e957600080fd5b6107f28161093a565b50565b6107fe33610486565b151561080957600080fd5b60025460ff161561081957600080fd5b6002805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031690565b600054600160a060020a0316331490565b60045481565b600061088b61086a565b151561089657600080fd5b50600455600190565b6108a761086a565b15156108b257600080fd5b6107f281610982565b6000600160a060020a03821615156108d257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61090360018263ffffffff6109ff16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61094b60018263ffffffff610a4b16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561099757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381161515610a1457600080fd5b610a1e82826108bb565b1515610a2957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515610a6057600080fd5b610a6a82826108bb565b15610a7457600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fea165627a7a723058206faa6699193255740970a634c79a8dc90e1639c206232198c74101cda74506d40029000000000000000000000000ff511f5e620d75780f200f005a306f7c7bd30eb1000000000000000000000000bc5370374fe08d699cf7fcd2e625a93bf393ccc4",
  "constructorArguments": "000000000000000000000000ff511f5e620d75780f200f005a306f7c7bd30eb1000000000000000000000000bc5370374fe08d699cf7fcd2e625a93bf393ccc4"
}