{
  "address": "0x59fe2a6e93746bc81dbe02c9fe2c5557c0c95d29",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AntierToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity 0.5.7;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n\n    address public owner;\n    bool public stopped = false;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /** \n    * Stop ICO/Contract\n    */\n    function stop() onlyOwner public{\n        stopped = true;\n    }\n\n    /** \n    * Start ICO/Contract\n    */\n    function start() onlyOwner public{\n        stopped = false;\n    }\n\n    /** \n    Validate if ICO/Contract running\n    */\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n    totalSupply_ = totalSupply_.add(value);\n    balances[account] = balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n}\n\ncontract BurnableToken is BasicToken, Ownable {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public onlyOwner{\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title ERC20 Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is BasicToken, Ownable {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint( address to, uint256 value ) public onlyOwner returns (bool){\n      _mint(to, value);\n      return true;\n    }\n  }\n\ncontract AntierToken is StandardToken, BurnableToken, ERC20Mintable {\n\n    using SafeMath for uint;\n\n    string constant public symbol = \"ANTR\";\n    string constant public name = \"Antier Token\";\n\n    uint8 constant public decimals = 8;\n    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n    uint256 public constant INITIAL_SUPPLY = 1000000 * decimalFactor;\n\n    constructor(address ownerAdrs) public {\n        totalSupply_ = INITIAL_SUPPLY;\n        //InitialDistribution\n        preSale(ownerAdrs,totalSupply_);\n    }\n\n    function preSale(address _address, uint _amount) internal returns (bool) {\n        balances[_address] = _amount;\n        emit Transfer(address(0x0), _address, _amount);\n    }\n\n    \n    function transfer(address _to, uint256 _value) isRunning public returns (bool) {\n        super.transfer(_to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning public returns (bool) {\n        super.transferFrom(_from, _to, _value);\n        return true;\n    }\n    \n}",
  "bytecode": "608060405260038054600160a01b60ff021916905534801561002057600080fd5b50604051602080610d1c8339810180604052602081101561004057600080fd5b5051600380546001600160a01b03191633179055655af3107a40006001819055610072908290610079602090811b901c565b50506100cf565b6001600160a01b0382166000818152602081815260408083208590558051858152905192939284927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a392915050565b610c3e806100de6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636d6a6a4d116100ad578063a9059cbb11610071578063a9059cbb14610345578063be9a655514610371578063d73dd62314610379578063dd62ed3e146103a5578063f2fde38b146103d35761012c565b80636d6a6a4d146102e357806370a08231146102eb57806375f12b21146103115780638da5cb5b1461031957806395d89b411461033d5761012c565b80632ff2e9dc116100f45780632ff2e9dc14610248578063313ce5671461025057806340c10f191461026e57806342966c681461029a57806366188463146102b75761012c565b806306fdde031461013157806307da68f5146101ae578063095ea7b3146101b857806318160ddd146101f857806323b872dd14610212575b600080fd5b6101396103f9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b6610432565b005b6101e4600480360360408110156101ce57600080fd5b506001600160a01b038135169060200135610461565b604080519115158252519081900360200190f35b6102006104c7565b60408051918252519081900360200190f35b6101e46004803603606081101561022857600080fd5b506001600160a01b038135811691602081013590911690604001356104cd565b6102006104fa565b610258610504565b6040805160ff9092168252519081900360200190f35b6101e46004803603604081101561028457600080fd5b506001600160a01b038135169060200135610509565b6101b6600480360360208110156102b057600080fd5b5035610536565b6101e4600480360360408110156102cd57600080fd5b506001600160a01b0381351690602001356105fb565b6102006106eb565b6102006004803603602081101561030157600080fd5b50356001600160a01b03166106f3565b6101e461070e565b61032161071e565b604080516001600160a01b039092168252519081900360200190f35b61013961072d565b6101e46004803603604081101561035b57600080fd5b506001600160a01b038135169060200135610750565b6101b661077b565b6101e46004803603604081101561038f57600080fd5b506001600160a01b0381351690602001356107a4565b610200600480360360408110156103bb57600080fd5b506001600160a01b038135811691602001351661083d565b6101b6600480360360208110156103e957600080fd5b50356001600160a01b0316610868565b6040518060400160405280600c81526020017f416e7469657220546f6b656e000000000000000000000000000000000000000081525081565b6003546001600160a01b0316331461044957600080fd5b60038054600160a01b60ff021916600160a01b179055565b3360008181526002602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600354600090600160a01b900460ff16156104e457fe5b6104ef8484846108ee565b506001949350505050565b655af3107a400081565b600881565b6003546000906001600160a01b0316331461052357600080fd5b61052d8383610a63565b50600192915050565b6003546001600160a01b0316331461054d57600080fd5b3360009081526020819052604090205481111561056957600080fd5b33600081815260208190526040902054610589908363ffffffff610b0b16565b6001600160a01b0382166000908152602081905260409020556001546105b5908363ffffffff610b0b16565b6001556040805183815290516001600160a01b038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b3360009081526002602090815260408083206001600160a01b038616845290915281205480831115610650573360009081526002602090815260408083206001600160a01b0388168452909152812055610685565b610660818463ffffffff610b0b16565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6305f5e10081565b6001600160a01b031660009081526020819052604090205490565b600354600160a01b900460ff1681565b6003546001600160a01b031681565b604051806040016040528060048152602001600160e11b6320a72a290281525081565b600354600090600160a01b900460ff161561076757fe5b6107718383610b1d565b5060019392505050565b6003546001600160a01b0316331461079257600080fd5b60038054600160a01b60ff0219169055565b3360009081526002602090815260408083206001600160a01b03861684529091528120546107d8908363ffffffff610bfc16565b3360008181526002602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6003546001600160a01b0316331461087f57600080fd5b6001600160a01b03811661089257600080fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03831661090357600080fd5b6001600160a01b03841660009081526020819052604090205482111561092857600080fd5b6001600160a01b038416600090815260026020908152604080832033845290915290205482111561095857600080fd5b6001600160a01b038416600090815260208190526040902054610981908363ffffffff610b0b16565b6001600160a01b0380861660009081526020819052604080822093909355908516815220546109b6908363ffffffff610bfc16565b6001600160a01b038085166000908152602081815260408083209490945591871681526002825282812033825290915220546109f8908363ffffffff610b0b16565b6001600160a01b03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6001600160a01b038216610a7657600080fd5b600154610a89908263ffffffff610bfc16565b6001556001600160a01b038216600090815260208190526040902054610ab5908263ffffffff610bfc16565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082821115610b1757fe5b50900390565b60006001600160a01b038316610b3257600080fd5b33600090815260208190526040902054821115610b4e57600080fd5b33600090815260208190526040902054610b6e908363ffffffff610b0b16565b33600090815260208190526040808220929092556001600160a01b03851681522054610ba0908363ffffffff610bfc16565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600082820183811015610c0b57fe5b939250505056fea165627a7a72305820e3d06f87ddb701aeec9d53d004fe4b1512c14211dc3ebbaeb8c5f9f10824c03f00290000000000000000000000003314bf4b1286f495b1fe8908f7d0f05d8818b168",
  "constructorArguments": "0000000000000000000000003314bf4b1286f495b1fe8908f7d0f05d8818b168"
}