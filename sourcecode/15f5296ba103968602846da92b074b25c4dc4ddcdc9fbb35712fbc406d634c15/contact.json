{
  "address": "0x976ccbb5bd60d280724852a5b1ca2f62f02cbc50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaMaker",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity ^0.5.0;\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev get MakerDAO CDP engine\n     */\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    /**\n     * @dev get uniswap MKR exchange\n     */\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    /**\n     * @dev get uniswap DAI exchange\n     */\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    /**\n     * @dev get CDP bytes by CDP ID\n     */\n    function getCDPBytes(uint cdpNum) public pure returns (bytes32 cup) {\n        cup = bytes32(cdpNum);\n    }\n\n}\n\n\ncontract CDPResolver is Helpers {\n\n    function open() public returns (uint) {\n        bytes32 cup = TubInterface(getSaiTubAddress()).open();\n        return uint(cup);\n    }\n\n    /**\n     * @dev transfer CDP ownership\n     */\n    function give(uint cdpNum, address nextOwner) public {\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\n    }\n\n    function lock(uint cdpNum) public payable {\n        bytes32 cup = bytes32(cdpNum);\n        address tubAddr = getSaiTubAddress();\n        if (msg.value > 0) {\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface weth = tub.gem();\n            TokenInterface peth = tub.skr();\n\n            weth.deposit.value(msg.value)();\n\n            uint ink = rdiv(msg.value, tub.per());\n            ink = rmul(ink, tub.per()) <= msg.value ? ink : ink - 1;\n\n            setAllowance(weth, tubAddr);\n            tub.join(ink);\n\n            setAllowance(peth, tubAddr);\n            tub.lock(cup, ink);\n        }\n    }\n\n    function free(uint cdpNum, uint jam) public {\n        if (jam > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface peth = tub.skr();\n            TokenInterface weth = tub.gem();\n\n            uint ink = rdiv(jam, tub.per());\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n            tub.free(cup, ink);\n\n            setAllowance(peth, tubAddr);\n            \n            tub.exit(ink);\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n            weth.withdraw(freeJam);\n            \n            address(msg.sender).transfer(freeJam);\n        }\n    }\n\n    function draw(uint cdpNum, uint _wad) public {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n            tub.sai().transfer(msg.sender, _wad);\n        }\n    }\n\n    function wipe(uint cdpNum, uint _wad) public {\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n            TokenInterface dai = tub.sai();\n            TokenInterface mkr = tub.gov();\n\n            bytes32 cup = bytes32(cdpNum);\n\n            setAllowance(dai, getSaiTubAddress());\n            setAllowance(mkr, getSaiTubAddress());\n            setAllowance(dai, getUniswapDAIExchange());\n\n            (bytes32 val, bool ok) = tub.pep().peek();\n\n            // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n\n            uint daiAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n            daiAmt = add(_wad, daiAmt);\n            require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\n\n            if (ok && val != 0) {\n                daiEx.tokenToTokenSwapOutput(\n                    mkrFee,\n                    daiAmt,\n                    uint(999000000000000000000),\n                    uint(1899063809), // 6th March 2030 GMT // no logic\n                    address(mkr)\n                );\n            }\n\n            tub.wipe(cup, _wad);\n        }\n    }\n\n    function setAllowance(TokenInterface token_, address spender_) private {\n        if (token_.allowance(address(this), spender_) != uint(-1)) {\n            token_.approve(spender_, uint(-1));\n        }\n    }\n\n}\n\n\ncontract CDPCluster is CDPResolver {\n\n    function wipeAndFree(uint cdpNum, uint jam, uint _wad) public payable {\n        wipe(cdpNum, _wad);\n        free(cdpNum, jam);\n    }\n\n    /**\n     * @dev close CDP\n     */\n    function shut(uint cdpNum) public {\n        bytes32 cup = bytes32(cdpNum);\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        wipeAndFree(cdpNum, rmul(tub.ink(cup), tub.per()), tub.tab(cup));\n        tub.shut(cup);\n    }\n\n    /**\n     * @dev open a new CDP and lock ETH\n     */\n    function openAndLock() public payable returns (uint cdpNum) {\n        cdpNum = open();\n        lock(cdpNum);\n    }\n\n}\n\n\ncontract InstaMaker is CDPCluster {\n\n    uint public version;\n    \n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openAndLock\",\"outputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"getCDPBytes\",\"outputs\":[{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapMKRExchange\",\"outputs\":[{\"name\":\"ume\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapDAIExchange\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"shut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipeAndFree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806122ea8339810180604052602081101561003057600080fd5b81019080805190602001909291905050508060008190555050612292806100586000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308185f93146100d2578063442bef301461011757806354fd4d501461013557806373435d121461016057806394c4a124146101af578063d2b8035a14610206578063d7bb5e0e1461024b578063db5a5d9914610290578063db5b5a8a146102e7578063dd46706414610322578063ea16a20214610350578063f1d9a15014610392578063fcafcc68146103e9578063fcfff16f14610444575b005b3480156100de57600080fd5b50610115600480360360408110156100f557600080fd5b81019080803590602001909291908035906020019092919050505061046f565b005b61011f610a09565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b5061014a610a21565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b506101996004803603602081101561018357600080fd5b8101908080359060200190929190505050610a27565b6040518082815260200191505060405180910390f35b3480156101bb57600080fd5b506101c4610a34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021257600080fd5b506102496004803603604081101561022957600080fd5b810190808035906020019092919080359060200190929190505050610a50565b005b34801561025757600080fd5b5061028e6004803603604081101561026e57600080fd5b810190808035906020019092919080359060200190929190505050610c7e565b005b34801561029c57600080fd5b506102a5611587565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f357600080fd5b506103206004803603602081101561030a57600080fd5b81019080803590602001909291905050506115a3565b005b61034e6004803603602081101561033857600080fd5b8101908080359060200190929190505050611843565b005b6103906004803603606081101561036657600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611cbc565b005b34801561039e57600080fd5b506103a7611cd5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f557600080fd5b506104426004803603604081101561040c57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf1565b005b34801561045057600080fd5b50610459611dba565b6040518082815260200191505060405180910390f35b6000811115610a05576000826001029050600061048a611cd5565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156104f557600080fd5b505afa158015610509573d6000803e3d6000fd5b505050506040513d602081101561051f57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d60208110156105c057600080fd5b81019080805190602001909291905050509050600061067b878573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d602081101561066557600080fd5b8101908080519060200190929190505050611e70565b905086610724828673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d602081101561070e57600080fd5b8101908080519060200190929190505050611eb0565b11156107335760018103610735565b805b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e87836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506107d08386611efc565b8373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d602081101561091c57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109fc573d6000803e3d6000fd5b50505050505050505b5050565b6000610a13611dba565b9050610a1e81611843565b90565b60005481565b6000816001029050919050565b6000732c4bd064b998838076fa341a83d007fc2fa50957905090565b60008260010290506000821115610c79576000610a6b611cd5565b90508073ffffffffffffffffffffffffffffffffffffffff1663440f19ba83856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d6020811015610b8857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c3b57600080fd5b505af1158015610c4f573d6000803e3d6000fd5b505050506040513d6020811015610c6557600080fd5b810190808051906020019092919050505050505b505050565b6000811115611583576000610c91611cd5565b90506000610c9d611587565b90506000610ca9610a34565b905060008373ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d6020811015610d3957600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff166312d43a516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d6020811015610dda57600080fd5b810190808051906020019092919050505090506000876001029050610e0683610e01611cd5565b611efc565b610e1782610e12611cd5565b611efc565b610e2883610e23611587565b611efc565b6000808773ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610e8d57600080fd5b505afa158015610ea1573d6000803e3d6000fd5b505050506040513d6020811015610eb757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b158015610f2a57600080fd5b505af1158015610f3e573d6000803e3d6000fd5b505050506040513d6040811015610f5457600080fd5b8101908080519060200190929190805190602001909291905050509150915060006110e76110dd8b6110d88c73ffffffffffffffffffffffffffffffffffffffff16636f78ee0d896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050506040513d602081101561101857600080fd5b81019080805190602001909291905050508d73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505050506040513d60208110156110c257600080fd5b8101908080519060200190929190505050611e70565b611eb0565b846001900461210c565b905060008873ffffffffffffffffffffffffffffffffffffffff16632640f62c8973ffffffffffffffffffffffffffffffffffffffff166359e94862856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d602081101561119e57600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d602081101561122957600080fd5b810190808051906020019092919050505090506112468b82612148565b90508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506040513d602081101561134957600080fd5b810190808051906020019092919050505015156113ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6e6f742d617070726f7665642d7965740000000000000000000000000000000081525060200191505060405180910390fd5b8280156113df575060006001028414155b156114e9578873ffffffffffffffffffffffffffffffffffffffff1663b040d5458383683627e8f712373c00006371316a018b6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200195505050505050602060405180830381600087803b1580156114ac57600080fd5b505af11580156114c0573d6000803e3d6000fd5b505050506040513d60208110156114d657600080fd5b8101908080519060200190929190505050505b8973ffffffffffffffffffffffffffffffffffffffff166373b38101868d6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561156057600080fd5b505af1158015611574573d6000803e3d6000fd5b50505050505050505050505050505b5050565b60007309cabec1ead1c0ba254b09efb3ee13841712be14905090565b600081600102905060006115b5611cd5565b90506117b7836117088373ffffffffffffffffffffffffffffffffffffffff16631f3634ed866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561162b57600080fd5b505afa15801561163f573d6000803e3d6000fd5b505050506040513d602081101561165557600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d60208110156116f257600080fd5b8101908080519060200190929190505050611eb0565b8373ffffffffffffffffffffffffffffffffffffffff1663f7c8d634866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561177757600080fd5b505af115801561178b573d6000803e3d6000fd5b505050506040513d60208110156117a157600080fd5b8101908080519060200190929190505050611cbc565b8073ffffffffffffffffffffffffffffffffffffffff1663b84d2106836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561182657600080fd5b505af115801561183a573d6000803e3d6000fd5b50505050505050565b60008160010290506000611855611cd5565b90506000341115611cb757600081905060008173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156118c957600080fd5b505afa1580156118dd573d6000803e3d6000fd5b505050506040513d60208110156118f357600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561196a57600080fd5b505afa15801561197e573d6000803e3d6000fd5b505050506040513d602081101561199457600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b50505050506000611acc348573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d6020811015611ab657600080fd5b8101908080519060200190929190505050611e70565b905034611b75828673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d6020811015611b5f57600080fd5b8101908080519060200190929190505050611eb0565b1115611b845760018103611b86565b805b9050611b928386611efc565b8373ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050611c238286611efc565b8373ffffffffffffffffffffffffffffffffffffffff1663b3b77a5187836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611c9a57600080fd5b505af1158015611cae573d6000803e3d6000fd5b50505050505050505b505050565b611cc68382610c7e565b611cd0838361046f565b505050565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905090565b611cf9611cd5565b73ffffffffffffffffffffffffffffffffffffffff1663baa8529c83600102836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611d9e57600080fd5b505af1158015611db2573d6000803e3d6000fd5b505050505050565b600080611dc5611cd5565b73ffffffffffffffffffffffffffffffffffffffff1663fcfff16f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e2857600080fd5b505af1158015611e3c573d6000803e3d6000fd5b505050506040513d6020811015611e5257600080fd5b81019080805190602001909291905050509050806001900491505090565b600081611e9e611e8c856b033b2e3c9fd0803ce80000006121cd565b600285811515611e9857fe5b04612148565b811515611ea757fe5b04905092915050565b60006b033b2e3c9fd0803ce8000000611eea611ecc85856121cd565b60026b033b2e3c9fd0803ce8000000811515611ee457fe5b04612148565b811515611ef357fe5b04905092915050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d602081101561201457600080fd5b8101908080519060200190929190505050141515612108578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156120ef57600080fd5b505af1158015612103573d6000803e3d6000fd5b505050505b5050565b60008161213661212485670de0b6b3a76400006121cd565b60028581151561213057fe5b04612148565b81151561213f57fe5b04905092915050565b600082828401915081101515156121c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000808214806121ec575082828385029250828115156121e957fe5b04145b1515612260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a7230582095ecbf611aefb5ecf27e8e609d8cca145bd0eadf2799407c46a630ea41b09e1500290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}