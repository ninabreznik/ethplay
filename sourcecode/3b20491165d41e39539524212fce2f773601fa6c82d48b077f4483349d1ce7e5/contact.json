{
  "address": "0xb7ac09c2c0217b07d7c103029b4918a2c401eecb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "OasisDex: Old Contract 2",
  "contractName": "MatchingMarket",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\n/// matching_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n/// expiring_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n/// simple_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\npragma solidity ^0.4.8;\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\ncontract EventfulMarket {\n    event LogItemUpdate(uint id);\n    event LogTrade(uint pay_amt, address indexed pay_gem,\n                   uint buy_amt, address indexed buy_gem);\n\n    event LogMake(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n\n    event LogBump(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n\n    event LogTake(\n        bytes32           id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        address  indexed  taker,\n        uint128           take_amt,\n        uint128           give_amt,\n        uint64            timestamp\n    );\n\n    event LogKill(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n}\n\ncontract SimpleMarket is EventfulMarket, DSMath {\n\n    uint public last_offer_id;\n\n    mapping (uint => OfferInfo) public offers;\n\n    bool locked;\n\n    struct OfferInfo {\n        uint     pay_amt;\n        ERC20    pay_gem;\n        uint     buy_amt;\n        ERC20    buy_gem;\n        address  owner;\n        uint64   timestamp;\n    }\n\n    modifier can_buy(uint id) {\n        require(isActive(id));\n        _;\n    }\n\n    modifier can_cancel(uint id) {\n        require(isActive(id));\n        require(getOwner(id) == msg.sender);\n        _;\n    }\n\n    modifier can_offer {\n        _;\n    }\n\n    modifier synchronized {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function isActive(uint id) public constant returns (bool active) {\n        return offers[id].timestamp > 0;\n    }\n\n    function getOwner(uint id) public constant returns (address owner) {\n        return offers[id].owner;\n    }\n\n    function getOffer(uint id) public constant returns (uint, ERC20, uint, ERC20) {\n      var offer = offers[id];\n      return (offer.pay_amt, offer.pay_gem,\n              offer.buy_amt, offer.buy_gem);\n    }\n\n    // ---- Public entrypoints ---- //\n\n    function bump(bytes32 id_)\n        public\n        can_buy(uint256(id_))\n    {\n        var id = uint256(id_);\n        LogBump(\n            id_,\n            keccak256(offers[id].pay_gem, offers[id].buy_gem),\n            offers[id].owner,\n            offers[id].pay_gem,\n            offers[id].buy_gem,\n            uint128(offers[id].pay_amt),\n            uint128(offers[id].buy_amt),\n            offers[id].timestamp\n        );\n    }\n\n    // Accept given `quantity` of an offer. Transfers funds from caller to\n    // offer maker, and from market to caller.\n    function buy(uint id, uint quantity)\n        public\n        can_buy(id)\n        synchronized\n        returns (bool)\n    {\n        OfferInfo memory offer = offers[id];\n        uint spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\n\n        require(uint128(spend) == spend);\n        require(uint128(quantity) == quantity);\n\n        // For backwards semantic compatibility.\n        if (quantity == 0 || spend == 0 ||\n            quantity > offer.pay_amt || spend > offer.buy_amt)\n        {\n            return false;\n        }\n\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\n        require( offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) );\n        require( offer.pay_gem.transfer(msg.sender, quantity) );\n\n        LogItemUpdate(id);\n        LogTake(\n            bytes32(id),\n            keccak256(offer.pay_gem, offer.buy_gem),\n            offer.owner,\n            offer.pay_gem,\n            offer.buy_gem,\n            msg.sender,\n            uint128(quantity),\n            uint128(spend),\n            uint64(now)\n        );\n        LogTrade(quantity, offer.pay_gem, spend, offer.buy_gem);\n\n        if (offers[id].pay_amt == 0) {\n          delete offers[id];\n        }\n\n        return true;\n    }\n\n    // Cancel an offer. Refunds offer maker.\n    function cancel(uint id)\n        public\n        can_cancel(id)\n        synchronized\n        returns (bool success)\n    {\n        // read-only offer. Modify an offer by directly accessing offers[id]\n        OfferInfo memory offer = offers[id];\n        delete offers[id];\n\n        require( offer.pay_gem.transfer(offer.owner, offer.pay_amt) );\n\n        LogItemUpdate(id);\n        LogKill(\n            bytes32(id),\n            keccak256(offer.pay_gem, offer.buy_gem),\n            offer.owner,\n            offer.pay_gem,\n            offer.buy_gem,\n            uint128(offer.pay_amt),\n            uint128(offer.buy_amt),\n            uint64(now)\n        );\n\n        success = true;\n    }\n\n    function kill(bytes32 id)\n        public\n    {\n        require(cancel(uint256(id)));\n    }\n\n    function make(\n        ERC20    pay_gem,\n        ERC20    buy_gem,\n        uint128  pay_amt,\n        uint128  buy_amt\n    )\n        public\n        returns (bytes32 id)\n    {\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    function offer(uint pay_amt, ERC20 pay_gem, uint buy_amt, ERC20 buy_gem)\n        public\n        can_offer\n        synchronized\n        returns (uint id)\n    {\n        require(uint128(pay_amt) == pay_amt);\n        require(uint128(buy_amt) == buy_amt);\n        require(pay_amt > 0);\n        require(pay_gem != ERC20(0x0));\n        require(buy_amt > 0);\n        require(buy_gem != ERC20(0x0));\n        require(pay_gem != buy_gem);\n\n        OfferInfo memory info;\n        info.pay_amt = pay_amt;\n        info.pay_gem = pay_gem;\n        info.buy_amt = buy_amt;\n        info.buy_gem = buy_gem;\n        info.owner = msg.sender;\n        info.timestamp = uint64(now);\n        id = _next_id();\n        offers[id] = info;\n\n        require( pay_gem.transferFrom(msg.sender, this, pay_amt) );\n\n        LogItemUpdate(id);\n        LogMake(\n            bytes32(id),\n            keccak256(pay_gem, buy_gem),\n            msg.sender,\n            pay_gem,\n            buy_gem,\n            uint128(pay_amt),\n            uint128(buy_amt),\n            uint64(now)\n        );\n    }\n\n    function take(bytes32 id, uint128 maxTakeAmount)\n        public\n    {\n        require(buy(uint256(id), maxTakeAmount));\n    }\n\n    function _next_id()\n        internal\n        returns (uint)\n    {\n        last_offer_id++; return last_offer_id;\n    }\n}\n\n// Simple Market with a market lifetime. When the close_time has been reached,\n// offers can only be cancelled (offer and buy will throw).\n\ncontract ExpiringMarket is DSAuth, SimpleMarket {\n    uint64 public close_time;\n    bool public stopped;\n\n    // after close_time has been reached, no new offers are allowed\n    modifier can_offer {\n        require(!isClosed());\n        _;\n    }\n\n    // after close, no new buys are allowed\n    modifier can_buy(uint id) {\n        require(isActive(id));\n        require(!isClosed());\n        _;\n    }\n\n    // after close, anyone can cancel an offer\n    modifier can_cancel(uint id) {\n        require(isActive(id));\n        require((msg.sender == getOwner(id)) || isClosed());\n        _;\n    }\n\n    function ExpiringMarket(uint64 _close_time)\n        public\n    {\n        close_time = _close_time;\n    }\n\n    function isClosed() public constant returns (bool closed) {\n        return stopped || getTime() > close_time;\n    }\n\n    function getTime() public constant returns (uint64) {\n        return uint64(now);\n    }\n\n    function stop() public auth {\n        stopped = true;\n    }\n}\n\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract MatchingEvents {\n    event LogBuyEnabled(bool isEnabled);\n    event LogMinSell(address pay_gem, uint min_amount);\n    event LogMatchingEnabled(bool isEnabled);\n    event LogUnsortedOffer(uint id);\n    event LogSortedOffer(uint id);\n    event LogInsert(address keeper, uint id);\n    event LogDelete(address keeper, uint id);\n}\n\ncontract MatchingMarket is MatchingEvents, ExpiringMarket, DSNote {\n    bool public buyEnabled = true;      //buy enabled\n    bool public matchingEnabled = true; //true: enable matching,\n                                         //false: revert to expiring market\n    struct sortInfo {\n        uint next;  //points to id of next higher offer\n        uint prev;  //points to id of previous lower offer\n        uint delb;  //the blocknumber where this entry was marked for delete\n    }\n    mapping(uint => sortInfo) public _rank;                     //doubly linked lists of sorted offer ids\n    mapping(address => mapping(address => uint)) public _best;  //id of the highest offer for a token pair\n    mapping(address => mapping(address => uint)) public _span;  //number of offers stored for token pair in sorted orderbook\n    mapping(address => uint) public _dust;                      //minimum sell amount for a token to avoid dust offers\n    mapping(uint => uint) public _near;         //next unsorted offer id\n    uint _head;                                 //first unsorted offer id\n\n    function MatchingMarket(uint64 close_time) ExpiringMarket(close_time) public {\n    }\n\n    // ---- Public entrypoints ---- //\n\n    function make(\n        ERC20    pay_gem,\n        ERC20    buy_gem,\n        uint128  pay_amt,\n        uint128  buy_amt\n    )\n        public\n        returns (bytes32)\n    {\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\n    }\n\n    function take(bytes32 id, uint128 maxTakeAmount) public {\n        require(buy(uint256(id), maxTakeAmount));\n    }\n\n    function kill(bytes32 id) public {\n        require(cancel(uint256(id)));\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    //\n    // If matching is enabled:\n    //     * creates new offer without putting it in\n    //       the sorted list.\n    //     * available to authorized contracts only!\n    //     * keepers should call insert(id,pos)\n    //       to put offer in the sorted list.\n    //\n    // If matching is disabled:\n    //     * calls expiring market's offer().\n    //     * available to everyone without authorization.\n    //     * no sorting is done.\n    //\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //taker (ask) buy how much\n        ERC20 buy_gem    //taker (ask) buy which token\n    )\n        public\n        returns (uint)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        var fn = matchingEnabled ? _offeru : super.offer;\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //maker (ask) buy how much\n        ERC20 buy_gem,   //maker (ask) buy which token\n        uint pos         //position to insert offer, 0 should be used if unknown\n    )\n        public\n        can_offer\n        returns (uint)\n    {\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, false);\n    }\n\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //maker (ask) buy how much\n        ERC20 buy_gem,   //maker (ask) buy which token\n        uint pos,        //position to insert offer, 0 should be used if unknown\n        bool rounding    //match \"close enough\" orders?\n    )\n        public\n        can_offer\n        returns (uint)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(_dust[pay_gem] <= pay_amt);\n\n        if (matchingEnabled) {\n          return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, rounding);\n        }\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\n    }\n\n    //Transfers funds from caller to offer maker, and from market to caller.\n    function buy(uint id, uint amount)\n        public\n        can_buy(id)\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        var fn = matchingEnabled ? _buys : super.buy;\n        return fn(id, amount);\n    }\n\n    // Cancel an offer. Refunds offer maker.\n    function cancel(uint id)\n        public\n        can_cancel(id)\n        returns (bool success)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        if (matchingEnabled) {\n            if (isOfferSorted(id)) {\n                require(_unsort(id));\n            } else {\n                require(_hide(id));\n            }\n        }\n        return super.cancel(id);    //delete the offer.\n    }\n\n    //insert offer into the sorted list\n    //keepers need to use this function\n    function insert(\n        uint id,   //maker (ask) id\n        uint pos   //position to insert into\n    )\n        public\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(!isOfferSorted(id));    //make sure offers[id] is not yet sorted\n        require(isActive(id));          //make sure offers[id] is active\n\n        _hide(id);                      //remove offer from unsorted offers list\n        _sort(id, pos);                 //put offer into the sorted offers list\n        LogInsert(msg.sender, id);\n        return true;\n    }\n\n    //deletes _rank [id]\n    //  Function should be called by keepers.\n    function del_rank(uint id)\n        public\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(!isActive(id) && _rank[id].delb != 0 && _rank[id].delb < block.number - 10);\n        delete _rank[id];\n        LogDelete(msg.sender, id);\n        return true;\n    }\n\n    //set the minimum sell amount for a token\n    //    Function is used to avoid \"dust offers\" that have\n    //    very small amount of tokens to sell, and it would\n    //    cost more gas to accept the offer, than the value\n    //    of tokens received.\n    function setMinSell(\n        ERC20 pay_gem,     //token to assign minimum sell amount to\n        uint dust          //maker (ask) minimum sell amount\n    )\n        public\n        auth\n        note\n        returns (bool)\n    {\n        _dust[pay_gem] = dust;\n        LogMinSell(pay_gem, dust);\n        return true;\n    }\n\n    //returns the minimum sell amount for an offer\n    function getMinSell(\n        ERC20 pay_gem      //token for which minimum sell amount is queried\n    )\n        public\n        constant\n        returns (uint)\n    {\n        return _dust[pay_gem];\n    }\n\n    //set buy functionality enabled/disabled\n    function setBuyEnabled(bool buyEnabled_) public auth returns (bool) {\n        buyEnabled = buyEnabled_;\n        LogBuyEnabled(buyEnabled);\n        return true;\n    }\n\n    //set matching enabled/disabled\n    //    If matchingEnabled true(default), then inserted offers are matched.\n    //    Except the ones inserted by contracts, because those end up\n    //    in the unsorted list of offers, that must be later sorted by\n    //    keepers using insert().\n    //    If matchingEnabled is false then MatchingMarket is reverted to ExpiringMarket,\n    //    and matching is not done, and sorted lists are disabled.\n    function setMatchingEnabled(bool matchingEnabled_) public auth returns (bool) {\n        matchingEnabled = matchingEnabled_;\n        LogMatchingEnabled(matchingEnabled);\n        return true;\n    }\n\n    //return the best offer for a token pair\n    //      the best offer is the lowest one if it's an ask,\n    //      and highest one if it's a bid offer\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\n        return _best[sell_gem][buy_gem];\n    }\n\n    //return the next worse offer in the sorted list\n    //      the worse offer is the higher one if its an ask,\n    //      a lower one if its a bid offer,\n    //      and in both cases the newer one if they're equal.\n    function getWorseOffer(uint id) public constant returns(uint) {\n        return _rank[id].prev;\n    }\n\n    //return the next better offer in the sorted list\n    //      the better offer is in the lower priced one if its an ask,\n    //      the next higher priced one if its a bid offer\n    //      and in both cases the older one if they're equal.\n    function getBetterOffer(uint id) public constant returns(uint) {\n\n        return _rank[id].next;\n    }\n\n    //return the amount of better offers for a token pair\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\n        return _span[sell_gem][buy_gem];\n    }\n\n    //get the first unsorted offer that was inserted by a contract\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\n    //      Their offers get put in the unsorted list of offers.\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\n    function getFirstUnsortedOffer() public constant returns(uint) {\n        return _head;\n    }\n\n    //get the next unsorted offer\n    //      Can be used to cycle through all the unsorted offers.\n    function getNextUnsortedOffer(uint id) public constant returns(uint) {\n        return _near[id];\n    }\n\n    function isOfferSorted(uint id) public constant returns(bool) {\n        return _rank[id].next != 0\n               || _rank[id].prev != 0\n               || _best[offers[id].pay_gem][offers[id].buy_gem] == id;\n    }\n\n    function sellAllAmount(ERC20 pay_gem, uint pay_amt, ERC20 buy_gem, uint min_fill_amount)\n        public\n        returns (uint fill_amt)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        uint offerId;\n        while (pay_amt > 0) {                           //while there is amount to sell\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\n            require(offerId != 0);                      //Fails if there are not more offers\n\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\n            if (pay_amt * 1 ether < wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) {\n                break;                                  //We consider that all amount is sold\n            }\n            if (pay_amt >= offers[offerId].buy_amt) {                       //If amount to sell is higher or equal than current offer amount to buy\n                fill_amt = add(fill_amt, offers[offerId].pay_amt);          //Add amount bought to acumulator\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt);            //Decrease amount to sell\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));   //We take the whole offer\n            } else { // if lower\n                var baux = rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9;\n                fill_amt = add(fill_amt, baux);         //Add amount bought to acumulator\n                take(bytes32(offerId), uint128(baux));  //We take the portion of the offer that we need\n                pay_amt = 0;                            //All amount is sold\n            }\n        }\n        require(fill_amt >= min_fill_amount);\n    }\n\n    function buyAllAmount(ERC20 buy_gem, uint buy_amt, ERC20 pay_gem, uint max_fill_amount)\n        public\n        returns (uint fill_amt)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        uint offerId;\n        while (buy_amt > 0) {                           //Meanwhile there is amount to buy\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\n            require(offerId != 0);\n\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\n            if (buy_amt * 1 ether < wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) {\n                break;                                  //We consider that all amount is sold\n            }\n            if (buy_amt >= offers[offerId].pay_amt) {                       //If amount to buy is higher or equal than current offer amount to sell\n                fill_amt = add(fill_amt, offers[offerId].buy_amt);          //Add amount sold to acumulator\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt);            //Decrease amount to buy\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));   //We take the whole offer\n            } else {                                                        //if lower\n                fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add amount sold to acumulator\n                take(bytes32(offerId), uint128(buy_amt));                   //We take the portion of the offer that we need\n                buy_amt = 0;                                                //All amount is bought\n            }\n        }\n        require(fill_amt <= max_fill_amount);\n    }\n\n    function getBuyAmount(ERC20 buy_gem, ERC20 pay_gem, uint pay_amt) public constant returns (uint fill_amt) {\n        var offerId = getBestOffer(buy_gem, pay_gem);           //Get best offer for the token pair\n        while (pay_amt > offers[offerId].buy_amt) {\n            fill_amt = add(fill_amt, offers[offerId].pay_amt);  //Add amount to buy accumulator\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt);    //Decrease amount to pay\n            if (pay_amt > 0) {                                  //If we still need more offers\n                offerId = getWorseOffer(offerId);               //We look for the next best offer\n                require(offerId != 0);                          //Fails if there are not enough offers to complete\n            }\n        }\n        fill_amt = add(fill_amt, rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9); //Add proportional amount of last offer to buy accumulator\n    }\n\n    function getPayAmount(ERC20 pay_gem, ERC20 buy_gem, uint buy_amt) public constant returns (uint fill_amt) {\n        var offerId = getBestOffer(buy_gem, pay_gem);           //Get best offer for the token pair\n        while (buy_amt > offers[offerId].pay_amt) {\n            fill_amt = add(fill_amt, offers[offerId].buy_amt);  //Add amount to pay accumulator\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt);    //Decrease amount to buy\n            if (buy_amt > 0) {                                  //If we still need more offers\n                offerId = getWorseOffer(offerId);               //We look for the next best offer\n                require(offerId != 0);                          //Fails if there are not enough offers to complete\n            }\n        }\n        fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add proportional amount of last offer to pay accumulator\n    }\n\n    // ---- Internal Functions ---- //\n\n    function _buys(uint id, uint amount)\n        internal\n        returns (bool)\n    {\n        require(buyEnabled);\n\n        if (amount == offers[id].pay_amt && isOfferSorted(id)) {\n            //offers[id] must be removed from sorted list because all of it is bought\n            _unsort(id);\n        }\n        require(super.buy(id, amount));\n        return true;\n    }\n\n    //find the id of the next higher offer after offers[id]\n    function _find(uint id)\n        internal\n        view\n        returns (uint)\n    {\n        require( id > 0 );\n\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        uint top = _best[pay_gem][buy_gem];\n        uint old_top = 0;\n\n        // Find the larger-than-id order whose successor is less-than-id.\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\n            old_top = top;\n            top = _rank[top].prev;\n        }\n        return old_top;\n    }\n\n    //find the id of the next higher offer after offers[id]\n    function _findpos(uint id, uint pos)\n        internal\n        view\n        returns (uint)\n    {\n        require(id > 0);\n\n        // Look for an active order.\n        while (pos != 0 && !isActive(pos)) {\n            pos = _rank[pos].prev;\n        }\n\n        if (pos == 0) {\n            //if we got to the end of list without a single active offer\n            return _find(id);\n\n        } else {\n            // if we did find a nearby active offer\n            // Walk the order book down from there...\n            if(_isPricedLtOrEq(id, pos)) {\n                uint old_pos;\n\n                // Guaranteed to run at least once because of\n                // the prior if statements.\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\n                    old_pos = pos;\n                    pos = _rank[pos].prev;\n                }\n                return old_pos;\n\n            // ...or walk it up.\n            } else {\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\n                    pos = _rank[pos].next;\n                }\n                return pos;\n            }\n        }\n    }\n\n    //return true if offers[low] priced less than or equal to offers[high]\n    function _isPricedLtOrEq(\n        uint low,   //lower priced offer's id\n        uint high   //higher priced offer's id\n    )\n        internal\n        view\n        returns (bool)\n    {\n        return mul(offers[low].buy_amt, offers[high].pay_amt)\n          >= mul(offers[high].buy_amt, offers[low].pay_amt);\n    }\n\n    //these variables are global only because of solidity local variable limit\n\n    //match offers with taker offer, and execute token transactions\n    function _matcho(\n        uint t_pay_amt,    //taker sell how much\n        ERC20 t_pay_gem,   //taker sell which token\n        uint t_buy_amt,    //taker buy how much\n        ERC20 t_buy_gem,   //taker buy which token\n        uint pos,          //position id\n        bool rounding      //match \"close enough\" orders?\n    )\n        internal\n        returns (uint id)\n    {\n        uint best_maker_id;    //highest maker id\n        uint t_buy_amt_old;    //taker buy how much saved\n        uint m_buy_amt;        //maker offer wants to buy this much token\n        uint m_pay_amt;        //maker offer wants to sell this much token\n\n        // there is at least one offer stored for token pair\n        while (_best[t_buy_gem][t_pay_gem] > 0) {\n            best_maker_id = _best[t_buy_gem][t_pay_gem];\n            m_buy_amt = offers[best_maker_id].buy_amt;\n            m_pay_amt = offers[best_maker_id].pay_amt;\n\n            // Ugly hack to work around rounding errors. Based on the idea that\n            // the furthest the amounts can stray from their \"true\" values is 1.\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\n            // their \"correct\" values and m_buy_amt and t_buy_amt at -1.\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\n            // c * d > a * b + a + b + c + d, we write...\n            if (mul(m_buy_amt, t_buy_amt) > mul(t_pay_amt, m_pay_amt) +\n                (rounding ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt : 0))\n            {\n                break;\n            }\n            // ^ The `rounding` parameter is a compromise borne of a couple days\n            // of discussion.\n\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\n            t_buy_amt_old = t_buy_amt;\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\n\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\n                break;\n            }\n        }\n\n        if (t_buy_amt > 0 && t_pay_amt > 0) {\n            //new offer should be created\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\n            //insert offer into the sorted list\n            _sort(id, pos);\n        }\n    }\n\n    // Make a new offer without putting it in the sorted list.\n    // Takes funds from the caller into market escrow.\n    // ****Available to authorized contracts only!**********\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\n    function _offeru(\n        uint pay_amt,      //maker (ask) sell how much\n        ERC20 pay_gem,     //maker (ask) sell which token\n        uint buy_amt,      //maker (ask) buy how much\n        ERC20 buy_gem      //maker (ask) buy which token\n    )\n        internal\n        returns (uint id)\n    {\n        require(_dust[pay_gem] <= pay_amt);\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\n        _near[id] = _head;\n        _head = id;\n        LogUnsortedOffer(id);\n    }\n\n    //put offer into the sorted list\n    function _sort(\n        uint id,    //maker (ask) id\n        uint pos    //position to insert into\n    )\n        internal\n    {\n        require(isActive(id));\n\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        uint prev_id;                                      //maker (ask) id\n\n        if (pos == 0 || !isOfferSorted(pos)) {\n            pos = _find(id);\n        } else {\n            pos = _findpos(id, pos);\n\n            //if user has entered a `pos` that belongs to another currency pair\n            //we start from scratch\n            if(pos != 0 && (offers[pos].pay_gem != offers[id].pay_gem\n                      || offers[pos].buy_gem != offers[id].buy_gem))\n            {\n                pos = 0;\n                pos=_find(id);\n            }\n        }\n\n\n        //requirement below is satisfied by statements above\n        //require(pos == 0 || isOfferSorted(pos));\n\n\n        if (pos != 0) {                                    //offers[id] is not the highest offer\n            //requirement below is satisfied by statements above\n            //require(_isPricedLtOrEq(id, pos));\n            prev_id = _rank[pos].prev;\n            _rank[pos].prev = id;\n            _rank[id].next = pos;\n        } else {                                           //offers[id] is the highest offer\n            prev_id = _best[pay_gem][buy_gem];\n            _best[pay_gem][buy_gem] = id;\n        }\n\n        if (prev_id != 0) {                               //if lower offer does exist\n            //requirement below is satisfied by statements above\n            //require(!_isPricedLtOrEq(id, prev_id));\n            _rank[prev_id].next = id;\n            _rank[id].prev = prev_id;\n        }\n\n        _span[pay_gem][buy_gem]++;\n        LogSortedOffer(id);\n    }\n\n    // Remove offer from the sorted list (does not cancel offer)\n    function _unsort(\n        uint id    //id of maker (ask) offer to remove from sorted list\n    )\n        internal\n        returns (bool)\n    {\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        require(_span[pay_gem][buy_gem] > 0);\n\n        require(_rank[id].delb == 0 &&                    //assert id is in the sorted list\n                 isOfferSorted(id));\n\n        if (id != _best[pay_gem][buy_gem]) {              // offers[id] is not the highest offer\n            require(_rank[_rank[id].next].prev == id);\n            _rank[_rank[id].next].prev = _rank[id].prev;\n        } else {                                          //offers[id] is the highest offer\n            _best[pay_gem][buy_gem] = _rank[id].prev;\n        }\n\n        if (_rank[id].prev != 0) {                        //offers[id] is not the lowest offer\n            require(_rank[_rank[id].prev].next == id);\n            _rank[_rank[id].prev].next = _rank[id].next;\n        }\n\n        _span[pay_gem][buy_gem]--;\n        _rank[id].delb = block.number;                    //mark _rank[id] for deletion\n        return true;\n    }\n\n    //Hide offer from the unsorted order book (does not cancel offer)\n    function _hide(\n        uint id     //id of maker offer to remove from unsorted list\n    )\n        internal\n        returns (bool)\n    {\n        uint uid = _head;               //id of an offer in unsorted offers list\n        uint pre = uid;                 //id of previous offer in unsorted offers list\n\n        require(!isOfferSorted(id));    //make sure offer id is not in sorted offers list\n\n        if (_head == id) {              //check if offer is first offer in unsorted offers list\n            _head = _near[id];          //set head to new first unsorted offer\n            _near[id] = 0;              //delete order from unsorted order list\n            return true;\n        }\n        while (uid > 0 && uid != id) {  //find offer in unsorted order list\n            pre = uid;\n            uid = _near[uid];\n        }\n        if (uid != id) {                //did not find offer id in unsorted offers list\n            return false;\n        }\n        _near[pre] = _near[id];         //set previous unsorted offer to point to offer after offer id\n        _near[id] = 0;                  //delete order from unsorted order list\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005dfa14c0"
}