{
  "address": "0x0bc957a2dca7a6549f94fcab8cc3a900afdb1627",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exorbux",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-19\n*/\n\npragma solidity ^0.4.20;\n\n/*\n    -------------------------------------------------------------------------------------------------------\n    Website: https://exorbux.com\n    Exchange (We recomand to use MetaMask or TrustWallet): https://exorbux.com/exchange\n    Twitter: https://twitter.com/exorbux\n    Telegram Group: https://t.me/exorbuxgroup\n    Telegram Announcement : https://t.me/exorbuxcom\n    -------------------------------------------------------------------------------------------------------\n\tExorbux \n     Exorbux Earn Passive Ethereum. \n\t- Buys - 35% fee goes to all current token holders. \n\t- Sells - 15% fee to all current tokens holders. And it’s lower because you shouldn’t have to pay the sane fee exiting. You deserve more. \n\t- Transfers - 0% fee! We have plans for games and we don't want that to be an obstacle!\n\t- Masternode - you get 7% from deposit of all players who enter using your Masternode . \n*/\n\ncontract Exorbux {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Exorbux\";\n    string public symbol = \"EXB\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 35; // 35% to enter our community\n    uint8 constant internal refferalFee_ = 20; // 20% from enter fee divs or 7% for each invite, great for inviting new members on Exorbux\n    uint8 constant internal exitFee_ = 15; // 15% for selling\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n\n    // referral program\n    mapping(address => uint256) internal referrals;\n    mapping(address => bool) internal isUser;\n    address[] public usersAddresses;\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    function Exorbuxcom()\n        public\n    {\n        // add administrators here with their wallets\n\n  \t\t// bungalogic\n\t\t// Website developer, concept and design. Community\n\t\tadministrators[0x2A02F9e9a7203717361A00E53158D85b4B3Cb8DB] = true;\n\t\tambassadors_[0x2A02F9e9a7203717361A00E53158D85b4B3Cb8DB] = true;\n\n\t\t// clumsier \n\t\t// Solidity Developer, website,  EXB \n\t\tadministrators[msg.sender] = true;\n\t\tambassadors_[msg.sender] = true;\n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /* Converts all of caller's dividends to tokens. */\n    function reinvest() onlyStronghands() public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /* Alias of sell() and withdraw(). */\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /* Withdraws all of the callers earnings. */\n    function withdraw() onlyStronghands() public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n    /* Liquifies tokens to ethereum. */\n    function sell(uint256 _amountOfTokens) onlyBagholders() public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n\n\n    /* Transfer tokens from the caller to a new holder. * No fee! */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders() public returns(bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n        // fire event\n        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n\n    }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function referralsOf(address _customerAddress)\n        public\n        view\n        returns(uint256)\n    {\n        return referrals[_customerAddress];\n    }\n\n    function totalUsers()\n        public\n        view\n        returns(uint256)\n    {\n        return usersAddresses.length;\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a Kekly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n\n            if (isUser[_customerAddress] == false) {\n            \treferrals[_referredBy]++;\n            }     \n\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        if (isUser[_customerAddress] == false ) {\n        \tisUser[_customerAddress] = true;\n        \tusersAddresses.push(_customerAddress);\n        }\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60806040526040805190810160405280600781526020017f45786f72627578000000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620000e1565b506040805190810160405280600381526020017f4558420000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620000e1565b5068056bc75e2d631000006002556000600b556001600e60006101000a81548160ff021916908315150217905550348015620000da57600080fd5b5062000190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012457805160ff191683800117855562000155565b8280016001018555821562000155579182015b828111156200015457825182559160200191906001019062000137565b5b50905062000164919062000168565b5090565b6200018d91905b80821115620001895760008160009055506001016200016f565b5090565b90565b612ab480620001a06000396000f30060806040526004361061018a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b1461019857806306fdde03146101ef57806310d0ffdd1461027f57806318160ddd146102c057806322609373146102eb57806327defa1f1461032c578063313ce5671461035b5780633ccfd60b1461038c5780634b750334146103a357806356d399e8146103ce578063688abbf7146103f95780636b2f46321461043c57806370a082311461046757806373338081146104be57806376be15851461052b578063831aba43146105865780638328b610146105dd5780638620410b1461060a57806387c9505814610635578063949e8acd1461068457806395d89b41146106af578063a8e04f341461073f578063a9059cbb14610756578063b5e02e84146107bb578063b84c8246146107d2578063bff1f9e11461083b578063c47f002714610866578063e4849b32146108cf578063e9fad8ee146108fc578063f088d54714610913578063fdb5a03e1461095d575b610195346000610974565b50005b3480156101a457600080fd5b506101d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611624565b6040518082815260200191505060405180910390f35b3480156101fb57600080fd5b506102046116c6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610244578082015181840152602081019050610229565b50505050905090810190601f1680156102715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028b57600080fd5b506102aa60048036038101908080359060200190929190505050611764565b6040518082815260200191505060405180910390f35b3480156102cc57600080fd5b506102d56117a6565b6040518082815260200191505060405180910390f35b3480156102f757600080fd5b50610316600480360381019080803590602001909291905050506117b0565b6040518082815260200191505060405180910390f35b34801561033857600080fd5b50610341611803565b604051808215151515815260200191505060405180910390f35b34801561036757600080fd5b50610370611816565b604051808260ff1660ff16815260200191505060405180910390f35b34801561039857600080fd5b506103a161181b565b005b3480156103af57600080fd5b506103b86119bf565b6040518082815260200191505060405180910390f35b3480156103da57600080fd5b506103e3611a27565b6040518082815260200191505060405180910390f35b34801561040557600080fd5b50610426600480360381019080803515159060200190929190505050611a2d565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610451611a99565b6040518082815260200191505060405180910390f35b34801561047357600080fd5b506104a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ab8565b6040518082815260200191505060405180910390f35b3480156104ca57600080fd5b506104e960048036038101908080359060200190929190505050611b01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053757600080fd5b5061056c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b3f565b604051808215151515815260200191505060405180910390f35b34801561059257600080fd5b506105c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b5f565b6040518082815260200191505060405180910390f35b3480156105e957600080fd5b5061060860048036038101908080359060200190929190505050611ba8565b005b34801561061657600080fd5b5061061f611c10565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b50610682600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611c78565b005b34801561069057600080fd5b50610699611d31565b6040518082815260200191505060405180910390f35b3480156106bb57600080fd5b506106c4611d46565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107045780820151818401526020810190506106e9565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561074b57600080fd5b50610754611de4565b005b34801561076257600080fd5b506107a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e5f565b604051808215151515815260200191505060405180910390f35b3480156107c757600080fd5b506107d0612127565b005b3480156107de57600080fd5b50610839600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122b1565b005b34801561084757600080fd5b50610850612329565b6040518082815260200191505060405180910390f35b34801561087257600080fd5b506108cd600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612336565b005b3480156108db57600080fd5b506108fa600480360381019080803590602001909291905050506123ae565b005b34801561090857600080fd5b506109116125e6565b005b610947600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061264d565b6040518082815260200191505060405180910390f35b34801561096957600080fd5b5061097261265f565b005b60008060008060008060008060008a6000339050600e60009054906101000a900460ff1680156109b657506801158e460913d00000826109b2611a99565b0311155b1561107c5760011515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610a645750670de0b6b3a764000082600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111155b1515610a6f57600080fd5b610ab8600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836127d3565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550339950610b16610b0f8e602360ff166127f1565b606461282c565b9850610b30610b298a601460ff166127f1565b606461282c565b9750610b3c8989612847565b9650610b488d8a612847565b9550610b5386612860565b94506801000000000000000087029350600085118015610b7f5750600b54610b7d86600b546127d3565b115b1515610b8a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614158015610bf357508973ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b8015610c405750600254600760008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15610d7f57610c8e600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896127d3565b600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060001515600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610d7a57600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505b610d9a565b610d8987896127d3565b965068010000000000000000870293505b60001515600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610eb2576001600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060068a90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6000600b541115610f1d57610ec9600b54866127d3565b600b81905550600b54680100000000000000008802811515610ee757fe5b04600c60008282540192505081905550600b54680100000000000000008802811515610f0f57fe5b048502840384039350610f25565b84600b819055505b610f6e600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866127d3565b600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508385600c540203925082600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a50611614565b6000600e60006101000a81548160ff0219169083151502179055503399506110b26110ab8e602360ff166127f1565b606461282c565b98506110cc6110c58a601460ff166127f1565b606461282c565b97506110d88989612847565b96506110e48d8a612847565b95506110ef86612860565b9450680100000000000000008702935060008511801561111b5750600b5461111986600b546127d3565b115b151561112657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415801561118f57508973ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614155b80156111dc5750600254600760008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561131b5761122a600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896127d3565b600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060001515600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561131657600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505b611336565b61132587896127d3565b965068010000000000000000870293505b60001515600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561144e576001600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060068a90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6000600b5411156114b957611465600b54866127d3565b600b81905550600b5468010000000000000000880281151561148357fe5b04600c60008282540192505081905550600b546801000000000000000088028115156114ab57fe5b0485028403840393506114c1565b84600b819055505b61150a600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866127d3565b600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508385600c540203925082600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f88604051808381526020018281526020019250505060405180910390a3849a505b5050505050505050505092915050565b600068010000000000000000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c5402038115156116be57fe5b049050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561175c5780601f106117315761010080835404028352916020019161175c565b820191906000526020600020905b81548152906001019060200180831161173f57829003601f168201915b505050505081565b60008060008061178261177b86602360ff166127f1565b606461282c565b925061178e8584612847565b915061179982612860565b9050809350505050919050565b6000600b54905090565b600080600080600b5485111515156117c757600080fd5b6117d0856128ed565b92506117ea6117e384600f60ff166127f1565b606461282c565b91506117f68383612847565b9050809350505050919050565b600e60009054906101000a900460ff1681565b601281565b600080600061182a6001611a2d565b11151561183657600080fd5b3391506118436000611a2d565b9050680100000000000000008102600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561196c573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b6000806000806000600b5414156119e4576402540be40064174876e800039350611a21565b6119f5670de0b6b3a76400006128ed565b9250611a0f611a0884600f60ff166127f1565b606461282c565b9150611a1b8383612847565b90508093505b50505090565b60025481565b60008033905082611a4657611a4181611624565b611a91565b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a8f82611624565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600681815481101515611b1057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000339050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c0557600080fd5b816002819055505050565b6000806000806000600b541415611c35576402540be40064174876e800019350611c72565b611c46670de0b6b3a76400006128ed565b9250611c60611c5984602360ff166127f1565b606461282c565b9150611c6c83836127d3565b90508093505b50505090565b6000339050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611cd557600080fd5b81600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600080339050611d4081611ab8565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ddc5780601f10611db157610100808354040283529160200191611ddc565b820191906000526020600020905b815481529060010190602001808311611dbf57829003601f168201915b505050505081565b6000339050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611e4157600080fd5b6000600e60006101000a81548160ff02191690831515021790555050565b6000806000611e6c611d31565b111515611e7857600080fd5b339050600e60009054906101000a900460ff16158015611ed75750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311155b1515611ee257600080fd5b6000611eee6001611a2d565b1115611efd57611efc61181b565b5b611f46600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612847565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fd2600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846127d3565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600c5402600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600c5402600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b6001600d6000732a02f9e9a7203717361a00e53158d85b4b3cb8db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160036000732a02f9e9a7203717361a00e53158d85b4b3cb8db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b6000339050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561230e57600080fd5b81600190805190602001906123249291906129e3565b505050565b6000600680549050905090565b6000339050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561239357600080fd5b81600090805190602001906123a99291906129e3565b505050565b60008060008060008060006123c1611d31565b1115156123cd57600080fd5b339550600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054871115151561241e57600080fd5b86945061242a856128ed565b935061244461243d85600f60ff166127f1565b606461282c565b92506124508484612847565b915061245e600b5486612847565b600b819055506124ad600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486612847565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555068010000000000000000820285600c540201905080600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600b54111561258757612580600c54600b5468010000000000000000860281151561257a57fe5b046127d3565b600c819055505b8573ffffffffffffffffffffffffffffffffffffffff167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a311398684604051808381526020018281526020019250505060405180910390a250505050505050565b600080339150600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561264157612640816123ae565b5b61264961181b565b5050565b60006126593483610974565b50919050565b60008060008061266f6001611a2d565b11151561267b57600080fd5b6126856000611a2d565b9250339150680100000000000000008302600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612776836000610974565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008082840190508381101515156127e757fe5b8091505092915050565b60008060008414156128065760009150612825565b828402905082848281151561281757fe5b0414151561282157fe5b8091505b5092915050565b600080828481151561283a57fe5b0490508091505092915050565b600082821115151561285557fe5b818303905092915050565b6000806000670de0b6b3a764000064174876e800029150600b546402540be4006128d66128d0600b54866402540be40060020202026002600b540a60026402540be4000a02670de0b6b3a76400008a02670de0b6b3a76400006402540be40002600202026002890a010101612998565b85612847565b8115156128df57fe5b040390508092505050919050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600b54019150670de0b6b3a7640000612981670de0b6b3a764000085036402540be400670de0b6b3a76400008681151561293f57fe5b046402540be4000264174876e8000103026002670de0b6b3a7640000876002890a0381151561296a57fe5b046402540be4000281151561297b57fe5b04612847565b81151561298a57fe5b049050809350505050919050565b6000806002600184018115156129aa57fe5b0490508291505b818110156129dd5780915060028182858115156129ca57fe5b04018115156129d557fe5b0490506129b1565b50919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a2457805160ff1916838001178555612a52565b82800160010185558215612a52579182015b82811115612a51578251825591602001919060010190612a36565b5b509050612a5f9190612a63565b5090565b612a8591905b80821115612a81576000816000905550600101612a69565b5090565b905600a165627a7a723058208f45b173de1d1113c1434e9dacdcf675b70b5b3f7154c1845b87d95391c09eba0029"
}