{
  "address": "0x5ba0f310636c50a788bdd51a90f022cd15f9aad7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-13\n*/\n\npragma solidity 0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 {\n    uint256 public _totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    function totalSupply() public constant returns (uint256 supply);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n//Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n\ncontract ERC20Token is ERC20 {\n    using SafeMath for uint256;\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\n/**\n * @title ERC677 transferAndCall token interface\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\n *      discussion.\n */\ncontract ERC677 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount, bytes _data);\n\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public;\n}\n\n\n/**\n * @title Receiver interface for ERC677 transferAndCall\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\n *      discussion.\n */\ncontract ERC677Receiver {\n    function tokenFallback(address _from, uint _amount, bytes _data) public;\n}\n\ncontract ERC677Token is ERC677, ERC20Token {\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public {\n        require(super.transfer(_receiver, _amount));\n\n        emit Transfer(msg.sender, _receiver, _amount, _data);\n\n        // call receiver\n        if (isContract(_receiver)) {\n            ERC677Receiver to = ERC677Receiver(_receiver);\n            to.tokenFallback(msg.sender, _amount, _data);\n        }\n    }\n\n    function isContract(address _addr) internal view returns (bool) {\n        uint len;\n        assembly {\n            len := extcodesize(_addr)\n        }\n        return len > 0;\n    }\n}\n\ncontract Splitable is ERC677Token, Ownable {\n    uint32 public split;\n    mapping (address => uint32) public splits;\n\n    event Split(address indexed addr, uint32 multiplyer);\n\n    constructor() public {\n        split = 0;\n    }\n\n    function splitShare() onlyOwner public {\n        require(split * 2 >= split);\n        if (split == 0) split = 2;\n        else split *= 2;\n        claimShare();\n    }\n\n    function isSplitable() public view returns (bool) {\n        return splits[msg.sender] != split;\n    }\n\n    function claimShare() public {\n        uint32 s = splits[msg.sender];\n        if (s == split) return;\n        if (s == 0) s = 1;\n\n        splits[msg.sender] = split;\n        uint b = balances[msg.sender];\n        uint nb = b * split / s;\n\n        balances[msg.sender] = nb;\n        _totalSupply += nb - b;\n    }\n\n    function claimShare(address _u1, address _u2) public {\n        uint32 s = splits[_u1];\n        if (s != split) {\n            if (s == 0) s = 1;\n\n            splits[_u1] = split;\n            uint b = balances[_u1];\n            uint nb = b.mul(split / s);\n\n            balances[_u1] = nb;\n            _totalSupply += nb - b;\n        }\n        s = splits[_u2];\n        if (s != split) {\n            if (s == 0) s = 1;\n\n            splits[_u2] = split;\n            b = balances[_u2];\n            nb = b.mul(split / s);\n            \n            balances[_u2] = nb;\n            _totalSupply += nb - b;\n        }\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (splits[msg.sender] != splits[_to]) claimShare(msg.sender, _to);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (splits[_from] != splits[_to]) claimShare(msg.sender, _to);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public {\n        if (splits[_receiver] != splits[_receiver]) claimShare(msg.sender, _receiver);\n        return super.transferAndCall(_receiver, _amount, _data);\n    }\n}\n\ncontract Lockable is ERC20Token, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) public lockAmounts;\n\n    // function lock(address to, uint amount) public onlyOwner {\n    //     lockAmounts[to] = lockAmounts[to].add(amount);\n    // }\n\n    function unlock(address to, uint amount) public onlyOwner {\n        lockAmounts[to] = lockAmounts[to].sub(amount);\n    }\n\n    function issueCoin(address to, uint amount) public onlyOwner {\n        lockAmounts[to] = lockAmounts[to].add(amount);\n        transfer(to, amount);\n    //  balances[to] = balances[to].add(amount);\n    //  balances[owner] = balances[owner].sub(amount);\n    //  emit Transfer(owner, to, amount);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value + lockAmounts[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value + lockAmounts[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\ncontract VCoin is ERC677Token, Ownable, Splitable, Lockable {\n    uint32 public purchaseNo;\n    event Purchase(uint32 indexed purchaseNo, address from, uint value, bytes data);\n\n    constructor() public {\n        symbol = \"VICT\";\n        name = \"Victory Token\";\n        decimals = 18;\n        _totalSupply = 1000000000 * 10**uint(decimals);\n\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n\n        purchaseNo = 1;\n    }\n\n    function () public payable {\n        require(!isContract(msg.sender));\n        owner.transfer(msg.value);\n        emit Purchase(purchaseNo++, msg.sender, msg.value, msg.data);\n        //emit Transfer(owner, msg.sender, msg.value);\n    }\n}",
  "bytecode": ""
}