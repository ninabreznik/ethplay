{
  "address": "0x432555e5c898f83fc5f00df631bd9c2801fea289",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "HubrisOne Token",
  "contractName": "HUBRIS",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * Libraries\n */\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * Helper contracts\n */\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract HUBRISTOKEN is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract Standard is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * HUBRIS Token\n */\n\ncontract HUBRIS is Ownable, Pausable, Standard, BurnableToken, HUBRISTOKEN {\n    using SafeMath for uint256;\n\n    string name = \"HUBRIS\";\n    string symbol = \"HBRS\";\n    uint8 decimals = 18;\n\n    //token allocation addresses\n    address TOKEN_SALE = 0xdff99ef7ed50f9EB06183d0DfeD9CD5DB051878B;\n    address EQUITY_SHARE = 0xb2aA0f5c0e2e7f94A26022C076240509C85eDab1;\n    address TEAM = 0x922E97d03bEeA115Ab95CC638765d2BebEb04f20;\n    address ADVISORS = 0x6FB54a06f94591EAF330c4BdD644c4Ab753eb105;\n    address CUSTOMERS = 0x382C33946B73A3B8B7F3E70A553b6965d6F28a48;\n    address BOUNTY = 0x1d1390c9d5e08aCEC31991EA7Be7443ad2EEA6e6;\n    address RESERVE = 0x79641ae5D204C45038a9cF07c32E39d2EeC23C5c;\n    address LEGAL = 0xe49941b4B66D61d98d4766c8EEB3004c0961075B;\n    \n    bool tokensAllocated = false;\n\n    constructor() HUBRISTOKEN(name, symbol, decimals) public {\n        totalSupply_ = 1000000000E18;\n        balances[this] = totalSupply_;\n    }\n\n    function envokeTokenAllocation() public onlyOwner {\n        require(!tokensAllocated);\n        tokensAllocated = true;\n        this.transfer(TOKEN_SALE, 300000000E18); //30% of totalSupply_\n        this.transfer(EQUITY_SHARE, 300000000E18); //30% of totalSupply_\n        this.transfer(TEAM, 150000000E18); //15% of totalSupply_\n        this.transfer(ADVISORS, 30000000E18); //3% of totalSupply_\n        this.transfer(CUSTOMERS, 100000000E18); //10% of totalSupply_\n        this.transfer(msg.sender, 50000000E18); //5% of totalSupply_\n        this.transfer(BOUNTY, 40000000E18); //4% of totalSupply_\n        this.transfer(RESERVE, 20000000E18); //2% of totalSupply_\n        this.transfer(LEGAL, 10000000E18); //1% of totalSupply_\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"envokeTokenAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6000805460a060020a60ff021916905560c0604052600660808190527f485542524953000000000000000000000000000000000000000000000000000060a09081526200005091600791906200036a565b506040805180820190915260048082527f4842525300000000000000000000000000000000000000000000000000000000602090920191825262000097916008916200036a565b506009805474dff99ef7ed50f9eb06183d0dfed9cd5db051878b0061010060a860020a031960ff1990921660121791909116179055600a8054600160a060020a031990811673b2aa0f5c0e2e7f94a26022c076240509c85edab117909155600b8054821673922e97d03beea115ab95cc638765d2bebeb04f20179055600c80548216736fb54a06f94591eaf330c4bdd644c4ab753eb105179055600d8054821673382c33946b73a3b8b7f3e70a553b6965d6f28a48179055600e80548216731d1390c9d5e08acec31991ea7be7443ad2eea6e6179055600f805482167379641ae5d204c45038a9cf07c32e39d2eec23c5c1790556010805460a060020a60ff0219921673e49941b4b66d61d98d4766c8eeb3004c0961075b17919091169055348015620001c357600080fd5b506007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200024e5780601f1062000222576101008083540402835291602001916200024e565b820191906000526020600020905b8154815290600101906020018083116200023057829003601f168201915b505060088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815295509193509150830182828015620002e05780601f10620002b457610100808354040283529160200191620002e0565b820191906000526020600020905b815481529060010190602001808311620002c257829003601f168201915b505060095460008054600160a060020a03191633179055855160ff90911693506200031592506004915060208601906200036a565b5081516200032b9060059060208501906200036a565b506006805460ff191660ff9290921691909117905550506b033b2e3c9fd0803ce80000006002819055306000908152600160205260409020556200040f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003ad57805160ff1916838001178555620003dd565b82800160010185558215620003dd579182015b82811115620003dd578251825591602001919060010190620003c0565b50620003eb929150620003ef565b5090565b6200040c91905b80821115620003eb5760008155600101620003f6565b90565b611185806200041f6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c257806323b872dd146101e9578063313ce567146102135780633f4ba83a1461023e57806342966c68146102555780635c975abb1461026d578063661884631461028257806370a08231146102a65780638456cb59146102c75780638da5cb5b146102dc57806395d89b411461030d578063a9059cbb14610322578063d73dd62314610346578063dd62ed3e1461036a578063f21439b514610391578063f2fde38b146103a6575b600080fd5b34801561010c57600080fd5b506101156103c7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101ae600160a060020a0360043516602435610455565b604080519115158252519081900360200190f35b3480156101ce57600080fd5b506101d76104bb565b60408051918252519081900360200190f35b3480156101f557600080fd5b506101ae600160a060020a03600435811690602435166044356104c1565b34801561021f57600080fd5b5061022861063a565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b50610253610643565b005b34801561026157600080fd5b506102536004356106b9565b34801561027957600080fd5b506101ae6106c6565b34801561028e57600080fd5b506101ae600160a060020a03600435166024356106d6565b3480156102b257600080fd5b506101d7600160a060020a03600435166107c6565b3480156102d357600080fd5b506102536107e1565b3480156102e857600080fd5b506102f161085c565b60408051600160a060020a039092168252519081900360200190f35b34801561031957600080fd5b5061011561086b565b34801561032e57600080fd5b506101ae600160a060020a03600435166024356108c6565b34801561035257600080fd5b506101ae600160a060020a03600435166024356109a9565b34801561037657600080fd5b506101d7600160a060020a0360043581169060243516610a42565b34801561039d57600080fd5b50610253610a6d565b3480156103b257600080fd5b50610253600160a060020a0360043516610f9c565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b505050505081565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b6000600160a060020a03831615156104d857600080fd5b600160a060020a0384166000908152600160205260409020548211156104fd57600080fd5b600160a060020a038416600090815260036020908152604080832033845290915290205482111561052d57600080fd5b600160a060020a038416600090815260016020526040902054610556908363ffffffff61103016565b600160a060020a03808616600090815260016020526040808220939093559085168152205461058b908363ffffffff61104216565b600160a060020a0380851660009081526001602090815260408083209490945591871681526003825282812033825290915220546105cf908363ffffffff61103016565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60065460ff1681565b600054600160a060020a0316331461065a57600080fd5b60005460a060020a900460ff16151561067257600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6106c33382611058565b50565b60005460a060020a900460ff1681565b336000908152600360209081526040808320600160a060020a03861684529091528120548083111561072b57336000908152600360209081526040808320600160a060020a0388168452909152812055610760565b61073b818463ffffffff61103016565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031633146107f857600080fd5b60005460a060020a900460ff161561080f57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561044d5780601f106104225761010080835404028352916020019161044d565b6000600160a060020a03831615156108dd57600080fd5b336000908152600160205260409020548211156108f957600080fd5b33600090815260016020526040902054610919908363ffffffff61103016565b3360009081526001602052604080822092909255600160a060020a0385168152205461094b908363ffffffff61104216565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600360209081526040808320600160a060020a03861684529091528120546109dd908363ffffffff61104216565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a03163314610a8457600080fd5b60105460a060020a900460ff1615610a9b57600080fd5b6010805474ff0000000000000000000000000000000000000000191660a060020a1790556009546040805160e060020a63a9059cbb028152610100909204600160a060020a031660048301526af8277896582678ac000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610b2257600080fd5b505af1158015610b36573d6000803e3d6000fd5b505050506040513d6020811015610b4c57600080fd5b5050600a546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526af8277896582678ac000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610bad57600080fd5b505af1158015610bc1573d6000803e3d6000fd5b505050506040513d6020811015610bd757600080fd5b5050600b546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a7c13bc4b2c133c56000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610c3857600080fd5b505af1158015610c4c573d6000803e3d6000fd5b505050506040513d6020811015610c6257600080fd5b5050600c546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a18d0bf423c03d8de000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610cc357600080fd5b505af1158015610cd7573d6000803e3d6000fd5b505050506040513d6020811015610ced57600080fd5b5050600d546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a52b7d2dcc80cd2e4000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610d4e57600080fd5b505af1158015610d62573d6000803e3d6000fd5b505050506040513d6020811015610d7857600080fd5b50506040805160e060020a63a9059cbb0281523360048201526a295be96e6406697200000060248201529051309163a9059cbb9160448083019260209291908290030181600087803b158015610dcd57600080fd5b505af1158015610de1573d6000803e3d6000fd5b505050506040513d6020811015610df757600080fd5b5050600e546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a2116545850052128000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610e5857600080fd5b505af1158015610e6c573d6000803e3d6000fd5b505050506040513d6020811015610e8257600080fd5b5050600f546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a108b2a2c28029094000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050506040513d6020811015610f0d57600080fd5b50506010546040805160e060020a63a9059cbb028152600160a060020a0390921660048301526a084595161401484a000000602483015251309163a9059cbb9160448083019260209291908290030181600087803b158015610f6e57600080fd5b505af1158015610f82573d6000803e3d6000fd5b505050506040513d6020811015610f9857600080fd5b5050565b600054600160a060020a03163314610fb357600080fd5b600160a060020a0381161515610fc857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561103c57fe5b50900390565b60008282018381101561105157fe5b9392505050565b600160a060020a03821660009081526001602052604090205481111561107d57600080fd5b600160a060020a0382166000908152600160205260409020546110a6908263ffffffff61103016565b600160a060020a0383166000908152600160205260409020556002546110d2908263ffffffff61103016565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505600a165627a7a72305820a4e7348de38b6ef04b809856020376f1bcb046a561f6070036ea8d8dcae211330029"
}