{
  "address": "0x5f1a08554f0dc0cf79852c564a10981ffbd7c8af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthRampSwaps",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-14\n*/\n\npragma solidity ^0.5.3;\n\n\n/**\n * Copyright Â© 2017-2019 Ramp Network sp. z o.o. All rights reserved (MIT License).\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n * is furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all copies\n * or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\n * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n/**\n * Abstract class for an asset adapter -- a class handling the binary asset description,\n * encapsulating the asset-specific transfer logic.\n * The `assetData` bytes consist of a 2-byte (uint16) asset type, followed by asset-specific data.\n * The asset type bytes must be equal to the `ASSET_TYPE` constant in each subclass.\n *\n * @dev Subclasses of this class are used as mixins to their respective main swap contract.\n *\n * @author Ramp Network sp. z o.o.\n */\ncontract AssetAdapter {\n\n    uint16 public ASSET_TYPE;\n    bytes32 internal EIP712_SWAP_TYPEHASH;\n    bytes32 internal EIP712_ASSET_TYPEHASH;\n\n    constructor(\n        uint16 assetType,\n        bytes32 swapTypehash,\n        bytes32 assetTypehash\n    ) internal {\n        ASSET_TYPE = assetType;\n        EIP712_SWAP_TYPEHASH = swapTypehash;\n        EIP712_ASSET_TYPEHASH = assetTypehash;\n    }\n\n    /**\n     * Ensure the described asset is sent to the given address.\n     * Should revert if the transfer failed, but callers must also handle `false` being returned,\n     * much like ERC20's `transfer`.\n     */\n    function sendAssetTo(bytes memory assetData, address payable _to) internal returns (bool success);\n\n    /**\n     * Ensure the described asset is sent to the contract (check `msg.value` for ether,\n     * do a `transferFrom` for tokens, etc).\n     * Should revert if the transfer failed, but callers must also handle `false` being returned,\n     * much like ERC20's `transfer`.\n     *\n     * @dev subclasses that don't use ether should mark this with the `noEther` modifier, to make\n     * sure no ether is sent -- because, to have one consistent interface, the `create` function\n     * in `AbstractRampSwaps` is marked `payable`.\n     */\n    function lockAssetFrom(bytes memory assetData, address _from) internal returns (bool success);\n\n    /**\n     * Returns the EIP712 hash of the handled asset data struct.\n     * See `getAssetTypedHash` in the subclasses for asset struct type description.\n     */\n    function getAssetTypedHash(bytes memory data) internal view returns (bytes32);\n\n    /**\n     * Verify that the passed asset data should be handled by this adapter.\n     *\n     * @dev it's sufficient to use this only when creating a new swap -- all the other swap\n     * functions first check if the swap hash is valid, while a swap hash with invalid\n     * asset type wouldn't be created at all.\n     *\n     * @dev asset type is 2 bytes long, and it's at offset 32 in `assetData`'s memory (the first 32\n     * bytes are the data length). We load the word at offset 2 (it ends with the asset type bytes),\n     * and retrieve its last 2 bytes into a `uint16` variable.\n     */\n    modifier checkAssetType(bytes memory assetData) {\n        uint16 assetType;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            assetType := and(\n                mload(add(assetData, 2)),\n                0xffff\n            )\n        }\n        require(assetType == ASSET_TYPE, \"invalid asset type\");\n        _;\n    }\n\n    modifier noEther() {\n        require(msg.value == 0, \"this asset doesn't accept ether\");\n        _;\n    }\n\n}\n\n\n/**\n * An adapter for handling ether swaps.\n *\n * @author Ramp Network sp. z o.o.\n */\ncontract EthAdapter is AssetAdapter {\n\n    uint16 internal constant ETH_TYPE_ID = 1;\n\n    // the hashes are generated using `genTypeHashes` from `eip712.swaps`\n    constructor() internal AssetAdapter(\n        ETH_TYPE_ID,\n        0x3f5e83ffc9f619035e6bbc5b772db010a6ea49213f31e8a5d137b6cebf8d19c7,\n        0x4edc3bd27f6cb13e1f0e97fa9dd936fa2dc988debb1378354f49e2bb59be435e\n    ) {}\n\n    /**\n    * @dev byte offsets, byte length & contents for ether asset data:\n    * +00  32  uint256  data length (== 0x22 == 34 bytes)\n    * +32   2  uint16   asset type  (== 1)\n    * +34  32  uint256  ether amount in wei\n    */\n    function getAmount(bytes memory assetData) internal pure returns (uint256 amount) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            amount := mload(add(assetData, 34))\n        }\n    }\n\n    function sendAssetTo(\n        bytes memory assetData, address payable _to\n    ) internal returns (bool success) {\n        _to.transfer(getAmount(assetData));  // always throws on failure\n        return true;\n    }\n\n    function lockAssetFrom(\n        bytes memory assetData, address _from\n    ) internal returns (bool success) {\n        require(msg.sender == _from, \"invalid ether sender\");\n        require(msg.value == getAmount(assetData), \"invalid ether amount sent\");\n        return true;\n    }\n\n    /**\n     * Returns the EIP712 hash of the eth asset data struct:\n     * EIP712EthAsset {\n     *    ethAmount: uint256;\n     * }\n     */\n    function getAssetTypedHash(bytes memory data) internal view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                EIP712_ASSET_TYPEHASH,\n                getAmount(data)\n            )\n        );\n    }\n\n}\n\n\ncontract Ownable {\n\n    address public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n\n}\n\n\n/**\n * An extended version of the standard `Pausable` contract, with more possible statuses:\n *  * STOPPED: all swap actions cannot be executed until the status is changed,\n *  * RETURN_ONLY: the existing swaps can only be returned, no new swaps can be created;\n *  * FINALIZE_ONLY: the existing swaps can be released or returned, no new swaps can be created;\n *  * ACTIVE: all swap actions can be executed.\n *\n * @dev the status enum is strictly monotonic, and the default 0 is mapped to STOPPED for safety.\n */\ncontract WithStatus is Ownable {\n\n    enum Status {\n        STOPPED,\n        RETURN_ONLY,\n        FINALIZE_ONLY,\n        ACTIVE\n    }\n\n    event StatusChanged(Status oldStatus, Status newStatus);\n\n    Status public status = Status.ACTIVE;\n\n    constructor() internal {}\n\n    function setStatus(Status _status) external onlyOwner {\n        emit StatusChanged(status, _status);\n        status = _status;\n    }\n\n    modifier statusAtLeast(Status _status) {\n        require(status >= _status, \"invalid contract status\");\n        _;\n    }\n\n}\n\n\n/**\n * An owner-managed list of oracles, that are allowed to claim, release or return swaps.\n */\ncontract WithOracles is Ownable {\n\n    mapping (address => bool) oracles;\n\n    /**\n     * The deployer is the default oracle.\n     */\n    constructor() internal {\n        oracles[msg.sender] = true;\n    }\n\n    function approveOracle(address _oracle) external onlyOwner {\n        oracles[_oracle] = true;\n    }\n\n    function revokeOracle(address _oracle) external onlyOwner {\n        oracles[_oracle] = false;\n    }\n\n    modifier isOracle(address _oracle) {\n        require(oracles[_oracle], \"invalid oracle address\");\n        _;\n    }\n\n    modifier onlyOracle(address _oracle) {\n        require(\n            msg.sender == _oracle && oracles[msg.sender],\n            \"only the oracle can call this\"\n        );\n        _;\n    }\n\n    modifier onlyOracleOrSender(address _sender, address _oracle) {\n        require(\n            msg.sender == _sender || (msg.sender == _oracle && oracles[msg.sender]),\n            \"only the oracle or the sender can call this\"\n        );\n        _;\n    }\n\n    modifier onlySender(address _sender) {\n        require(msg.sender == _sender, \"only the sender can call this\");\n        _;\n    }\n\n}\n\n\n/**\n * The main contract managing Ramp Swaps escrows lifecycle: create, claim, release and return.\n * Uses an abstract AssetAdapter to carry out the transfers and handle the particular asset data.\n * With a corresponding off-chain protocol allows for atomic-swap-like transfer between\n * fiat currencies and crypto assets.\n *\n * @dev an active swap is represented by a hash of its details, mapped to its escrow expiration\n * timestamp. When the swap is created, but not yet claimed, its end time is set to SWAP_UNCLAIMED.\n * The hashed swap details are:\n *  * address sender: the swap's creator, that sells the crypto asset;\n *  * address receiver: the user that buys the crypto asset, `0x0` until the swap is claimed;\n *  * address oracle: address of the oracle that handles this particular swap;\n *  * bytes assetData: description of the crypto asset, handled by an AssetAdapter;\n *  * bytes32 paymentDetailsHash: hash of the fiat payment details: account numbers, fiat value\n *    and currency, and the transfer reference (title), that can be verified off-chain.\n *\n * @author Ramp Network sp. z o.o.\n */\ncontract AbstractRampSwaps is Ownable, WithStatus, WithOracles, AssetAdapter {\n\n    /// @dev contract version, defined in semver\n    string public constant VERSION = \"0.3.1\";\n\n    /// @dev used as a special swap endTime value, to denote a yet unclaimed swap\n    uint32 internal constant SWAP_UNCLAIMED = 1;\n    uint32 internal constant MIN_ACTUAL_TIMESTAMP = 1000000000;\n\n    /// @notice how long are sender's funds locked from a claim until he can cancel the swap\n    uint32 internal constant SWAP_LOCK_TIME_S = 3600 * 24 * 7;\n\n    event Created(bytes32 indexed swapHash);\n    event BuyerSet(bytes32 indexed oldSwapHash, bytes32 indexed newSwapHash);\n    event Claimed(bytes32 indexed oldSwapHash, bytes32 indexed newSwapHash);\n    event Released(bytes32 indexed swapHash);\n    event SenderReleased(bytes32 indexed swapHash);\n    event Returned(bytes32 indexed swapHash);\n    event SenderReturned(bytes32 indexed swapHash);\n\n    /**\n     * @notice Mapping from swap details hash to its end time (as a unix timestamp).\n     * After the end time the swap can be cancelled, and the funds will be returned to the sender.\n     * Value `(SWAP_UNCLAIMED)` is used to denote that a swap exists, but has not yet been claimed\n     * by any receiver, and can also be cancelled until that.\n     */\n    mapping (bytes32 => uint32) internal swaps;\n\n    /**\n     * @dev EIP712 type hash for the struct:\n     * EIP712Domain {\n     *   name: string;\n     *   version: string;\n     *   chainId: uint256;\n     *   verifyingContract: address;\n     * }\n     */\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n    bytes32 internal EIP712_DOMAIN_HASH;\n\n    constructor(uint256 _chainId) internal {\n        EIP712_DOMAIN_HASH = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(\"RampSwaps\")),\n                keccak256(bytes(VERSION)),\n                _chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * Swap creation, called by the crypto sender. Checks swap parameters and ensures the crypto\n     * asset is locked on this contract.\n     * Additionally to the swap details, this function takes params v, r, s, which is checked to be\n     * an ECDSA signature of the swap hash made by the oracle -- to prevent users from creating\n     * swaps outside Ramp Network.\n     *\n     * Emits a `Created` event with the swap hash.\n     */\n    function create(\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n        payable\n        statusAtLeast(Status.ACTIVE)\n        isOracle(_oracle)\n        checkAssetType(_assetData)\n        returns\n        (bool success)\n    {\n        bytes32 swapHash = getSwapHash(\n            msg.sender, address(0), _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        requireSwapNotExists(swapHash);\n        require(ecrecover(swapHash, v, r, s) == _oracle, \"invalid swap oracle signature\");\n        // Set up swap status before transfer, to avoid reentrancy attacks.\n        // Even if a malicious token is somehow passed to this function (despite the oracle\n        // signature of its details), the state of this contract is already fully updated,\n        // so it will behave correctly (as it would be a separate call).\n        swaps[swapHash] = SWAP_UNCLAIMED;\n        require(\n            lockAssetFrom(_assetData, msg.sender),\n            \"failed to lock asset on escrow\"\n        );\n        emit Created(swapHash);\n        return true;\n    }\n\n    /**\n     * Swap claim, called by the swap's oracle on behalf of the receiver, to confirm his interest\n     * in buying the crypto asset.\n     * Additional v, r, s parameters are checked to be the receiver's EIP712 typed data signature\n     * of the swap's details and a 'claim this swap' action -- which verifies the receiver's address\n     * and the authenthicity of his claim request. See `getClaimTypedHash` for description of the\n     * signed swap struct.\n     *\n     * Emits a `Claimed` event with the current swap hash and the new swap hash, updated with\n     * receiver's address. The current swap hash equal to the hash emitted in `create`, unless\n     * `setBuyer` was called in the meantime -- then the current swap hash is equal to the new\n     * swap hash, because the receiver's address was already set.\n     */\n    function claim(\n        address _sender,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external statusAtLeast(Status.ACTIVE) onlyOracle(_oracle) {\n        // Verify claim signature\n        bytes32 claimTypedHash = getClaimTypedHash(\n            _sender,\n            _receiver,\n            _assetData,\n            _paymentDetailsHash\n        );\n        require(ecrecover(claimTypedHash, v, r, s) == _receiver, \"invalid claim receiver signature\");\n        // Verify swap hashes\n        bytes32 oldSwapHash = getSwapHash(\n            _sender, address(0), _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        bytes32 newSwapHash = getSwapHash(\n            _sender, _receiver, _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        bytes32 claimFromHash;\n        // We want this function to be universal, regardless of whether `setBuyer` was called before.\n        // If it was, the hash is already changed\n        if (swaps[oldSwapHash] == 0) {\n            claimFromHash = newSwapHash;\n            requireSwapUnclaimed(newSwapHash);\n        } else {\n            claimFromHash = oldSwapHash;\n            requireSwapUnclaimed(oldSwapHash);\n            requireSwapNotExists(newSwapHash);\n            swaps[oldSwapHash] = 0;\n        }\n        // any overflow security warnings can be safely ignored -- SWAP_LOCK_TIME_S is a small\n        // constant, so this won't overflow an uint32 until year 2106\n        // solium-disable-next-line security/no-block-members\n        swaps[newSwapHash] = uint32(block.timestamp) + SWAP_LOCK_TIME_S;\n        emit Claimed(claimFromHash, newSwapHash);\n    }\n\n    /**\n     * Swap release, which transfers the crypto asset to the receiver and removes the swap from\n     * the active swap mapping. Normally called by the swap's oracle after it confirms a matching\n     * wire transfer on sender's bank account. Can be also called by the sender, for example in case\n     * of a dispute, when the parties reach an agreement off-chain.\n     *\n     * Emits a `Released` event with the swap's hash.\n     */\n    function release(\n        address _sender,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external statusAtLeast(Status.FINALIZE_ONLY) onlyOracleOrSender(_sender, _oracle) {\n        bytes32 swapHash = getSwapHash(\n            _sender, _receiver, _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        requireSwapClaimed(swapHash);\n        // Delete the swap status before transfer, to avoid reentrancy attacks.\n        swaps[swapHash] = 0;\n        require(\n            sendAssetTo(_assetData, _receiver),\n            \"failed to send asset to receiver\"\n        );\n        if (msg.sender == _sender) {\n            emit SenderReleased(swapHash);\n        } else {\n            emit Released(swapHash);\n        }\n    }\n\n    /**\n     * Swap return, which transfers the crypto asset back to the sender and removes the swap from\n     * the active swap mapping. Can be called by the sender or the swap's oracle, but only if the\n     * swap is not claimed, or was claimed but the escrow lock time expired.\n     *\n     * Emits a `Returned` event with the swap's hash.\n     */\n    function returnFunds(\n        address payable _sender,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external statusAtLeast(Status.RETURN_ONLY) onlyOracleOrSender(_sender, _oracle) {\n        bytes32 swapHash = getSwapHash(\n            _sender, _receiver, _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        requireSwapUnclaimedOrExpired(swapHash);\n        // Delete the swap status before transfer, to avoid reentrancy attacks.\n        swaps[swapHash] = 0;\n        require(\n            sendAssetTo(_assetData, _sender),\n            \"failed to send asset to sender\"\n        );\n        if (msg.sender == _sender) {\n            emit SenderReturned(swapHash);\n        } else {\n            emit Returned(swapHash);\n        }\n    }\n\n    /**\n     * After the sender creates a swap, he can optionally call this function to restrict the swap\n     * to a particular receiver address. The swap can't then be claimed by any other receiver.\n     *\n     * Emits a `BuyerSet` event with the created swap hash and new swap hash, updated with\n     * receiver's address.\n     */\n    function setBuyer(\n        address _sender,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external statusAtLeast(Status.ACTIVE) onlySender(_sender) {\n        bytes32 assetHash = keccak256(_assetData);\n        bytes32 oldSwapHash = getSwapHash(\n            _sender, address(0), _oracle, assetHash, _paymentDetailsHash\n        );\n        requireSwapUnclaimed(oldSwapHash);\n        bytes32 newSwapHash = getSwapHash(\n            _sender, _receiver, _oracle, assetHash, _paymentDetailsHash\n        );\n        requireSwapNotExists(newSwapHash);\n        swaps[oldSwapHash] = 0;\n        swaps[newSwapHash] = SWAP_UNCLAIMED;\n        emit BuyerSet(oldSwapHash, newSwapHash);\n    }\n\n    /**\n     * Given all valid swap details, returns its status. To check a swap with unset buyer,\n     * use `0x0` as the `_receiver` address. The return can be:\n     * 0: the swap details are invalid, swap doesn't exist, or was already released/returned.\n     * 1: the swap was created, and is not claimed yet.\n     * >1: the swap was claimed, and the value is a timestamp indicating end of its lock time.\n     */\n    function getSwapStatus(\n        address _sender,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external view returns (uint32 status) {\n        bytes32 swapHash = getSwapHash(\n            _sender, _receiver, _oracle, keccak256(_assetData), _paymentDetailsHash\n        );\n        return swaps[swapHash];\n    }\n\n    /**\n     * Calculates the swap hash used to reference the swap in this contract's storage.\n     */\n    function getSwapHash(\n        address _sender,\n        address _receiver,\n        address _oracle,\n        bytes32 assetHash,\n        bytes32 _paymentDetailsHash\n    ) internal pure returns (bytes32 hash) {\n        return keccak256(\n            abi.encodePacked(\n                _sender, _receiver, _oracle, assetHash, _paymentDetailsHash\n            )\n        );\n    }\n\n    /**\n     * Returns the EIP712 typed hash for the struct:\n     * EIP712<Type>Swap {\n     *   action: bytes32;\n     *   sender: address;\n     *   receiver: address;\n     *   asset: asset data struct, see `getAssetTypedHash` in specific AssetAdapter contracts\n     *   paymentDetailsHash: bytes32;\n     * }\n     */\n    function getClaimTypedHash(\n        address _sender,\n        address _receiver,\n        bytes memory _assetData,\n        bytes32 _paymentDetailsHash\n    ) internal view returns(bytes32 msgHash) {\n        bytes32 dataHash = keccak256(\n            abi.encode(\n                EIP712_SWAP_TYPEHASH,\n                bytes32(\"claim this swap\"),\n                _sender,\n                _receiver,\n                getAssetTypedHash(_assetData),\n                _paymentDetailsHash\n            )\n        );\n        return keccak256(abi.encodePacked(bytes2(0x1901), EIP712_DOMAIN_HASH, dataHash));\n    }\n\n    function requireSwapNotExists(bytes32 swapHash) internal view {\n        require(swaps[swapHash] == 0, \"swap already exists\");\n    }\n\n    function requireSwapUnclaimed(bytes32 swapHash) internal view {\n        require(swaps[swapHash] == SWAP_UNCLAIMED, \"swap already claimed or invalid\");\n    }\n\n    function requireSwapClaimed(bytes32 swapHash) internal view {\n        require(swaps[swapHash] > MIN_ACTUAL_TIMESTAMP, \"swap unclaimed or invalid\");\n    }\n\n    function requireSwapUnclaimedOrExpired(bytes32 swapHash) internal view {\n        require(\n            // solium-disable-next-line security/no-block-members\n            (swaps[swapHash] > MIN_ACTUAL_TIMESTAMP && block.timestamp > swaps[swapHash]) ||\n                swaps[swapHash] == SWAP_UNCLAIMED,\n            \"swap not expired or invalid\"\n        );\n    }\n\n}\n\n\n/**\n * Ramp Swaps contract with the ether asset adapter.\n *\n * @author Ramp Network sp. z o.o.\n */\ncontract EthRampSwaps is AbstractRampSwaps, EthAdapter {\n    constructor(uint256 _chainId) public AbstractRampSwaps(_chainId) {}\n}",
  "bytecode": "60806040526003600060146101000a81548160ff0219169083600381111561002357fe5b021790555034801561003457600080fd5b50604051602080612a0d8339810180604052602081101561005457600080fd5b81019080805190602001909291905050508060017f3f5e83ffc9f619035e6bbc5b772db010a6ea49213f31e8a5d137b6cebf8d19c76001027f4edc3bd27f6cb13e1f0e97fa9dd936fa2dc988debb1378354f49e2bb59be435e600102336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600260006101000a81548161ffff021916908361ffff16021790555081600381905550806004819055505050507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6001026040805190810160405280600981526020017f52616d7053776170730000000000000000000000000000000000000000000000815250805190602001206040805190810160405280600581526020017f302e332e31000000000000000000000000000000000000000000000000000000815250805190602001208330604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012060068190555050506127738061029a6000396000f3fe6080604052600436106100df576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b1161009c5780639a3c6e29116100765780639a3c6e2914610624578063a80e7acb14610714578063f47bc89c14610804578063ffa1ad7414610855576100df565b80638da5cb5b146103cd578063903a9c5214610424578063946519f114610514576100df565b806318815657146100e457806319c5c12f146101f6578063200d2ed2146102d25780632e49d78b1461030b5780635983e6b0146103495780638815eb391461039a575b600080fd5b3480156100f057600080fd5b506101f4600480360361010081101561010857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561018557600080fd5b82018360208201111561019757600080fd5b803590602001918460018302840111640100000000831117156101b957600080fd5b909192939192939080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506108e5565b005b6102b8600480360360c081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024957600080fd5b82018360208201111561025b57600080fd5b8035906020019184600183028401116401000000008311171561027d57600080fd5b909192939192939080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050610d3c565b604051808215151515815260200191505060405180910390f35b3480156102de57600080fd5b506102e76111f8565b604051808260038111156102f757fe5b60ff16815260200191505060405180910390f35b34801561031757600080fd5b506103476004803603602081101561032e57600080fd5b81019080803560ff16906020019092919050505061120b565b005b34801561035557600080fd5b506103986004803603602081101561036c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061135f565b005b3480156103a657600080fd5b506103af61147e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156103d957600080fd5b506103e2611492565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043057600080fd5b50610512600480360360a081101561044757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156104c457600080fd5b8201836020820111156104d657600080fd5b803590602001918460018302840111640100000000831117156104f857600080fd5b9091929391929390803590602001909291905050506114b7565b005b34801561052057600080fd5b50610602600480360360a081101561053757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105b457600080fd5b8201836020820111156105c657600080fd5b803590602001918460018302840111640100000000831117156105e857600080fd5b9091929391929390803590602001909291905050506116f3565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561063057600080fd5b50610712600480360360a081101561064757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156106c457600080fd5b8201836020820111156106d657600080fd5b803590602001918460018302840111640100000000831117156106f857600080fd5b909192939192939080359060200190929190505050611754565b005b34801561072057600080fd5b50610802600480360360a081101561073757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107b457600080fd5b8201836020820111156107c657600080fd5b803590602001918460018302840111640100000000831117156107e857600080fd5b909192939192939080359060200190929190505050611ad3565b005b34801561081057600080fd5b506108536004803603602081101561082757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e52565b005b34801561086157600080fd5b5061086a611f70565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108aa57808201518184015260208101905061088f565b50505050905090810190601f1680156108d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60038060038111156108f357fe5b600060149054906101000a900460ff16600381111561090e57fe5b10151515610984576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e76616c696420636f6e74726163742073746174757300000000000000000081525060200191505060405180910390fd5b878073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610a095750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610a7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6f6e6c7920746865206f7261636c652063616e2063616c6c207468697300000081525060200191505060405180910390fd5b6000610acf8c8c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a611fa9565b90508a73ffffffffffffffffffffffffffffffffffffffff1660018288888860405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610b45573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16141515610bda576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f696e76616c696420636c61696d207265636569766572207369676e617475726581525060200191505060405180910390fd5b6000610c088d60008d8d8d60405180838380828437808301925050509250505060405180910390208c612128565b90506000610c378e8e8e8e8e60405180838380828437808301925050509250505060405180910390208d612128565b90506000806005600085815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff161415610c7d57819050610c788261222d565b610cc6565b829050610c898361222d565b610c92826122d7565b60006005600085815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b62093a8042016005600084815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555081817f38d6042dbdae8e73a7f6afbabd3fbe0873f9f5ed3cd71294591c3908c2e65fee60405160405180910390a3505050505050505050505050505050565b60006003806003811115610d4c57fe5b600060149054906101000a900460ff166003811115610d6757fe5b10151515610ddd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e76616c696420636f6e74726163742073746174757300000000000000000081525060200191505060405180910390fd5b88600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f696e76616c6964206f7261636c6520616464726573730000000000000000000081525060200191505060405180910390fd5b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600061ffff6002830151169050600260009054906101000a900461ffff1661ffff168161ffff16141515610f80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f696e76616c69642061737365742074797065000000000000000000000000000081525060200191505060405180910390fd5b6000610fae3360008f8f8f60405180838380828437808301925050509250505060405180910390208e612128565b9050610fb9816122d7565b8c73ffffffffffffffffffffffffffffffffffffffff166001828b8b8b60405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561102d573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161415156110c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e76616c69642073776170206f7261636c65207369676e617475726500000081525060200191505060405180910390fd5b60016005600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506111438c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050503361237b565b15156111b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6661696c656420746f206c6f636b206173736574206f6e20657363726f77000081525060200191505060405180910390fd5b807f102d25c49d33fcdb8976a3f2744e0785c98d9e43b88364859e6aec4ae82eff5c60405160405180910390a2600195505050505050979650505050505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f6e6c7920746865206f776e65722063616e2063616c6c20746869730000000081525060200191505060405180910390fd5b7fe1377aa21d49fa10bb9ece6a0cd4f75597a90a80c3750f7f7674967f49ab9a62600060149054906101000a900460ff16826040518083600381111561131157fe5b60ff16815260200182600381111561132557fe5b60ff1681526020019250505060405180910390a180600060146101000a81548160ff0219169083600381111561135757fe5b021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f6e6c7920746865206f776e65722063616e2063616c6c20746869730000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900461ffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038060038111156114c557fe5b600060149054906101000a900460ff1660038111156114e057fe5b10151515611556576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e76616c696420636f6e74726163742073746174757300000000000000000081525060200191505060405180910390fd5b868073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6f6e6c79207468652073656e6465722063616e2063616c6c207468697300000081525060200191505060405180910390fd5b6000858560405180838380828437808301925050509250505060405180910390209050600061162d8a60008a8589612128565b90506116388161222d565b60006116478b8b8b868a612128565b9050611652816122d7565b60006005600084815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555060016005600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555080827f3856614466e40e4f005cd143ddb7fa07538dd741f6ec9fb558f713aab27fa85060405160405180910390a35050505050505050505050565b6000806117218888888888604051808383808284378083019250505092505050604051809103902087612128565b90506005600082815260200190815260200160002060009054906101000a900463ffffffff169150509695505050505050565b600280600381111561176257fe5b600060149054906101000a900460ff16600381111561177d57fe5b101515156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e76616c696420636f6e74726163742073746174757300000000000000000081525060200191505060405180910390fd5b86858173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118af57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156118ae5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b1515611906576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061271d602b913960400191505060405180910390fd5b60006119338a8a8a8a8a604051808383808284378083019250505092505050604051809103902089612128565b905061193e816124a9565b60006005600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506119bf87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a612556565b1515611a33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6661696c656420746f2073656e6420617373657420746f20726563656976657281525060200191505060405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611a9957807f5e4f9e814cebd5cce82b031e427df5e621dbdb5eff0182c0200c81fcd33b2e7e60405160405180910390a2611ac7565b807f6eec2dd2382427616d4ea7ef183b16091feac4e2e63c8b55f25215f132df8d1460405160405180910390a25b50505050505050505050565b6001806003811115611ae157fe5b600060149054906101000a900460ff166003811115611afc57fe5b10151515611b72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f696e76616c696420636f6e74726163742073746174757300000000000000000081525060200191505060405180910390fd5b86858173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c2e57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611c2d5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b1515611c85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061271d602b913960400191505060405180910390fd5b6000611cb28a8a8a8a8a604051808383808284378083019250505092505050604051809103902089612128565b9050611cbd816125b1565b60006005600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550611d3e87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b612556565b1515611db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6661696c656420746f2073656e6420617373657420746f2073656e646572000081525060200191505060405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611e1857807fc47be71cafdfb337a10117b7f8326d658910c899a780068338b3ae26fbfd59b860405160405180910390a2611e46565b807fc99795d9dc9d68f27b21e122a0e663f689138f9110dee0122fc2980f8d57977560405160405180910390a25b50505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f6e6c7920746865206f776e65722063616e2063616c6c20746869730000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6040805190810160405280600581526020017f302e332e3100000000000000000000000000000000000000000000000000000081525081565b6000806003547f636c61696d2074686973207377617000000000000000000000000000000000008787611fdb886126cc565b87604051602001808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200196505050505050506040516020818303038152906040528051906020012090506119017e01000000000000000000000000000000000000000000000000000000000000026006548260405160200180847dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600201838152602001828152602001935050505060405160208183030381529060405280519060200120915050949350505050565b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018281526020019550505050505060405160208183030381529060405280519060200120905095945050505050565b600163ffffffff166005600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff161415156122d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f7377617020616c726561647920636c61696d6564206f7220696e76616c69640081525060200191505060405180910390fd5b50565b60006005600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff16141515612378576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7377617020616c7265616479206578697374730000000000000000000000000081525060200191505060405180910390fd5b50565b60008173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612420576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c69642065746865722073656e64657200000000000000000000000081525060200191505060405180910390fd5b6124298361270e565b3414151561249f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420657468657220616d6f756e742073656e740000000000000081525060200191505060405180910390fd5b6001905092915050565b633b9aca0063ffffffff166005600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff16111515612553576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f7377617020756e636c61696d6564206f7220696e76616c69640000000000000081525060200191505060405180910390fd5b50565b60008173ffffffffffffffffffffffffffffffffffffffff166108fc61257b8561270e565b9081150290604051600060405180830381858888f193505050501580156125a6573d6000803e3d6000fd5b506001905092915050565b633b9aca0063ffffffff166005600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff1611801561261b57506005600082815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff1642115b806126555750600163ffffffff166005600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff16145b15156126c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f73776170206e6f742065787069726564206f7220696e76616c6964000000000081525060200191505060405180910390fd5b50565b60006004546126da8361270e565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60006022820151905091905056fe6f6e6c7920746865206f7261636c65206f72207468652073656e6465722063616e2063616c6c2074686973a165627a7a72305820d60f7c96691c0355a0f4914b706eeb0282cc54115a30bb41824d7940071e939e00290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}