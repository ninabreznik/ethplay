{
  "address": "0x37b99aabab9e6d8fd70b4255623b2aa7eb92ec12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RocsCore",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity ^0.4.22;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    *               契約が一時停止されている場合にのみアクションを許可する\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    *               契約が一時停止されていない場合にのみアクションを許可する\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    *             一時停止するために所有者によって呼び出され、停止状態をトリガする\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    *             ポーズをとるためにオーナーが呼び出し、通常の状態に戻ります\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract RocsBase is Pausable {\n\n    // 生誕代\n    uint128 public eggPrice = 50 finney;\n    function setEggPrice(uint128 _price) public onlyOwner {\n        eggPrice = _price;\n    }\n    // 進化代\n    uint128 public evolvePrice = 5 finney;\n    function setEvolvePrice(uint128 _price) public onlyOwner {\n        evolvePrice = _price;\n    }\n\n    // 生誕\n    event RocCreated(address owner, uint tokenId, uint rocId);\n    // ERC721\n    event Transfer(address from, address to, uint tokenId);\n    event ItemTransfer(address from, address to, uint tokenId);\n\n    /// @dev Rocの構造体\n    struct Roc {\n        // ID\n        uint rocId;\n        // DNA\n        string dna;\n        // 出品中フラグ 1は出品中\n        uint8 marketsFlg;\n    }\n\n    /// @dev Rocsの配列\n    Roc[] public rocs;\n\n    // rocIdとtokenIdのマッピング\n    mapping(uint => uint) public rocIndex;\n    // rocIdからtokenIdを取得\n    function getRocIdToTokenId(uint _rocId) public view returns (uint) {\n        return rocIndex[_rocId];\n    }\n\n    /// @dev 所有するアドレスへのマッピング\n    mapping (uint => address) public rocIndexToOwner;\n    // @dev 所有者アドレスから所有するトークン数へのマッピング\n    mapping (address => uint) public ownershipTokenCount;\n    /// @dev 呼び出しが承認されたアドレスへのマッピング\n    mapping (uint => address) public rocIndexToApproved;\n\n    /// @dev 特定のRocの所有権をアドレスに割り当てます。\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        rocIndexToOwner[_tokenId] = _to;\n        // イベント開始\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n}\n\n/// @title ERC-721に準拠した契約のインタフェース：置き換え不可能なトークン\ncontract ERC721 {\n    // イベント\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    // 必要なメソッド\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function totalSupply() public view returns (uint);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n/// @title Roc所有権を管理するコントラクト\n/// @dev OpenZeppelinのERC721ドラフト実装に準拠\ncontract RocsOwnership is RocsBase, ERC721 {\n\n    /// @notice ERC721で定義されている、置き換え不可能なトークンの名前と記号。\n    string public constant name = \"CryptoFeather\";\n    string public constant symbol = \"CFE\";\n\n    bytes4 constant InterfaceSignature_ERC165 = \n    bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n    bytes4(keccak256('name()')) ^\n    bytes4(keccak256('symbol()')) ^\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('ownerOf(uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('transfer(address,uint256)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('totalSupply()'));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  この契約によって実装された標準化されたインタフェースでtrueを返します。\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    /// @dev 特定のアドレスに指定されたrocの現在の所有者であるかどうかをチェックします。\n    /// @param _claimant \n    /// @param _tokenId \n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return rocIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev 特定のアドレスに指定されたrocが存在するかどうかをチェックします。\n    /// @param _claimant the address we are confirming kitten is approved for.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return rocIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev 以前の承認を上書きして、transferFrom（）に対して承認されたアドレスをマークします。\n    function _approve(uint256 _tokenId, address _approved) internal {\n        rocIndexToApproved[_tokenId] = _approved;\n    }\n\n    // 指定されたアドレスのroc数を取得します。\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice rocの所有者を変更します。\n    /// @dev ERC-721への準拠に必要\n    function transfer(address _to, uint256 _tokenId) public whenNotPaused {\n        // 安全チェック\n        require(_to != address(0));\n        // 自分のrocしか送ることはできません。\n        require(_owns(msg.sender, _tokenId));\n        // 所有権の再割り当て、保留中の承認のクリア、転送イベントの送信\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice transferFrom（）を介して別のアドレスに特定のrocを転送する権利を与えます。\n    /// @dev ERC-721への準拠に必要\n    function approve(address _to, uint256 _tokenId) external whenNotPaused {\n        // 所有者のみが譲渡承認を認めることができます。\n        require(_owns(msg.sender, _tokenId));\n        // 承認を登録します（以前の承認を置き換えます）。\n        _approve(_tokenId, _to);\n        // 承認イベントを発行する。\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice roc所有者の変更を行います。を転送します。そのアドレスには、以前の所有者から転送承認が与えられています。\n    /// @dev ERC-721への準拠に必要\n    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused {\n        // 安全チェック。\n        require(_to != address(0));\n        // 承認と有効な所有権の確認\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        // 所有権を再割り当てします（保留中の承認をクリアし、転送イベントを発行します）。\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice 現在存在するrocの総数を返します。\n    /// @dev ERC-721への準拠に必要です。\n    function totalSupply() public view returns (uint) {\n        return rocs.length - 1;\n    }\n\n    /// @notice 指定されたrocの現在所有権が割り当てられているアドレスを返します。\n    /// @dev ERC-721への準拠に必要です。\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\n        owner = rocIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n\n    /// @dev この契約に所有権を割り当て、NFTを強制終了します。\n    /// @param _owner \n    /// @param _tokenId \n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        transferFrom(_owner, this, _tokenId);\n    }\n\n}\n\n/// @title Rocの飼育に関する管理を行うコントラクト\ncontract RocsBreeding is RocsOwnership {\n\n    /// @notice 新しいRocを作成して保存。 \n    /// @param _rocId \n    /// @param _dna \n    /// @param _marketsFlg \n    /// @param _owner \n    /// @dev RocCreatedイベントとTransferイベントの両方を生成します。 \n    function _createRoc(\n        uint _rocId,\n        string _dna,\n        uint _marketsFlg,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        Roc memory _roc = Roc({\n            rocId: _rocId,\n            dna: _dna,\n            marketsFlg: uint8(_marketsFlg)\n        });\n\n        uint newRocId = rocs.push(_roc) - 1;\n        // 同一のトークンIDが発生した場合は実行を停止します\n        require(newRocId == uint(newRocId));\n        // RocCreatedイベント\n        emit RocCreated(_owner, newRocId, _rocId);\n\n        // これにより所有権が割り当てられ、ERC721ドラフトごとに転送イベントが発行されます\n        rocIndex[_rocId] = newRocId;\n        _transfer(0, _owner, newRocId);\n\n        return newRocId;\n    }\n\n    /// @notice 新たに生み出します \n    /// @param _rocId \n    /// @param _dna \n    function giveProduce(uint _rocId, string _dna)\n        external\n        payable\n        whenNotPaused\n        returns(uint)\n    {\n        // 支払いを確認します。\n        require(msg.value >= eggPrice);\n        uint createRocId = _createRoc(\n            _rocId,\n            _dna, \n            0, \n            msg.sender\n        );\n        // 超過分を買い手に返す\n        uint256 bidExcess = msg.value - eggPrice;\n        msg.sender.transfer(bidExcess);\n\n        return createRocId;\n    }\n\n    /// @notice 初めてのRoc \n    /// @param _rocId \n    /// @param _dna \n    function freeGiveProduce(uint _rocId, string _dna)\n        external\n        payable\n        whenNotPaused\n        returns(uint)\n    {\n        // 初めてのRocか確認します。\n        require(balanceOf(msg.sender) == 0);\n        uint createRocId = _createRoc(\n            _rocId,\n            _dna, \n            0, \n            msg.sender\n        );\n        // 超過分を買い手に返す\n        uint256 bidExcess = msg.value;\n        msg.sender.transfer(bidExcess);\n\n        return createRocId;\n    }\n\n}\n\n/// @title Rocの売買のためのMarkets処理\ncontract RocsMarkets is RocsBreeding {\n\n    event MarketsCreated(uint256 tokenId, uint128 marketsPrice);\n    event MarketsSuccessful(uint256 tokenId, uint128 marketsPriceice, address buyer);\n    event MarketsCancelled(uint256 tokenId);\n\n    // NFT上のマーケットへの出品\n    struct Markets {\n        // 登録時のNFT売手\n        address seller;\n        // 価格\n        uint128 marketsPrice;\n    }\n\n    // トークンIDから対応するマーケットへの出品にマップします。\n    mapping (uint256 => Markets) tokenIdToMarkets;\n\n    // マーケットへの出品の手数料を設定\n    uint256 public ownerCut = 0;\n    function setOwnerCut(uint256 _cut) public onlyOwner {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n    }\n\n    /// @notice Rocマーケットへの出品を作成し、開始します。\n    /// @param _rocId \n    /// @param _marketsPrice \n    function createRocSaleMarkets(\n        uint256 _rocId,\n        uint256 _marketsPrice\n    )\n        external\n        whenNotPaused\n    {\n        require(_marketsPrice == uint256(uint128(_marketsPrice)));\n\n        // チェック用のtokenIdをセット\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n\n        // checkのオーナーである事\n        require(_owns(msg.sender, checkTokenId));\n        // checkのパラメータチェック\n        Roc memory roc = rocs[checkTokenId];\n        // マーケットへの出品中か確認してください。\n        require(uint8(roc.marketsFlg) == 0);\n        // 承認\n        _approve(checkTokenId, msg.sender);\n        // マーケットへの出品セット\n        _escrow(msg.sender, checkTokenId);\n        Markets memory markets = Markets(\n            msg.sender,\n            uint128(_marketsPrice)\n        );\n\n        // マーケットへの出品FLGをセット\n        rocs[checkTokenId].marketsFlg = 1;\n        _addMarkets(checkTokenId, markets);\n    }\n\n    /// @dev マーケットへの出品を公開マーケットへの出品のリストに追加します。 \n    ///  また、MarketsCreatedイベントを発生させます。\n    /// @param _tokenId The ID of the token to be put on markets.\n    /// @param _markets Markets to add.\n    function _addMarkets(uint256 _tokenId, Markets _markets) internal {\n        tokenIdToMarkets[_tokenId] = _markets;\n        emit MarketsCreated(\n            uint256(_tokenId),\n            uint128(_markets.marketsPrice)\n        );\n    }\n\n    /// @dev マーケットへの出品を公開マーケットへの出品のリストから削除します。\n    /// @param _tokenId \n    function _removeMarkets(uint256 _tokenId) internal {\n        delete tokenIdToMarkets[_tokenId];\n    }\n\n    /// @dev 無条件にマーケットへの出品を取り消します。\n    /// @param _tokenId \n    function _cancelMarkets(uint256 _tokenId) internal {\n        _removeMarkets(_tokenId);\n        emit MarketsCancelled(_tokenId);\n    }\n\n    /// @dev まだ獲得されていないMarketsをキャンセルします。\n    ///  元の所有者にNFTを返します。\n    /// @notice これは、契約が一時停止している間に呼び出すことができる状態変更関数です。\n    /// @param _rocId \n    function cancelMarkets(uint _rocId) external {\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\n        address seller = markets.seller;\n        require(msg.sender == seller);\n        _cancelMarkets(checkTokenId);\n        rocIndexToOwner[checkTokenId] = seller;\n        rocs[checkTokenId].marketsFlg = 0;\n    }\n\n    /// @dev 契約が一時停止されたときにMarketsをキャンセルします。\n    ///  所有者だけがこれを行うことができ、NFTは売り手に返されます。 \n    ///  緊急時にのみ使用してください。\n    /// @param _rocId \n    function cancelMarketsWhenPaused(uint _rocId) whenPaused onlyOwner external {\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\n        address seller = markets.seller;\n        _cancelMarkets(checkTokenId);\n        rocIndexToOwner[checkTokenId] = seller;\n        rocs[checkTokenId].marketsFlg = 0;\n    }\n\n    /// @dev Markets入札\n    ///  十分な量のEtherが供給されればNFTの所有権を移転する。\n    /// @param _rocId \n    function bid(uint _rocId) external payable whenNotPaused {\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n        // マーケットへの出品構造体への参照を取得する\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\n\n        uint128 sellingPrice = uint128(markets.marketsPrice);\n        // 入札額が価格以上である事を確認する。\n        // msg.valueはweiの数\n        require(msg.value >= sellingPrice);\n        // マーケットへの出品構造体が削除される前に、販売者への参照を取得します。\n        address seller = markets.seller;\n\n        // マーケットへの出品を削除します。\n        _removeMarkets(checkTokenId);\n\n        if (sellingPrice > 0) {\n            // 競売人のカットを計算します。\n            uint128 marketseerCut = uint128(_computeCut(sellingPrice));\n            uint128 sellerProceeds = sellingPrice - marketseerCut;\n\n            // 売り手に送金する\n            seller.transfer(sellerProceeds);\n        }\n\n        // 超過分を買い手に返す\n        msg.sender.transfer(msg.value - sellingPrice);\n        // イベント\n        emit MarketsSuccessful(checkTokenId, sellingPrice, msg.sender);\n\n        _transfer(seller, msg.sender, checkTokenId);\n        // マーケットへの出品FLGをセット\n        rocs[checkTokenId].marketsFlg = 0;\n    }\n\n    /// @dev 手数料計算\n    /// @param _price \n    function _computeCut(uint128 _price) internal view returns (uint) {\n        return _price * ownerCut / 10000;\n    }\n\n}\n\n/// @title CryptoRocs\ncontract RocsCore is RocsMarkets {\n\n    // コア契約が壊れてアップグレードが必要な場合に設定します\n    address public newContractAddress;\n\n    /// @dev 一時停止を無効にすると、契約を一時停止する前にすべての外部契約アドレスを設定する必要があります。\n    function unpause() public onlyOwner whenPaused {\n        require(newContractAddress == address(0));\n        // 実際に契約を一時停止しないでください。\n        super.unpause();\n    }\n\n    // @dev 利用可能な残高を取得できるようにします。\n    function withdrawBalance(uint _subtractFees) external onlyOwner {\n        uint256 balance = address(this).balance;\n        if (balance > _subtractFees) {\n            owner.transfer(balance - _subtractFees);\n        }\n    }\n\n    /// @notice tokenIdからRocに関するすべての関連情報を返します。\n    /// @param _tokenId トークンID\n    function getRoc(uint _tokenId)\n        external\n        view\n        returns (\n        uint rocId,\n        string dna,\n        uint marketsFlg\n    ) {\n        Roc memory roc = rocs[_tokenId];\n        rocId = uint(roc.rocId);\n        dna = string(roc.dna);\n        marketsFlg = uint(roc.marketsFlg);\n    }\n\n    /// @notice rocIdからRocに関するすべての関連情報を返します。\n    /// @param _rocId rocId\n    function getRocrocId(uint _rocId)\n        external\n        view\n        returns (\n        uint rocId,\n        string dna,\n        uint marketsFlg\n    ) {\n        Roc memory roc = rocs[getRocIdToTokenId(_rocId)];\n        rocId = uint(roc.rocId);\n        dna = string(roc.dna);\n        marketsFlg = uint(roc.marketsFlg);\n    }\n\n    /// @notice rocIdからMarkets情報を返します。\n    /// @param _rocId rocId\n    function getMarketsRocId(uint _rocId)\n        external\n        view\n        returns (\n        address seller,\n        uint marketsPrice\n    ) {\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n        Markets memory markets = tokenIdToMarkets[checkTokenId];\n        seller = markets.seller;\n        marketsPrice = uint(markets.marketsPrice);\n    }\n\n    /// @notice rocIdからオーナー情報を返します。\n    /// @param _rocId rocId\n    function getRocIndexToOwner(uint _rocId)\n        external\n        view\n        returns (\n        address owner\n    ) {\n        uint checkTokenId = getRocIdToTokenId(_rocId);\n        owner = rocIndexToOwner[checkTokenId];\n    }\n\n}",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555066b1a2bc2ec50000600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506611c37937e08000600160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000600855336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613035806100f26000396000f3006080604052600436106101d7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062195e31146101dc57806301ffc9a71461021d57806306fdde03146102815780630926580514610311578063095ea7b31461035d57806318160ddd146103aa57806323b872dd146103d557806325429c151461044257806325686e15146104af578063305e3552146105235780633f4ba83a14610572578063454a2ab3146105895780634ea5a6ac146105a957806351965e75146106165780635c975abb146106ca5780636352211e146106f9578063695f9db3146107665780636af04a571461079d57806370a08231146107f457806372e87c351461084b578063757de573146108975780638119f4ae146108c45780638304a1761461097857806383b5ff8b146109e55780638456cb5914610a105780638da5cb5b14610a2757806391cadaf614610a7e57806395d89b4114610acd578063a9059cbb14610b5d578063a9add7dc14610baa578063cec21acb14610be9578063d5672b3c14610c40578063da76d5cd14610cfa578063dd443c7b14610d27578063e727de5514610d54578063f2513ee914610d93578063f2fde38b14610dc0578063f6d5163814610e03575b600080fd5b3480156101e857600080fd5b5061020760048036038101908080359060200190929190505050610e44565b6040518082815260200191505060405180910390f35b34801561022957600080fd5b5061026760048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e5c565b604051808215151515815260200191505060405180910390f35b34801561028d57600080fd5b506102966110ff565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d65780820151818401526020810190506102bb565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61034760048036038101908080359060200190929190803590602001908201803590602001919091929391929390505050611138565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b506103a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611206565b005b3480156103b657600080fd5b506103bf6112aa565b6040518082815260200191505060405180910390f35b3480156103e157600080fd5b50610440600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ba565b005b34801561044e57600080fd5b5061046d6004803603810190808035906020019092919050505061134c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104bb57600080fd5b506104da6004803603810190808035906020019092919050505061137f565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561052f57600080fd5b5061053861147e565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057e57600080fd5b506105876114a0565b005b6105a76004803603810190808035906020019092919050505061157d565b005b3480156105b557600080fd5b506105d4600480360381019080803590602001909291905050506117fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062257600080fd5b5061064160048036038101908080359060200190929190505050611845565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561068d578082015181840152602081019050610672565b50505050905090810190601f1680156106ba5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106d657600080fd5b506106df61196f565b604051808215151515815260200191505060405180910390f35b34801561070557600080fd5b5061072460048036038101908080359060200190929190505050611982565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077257600080fd5b5061079b60048036038101908080359060200190929190803590602001909291905050506119fb565b005b3480156107a957600080fd5b506107b2611c11565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561080057600080fd5b50610835600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c37565b6040518082815260200191505060405180910390f35b61088160048036038101908080359060200190929190803590602001908201803590602001919091929391929390505050611c80565b6040518082815260200191505060405180910390f35b3480156108a357600080fd5b506108c260048036038101908080359060200190929190505050611da8565b005b3480156108d057600080fd5b506108ef60048036038101908080359060200190929190505050611e1e565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561093b578082015181840152602081019050610920565b50505050905090810190601f1680156109685780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561098457600080fd5b506109a360048036038101908080359060200190929190505050611f40565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109f157600080fd5b506109fa611f73565b6040518082815260200191505060405180910390f35b348015610a1c57600080fd5b50610a25611f79565b005b348015610a3357600080fd5b50610a3c612039565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a8a57600080fd5b50610a9361205e565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ad957600080fd5b50610ae2612080565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b22578082015181840152602081019050610b07565b50505050905090810190601f168015610b4f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b6957600080fd5b50610ba8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120b9565b005b348015610bb657600080fd5b50610be760048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050612135565b005b348015610bf557600080fd5b50610c2a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121cc565b6040518082815260200191505060405180910390f35b348015610c4c57600080fd5b50610c6b600480360381019080803590602001909291905050506121e4565b60405180848152602001806020018360ff1660ff168152602001828103825284818151815260200191508051906020019080838360005b83811015610cbd578082015181840152602081019050610ca2565b50505050905090810190601f168015610cea5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610d0657600080fd5b50610d25600480360381019080803590602001909291905050506122c2565b005b348015610d3357600080fd5b50610d52600480360381019080803590602001909291905050506123b0565b005b348015610d6057600080fd5b50610d9160048036038101908080356fffffffffffffffffffffffffffffffff1690602001909291905050506124d1565b005b348015610d9f57600080fd5b50610dbe60048036038101908080359060200190929190505050612568565b005b348015610dcc57600080fd5b50610e01600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126c4565b005b348015610e0f57600080fd5b50610e2e60048036038101908080359060200190929190505050612819565b6040518082815260200191505060405180910390f35b60036020528060005260406000206000915090505481565b600060405180807f737570706f727473496e74657266616365286279746573342900000000000000815250601901905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110f8575060405180807f746f74616c537570706c79282900000000000000000000000000000000000000815250600d019050604051809103902060405180807f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f74323536290000000000000000000000000000000000000000000000000000008152506025019050604051809103902060405180807f7472616e7366657228616464726573732c75696e7432353629000000000000008152506019019050604051809103902060405180807f617070726f766528616464726573732c75696e743235362900000000000000008152506018019050604051809103902060405180807f6f776e65724f662875696e7432353629000000000000000000000000000000008152506010019050604051809103902060405180807f62616c616e63654f6628616464726573732900000000000000000000000000008152506012019050604051809103902060405180807f73796d626f6c28290000000000000000000000000000000000000000000000008152506008019050604051809103902060405180807f6e616d652829000000000000000000000000000000000000000000000000000081525060060190506040518091039020181818181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6040805190810160405280600d81526020017f43727970746f466561746865720000000000000000000000000000000000000081525081565b60008060008060149054906101000a900460ff1615151561115857600080fd5b600061116333611c37565b14151561116f57600080fd5b6111ae8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600033612836565b91503490503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111f9573d6000803e3d6000fd5b5081925050509392505050565b600060149054906101000a900460ff1615151561122257600080fd5b61122c3382612992565b151561123757600080fd5b61124181836129fe565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b6000600160028054905003905090565b600060149054906101000a900460ff161515156112d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561131257600080fd5b61131c3382612a54565b151561132757600080fd5b6113318382612992565b151561133c57600080fd5b611347838383612ac0565b505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061138c612efd565b61139585612819565b9150600760008381526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090508060000151935080602001516fffffffffffffffffffffffffffffffff1692505050915091565b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114fb57600080fd5b600060149054906101000a900460ff16151561151657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561157357600080fd5b61157b612c55565b565b600080600080600080600060149054906101000a900460ff161515156115a257600080fd5b6115ab87612819565b95506007600087815260200190815260200160002094508460010160009054906101000a90046fffffffffffffffffffffffffffffffff169350836fffffffffffffffffffffffffffffffff16341015151561160657600080fd5b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925061163686612d13565b6000846fffffffffffffffffffffffffffffffff1611156116bb5761165a84612d76565b915081840390508273ffffffffffffffffffffffffffffffffffffffff166108fc826fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f193505050501580156116b9573d6000803e3d6000fd5b505b3373ffffffffffffffffffffffffffffffffffffffff166108fc856fffffffffffffffffffffffffffffffff1634039081150290604051600060405180830381858888f19350505050158015611715573d6000803e3d6000fd5b507ff7310aeb7f04e7e929cbe3fbe4a3b242cdb1be3ee09df134724d914bf0b6b1e186853360405180848152602001836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a16117b8833388612ac0565b60006002878154811015156117c957fe5b906000526020600020906003020160020160006101000a81548160ff021916908360ff16021790555050505050505050565b60008061180783612819565b90506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600060606000611853612f3f565b600261185e86612819565b81548110151561186a57fe5b90600052602060002090600302016060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119275780601f106118fc57610100808354040283529160200191611927565b820191906000526020600020905b81548152906001019060200180831161190a57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff168152505090508060000151935080602001519250806040015160ff169150509193909250565b600060149054906101000a900460ff1681565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119f657600080fd5b919050565b6000611a05612f3f565b611a0d612efd565b600060149054906101000a900460ff16151515611a2957600080fd5b836fffffffffffffffffffffffffffffffff1684141515611a4957600080fd5b611a5285612819565b9250611a5e3384612992565b1515611a6957600080fd5b600283815481101515611a7857fe5b90600052602060002090600302016060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b355780601f10611b0a57610100808354040283529160200191611b35565b820191906000526020600020905b815481529060010190602001808311611b1857829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff168152505091506000826040015160ff16141515611b7357600080fd5b611b7d83336129fe565b611b873384612da3565b60408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681525090506001600284815481101515611bd757fe5b906000526020600020906003020160020160006101000a81548160ff021916908360ff160217905550611c0a8382612db2565b5050505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060149054906101000a900460ff16151515611ca057600080fd5b600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff163410151515611cdf57600080fd5b611d1e8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600033612836565b9150600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16340390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611d9b573d6000803e3d6000fd5b5081925050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e0357600080fd5b6127108111151515611e1457600080fd5b8060088190555050565b600060606000611e2c612f3f565b600285815481101515611e3b57fe5b90600052602060002090600302016060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ef85780601f10611ecd57610100808354040283529160200191611ef8565b820191906000526020600020905b815481529060010190602001808311611edb57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff168152505090508060000151935080602001519250806040015160ff169150509193909250565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fd457600080fd5b600060149054906101000a900460ff16151515611ff057600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160109054906101000a90046fffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f434645000000000000000000000000000000000000000000000000000000000081525081565b600060149054906101000a900460ff161515156120d557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561211157600080fd5b61211b3382612992565b151561212657600080fd5b612131338383612ac0565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219057600080fd5b80600160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b60056020528060005260406000206000915090505481565b6002818154811015156121f357fe5b9060005260206000209060030201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122a55780601f1061227a576101008083540402835291602001916122a5565b820191906000526020600020905b81548152906001019060200180831161228857829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561231f57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050818111156123ac576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8383039081150290604051600060405180830381858888f193505050501580156123aa573d6000803e3d6000fd5b505b5050565b60008060006123be84612819565b92506007600084815260200190815260200160002091508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561243657600080fd5b61243f83612eba565b806004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002848154811015156124a257fe5b906000526020600020906003020160020160006101000a81548160ff021916908360ff16021790555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561252c57600080fd5b80600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b60008060008060149054906101000a900460ff16151561258757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125e257600080fd5b6125eb84612819565b92506007600084815260200190815260200160002091508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061263283612eba565b806004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060028481548110151561269557fe5b906000526020600020906003020160020160006101000a81548160ff021916908360ff16021790555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561271f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561275b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060036000838152602001908152602001600020549050919050565b6000612840612f3f565b60006060604051908101604052808881526020018781526020018660ff1681525091506001600283908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010190805190602001906128b9929190612f64565b5060408201518160020160006101000a81548160ff021916908360ff160217905550505003905080811415156128ee57600080fd5b7f356e57fe25271c48c5e1da79e9c1162304b7734cdcb513f3ce17c51c219fe669848289604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a180600360008981526020019081526020016000208190555061298560008583612ac0565b8092505050949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b806006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008273ffffffffffffffffffffffffffffffffffffffff166006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cb057600080fd5b600060149054906101000a900460ff161515612ccb57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60076000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055505050565b6000612710600854836fffffffffffffffffffffffffffffffff1602811515612d9b57fe5b049050919050565b612dae8230836112ba565b5050565b806007600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050507fd76c4234f07f7e2a0adba822943ec5e516df1cab1cda06873b2bd1b472fafed582826020015160405180838152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b612ec381612d13565b7f1d7e922258beda338325f7244361addb8824b27fb43d970f5b97e3a941bf691a816040518082815260200191505060405180910390a150565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6060604051908101604052806000815260200160608152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fa557805160ff1916838001178555612fd3565b82800160010185558215612fd3579182015b82811115612fd2578251825591602001919060010190612fb7565b5b509050612fe09190612fe4565b5090565b61300691905b80821115613002576000816000905550600101612fea565b5090565b905600a165627a7a72305820152f9256f4929a2224eb413d4437b69dfa601575014c68e90e2048c4304abf540029"
}