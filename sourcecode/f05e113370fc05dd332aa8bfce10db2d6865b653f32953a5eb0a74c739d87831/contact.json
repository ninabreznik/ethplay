{
  "address": "0x64ff248ddd36430e3640fbea76999941a8bccbd7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FreelancerCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-23\n*/\n\npragma solidity ^0.4.18;\n\ncontract ERC20Interface {\n     // Get the total token supply\n     function totalSupply() constant public returns (uint256 totalSupplyToken);\n     // Get the account balance of another account with address _owner\n     function balanceOf(address _owner) public constant returns (uint256 balance);\n\n     // Send _value amount of tokens to address _to\n     function transfer(address _to, uint256 _value) public returns (bool success);\n\n     // Send _value amount of tokens from address _from to address _to\n     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     // this function is required for some DEX functionality\n     function approve(address _spender, uint256 _value) public returns (bool success);\n\n     // Returns the amount which _spender is still allowed to withdraw from _owner\n     function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n     // Triggered when tokens are transferred.\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n     // Triggered whenever approve(address _spender, uint256 _value) is called.\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n\n contract FreelancerCoin is ERC20Interface {\n     string public constant symbol = \"LAN\";\n     string public constant name = \"FreelancerCoin\";\n     uint8 public constant decimals = 18;\n     uint256 _totalSupply = 80000000000000000000000000;\n\n     // Owner of this contract\n     address public owner;\n\n     // Balances for each account\n     mapping(address => uint256) balances;\n\n     // Owner of account approves the transfer of an amount to another account\n     mapping(address => mapping (address => uint256)) allowed;\n\n     // Functions with this modifier can only be executed by the owner\n     modifier onlyOwner() {\n         require(msg.sender != owner); {\n\n          }\n          _;\n      }\n\n      // Constructor\n      function FreelancerCoin() public {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n     function totalSupply() constant public returns (uint256 totalSupplyToken) {\n         totalSupplyToken = _totalSupply;\n     }\n      // What is the balance of a particular account?\n      function balanceOf(address _owner) public constant returns (uint256 balance) {\n         return balances[_owner];\n      }\n\n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) public returns (bool success) {\n         if (balances[msg.sender] >= _amount\n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]) {\n              balances[msg.sender] -= _amount;\n              balances[_to] += _amount;\n              Transfer(msg.sender, _to, _amount);\n              return true;\n          } else {\n              return false;\n         }\n      }\n\n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom (\n          address _from,\n          address _to,\n         uint256 _amount\n    ) public returns (bool success) {\n       if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n           && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n           balances[_from] -= _amount;\n           allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n        } else {\n            return false;\n         }\n     }\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n\n     function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n}",
  "bytecode": "60606040526a422ca8b0a00a4250000000600055341561001e57600080fd5b60018054600160a060020a03338116600160a060020a0319909216919091179182905560008054929091168152600260205260409020556105d0806100646000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d578063313ce567146101b557806370a08231146101de5780638da5cb5b146101fd57806395d89b411461022c578063a9059cbb1461023f578063dd62ed3e14610261575b600080fd5b34156100b357600080fd5b6100bb610286565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a03600435166024356102bd565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b61032a565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a0360043581169060243516604435610330565b34156101c057600080fd5b6101c861044b565b60405160ff909116815260200160405180910390f35b34156101e957600080fd5b61017b600160a060020a0360043516610450565b341561020857600080fd5b61021061046b565b604051600160a060020a03909116815260200160405180910390f35b341561023757600080fd5b6100bb61047a565b341561024a57600080fd5b610154600160a060020a03600435166024356104b1565b341561026c57600080fd5b61017b600160a060020a0360043581169060243516610579565b60408051908101604052600e81527f467265656c616e636572436f696e000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005490565b600160a060020a0383166000908152600260205260408120548290108015906103805750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b801561038c5750600082115b80156103b15750600160a060020a038316600090815260026020526040902054828101115b1561044057600160a060020a0380851660008181526002602081815260408084208054899003905560038252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610444565b5060005b9392505050565b601281565b600160a060020a031660009081526002602052604090205490565b600154600160a060020a031681565b60408051908101604052600381527f4c414e0000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600260205260408120548290108015906104da5750600082115b80156104ff5750600160a060020a038316600090815260026020526040902054828101115b1561057157600160a060020a033381166000818152600260205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610324565b506000610324565b600160a060020a039182166000908152600360209081526040808320939094168252919091522054905600a165627a7a7230582089c552ce1da71fe1981f8ceb8757f01fa7b2c204862d58d2186f31303f50edec0029"
}