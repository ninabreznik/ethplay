{
  "address": "0x3c0461bfce440aaa78f4967b8b84e23d3fddfc0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ApplauseCashToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-17\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n    using SafeMath for uint256;\n\n    enum State { Active, Refunding, Closed }\n\n    mapping (address => uint256) public deposited;\n    address public wallet;\n    State public state;\n\n    event Closed();\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n    function RefundVault(address _wallet) public {\n        require(_wallet != 0x0);\n        wallet = _wallet;\n        state = State.Active;\n    }\n\n    function deposit(address investor) public onlyOwner  payable {\n        require(state == State.Active);\n        deposited[investor] = deposited[investor].add(msg.value);\n    }\n\n    function close() public onlyOwner {\n        require(state == State.Active);\n        state = State.Closed;\n        Closed();\n        wallet.transfer(this.balance);\n    }\n\n    function enableRefunds() public onlyOwner {\n        require(state == State.Active);\n        state = State.Refunding;\n        RefundsEnabled();\n    }\n\n    function refund(address investor) public {\n        require(state == State.Refunding);\n        uint256 depositedValue = deposited[investor];\n        deposited[investor] = 0;\n        investor.transfer(depositedValue);\n        Refunded(investor, depositedValue);\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n\ncontract ApplauseCashToken is StandardToken, PausableToken {\n    string public constant name = \"ApplauseCash\";\n    string public constant symbol = \"APLC\";\n    uint8 public constant decimals = 4;\n    uint256 public INITIAL_SUPPLY = 300000000 * 10000;\n\n    function ApplauseCashToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n\n\n\n/**\n * @title Crowdsale\n * @dev Modified contract for managing a token crowdsale.\n * ApplauseCashCrowdsale have pre-sale and main sale periods,\n * where investors can make token purchases and the crowdsale will assign\n * them tokens based on a token per ETH rate and the system of bonuses.\n * Funds collected are forwarded to a wallet as they arrive.\n * pre-sale and main sale periods both have caps defined in tokens.\n */\n\ncontract ApplauseCashCrowdsale is Ownable {\n\n    using SafeMath for uint256;\n\n    struct Bonus {\n        uint duration;\n        uint percent;\n    }\n\n    // minimum amount of funds to be raised in tokens\n    uint256 public softcap;\n\n    // refund vault used to hold funds while crowdsale is running\n    RefundVault public vault;\n\n    // true for finalised crowdsale\n    bool public isFinalized;\n\n    // The token being sold\n    ApplauseCashToken public token = new ApplauseCashToken();\n\n    // start and end timestamps where pre-investments are allowed (both inclusive)\n    uint256 public preIcoStartTime;\n    uint256 public preIcoEndTime;\n\n    // start and end timestamps where main-investments are allowed (both inclusive)\n    uint256 public icoStartTime;\n    uint256 public icoEndTime;\n\n    // maximum amout of tokens for pre-sale and main sale\n    uint256 public preIcoHardcap;\n    uint256 public icoHardcap;\n\n    // address where funds are collected\n    address public wallet;\n\n    // how many token units a buyer gets per ETH\n    uint256 public rate;\n\n    // amount of raised tokens\n    uint256 public tokensInvested;\n\n    Bonus[] public preIcoBonuses;\n    Bonus[] public icoBonuses;\n\n    // Invstors can't invest less then specified numbers in wei\n    uint256 public preIcoMinimumWei;\n    uint256 public icoMinimumWei;\n\n    // Default bonus %\n    uint256 public defaultPercent;\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    function ApplauseCashCrowdsale(\n        uint256 _preIcoStartTime,\n        uint256 _preIcoEndTime,\n        uint256 _preIcoHardcap,\n        uint256 _icoStartTime,\n        uint256 _icoEndTime,\n        uint256 _icoHardcap,\n        uint256 _softcap,\n        uint256 _rate,\n        address _wallet\n    ) public {\n\n        //require(_softcap > 0);\n\n        // can't start pre-sale in the past\n        require(_preIcoStartTime >= now);\n\n        // can't start main sale in the past\n        require(_icoStartTime >= now);\n\n        // can't start main sale before the end of pre-sale\n        require(_preIcoEndTime < _icoStartTime);\n\n        // the end of pre-sale can't happen before it's start\n        require(_preIcoStartTime < _preIcoEndTime);\n\n        // the end of main sale can't happen before it's start\n        require(_icoStartTime < _icoEndTime);\n\n        require(_rate > 0);\n        require(_preIcoHardcap > 0);\n        require(_icoHardcap > 0);\n        require(_wallet != 0x0);\n\n        preIcoMinimumWei = 20000000000000000;  // 0.02 Ether default minimum\n        icoMinimumWei = 20000000000000000; // 0.02 Ether default minimum\n        defaultPercent = 0;\n\n        preIcoBonuses.push(Bonus({duration: 1 hours, percent: 90}));\n        preIcoBonuses.push(Bonus({duration: 6 days + 5 hours, percent: 50}));\n\n        icoBonuses.push(Bonus({duration: 1 hours, percent: 45}));\n        icoBonuses.push(Bonus({duration: 7 days + 15 hours, percent: 40}));\n        icoBonuses.push(Bonus({duration: 6 days, percent: 30}));\n        icoBonuses.push(Bonus({duration: 6 days, percent: 20}));\n        icoBonuses.push(Bonus({duration: 7 days, percent: 10}));\n\n        preIcoStartTime = _preIcoStartTime;\n        preIcoEndTime = _preIcoEndTime;\n        preIcoHardcap = _preIcoHardcap;\n        icoStartTime = _icoStartTime;\n        icoEndTime = _icoEndTime;\n        icoHardcap = _icoHardcap;\n        softcap = _softcap;\n        rate = _rate;\n        wallet = _wallet;\n\n        isFinalized = false;\n\n        vault = new RefundVault(wallet);\n    }\n\n    // fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable {\n\n        require(beneficiary != 0x0);\n        require(msg.value != 0);\n        require(!isFinalized);\n\n        uint256 weiAmount = msg.value;\n\n        validateWithinPeriods();\n\n        // calculate token amount to be created.\n        // ETH and our tokens have different numbers of decimals after comma\n        // ETH - 18 decimals, our tokes - 4. so we need to divide our value\n        // by 1e14 (18 - 4 == 14).\n        uint256 tokens = weiAmount.mul(rate).div(100000000000000);\n\n        uint256 percent = getBonusPercent(now);\n\n        // add bonus to tokens depends on the period\n        uint256 bonusedTokens = applyBonus(tokens, percent);\n\n        validateWithinCaps(bonusedTokens, weiAmount);\n\n        // update state\n        tokensInvested = tokensInvested.add(bonusedTokens);\n        token.transfer(beneficiary, bonusedTokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n\n        forwardFunds();\n    }\n    \n    // owner can transfer tokens\n    function transferTokens(address beneficiary, uint256 tokens) public onlyOwner {\n        token.transfer(beneficiary, tokens);\n    }\n\n    // set new dates for pre-salev (emergency case)\n    function setPreIcoParameters(\n        uint256 _preIcoStartTime,\n        uint256 _preIcoEndTime,\n        uint256 _preIcoHardcap,\n        uint256 _preIcoMinimumWei\n    ) public onlyOwner {\n        require(!isFinalized);\n        require(_preIcoStartTime < _preIcoEndTime);\n        require(_preIcoHardcap > 0);\n        preIcoStartTime = _preIcoStartTime;\n        preIcoEndTime = _preIcoEndTime;\n        preIcoHardcap = _preIcoHardcap;\n        preIcoMinimumWei = _preIcoMinimumWei;\n    }\n\n    // set new dates for main-sale (emergency case)\n    function setIcoParameters(\n        uint256 _icoStartTime,\n        uint256 _icoEndTime,\n        uint256 _icoHardcap,\n        uint256 _icoMinimumWei\n    ) public onlyOwner {\n\n        require(!isFinalized);\n        require(_icoStartTime < _icoEndTime);\n        require(_icoHardcap > 0);\n        icoStartTime = _icoStartTime;\n        icoEndTime = _icoEndTime;\n        icoHardcap = _icoHardcap;\n        icoMinimumWei = _icoMinimumWei;\n    }\n\n    // set new wallets (emergency case)\n    function setWallet(address _wallet) public onlyOwner {\n        require(!isFinalized);\n        require(_wallet != 0x0);\n        wallet = _wallet;\n    }\n\n      // set new rate (emergency case)\n    function setRate(uint256 _rate) public onlyOwner {\n        require(!isFinalized);\n        require(_rate > 0);\n        rate = _rate;\n    }\n\n        // set new softcap (emergency case)\n    function setSoftcap(uint256 _softcap) public onlyOwner {\n        require(!isFinalized);\n        require(_softcap > 0);\n        softcap = _softcap;\n    }\n\n\n    // set token on pause\n    function pauseToken() external onlyOwner {\n        require(!isFinalized);\n        token.pause();\n    }\n\n    // unset token's pause\n    function unpauseToken() external onlyOwner {\n        token.unpause();\n    }\n\n    // set token Ownership\n    function transferTokenOwnership(address newOwner) external onlyOwner {\n        token.transferOwnership(newOwner);\n    }\n\n    // @return true if main sale event has ended\n    function icoHasEnded() external constant returns (bool) {\n        return now > icoEndTime;\n    }\n\n    // @return true if pre sale event has ended\n    function preIcoHasEnded() external constant returns (bool) {\n        return now > preIcoEndTime;\n    }\n\n    // send ether to the fund collection wallet\n    function forwardFunds() internal {\n        //wallet.transfer(msg.value);\n        vault.deposit.value(msg.value)(msg.sender);\n    }\n\n    // we want to be able to check all bonuses in already deployed contract\n    // that's why we pass currentTime as a parameter instead of using \"now\"\n    function getBonusPercent(uint256 currentTime) public constant returns (uint256 percent) {\n      //require(currentTime >= preIcoStartTime);\n        uint i = 0;\n        bool isPreIco = currentTime >= preIcoStartTime && currentTime <= preIcoEndTime;\n        uint256 offset = 0;\n        if (isPreIco) {\n            uint256 preIcoDiffInSeconds = currentTime.sub(preIcoStartTime);\n            for (i = 0; i < preIcoBonuses.length; i++) {\n                if (preIcoDiffInSeconds <= preIcoBonuses[i].duration + offset) {\n                    return preIcoBonuses[i].percent;\n                }\n                offset = offset.add(preIcoBonuses[i].duration);\n            }\n        } else {\n            uint256 icoDiffInSeconds = currentTime.sub(icoStartTime);\n            for (i = 0; i < icoBonuses.length; i++) {\n                if (icoDiffInSeconds <= icoBonuses[i].duration + offset) {\n                    return icoBonuses[i].percent;\n                }\n                offset = offset.add(icoBonuses[i].duration);\n            }\n        }\n        return defaultPercent;\n    }\n\n    function applyBonus(uint256 tokens, uint256 percent) internal pure returns  (uint256 bonusedTokens) {\n        uint256 tokensToAdd = tokens.mul(percent).div(100);\n        return tokens.add(tokensToAdd);\n    }\n\n    function validateWithinPeriods() internal constant {\n        // within pre-sale or main sale\n        require((now >= preIcoStartTime && now <= preIcoEndTime) || (now >= icoStartTime && now <= icoEndTime));\n    }\n\n    function validateWithinCaps(uint256 tokensAmount, uint256 weiAmount) internal constant {\n        uint256 expectedTokensInvested = tokensInvested.add(tokensAmount);\n\n        // within pre-sale\n        if (now >= preIcoStartTime && now <= preIcoEndTime) {\n            require(weiAmount >= preIcoMinimumWei);\n            require(expectedTokensInvested <= preIcoHardcap);\n        }\n\n        // within main sale\n        if (now >= icoStartTime && now <= icoEndTime) {\n            require(expectedTokensInvested <= icoHardcap);\n        }\n    }\n\n    // if crowdsale is unsuccessful, investors can claim refunds here\n    function claimRefund() public {\n        require(isFinalized);\n        require(!softcapReached());\n        vault.refund(msg.sender);\n    }\n\n    function softcapReached() public constant returns (bool) {\n        return tokensInvested >= softcap;\n    }\n\n    // finish crowdsale\n    function finaliseCrowdsale() external onlyOwner returns (bool) {\n        require(!isFinalized);\n        if (softcapReached()) {\n            vault.close();\n        } else {\n            vault.enableRefunds();\n        }\n\n        isFinalized = true;\n        return true;\n    }\n\n}\n\n\ncontract Deployer is Ownable {\n\n    ApplauseCashCrowdsale public applauseCashCrowdsale;\n    uint256 public constant TOKEN_DECIMALS_MULTIPLIER = 10000;\n    address public multisig = 0xaB188aCBB8a401277DC2D83C242677ca3C96fF05;\n\n    function deploy() public onlyOwner {\n        applauseCashCrowdsale = new ApplauseCashCrowdsale(\n            1516280400, //Pre ICO Start: 18 Jan 2018 at 8:00 am EST\n            1516856400, //Pre ICO End: 24 Jan 2018 at 11:59 pm EST\n            3000000 * TOKEN_DECIMALS_MULTIPLIER, //Pre ICO hardcap\n            1517490000,  // ICO Start: 1 Feb 2018 at 8 am EST\n            1519880400, // ICO End: 28 Feb 2018 at 11.59 pm EST\n            144000000 * TOKEN_DECIMALS_MULTIPLIER,  // ICO hardcap\n            50000 * TOKEN_DECIMALS_MULTIPLIER, // Overal crowdsale softcap\n            500, // 1 ETH = 500 APLC\n            multisig // Multisignature wallet (controlled by multiple accounts)\n        );\n    }\n\n    function setOwner() public onlyOwner {\n        applauseCashCrowdsale.transferOwnership(owner);\n    }\n\n\n}",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506502ba7def3000600455341561003457600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600081905550600454600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117c3806100d36000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018457806318160ddd146101de57806323b872dd146102075780632ff2e9dc14610280578063313ce567146102a95780633f4ba83a146102d85780635c975abb146102ed578063661884631461031a57806370a08231146103745780638456cb59146103c15780638da5cb5b146103d657806395d89b411461042b578063a9059cbb146104b9578063d73dd62314610513578063dd62ed3e1461056d578063f2fde38b146105d9575b600080fd5b341561010157600080fd5b610109610612565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018f57600080fd5b6101c4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061064b565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101f161067b565b6040518082815260200191505060405180910390f35b341561021257600080fd5b610266600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610681565b604051808215151515815260200191505060405180910390f35b341561028b57600080fd5b6102936106b3565b6040518082815260200191505060405180910390f35b34156102b457600080fd5b6102bc6106b9565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357600080fd5b6102eb6106be565b005b34156102f857600080fd5b61030061077e565b604051808215151515815260200191505060405180910390f35b341561032557600080fd5b61035a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610791565b604051808215151515815260200191505060405180910390f35b341561037f57600080fd5b6103ab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107c1565b6040518082815260200191505060405180910390f35b34156103cc57600080fd5b6103d461080a565b005b34156103e157600080fd5b6103e96108cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043657600080fd5b61043e6108f1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047e578082015181840152602081019050610463565b50505050905090810190601f1680156104ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c457600080fd5b6104f9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061092a565b604051808215151515815260200191505060405180910390f35b341561051e57600080fd5b610553600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061095a565b604051808215151515815260200191505060405180910390f35b341561057857600080fd5b6105c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061098a565b6040518082815260200191505060405180910390f35b34156105e457600080fd5b610610600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a11565b005b6040805190810160405280600c81526020017f4170706c6175736543617368000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff1615151561066957600080fd5b6106738383610b69565b905092915050565b60005481565b6000600360149054906101000a900460ff1615151561069f57600080fd5b6106aa848484610cf0565b90509392505050565b60045481565b600481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561071a57600080fd5b600360149054906101000a900460ff16151561073557600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600360149054906101000a900460ff1681565b6000600360149054906101000a900460ff161515156107af57600080fd5b6107b983836110af565b905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561086657600080fd5b600360149054906101000a900460ff1615151561088257600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f41504c430000000000000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff1615151561094857600080fd5b6109528383611340565b905092915050565b6000600360149054906101000a900460ff1615151561097857600080fd5b6109828383611564565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610aa957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080821480610bf557506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610c0057600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d2d57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d7b57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e0657600080fd5b610e5882600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eed82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fbf82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156111c0576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611254565b6111d3838261176090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561137d57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156113cb57600080fd5b61141d82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461176090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114b282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006115f582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600082821115151561176e57fe5b818303905092915050565b600080828401905083811015151561178d57fe5b80915050929150505600a165627a7a723058201beb6c4bcf81857b2b9a8a8befdd96be9f395533ad9ec483238181b74bd0b5c40029"
}