{
  "address": "0xfbbc46458c53154c0d1b45c801c28a99f95fa709",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-31\n*/\n\npragma solidity ^0.4.18;\n\n// Project: High Reward Coin\n// v4, 2017-12-31\n// This code is the property of CryptoB2B.io\n// Copying in whole or in part is prohibited.\n// Authors: Ivan Fedorov and Dmitry Borodin\n// Do you want the same ICO platform? www.cryptob2b.io\n\n\n// (A1)\n// The main contract for the sale and management of rounds.\ncontract CrowdsaleBL{\n    using SafeMath for uint256;\n\n    enum ICOType {round1, round2}\n    enum Roles {beneficiary, accountant, manager, observer, bounty, team, company}\n\n    Token public token;\n\n    bool public isFinalized;\n    bool public isInitialized;\n    bool public isPausedCrowdsale;\n\n    mapping (uint8 => address) public wallets;\n   \n\n    uint256 public startTime = 1516435200;    // 20.01.2018 08:00:00\n    uint256 public endTime = 1519171199;      // 20.02.2018 23:59:59\n\n    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\n    // **THOUSANDS** 10^3 for human, 1*10**3 for Solidity, 1e3 for MyEtherWallet (MEW).\n    // Example: if 1ETH = 40.5 Token ==> use 40500\n    uint256 public rate = 400000; // Tokens\n\n    // If the round does not attain this value before the closing date, the round is recognized as a\n    // failure and investors take the money back (the founders will not interfere in any way).\n    // **QUINTILLIONS** 10^18 / 1*10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\n    uint256 public softCap = 1240000*10**18; // 1,24M Tokens (~ $1 000 000)\n\n    // The maximum possible amount of income\n    // **QUINTILLIONS** 10^18 / 1*10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\n    uint256 public hardCap = 9240000*10**18; // 9,24M Tokens (~ $12 700 00)\n\n    // If the last payment is slightly higher than the hardcap, then the usual contracts do\n    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\n    // last payment, very slightly raising the hardcap. The value indicates by how many Token emitted the\n    // last payment can exceed the hardcap to allow it to be paid. Immediately after this buy, the\n    // round closes. The funders should write here a small number, not more than 1% of the CAP.\n    // Can be equal to zero, to cancel.\n    // **QUINTILLIONS** 10^18 / 1*10**18 / 1e18\n    uint256 public overLimit = 20000*10**18; // Tokens (~$20000)\n\n    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\n    // **QUINTILLIONS** 10^18 / 1*10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\n    uint256 public minPay = 36*10**15; // 0,036 ETH (~$25)\n\n    uint256 public ethWeiRaised;\n    uint256 public nonEthWeiRaised;\n    uint256 weiRound1;\n    uint256 public tokenReserved;\n\n    RefundVault public vault;\n    SVTAllocation public lockedAllocation;\n    \n    \n    struct BonusBlock {uint256 amount; uint256 procent;}\n    BonusBlock[] public bonusPattern;\n\n    ICOType ICO = ICOType.round2; // only ICO round #2 (no pre-ICO)\n\n    uint256 allToken;\n\n    bool public bounty;\n    bool public team;\n    bool public company;\n    bool public partners;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    event Finalized();\n    event Initialized();\n\n    function CrowdsaleBL(Token _token, uint256 firstMint) public\n    {\n        // Initially, all next 7 roles/wallets are given to the Manager. The Manager is an employee of the company\n        // with knowledge of IT, who publishes the contract and sets it up. However, money and tokens require\n        // a Beneficiary and other roles (Accountant, Team, etc.). The Manager will not have the right\n        // to receive them. To enable this, the Manager must either enter specific wallets here, or perform\n        // this via method changeWallet. In the finalization methods it is written which wallet and\n        // what percentage of tokens are received.\n\n        // Receives all the money (when finalizing pre-ICO & ICO)\n        wallets[uint8(Roles.beneficiary)] = 0xe06bD713B2e33C218FDD56295Af74d45cE8c9D98; //msg.sender;\n\n        // Receives all the tokens for non-ETH investors (when finalizing pre-ICO & ICO)\n        wallets[uint8(Roles.accountant)] = 0xddC98d7d9CdD82172daD7467c8E341cfBEb077DD; //msg.sender;\n\n        // All rights except the rights to receive tokens or money. Has the right to change any other\n        // wallets (Beneficiary, Accountant, ...), but only if the round has not started. Once the\n        // round is initialized, the Manager has lost all rights to change the wallets.\n        // If the ICO is conducted by one person, then nothing needs to be changed. Permit all 7 roles\n        // point to a single wallet.\n        wallets[uint8(Roles.manager)] = msg.sender;\n\n        // Has only the right to call paymentsInOtherCurrency (please read the document)\n        wallets[uint8(Roles.observer)] = 0x76d737F21296cd1ED6938DbCA217615681b06336; //msg.sender;\n\n\n        wallets[uint8(Roles.bounty)] = 0x4918fc7974d7Ee6F266f9256DfcA610FD735Bf27; //msg.sender;\n\n        // When the round is finalized, all team tokens are transferred to a special freezing\n        // contract. As soon as defrosting is over, only the Team wallet will be able to\n        // collect all the tokens. It does not store the address of the freezing contract,\n        // but the final wallet of the project team.\n        wallets[uint8(Roles.team)] = 0xc59403026685F553f8a6937C53452b9d1DE4c707; // msg.sender;\n\n        // startTime, endDiscountTime, endTime (then you can change it in the setup)\n        //changePeriod(now + 5 minutes, now + 5 + 10 minutes, now + 5 + 12 minutes);\n\n        wallets[uint8(Roles.company)] = 0xc59403026685F553f8a6937C53452b9d1DE4c707; //msg.sender;\n        \n        token = _token;\n        token.setOwner();\n\n        token.pause(); // block exchange tokens\n\n        token.addUnpausedWallet(msg.sender);\n        token.addUnpausedWallet(wallets[uint8(Roles.company)]);\n        token.addUnpausedWallet(wallets[uint8(Roles.bounty)]);\n        token.addUnpausedWallet(wallets[uint8(Roles.accountant)]);\n\n        if (firstMint > 0){\n            token.mint(msg.sender,firstMint);\n        }\n\n    }\n\n    // Returns the name of the current round in plain text. Constant.\n    function ICOSaleType()  public constant returns(string){\n        return (ICO == ICOType.round1)?'round1':'round2';\n    }\n\n    // Transfers the funds of the investor to the contract of return of funds. Internal.\n    function forwardFunds() internal {\n        vault.deposit.value(msg.value)(msg.sender);\n    }\n\n    // Check for the possibility of buying tokens. Inside. Constant.\n    function validPurchase() internal constant returns (bool) {\n\n        // The round started and did not end\n        bool withinPeriod = (now > startTime && now < endTime);\n\n        // Rate is greater than or equal to the minimum\n        bool nonZeroPurchase = msg.value >= minPay;\n\n        // round is initialized and no \"Pause of trading\" is set\n        return withinPeriod && nonZeroPurchase && isInitialized && !isPausedCrowdsale;\n    }\n\n    // Check for the ability to finalize the round. Constant.\n    function hasEnded() public constant returns (bool) {\n\n        bool timeReached = now > endTime;\n\n        bool capReached = token.totalSupply().add(tokenReserved) >= hardCap;\n\n        return (timeReached || capReached) && isInitialized;\n    }\n    \n    function finalizeAll() external {\n        finalize();\n        finalize1();\n        finalize2();\n        finalize3();\n        finalize4();\n    }\n\n    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\n    // anyone can call the finalization to unlock the return of funds to investors\n    // You must call a function to finalize each round (after the pre-ICO & after the ICO)\n    function finalize() public {\n\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender|| !goalReached());\n        require(!isFinalized);\n        require(hasEnded());\n\n        isFinalized = true;\n        finalization();\n        Finalized();\n    }\n\n    // The logic of finalization. Internal\n    function finalization() internal {\n\n        // If the goal of the achievement\n        if (goalReached()) {\n\n            // Send ether to Beneficiary\n            vault.close(wallets[uint8(Roles.beneficiary)]);\n\n            // if there is anything to give\n            if (tokenReserved > 0) {\n\n                // Issue tokens of non-eth investors to Accountant account\n                token.mint(wallets[uint8(Roles.accountant)],tokenReserved);\n\n                // Reset the counter\n                tokenReserved = 0;\n            }\n\n            // If the finalization is Round 1 pre-ICO\n            if (ICO == ICOType.round1) {\n\n                // Reset settings\n                isInitialized = false;\n                isFinalized = false;\n\n                // Switch to the second round (to ICO)\n                ICO = ICOType.round2;\n\n                // Reset the collection counter\n                weiRound1 = weiRaised();\n                ethWeiRaised = 0;\n                nonEthWeiRaised = 0;\n\n            }\n            else // If the second round is finalized\n            {\n\n                // Record how many tokens we have issued\n                allToken = token.totalSupply();\n\n                // Permission to collect tokens to those who can pick them up\n                bounty = true;\n                team = true;\n                company = true;\n                partners = true;\n\n            }\n\n        }\n        else // If they failed round\n        {\n            // Allow investors to withdraw their funds\n            vault.enableRefunds();\n        }\n    }\n\n    // The Manager freezes the tokens for the Team.\n    // You must call a function to finalize Round 2 (only after the ICO)\n    function finalize1() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\n        require(team);\n        team = false;\n        lockedAllocation = new SVTAllocation(token, wallets[uint8(Roles.team)]);\n        token.addUnpausedWallet(lockedAllocation);\n        // 6% - tokens to Team wallet after freeze (77% for investors)\n        // *** CHECK THESE NUMBERS ***\n        token.mint(lockedAllocation, allToken.mul(6).div(77));\n    }\n\n    function finalize2() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\n        require(bounty);\n        bounty = false;\n        // 2% - tokens to bounty wallet (77% for investors)\n        // *** CHECK THESE NUMBERS ***\n        token.mint(wallets[uint8(Roles.bounty)], allToken.mul(2).div(77));\n    }\n\n    function finalize3() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\n        require(company);\n        company = false;\n        // 2% - tokens to company wallet (77% for investors)\n        // *** CHECK THESE NUMBERS ***\n        token.mint(wallets[uint8(Roles.company)],allToken.mul(2).div(77));\n    }\n\n    function finalize4()  public {\n        require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.beneficiary)] == msg.sender);\n        require(partners);\n        partners = false;\n        // 13% - tokens to partners+referral wallet (77% for investors)\n        // *** CHECK THESE NUMBERS ***\n        token.mint(wallets[uint8(Roles.accountant)],allToken.mul(13).div(77));\n    }\n\n\n    // Initializing the round. Available to the manager. After calling the function,\n    // the Manager loses all rights: Manager can not change the settings (setup), change\n    // wallets, prevent the beginning of the round, etc. You must call a function after setup\n    // for the initial round (before the Pre-ICO and before the ICO)\n    function initialize() public{\n\n        // Only the Manager\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n\n        // If not yet initialized\n        require(!isInitialized);\n\n        // And the specified start time has not yet come\n        // If initialization return an error, check the start date!\n        require(now <= startTime);\n\n        initialization();\n\n        Initialized();\n\n        isInitialized = true;\n    }\n\n    function initialization() internal {\n\t    vault = new RefundVault();\n    }\n\n    // At the request of the investor, we raise the funds (if the round has failed because of the hardcap)\n    function claimRefund() public{\n        vault.refund(msg.sender);\n    }\n\n    // We check whether we collected the necessary minimum funds. Constant.\n    function goalReached() public constant returns (bool) {\n        return token.totalSupply().add(tokenReserved) >= softCap;\n    }\n\n    // Customize. The arguments are described in the constructor above.\n    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap, uint256 _rate, uint256 _overLimit, uint256 _minPay, uint256[] _amount, uint256[] _procent) public{\n            changePeriod(_startTime, _endTime);\n            changeRate(_rate, _minPay);\n            changeCap(_softCap, _hardCap, _overLimit);\n            if(_amount.length > 0)\n                setBonusPattern(_amount,_procent);\n    }\n\n\t// Change the date and time: the beginning of the round, the end of the bonus, the end of the round. Available to Manager\n    // Description in the Crowdsale constructor\n    function changePeriod(uint256 _startTime, uint256 _endTime) public{\n\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n\n        require(!isInitialized);\n\n        // Date and time are correct\n        require(now <= _startTime);\n        require(_startTime < _endTime);\n\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n    \n\n    // Change the price (the number of tokens per 1 eth), the maximum hardCap for the last bet,\n    // the minimum bet. Available to the Manager.\n    // Description in the Crowdsale constructor\n    function changeRate(uint256 _rate, uint256 _minPay) public {\n\n         require(wallets[uint8(Roles.manager)] == msg.sender || wallets[uint8(Roles.observer)] == msg.sender);\n\n         require(_rate > 0);\n\n         rate = _rate;\n         minPay = _minPay;\n    }\n    \n    function changeCap(uint256 _softCap, uint256 _hardCap, uint256 _overLimit) public {\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n        require(!isInitialized);\n        require(_hardCap > _softCap);\n        softCap = _softCap;\n        hardCap = _hardCap;\n        overLimit = _overLimit;\n    }\n    \n    function setBonusPattern(uint256[] _amount, uint256[] _procent) public {\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n        require(!isInitialized);\n        require(_amount.length == _procent.length);\n        bonusPattern.length = _amount.length;\n        for(uint256 i = 0; i < _amount.length; i++){\n            bonusPattern[i] = BonusBlock(_amount[i],_procent[i]);\n        }\n    }\n\n    // Collected funds for the current round. Constant.\n    function weiRaised() public constant returns(uint256){\n        return ethWeiRaised.add(nonEthWeiRaised);\n    }\n\n    // Returns the amount of fees for both phases. Constant.\n    function weiTotalRaised() public constant returns(uint256){\n        return weiRound1.add(weiRaised());\n    }\n\n\n    // The ability to quickly check pre-ICO (only for Round 1, only 1 time). Completes the pre-ICO by\n    // transferring the specified number of tokens to the Accountant's wallet. Available to the Manager.\n    // Use only if this is provided by the script and white paper. In the normal scenario, it\n    // does not call and the funds are raised normally. We recommend that you delete this\n    // function entirely, so as not to confuse the auditors. Initialize & Finalize not needed.\n    // ** QUINTILIONS **  10^18 / 1*10**18 / 1e18\n//    function fastICO(uint256 _totalSupply) public {\n//      require(wallets[uint8(Roles.manager)] == msg.sender);\n//      require(ICO == ICOType.round1 && !isInitialized);\n//      token.mint(wallets[uint8(Roles.accountant)], _totalSupply);\n//      ICO = ICOType.round2;\n//    }\n\n    // Remove the \"Pause of exchange\". Available to the manager at any time. If the\n    // manager refuses to remove the pause, then 30 days after the successful\n    // completion of the ICO, anyone can remove a pause and allow the exchange to continue.\n    // The manager does not interfere and will not be able to delay the term.\n    // He can only cancel the pause before the appointed time.\n    function tokenUnpause() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender\n        \t|| (now > endTime + 30 days && ICO == ICOType.round2 && isFinalized && goalReached()));\n        token.unpause();\n    }\n\n    // Enable the \"Pause of exchange\". Available to the manager until the ICO is completed.\n    // The manager cannot turn on the pause, for example, 3 years after the end of the ICO.\n    function tokenPause() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender && !isFinalized);\n        token.pause();\n    }\n\n    // Pause of sale. Available to the manager.\n    function crowdsalePause() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n        require(isPausedCrowdsale == false);\n        isPausedCrowdsale = true;\n    }\n\n    // Withdrawal from the pause of sale. Available to the manager.\n    function crowdsaleUnpause() public {\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n        require(isPausedCrowdsale == true);\n        isPausedCrowdsale = false;\n    }\n\n    // Checking whether the rights to address ignore the \"Pause of exchange\". If the\n    // wallet is included in this list, it can translate tokens, ignoring the pause. By default,\n    // only the following wallets are included:\n    //    - Accountant wallet (he should immediately transfer tokens, but not to non-ETH investors)\n    //    - Contract for freezing the tokens for the Team (but Team wallet not included)\n    // Inside. Constant.\n    function unpausedWallet(address _wallet) internal constant returns(bool) {\n        bool _accountant = wallets[uint8(Roles.accountant)] == _wallet;\n        bool _manager = wallets[uint8(Roles.manager)] == _wallet;\n        bool _bounty = wallets[uint8(Roles.bounty)] == _wallet;\n        bool _company = wallets[uint8(Roles.company)] == _wallet;\n        return _accountant || _manager || _bounty || _company;\n    }\n\n    // For example - After 5 years of the project's existence, all of us suddenly decided collectively\n    // (company + investors) that it would be more profitable for everyone to switch to another smart\n    // contract responsible for tokens. The company then prepares a new token, investors\n    // disassemble, study, discuss, etc. After a general agreement, the manager allows any investor:\n\t//      - to burn the tokens of the previous contract\n\t//      - generate new tokens for a new contract\n\t// It is understood that after a general solution through this function all investors\n\t// will collectively (and voluntarily) move to a new token.\n    function moveTokens(address _migrationAgent) public {\n        require(wallets[uint8(Roles.manager)] == msg.sender);\n        token.setMigrationAgent(_migrationAgent);\n    }\n\n\t// Change the address for the specified role.\n\t// Available to any wallet owner except the observer.\n\t// Available to the manager until the round is initialized.\n\t// The Observer's wallet or his own manager can change at any time.\n    function changeWallet(Roles _role, address _wallet) public\n    {\n        require(\n        \t\t(msg.sender == wallets[uint8(_role)] && _role != Roles.observer)\n      \t\t||\n      \t\t\t(msg.sender == wallets[uint8(Roles.manager)] && (!isInitialized || _role == Roles.observer))\n      \t);\n        address oldWallet = wallets[uint8(_role)];\n        wallets[uint8(_role)] = _wallet;\n        if(!unpausedWallet(oldWallet))\n            token.delUnpausedWallet(oldWallet);\n        if(unpausedWallet(_wallet))\n            token.addUnpausedWallet(_wallet);\n    }\n\n    // If a little more than a year has elapsed (ICO start date + 400 days), a smart contract\n    // will allow you to send all the money to the Beneficiary, if any money is present. This is\n    // possible if you mistakenly launch the ICO for 30 years (not 30 days), investors will transfer\n    // money there and you will not be able to pick them up within a reasonable time. It is also\n    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\n    // finalization. Without finalization, money cannot be returned. This is a rescue option to\n    // get around this problem, but available only after a year (400 days).\n\n\t// Another reason - the ICO was a failure, but not all ETH investors took their money during the year after.\n\t// Some investors may have lost a wallet key, for example.\n\n\t// The method works equally with the pre-ICO and ICO. When the pre-ICO starts, the time for unlocking\n\t// the distructVault begins. If the ICO is then started, then the term starts anew from the first day of the ICO.\n\n\t// Next, act independently, in accordance with obligations to investors.\n\n\t// Within 400 days of the start of the Round, if it fails only investors can take money. After\n\t// the deadline this can also include the company as well as investors, depending on who is the first to use the method.\n    function distructVault() public {\n        require(wallets[uint8(Roles.beneficiary)] == msg.sender);\n        require(now > startTime + 400 days);\n        vault.del(wallets[uint8(Roles.beneficiary)]);\n    }\n    \n    \n    \n    function getBonus(uint256 _tokenValue) public constant returns (uint256 value) {\n        uint256 totalToken = tokenReserved.add(token.totalSupply());\n        uint256 tokenValue = _tokenValue;\n        uint256 currentBonus;\n        uint256 calculateBonus = 0;\n        uint16 i;\n        for (i = 0; i < bonusPattern.length; i++){\n            if(totalToken >= bonusPattern[i].amount)\n                continue;\n            currentBonus = tokenValue.mul(bonusPattern[i].procent.add(100000)).div(100000);\n            if(totalToken.add(calculateBonus).add(currentBonus) < bonusPattern[i].amount) {\n                calculateBonus = calculateBonus.add(currentBonus);\n                tokenValue = 0;\n                break;\n            }\n            currentBonus = bonusPattern[i].amount.sub(totalToken.add(calculateBonus));\n            tokenValue = tokenValue.sub(currentBonus.mul(100000).div(bonusPattern[i].procent.add(100000)));\n            calculateBonus = calculateBonus + currentBonus;\n        }\n        return calculateBonus.add(tokenValue);\n    }\n\n\n\t// We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\n\t// Perhaps other types of cryptocurrency - see the original terms in the white paper and on the ICO website.\n\n\t// We release tokens on Ethereum. During the pre-ICO and ICO with a smart contract, you directly transfer\n\t// the tokens there and immediately, with the same transaction, receive tokens in your wallet.\n\n\t// When paying in any other currency, for example in BTC, we accept your money via one common wallet.\n\t// Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\n    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\n    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\n    // monitors softcap and hardcap, so as not to go beyond this framework.\n\n\t// In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\n\t// transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\n\t// In this case, we will refund all the amounts above, in order not to exceed the hardcap.\n\n\t// Collection of money in BTC will be carried out via one common wallet. The wallet's address will be published\n\t// everywhere (in a white paper, on the ICO website, on Telegram, on Bitcointalk, in this code, etc.)\n\t// Anyone interested can check that the administrator of the smart contract writes down exactly the amount\n\t// in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\n\t// BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\n\t// paymentsInOtherCurrency however, this threat is leveled.\n\n\t// Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\n\t// (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\n\t// on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the ICO,\n\t// simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\n\t// and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\n\n\t// The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\n\t// cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\n\t// brakes on the Ethereum network, this operation may be difficult. You should only worry if the\n\t// administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\n\t// receives significant amounts.\n\n\t// This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\n\n    // Common BTC wallet: 12sEoiXPs8a6sJbC2qkbZDjmHsSBv7cGwC\n\n    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\n    function paymentsInOtherCurrency(uint256 _token, uint256 _value) public {\n        require(wallets[uint8(Roles.observer)] == msg.sender);\n        bool withinPeriod = (now >= startTime && now <= endTime);\n\n        bool withinCap = token.totalSupply().add(_token) <= hardCap.add(overLimit);\n        require(withinPeriod && withinCap && isInitialized);\n\n        nonEthWeiRaised = _value;\n        tokenReserved = _token;\n\n    }\n\n\n    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\n    // transferred to the buyer, taking into account the current bonus.\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be created\n        uint256 tokens = getBonus(weiAmount*rate/1000);\n        \n        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\n        bool withinCap = tokens <= hardCap.sub(token.totalSupply().add(tokenReserved)).add(overLimit);\n        \n        require(withinCap);\n\n        // update state\n        ethWeiRaised = ethWeiRaised.add(weiAmount);\n\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        forwardFunds();\n    }\n\n    // buyTokens alias\n    function () public payable {\n        buyTokens(msg.sender);\n    }\n\n}\n\n// (B)\n// The contract for freezing tokens for the team..\ncontract SVTAllocation {\n    using SafeMath for uint256;\n\n    Token public token;\n\n\taddress public owner;\n\n    uint256 public unlockedAt;\n\n    uint256 tokensCreated = 0;\n\n    // The contract takes the ERC20 coin address from which this contract will work and from the\n    // owner (Team wallet) who owns the funds.\n    function SVTAllocation(Token _token, address _owner) public{\n\n    \t// How many days to freeze from the moment of finalizing ICO\n        unlockedAt = now + 1 years;\n        token = _token;\n        owner = _owner;\n    }\n\n    // If the time of freezing expired will return the funds to the owner.\n    function unlock() public{\n        require(now >= unlockedAt);\n        require(token.transfer(owner,token.balanceOf(this)));\n    }\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tuint256 c = a * b;\n    \tassert(a == 0 || c / a == b);\n    \treturn c;\n\t}\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this does not hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n\t\treturn c;\n    }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public{\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool _paused = false;\n\n    function paused() public constant returns(bool)\n    {\n        return _paused;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused());\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner public {\n        require(!_paused);\n        _paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner public {\n        require(_paused);\n        _paused = false;\n        Unpause();\n    }\n}\n\n\n// Contract interface for transferring current tokens to another\ncontract MigrationAgent\n{\n    function migrateFrom(address _from, uint256 _value) public;\n}\n\n\n\n// (A2)\n// Contract token\ncontract Token is Pausable{\n    using SafeMath for uint256;\n\n    string public constant name = \"High Reward Coin\";\n    string public constant symbol = \"HRC\";\n    uint8 public constant decimals = 18;\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    mapping (address => bool) public unpausedWallet;\n\n    bool public mintingFinished = false;\n\n    uint256 public totalMigrated;\n    address public migrationAgent;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n     function Token() public {\n         owner = 0x0;\n     }\n\n     function setOwner() public{\n         require(owner == 0x0);\n         owner = msg.sender;\n     }\n\n    // Balance of the specified address\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // Transfer of tokens from one account to another\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require (_value > 0);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // Returns the number of tokens that _owner trusted to spend from his account _spender\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // Trust _sender and spend _value tokens from your account\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // Transfer of tokens from the trusted address _from to the address _to in the number _value\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        require (_value > 0);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // Issue new tokens to the address _to in the amount _amount. Available to the owner of the contract (contract Crowdsale)\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n        return true;\n    }\n\n    // Stop the release of tokens. This is not possible to cancel. Available to the owner of the contract.\n//    function finishMinting() public onlyOwner returns (bool) {\n//        mintingFinished = true;\n//        MintFinished();\n//        return true;\n//    }\n\n    // Redefinition of the method of the returning status of the \"Exchange pause\".\n    // Never for the owner of an unpaused wallet.\n    function paused() public constant returns(bool) {\n        return super.paused() && !unpausedWallet[msg.sender];\n    }\n\n\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\n    function addUnpausedWallet(address _wallet) public onlyOwner {\n        unpausedWallet[_wallet] = true;\n    }\n\n    // Remove the wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\n    function delUnpausedWallet(address _wallet) public onlyOwner {\n         unpausedWallet[_wallet] = false;\n    }\n\n    // Enable the transfer of current tokens to others. Only 1 time. Disabling this is not possible.\n    // Available to the owner of the contract.\n    function setMigrationAgent(address _migrationAgent) public onlyOwner {\n        require(migrationAgent == 0x0);\n        migrationAgent = _migrationAgent;\n    }\n\n    // Reissue your tokens.\n    function migrate() public\n    {\n        uint256 value = balances[msg.sender];\n        require(value > 0);\n\n        totalSupply = totalSupply.sub(value);\n        totalMigrated = totalMigrated.add(value);\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n        Migrate(msg.sender,migrationAgent,value);\n        balances[msg.sender] = 0;\n    }\n}\n\n// (A3)\n// Contract for freezing of investors' funds. Hence, investors will be able to withdraw money if the\n// round does not attain the softcap. From here the wallet of the beneficiary will receive all the\n// money (namely, the beneficiary, not the manager's wallet).\ncontract RefundVault is Ownable {\n    using SafeMath for uint256;\n\n    enum State { Active, Refunding, Closed }\n\n    mapping (address => uint256) public deposited;\n    State public state;\n\n    event Closed();\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\n\n    function RefundVault() public {\n        state = State.Active;\n    }\n\n    // Depositing funds on behalf of an ICO investor. Available to the owner of the contract (Crowdsale Contract).\n    function deposit(address investor) onlyOwner public payable {\n        require(state == State.Active);\n        deposited[investor] = deposited[investor].add(msg.value);\n        Deposited(investor,msg.value);\n    }\n\n    // Move the collected funds to a specified address. Available to the owner of the contract.\n    function close(address _wallet) onlyOwner public {\n        require(state == State.Active);\n        require(_wallet != 0x0);\n        state = State.Closed;\n        Closed();\n        _wallet.transfer(this.balance);\n    }\n\n    // Allow refund to investors. Available to the owner of the contract.\n    function enableRefunds() onlyOwner public {\n        require(state == State.Active);\n        state = State.Refunding;\n        RefundsEnabled();\n    }\n\n    // Return the funds to a specified investor. In case of failure of the round, the investor\n    // should call this method of this contract (RefundVault) or call the method claimRefund of Crowdsale\n    // contract. This function should be called either by the investor himself, or the company\n    // (or anyone) can call this function in the loop to return funds to all investors en masse.\n    function refund(address investor) public {\n        require(state == State.Refunding);\n        require(deposited[investor] > 0);\n        uint256 depositedValue = deposited[investor];\n        deposited[investor] = 0;\n        investor.transfer(depositedValue);\n        Refunded(investor, depositedValue);\n    }\n\n    // Destruction of the contract with return of funds to the specified address. Available to\n    // the owner of the contract.\n    function del(address _wallet) external onlyOwner {\n        selfdestruct(_wallet);\n    }\n}",
  "bytecode": "60606040526000805460a060020a60ff02191690556005805460ff19169055341561002957600080fd5b60008054600160a060020a033316600160a060020a031991821617169055610d8c806100566000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014257806306301ce81461016957806306fdde031461018a578063095ea7b31461021457806318160ddd1461023657806323b872dd1461025b578063313ce567146102835780633f4ba83a146102ac57806340c10f19146102bf57806340caae06146102e15780635c975abb146102f457806370a082311461030757806375e2ff65146103265780638328dbcd146103455780638456cb59146103745780638da5cb5b146103875780638fd3ab801461039a57806395a0f5eb146103ad57806395d89b41146103c0578063a9059cbb146103d3578063abb00601146103f5578063b8b3db4f14610414578063dd62ed3e14610433578063f2fde38b14610458575b600080fd5b341561014d57600080fd5b610155610477565b604051901515815260200160405180910390f35b341561017457600080fd5b610188600160a060020a0360043516610480565b005b341561019557600080fd5b61019d6104bc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d95780820151838201526020016101c1565b50505050905090810190601f1680156102065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021f57600080fd5b610155600160a060020a03600435166024356104f3565b341561024157600080fd5b610249610599565b60405190815260200160405180910390f35b341561026657600080fd5b610155600160a060020a036004358116906024351660443561059f565b341561028e57600080fd5b6102966106df565b60405160ff909116815260200160405180910390f35b34156102b757600080fd5b6101886106e4565b34156102ca57600080fd5b610155600160a060020a0360043516602435610763565b34156102ec57600080fd5b610188610868565b34156102ff57600080fd5b6101556108a8565b341561031257600080fd5b610249600160a060020a03600435166108dc565b341561033157600080fd5b610188600160a060020a03600435166108f7565b341561035057600080fd5b610358610957565b604051600160a060020a03909116815260200160405180910390f35b341561037f57600080fd5b610188610966565b341561039257600080fd5b6103586109ea565b34156103a557600080fd5b6101886109f9565b34156103b857600080fd5b610249610b2d565b34156103cb57600080fd5b61019d610b33565b34156103de57600080fd5b610155600160a060020a0360043516602435610b6a565b341561040057600080fd5b610188600160a060020a0360043516610c4a565b341561041f57600080fd5b610155600160a060020a0360043516610c89565b341561043e57600080fd5b610249600160a060020a0360043581169060243516610c9e565b341561046357600080fd5b610188600160a060020a0360043516610cc9565b60055460ff1681565b60005433600160a060020a0390811691161461049b57600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b60408051908101604052601081527f486967682052657761726420436f696e00000000000000000000000000000000602082015281565b60008115806105255750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b151561053057600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b6000806105aa6108a8565b156105b457600080fd5b50600160a060020a038085166000908152600360209081526040808320339094168352929052908120549083116105ea57600080fd5b600160a060020a038516600090815260026020526040902054610613908463ffffffff610d2816565b600160a060020a038087166000908152600260205260408082209390935590861681522054610648908463ffffffff610d3a16565b600160a060020a038516600090815260026020526040902055610671818463ffffffff610d2816565b600160a060020a03808716600081815260036020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b60005433600160a060020a039081169116146106ff57600080fd5b60005460a060020a900460ff16151561071757600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000805433600160a060020a0390811691161461077f57600080fd5b60055460ff161561078f57600080fd5b6001546107a2908363ffffffff610d3a16565b600155600160a060020a0383166000908152600260205260409020546107ce908363ffffffff610d3a16565b600160a060020a0384166000818152600260205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600054600160a060020a03161561087e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316179055565b60006108b2610d50565b80156108d75750600160a060020a03331660009081526004602052604090205460ff16155b905090565b600160a060020a031660009081526002602052604090205490565b60005433600160a060020a0390811691161461091257600080fd5b600754600160a060020a03161561092857600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600754600160a060020a031681565b60005433600160a060020a0390811691161461098157600080fd5b60005460a060020a900460ff161561099857600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b600160a060020a033316600090815260026020526040812054908111610a1e57600080fd5b600154610a31908263ffffffff610d2816565b600155600654610a47908263ffffffff610d3a16565b600655600754600160a060020a0316637a3130e333836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610ab957600080fd5b6102c65a03f11515610aca57600080fd5b5050600754600160a060020a03908116915033167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a8360405190815260200160405180910390a350600160a060020a033316600090815260026020526040812055565b60065481565b60408051908101604052600381527f4852430000000000000000000000000000000000000000000000000000000000602082015281565b6000610b746108a8565b15610b7e57600080fd5b60008211610b8b57600080fd5b600160a060020a033316600090815260026020526040902054610bb4908363ffffffff610d2816565b600160a060020a033381166000908152600260205260408082209390935590851681522054610be9908363ffffffff610d3a16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a03908116911614610c6557600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b60046020526000908152604090205460ff1681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610ce457600080fd5b600160a060020a0381161515610cf957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610d3457fe5b50900390565b600082820183811015610d4957fe5b9392505050565b60005460a060020a900460ff16905600a165627a7a72305820cceb1706d7798fb372ca9edf4f7bb3c6abd601b9861cd3669fb002515ad695c60029"
}