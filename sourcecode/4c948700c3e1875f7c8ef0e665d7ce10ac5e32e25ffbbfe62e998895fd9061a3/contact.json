{
  "address": "0xb585fe1cca1de123337912e7face361f22e87cd6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Super100",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.5.0;\n\ninterface PriceWatcherI\n{\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH);\n}\n\n\ncontract PriceWatcherPlaceholder is PriceWatcherI\n{\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH)\n    {\n        return 12345;\n        // $123.45 per ETH\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public{\n        owner = msg.sender;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract Super100 is Ownable\n{\n    // Constants\n    uint256 public TOKEN_PRICE_USD_CENTS;\n    uint256 public totalSupply;\n    uint256 public AMOUNT_OF_FREE_TOKENS;\n    address payable public root;\n    address payable public bank;\n    uint256 public REFERRER_COMMISSION_PERCENTAGE;\n    uint256 public ROOT_COMMISSION_PERCENTAGE;\n    PriceWatcherI public priceWatcher;\n\n    // State variables\n    mapping(address => uint256) private balances;\n    address[] public participants;\n    mapping(address => address payable) public address_to_referrer;\n    mapping(address => address[]) public address_to_referrals;\n\n    constructor(address _priceWatcherContract, uint256 _tokenPriceUSDcents, uint256 _totalSupply, uint256 _amountOfFreeTokens, address payable _root, address payable _bank, uint256 _referrerCommissionPercentage, uint256 _rootCommissionPercentage) public\n    {\n        if (_priceWatcherContract == address(0x0))\n        {\n            priceWatcher = new PriceWatcherPlaceholder();\n        }\n        else\n        {\n            priceWatcher = PriceWatcherI(_priceWatcherContract);\n        }\n\n        TOKEN_PRICE_USD_CENTS = _tokenPriceUSDcents;\n        totalSupply = _totalSupply;\n        AMOUNT_OF_FREE_TOKENS = _amountOfFreeTokens;\n        root = _root;\n        bank = _bank;\n        REFERRER_COMMISSION_PERCENTAGE = _referrerCommissionPercentage;\n        ROOT_COMMISSION_PERCENTAGE = _rootCommissionPercentage;\n\n        // The root address is its own referrer\n        address_to_referrer[root] = root;\n\n        // Mint all the tokens and assign them to the root address\n        balances[root] = totalSupply;\n        emit Transfer(address(0x0), root, totalSupply);\n    }\n\n    function transferManually(address payable beneficiary, address payable referrer) external onlyOwner() {\n        address_to_referrer[beneficiary] = referrer;\n        address_to_referrals[referrer].push(beneficiary);\n        balances[root] -= 1;\n        balances[beneficiary] += 1;\n        participants.push(beneficiary);\n        emit Transfer(root, beneficiary, 1);\n    }\n\n    function getTokenPriceETH() public view returns (uint256)\n    {\n        // Fetch the current ETH exchange rate\n        uint256 USDcentsPerETH = priceWatcher.getUSDcentsPerETH();\n\n        // Use the exchange rate to calculate the current token price in ETH\n        return (1 ether) * TOKEN_PRICE_USD_CENTS / USDcentsPerETH;\n    }\n\n    function buyTokens(address payable _referrer) external payable\n    {\n        uint256 tokensBought;\n        uint256 totalValueOfTokensBought;\n\n        uint256 tokenPriceWei = getTokenPriceETH();\n\n        // If there are still free tokens available\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\n        {\n            tokensBought = 1;\n            totalValueOfTokensBought = 0;\n\n            // Only 1 free token per address\n            require(address_to_referrer[msg.sender] == address(0x0));\n        }\n\n        // If there are no free tokens available\n        else\n        {\n            tokensBought = msg.value / tokenPriceWei;\n\n            // Limit the bought tokens to the amount of tokens still for sale\n            if (tokensBought > balances[root])\n            {\n                tokensBought = balances[root];\n            }\n\n            totalValueOfTokensBought = tokensBought * tokenPriceWei;\n        }\n\n        // If 0 tokens are being purchased, cancel this transaction\n        require(tokensBought > 0);\n\n        // Return the change\n        msg.sender.transfer(msg.value - totalValueOfTokensBought);\n\n        // If we haven't seen this buyer before\n        if (address_to_referrer[msg.sender] == address(0x0))\n        {\n            // Referrer must have owned at least 1 token\n            require(address_to_referrer[_referrer] != address(0x0));\n\n            // Add them to the particpants list and the referral tree\n            address_to_referrer[msg.sender] = _referrer;\n            address_to_referrals[_referrer].push(msg.sender);\n            participants.push(msg.sender);\n        }\n\n        // If we have seen this buyer before\n        else\n        {\n            // Referrer must be the same as their previous referrer\n            require(_referrer == address_to_referrer[msg.sender]);\n        }\n\n        // Transfer the bought tokens from root to the buyer\n        balances[root] -= tokensBought;\n        balances[msg.sender] += tokensBought;\n        emit Transfer(root, msg.sender, tokensBought);\n\n        // Transfer commission to the referrer\n        uint256 commissionForReferrer = totalValueOfTokensBought * REFERRER_COMMISSION_PERCENTAGE / 100;\n        _referrer.transfer(commissionForReferrer);\n\n        // Transfer commission to the root\n        uint256 commissionForRoot = totalValueOfTokensBought * ROOT_COMMISSION_PERCENTAGE / 100;\n        root.transfer(commissionForRoot);\n\n        // Transfer the remaining ETH to the bank\n        bank.transfer(totalValueOfTokensBought - commissionForReferrer - commissionForRoot);\n    }\n\n    function amountOfReferralsMade(address _byReferrer) external view returns (uint256)\n    {\n        return address_to_referrals[_byReferrer].length;\n    }\n\n    function amountOfTokensForSale() external view returns (uint256)\n    {\n        return balances[root];\n    }\n\n    function amountOfFreeTokensAvailable() external view returns (uint256)\n    {\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\n        {\n            return AMOUNT_OF_FREE_TOKENS - participants.length;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n    // ERC20 implementation\n    string public constant name = \"Super100\";\n    string public constant symbol = \"S100\";\n    uint8 public constant decimals = 0;\n\n    mapping(address => mapping(address => uint256)) private allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n\n    function balanceOf(address _who) external view returns (uint256)\n    {\n        return balances[_who];\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _amount) external returns (bool)\n    {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool)\n    {\n        require(allowed[_from][msg.sender] >= _amount);\n        require(balances[_from] >= _amount);\n        allowed[_from][msg.sender] -= _amount;\n        balances[_from] -= _amount;\n        balances[_to] += _amount;\n        emit Transfer(_from, _to, _amount);\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) external returns (bool)\n    {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function increaseAllowance(address _spender, uint256 _addedAmount) public returns (bool)\n    {\n        require(allowed[msg.sender][_spender] + _addedAmount >= _addedAmount);\n        allowed[msg.sender][_spender] += _addedAmount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address _spender, uint256 _subtractedAmount) public returns (bool)\n    {\n        require(allowed[msg.sender][_spender] >= _subtractedAmount);\n        allowed[msg.sender][_spender] -= _subtractedAmount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516101008062002bfe83398101806040526101008110156200003557600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141562000170576200010c62000419565b604051809103906000f08015801562000129573d6000803e3d6000fd5b50600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b2565b87600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b86600181905550856002819055508460038190555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160068190555080600781905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025460096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6002546040518082815260200191505060405180910390a3505050505050505062000429565b60405160c08062002b3e83390190565b61270580620004396000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461017a578063095ea7b31461020a5780630d2aa2451461027d57806318160ddd146102d45780631f362867146102ff57806323b872dd14610390578063313ce5671461042357806335c1d3491461045457806338651c59146104cf578063395093511461056a5780633c3d7243146105dd57806359bc74a41461060857806369feae641461063357806370a08231146106a45780637281d2a91461070957806376cdb03b1461073457806387129f521461078b57806389ba195e146107b65780638da5cb5b146107e157806395d89b41146108385780639d47feb6146108c8578063a457c2d71461092d578063a7c67e35146109a0578063a9059cbb146109cb578063d7b6bd0114610a3e578063dd62ed3e14610a69578063ebf0c71714610aee578063ec8ac4d814610b45578063f2fde38b14610b89575b600080fd5b34801561018657600080fd5b5061018f610bda565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021657600080fd5b506102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c13565b604051808215151515815260200191505060405180910390f35b34801561028957600080fd5b50610292610d81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e057600080fd5b506102e9610da7565b6040518082815260200191505060405180910390f35b34801561030b57600080fd5b5061034e6004803603602081101561032257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039c57600080fd5b50610409600480360360608110156103b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de0565b604051808215151515815260200191505060405180910390f35b34801561042f57600080fd5b50610438611130565b604051808260ff1660ff16815260200191505060405180910390f35b34801561046057600080fd5b5061048d6004803603602081101561047757600080fd5b8101908080359060200190929190505050611135565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104db57600080fd5b50610528600480360360408110156104f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611173565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057657600080fd5b506105c36004803603604081101561058d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c0565b604051808215151515815260200191505060405180910390f35b3480156105e957600080fd5b506105f26113c4565b6040518082815260200191505060405180910390f35b34801561061457600080fd5b5061061d6113ca565b6040518082815260200191505060405180910390f35b34801561063f57600080fd5b506106a26004803603604081101561065657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611433565b005b3480156106b057600080fd5b506106f3600480360360208110156106c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061175f565b6040518082815260200191505060405180910390f35b34801561071557600080fd5b5061071e6117a8565b6040518082815260200191505060405180910390f35b34801561074057600080fd5b506107496117ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079757600080fd5b506107a06117d4565b6040518082815260200191505060405180910390f35b3480156107c257600080fd5b506107cb6118b6565b6040518082815260200191505060405180910390f35b3480156107ed57600080fd5b506107f66118bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561084457600080fd5b5061084d6118e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561088d578082015181840152602081019050610872565b50505050905090810190601f1680156108ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108d457600080fd5b50610917600480360360208110156108eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061191a565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b506109866004803603604081101561095057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611966565b604051808215151515815260200191505060405180910390f35b3480156109ac57600080fd5b506109b5611b68565b6040518082815260200191505060405180910390f35b3480156109d757600080fd5b50610a24600480360360408110156109ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b6e565b604051808215151515815260200191505060405180910390f35b348015610a4a57600080fd5b50610a53611cc7565b6040518082815260200191505060405180910390f35b348015610a7557600080fd5b50610ad860048036036040811015610a8c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf1565b6040518082815260200191505060405180910390f35b348015610afa57600080fd5b50610b03611d78565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b8760048036036020811015610b5b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d9e565b005b348015610b9557600080fd5b50610bd860048036036020811015610bac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612584565b005b6040805190810160405280600881526020017f537570657231303000000000000000000000000000000000000000000000000081525081565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e6d57600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ebb57600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b600081565b600a8181548110151561114457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c6020528160005260406000208181548110151561118e57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008182600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561124f57600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60065481565b600060096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148e57600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600160096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600a8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60016040518082815260200191505060405180910390a35050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4d05df66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561185b57600080fd5b505afa15801561186f573d6000803e3d6000fd5b505050506040513d602081101561188557600080fd5b8101908080519060200190929190505050905080600154670de0b6b3a7640000028115156118af57fe5b0491505090565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f533130300000000000000000000000000000000000000000000000000000000081525081565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156119f357600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60075481565b600081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611bbe57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600354600a805490501015611ce957600a80549050600354039050611cee565b600090505b90565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000611dab6117d4565b9050600354600a805490501015611e63576001925060009150600073ffffffffffffffffffffffffffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e5e57600080fd5b611f45565b8034811515611e6e57fe5b04925060096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115611f3f5760096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505b80830291505b600083111515611f5457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f19350505050158015611f9c573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561225857600073ffffffffffffffffffffffffffffffffffffffff16600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156120cc57600080fd5b83600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600a3390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506122f2565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415156122f157600080fd5b5b8260096000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360006064600654840281151561244757fe5b0490508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612490573d6000803e3d6000fd5b506000606460075485028115156124a357fe5b049050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561250e573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82848703039081150290604051600060405180830381858888f1935050505015801561257b573d6000803e3d6000fd5b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125df57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561261b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820a532a993ce1240cfa4af26e94d31d75f9600e3b5f53cf1d8b80ee827930f239300296080604052348015600f57600080fd5b5060a28061001e6000396000f3fe608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e4d05df6146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600061303990509056fea165627a7a723058203ef217a980add6d100b3b633605c02edc41c7e58de56f1c5d8efa5969f7958110029000000000000000000000000fd2211fca84d335c9a79acc63b0c1cb5a6df9f780000000000000000000000000000000000000000000000000000000000061a8000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000000000000000014000000000000000000000000c919c805879ce779b3e59927c0f2b266ac7939e1000000000000000000000000f86f21030808c9100d7515107d3632d49bdcc192000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a",
  "constructorArguments": "000000000000000000000000fd2211fca84d335c9a79acc63b0c1cb5a6df9f780000000000000000000000000000000000000000000000000000000000061a8000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000000000000000014000000000000000000000000c919c805879ce779b3e59927c0f2b266ac7939e1000000000000000000000000f86f21030808c9100d7515107d3632d49bdcc192000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a"
}