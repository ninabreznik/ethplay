{
  "address": "0x6ff73ee2255c30e072d35598f9b06795122d4e64",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DigitalEnthusiasts",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-22\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) public returns (bool);\n    function totalSupply() constant public returns (uint256 supply);\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n}\n\ncontract DigitalEnthusiasts is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n\n    string public constant name = \"DigitalEnthusiasts\";\n    string public constant symbol = \"GDE\";\n    uint public constant decimals = 18;\n    \n    uint256 public decimalsValue = 1e18;\n    uint256 public totalSupply = 1000000000*decimalsValue;\n    uint256 public totalDistributed = 0;\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    bool public distributionFinished = false;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n    \n    modifier canDistr() {\n        assert(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        assert(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        assert(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function DigitalEnthusiasts() public {\n        owner = msg.sender;\n        distr(owner, 300000000*decimalsValue);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Distr(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n    \n    function () external payable canDistr onlyWhitelist{\n        uint256 toGive = 2000*decimalsValue + 120000*msg.value;\n        if (toGive > totalRemaining) {\n            toGive = totalRemaining;\n        }\n        assert(toGive <= totalRemaining);\n        address investor = msg.sender;\n        distr(investor, toGive);\n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        uint256 etherBalance = this.balance;\n        if (etherBalance > 0) {\n            owner.transfer(etherBalance);\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        assert(_to != address(0));\n        assert(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        assert(_to != address(0));\n        assert(_amount <= balances[_from]);\n        assert(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        assert(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        if (amount > 0) {\n            return token.transfer(owner, amount);\n        }\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "606060405260018054600160a060020a03191633600160a060020a0316179055670de0b6b3a76400006005556b033b2e3c9fd0803ce80000006006819055600060078190556200005e9190640100000000620000c6810262000f211704565b6008556009805460ff1916905534156200007757600080fd5b60018054600160a060020a03191633600160a060020a039081169190911791829055600554620000bf92909116906311e1a30002640100000000620000d98102620005551704565b506200020e565b600082821115620000d357fe5b50900390565b60095460009060ff1615620000ea57fe5b60075462000107908364010000000062000f0b620001f782021704565b60075560085462000127908364010000000062000f21620000c682021704565b600855600160a060020a0383166000908152600260205260409020546200015d908364010000000062000f0b620001f782021704565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b6000828201838110156200020757fe5b9392505050565b610f5f806200021e6000396000f30060606040526004361061010e5763ffffffff60e060020a60003504166306fdde038114610212578063095ea7b31461029c57806318160ddd146102d257806323b872dd146102f7578063313ce5671461031f5780633c6aa9f1146103325780633ccfd60b1461034557806342966c681461035a578063502dadb01461037057806370a08231146103bf57806395d89b41146103de5780639b1cbccc146103f15780639c09c83514610404578063a9059cbb14610453578063c108d54214610475578063c489744b14610488578063d8a54360146104ad578063dd62ed3e146104c0578063e58fc54c146104e5578063efca2eed14610504578063f2fde38b14610517578063f9f92be414610536575b6009546000908190819060ff161561012257fe5b600160a060020a03331660009081526004602052604090205460ff161561014557fe5b346201d4c0026005546107d0020192506008548311156101655760085492505b60085483111561017157fe5b33915061017e8284610555565b5060008311156101ac57600160a060020a0382166000908152600460205260409020805460ff191660011790555b600654600754106101c5576009805460ff191660011790555b50600160a060020a03301631600081111561020d57600154600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561020d57600080fd5b505050005b341561021d57600080fd5b610225610655565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610261578082015183820152602001610249565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102a757600080fd5b6102be600160a060020a036004351660243561068c565b604051901515815260200160405180910390f35b34156102dd57600080fd5b6102e5610737565b60405190815260200160405180910390f35b341561030257600080fd5b6102be600160a060020a036004358116906024351660443561073d565b341561032a57600080fd5b6102e56108c4565b341561033d57600080fd5b6102e56108c9565b341561035057600080fd5b6103586108cf565b005b341561036557600080fd5b610358600435610926565b341561037b57600080fd5b6103586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610a0e95505050505050565b34156103ca57600080fd5b6102e5600160a060020a0360043516610a86565b34156103e957600080fd5b610225610aa1565b34156103fc57600080fd5b6102be610ad8565b341561040f57600080fd5b6103586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610b3f95505050505050565b341561045e57600080fd5b6102be600160a060020a0360043516602435610bb3565b341561048057600080fd5b6102be610cb6565b341561049357600080fd5b6102e5600160a060020a0360043581169060243516610cbf565b34156104b857600080fd5b6102e5610d3c565b34156104cb57600080fd5b6102e5600160a060020a0360043581169060243516610d42565b34156104f057600080fd5b6102be600160a060020a0360043516610d6d565b341561050f57600080fd5b6102e5610e9c565b341561052257600080fd5b610358600160a060020a0360043516610ea2565b341561054157600080fd5b6102be600160a060020a0360043516610ef6565b60095460009060ff161561056557fe5b600754610578908363ffffffff610f0b16565b60075560085461058e908363ffffffff610f2116565b600855600160a060020a0383166000908152600260205260409020546105ba908363ffffffff610f0b16565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b92915050565b60408051908101604052601281527f4469676974616c456e7468757369617374730000000000000000000000000000602082015281565b600081158015906106c15750600160a060020a0333811660009081526003602090815260408083209387168352929052205415155b156106ce5750600061064f565b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b60006060606436101561074c57fe5b600160a060020a038416151561075e57fe5b600160a060020a03851660009081526002602052604090205483111561078057fe5b600160a060020a03808616600090815260036020908152604080832033909416835292905220548311156107b057fe5b600160a060020a0385166000908152600260205260409020546107d9908463ffffffff610f2116565b600160a060020a03808716600090815260026020526040808220939093559086168152205461080e908463ffffffff610f0b16565b600160a060020a03808616600090815260026020908152604080832094909455888316825260038152838220339093168252919091522054610856908463ffffffff610f2116565b600160a060020a03808716600081815260036020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b60055481565b60015460009033600160a060020a039081169116146108ea57fe5b50600154600160a060020a0330811631911681156108fc0282604051600060405180830381858888f19350505050151561092357600080fd5b50565b60015460009033600160a060020a0390811691161461094157fe5b600160a060020a03331660009081526002602052604090205482111561096357fe5b5033600160a060020a0381166000908152600260205260409020546109889083610f21565b600160a060020a0382166000908152600260205260409020556006546109b4908363ffffffff610f2116565b6006556007546109ca908363ffffffff610f2116565b600755600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610a2957fe5b5060005b8151811015610a8257600160046000848481518110610a4857fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610a2d565b5050565b600160a060020a031660009081526002602052604090205490565b60408051908101604052600381527f4744450000000000000000000000000000000000000000000000000000000000602082015281565b60015460009033600160a060020a03908116911614610af357fe5b60095460ff1615610b0057fe5b6009805460ff191660011790557f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a150600190565b60015460009033600160a060020a03908116911614610b5a57fe5b5060005b8151811015610a8257600060046000848481518110610b7957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610b5e565b600060406044361015610bc257fe5b600160a060020a0384161515610bd457fe5b600160a060020a033316600090815260026020526040902054831115610bf657fe5b600160a060020a033316600090815260026020526040902054610c1f908463ffffffff610f2116565b600160a060020a033381166000908152600260205260408082209390935590861681522054610c54908463ffffffff610f0b16565b600160a060020a0380861660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b60095460ff1681565b60008281600160a060020a0382166370a0823185836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d1957600080fd5b6102c65a03f11515610d2a57600080fd5b50505060405180519695505050505050565b60085481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6001546000908190819033600160a060020a03908116911614610d8c57fe5b83915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610de657600080fd5b6102c65a03f11515610df757600080fd5b50505060405180519150506000811115610e9057600154600160a060020a038084169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e6e57600080fd5b6102c65a03f11515610e7f57600080fd5b505050604051805190509250610e95565b600192505b5050919050565b60075481565b60015433600160a060020a03908116911614610eba57fe5b600160a060020a038116156109235760018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b60046020526000908152604090205460ff1681565b600082820183811015610f1a57fe5b9392505050565b600082821115610f2d57fe5b509003905600a165627a7a7230582037bf5b82d405da9b5c452441df2fd5baeddcef065b86363b7932100a5f76c6d60029"
}