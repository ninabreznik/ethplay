{
  "address": "0x3296294a172d541c548819875e027b5fcb3e4a85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TopCoin",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-28\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\n\n\n/**\n * @title Authorizable\n * @dev Allows to authorize access to certain function calls\n *\n * ABI\n * [{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]\n */\ncontract Authorizable {\n\n    address[] authorizers;\n    mapping(address => uint) authorizerIndex;\n\n    /**\n     * @dev Throws if called by any account tat is not authorized.\n     */\n    modifier onlyAuthorized {\n        require(isAuthorized(msg.sender));\n        _;\n    }\n\n    /**\n     * @dev Contructor that authorizes the msg.sender.\n     */\n    function Authorizable() {\n        authorizers.length = 2;\n        authorizers[1] = msg.sender;\n        authorizerIndex[msg.sender] = 1;\n    }\n\n    /**\n     * @dev Function to get a specific authorizer\n     * @param authorizerIndex index of the authorizer to be retrieved.\n     * @return The address of the authorizer.\n     */\n    function getAuthorizer(uint authorizerIndex) external constant returns(address) {\n        return address(authorizers[authorizerIndex + 1]);\n    }\n\n    /**\n     * @dev Function to check if an address is authorized\n     * @param _addr the address to check if it is authorized.\n     * @return boolean flag if address is authorized.\n     */\n    function isAuthorized(address _addr) constant returns(bool) {\n        return authorizerIndex[_addr] > 0;\n    }\n\n    /**\n     * @dev Function to add a new authorizer\n     * @param _addr the address to add as a new authorizer.\n     */\n    function addAuthorized(address _addr) external onlyAuthorized {\n        authorizerIndex[_addr] = authorizers.length;\n        authorizers.length++;\n        authorizers[authorizers.length - 1] = _addr;\n    }\n\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function mul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function assert(bool assertion) internal {\n        require(assertion);\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    function transfer(address to, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint);\n    function transferFrom(address from, address to, uint value);\n    function approve(address spender, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint;\n\n    mapping(address => uint) balances;\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // if (_value > _allowance) throw;\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint _value) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require( ! ((_value != 0) && (allowed[msg.sender][_spender] != 0)) );\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    /**\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint value);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n    uint public totalSupply = 0;\n\n\n    modifier canMint() {\n        require(! mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint _amount) onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() onlyOwner returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n}\n\n\n\n\n\n\n/**\n * @title TopChainToken\n * @dev The main TPC token contract\n *\n * ABI\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\n */\ncontract TopCoin is MintableToken {\n\n    string public name = \"TopCoin\";\n    string public symbol = \"TPC\";\n    uint public decimals = 6;\n\n    bool public tradingStarted = false;\n\n    /**\n     * @dev modifier that throws if trading has not started yet\n     */\n    modifier hasStartedTrading() {\n        require(tradingStarted);\n        _;\n    }\n\n    /**\n     * @dev Allows the owner to enable the trading. This can not be undone\n     */\n    function startTrading() onlyOwner {\n        tradingStarted = true;\n    }\n\n    /**\n     * @dev Allows anyone to transfer the PAY tokens once trading has started\n     * @param _to the recipient address of the tokens.\n     * @param _value number of tokens to be transfered.\n     */\n    function transfer(address _to, uint _value) hasStartedTrading {\n        super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Allows anyone to transfer the PAY tokens once trading has started\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading {\n        super.transferFrom(_from, _to, _value);\n    }\n\n}\n\n\n/**\n * @title TopCoinDistribution\n * @dev The main TPC token sale contract\n *\n * ABI\n */\ncontract TopCoinDistribution is Ownable, Authorizable {\n    using SafeMath for uint;\n    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\n    event AuthorizedCreate(address recipient, uint pay_amount);\n    event TopCoinSaleClosed();\n\n    TopCoin public token = new TopCoin();\n\n    address public multisigVault;\n\n    uint public hardcap = 87500 ether;\n\n    uint public rate = 3600*(10 ** 6); //1 ether : 3600 tpc\n\n    uint totalToken = 2100000000 * (10 ** 6); //tpc\n\n    uint public authorizeMintToken = 210000000 * (10 ** 6); //tpc\n\n    uint public altDeposits = 0; //ether\n\n    uint public start = 1504008000; //new Date(\"Aug 29 2017 20:00:00 GMT+8\").getTime() / 1000;\n\n    address partenersAddress = 0x6F3c01E350509b98665bCcF7c7D88C120C1762ef; //totalToken * 20%\n    address operationAddress = 0xb5B802F753bEe90C969aD27a94Da5C179Eaa3334; //totalToken * 20%\n    address technicalAddress = 0x62C1eC256B7bb10AA53FD4208454E1BFD533b7f0; //totalToken * 30%\n\n    /**\n     * @dev modifier to allow token creation only when the sale IS ON\n     */\n    modifier saleIsOn() {\n        require(now > start && now < start + 28 days);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow token creation only when the hardcap has not been reached\n     */\n    modifier isUnderHardCap() {\n        require(multisigVault.balance + msg.value + altDeposits <= hardcap);\n        _;\n    }\n\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n        size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Allows anyone to create tokens by depositing ether.\n     * @param recipient the recipient to receive tokens.\n     */\n    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\n        require(!isContract(recipient));\n        uint tokens = rate.mul(msg.value).div(1 ether);\n        token.mint(recipient, tokens);\n        require(multisigVault.send(msg.value));\n        TokenSold(recipient, msg.value, tokens, rate);\n    }\n\n    /**\n     * @dev Allows to set the authorize mint token\n     * @param _authorizeMintToken total amount ETH equivalent\n     */\n    function setAuthorizeMintToken(uint _authorizeMintToken) public onlyOwner {\n        authorizeMintToken = _authorizeMintToken;\n    }\n\n    /**\n     * @dev Allows to set the total alt deposit measured in ETH to make sure the hardcap includes other deposits\n     * @param totalAltDeposits total amount ETH equivalent\n     */\n    function setAltDeposit(uint totalAltDeposits) public onlyOwner {\n        altDeposits = totalAltDeposits;\n    }\n\n    /**\n     * @dev set eth : tpc rate\n     * @param _rate eth:tpc rate\n     */\n    function setRate(uint _rate) public onlyOwner {\n        rate = _rate;\n    }\n\n\n    /**\n     * @dev Allows authorized access to create tokens. This is used for Bitcoin and ERC20 deposits\n     * @param recipient the recipient to receive tokens.\n     * @param _tokens number of tokens to be created.\n     */\n    function authorizedCreateTokens(address recipient, uint _tokens) public onlyAuthorized {\n        uint tokens = _tokens * (10 ** 6);\n        uint totalSupply = token.totalSupply();\n        require(totalSupply + tokens <= authorizeMintToken);\n        token.mint(recipient, tokens);\n        AuthorizedCreate(recipient, tokens);\n    }\n\n    /**\n     * @dev Allows the owner to set the hardcap.\n     * @param _hardcap the new hardcap\n     */\n    function setHardCap(uint _hardcap) public onlyOwner {\n        hardcap = _hardcap;\n    }\n\n    /**\n     * @dev Allows the owner to set the starting time.\n     * @param _start the new _start\n     */\n    function setStart(uint _start) public onlyOwner {\n        start = _start;\n    }\n\n    /**\n     * @dev Allows the owner to set the multisig contract.\n     * @param _multisigVault the multisig contract address\n     */\n    function setMultisigVault(address _multisigVault) public onlyOwner {\n        if (_multisigVault != address(0)) {\n            multisigVault = _multisigVault;\n        }\n    }\n\n    /**\n     * @dev Allows the owner to finish the minting. This will create the\n     * restricted tokens and then close the minting.\n     * Then the ownership of the YES token contract is transfered\n     * to this owner.\n     */\n    function finishMinting() public onlyOwner {\n        uint issuedTokenSupply = token.totalSupply();\n        uint partenersTokens = totalToken.mul(20).div(100);\n        uint technicalTokens = totalToken.mul(30).div(100);\n        uint operationTokens = totalToken.mul(20).div(100);\n\n        token.mint(partenersAddress, partenersTokens);\n        token.mint(technicalAddress, technicalTokens);\n        token.mint(operationAddress, operationTokens);\n\n        uint restrictedTokens = totalToken.sub(issuedTokenSupply).sub(partenersTokens).sub(technicalTokens).sub(operationTokens);\n        token.mint(multisigVault, restrictedTokens);\n        token.finishMinting();\n        token.transferOwnership(owner);\n        TopCoinSaleClosed();\n    }\n\n    /**\n     * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\n     * @param _token the contract address of the ERC20 contract\n     */\n    function retrieveTokens(address _token) public onlyOwner {\n        ERC20 token = ERC20(_token);\n        token.transfer(multisigVault, token.balanceOf(this));\n    }\n\n    /**\n     * @dev Fallback function which receives ether and created the appropriate number of tokens for the\n     * msg.sender.\n     */\n    function() external payable {\n        createTokens(msg.sender);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060409081526003805460a060020a60ff021916905560006004558051908101604052600781527f546f70436f696e00000000000000000000000000000000000000000000000000602082015260059080516100609291602001906100da565b5060408051908101604052600381527f5450430000000000000000000000000000000000000000000000000000000000602082015260069080516100a89291602001906100da565b5060066007556008805460ff191690555b60038054600160a060020a03191633600160a060020a03161790555b61017a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011b57805160ff1916838001178555610148565b82800160010185558215610148579182015b8281111561014857825182559160200191906001019061012d565b5b50610155929150610159565b5090565b61017791905b80821115610155576000815560010161015f565b5090565b90565b610b34806101896000396000f300606060405236156100e35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100e857806306fdde031461010f578063095ea7b31461019a57806318160ddd146101be57806323b872dd146101e3578063293230b81461020d578063313ce5671461022257806340c10f19146102475780635b4f472a1461027d57806370a08231146102a45780637d64bcb4146102d55780638da5cb5b146102fc57806395d89b411461032b578063a9059cbb146103b6578063dd62ed3e146103da578063f2fde38b14610411575b600080fd5b34156100f357600080fd5b6100fb610432565b604051901515815260200160405180910390f35b341561011a57600080fd5b610122610453565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f5780820151818401525b602001610146565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a557600080fd5b6101bc600160a060020a03600435166024356104f1565b005b34156101c957600080fd5b6101d1610593565b60405190815260200160405180910390f35b34156101ee57600080fd5b6101bc600160a060020a0360043581169060243516604435610599565b005b341561021857600080fd5b6101bc6105bc565b005b341561022d57600080fd5b6101d16105e8565b60405190815260200160405180910390f35b341561025257600080fd5b6100fb600160a060020a03600435166024356105ee565b604051901515815260200160405180910390f35b341561028857600080fd5b6100fb6106d1565b604051901515815260200160405180910390f35b34156102af57600080fd5b6101d1600160a060020a03600435166106da565b60405190815260200160405180910390f35b34156102e057600080fd5b6100fb6106f9565b604051901515815260200160405180910390f35b341561030757600080fd5b61030f610780565b604051600160a060020a03909116815260200160405180910390f35b341561033657600080fd5b61012261078f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f5780820151818401525b602001610146565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c157600080fd5b6101bc600160a060020a036004351660243561082d565b005b34156103e557600080fd5b6101d1600160a060020a036004358116906024351661084e565b60405190815260200160405180910390f35b341561041c57600080fd5b6101bc600160a060020a036004351661087b565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b505050505081565b80158015906105245750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b1561052e57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60045481565b60085460ff1615156105aa57600080fd5b6105b58383836108d3565b5b5b505050565b60035433600160a060020a039081169116146105d757600080fd5b6008805460ff191660011790555b5b565b60075481565b60035460009033600160a060020a0390811691161461060c57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561063457600080fd5b600454610647908363ffffffff6109f616565b600455600160a060020a038316600090815260016020526040902054610673908363ffffffff6109f616565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b60085460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a0390811691161461071757600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b505050505081565b60085460ff16151561083e57600080fd5b61058f8282610a12565b5b5b5050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461089657600080fd5b600160a060020a038116156108ce576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b6000606060643610156108e557600080fd5b600160a060020a03808616600090815260026020908152604080832033851684528252808320549388168352600190915290205490925061092c908463ffffffff6109f616565b600160a060020a038086166000908152600160205260408082209390935590871681522054610961908463ffffffff610adf16565b600160a060020a03861660009081526001602052604090205561098a828463ffffffff610adf16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b5050505050565b6000828201610a0784821015610af8565b8091505b5092915050565b60406044361015610a2257600080fd5b600160a060020a033316600090815260016020526040902054610a4b908363ffffffff610adf16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a80908363ffffffff6109f616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b5b505050565b6000610aed83831115610af8565b508082035b92915050565b8015156108ce57600080fd5b5b505600a165627a7a7230582069bef92bb5681cd61b9f3ed1d3b3d762cab2f618d2e1ed94927926b074153d250029"
}