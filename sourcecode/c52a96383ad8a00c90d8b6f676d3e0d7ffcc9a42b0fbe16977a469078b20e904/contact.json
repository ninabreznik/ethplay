{
  "address": "0xe272fddbd056240149c771f9fd917fa040dceb39",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PreOrder",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-21\n*/\n\npragma solidity ^0.4.22;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n}\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_account) }\n    return size > 0;\n  }\n\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 _tokenId) internal view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(_exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(_exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n\n\n/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <[email protected]>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (self & 0xffffffffffffffff == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (self & 0xffffffff == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (self & 0xffff == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (self & 0xff == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint256 mask = uint256(-1); // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                uint256 diff = (a & mask) - (b & mask);\n                if (diff != 0)\n                    return int(diff);\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n\ncontract CarFactory is Ownable {\n    using strings for *;\n\n    uint256 public constant MAX_CARS = 30000 + 150000 + 1000000;\n    uint256 public mintedCars = 0;\n    address preOrderAddress;\n    CarToken token;\n\n    mapping(uint256 => uint256) public tankSizes;\n    mapping(uint256 => uint) public savedTypes;\n    mapping(uint256 => bool) public giveawayCar;\n    \n    mapping(uint => uint256[]) public availableIds;\n    mapping(uint => uint256) public idCursor;\n\n    event CarMinted(uint256 _tokenId, string _metadata, uint cType);\n    event CarSellingBeings();\n\n\n\n    modifier onlyPreOrder {\n        require(msg.sender == preOrderAddress, \"Not authorized\");\n        _;\n    }\n\n    modifier isInitialized {\n        require(preOrderAddress != address(0), \"No linked preorder\");\n        require(address(token) != address(0), \"No linked token\");\n        _;\n    }\n\n    function uintToString(uint v) internal pure returns (string) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(48 + remainder);\n        }\n        bytes memory s = new bytes(i); // i + 1 is inefficient\n        for (uint j = 0; j < i; j++) {\n            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\n        }\n        string memory str = string(s);  // memory isn't implicitly convertible to storage\n        return str; // this was missing\n    }\n\n    function mintFor(uint cType, address newOwner) public onlyPreOrder isInitialized returns (uint256) {\n        require(mintedCars < MAX_CARS, \"Factory has minted the max number of cars\");\n        \n        uint256 _tokenId = nextAvailableId(cType);\n        require(!token.exists(_tokenId), \"Token already exists\");\n\n        string memory id = uintToString(_tokenId).toSlice().concat(\".json\".toSlice());\n\n        uint256 tankSize = tankSizes[_tokenId];\n        string memory _metadata = \"https://vault.warriders.com/\".toSlice().concat(id.toSlice());\n\n        token.mint(_tokenId, _metadata, cType, tankSize, newOwner);\n        mintedCars++;\n        \n        return _tokenId;\n    }\n\n    function giveaway(uint256 _tokenId, uint256 _tankSize, uint cType, bool markCar, address dst) public onlyOwner isInitialized {\n        require(dst != address(0), \"No destination address given\");\n        require(!token.exists(_tokenId), \"Token already exists\");\n        require(dst != owner);\n        require(dst != address(this));\n        require(_tankSize <= token.maxTankSizes(cType));\n            \n        tankSizes[_tokenId] = _tankSize;\n        savedTypes[_tokenId] = cType;\n\n        string memory id = uintToString(_tokenId).toSlice().concat(\".json\".toSlice());\n        string memory _metadata = \"https://vault.warriders.com/\".toSlice().concat(id.toSlice());\n\n        token.mint(_tokenId, _metadata, cType, _tankSize, dst);\n        mintedCars++;\n\n        giveawayCar[_tokenId] = markCar;\n    }\n\n    function setTokenMeta(uint256[] _tokenIds, uint256[] ts, uint[] cTypes) public onlyOwner isInitialized {\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            uint cType = cTypes[i];\n            uint256 _tankSize = ts[i];\n\n            require(_tankSize <= token.maxTankSizes(cType));\n            \n            tankSizes[_tokenId] = _tankSize;\n            savedTypes[_tokenId] = cType;\n            \n            \n            availableIds[cTypes[i]].push(_tokenId);\n        }\n    }\n    \n    function nextAvailableId(uint cType) private returns (uint256) {\n        uint256 currentCursor = idCursor[cType];\n        \n        require(currentCursor < availableIds[cType].length);\n        \n        uint256 nextId = availableIds[cType][currentCursor];\n        idCursor[cType] = currentCursor + 1;\n        return nextId;\n    }\n\n    /**\n    Attach the preOrder that will be receiving tokens being marked for sale by the\n    sellCar function\n    */\n    function attachPreOrder(address dst) public onlyOwner {\n        require(preOrderAddress == address(0));\n        require(dst != address(0));\n\n        //Enforce that address is indeed a preorder\n        PreOrder preOrder = PreOrder(dst);\n\n        preOrderAddress = address(preOrder);\n    }\n\n    /**\n    Attach the token being used for things\n    */\n    function attachToken(address dst) public onlyOwner {\n        require(address(token) == address(0));\n        require(dst != address(0));\n\n        //Enforce that address is indeed a preorder\n        CarToken ct = CarToken(dst);\n\n        token = ct;\n    }\n}\n\ncontract CarToken is ERC721Token, Ownable {\n    using strings for *;\n    \n    address factory;\n\n    /*\n    * Car Types:\n    * 0 - Unknown\n    * 1 - SUV\n    * 2 - Truck\n    * 3 - Hovercraft\n    * 4 - Tank\n    * 5 - Lambo\n    * 6 - Buggy\n    * 7 - midgrade type 2\n    * 8 - midgrade type 3\n    * 9 - Hatchback\n    * 10 - regular type 2\n    * 11 - regular type 3\n    */\n    uint public constant UNKNOWN_TYPE = 0;\n    uint public constant SUV_TYPE = 1;\n    uint public constant TANKER_TYPE = 2;\n    uint public constant HOVERCRAFT_TYPE = 3;\n    uint public constant TANK_TYPE = 4;\n    uint public constant LAMBO_TYPE = 5;\n    uint public constant DUNE_BUGGY = 6;\n    uint public constant MIDGRADE_TYPE2 = 7;\n    uint public constant MIDGRADE_TYPE3 = 8;\n    uint public constant HATCHBACK = 9;\n    uint public constant REGULAR_TYPE2 = 10;\n    uint public constant REGULAR_TYPE3 = 11;\n    \n    string public constant METADATA_URL = \"https://vault.warriders.com/\";\n    \n    //Number of premium type cars\n    uint public PREMIUM_TYPE_COUNT = 5;\n    //Number of midgrade type cars\n    uint public MIDGRADE_TYPE_COUNT = 3;\n    //Number of regular type cars\n    uint public REGULAR_TYPE_COUNT = 3;\n\n    mapping(uint256 => uint256) public maxBznTankSizeOfPremiumCarWithIndex;\n    mapping(uint256 => uint256) public maxBznTankSizeOfMidGradeCarWithIndex;\n    mapping(uint256 => uint256) public maxBznTankSizeOfRegularCarWithIndex;\n\n    /**\n     * Whether any given car (tokenId) is special\n     */\n    mapping(uint256 => bool) public isSpecial;\n    /**\n     * The type of any given car (tokenId)\n     */\n    mapping(uint256 => uint) public carType;\n    /**\n     * The total supply for any given type (int)\n     */\n    mapping(uint => uint256) public carTypeTotalSupply;\n    /**\n     * The current supply for any given type (int)\n     */\n    mapping(uint => uint256) public carTypeSupply;\n    /**\n     * Whether any given type (int) is special\n     */\n    mapping(uint => bool) public isTypeSpecial;\n\n    /**\n    * How much BZN any given car (tokenId) can hold\n    */\n    mapping(uint256 => uint256) public tankSizes;\n    \n    /**\n     * Given any car type (uint), get the max tank size for that type (uint256)\n     */\n    mapping(uint => uint256) public maxTankSizes;\n    \n    mapping (uint => uint[]) public premiumTotalSupplyForCar;\n    mapping (uint => uint[]) public midGradeTotalSupplyForCar;\n    mapping (uint => uint[]) public regularTotalSupplyForCar;\n\n    modifier onlyFactory {\n        require(msg.sender == factory, \"Not authorized\");\n        _;\n    }\n\n    constructor(address factoryAddress) public ERC721Token(\"WarRiders\", \"WR\") {\n        factory = factoryAddress;\n\n        carTypeTotalSupply[UNKNOWN_TYPE] = 0; //Unknown\n        carTypeTotalSupply[SUV_TYPE] = 20000; //SUV\n        carTypeTotalSupply[TANKER_TYPE] = 9000; //Tanker\n        carTypeTotalSupply[HOVERCRAFT_TYPE] = 600; //Hovercraft\n        carTypeTotalSupply[TANK_TYPE] = 300; //Tank\n        carTypeTotalSupply[LAMBO_TYPE] = 100; //Lambo\n        carTypeTotalSupply[DUNE_BUGGY] = 40000; //migrade type 1\n        carTypeTotalSupply[MIDGRADE_TYPE2] = 50000; //midgrade type 2\n        carTypeTotalSupply[MIDGRADE_TYPE3] = 60000; //midgrade type 3\n        carTypeTotalSupply[HATCHBACK] = 200000; //regular type 1\n        carTypeTotalSupply[REGULAR_TYPE2] = 300000; //regular type 2\n        carTypeTotalSupply[REGULAR_TYPE3] = 500000; //regular type 3\n        \n        maxTankSizes[SUV_TYPE] = 200; //SUV tank size\n        maxTankSizes[TANKER_TYPE] = 450; //Tanker tank size\n        maxTankSizes[HOVERCRAFT_TYPE] = 300; //Hovercraft tank size\n        maxTankSizes[TANK_TYPE] = 200; //Tank tank size\n        maxTankSizes[LAMBO_TYPE] = 250; //Lambo tank size\n        maxTankSizes[DUNE_BUGGY] = 120; //migrade type 1 tank size\n        maxTankSizes[MIDGRADE_TYPE2] = 110; //midgrade type 2 tank size\n        maxTankSizes[MIDGRADE_TYPE3] = 100; //midgrade type 3 tank size\n        maxTankSizes[HATCHBACK] = 90; //regular type 1 tank size\n        maxTankSizes[REGULAR_TYPE2] = 70; //regular type 2 tank size\n        maxTankSizes[REGULAR_TYPE3] = 40; //regular type 3 tank size\n        \n        maxBznTankSizeOfPremiumCarWithIndex[1] = 200; //SUV tank size\n        maxBznTankSizeOfPremiumCarWithIndex[2] = 450; //Tanker tank size\n        maxBznTankSizeOfPremiumCarWithIndex[3] = 300; //Hovercraft tank size\n        maxBznTankSizeOfPremiumCarWithIndex[4] = 200; //Tank tank size\n        maxBznTankSizeOfPremiumCarWithIndex[5] = 250; //Lambo tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[1] = 100; //migrade type 1 tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[2] = 110; //midgrade type 2 tank size\n        maxBznTankSizeOfMidGradeCarWithIndex[3] = 120; //midgrade type 3 tank size\n        maxBznTankSizeOfRegularCarWithIndex[1] = 40; //regular type 1 tank size\n        maxBznTankSizeOfRegularCarWithIndex[2] = 70; //regular type 2 tank size\n        maxBznTankSizeOfRegularCarWithIndex[3] = 90; //regular type 3 tank size\n\n        isTypeSpecial[HOVERCRAFT_TYPE] = true;\n        isTypeSpecial[TANK_TYPE] = true;\n        isTypeSpecial[LAMBO_TYPE] = true;\n    }\n\n    function isCarSpecial(uint256 tokenId) public view returns (bool) {\n        return isSpecial[tokenId];\n    }\n\n    function getCarType(uint256 tokenId) public view returns (uint) {\n        return carType[tokenId];\n    }\n\n    function mint(uint256 _tokenId, string _metadata, uint cType, uint256 tankSize, address newOwner) public onlyFactory {\n        //Since any invalid car type would have a total supply of 0 \n        //This require will also enforce that a valid cType is given\n        require(carTypeSupply[cType] < carTypeTotalSupply[cType], \"This type has reached total supply\");\n        \n        //This will enforce the tank size is less than the max\n        require(tankSize <= maxTankSizes[cType], \"Tank size provided bigger than max for this type\");\n        \n        if (isPremium(cType)) {\n            premiumTotalSupplyForCar[cType].push(_tokenId);\n        } else if (isMidGrade(cType)) {\n            midGradeTotalSupplyForCar[cType].push(_tokenId);\n        } else {\n            regularTotalSupplyForCar[cType].push(_tokenId);\n        }\n\n        super._mint(newOwner, _tokenId);\n        super._setTokenURI(_tokenId, _metadata);\n\n        carType[_tokenId] = cType;\n        isSpecial[_tokenId] = isTypeSpecial[cType];\n        carTypeSupply[cType] = carTypeSupply[cType] + 1;\n        tankSizes[_tokenId] = tankSize;\n    }\n    \n    function isPremium(uint cType) public pure returns (bool) {\n        return cType == SUV_TYPE || cType == TANKER_TYPE || cType == HOVERCRAFT_TYPE || cType == TANK_TYPE || cType == LAMBO_TYPE;\n    }\n    \n    function isMidGrade(uint cType) public pure returns (bool) {\n        return cType == DUNE_BUGGY || cType == MIDGRADE_TYPE2 || cType == MIDGRADE_TYPE3;\n    }\n    \n    function isRegular(uint cType) public pure returns (bool) {\n        return cType == HATCHBACK || cType == REGULAR_TYPE2 || cType == REGULAR_TYPE3;\n    }\n    \n    function getTotalSupplyForType(uint cType) public view returns (uint256) {\n        return carTypeSupply[cType];\n    }\n    \n    function getPremiumCarsForVariant(uint variant) public view returns (uint[]) {\n        return premiumTotalSupplyForCar[variant];\n    }\n    \n    function getMidgradeCarsForVariant(uint variant) public view returns (uint[]) {\n        return midGradeTotalSupplyForCar[variant];\n    }\n\n    function getRegularCarsForVariant(uint variant) public view returns (uint[]) {\n        return regularTotalSupplyForCar[variant];\n    }\n\n    function getPremiumCarSupply(uint variant) public view returns (uint) {\n        return premiumTotalSupplyForCar[variant].length;\n    }\n    \n    function getMidgradeCarSupply(uint variant) public view returns (uint) {\n        return midGradeTotalSupplyForCar[variant].length;\n    }\n\n    function getRegularCarSupply(uint variant) public view returns (uint) {\n        return regularTotalSupplyForCar[variant].length;\n    }\n    \n    function exists(uint256 _tokenId) public view returns (bool) {\n        return super._exists(_tokenId);\n    }\n}\n\ncontract PreOrder is Destructible {\n    /**\n     * The current price for any given type (int)\n     */\n    mapping(uint => uint256) public currentTypePrice;\n\n    // Maps Premium car variants to the tokens minted for their description\n    // INPUT: variant #\n    // OUTPUT: list of cars\n    mapping(uint => uint256[]) public premiumCarsBought;\n    mapping(uint => uint256[]) public midGradeCarsBought;\n    mapping(uint => uint256[]) public regularCarsBought;\n    mapping(uint256 => address) public tokenReserve;\n\n    event consumerBulkBuy(uint256[] variants, address reserver, uint category);\n    event CarBought(uint256 carId, uint256 value, address purchaser, uint category);\n    event Withdrawal(uint256 amount);\n\n    uint256 public constant COMMISSION_PERCENT = 5;\n\n    //Max number of premium cars\n    uint256 public constant MAX_PREMIUM = 30000;\n    //Max number of midgrade cars\n    uint256 public constant MAX_MIDGRADE = 150000;\n    //Max number of regular cars\n    uint256 public constant MAX_REGULAR = 1000000;\n\n    //Max number of premium type cars\n    uint public PREMIUM_TYPE_COUNT = 5;\n    //Max number of midgrade type cars\n    uint public MIDGRADE_TYPE_COUNT = 3;\n    //Max number of regular type cars\n    uint public REGULAR_TYPE_COUNT = 3;\n\n    uint private midgrade_offset = 5;\n    uint private regular_offset = 6;\n\n    uint256 public constant GAS_REQUIREMENT = 250000;\n\n    //Premium type id\n    uint public constant PREMIUM_CATEGORY = 1;\n    //Midgrade type id\n    uint public constant MID_GRADE_CATEGORY = 2;\n    //Regular type id\n    uint public constant REGULAR_CATEGORY = 3;\n    \n    mapping(address => uint256) internal commissionRate;\n    \n    address internal constant OPENSEA = 0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\n\n    //The percent increase for any given type\n    mapping(uint => uint256) internal percentIncrease;\n    mapping(uint => uint256) internal percentBase;\n    //uint public constant PERCENT_INCREASE = 101;\n\n    //How many car is in each category currently\n    uint256 public premiumHold = 30000;\n    uint256 public midGradeHold = 150000;\n    uint256 public regularHold = 1000000;\n\n    bool public premiumOpen = false;\n    bool public midgradeOpen = false;\n    bool public regularOpen = false;\n\n    //Reference to other contracts\n    CarToken public token;\n    //AuctionManager public auctionManager;\n    CarFactory internal factory;\n\n    address internal escrow;\n\n    modifier premiumIsOpen {\n        //Ensure we are selling at least 1 car\n        require(premiumHold > 0, \"No more premium cars\");\n        require(premiumOpen, \"Premium store not open for sale\");\n        _;\n    }\n\n    modifier midGradeIsOpen {\n        //Ensure we are selling at least 1 car\n        require(midGradeHold > 0, \"No more midgrade cars\");\n        require(midgradeOpen, \"Midgrade store not open for sale\");\n        _;\n    }\n\n    modifier regularIsOpen {\n        //Ensure we are selling at least 1 car\n        require(regularHold > 0, \"No more regular cars\");\n        require(regularOpen, \"Regular store not open for sale\");\n        _;\n    }\n\n    modifier onlyFactory {\n        //Only factory can use this function\n        require(msg.sender == address(factory), \"Not authorized\");\n        _;\n    }\n\n    modifier onlyFactoryOrOwner {\n        //Only factory or owner can use this function\n        require(msg.sender == address(factory) || msg.sender == owner, \"Not authorized\");\n        _;\n    }\n\n    function() public payable { }\n\n    constructor(\n        address tokenAddress,\n        address tokenFactory,\n        address e\n    ) public {\n        token = CarToken(tokenAddress);\n\n        factory = CarFactory(tokenFactory);\n\n        escrow = e;\n\n        //Set percent increases\n        percentIncrease[1] = 100008;\n        percentBase[1] = 100000;\n        percentIncrease[2] = 100015;\n        percentBase[2] = 100000;\n        percentIncrease[3] = 1002;\n        percentBase[3] = 1000;\n        percentIncrease[4] = 1004;\n        percentBase[4] = 1000;\n        percentIncrease[5] = 102;\n        percentBase[5] = 100;\n        \n        commissionRate[OPENSEA] = 10;\n    }\n    \n    function setCommission(address referral, uint256 percent) public onlyOwner {\n        require(percent > COMMISSION_PERCENT);\n        require(percent < 95);\n        percent = percent - COMMISSION_PERCENT;\n        \n        commissionRate[referral] = percent;\n    }\n    \n    function setPercentIncrease(uint256 increase, uint256 base, uint cType) public onlyOwner {\n        require(increase > base);\n        \n        percentIncrease[cType] = increase;\n        percentBase[cType] = base;\n    }\n\n    function openShop(uint category) public onlyOwner {\n        require(category == 1 || category == 2 || category == 3, \"Invalid category\");\n\n        if (category == PREMIUM_CATEGORY) {\n            premiumOpen = true;\n        } else if (category == MID_GRADE_CATEGORY) {\n            midgradeOpen = true;\n        } else if (category == REGULAR_CATEGORY) {\n            regularOpen = true;\n        }\n    }\n\n    /**\n     * Set the starting price for any given type. Can only be set once, and value must be greater than 0\n     */\n    function setTypePrice(uint cType, uint256 price) public onlyOwner {\n        if (currentTypePrice[cType] == 0) {\n            require(price > 0, \"Price already set\");\n            currentTypePrice[cType] = price;\n        }\n    }\n\n    /**\n    Withdraw the amount from the contract's balance. Only the contract owner can execute this function\n    */\n    function withdraw(uint256 amount) public onlyOwner {\n        uint256 balance = address(this).balance;\n\n        require(amount <= balance, \"Requested to much\");\n        owner.transfer(amount);\n\n        emit Withdrawal(amount);\n    }\n\n    function reserveManyTokens(uint[] cTypes, uint category) public payable returns (bool) {\n        if (category == PREMIUM_CATEGORY) {\n            require(premiumOpen, \"Premium is not open for sale\");\n        } else if (category == MID_GRADE_CATEGORY) {\n            require(midgradeOpen, \"Midgrade is not open for sale\");\n        } else if (category == REGULAR_CATEGORY) {\n            require(regularOpen, \"Regular is not open for sale\");\n        } else {\n            revert();\n        }\n\n        address reserver = msg.sender;\n\n        uint256 ether_required = 0;\n        for (uint i = 0; i < cTypes.length; i++) {\n            uint cType = cTypes[i];\n\n            uint256 price = priceFor(cType);\n\n            ether_required += (price + GAS_REQUIREMENT);\n\n            currentTypePrice[cType] = price;\n        }\n\n        require(msg.value >= ether_required);\n\n        uint256 refundable = msg.value - ether_required;\n\n        escrow.transfer(ether_required);\n\n        if (refundable > 0) {\n            reserver.transfer(refundable);\n        }\n\n        emit consumerBulkBuy(cTypes, reserver, category);\n    }\n\n     function buyBulkPremiumCar(address referal, uint[] variants, address new_owner) public payable premiumIsOpen returns (bool) {\n         uint n = variants.length;\n         require(n <= 10, \"Max bulk buy is 10 cars\");\n\n         for (uint i = 0; i < n; i++) {\n             buyCar(referal, variants[i], false, new_owner, PREMIUM_CATEGORY);\n         }\n     }\n\n     function buyBulkMidGradeCar(address referal, uint[] variants, address new_owner) public payable midGradeIsOpen returns (bool) {\n         uint n = variants.length;\n         require(n <= 10, \"Max bulk buy is 10 cars\");\n\n         for (uint i = 0; i < n; i++) {\n             buyCar(referal, variants[i], false, new_owner, MID_GRADE_CATEGORY);\n         }\n     }\n\n     function buyBulkRegularCar(address referal, uint[] variants, address new_owner) public payable regularIsOpen returns (bool) {\n         uint n = variants.length;\n         require(n <= 10, \"Max bulk buy is 10 cars\");\n\n         for (uint i = 0; i < n; i++) {\n             buyCar(referal, variants[i], false, new_owner, REGULAR_CATEGORY);\n         }\n     }\n\n    function buyCar(address referal, uint cType, bool give_refund, address new_owner, uint category) public payable returns (bool) {\n        require(category == PREMIUM_CATEGORY || category == MID_GRADE_CATEGORY || category == REGULAR_CATEGORY);\n        if (category == PREMIUM_CATEGORY) {\n            require(cType == 1 || cType == 2 || cType == 3 || cType == 4 || cType == 5, \"Invalid car type\");\n            require(premiumHold > 0, \"No more premium cars\");\n            require(premiumOpen, \"Premium store not open for sale\");\n        } else if (category == MID_GRADE_CATEGORY) {\n            require(cType == 6 || cType == 7 || cType == 8, \"Invalid car type\");\n            require(midGradeHold > 0, \"No more midgrade cars\");\n            require(midgradeOpen, \"Midgrade store not open for sale\");\n        } else if (category == REGULAR_CATEGORY) {\n            require(cType == 9 || cType == 10 || cType == 11, \"Invalid car type\");\n            require(regularHold > 0, \"No more regular cars\");\n            require(regularOpen, \"Regular store not open for sale\");\n        }\n\n        uint256 price = priceFor(cType);\n        require(price > 0, \"Price not yet set\");\n        require(msg.value >= price, \"Not enough ether sent\");\n        /*if (tokenReserve[_tokenId] != address(0)) {\n            require(new_owner == tokenReserve[_tokenId], \"You don't have the rights to buy this token\");\n        }*/\n        currentTypePrice[cType] = price; //Set new type price\n\n        uint256 _tokenId = factory.mintFor(cType, new_owner); //Now mint the token\n        \n        if (category == PREMIUM_CATEGORY) {\n            premiumCarsBought[cType].push(_tokenId);\n            premiumHold--;\n        } else if (category == MID_GRADE_CATEGORY) {\n            midGradeCarsBought[cType - 5].push(_tokenId);\n            midGradeHold--;\n        } else if (category == REGULAR_CATEGORY) {\n            regularCarsBought[cType - 8].push(_tokenId);\n            regularHold--;\n        }\n\n        if (give_refund && msg.value > price) {\n            uint256 change = msg.value - price;\n\n            msg.sender.transfer(change);\n        }\n\n        if (referal != address(0)) {\n            require(referal != msg.sender, \"The referal cannot be the sender\");\n            require(referal != tx.origin, \"The referal cannot be the tranaction origin\");\n            require(referal != new_owner, \"The referal cannot be the new owner\");\n\n            //The commissionRate map adds any partner bonuses, or 0 if a normal user referral\n            uint256 totalCommision = COMMISSION_PERCENT + commissionRate[referal];\n\n            uint256 commision = (price * totalCommision) / 100;\n\n            referal.transfer(commision);\n        }\n\n        emit CarBought(_tokenId, price, new_owner, category);\n    }\n\n    /**\n    Get the price for any car with the given _tokenId\n    */\n    function priceFor(uint cType) public view returns (uint256) {\n        uint256 percent = percentIncrease[cType];\n        uint256 base = percentBase[cType];\n\n        uint256 currentPrice = currentTypePrice[cType];\n        uint256 nextPrice = (currentPrice * percent);\n\n        //Return the next price, as this is the true price\n        return nextPrice / base;\n    }\n\n    function sold(uint256 _tokenId) public view returns (bool) {\n        return token.exists(_tokenId);\n    }\n}",
  "bytecode": "60806040526005600681815560036007819055600855600991909155600a55617530600e55620249f0600f55620f42406010556011805462ffffff1916905534801561004a57600080fd5b50604051606080611f698339810160409081528151602080840151929093015160008054600160a060020a03199081163317825560118054600160a060020a03958616630100000002630100000060b860020a03199091161790556012805495851695821695909517909455601380549390921692909316919091179055620186a87fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c55620186a07ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c5819055620186af7f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd720557f10a81eed9d63d16face5e76357905348e6253d3394086026bb2bf2145d7cc249556103ea7fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd7556103e87f26b4a10d0f0b04925c23bd4480ee147c916e5e87a7d68206a533dad160ac81e28190556103ec7f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab8097557fafafe8948a4ed9d478b1e9a5780b119b5edd00ea7d07bc35bef7c814824eb94b5560667f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa65560647fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd214955735b3256965e7c3cf26e11fcaf296dfc8807c010739052600b9052600a7ff2d65821f8e72b8d2f20ddb68bdc750775322350fa13862067b34299630e0f4355611ce2806102876000396000f3006080604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303ef03b481146101ef5780630d14ed4f146102645780631dbdd7921461027957806328a5e6f0146102a05780632d6e2bb0146102b55780632dbacf5f146102ca5780632e1a7d4d146102df578063300240d6146102f757806331729a451461030c57806335fe36601461033057806345b6ccfd1461034557806346a2b53e1461035a5780634cdabb161461036f5780634cf52fa2146103845780634d6c3427146103e55780636dac8bea146103fa578063715018a61461040f57806383197ef0146104245780638ab5fcc5146104395780638bad8d8e146104545780638d5555f21461049e5780638da5cb5b146104b657806390e563b3146104e75780639a8b0ce0146104ff5780639c03facb1461051a578063b404e00114610532578063b7d6f43214610547578063b91e34221461056e578063b9293e3314610583578063bfe3e03a1461059e578063ca5b8a52146105b3578063cf5ab68b146105c8578063d2b001fb146105e3578063deb5bf0b146105f8578063e2fa9ee014610610578063f2fde38b14610628578063f32e803814610649578063f5074f4114610667578063fc0c546a14610688578063fe9d744d1461069d575b005b604080516020600460248035828101358481028087018601909752808652610250968435600160a060020a03169636966044959194909101929182918501908490808284375094975050509235600160a060020a031693506106fe92505050565b604080519115158252519081900360200190f35b34801561027057600080fd5b50610250610860565b34801561028557600080fd5b5061028e61086e565b60408051918252519081900360200190f35b3480156102ac57600080fd5b50610250610874565b3480156102c157600080fd5b5061028e610883565b3480156102d657600080fd5b50610250610889565b3480156102eb57600080fd5b506101ed600435610892565b34801561030357600080fd5b5061028e610976565b34801561031857600080fd5b506101ed600160a060020a036004351660243561097d565b34801561033c57600080fd5b5061028e6109d1565b34801561035157600080fd5b5061028e6109d6565b34801561036657600080fd5b5061028e6109dd565b34801561037b57600080fd5b5061028e6109e4565b604080516020600460248035828101358481028087018601909752808652610250968435600160a060020a03169636966044959194909101929182918501908490808284375094975050509235600160a060020a031693506109ea92505050565b3480156103f157600080fd5b5061028e610b3e565b34801561040657600080fd5b5061028e610b44565b34801561041b57600080fd5b506101ed610b49565b34801561043057600080fd5b506101ed610bb5565b34801561044557600080fd5b506101ed600435602435610bda565b60408051602060048035808201358381028086018501909652808552610250953695939460249493850192918291850190849080828437509497505093359450610c749350505050565b3480156104aa57600080fd5b5061028e600435610f54565b3480156104c257600080fd5b506104cb610f93565b60408051600160a060020a039092168252519081900360200190f35b3480156104f357600080fd5b506104cb600435610fa2565b34801561050b57600080fd5b5061028e600435602435610fbd565b34801561052657600080fd5b50610250600435610fed565b34801561053e57600080fd5b5061028e61108c565b610250600160a060020a036004358116906024359060443515159060643516608435611091565b34801561057a57600080fd5b5061028e611907565b34801561058f57600080fd5b5061028e60043560243561190d565b3480156105aa57600080fd5b5061028e611928565b3480156105bf57600080fd5b5061028e61192e565b3480156105d457600080fd5b5061028e600435602435611933565b3480156105ef57600080fd5b5061028e61194e565b34801561060457600080fd5b5061028e600435611954565b34801561061c57600080fd5b506101ed600435611966565b34801561063457600080fd5b506101ed600160a060020a0360043516611a43565b34801561065557600080fd5b506101ed600435602435604435611a63565b34801561067357600080fd5b506101ed600160a060020a0360043516611aa6565b34801561069457600080fd5b506104cb611ac9565b604080516020600460248035828101358481028087018601909752808652610250968435600160a060020a03169636966044959194909101929182918501908490808284375094975050509235600160a060020a03169350611adf92505050565b600080600080600f5411151561075e576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206d6f7265206d6964677261646520636172730000000000000000000000604482015290519081900360640190fd5b601154610100900460ff1615156107bf576040805160e560020a62461bcd02815260206004820181905260248201527f4d696467726164652073746f7265206e6f74206f70656e20666f722073616c65604482015290519081900360640190fd5b84519150600a82111561081c576040805160e560020a62461bcd02815260206004820152601760248201527f4d61782062756c6b206275792069732031302063617273000000000000000000604482015290519081900360640190fd5b5060005b818110156108575761084e86868381518110151561083a57fe5b906020019060200201516000876002611091565b50600101610820565b50509392505050565b601154610100900460ff1681565b60075481565b60115462010000900460ff1681565b60105481565b60115460ff1681565b60008054600160a060020a031633146108aa57600080fd5b50303180821115610905576040805160e560020a62461bcd02815260206004820152601160248201527f52657175657374656420746f206d756368000000000000000000000000000000604482015290519081900360640190fd5b60008054604051600160a060020a039091169184156108fc02918591818181858888f1935050505015801561093e573d6000803e3d6000fd5b506040805183815290517f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de79181900360200190a15050565b620f424081565b600054600160a060020a0316331461099457600080fd5b600581116109a157600080fd5b605f81106109ae57600080fd5b600160a060020a039091166000908152600b602052604090206004199091019055565b600281565b620249f081565b6203d09081565b61753081565b600080600080600e54111515610a4a576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f206d6f7265207072656d69756d2063617273000000000000000000000000604482015290519081900360640190fd5b60115460ff161515610aa6576040805160e560020a62461bcd02815260206004820152601f60248201527f5072656d69756d2073746f7265206e6f74206f70656e20666f722073616c6500604482015290519081900360640190fd5b84519150600a821115610b03576040805160e560020a62461bcd02815260206004820152601760248201527f4d61782062756c6b206275792069732031302063617273000000000000000000604482015290519081900360640190fd5b5060005b8181101561085757610b35868683815181101515610b2157fe5b906020019060200201516000876001611091565b50600101610b07565b60085481565b600181565b600054600160a060020a03163314610b6057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610bcc57600080fd5b600054600160a060020a0316ff5b600054600160a060020a03163314610bf157600080fd5b6000828152600160205260409020541515610c705760008111610c5e576040805160e560020a62461bcd02815260206004820152601160248201527f507269636520616c726561647920736574000000000000000000000000000000604482015290519081900360640190fd5b60008281526001602052604090208190555b5050565b60008060008060008060006001881415610ce95760115460ff161515610ce4576040805160e560020a62461bcd02815260206004820152601c60248201527f5072656d69756d206973206e6f74206f70656e20666f722073616c6500000000604482015290519081900360640190fd5b610dc3565b6002881415610d5357601154610100900460ff161515610ce4576040805160e560020a62461bcd02815260206004820152601d60248201527f4d69646772616465206973206e6f74206f70656e20666f722073616c65000000604482015290519081900360640190fd5b6003881415610dbe5760115462010000900460ff161515610ce4576040805160e560020a62461bcd02815260206004820152601c60248201527f526567756c6172206973206e6f74206f70656e20666f722073616c6500000000604482015290519081900360640190fd5b600080fd5b33955060009450600093505b8851841015610e24578884815181101515610de657fe5b906020019060200201519250610dfb83610f54565b60008481526001602081905260409091208290559581016203d090019594909401939150610dcf565b34851115610e3157600080fd5b506013546040513486900391600160a060020a03169086156108fc029087906000818181858888f19350505050158015610e6f573d6000803e3d6000fd5b506000811115610eb157604051600160a060020a0387169082156108fc029083906000818181858888f19350505050158015610eaf573d6000803e3d6000fd5b505b7fe7fcfd53b35dc3cd28f6fbedac8299e4dd5dfc503f623849f21e1b646e78287a89878a604051808060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610f33578181015183820152602001610f1b565b5050505090500194505050505060405180910390a150505050505092915050565b6000818152600c6020908152604080832054600d8352818420546001909352908320549091908083028281811515610f8857fe5b049695505050505050565b600054600160a060020a031681565b600560205260009081526040902054600160a060020a031681565b600460205281600052604060002081815481101515610fd857fe5b90600052602060002001600091509150505481565b601154604080517f4f558e7900000000000000000000000000000000000000000000000000000000815260048101849052905160009263010000009004600160a060020a031691634f558e7991602480830192602092919082900301818787803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b505050506040513d602081101561108457600080fd5b505192915050565b600581565b60008060008060008060018714806110a95750600287145b806110b45750600387145b15156110bf57600080fd5b60018714156112095789600114806110d75750896002145b806110e25750896003145b806110ed5750896004145b806110f85750896005145b151561114e576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c696420636172207479706500000000000000000000000000000000604482015290519081900360640190fd5b600e546000106111a8576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f206d6f7265207072656d69756d2063617273000000000000000000000000604482015290519081900360640190fd5b60115460ff161515611204576040805160e560020a62461bcd02815260206004820152601f60248201527f5072656d69756d2073746f7265206e6f74206f70656e20666f722073616c6500604482015290519081900360640190fd5b611472565b600287141561133d5789600614806112215750896007145b8061122c5750896008145b1515611282576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c696420636172207479706500000000000000000000000000000000604482015290519081900360640190fd5b600f546000106112dc576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206d6f7265206d6964677261646520636172730000000000000000000000604482015290519081900360640190fd5b601154610100900460ff161515611204576040805160e560020a62461bcd02815260206004820181905260248201527f4d696467726164652073746f7265206e6f74206f70656e20666f722073616c65604482015290519081900360640190fd5b6003871415611472578960091480611355575089600a145b80611360575089600b145b15156113b6576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c696420636172207479706500000000000000000000000000000000604482015290519081900360640190fd5b601054600010611410576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f206d6f726520726567756c61722063617273000000000000000000000000604482015290519081900360640190fd5b60115462010000900460ff161515611472576040805160e560020a62461bcd02815260206004820152601f60248201527f526567756c61722073746f7265206e6f74206f70656e20666f722073616c6500604482015290519081900360640190fd5b61147b8a610f54565b9450600085116114d5576040805160e560020a62461bcd02815260206004820152601160248201527f5072696365206e6f742079657420736574000000000000000000000000000000604482015290519081900360640190fd5b3485111561152d576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f7420656e6f7567682065746865722073656e740000000000000000000000604482015290519081900360640190fd5b60008a815260016020908152604080832088905560125481517fad62f1ca000000000000000000000000000000000000000000000000000000008152600481018f9052600160a060020a038d811660248301529251929091169363ad62f1ca9360448084019491939192918390030190829087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b505050506040513d60208110156115d857600080fd5b5051935060018714156116155760008a815260026020908152604082208054600181018255908352912001849055600e805460001901905561168d565b6002871415611653576004198a01600090815260036020908152604082208054600181018255908352912001849055600f805460001901905561168d565b600387141561168d576007198a01600090815260046020908152604082208054600181018255908352912001849055601080546000190190555b88801561169957508434115b156116d357604051348690039350339084156108fc029085906000818181858888f193505050501580156116d1573d6000803e3d6000fd5b505b600160a060020a038b16156118aa57600160a060020a038b16331415611743576040805160e560020a62461bcd02815260206004820181905260248201527f546865207265666572616c2063616e6e6f74206265207468652073656e646572604482015290519081900360640190fd5b600160a060020a038b163214156117ca576040805160e560020a62461bcd02815260206004820152602b60248201527f546865207265666572616c2063616e6e6f7420626520746865207472616e616360448201527f74696f6e206f726967696e000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038b81169089161415611854576040805160e560020a62461bcd02815260206004820152602360248201527f546865207265666572616c2063616e6e6f7420626520746865206e6577206f7760448201527f6e65720000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5050600160a060020a0389166000818152600b602052604080822054905160059091019260648785020492909183156108fc0291849190818181858888f193505050501580156118a8573d6000803e3d6000fd5b505b6040805185815260208101879052600160a060020a038a16818301526060810189905290517f40f9951671cfd039715478cc01395832fea6d3f8a84ea788d189363d59a798ac9181900360800190a1505050505095945050505050565b600e5481565b600260205281600052604060002081815481101515610fd857fe5b600f5481565b600381565b600360205281600052604060002081815481101515610fd857fe5b60065481565b60016020526000908152604090205481565b600054600160a060020a0316331461197d57600080fd5b806001148061198c5750806002145b806119975750806003145b15156119ed576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c69642063617465676f727900000000000000000000000000000000604482015290519081900360640190fd5b6001811415611a08576011805460ff19166001179055611a40565b6002811415611a25576011805461ff001916610100179055611a40565b6003811415611a40576011805462ff00001916620100001790555b50565b600054600160a060020a03163314611a5a57600080fd5b611a4081611c39565b600054600160a060020a03163314611a7a57600080fd5b818311611a8657600080fd5b6000908152600c6020908152604080832094909455600d90529190912055565b600054600160a060020a03163314611abd57600080fd5b80600160a060020a0316ff5b60115463010000009004600160a060020a031681565b600080600080601054111515611b3f576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f206d6f726520726567756c61722063617273000000000000000000000000604482015290519081900360640190fd5b60115462010000900460ff161515611ba1576040805160e560020a62461bcd02815260206004820152601f60248201527f526567756c61722073746f7265206e6f74206f70656e20666f722073616c6500604482015290519081900360640190fd5b84519150600a821115611bfe576040805160e560020a62461bcd02815260206004820152601760248201527f4d61782062756c6b206275792069732031302063617273000000000000000000604482015290519081900360640190fd5b5060005b8181101561085757611c30868683815181101515611c1c57fe5b906020019060200201516000876003611091565b50600101611c02565b600160a060020a0381161515611c4e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820dd7901b0c939cc8402be22ff659de81781d2ea0ad036301b89e5c7db68ae141200290000000000000000000000005caebd3b32e210e85ce3e9d51638b9c445481567000000000000000000000000e6963576e14aad7743ef627b1ada417fc4c8d32100000000000000000000000040b046d0563c498e5b13414ba9e41ed60291f5b9",
  "constructorArguments": "0000000000000000000000005caebd3b32e210e85ce3e9d51638b9c445481567000000000000000000000000e6963576e14aad7743ef627b1ada417fc4c8d32100000000000000000000000040b046d0563c498e5b13414ba9e41ed60291f5b9"
}