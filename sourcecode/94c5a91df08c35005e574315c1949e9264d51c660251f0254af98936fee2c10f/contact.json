{
  "address": "0xaf3b6cf6b25740af51cfebcaad5bae2ca12856f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExoToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-22\n*/\n\npragma solidity ^0.4.19;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  uint256 totalRecycledTokens_; \n\n  bool public paused = false; \n\n  bool public tgeMode = false;\n\n  address public ceoAddress;\n\n  address public marketplaceAddress;\n\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  modifier whenNotPaused() { \n        require(!paused);\n        _;\n  }\n  \n  modifier whenPaused() { \n        require(paused);\n        _;\n  }\n\n  modifier onlyCEO() {\n      require(msg.sender == ceoAddress);\n      _;  \n  }\n\n  function pause() public onlyCEO() whenNotPaused() {\n      paused = true;\n  }\n\n  function unpause() public onlyCEO() whenPaused() {\n      paused = false;\n  }\n\n  modifier inTGE() {\n      require(tgeMode);\n      _;  \n  }\n\n  modifier afterTGE() {\n      require(!tgeMode);\n      _;  \n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public whenNotPaused() returns (bool) {\n    require( !tgeMode || (msg.sender == ceoAddress) ); \n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\ncontract ExoToken is ERC20, BasicToken {\n\n  string public name = \"ExoToken\";\n\n  string public symbol = \"EXT\"; \n\n  uint8 public decimals = 18;\n\n  uint256 public MaxNumTokens = 175000000000000000000000000;\n  \n  uint256 private priceOfToken;\n\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  mapping(address => bool) private tgeUserMap;\n  address[] private tgeUserList;\n\n  event Mint(address _to, uint256 _amount);\n  event RecycleTokens(uint256 value);\n\n\n  uint32 public bonusFactor_1 = 5; \n  uint32 public bonusFactor_2 = 10;\n  uint32 public bonusFactor_3 = 20;\n\n\n  function setBonusFactors(uint32 factor_1, uint32 factor_2, uint32 factor_3) public onlyCEO() inTGE() {\n    bonusFactor_1 = factor_1;\n    bonusFactor_2 = factor_2;\n    bonusFactor_3 = factor_3;\n  }\n\n  /*** CONSTRUCTOR ***/\n  function ExoToken(uint256 initialSupply, uint256 initialPriceOfToken) public {  \n    // set initialSupply to e.g. 82,250,000\n    require(initialPriceOfToken > 0);\n    ceoAddress = msg.sender;\n    marketplaceAddress = msg.sender;\n    priceOfToken = initialPriceOfToken; \n    balances[msg.sender] = initialSupply;\n    totalSupply_ = initialSupply;\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);    \n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) whenNotPaused() public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function setPriceOfToken(uint256 newPriceOfToken) public onlyCEO() {\n    require(newPriceOfToken > 0);\n    priceOfToken = newPriceOfToken;\n  }\n\n  function getPriceOfToken() public view returns(uint256) {\n    return priceOfToken;\n  }\n\n  function getNumRecycledTokens() public view returns(uint256) {\n    return totalRecycledTokens_;\n  }\n  \n\n  function recycleTokensForPayment(uint256 numTokens, uint256 payment) public onlyCEO() { \n    require(payment <= this.balance); \n    recycleTokens(numTokens); \n    ceoAddress.transfer(payment);\n  }\n  \n\n  function recycleTokens(uint256 numTokens) public onlyCEO() { \n    // allow more tokens to be minted\n    require(numTokens <= balances[ceoAddress]);\n\n    totalSupply_ = totalSupply_.sub(numTokens);\n    balances[ceoAddress] = balances[ceoAddress].sub(numTokens);\n    totalRecycledTokens_ = totalRecycledTokens_.add(numTokens);\n    RecycleTokens(numTokens);\n  }\n\n\n  uint256 public firstBonusStep = 1 ether;\n  uint256 public secondBonusStep = 5 ether;\n  uint256 public thirdBonusStep = 10 ether;\n\n  function setBonusSteps(uint256 step_1, uint256 step_2, uint256 step_3) public onlyCEO() inTGE() {\n    firstBonusStep = step_1;\n    secondBonusStep = step_2;\n    thirdBonusStep = step_3;\n  }\n\n\n\n  function purchase() public payable whenNotPaused() inTGE() {\n    /// when in TGE - buy tokens (from CEO account) for ETH\n\n    uint256 amount = msg.value.div(priceOfToken);\n    require(amount > 0);\n        \n    if (tgeUserMap[ msg.sender] == false) { // In Solidity, mapping will return the default value for each key type\n      tgeUserMap[ msg.sender] = true;\n      tgeUserList.push( msg.sender);\n    }\n\n    uint bonusFactor;\n    if (msg.value < firstBonusStep) {\n      bonusFactor = 100; // no bonus  \n    } else if (msg.value < secondBonusStep) {\n      bonusFactor = 100 + bonusFactor_1;\n    } else if (msg.value < thirdBonusStep) {\n      bonusFactor = 100 + bonusFactor_2;\n    } else {\n      bonusFactor = 100 + bonusFactor_3;\n    }\n    \n    amount = amount.mul(bonusFactor).div(100);\n    amount = amount.mul(1000000000000000000);\n    \n     /// mint requested amount of tokens\n    \n    doMint(msg.sender, amount);\n\n    /// Transfer tokens from ceo to msg.sender\n    // require(amount <= balances[ceoAddress]); \n    // balances[ceoAddress] = balances[ceoAddress].sub(amount);\n    // balances[msg.sender] = balances[msg.sender].add(amount);\n    // Transfer(ceoAddress, msg.sender, amount);\n  }\n\n\n /// mint function - either by CEO or from site\n function mintTokens(address buyerAddress, uint256 amount) public whenNotPaused() returns (bool) {  \n    require(msg.sender == marketplaceAddress || msg.sender == ceoAddress); \n    return doMint(buyerAddress, amount);\n  }\n\n function doMint(address buyerAddress, uint256 amount) private whenNotPaused() returns (bool) {\n    require( totalSupply_.add(amount) <= MaxNumTokens);\n    totalSupply_ = totalSupply_.add(amount);\n    balances[buyerAddress] = balances[buyerAddress].add(amount);\n    Mint(buyerAddress, amount);\n    return true;\n  }\n\n  \n\n  function getNumTGEUsers() public view returns (uint256) {\n      return tgeUserList.length;\n  }\n\n  function getTGEUser( uint32 ind) public view returns (address) {\n      return tgeUserList[ind];\n  }\n\n\n  function payout() public onlyCEO {\n      ceoAddress.transfer(this.balance);\n  }\n\n  function payoutPartial(uint256 amount) public onlyCEO {\n      require(amount <= this.balance);\n      ceoAddress.transfer(amount);  \n  }\n\n  function setTGEMode(bool newMode) public onlyCEO {\n      tgeMode = newMode;\n  }\n\n  function setCEO(address newCEO) public onlyCEO {\n      require(newCEO != address(0));\n      uint256 ceoTokens = balances[ceoAddress];\n      balances[ceoAddress] = 0;\n      balances[newCEO] = balances[newCEO].add(ceoTokens);\n      ceoAddress = newCEO; \n  }\n\n  function setMarketplaceAddress(address newMarketplace) public onlyCEO {\n    marketplaceAddress = newMarketplace;\n  }\n\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) whenNotPaused() public returns (bool) {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  \n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused() public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      if (a == 0) {\n        return 0;\n      }\n      uint256 c = a * b;\n      assert(c / a == b);\n      return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMode\",\"type\":\"bool\"}],\"name\":\"setTGEMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"step_1\",\"type\":\"uint256\"},{\"name\":\"step_2\",\"type\":\"uint256\"},{\"name\":\"step_3\",\"type\":\"uint256\"}],\"name\":\"setBonusSteps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumTGEUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factor_1\",\"type\":\"uint32\"},{\"name\":\"factor_2\",\"type\":\"uint32\"},{\"name\":\"factor_3\",\"type\":\"uint32\"}],\"name\":\"setBonusFactors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumRecycledTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxNumTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payoutPartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"recycleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFactor_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceOfToken\",\"type\":\"uint256\"}],\"name\":\"setPriceOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ind\",\"type\":\"uint32\"}],\"name\":\"getTGEUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdBonusStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTokens\",\"type\":\"uint256\"},{\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"recycleTokensForPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"initialPriceOfToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RecycleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060409081526003805461ffff191690558051908101604052600881527f45786f546f6b656e0000000000000000000000000000000000000000000000006020820152600590805162000058929160200190620001b3565b5060408051908101604052600381527f455854000000000000000000000000000000000000000000000000000000000060208201526006908051620000a2929160200190620001b3565b5060078054601260ff199091161790556a90c1b1025e16710f000000600855600d8054600563ffffffff199091161767ffffffff000000001916640a0000000017604060020a63ffffffff02191668140000000000000000179055670de0b6b3a7640000600e55674563918244f40000600f55678ac7230489e8000060105534156200012d57600080fd5b604051604080620019678339810160405280805191906020018051915050600081116200015957600080fd5b600380546201000060b060020a0319166201000033600160a060020a03169081029190911790915560048054600160a060020a03191682179055600991909155600090815260208190526040902081905560015562000258565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f657805160ff191683800117855562000226565b8280016001018555821562000226579182015b828111156200022657825182559160200191906001019062000209565b506200023492915062000238565b5090565b6200025591905b808211156200023457600081556001016200023f565b90565b6116ff80620002686000396000f3006060604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101f2578063095ea7b31461027c5780630a0f8168146102b25780630c681d4b146102e157806310759c2b146102fb5780631160ba291461031757806318160ddd1461034357806323b872dd1461036857806327d7874c146103905780632dcf6c57146103af578063313ce567146103c25780633f4ba83a146103eb5780634b5621ea146103fe5780634f27e15114610426578063545e20b8146104395780635c975abb1461044c5780635cba30a11461045f57806363bd1d4a1461047257806364edfbf014610485578063661884631461048d5780636abe3a12146104af57806370a08231146104c2578063798ce54f146104e157806381ac3bee146104f75780638456cb591461050d57806388d57bf81461052057806395d89b41146105335780639698dc6314610546578063a9059cbb14610559578063ac7b29471461057b578063b47cc5561461058e578063ca1c8895146105ad578063d73dd623146105c3578063daa17f49146105e5578063dd62ed3e146105f8578063f0dda65c1461061d578063f6fdafb61461063f578063f8d2ebb314610652578063fb9f19a91461066e578063fd1e5c5514610681575b600080fd5b34156101fd57600080fd5b61020561069a565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610241578082015183820152602001610229565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028757600080fd5b61029e600160a060020a0360043516602435610738565b604051901515815260200160405180910390f35b34156102bd57600080fd5b6102c56107c9565b604051600160a060020a03909116815260200160405180910390f35b34156102ec57600080fd5b6102f960043515156107de565b005b341561030657600080fd5b6102f9600435602435604435610819565b341561032257600080fd5b61032a61085e565b60405163ffffffff909116815260200160405180910390f35b341561034e57600080fd5b610356610876565b60405190815260200160405180910390f35b341561037357600080fd5b61029e600160a060020a036004358116906024351660443561087d565b341561039b57600080fd5b6102f9600160a060020a0360043516610a23565b34156103ba57600080fd5b610356610ae9565b34156103cd57600080fd5b6103d5610aef565b60405160ff909116815260200160405180910390f35b34156103f657600080fd5b6102f9610af8565b341561040957600080fd5b6102f963ffffffff60043581169060243581169060443516610b36565b341561043157600080fd5b610356610bc3565b341561044457600080fd5b610356610bc9565b341561045757600080fd5b61029e610bcf565b341561046a57600080fd5b61032a610bd8565b341561047d57600080fd5b6102f9610be4565b6102f9610c46565b341561049857600080fd5b61029e600160a060020a0360043516602435610de2565b34156104ba57600080fd5b610356610ef2565b34156104cd57600080fd5b610356600160a060020a0360043516610ef8565b34156104ec57600080fd5b6102f9600435610f13565b341561050257600080fd5b6102f9600435610f87565b341561051857600080fd5b6102f961107d565b341561052b57600080fd5b61032a6110bd565b341561053e57600080fd5b6102056110d1565b341561055157600080fd5b61035661113c565b341561056457600080fd5b61029e600160a060020a0360043516602435611142565b341561058657600080fd5b61035661129b565b341561059957600080fd5b6102f9600160a060020a03600435166112a1565b34156105b857600080fd5b6102f96004356112f1565b34156105ce57600080fd5b61029e600160a060020a0360043516602435611324565b34156105f057600080fd5b6102c56113d9565b341561060357600080fd5b610356600160a060020a03600435811690602435166113e8565b341561062857600080fd5b61029e600160a060020a0360043516602435611427565b341561064a57600080fd5b61029e611487565b341561065d57600080fd5b6102c563ffffffff60043516611495565b341561067957600080fd5b6103566114c7565b341561068c57600080fd5b6102f96004356024356114cd565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b505050505081565b60035460009060ff161561074b57600080fd5b600354610100900460ff161561076057600080fd5b600160a060020a033381166000818152600a6020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600354620100009004600160a060020a031681565b60035433600160a060020a039081166201000090920416146107ff57600080fd5b600380549115156101000261ff0019909216919091179055565b60035433600160a060020a0390811662010000909204161461083a57600080fd5b600354610100900460ff16151561085057600080fd5b600e92909255600f55601055565b600d5468010000000000000000900463ffffffff1681565b6001545b90565b60035460009060ff161561089057600080fd5b600354610100900460ff16156108a557600080fd5b600160a060020a03831615156108ba57600080fd5b600160a060020a0384166000908152602081905260409020548211156108df57600080fd5b600160a060020a038085166000908152600a60209081526040808320339094168352929052205482111561091257600080fd5b600160a060020a03841660009081526020819052604090205461093b908363ffffffff61154b16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610970908363ffffffff61155d16565b600160a060020a03808516600090815260208181526040808320949094558783168252600a81528382203390931682529190915220546109b6908363ffffffff61154b16565b600160a060020a038086166000818152600a6020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60035460009033600160a060020a03908116620100009092041614610a4757600080fd5b600160a060020a0382161515610a5c57600080fd5b50600354600160a060020a036201000090910481166000908152602081905260408082208054908390559284168252902054610a9e908263ffffffff61155d16565b600160a060020a0392909216600081815260208190526040902092909255506003805475ffffffffffffffffffffffffffffffffffffffff0000191662010000909202919091179055565b600c5490565b60075460ff1681565b60035433600160a060020a03908116620100009092041614610b1957600080fd5b60035460ff161515610b2a57600080fd5b6003805460ff19169055565b60035433600160a060020a03908116620100009092041614610b5757600080fd5b600354610100900460ff161515610b6d57600080fd5b600d805463ffffffff191663ffffffff9485161767ffffffff00000000191664010000000093851693909302929092176bffffffff00000000000000001916680100000000000000009190931602919091179055565b60025490565b60095490565b60035460ff1681565b600d5463ffffffff1681565b60035433600160a060020a03908116620100009092041614610c0557600080fd5b600354600160a060020a036201000090910481169030163180156108fc0290604051600060405180830381858888f193505050501515610c4457600080fd5b565b600354600090819060ff1615610c5b57600080fd5b600354610100900460ff161515610c7157600080fd5b600954610c8590349063ffffffff61156c16565b915060008211610c9457600080fd5b600160a060020a0333166000908152600b602052604090205460ff161515610d2157600160a060020a0333166000908152600b60205260409020805460ff19166001908117909155600c805490918101610cee8382611696565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a03161790555b600e54341015610d3357506064610d96565b600f54341015610d525750600d54606463ffffffff9182160116610d96565b601054341015610d795750600d54606463ffffffff64010000000090920482160116610d96565b50600d54606463ffffffff68010000000000000000909204821601165b610db76064610dab848463ffffffff61158316565b9063ffffffff61156c16565b9150610dd182670de0b6b3a764000063ffffffff61158316565b9150610ddd33836115ae565b505050565b600354600090819060ff1615610df757600080fd5b50600160a060020a033381166000908152600a602090815260408083209387168352929052205480831115610e5357600160a060020a033381166000908152600a60209081526040808320938816835292905290812055610e8a565b610e63818463ffffffff61154b16565b600160a060020a033381166000908152600a60209081526040808320938916835292905220555b600160a060020a033381166000818152600a602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b60085481565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a03908116620100009092041614610f3457600080fd5b600160a060020a03301631811115610f4b57600080fd5b600354620100009004600160a060020a03166108fc82150282604051600060405180830381858888f193505050501515610f8457600080fd5b50565b60035433600160a060020a03908116620100009092041614610fa857600080fd5b600354620100009004600160a060020a0316600090815260208190526040902054811115610fd557600080fd5b600154610fe8908263ffffffff61154b16565b600155600354620100009004600160a060020a0316600090815260208190526040902054611016908261154b565b600354620100009004600160a060020a0316600090815260208190526040902055600254611044908261155d565b6002557f905ec72f10ad903b788ee53abfdbc31cf0054ecae5ab438f2543434d7b1115378160405190815260200160405180910390a150565b60035433600160a060020a0390811662010000909204161461109e57600080fd5b60035460ff16156110ae57600080fd5b6003805460ff19166001179055565b600d54640100000000900463ffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107305780601f1061070557610100808354040283529160200191610730565b600e5481565b60035460009060ff161561115557600080fd5b600354610100900460ff161580611180575060035433600160a060020a039081166201000090920416145b151561118b57600080fd5b600160a060020a03831615156111a057600080fd5b600160a060020a0333166000908152602081905260409020548211156111c557600080fd5b600160a060020a0333166000908152602081905260409020546111ee908363ffffffff61154b16565b600160a060020a033381166000908152602081905260408082209390935590851681522054611223908363ffffffff61155d16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600f5481565b60035433600160a060020a039081166201000090920416146112c257600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a0390811662010000909204161461131257600080fd5b6000811161131f57600080fd5b600955565b60035460009060ff161561133757600080fd5b600160a060020a033381166000908152600a602090815260408083209387168352929052205461136d908363ffffffff61155d16565b600160a060020a033381166000818152600a602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600454600160a060020a031681565b60035460009060ff16156113fb57600080fd5b50600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60035460009060ff161561143a57600080fd5b60045433600160a060020a039081169116148061146b575060035433600160a060020a039081166201000090920416145b151561147657600080fd5b61148083836115ae565b9392505050565b600354610100900460ff1681565b6000600c8263ffffffff168154811015156114ac57fe5b600091825260209091200154600160a060020a031692915050565b60105481565b60035433600160a060020a039081166201000090920416146114ee57600080fd5b600160a060020a0330163181111561150557600080fd5b61150e82610f87565b600354620100009004600160a060020a03166108fc82150282604051600060405180830381858888f19350505050151561154757600080fd5b5050565b60008282111561155757fe5b50900390565b60008282018381101561148057fe5b600080828481151561157a57fe5b04949350505050565b6000808315156115965760009150610eeb565b508282028284828115156115a657fe5b041461148057fe5b60035460009060ff16156115c157600080fd5b6008546001546115d7908463ffffffff61155d16565b11156115e257600080fd5b6001546115f5908363ffffffff61155d16565b600155600160a060020a038316600090815260208190526040902054611621908363ffffffff61155d16565b60008085600160a060020a0316600160a060020a03168152602001908152602001600020819055507f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858383604051600160a060020a03909216825260208201526040908101905180910390a150600192915050565b815481835581811511610ddd57600083815260209020610ddd91810190830161087a91905b808211156116cf57600081556001016116bb565b50905600a165627a7a72305820f0e727ab682544ed7f795bcdf5ded21d313eefb673a1903f4d57e2b39ac22aee0029000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000038d7ea4c68000",
  "constructorArguments": "000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000038d7ea4c68000"
}