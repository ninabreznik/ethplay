{
  "address": "0x5335ef421f90bac4605908bc3a0f493a4e9119e8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyAdvancedToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity ^0.4.16;\n   /* 创建一个父类， 账户管理员 */\n   contract owned {\n\n       address public owner;\n\n       function owned() public {\n       owner = msg.sender;\n       }\n\n       /* modifier是修改标志 */\n       modifier onlyOwner {\n           require(msg.sender == owner);\n           _;\n       }\n\n       /* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\n       function transferOwnership(address newOwner) onlyOwner public {\n           owner = newOwner;\n       }\n   }\n\n   /* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\n   interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\n   contract TokenERC20 {\n       // 代币（token）的公共变量\n       string public name;             //代币名字\n       string public symbol;           //代币符号\n       uint8 public decimals = 18;     //代币小数点位数， 18是默认， 尽量不要更改\n\n       uint256 public totalSupply;     //代币总量\n\n       // 记录各个账户的代币数目\n       mapping (address => uint256) public balanceOf;\n\n       // A账户存在B账户资金\n       mapping (address => mapping (address => uint256)) public allowance;\n\n       // 转账通知事件\n       event Transfer(address indexed from, address indexed to, uint256 value);\n\n       // 销毁金额通知事件\n       event Burn(address indexed from, uint256 value);\n\n       /* 构造函数 */\n       function TokenERC20(\n           uint256 initialSupply,\n           string tokenName,\n           string tokenSymbol\n       ) public {\n           totalSupply = initialSupply * 10 ** uint256(decimals);  // 根据decimals计算代币的数量\n           balanceOf[msg.sender] = totalSupply;                    // 给生成者所有的代币数量\n           name = tokenName;                                       // 设置代币的名字\n           symbol = tokenSymbol;                                   // 设置代币的符号\n       }\n\n       /* 私有的交易函数 */\n       function _transfer(address _from, address _to, uint _value) internal {\n           // 防止转移到0x0， 用burn代替这个功能\n           require(_to != 0x0);\n           // 检测发送者是否有足够的资金\n           require(balanceOf[_from] >= _value);\n           // 检查是否溢出（数据类型的溢出）\n           require(balanceOf[_to] + _value > balanceOf[_to]);\n           // 将此保存为将来的断言， 函数最后会有一个检验\n           uint previousBalances = balanceOf[_from] + balanceOf[_to];\n           // 减少发送者资产\n           balanceOf[_from] -= _value;\n           // 增加接收者的资产\n           balanceOf[_to] += _value;\n           Transfer(_from, _to, _value);\n           // 断言检测， 不应该为错\n           assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n       }\n\n       /* 传递tokens */\n       function transfer(address _to, uint256 _value) public {\n           _transfer(msg.sender, _to, _value);\n       }\n\n       /* 从其他账户转移资产 */\n       function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n           require(_value <= allowance[_from][msg.sender]);     // Check allowance\n           allowance[_from][msg.sender] -= _value;\n           _transfer(_from, _to, _value);\n           return true;\n       }\n\n       /*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\n       function approve(address _spender, uint256 _value) public\n           returns (bool success) {\n           allowance[msg.sender][_spender] = _value;\n           return true;\n       }\n\n       /*\n       为其他地址设置津贴， 并通知\n       发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\n       */\n\n       function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n           public\n           returns (bool success) {\n           tokenRecipient spender = tokenRecipient(_spender);\n           if (approve(_spender, _value)) {\n               spender.receiveApproval(msg.sender, _value, this, _extraData);\n               return true;\n           }\n       }\n\n       /**\n       * 销毁代币\n       */\n       function burn(uint256 _value) public returns (bool success) {\n           require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n           balanceOf[msg.sender] -= _value;            // Subtract from the sender\n           totalSupply -= _value;                      // Updates totalSupply\n           Burn(msg.sender, _value);\n           return true;\n       }\n\n       /**\n       * 从其他账户销毁代币\n       */\n       function burnFrom(address _from, uint256 _value) public returns (bool success) {\n           require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n           require(_value <= allowance[_from][msg.sender]);    // Check allowance\n           balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n           allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n           totalSupply -= _value;                              // Update totalSupply\n           Burn(_from, _value);\n           return true;\n       }\n   }\n\n   /******************************************/\n   /*       ADVANCED TOKEN STARTS HERE       */\n   /******************************************/\n\n   contract MyAdvancedToken is owned, TokenERC20 {\n\n       uint256 public sellPrice;\n       uint256 public buyPrice;\n\n       /* 冻结账户 */\n       mapping (address => bool) public frozenAccount;\n\n       /* This generates a public event on the blockchain that will notify clients */\n       event FrozenFunds(address target, bool frozen);\n\n       /* 构造函数 */\n       function MyAdvancedToken(\n           uint256 initialSupply,\n           string tokenName,\n           string tokenSymbol\n       ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n       /* 转账， 比父类加入了账户冻结 */\n       function _transfer(address _from, address _to, uint _value) internal {\n           require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n           require (balanceOf[_from] >= _value);               // Check if the sender has enough\n           require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n           require(!frozenAccount[_from]);                     // Check if sender is frozen\n           require(!frozenAccount[_to]);                       // Check if recipient is frozen\n           balanceOf[_from] -= _value;                         // Subtract from the sender\n           balanceOf[_to] += _value;                           // Add the same to the recipient\n           Transfer(_from, _to, _value);\n       }\n\n   // 向指定账户增发资金\n       function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n           balanceOf[target] += mintedAmount;\n           totalSupply += mintedAmount;\n           Transfer(0, this, mintedAmount);\n           Transfer(this, target, mintedAmount);\n\n       }\n\n       // 冻结 or 解冻账户\n       function freezeAccount(address target, bool freeze) onlyOwner public {\n           frozenAccount[target] = freeze;\n           FrozenFunds(target, freeze);\n       }\n\n       function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n           sellPrice = newSellPrice;\n           buyPrice = newBuyPrice;\n       }\n\n       // @notice Buy tokens from contract by sending ether\n       function buy() payable public {\n           uint amount = msg.value / buyPrice;               // calculates the amount\n           _transfer(this, msg.sender, amount);              // makes the transfers\n       }\n\n       function sell(uint256 amount) public {\n           require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n           _transfer(msg.sender, this, amount);              // makes the transfers\n           msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n       }\n   }",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60606040526012600360006101000a81548160ff021916908360ff16021790555034156200002c57600080fd5b6040516200193138038062001931833981016040528080519060200190919080518201919060200180518201919050505b8282825b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600360009054906101000a900460ff1660ff16600a0a8302600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600190805190602001906200011f92919062000147565b5080600290805190602001906200013892919062000147565b505b5050505b505050620001f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018a57805160ff1916838001178555620001bb565b82800160010185558215620001bb579182015b82811115620001ba5782518255916020019190600101906200019d565b5b509050620001ca9190620001ce565b5090565b620001f391905b80821115620001ef576000816000905550600101620001d5565b5090565b90565b61172b80620002066000396000f30060606040523615610126576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305fefda71461012b57806306fdde0314610157578063095ea7b3146101e657806318160ddd1461024057806323b872dd14610269578063313ce567146102e257806342966c68146103115780634b7503341461034c57806370a082311461037557806379c65068146103c257806379cc6790146104045780638620410b1461045e5780638da5cb5b1461048757806395d89b41146104dc578063a6f2ae3a1461056b578063a9059cbb14610575578063b414d4b6146105b7578063cae9ca5114610608578063dd62ed3e146106a5578063e4849b3214610711578063e724529c14610734578063f2fde38b14610778575b600080fd5b341561013657600080fd5b61015560048080359060200190919080359060200190919050506107b1565b005b341561016257600080fd5b61016a610820565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ab5780820151818401525b60208101905061018f565b50505050905090810190601f1680156101d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f157600080fd5b610226600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108be565b604051808215151515815260200191505060405180910390f35b341561024b57600080fd5b61025361094c565b6040518082815260200191505060405180910390f35b341561027457600080fd5b6102c8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610952565b604051808215151515815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610a80565b604051808260ff1660ff16815260200191505060405180910390f35b341561031c57600080fd5b6103326004808035906020019091905050610a93565b604051808215151515815260200191505060405180910390f35b341561035757600080fd5b61035f610b98565b6040518082815260200191505060405180910390f35b341561038057600080fd5b6103ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b9e565b6040518082815260200191505060405180910390f35b34156103cd57600080fd5b610402600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bb6565b005b341561040f57600080fd5b610444600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d29565b604051808215151515815260200191505060405180910390f35b341561046957600080fd5b610471610f44565b6040518082815260200191505060405180910390f35b341561049257600080fd5b61049a610f4a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e757600080fd5b6104ef610f6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105305780820151818401525b602081019050610514565b50505050905090810190601f16801561055d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61057361100d565b005b341561058057600080fd5b6105b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061102e565b005b34156105c257600080fd5b6105ee600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061103e565b604051808215151515815260200191505060405180910390f35b341561061357600080fd5b61068b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061105e565b604051808215151515815260200191505060405180910390f35b34156106b057600080fd5b6106fb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111dd565b6040518082815260200191505060405180910390f35b341561071c57600080fd5b6107326004808035906020019091905050611202565b005b341561073f57600080fd5b610776600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061127f565b005b341561078357600080fd5b6107af600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113a6565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080c57600080fd5b81600781905550806008819055505b5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b65780601f1061088b576101008083540402835291602001916108b6565b820191906000526020600020905b81548152906001019060200180831161089957829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60045481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156109df57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610a74848484611446565b600190505b9392505050565b600360009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610ae357600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60075481565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1157600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d7957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e0457600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110055780601f10610fda57610100808354040283529160200191611005565b820191906000526020600020905b815481529060010190602001808311610fe857829003601f168201915b505050505081565b60006008543481151561101c57fe5b04905061102a303383611446565b5b50565b611039338383611446565b5b5050565b60096020528060005260406000206000915054906101000a900460ff1681565b60008084905061106e85856108be565b156111d4578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111695780820151818401525b60208101905061114d565b50505050905090810190601f1680156111965780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156111b757600080fd5b6102c65a03f115156111c857600080fd5b505050600191506111d5565b5b509392505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b60075481023073ffffffffffffffffffffffffffffffffffffffff16311015151561122c57600080fd5b611237333083611446565b3373ffffffffffffffffffffffffffffffffffffffff166108fc60075483029081150290604051600060405180830381858888f19350505050151561127b57600080fd5b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112da57600080fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561146c57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156114ba57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561154857600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156115a157600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156115fa57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050505600a165627a7a72305820395924d86f6ce411e846ae4f846641832ae7a9e9ba17dfe313a0058ed759a04c00290000000000000000000000000000000000000000000000000000000003197500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000034c5954000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c4f564500000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000003197500000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000034c5954000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c4f564500000000000000000000000000000000000000000000000000000000"
}