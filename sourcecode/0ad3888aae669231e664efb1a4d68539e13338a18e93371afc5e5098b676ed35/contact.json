{
  "address": "0xd87528110d1a8801a133bcf406c4ff3065387575",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-05\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree).Therefore,\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n    // cliff period of a year and a duration of four years, are safe to use.\n    // solhint-disable not-rely-on-time\n\n    using SafeMath for uint256;\n\n    event TokensReleased(address token, uint256 amount);\n    event TokenVestingRevoked(address token);\n\n    // beneficiary of tokens after they are released\n    address private _beneficiary;\n\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n    uint256 private _cliff;\n    uint256 private _start;\n    uint256 private _duration;\n\n    bool private _revocable;\n\n    mapping (address => uint256) private _released;\n    mapping (address => bool) private _revoked;\n\n    /**\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\n     * of the balance will have vested.\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n     * @param start the time (as Unix time) at which point vesting starts\n     * @param duration duration in seconds of the period in which the tokens will vest\n     * @param revocable whether the vesting is revocable or not\n     */\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n        require(beneficiary != address(0));\n        require(cliffDuration <= duration);\n        require(duration > 0);\n        require(start.add(duration) > block.timestamp);\n\n        _beneficiary = beneficiary;\n        _revocable = revocable;\n        _duration = duration;\n        _cliff = start.add(cliffDuration);\n        _start = start;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the cliff time of the token vesting.\n     */\n    function cliff() public view returns (uint256) {\n        return _cliff;\n    }\n\n    /**\n     * @return the start time of the token vesting.\n     */\n    function start() public view returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @return the duration of the token vesting.\n     */\n    function duration() public view returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @return true if the vesting is revocable.\n     */\n    function revocable() public view returns (bool) {\n        return _revocable;\n    }\n\n    /**\n     * @return the amount of the token released.\n     */\n    function released(address token) public view returns (uint256) {\n        return _released[token];\n    }\n\n    /**\n     * @return true if the token is revoked.\n     */\n    function revoked(address token) public view returns (bool) {\n        return _revoked[token];\n    }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     * @param token ERC20 token which is being vested\n     */\n    function release(IERC20 token) public {\n        uint256 unreleased = _releasableAmount(token);\n\n        require(unreleased > 0);\n\n        _released[address(token)] = _released[address(token)].add(unreleased);\n\n        token.transfer(_beneficiary, unreleased);\n\n        emit TokensReleased(address(token), unreleased);\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param token ERC20 token which is being vested\n     */\n    function revoke(IERC20 token) public onlyOwner {\n        require(_revocable);\n        require(!_revoked[address(token)]);\n\n        uint256 balance = token.balanceOf(address(this));\n\n        uint256 unreleased = _releasableAmount(token);\n        uint256 refund = balance.sub(unreleased);\n\n        _revoked[address(token)] = true;\n\n        token.transfer(owner(), refund);\n\n        emit TokenVestingRevoked(address(token));\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param token ERC20 token which is being vested\n     */\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\n        return _vestedAmount(token).sub(_released[address(token)]);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param token ERC20 token which is being vested\n     */\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\n        uint256 currentBalance = token.balanceOf(address(this));\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\n\n        if (block.timestamp < _cliff) {\n            return 0;\n        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {\n            return totalBalance;\n        } else {\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a080610aa2833981018060405260a081101561003057600080fd5b5080516020820151604080840151606085015160809095015160008054600160a060020a03191633178082559351959694959294939192600160a060020a0392909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600160a060020a03851615156100ae57600080fd5b818311156100bb57600080fd5b600082116100c857600080fd5b426100e085846401000000006106b861013e82021704565b116100ea57600080fd5b60018054600160a060020a031916600160a060020a0387161790556005805460ff1916821515179055600482905561012f848464010000000061013e81026106b81704565b60025550505060035550610157565b60008282018381101561015057600080fd5b9392505050565b61093c806101666000396000f3fe608060405234801561001057600080fd5b50600436106100ec576000357c010000000000000000000000000000000000000000000000000000000090048063872a7810116100a95780639852595c116100835780639852595c146101b9578063be9a6555146101df578063f2fde38b146101e7578063fa01dc061461020d576100ec565b8063872a78101461018d5780638da5cb5b146101a95780638f32d59b146101b1576100ec565b80630fb5a6b4146100f157806313d033c01461010b578063191655871461011357806338af3eed1461013b578063715018a61461015f57806374a8f10314610167575b600080fd5b6100f9610233565b60408051918252519081900360200190f35b6100f9610239565b6101396004803603602081101561012957600080fd5b5035600160a060020a031661023f565b005b610143610375565b60408051600160a060020a039092168252519081900360200190f35b610139610384565b6101396004803603602081101561017d57600080fd5b5035600160a060020a03166103ee565b6101956105f5565b604080519115158252519081900360200190f35b6101436105fe565b61019561060d565b6100f9600480360360208110156101cf57600080fd5b5035600160a060020a031661061e565b6100f961063d565b610139600480360360208110156101fd57600080fd5b5035600160a060020a0316610643565b6101956004803603602081101561022357600080fd5b5035600160a060020a0316610662565b60045490565b60025490565b600061024a82610680565b90506000811161025957600080fd5b600160a060020a038216600090815260066020526040902054610282908263ffffffff6106b816565b600160a060020a0380841660008181526006602090815260408083209590955560015485517fa9059cbb00000000000000000000000000000000000000000000000000000000815294166004850152602484018690529351919363a9059cbb936044808201949293918390030190829087803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b505060408051600160a060020a03841681526020810183905281517fc7798891864187665ac6dd119286e44ec13f014527aeeb2b8eb3fd413df93179929181900390910190a15050565b600154600160a060020a031690565b61038c61060d565b151561039757600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6103f661060d565b151561040157600080fd5b60055460ff16151561041257600080fd5b600160a060020a03811660009081526007602052604090205460ff161561043857600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a0823191602480820192602092909190829003018186803b15801561049b57600080fd5b505afa1580156104af573d6000803e3d6000fd5b505050506040513d60208110156104c557600080fd5b5051905060006104d483610680565b905060006104e8838363ffffffff6106d116565b600160a060020a0385166000818152600760205260409020805460ff1916600117905590915063a9059cbb61051b6105fe565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505060408051600160a060020a038616815290517f39983c6d4d174a7aee564f449d4a5c3c7ac9649d72b7793c56901183996f8af69181900360200190a150505050565b60055460ff1690565b600054600160a060020a031690565b600054600160a060020a0316331490565b600160a060020a0381166000908152600660205260409020545b919050565b60035490565b61064b61060d565b151561065657600080fd5b61065f816106e6565b50565b600160a060020a031660009081526007602052604090205460ff1690565b600160a060020a0381166000908152600660205260408120546106b2906106a684610763565b9063ffffffff6106d116565b92915050565b6000828201838110156106ca57600080fd5b9392505050565b6000828211156106e057600080fd5b50900390565b600160a060020a03811615156106fb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000918291600160a060020a038516916370a08231916024808301926020929190829003018186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d60208110156107f157600080fd5b5051600160a060020a0384166000908152600660205260408120549192509061082190839063ffffffff6106b816565b905060025442101561083857600092505050610638565b60045460035461084d9163ffffffff6106b816565b421015806108735750600160a060020a03841660009081526007602052604090205460ff165b156108815791506106389050565b6108b86004546108ac61089f600354426106d190919063ffffffff16565b849063ffffffff6108c116565b9063ffffffff6108ec16565b92505050610638565b60008215156108d2575060006106b2565b8282028284828115156108e157fe5b04146106ca57600080fd5b60008082116108fa57600080fd5b6000828481151561090757fe5b0494935050505056fea165627a7a723058207a85d9068d00f888de2af6a2ea5c52dc3c5447347274d9fbfb6501d2035e43b40029000000000000000000000000d4445e1bf500f5fe2e2ad9a6426d929e86219bb10000000000000000000000000000000000000000000000000000000059d0300000000000000000000000000000000000000000000000000000000000007861560000000000000000000000000000000000000000000000000000000003c30ab00000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "000000000000000000000000d4445e1bf500f5fe2e2ad9a6426d929e86219bb10000000000000000000000000000000000000000000000000000000059d0300000000000000000000000000000000000000000000000000000000000007861560000000000000000000000000000000000000000000000000000000003c30ab00000000000000000000000000000000000000000000000000000000000000001"
}