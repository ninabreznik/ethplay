{
  "address": "0x00000000000fe8503db73c68f1a1874eb9d86883",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PingAnToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n// File: contracts/Ownable.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address private _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */\n    constructor() public {\n        setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"msg.sender should be onlyPendingOwner\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"msg.sender should be owner\");\n        _;\n    }\n\n    /**\n     * @dev Tells the address of the pendingOwner\n     * @return The address of the pendingOwner\n     */\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n    \n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function owner() public view returns (address ) {\n        return _owner;\n    }\n    \n    /**\n    * @dev Sets a new owner address\n    * @param _newOwner The newOwner to set\n    */\n    function setOwner(address _newOwner) internal {\n        _owner = _newOwner;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _pendingOwner = _newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0); \n    }\n    \n}\n\n// File: contracts/Operable.sol\n\npragma solidity 0.5.0;\n\n\ncontract Operable is Ownable {\n\n    address private _operator; \n\n    event OperatorChanged(address indexed previousOperator, address indexed newOperator);\n\n    /**\n     * @dev Tells the address of the operator\n     * @return the address of the operator\n     */\n    function operator() external view returns (address) {\n        return _operator;\n    }\n    \n    /**\n     * @dev Only the operator can operate store\n     */\n    modifier onlyOperator() {\n        require(msg.sender == _operator, \"msg.sender should be operator\");\n        _;\n    }\n\n    /**\n     * @dev update the storgeOperator\n     * @param _newOperator The newOperator to update  \n     */\n    function updateOperator(address _newOperator) public onlyOwner {\n        require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\n        emit OperatorChanged(_operator, _newOperator);\n        _operator = _newOperator;\n    }\n\n}\n\n// File: contracts/utils/SafeMath.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/TokenStore.sol\n\npragma solidity 0.5.0;\n\n\n\ncontract TokenStore is Operable {\n\n    using SafeMath for uint256;\n\n    uint256 public totalSupply;\n    \n    string  public name = \"PingAnToken\";\n    string  public symbol = \"PAT\";\n    uint8 public decimals = 18;\n\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    function changeTokenName(string memory _name, string memory _symbol) public onlyOperator {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function addBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = balances[_holder].add(_value);\n    }\n\n    function subBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = balances[_holder].sub(_value);\n    }\n\n    function setBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = _value;\n    }\n\n    function addAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowed[_holder][_spender] = allowed[_holder][_spender].add(_value);\n    }\n\n    function subAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowed[_holder][_spender] = allowed[_holder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowed[_holder][_spender] = _value;\n    }\n\n    function addTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = totalSupply.add(_value);\n    }\n\n    function subTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = totalSupply.sub(_value);\n    }\n\n    function setTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = _value;\n    }\n\n}\n\n// File: contracts/ERC20Interface.sol\n\npragma solidity 0.5.0;\n\n\ninterface ERC20Interface {  \n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address holder) external view returns (uint256);\n\n    function allowance(address holder, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed holder, address indexed spender, uint256 value);\n\n}\n\n// File: contracts/ERC20StandardToken.sol\n\npragma solidity 0.5.0;\n\n\n\n\ncontract ERC20StandardToken is ERC20Interface, Ownable {\n\n\n    TokenStore public tokenStore;\n    \n    event TokenStoreSet(address indexed previousTokenStore, address indexed newTokenStore);\n    event ChangeTokenName(string newName, string newSymbol);\n\n    /**\n     * @dev ownership of the TokenStore contract\n     * @param _newTokenStore The address to of the TokenStore to set.\n     */\n    function setTokenStore(address _newTokenStore) public onlyOwner returns (bool) {\n        emit TokenStoreSet(address(tokenStore), _newTokenStore);\n        tokenStore = TokenStore(_newTokenStore);\n        return true;\n    }\n    \n    function changeTokenName(string memory _name, string memory _symbol) public onlyOwner {\n        tokenStore.changeTokenName(_name, _symbol);\n        emit ChangeTokenName(_name, _symbol);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenStore.totalSupply();\n    }\n\n    function balanceOf(address _holder) public view returns (uint256) {\n        return tokenStore.balances(_holder);\n    }\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return tokenStore.allowed(_holder, _spender);\n    }\n    \n    function name() public view returns (string memory) {\n        return tokenStore.name();\n    }\n    \n    function symbol() public view returns (string memory) {\n        return tokenStore.symbol();\n    }\n    \n    function decimals() public view returns (uint8) {\n        return tokenStore.decimals();\n    }\n    \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public returns (bool success) {\n        require (_spender != address(0), \"Cannot approve to the zero address\");       \n        tokenStore.setAllowance(msg.sender, _spender, _value);\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Increase the amount of tokens that an holder allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    ) public returns (bool success) {\n        require (_spender != address(0), \"Cannot increaseApproval to the zero address\");      \n        tokenStore.addAllowance(msg.sender, _spender, _addedValue);\n        emit Approval(msg.sender, _spender, tokenStore.allowed(msg.sender, _spender));\n        return true;\n    }\n    \n    /**\n     * @dev Decrease the amount of tokens that an holder allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue \n    ) public returns (bool success) {\n        require (_spender != address(0), \"Cannot decreaseApproval to the zero address\");       \n        tokenStore.subAllowance(msg.sender, _spender, _subtractedValue);\n        emit Approval(msg.sender, _spender, tokenStore.allowed(msg.sender, _spender));\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value\n    ) public returns (bool success) {\n        require(_to != address(0), \"Cannot transfer to zero address\"); \n        tokenStore.subAllowance(_from, msg.sender, _value);          \n        tokenStore.subBalance(_from, _value);\n        tokenStore.addBalance(_to, _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    } \n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(\n        address _to, \n        uint256 _value\n    ) public returns (bool success) {\n        require (_to != address(0), \"Cannot transfer to zero address\");    \n        tokenStore.subBalance(msg.sender, _value);\n        tokenStore.addBalance(_to, _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n}\n\n// File: contracts/PausableToken.sol\n\npragma solidity 0.5.0;\n\n\n\ncontract PausableToken is ERC20StandardToken {\n\n    address private _pauser;\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n    event PauserChanged(address indexed previousPauser, address indexed newPauser);\n    \n    /**\n     * @dev Tells the address of the pauser\n     * @return The address of the pauser\n     */\n    function pauser() public view returns (address) {\n        return _pauser;\n    }\n    \n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"state shouldn't be paused\");\n        _;\n    }\n\n    /**\n     * @dev throws if called by any account other than the pauser\n     */\n    modifier onlyPauser() {\n        require(msg.sender == _pauser, \"msg.sender should be pauser\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser {\n        paused = false;\n        emit Unpause();\n    }\n\n    /**\n     * @dev update the pauser role\n     * @param _newPauser The newPauser to update\n     */\n    function updatePauser(address _newPauser) public onlyOwner {\n        require(_newPauser != address(0), \"Cannot update the newPauser to the zero address\");\n        emit PauserChanged(_pauser, _newPauser);\n        _pauser = _newPauser;\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public whenNotPaused returns (bool success) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    ) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    } \n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue \n    ) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value\n    ) public whenNotPaused returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    } \n\n    function transfer(\n        address _to, \n        uint256 _value\n    ) public whenNotPaused returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n}\n\n// File: contracts/BlacklistStore.sol\n\npragma solidity 0.5.0;\n\n\ncontract BlacklistStore is Operable {\n\n    mapping (address => uint256) public blacklisted;\n\n    /**\n     * @dev Checks if account is blacklisted\n     * @param _account The address to check\n     * @param _status The address status    \n     */\n    function setBlacklist(address _account, uint256 _status) public onlyOperator {\n        blacklisted[_account] = _status;\n    }\n\n}\n\n// File: contracts/BlacklistableToken.sol\n\npragma solidity 0.5.0;\n\n\n\n/**\n * @title BlacklistableToken\n * @dev Allows accounts to be blacklisted by a \"blacklister\" role\n */\ncontract BlacklistableToken is PausableToken {\n\n    BlacklistStore public blacklistStore;\n\n    address private _blacklister;\n\n    event BlacklisterChanged(address indexed previousBlacklister, address indexed newBlacklister);\n    event BlacklistStoreSet(address indexed previousBlacklistStore, address indexed newblacklistStore);\n    event Blacklist(address indexed account, uint256 _status);\n\n\n    /**\n     * @dev Throws if argument account is blacklisted\n     * @param _account The address to check\n     */\n    modifier notBlacklisted(address _account) {\n        require(blacklistStore.blacklisted(_account) == 0, \"Account in the blacklist\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the blacklister\n     */\n    modifier onlyBlacklister() {\n        require(msg.sender == _blacklister, \"msg.sener should be blacklister\");\n        _;\n    }\n\n    /**\n     * @dev Tells the address of the blacklister\n     * @return The address of the blacklister\n     */\n    function blacklister() public view returns (address) {\n        return _blacklister;\n    }\n    \n    /**\n     * @dev Set the blacklistStore\n     * @param _newblacklistStore The blacklistStore address to set\n     */\n    function setBlacklistStore(address _newblacklistStore) public onlyOwner returns (bool) {\n        emit BlacklistStoreSet(address(blacklistStore), _newblacklistStore);\n        blacklistStore = BlacklistStore(_newblacklistStore);\n        return true;\n    }\n    \n    /**\n     * @dev Update the blacklister \n     * @param _newBlacklister The newBlacklister to update\n     */\n    function updateBlacklister(address _newBlacklister) public onlyOwner {\n        require(_newBlacklister != address(0), \"Cannot update the blacklister to the zero address\");\n        emit BlacklisterChanged(_blacklister, _newBlacklister);\n        _blacklister = _newBlacklister;\n    }\n\n    /**\n     * @dev Checks if account is blacklisted\n     * @param _account The address status to query\n     * @return the address status \n     */\n    function queryBlacklist(address _account) public view returns (uint256) {\n        return blacklistStore.blacklisted(_account);\n    }\n\n    /**\n     * @dev Adds account to blacklist\n     * @param _account The address to blacklist\n     * @param _status The address status to change\n     */\n    function changeBlacklist(address _account, uint256 _status) public onlyBlacklister {\n        blacklistStore.setBlacklist(_account, _status);\n        emit Blacklist(_account, _status);\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public notBlacklisted(msg.sender) notBlacklisted(_spender) returns (bool success) {\n        return super.approve(_spender, _value);\n    }\n    \n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    ) public notBlacklisted(msg.sender) notBlacklisted(_spender) returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    } \n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue \n    ) public notBlacklisted(msg.sender) notBlacklisted(_spender) returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value\n    ) public notBlacklisted(_from) notBlacklisted(_to) notBlacklisted(msg.sender) returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    } \n\n    function transfer(\n        address _to, \n        uint256 _value\n    ) public notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n}\n\n// File: contracts/BurnableToken.sol\n\npragma solidity 0.5.0;\n\n\ncontract BurnableToken is BlacklistableToken {\n\n    event Burn(address indexed burner, uint256 value);\n    \n    /**\n     * @dev holder can burn some of its own tokens\n     * amount is less than or equal to the minter's account balance\n     * @param _value uint256 the amount of tokens to be burned\n    */\n    function burn(\n        uint256 _value\n    ) public whenNotPaused notBlacklisted(msg.sender) returns (bool success) {   \n        tokenStore.subBalance(msg.sender, _value);\n        tokenStore.subTotalSupply(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0), _value);\n        return true;\n    }\n\n}\n\n// File: contracts/MintableToken.sol\n\npragma solidity 0.5.0;\n\n\n\ncontract MintableToken is BlacklistableToken {\n\n    event MinterChanged(address indexed previousMinter, address indexed newMinter);\n    event Mint(address indexed minter, address indexed to, uint256 value);\n\n    address private _minter;\n\n    modifier onlyMinter() {\n        require(msg.sender == _minter, \"msg.sender should be minter\");\n        _;\n    }\n\n    /**\n     * @dev Tells the address of the blacklister\n     * @return The address of the blacklister\n     */\n    function minter() public view returns (address) {\n        return _minter;\n    }\n \n    /**\n     * @dev update the minter\n     * @param _newMinter The newMinter to update\n     */\n    function updateMinter(address _newMinter) public onlyOwner {\n        require(_newMinter != address(0), \"Cannot update the newPauser to the zero address\");\n        emit MinterChanged(_minter, _newMinter);\n        _minter = _newMinter;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _value The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(\n        address _to, \n        uint256 _value\n    ) public onlyMinter whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool) {\n        require(_to != address(0), \"Cannot mint to zero address\");\n        tokenStore.addTotalSupply(_value);\n        tokenStore.addBalance(_to, _value);  \n        emit Mint(msg.sender, _to, _value);\n        emit Transfer(address(0), _to, _value);\n        return true;\n    }\n\n}\n\n// File: contracts/PingAnToken.sol\n\npragma solidity 0.5.0;\n\n\n\n\ncontract PingAnToken is BurnableToken, MintableToken {\n\n\n    /**\n     * contract only can initialized once \n     */\n    bool private initialized = true;\n\n    /**\n     * @dev sets 0 initials tokens, the owner.\n     * this serves as the constructor for the proxy but compiles to the\n     * memory model of the Implementation contract.\n     * @param _owner The owner to initials\n     */\n    function initialize(address _owner) public {\n        require(!initialized, \"already initialized\");\n        require(_owner != address(0), \"Cannot initialize the owner to zero address\");\n        setOwner(_owner);\n        initialized = true;\n    }\n\n}",
  "bytecode": ""
}