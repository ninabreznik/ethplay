{
  "address": "0x946d9d4c682e64d616f945536fdb42357867666b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Richer3D",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.25;\n\ncontract Richer3D {\n    using SafeMath for *;\n    \n    //************\n    //Game Setting\n    //************\n    string constant public name = \"Richer3D\";\n    string constant public symbol = \"R3D\";\n    address constant private sysAdminAddress = 0x4A3913ce9e8882b418a0Be5A43d2C319c3F0a7Bd;\n    address constant private sysInviterAddress = 0xC5E41EC7fa56C0656Bc6d7371a8706Eb9dfcBF61;\n    address constant private sysDevelopAddress = 0xCf3A25b73A493F96C15c8198319F0218aE8cAA4A;\n    address constant private p3dInviterAddress = 0x82Fc4514968b0c5FdDfA97ed005A01843d0E117d;\n    uint256 constant cycleTime = 24 hours;\n    bool calculating_target = false;\n    //************\n    //Game Data\n    //************\n    uint256 private roundNumber;\n    uint256 private dayNumber;\n    uint256 private totalPlayerNumber;\n    uint256 private platformBalance;\n    //*************\n    //Game DataBase\n    //*************\n    mapping(uint256=>DataModal.RoundInfo) private rInfoXrID;\n    mapping(address=>DataModal.PlayerInfo) private pInfoXpAdd;\n    mapping(address=>uint256) private pIDXpAdd;\n    mapping(uint256=>address) private pAddXpID;\n    \n    //*************\n    // P3D Data\n    //*************\n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n \n    mapping(uint256=>uint256) private p3dDividesXroundID;\n\n    //*************\n    //Game Events\n    //*************\n    event newPlayerJoinGameEvent(address indexed _address,uint256 indexed _amount,bool indexed _JoinWithEth,uint256 _timestamp);\n    event calculateTargetEvent(uint256 indexed _roundID);\n    \n    constructor() public {\n        dayNumber = 1;\n    }\n    \n    function() external payable {\n\n    }\n    \n    //************\n    //Game payable\n    //************\n    function joinGameWithInviterID(uint256 _inviterID) public payable {\n        uint256 _timestamp = now;\n        address _senderAddress = msg.sender;\n        uint256 _eth = msg.value;\n        require(_timestamp.sub(rInfoXrID[roundNumber].lastCalculateTime) < cycleTime,\"Waiting for settlement\");\n        if(pIDXpAdd[_senderAddress] < 1) {\n            registerWithInviterID(_senderAddress,_inviterID);\n        }\n        buyCore(_senderAddress,pInfoXpAdd[_senderAddress].inviterAddress,_eth);\n        emit newPlayerJoinGameEvent(msg.sender,msg.value,true,_timestamp);\n    }\n    \n    function joinGameWithInviterIDForAddress(uint256 _inviterID,address _address) public payable {\n        uint256 _timestamp = now;\n        address _senderAddress = _address;\n        uint256 _eth = msg.value;\n        require(_timestamp.sub(rInfoXrID[roundNumber].lastCalculateTime) < cycleTime,\"Waiting for settlement\");\n        if(pIDXpAdd[_senderAddress] < 1) {\n            registerWithInviterID(_senderAddress,_inviterID);\n        }\n        buyCore(_senderAddress,pInfoXpAdd[_senderAddress].inviterAddress,_eth);\n        emit newPlayerJoinGameEvent(msg.sender,msg.value,true,_timestamp);\n    }\n    \n    //********************\n    // Method need Gas\n    //********************\n    function joinGameWithBalance(uint256 _amount) public {\n        uint256 _timestamp = now;\n        address _senderAddress = msg.sender;\n        require(_timestamp.sub(rInfoXrID[roundNumber].lastCalculateTime) < cycleTime,\"Waiting for settlement\");\n        uint256 balance = getUserBalance(_senderAddress);\n        require(balance >= _amount,\"balance is not enough\");\n        buyCore(_senderAddress,pInfoXpAdd[_senderAddress].inviterAddress,_amount);\n        pInfoXpAdd[_senderAddress].withDrawNumber = pInfoXpAdd[_senderAddress].withDrawNumber.sub(_amount);\n        emit newPlayerJoinGameEvent(_senderAddress,_amount,false,_timestamp);\n    }\n    \n    function calculateTarget() public {\n        require(calculating_target == false,\"Waiting....\");\n        calculating_target = true;\n        uint256 _timestamp = now;\n        require(_timestamp.sub(rInfoXrID[roundNumber].lastCalculateTime) >= cycleTime,\"Less than cycle Time from last operation\");\n        //allocate p3d dividends to contract \n        uint256 dividends = p3dContract.myDividends(true);\n        if(dividends > 0) {\n            if(rInfoXrID[roundNumber].dayInfoXDay[dayNumber].playerNumber > 0) {\n                p3dDividesXroundID[roundNumber] = p3dDividesXroundID[roundNumber].add(dividends);\n                p3dContract.withdraw();    \n            } else {\n                platformBalance = platformBalance.add(dividends).add(p3dDividesXroundID[roundNumber]);\n                p3dContract.withdraw();    \n            }\n        }\n        uint256 increaseBalance = getIncreaseBalance(dayNumber,roundNumber);\n        uint256 targetBalance = getDailyTarget(roundNumber,dayNumber);\n        uint256 ethForP3D = increaseBalance.div(100);\n        if(increaseBalance >= targetBalance) {\n            //buy p3d\n            if(increaseBalance > 0) {\n                p3dContract.buy.value(ethForP3D)(p3dInviterAddress);\n            }\n            //continue\n            dayNumber++;\n            rInfoXrID[roundNumber].totalDay = dayNumber;\n            if(rInfoXrID[roundNumber].startTime == 0) {\n                rInfoXrID[roundNumber].startTime = _timestamp;\n                rInfoXrID[roundNumber].lastCalculateTime = _timestamp;\n            } else {\n                rInfoXrID[roundNumber].lastCalculateTime = _timestamp;   \n            }\n             //dividends for mine holder\n            rInfoXrID[roundNumber].increaseETH = rInfoXrID[roundNumber].increaseETH.sub(getETHNeedPay(roundNumber,dayNumber.sub(1))).sub(ethForP3D);\n            emit calculateTargetEvent(0);\n        } else {\n            //Game over, start new round\n            bool haveWinner = false;\n            if(dayNumber > 1) {\n                sendBalanceForDevelop(roundNumber);\n                if(platformBalance > 0) {\n                    uint256 platformBalanceAmount = platformBalance;\n                    platformBalance = 0;\n                    sysAdminAddress.transfer(platformBalanceAmount);\n                } \n                haveWinner = true;\n            }\n            rInfoXrID[roundNumber].winnerDay = dayNumber.sub(1);\n            roundNumber++;\n            dayNumber = 1;\n            if(haveWinner) {\n                rInfoXrID[roundNumber].bounsInitNumber = getBounsWithRoundID(roundNumber.sub(1)).div(10);\n            } else {\n                rInfoXrID[roundNumber].bounsInitNumber = getBounsWithRoundID(roundNumber.sub(1));\n            }\n            rInfoXrID[roundNumber].totalDay = 1;\n            rInfoXrID[roundNumber].startTime = _timestamp;\n            rInfoXrID[roundNumber].lastCalculateTime = _timestamp;\n            emit calculateTargetEvent(roundNumber);\n        }\n        calculating_target = false;\n    }\n\n    function registerWithInviterID(address _senderAddress, uint256 _inviterID) private {\n        totalPlayerNumber++;\n        pIDXpAdd[_senderAddress] = totalPlayerNumber;\n        pAddXpID[totalPlayerNumber] = _senderAddress;\n        pInfoXpAdd[_senderAddress].inviterAddress = pAddXpID[_inviterID];\n    }\n    \n    function buyCore(address _playerAddress,address _inviterAddress,uint256 _amount) private {\n        require(_amount >= 0.01 ether,\"You need to pay 0.01 ether at lesat\");\n        //10 percent of the investment amount belongs to the inviter\n        address _senderAddress = _playerAddress;\n        if(_inviterAddress == address(0) || _inviterAddress == _senderAddress) {\n            platformBalance = platformBalance.add(_amount/10);\n        } else {\n            pInfoXpAdd[_inviterAddress].inviteEarnings = pInfoXpAdd[_inviterAddress].inviteEarnings.add(_amount/10);\n        }\n        //Record the order of purchase for each user\n        uint256 playerIndex = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].playerNumber.add(1);\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].playerNumber = playerIndex;\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].addXIndex[playerIndex] = _senderAddress;\n        //After the user purchases, they can add 50% more, except for the first user\n        if(rInfoXrID[roundNumber].increaseETH > 0) {\n            rInfoXrID[roundNumber].dayInfoXDay[dayNumber].increaseMine = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].increaseMine.add(_amount*5/2);\n            rInfoXrID[roundNumber].totalMine = rInfoXrID[roundNumber].totalMine.add(_amount*15/2);\n        } else {\n            rInfoXrID[roundNumber].totalMine = rInfoXrID[roundNumber].totalMine.add(_amount*5);\n        }\n        //Record the accumulated ETH in the prize pool, the newly added ETH each day, the ore and the ore actually purchased by each user\n        rInfoXrID[roundNumber].increaseETH = rInfoXrID[roundNumber].increaseETH.add(_amount).sub(_amount/10);\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].increaseETH = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].increaseETH.add(_amount).sub(_amount/10);\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].actualMine = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].actualMine.add(_amount*5);\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].mineAmountXAddress[_senderAddress] = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].mineAmountXAddress[_senderAddress].add(_amount*5);\n        rInfoXrID[roundNumber].dayInfoXDay[dayNumber].ethPayAmountXAddress[_senderAddress] = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].ethPayAmountXAddress[_senderAddress].add(_amount);\n    }\n    \n    function playerWithdraw(uint256 _amount) public {\n        address _senderAddress = msg.sender;\n        uint256 balance = getUserBalance(_senderAddress);\n        require(balance>=_amount,\"Lack of balance\");\n        //The platform charges users 1% of the commission fee, and the rest is withdrawn to the user account\n        platformBalance = platformBalance.add(_amount.div(100));\n        pInfoXpAdd[_senderAddress].withDrawNumber = pInfoXpAdd[_senderAddress].withDrawNumber.add(_amount);\n        _senderAddress.transfer(_amount.sub(_amount.div(100)));\n    }\n    \n    function sendBalanceForDevelop(uint256 _roundID) private {\n        uint256 bouns = getBounsWithRoundID(_roundID).div(5);\n        sysDevelopAddress.transfer(bouns.div(2));\n        sysInviterAddress.transfer(bouns.sub(bouns.div(2)));\n    }\n    \n    //If no users participate in the game for 10 consecutive rounds, the administrator can destroy the contract\n    function kill() public {\n        require(msg.sender == sysAdminAddress,\"You can't do this\");\n        require(roundNumber>=10,\"Wait patiently\");\n        bool noPlayer;\n        //Check if users have participated in the last 10 rounds\n        for(uint256 i=0;i<10;i++) {\n            uint256 eth = rInfoXrID[roundNumber-i].increaseETH;\n            if(eth == 0) {\n                noPlayer = true;\n            } else {\n                noPlayer = false;\n            }\n        }\n        require(noPlayer,\"This cannot be done because the user is still present\");\n        uint256 p3dBalance = p3dContract.balanceOf(address(this));\n        p3dContract.transfer(sysAdminAddress,p3dBalance);\n        selfdestruct(sysAdminAddress);\n    }\n\n    //********************\n    // Calculate Data\n    //********************\n    function getBounsWithRoundID(uint256 _roundID) private view returns(uint256 _bouns) {\n        _bouns = _bouns.add(rInfoXrID[_roundID].bounsInitNumber).add(rInfoXrID[_roundID].increaseETH);\n        return(_bouns);\n    }\n    \n    function getETHNeedPay(uint256 _roundID,uint256 _dayID) private view returns(uint256 _amount) {\n        if(_dayID >=2) {\n            uint256 mineTotal = rInfoXrID[_roundID].totalMine.sub(rInfoXrID[_roundID].dayInfoXDay[_dayID].actualMine).sub(rInfoXrID[_roundID].dayInfoXDay[_dayID].increaseMine);\n            _amount = mineTotal.mul(getTransformRate()).div(10000);\n        } else {\n            _amount = 0;\n        }\n        return(_amount);\n    }\n    \n    function getIncreaseBalance(uint256 _dayID,uint256 _roundID) private view returns(uint256 _balance) {\n        _balance = rInfoXrID[_roundID].dayInfoXDay[_dayID].increaseETH;\n        return(_balance);\n    }\n    \n    function getMineInfoInDay(address _userAddress,uint256 _roundID, uint256 _dayID) private view returns(uint256 _totalMine,uint256 _myMine,uint256 _additional) {\n        //Through traversal, the total amount of ore by the end of the day, the amount of ore held by users, and the amount of additional additional secondary ore\n        for(uint256 i=1;i<=_dayID;i++) {\n            if(rInfoXrID[_roundID].increaseETH == 0) return(0,0,0);\n            uint256 userActualMine = rInfoXrID[_roundID].dayInfoXDay[i].mineAmountXAddress[_userAddress];\n            uint256 increaseMineInDay = rInfoXrID[_roundID].dayInfoXDay[i].increaseMine;\n            _myMine = _myMine.add(userActualMine);\n            _totalMine = _totalMine.add(rInfoXrID[_roundID].dayInfoXDay[i].increaseETH*50/9);\n            uint256 dividendsMine = _myMine.mul(increaseMineInDay).div(_totalMine);\n            _totalMine = _totalMine.add(increaseMineInDay);\n            _myMine = _myMine.add(dividendsMine);\n            _additional = dividendsMine;\n        }\n        return(_totalMine,_myMine,_additional);\n    }\n    \n    //Ore ->eth conversion rate\n    function getTransformRate() private pure returns(uint256 _rate) {\n        return(60);\n    }\n    \n    //Calculate the amount of eth to be paid in x day for user\n    function getTransformMineInDay(address _userAddress,uint256 _roundID,uint256 _dayID) private view returns(uint256 _transformedMine) {\n        (,uint256 userMine,) = getMineInfoInDay(_userAddress,_roundID,_dayID.sub(1));\n        uint256 rate = getTransformRate();\n        _transformedMine = userMine.mul(rate).div(10000);\n        return(_transformedMine);\n    }\n    \n    //Calculate the amount of eth to be paid in x day for all people\n    function calculateTotalMinePay(uint256 _roundID,uint256 _dayID) private view returns(uint256 _needToPay) {\n        uint256 mine = rInfoXrID[_roundID].totalMine.sub(rInfoXrID[_roundID].dayInfoXDay[_dayID].actualMine).sub(rInfoXrID[_roundID].dayInfoXDay[_dayID].increaseMine);\n        _needToPay = mine.mul(getTransformRate()).div(10000);\n        return(_needToPay);\n    }\n\n    //Calculate daily target values\n    function getDailyTarget(uint256 _roundID,uint256 _dayID) private view returns(uint256) {\n        uint256 needToPay = calculateTotalMinePay(_roundID,_dayID);\n        uint256 target = 0;\n        if (_dayID > 33) {\n            target = (SafeMath.pwr(((3).mul(_dayID).sub(100)),3).mul(50).add(1000000)).mul(needToPay).div(1000000);\n            return(target);\n        } else {\n            target = ((1000000).sub(SafeMath.pwr((100).sub((3).mul(_dayID)),3))).mul(needToPay).div(1000000);\n            if(target == 0) target = 0.0063 ether;\n            return(target);            \n        }\n    }\n    \n    //Query user income balance\n    function getUserBalance(address _userAddress) private view returns(uint256 _balance) {\n        if(pIDXpAdd[_userAddress] == 0) {\n            return(0);\n        }\n        //Amount of user withdrawal\n        uint256 withDrawNumber = pInfoXpAdd[_userAddress].withDrawNumber;\n        uint256 totalTransformed = 0;\n        //Calculate the number of ETH users get through the daily conversion\n        bool islocked = checkContructIsLocked();\n        for(uint256 i=1;i<=roundNumber;i++) {\n            if(islocked && i == roundNumber) {\n                return;\n            }\n            for(uint256 j=1;j<rInfoXrID[i].totalDay;j++) {\n                totalTransformed = totalTransformed.add(getTransformMineInDay(_userAddress,i,j));\n            }\n        }\n        //Get the ETH obtained by user invitation\n        uint256 inviteEarnings = pInfoXpAdd[_userAddress].inviteEarnings;\n        _balance = totalTransformed.add(inviteEarnings).add(getBounsEarnings(_userAddress)).add(getHoldEarnings(_userAddress)).add(getUserP3DDivEarnings(_userAddress)).sub(withDrawNumber);\n        return(_balance);\n    }\n    \n    //calculate how much eth user have paid\n    function getUserPaidInCurrentRound(address _userAddress) public view returns(uint256 _payAmount) {\n        if(pInfoXpAdd[_userAddress].getPaidETHBackXRoundID[roundNumber]) {\n            return(0);\n        }\n        for(uint256 i=1;i<=rInfoXrID[roundNumber].totalDay;i++) {\n             _payAmount = _payAmount.add(rInfoXrID[roundNumber].dayInfoXDay[i].ethPayAmountXAddress[_userAddress]);\n        }\n        return(_payAmount);\n    }\n    \n    //user can get eth back if the contract is locked\n    function getPaidETHBack() public {\n        require(checkContructIsLocked(),\"The contract is in normal operation\");\n        address _sender = msg.sender;\n        uint256 paidAmount = getUserPaidInCurrentRound(_sender);\n        pInfoXpAdd[_sender].getPaidETHBackXRoundID[roundNumber] = true;\n        _sender.transfer(paidAmount);\n    }\n    \n    //Calculated the number of ETH users won in the prize pool\n    function getBounsEarnings(address _userAddress) private view returns(uint256 _bounsEarnings) {\n        for(uint256 i=1;i<roundNumber;i++) {\n            uint256 winnerDay = rInfoXrID[i].winnerDay;\n            uint256 myAmountInWinnerDay=rInfoXrID[i].dayInfoXDay[winnerDay].ethPayAmountXAddress[_userAddress];\n            uint256 totalAmountInWinnerDay=rInfoXrID[i].dayInfoXDay[winnerDay].increaseETH*10/9;\n            if(winnerDay == 0 || totalAmountInWinnerDay == 0) {\n                _bounsEarnings = _bounsEarnings;\n            } else {\n                uint256 bouns = getBounsWithRoundID(i).mul(14).div(25);\n                _bounsEarnings = _bounsEarnings.add(bouns.mul(myAmountInWinnerDay).div(totalAmountInWinnerDay));\n            }\n        }\n        return(_bounsEarnings);\n    }\n\n    //Compute the ETH that the user acquires by holding the ore\n    function getHoldEarnings(address _userAddress) private view returns(uint256 _holdEarnings) {\n        for(uint256 i=1;i<roundNumber;i++) {\n            uint256 winnerDay = rInfoXrID[i].winnerDay;\n            if(winnerDay == 0) {\n                _holdEarnings = _holdEarnings;\n            } else {  \n                (uint256 totalMine,uint256 myMine,) = getMineInfoInDay(_userAddress,i,rInfoXrID[i].totalDay);\n                uint256 bouns = getBounsWithRoundID(i).mul(7).div(50);\n                _holdEarnings = _holdEarnings.add(bouns.mul(myMine).div(totalMine));    \n            }\n        }\n        return(_holdEarnings);\n    }\n    \n    //Calculate user's P3D bonus\n    function getUserP3DDivEarnings(address _userAddress) private view returns(uint256 _myP3DDivide) {\n        if(rInfoXrID[roundNumber].totalDay <= 1) {\n            return(0);\n        }\n        for(uint256 i=1;i<roundNumber;i++) {\n            uint256 p3dDay = rInfoXrID[i].totalDay;\n            uint256 myAmountInp3dDay=rInfoXrID[i].dayInfoXDay[p3dDay].ethPayAmountXAddress[_userAddress];\n            uint256 totalAmountInP3dDay=rInfoXrID[i].dayInfoXDay[p3dDay].increaseETH*10/9;\n            if(p3dDay == 0 || totalAmountInP3dDay == 0) {\n                _myP3DDivide = _myP3DDivide;\n            } else {\n                uint256 p3dDividesInRound = p3dDividesXroundID[i];\n                _myP3DDivide = _myP3DDivide.add(p3dDividesInRound.mul(myAmountInp3dDay).div(totalAmountInP3dDay));\n            }\n        }\n        return(_myP3DDivide);\n    }\n    \n    //*******************\n    // Check contract lock\n    //*******************\n    function checkContructIsLocked() public view returns(bool) {\n        uint256 time = now.sub(rInfoXrID[roundNumber].lastCalculateTime);\n        if(time >= 2*cycleTime) {\n            return(true);\n        } else {\n            return(false);\n        }\n    }\n\n    //*******************\n    // UI \n    //*******************\n    function getDefendPlayerList() public view returns(address[]) {\n        if (rInfoXrID[roundNumber].dayInfoXDay[dayNumber-1].playerNumber == 0) {\n            address[] memory playerListEmpty = new address[](0);\n            return(playerListEmpty);\n        }\n        uint256 number = rInfoXrID[roundNumber].dayInfoXDay[dayNumber-1].playerNumber;\n        if(number > 100) {\n            number == 100;\n        }\n        address[] memory playerList = new address[](number);\n        for(uint256 i=0;i<number;i++) {\n            playerList[i] = rInfoXrID[roundNumber].dayInfoXDay[dayNumber-1].addXIndex[i+1];\n        }\n        return(playerList);\n    }\n    \n    function getAttackPlayerList() public view returns(address[]) {\n        uint256 number = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].playerNumber;\n        if(number > 100) {\n            number == 100;\n        }\n        address[] memory playerList = new address[](number);\n        for(uint256 i=0;i<number;i++) {\n            playerList[i] = rInfoXrID[roundNumber].dayInfoXDay[dayNumber].addXIndex[i+1];\n        }\n        return(playerList);\n    }\n    \n    function getCurrentFieldBalanceAndTarget() public view returns(uint256 day,uint256 bouns,uint256 todayBouns,uint256 dailyTarget) {\n        uint256 fieldBalance = getBounsWithRoundID(roundNumber).mul(7).div(10);\n        uint256 todayBalance = getIncreaseBalance(dayNumber,roundNumber) ;\n        dailyTarget = getDailyTarget(roundNumber,dayNumber);\n        return(dayNumber,fieldBalance,todayBalance,dailyTarget);\n    }\n    \n    function getUserIDAndInviterEarnings() public view returns(uint256 userID,uint256 inviteEarning) {\n        return(pIDXpAdd[msg.sender],pInfoXpAdd[msg.sender].inviteEarnings);\n    }\n    \n    function getCurrentRoundInfo() public view returns(uint256 _roundID,uint256 _dayNumber,uint256 _ethMineNumber,uint256 _startTime,uint256 _lastCalculateTime) {\n        DataModal.RoundInfo memory roundInfo = rInfoXrID[roundNumber];\n        (uint256 totalMine,,) = getMineInfoInDay(msg.sender,roundNumber,dayNumber);\n        return(roundNumber,dayNumber,totalMine,roundInfo.startTime,roundInfo.lastCalculateTime);\n    }\n    \n    function getUserProperty() public view returns(uint256 ethMineNumber,uint256 holdEarning,uint256 transformRate,uint256 ethBalance,uint256 ethTranslated,uint256 ethMineCouldTranslateToday,uint256 ethCouldGetToday) {\n        address _userAddress = msg.sender;\n        if(pIDXpAdd[_userAddress] <1) {\n            return(0,0,0,0,0,0,0);        \n        }\n        (,uint256 myMine,uint256 additional) = getMineInfoInDay(_userAddress,roundNumber,dayNumber);\n        ethMineNumber = myMine;\n        holdEarning = additional;\n        transformRate = getTransformRate();      \n        ethBalance = getUserBalance(_userAddress);\n        uint256 totalTransformed = 0;\n        for(uint256 i=1;i<rInfoXrID[roundNumber].totalDay;i++) {\n            totalTransformed = totalTransformed.add(getTransformMineInDay(_userAddress,roundNumber,i));\n        }\n        ethTranslated = totalTransformed;\n        ethCouldGetToday = getTransformMineInDay(_userAddress,roundNumber,dayNumber);\n        (,uint256 userMine,) = getMineInfoInDay(_userAddress,roundNumber,dayNumber.sub(1));\n        if(userMine == 0) {\n            ethCouldGetToday = 0;\n        }else{\n            ethMineCouldTranslateToday = myMine.mul(transformRate).div(10000);\n        }\n        return(\n            ethMineNumber,\n            holdEarning,\n            transformRate,\n            ethBalance,\n            ethTranslated,\n            ethMineCouldTranslateToday,\n            ethCouldGetToday\n            );\n    }\n    \n    function getPlatformBalance() public view returns(uint256 _platformBalance) {\n        require(msg.sender == sysAdminAddress,\"Ummmmm......Only admin could do this\");\n        return(platformBalance);\n    }\n\n    //************\n    // for statistics\n    //************\n    function getDataOfGame() public view returns(uint256 _playerNumber,uint256 _dailyIncreased,uint256 _dailyTransform,uint256 _contractBalance,uint256 _userBalanceLeft,uint256 _platformBalance,uint256 _mineBalance,uint256 _balanceOfMine) {\n        for(uint256 i=1;i<=totalPlayerNumber;i++) {\n            address userAddress = pAddXpID[i];\n            _userBalanceLeft = _userBalanceLeft.add(getUserBalance(userAddress));\n        }\n        return(\n            totalPlayerNumber,\n            getIncreaseBalance(dayNumber,roundNumber),\n            calculateTotalMinePay(roundNumber,dayNumber),\n            address(this).balance,\n            _userBalanceLeft,\n            platformBalance,\n            getBounsWithRoundID(roundNumber),\n            getBounsWithRoundID(roundNumber).mul(7).div(10)\n            );\n    }\n    \n    function getUserAddressList() public view returns(address[]) {\n        address[] memory addressList = new address[](totalPlayerNumber);\n        for(uint256 i=0;i<totalPlayerNumber;i++) {\n            addressList[i] = pAddXpID[i+1];\n        }\n        return(addressList);\n    }\n    \n    function getUsersInfo() public view returns(uint256[7][]){\n        uint256[7][] memory infoList = new uint256[7][](totalPlayerNumber);\n        for(uint256 i=0;i<totalPlayerNumber;i++) {\n            address userAddress = pAddXpID[i+1];\n            (,uint256 myMine,uint256 additional) = getMineInfoInDay(userAddress,roundNumber,dayNumber);\n            uint256 totalTransformed = 0;\n            for(uint256 j=1;j<=roundNumber;j++) {\n                for(uint256 k=1;k<=rInfoXrID[j].totalDay;k++) {\n                    totalTransformed = totalTransformed.add(getTransformMineInDay(userAddress,j,k));\n                }\n            }\n            infoList[i][0] = myMine ;\n            infoList[i][1] = getTransformRate();\n            infoList[i][2] = additional;\n            infoList[i][3] = getUserBalance(userAddress);\n            infoList[i][4] = getUserBalance(userAddress).add(pInfoXpAdd[userAddress].withDrawNumber);\n            infoList[i][5] = pInfoXpAdd[userAddress].inviteEarnings;\n            infoList[i][6] = totalTransformed;\n        }        \n        return(infoList);\n    }\n    \n    function getP3DInfo() public view returns(uint256 _p3dTokenInContract,uint256 _p3dDivInRound) {\n        _p3dTokenInContract = p3dContract.balanceOf(address(this));\n        _p3dDivInRound = p3dDividesXroundID[roundNumber];\n        return(_p3dTokenInContract,_p3dDivInRound);\n    }\n    \n}\n\n//P3D Interface\ninterface HourglassInterface {\n    function buy(address _playerAddress) payable external returns(uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\n    function balanceOf(address _customerAddress) external view returns(uint256);\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n}\n\nlibrary DataModal {\n    struct PlayerInfo {\n        uint256 inviteEarnings;\n        address inviterAddress;\n        uint256 withDrawNumber;\n        mapping(uint256=>bool) getPaidETHBackXRoundID;\n    }\n    \n    struct DayInfo {\n        uint256 playerNumber;\n        uint256 actualMine;\n        uint256 increaseETH;\n        uint256 increaseMine;\n        mapping(uint256=>address) addXIndex;\n        mapping(address=>uint256) ethPayAmountXAddress;\n        mapping(address=>uint256) mineAmountXAddress;\n    }\n    \n    struct RoundInfo {\n        uint256 startTime;\n        uint256 lastCalculateTime;\n        uint256 bounsInitNumber;\n        uint256 increaseETH;\n        uint256 totalDay;\n        uint256 winnerDay;\n        uint256 totalMine;\n        mapping(uint256=>DayInfo) dayInfoXDay;\n    }\n}\n\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath div failed\");\n        uint256 c = a / b;\n        return c;\n    } \n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": "60806040526000805460ff1916905534801561001a57600080fd5b506001600255612ec08061002f6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012957806317e22621146101b35780631cfce386146101be578063213f44ab146101d357806332b1ad5a1461023857806341c0e1b5146102615780635629365b146102765780637207f7bd1461028e578063747dff42146102a55780637800a9f6146102e55780637d564056146103135780637f4316ec1461036057806387d741c91461037557806395d89b411461038a57806399c0058c1461039f578063aaa3de26146103b4578063ab4215cc1461043a578063ba9bf75714610490578063eafe5eec146104b7578063f3f4aef3146104cf578063f9b62bbd146104e4578063fd9b41ff14610505575b005b34801561013557600080fd5b5061013e610540565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610127600435610577565b3480156101ca57600080fd5b50610127610692565b3480156101df57600080fd5b506101e8610d80565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561022457818101518382015260200161020c565b505050509050019250505060405180910390f35b34801561024457600080fd5b5061024d610e15565b604080519115158252519081900360200190f35b34801561026d57600080fd5b50610127610e5c565b34801561028257600080fd5b50610127600435611153565b610127600435600160a060020a036024351661127c565b3480156102b157600080fd5b506102ba611398565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102f157600080fd5b506102fa611446565b6040805192835260208301919091528051918290030190f35b34801561031f57600080fd5b506103286114fd565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b34801561036c57600080fd5b506101e861164d565b34801561038157600080fd5b50610127611775565b34801561039657600080fd5b5061013e611872565b3480156103ab57600080fd5b506101e86118a9565b3480156103c057600080fd5b506103c961197a565b60405180806020018281038252838181518152602001915080516000925b818410156104295760208085028401015160e080838360005b83811015610418578181015183820152602001610400565b5050505090500192600101926103e7565b925050509250505060405180910390f35b34801561044657600080fd5b5061044f611b9f565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561049c57600080fd5b506104a5611c6a565b60408051918252519081900360200190f35b3480156104c357600080fd5b50610127600435611d03565b3480156104db57600080fd5b506102fa611ea0565b3480156104f057600080fd5b506104a5600160a060020a0360043516611ec0565b34801561051157600080fd5b5061051a611f69565b604080519485526020850193909352838301919091526060830152519081900360800190f35b60408051808201909152600881527f5269636865723344000000000000000000000000000000000000000000000000602082015281565b600180546000908152600560205260409020015442903390349062015180906105a790859063ffffffff611fb716565b106105fc576040805160e560020a62461bcd02815260206004820152601660248201527f57616974696e6720666f7220736574746c656d656e7400000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600760205260409020546001111561062757610627828561201c565b600160a060020a038083166000908152600660205260409020600101546106519184911683612092565b604080518481529051600191349133917f81b572186f5714544c1771925e95e44842341edc6b270a95a5cfce9265e2f236919081900360200190a450505050565b6000805481908190819081908190819060ff16156106fa576040805160e560020a62461bcd02815260206004820152600b60248201527f57616974696e672e2e2e2e000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460ff19166001908117825580548252600560205260409091200154429750620151809061073290899063ffffffff611fb716565b10156107ae576040805160e560020a62461bcd02815260206004820152602860248201527f4c657373207468616e206379636c652054696d652066726f6d206c617374206f60448201527f7065726174696f6e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f688abbf700000000000000000000000000000000000000000000000000000000815260016004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163688abbf79160248083019260209291908290030181600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051955060008611156109ef5760015460009081526005602090815260408083206002548452600701909152812054111561092f5760015460009081526009602052604090205461089c908763ffffffff61251316565b6001546000908152600960205260408082209290925581517f3ccfd60b000000000000000000000000000000000000000000000000000000008152915173b3775fb83f7d12a36e0475abdd1fca35c091efbe92633ccfd60b92600480830193919282900301818387803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b505050506109ef565b6001546000908152600960205260409020546004546109659190610959908963ffffffff61251316565b9063ffffffff61251316565b60048190555073b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a0316633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b505050505b6109fd60025460015461256e565b9450610a0d600154600254612591565b9350610a2085606463ffffffff61265516565b9250838510610be9576000851115610ae257604080517ff088d5470000000000000000000000000000000000000000000000000000000081527382fc4514968b0c5fddfa97ed005a01843d0e117d6004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163f088d54791869160248082019260209290919082900301818588803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b50505050506040513d6020811015610adf57600080fd5b50505b600280546001908101918290558054600090815260056020526040808220600401939093559054815220541515610b3857600180546000908152600560205260408082208a905582548252902001879055610b4f565b600180546000908152600560205260409020018790555b610ba483610b98610b77600154610b726001600254611fb790919063ffffffff16565b6126c3565b6001546000908152600560205260409020600301549063ffffffff611fb716565b9063ffffffff611fb716565b6001546000908152600560205260408082206003019290925590517f425b24ddd6e59bf46cbd00a01aa7151a499bc4256559ab23cece018cc7141a28908290a2610d6d565b6000915060016002541115610c6257610c03600154612747565b60006004541115610c5d5750600480546000918290556040519091734a3913ce9e8882b418a0be5a43d2c319c3f0a7bd9183156108fc0291849190818181858888f19350505050158015610c5b573d6000803e3d6000fd5b505b600191505b600254610c7690600163ffffffff611fb716565b60018054600090815260056020819052604090912001919091558054810181556002558115610ce757610ccd600a610cc1610cbc60018054611fb790919063ffffffff16565b61280c565b9063ffffffff61265516565b600154600090815260056020526040902060020155610d15565b610cff610cbc60018054611fb790919063ffffffff16565b6001546000908152600560205260409020600201555b60018054600090815260056020526040808220600401839055825482528082208a90558254825280822083018a9055915491517f425b24ddd6e59bf46cbd00a01aa7151a499bc4256559ab23cece018cc7141a289190a25b50506000805460ff191690555050505050565b6060806000600354604051908082528060200260200182016040528015610db1578160200160208202803883390190505b509150600090505b600354811015610e0f57600181016000908152600860205260409020548251600160a060020a0390911690839083908110610df057fe5b600160a060020a03909216602092830290910190910152600101610db9565b50919050565b600180546000908152600560205260408120909101548190610e3e90429063ffffffff611fb716565b90506202a3008110610e535760019150610e58565b600091505b5090565b600080808033734a3913ce9e8882b418a0be5a43d2c319c3f0a7bd14610ecc576040805160e560020a62461bcd02815260206004820152601160248201527f596f752063616e277420646f2074686973000000000000000000000000000000604482015290519081900360640190fd5b600154600a1115610f27576040805160e560020a62461bcd02815260206004820152600e60248201527f576169742070617469656e746c79000000000000000000000000000000000000604482015290519081900360640190fd5b600092505b600a831015610f6f576001548390036000908152600560205260409020600301549150811515610f5f5760019350610f64565b600093505b600190920191610f2c565b831515610fec576040805160e560020a62461bcd02815260206004820152603560248201527f546869732063616e6e6f7420626520646f6e652062656361757365207468652060448201527f75736572206973207374696c6c2070726573656e740000000000000000000000606482015290519081900360840190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe916370a082319160248083019260209291908290030181600087803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b505050506040513d602081101561108257600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152734a3913ce9e8882b418a0be5a43d2c319c3f0a7bd600482015260248101839052905191925073b3775fb83f7d12a36e0475abdd1fca35c091efbe9163a9059cbb916044808201926020929091908290030181600087803b15801561110f57600080fd5b505af1158015611123573d6000803e3d6000fd5b505050506040513d602081101561113957600080fd5b50734a3913ce9e8882b418a0be5a43d2c319c3f0a7bd9050ff5b33600061115f8261283b565b9050828110156111b9576040805160e560020a62461bcd02815260206004820152600f60248201527f4c61636b206f662062616c616e63650000000000000000000000000000000000604482015290519081900360640190fd5b6111dc6111cd84606463ffffffff61265516565b6004549063ffffffff61251316565b600455600160a060020a03821660009081526006602052604090206002015461120b908463ffffffff61251316565b600160a060020a0383166000818152600660205260409020600201919091556108fc61124e61124186606463ffffffff61265516565b869063ffffffff611fb716565b6040518115909202916000818181858888f19350505050158015611276573d6000803e3d6000fd5b50505050565b600180546000908152600560205260409020015442908290349062015180906112ac90859063ffffffff611fb716565b10611301576040805160e560020a62461bcd02815260206004820152601660248201527f57616974696e6720666f7220736574746c656d656e7400000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600760205260409020546001111561132c5761132c828661201c565b600160a060020a038083166000908152600660205260409020600101546113569184911683612092565b604080518481529051600191349133917f81b572186f5714544c1771925e95e44842341edc6b270a95a5cfce9265e2f236919081900360200190a45050505050565b60008060008060006113a8612e37565b600060056000600154815260200190815260200160002060e06040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050915061142233600154600254612970565b50506001546002548451602090950151919a90995091975092955091935090915050565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091829173b3775fb83f7d12a36e0475abdd1fca35c091efbe916370a0823191602480830192602092919082900301818787803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b505160015460009081526009602052604090205490925090509091565b600080600080600080600080600080600080600033955060016007600088600160a060020a0316600160a060020a0316815260200190815260200160002054101561155d5760009c508c9b508b9a508a995089985088975087965061163e565b61156c86600154600254612970565b9550955050849c50839b5061157f612a8e565b9a5061158a8661283b565b995060009250600191505b6001546000908152600560205260409020600401548210156115db576115ce6115c18760015485612a93565b849063ffffffff61251316565b9250600190910190611595565b8298506115ed86600154600254612a93565b96506116118660015461160c6001600254611fb790919063ffffffff16565b612970565b50915050801515611625576000965061163e565b61163b612710610cc1878e63ffffffff612adb16565b97505b50505050505090919293949596565b6001546000908152600560209081526040808320600254600019018452600701909152812054606091829182908290151561169b57604080516000815260208101909152945084935061176e565b60015460009081526005602090815260408083206002546000190184526007019091529020549250826040519080825280602002602001820160405280156116ed578160200160208202803883390190505b509150600090505b8281101561176a57600180546000908152600560209081526040808320600254600019018452600701825280832093850183526004909301905220548251600160a060020a039091169083908390811061174b57fe5b600160a060020a039092166020928302909101909101526001016116f5565b8194505b5050505090565b600080611780610e15565b15156117fc576040805160e560020a62461bcd02815260206004820152602360248201527f54686520636f6e747261637420697320696e206e6f726d616c206f706572617460448201527f696f6e0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33915061180882611ec0565b600160a060020a03831660008181526006602090815260408083206001805485526003909101909252808320805460ff191690921790915551929350909183156108fc0291849190818181858888f1935050505015801561186d573d6000803e3d6000fd5b505050565b60408051808201909152600381527f5233440000000000000000000000000000000000000000000000000000000000602082015281565b600154600090815260056020908152604080832060025484526007019091528120546060918290826040519080825280602002602001820160405280156118fa578160200160208202803883390190505b509150600090505b82811015611973576001805460009081526005602090815260408083206002548452600701825280832093850183526004909301905220548251600160a060020a039091169083908390811061195457fe5b600160a060020a03909216602092830290910190910152600101611902565b5092915050565b60608060008060008060008060006003546040519080825280602002602001820160405280156119c457816020015b6119b1612e75565b8152602001906001900390816119a95790505b509750600096505b600354871015611b925760018088016000908152600860205260409020549054600254600160a060020a039092169750611a0891889190612970565b955095505060009250600191505b6001548211611a5e575060015b6000828152600560205260409020600401548111611a5357611a496115c1878484612a93565b9250600101611a23565b600190910190611a16565b848888815181101515611a6d57fe5b602090810291909101015152611a81612a8e565b8888815181101515611a8f57fe5b602090810291909101810151015287518490899089908110611aad57fe5b602090810291909101015160400152611ac58661283b565b8888815181101515611ad357fe5b60209081029190910181015160600191909152600160a060020a038716600090815260069091526040902060020154611b0f906109598861283b565b8888815181101515611b1d57fe5b60209081029190910181015160800191909152600160a060020a0387166000908152600690915260409020548851899089908110611b5757fe5b602090810291909101015160a0015287518390899089908110611b7657fe5b60209081029091010151600660200201526001909601956119cc565b5095979650505050505050565b6000808080808080806001815b6003548211611bf45750600081815260086020526040902054600160a060020a0316611be7611bda8261283b565b879063ffffffff61251316565b9550600190910190611bac565b600354611c0560025460015461256e565b611c13600154600254612b52565b30600160a060020a03163189600454611c2d60015461280c565b611c4e600a610cc16007611c4260015461280c565b9063ffffffff612adb16565b9950995099509950995099509950995050509091929394959697565b600033734a3913ce9e8882b418a0be5a43d2c319c3f0a7bd14611cfc576040805160e560020a62461bcd028152602060048201526024808201527f556d6d6d6d6d2e2e2e2e2e2e4f6e6c792061646d696e20636f756c6420646f2060448201527f7468697300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060045490565b60018054600090815260056020526040812090910154429133916201518090611d3390859063ffffffff611fb716565b10611d88576040805160e560020a62461bcd02815260206004820152601660248201527f57616974696e6720666f7220736574746c656d656e7400000000000000000000604482015290519081900360640190fd5b611d918261283b565b905083811015611deb576040805160e560020a62461bcd02815260206004820152601560248201527f62616c616e6365206973206e6f7420656e6f7567680000000000000000000000604482015290519081900360640190fd5b600160a060020a03808316600090815260066020526040902060010154611e159184911686612092565b600160a060020a038216600090815260066020526040902060020154611e41908563ffffffff611fb716565b600160a060020a0383166000818152600660209081526040808320600201949094558351878152935191938893927f81b572186f5714544c1771925e95e44842341edc6b270a95a5cfce9265e2f236929181900390910190a450505050565b336000908152600760209081526040808320546006909252909120549091565b600160a060020a03811660009081526006602090815260408083206001548452600301909152812054819060ff1615611efc5760009150610e0f565b5060015b6001546000908152600560205260409020600401548111610e0f5760015460009081526005602081815260408084208585526007018252808420600160a060020a03881685529092019052902054611f5f90839063ffffffff61251316565b9150600101611f00565b600080600080600080611f87600a610cc16007611c4260015461280c565b9150611f9760025460015461256e565b9050611fa7600154600254612591565b6002549792965090945092509050565b600082821115612011576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b508082035b92915050565b60038054600190810191829055600160a060020a03938416600081815260076020908152604080832086905594825260088152848220805473ffffffffffffffffffffffffffffffffffffffff199081168517909155958252848220549282526006905292909220018054919093169116179055565b600080662386f26fc1000083101561211a576040805160e560020a62461bcd02815260206004820152602360248201527f596f75206e65656420746f2070617920302e3031206574686572206174206c6560448201527f7361740000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b849150600160a060020a0384161580612144575081600160a060020a031684600160a060020a0316145b156121615760045461215990600a8504612513565b6004556121a1565b600160a060020a03841660009081526006602052604090205461218790600a8504612513565b600160a060020a0385166000908152600660205260409020555b60018054600090815260056020908152604080832060025484526007019091529020546121d39163ffffffff61251316565b6001805460009081526005602081815260408084206002805486526007918201845282862088905586548652848452828620905486520182528084208685526004018252808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a1617905593548352529081206003015491925010156122ef576122916002600585026001546000908152600560209081526040808320600254845260070190915290206003015491900463ffffffff61251316565b6001805460009081526005602081815260408084206002805486526007909101835281852060030196909655935483525220600601546122d591600f860204612513565b60015460009081526005602052604090206006015561232e565b60015460009081526005602081905260409091206006015461231891850263ffffffff61251316565b6001546000908152600560205260409020600601555b60015460009081526005602052604090206003015461235690600a850490610b989086612513565b600180546000908152600560209081526040808320600301949094559154815282812060028054835260079091019092529190912001546123a090600a850490610b989086612513565b60018054600090815260056020818152604080842060028054865260079182018452828620810197909755855485528383528185209654855295909501905292902001546123f591850263ffffffff61251316565b600180546000908152600560208181526040808420600280548652600791820184528286208701979097559454845282825280842095548452949093018352838220600160a060020a0387168352600601909252919091205461245f91850263ffffffff61251316565b60018054600090815260056020818152604080842060028054865260079182018452828620600160a060020a038b168088526006909101855283872098909855955485528383528185209554855294909401815283832094835293019092529020546124d1908463ffffffff61251316565b600154600090815260056020818152604080842060025485526007018252808420600160a060020a039097168452959091019052929092209190915550505050565b81810182811015612016576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820616464206661696c656400000000000000000000000000604482015290519081900360640190fd5b600090815260056020908152604080832093835260079093019052206002015490565b60008060006125a08585612b52565b91506000905060218411156125f3576125e9620f4240610cc184611c42620f42406109596032611c426125e26064610b988f6003612adb90919063ffffffff16565b6003612bb6565b905080925061264d565b612636620f4240610cc184611c426126266125e261261860038c63ffffffff612adb16565b60649063ffffffff611fb716565b620f42409063ffffffff611fb716565b90508015156126495750661661d10e15c0005b8092505b505092915050565b6000808215156126af576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820646976206661696c656400000000000000000000000000604482015290519081900360640190fd5b82848115156126ba57fe5b04949350505050565b6000806002831061273d576000848152600560208181526040808420878552600781018352908420600381015460019091015494899052929091526006015461271692610b98919063ffffffff611fb716565b9050612736612710610cc1612729612a8e565b849063ffffffff612adb16565b9150611973565b5060009392505050565b60006127576005610cc18461280c565b905073cf3a25b73a493f96c15c8198319f0218ae8caa4a6108fc61278283600263ffffffff61265516565b6040518115909202916000818181858888f193505050501580156127aa573d6000803e3d6000fd5b5073c5e41ec7fa56c0656bc6d7371a8706eb9dfcbf616108fc6127e46127d784600263ffffffff61265516565b849063ffffffff611fb716565b6040518115909202916000818181858888f1935050505015801561186d573d6000803e3d6000fd5b60008181526005602052604081206003810154600290910154612016919061095990849063ffffffff61251316565b600160a060020a038116600090815260076020526040812054819081908190819081908190151561286f5760009650612965565b600160a060020a03881660009081526006602052604081206002015496509450612897610e15565b9350600192505b6001548311612910578380156128b5575060015483145b156128bf57612965565b600191505b600083815260056020526040902060040154821015612905576128f86128eb898585612a93565b869063ffffffff61251316565b94506001909101906128c4565b60019092019161289e565b50600160a060020a03871660009081526006602052604090205461296286610b9861293a8b612c05565b6109596129468d612cf0565b6109596129528f612d82565b6109598d8a63ffffffff61251316565b96505b505050505050919050565b6000808060018180805b878411612a815760008981526005602052604090206003015415156129a85760009650869550859450612a81565b6000898152600560209081526040808320878452600701808352818420600160a060020a038f16855260068101845291842054938890529091526003015490935091506129fb868463ffffffff61251316565b60008a8152600560209081526040808320888452600701909152902060020154909650612a37906009906032028991900463ffffffff61251316565b9650612a4d87610cc1888563ffffffff612adb16565b9050612a5f878363ffffffff61251316565b9650612a71868263ffffffff61251316565b955093506001909201918361297a565b5050505093509350939050565b603c90565b60008080612aad868661160c87600163ffffffff611fb716565b50925050612ab9612a8e565b9050612ad1612710610cc1848463ffffffff612adb16565b9695505050505050565b6000821515612aec57506000612016565b50818102818382811515612afc57fe5b0414612016576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b6000828152600560208181526040808420858552600781018352908420600381015460019091015487865293909252600601548392612b9b9291610b989163ffffffff611fb716565b9050612bae612710610cc1612729612a8e565b949350505050565b60008080841515612bca576000925061264d565b831515612bda576001925061264d565b5083905060015b83811015612bfd57612bf38286612adb565b9150600101612be1565b81925061264d565b600080600080600080600160056000600154815260200190815260200160002060040154111515612c395760009550612ce6565b600194505b600154851015612ce657600085815260056020818152604080842060048101548086526007909101808452828620600160a060020a038e168752948501845291852054948190529152600290910154909550909350600990600a02049150831580612ca7575081155b15612cb157612cdb565b50600084815260096020526040902054612cd8611bda83610cc1848763ffffffff612adb16565b95505b600190940193612c3e565b5050505050919050565b60006001818080805b600154851015612ce657600085815260056020819052604090912001549350831515612d2457612d77565b600085815260056020526040902060040154612d439088908790612970565b5092509250612d5b6032610cc16007611c428961280c565b9050612d74611bda84610cc1848663ffffffff612adb16565b95505b600190940193612cf9565b60006001818080805b600154851015612ce6576000858152600560208181526040808420808401548086526007909101808452828620600160a060020a038e168752948501845291852054948190529152600290910154909550909350600990600a02049150831580612df3575081155b15612dfd57612e2c565b612e106019610cc1600e611c428961280c565b9050612e29611bda83610cc1848763ffffffff612adb16565b95505b600190940193612d8b565b60e060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60e06040519081016040528060079060208202803883395091929150505600a165627a7a72305820405c3a52501478d1aa0875913a394884c3a4d41a00bc4b69779bf149c8529b4d0029"
}