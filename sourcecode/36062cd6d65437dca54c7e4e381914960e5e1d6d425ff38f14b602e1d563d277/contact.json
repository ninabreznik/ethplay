{
  "address": "0x2e0ed230795f1bd24996f82c76b7bd0d86120e34",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XFTNotary",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-29\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner(msg.sender));\n    _;\n  }\n\n  /**\n   * @return true if the account is the owner of the contract.\n   */\n  function isOwner(address account) public view returns(bool) {\n    return account == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner)\n    public\n    onlyOwner\n  {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner)\n    internal\n  {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Paused();\n  event Unpaused();\n\n  bool private _paused;\n\n  constructor() public {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause()\n    public\n    onlyOwner\n    whenNotPaused\n  {\n    _paused = true;\n    emit Paused();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause()\n    public\n    onlyOwner\n    whenPaused\n  {\n    _paused = false;\n    emit Unpaused();\n  }\n}\n\n// File: contracts/Operable.sol\n\n/**\n * @title Operable\n * @dev Base contract that allows the owner to enforce access control over certain\n * operations by adding or removing operator addresses.\n */\ncontract Operable is Pausable {\n  event OperatorAdded(address indexed account);\n  event OperatorRemoved(address indexed account);\n\n  mapping (address => bool) private _operators;\n\n  constructor() public {\n    _addOperator(msg.sender);\n  }\n\n  modifier onlyOperator() {\n    require(isOperator(msg.sender));\n    _;\n  }\n\n  function isOperator(address account)\n    public\n    view\n    returns (bool) \n  {\n    require(account != address(0));\n    return _operators[account];\n  }\n\n  function addOperator(address account)\n    public\n    onlyOwner\n  {\n    _addOperator(account);\n  }\n\n  function removeOperator(address account)\n    public\n    onlyOwner\n  {\n    _removeOperator(account);\n  }\n\n  function _addOperator(address account)\n    internal\n  {\n    require(account != address(0));\n    _operators[account] = true;\n    emit OperatorAdded(account);\n  }\n\n  function _removeOperator(address account)\n    internal\n  {\n    require(account != address(0));\n    _operators[account] = false;\n    emit OperatorRemoved(account);\n  }\n}\n\n// File: contracts/TimestampNotary.sol\n\ncontract TimestampNotary is Operable {\n  struct Time {\n    uint32 declared;\n    uint32 recorded;\n  }\n  mapping (bytes32 => Time) _hashTime;\n\n  event Timestamp(\n    bytes32 indexed hash,\n    uint32 declaredTime,\n    uint32 recordedTime\n  );\n\n  /**\n   * @dev Allows an operator to timestamp a new hash value.\n   * @param hash bytes32 The hash value to be stamped in the contract storage\n   * @param declaredTime uint The timestamp associated with the given hash value\n   */\n  function addTimestamp(bytes32 hash, uint32 declaredTime)\n    public\n    onlyOperator\n    whenNotPaused\n    returns (bool)\n  {\n    _addTimestamp(hash, declaredTime);\n    return true;\n  }\n\n  /**\n   * @dev Registers the timestamp hash value in the contract storage, along with\n   * the current and declared timestamps.\n   * @param hash bytes32 The hash value to be registered\n   * @param declaredTime uint32 The declared timestamp of the hash value\n   */\n  function _addTimestamp(bytes32 hash, uint32 declaredTime) internal {\n    uint32 recordedTime = uint32(block.timestamp);\n    _hashTime[hash] = Time(declaredTime, recordedTime);\n    emit Timestamp(hash, declaredTime, recordedTime);\n  }\n\n  /**\n   * @dev Allows anyone to verify the declared timestamp for any given hash.\n   */\n  function verifyDeclaredTime(bytes32 hash)\n    public\n    view\n    returns (uint32)\n  {\n    return _hashTime[hash].declared;\n  }\n\n  /**\n   * @dev Allows anyone to verify the recorded timestamp for any given hash.\n   */\n  function verifyRecordedTime(bytes32 hash)\n    public\n    view\n    returns (uint32)\n  {\n    return _hashTime[hash].recorded;\n  }\n}\n\n// File: contracts/LinkedToken.sol\n\ncontract LinkedTokenAbstract {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address account) public view returns (uint256);\n}\n\n\ncontract LinkedToken is Pausable {\n  address internal _token;\n  event TokenChanged(address indexed token);\n  \n  /**\n   * @dev Returns the address of the associated token contract.\n   */\n  function tokenAddress() public view returns (address) {\n    return _token;\n  }\n\n  /**\n   * @dev Allows the current owner to change the address of the associated token contract.\n   * @param token address The address of the new token contract\n   */\n  function setToken(address token) \n    public\n    onlyOwner\n    whenPaused\n    returns (bool)\n  {\n    _setToken(token);\n    emit TokenChanged(token);\n    return true;\n  }\n\n  /**\n   * @dev Changes the address of the associated token contract\n   * @param token address The address of the new token contract\n   */\n  function _setToken(address token) internal {\n    require(token != address(0));\n    _token = token;\n  }\n}\n\n// File: contracts/AssetNotary.sol\n\ncontract AssetNotary is TimestampNotary, LinkedToken {\n  using SafeMath for uint256;\n\n  bytes8[] private _assetList;\n  mapping (bytes8 => uint8) private _assetDecimals;\n  mapping (bytes8 => uint256) private _assetBalances;\n\n  event AssetBalanceUpdate(\n    bytes8 indexed assetId,\n    uint256 balance\n  );\n\n  function registerAsset(bytes8 assetId, uint8 decimals)\n    public\n    onlyOperator\n    returns (bool)\n  {\n    require(decimals > 0);\n    require(decimals <= 32);\n    _assetDecimals[assetId] = decimals;\n    _assetList.push(assetId);\n    return true;\n  }\n\n  function assetList()\n    public\n    view\n    returns (bytes8[])\n  {\n    return _assetList;\n  }\n\n  function getAssetId(string name)\n    public\n    pure\n    returns (bytes8)\n  {\n    return bytes8(keccak256(abi.encodePacked(name)));\n  }\n\n  function assetDecimals(bytes8 assetId)\n    public\n    view\n    returns (uint8)\n  {\n    return _assetDecimals[assetId];\n  }\n\n  function assetBalance(bytes8 assetId)\n    public\n    view\n    returns (uint256)\n  {\n    return _assetBalances[assetId];\n  }\n\n  function updateAssetBalances(bytes8[] assets, uint256[] balances)\n    public\n    onlyOperator\n    whenNotPaused\n    returns (bool)\n  {\n    uint assetsLength = assets.length;\n    require(assetsLength > 0);\n    require(assetsLength == balances.length);\n    \n    for (uint i=0; i<assetsLength; i++) {\n      require(_assetDecimals[assets[i]] > 0);\n      _assetBalances[assets[i]] = balances[i];\n      emit AssetBalanceUpdate(assets[i], balances[i]);\n    }\n    return true;\n  }\n\n  function verifyUserBalance(address user, string assetName)\n    public\n    view\n    returns (uint256)\n  {\n    LinkedTokenAbstract token = LinkedTokenAbstract(_token);\n    uint256 totalShares = token.totalSupply();\n    require(totalShares > 0);\n    uint256 userShares = token.balanceOf(user);\n    bytes8 assetId = getAssetId(assetName);\n    return _assetBalances[assetId].mul(userShares) / totalShares;\n  }\n}\n\n// File: contracts/XFTNotary.sol\n\ncontract XFTNotary is AssetNotary {\n  string public constant name = 'XFT Asset Notary';\n  string public constant version = '0.1';\n  \n  /*\n   * @dev Links the Notary contract with the Token contract.\n   */\n  constructor(address token) public {\n    _setToken(token);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAssetId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"}],\"name\":\"assetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"}],\"name\":\"assetDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyDeclaredTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assets\",\"type\":\"bytes8[]\"},{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"updateAssetBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyRecordedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"declaredTime\",\"type\":\"uint32\"}],\"name\":\"addTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"assetName\",\"type\":\"string\"}],\"name\":\"verifyUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"AssetBalanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"declaredTime\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"recordedTime\",\"type\":\"uint32\"}],\"name\":\"Timestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160208062001cdb83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060146101000a81548160ff02191690831515021790555061012233610140640100000000026401000000009004565b61013a81610219640100000000026401000000009004565b50610299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561017c57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561025557600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611a3280620002a96000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101385780630fed73e2146101c8578063144fa6d71461027b5780632f54bf6e146102d65780633f4ba83a1461033157806354fd4d501461034857806357637a5d146103d85780635c975abb146104345780636d70f7ae14610463578063733b096d146104be5780637d1e2e7a1461052b5780638456cb591461058d5780638da5cb5b146105a45780639870d7fe146105fb5780639d76ea581461063e578063a971d9bb14610695578063ac8a584a146106e6578063bab19fb514610729578063c539ab71146107ea578063c800756f1461083b578063e372f03a14610894578063e56b7b0914610900578063f2fde38b1461099d575b600080fd5b34801561014457600080fd5b5061014d6109e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018d578082015181840152602081019050610172565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d457600080fd5b5061022f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a19565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561028757600080fd5b506102bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610af1565b604051808215151515815260200191505060405180910390f35b3480156102e257600080fd5b50610317600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b77565b604051808215151515815260200191505060405180910390f35b34801561033d57600080fd5b50610346610bd0565b005b34801561035457600080fd5b5061035d610c47565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039d578082015181840152602081019050610382565b50505050905090810190601f1680156103ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e457600080fd5b5061041e600480360381019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610c80565b6040518082815260200191505060405180910390f35b34801561044057600080fd5b50610449610cd3565b604051808215151515815260200191505060405180910390f35b34801561046f57600080fd5b506104a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce9565b604051808215151515815260200191505060405180910390f35b3480156104ca57600080fd5b50610511600480360381019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190505050610d7a565b604051808215151515815260200191505060405180910390f35b34801561053757600080fd5b50610571600480360381019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e8c565b604051808260ff1660ff16815260200191505060405180910390f35b34801561059957600080fd5b506105a2610eec565b005b3480156105b057600080fd5b506105b9610f65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060757600080fd5b5061063c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f8e565b005b34801561064a57600080fd5b50610653610fae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a157600080fd5b506106c46004803603810190808035600019169060200190929190505050610fd8565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156106f257600080fd5b50610727600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611010565b005b34801561073557600080fd5b506107d06004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611030565b604051808215151515815260200191505060405180910390f35b3480156107f657600080fd5b506108196004803603810190808035600019169060200190929190505050611229565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561084757600080fd5b5061087a6004803603810190808035600019169060200190929190803563ffffffff169060200190929190505050611261565b604051808215151515815260200191505060405180910390f35b3480156108a057600080fd5b506108a96112a7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108ec5780820151818401526020810190506108d1565b505050509050019250505060405180910390f35b34801561090c57600080fd5b50610987600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611355565b6040518082815260200191505060405180910390f35b3480156109a957600080fd5b506109de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611588565b005b6040805190810160405280601081526020017f584654204173736574204e6f746172790000000000000000000000000000000081525081565b6000816040516020018082805190602001908083835b602083101515610a545780518252602082019150602081019050602083039250610a2f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610abd5780518252602082019150602081019050602083039250610a98565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b6000610afc33610b77565b1515610b0757600080fd5b600060149054906101000a900460ff161515610b2257600080fd5b610b2b826115a8565b8173ffffffffffffffffffffffffffffffffffffffff167f5d108ca248943e98e1886bbc2c38beda701271994a14354258a11692b81b73cf60405160405180910390a260019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610bd933610b77565b1515610be457600080fd5b600060149054906101000a900460ff161515610bff57600080fd5b60008060146101000a81548160ff0219169083151502179055507fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693360405160405180910390a1565b6040805190810160405280600381526020017f302e31000000000000000000000000000000000000000000000000000000000081525081565b6000600660008377ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b60008060149054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d2657600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610d8533610ce9565b1515610d9057600080fd5b60008260ff16111515610da257600080fd5b60208260ff1611151515610db557600080fd5b81600560008577ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600483908060018154018082558091505090600182039060005260206000209060049182820401919006600802909192909190916101000a81548167ffffffffffffffff0219169083780100000000000000000000000000000000000000000000000090040217905550506001905092915050565b6000600560008377ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b610ef533610b77565b1515610f0057600080fd5b600060149054906101000a900460ff16151515610f1c57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f9733610b77565b1515610fa257600080fd5b610fab81611628565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000836000191660001916815260200190815260200160002060000160009054906101000a900463ffffffff169050919050565b61101933610b77565b151561102457600080fd5b61102d81611701565b50565b600080600061103e33610ce9565b151561104957600080fd5b600060149054906101000a900460ff1615151561106557600080fd5b8451915060008211151561107857600080fd5b83518214151561108757600080fd5b600090505b8181101561121d5760006005600087848151811015156110a857fe5b9060200190602002015177ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1660ff1611151561111357600080fd5b838181518110151561112157fe5b9060200190602002015160066000878481518110151561113d57fe5b9060200190602002015177ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550848181518110151561119d57fe5b9060200190602002015177ffffffffffffffffffffffffffffffffffffffffffffffff19167f68d0a438d383ea56d3f790002e08fc5addfd80379440b9a3d5b9c1ab41fcb98b85838151811015156111f157fe5b906020019060200201516040518082815260200191505060405180910390a2808060010191505061108c565b60019250505092915050565b600060026000836000191660001916815260200190815260200160002060000160049054906101000a900463ffffffff169050919050565b600061126c33610ce9565b151561127757600080fd5b600060149054906101000a900460ff1615151561129357600080fd5b61129d83836117db565b6001905092915050565b6060600480548060200260200160405190810160405280929190818152602001828054801561134b57602002820191906000526020600020906000905b82829054906101000a900478010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600801906020826007010492830192600103820291508084116112e45790505b5050505050905090565b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113e657600080fd5b505af11580156113fa573d6000803e3d6000fd5b505050506040513d602081101561141057600080fd5b8101908080519060200190929190505050925060008311151561143257600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b8101908080519060200190929190505050915061151386610a19565b90508261157283600660008577ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546118ce90919063ffffffff16565b81151561157b57fe5b0494505050505092915050565b61159133610b77565b151561159c57600080fd5b6115a58161190c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115e457600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561166457600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561173d57600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d60405160405180910390a250565b600042905060408051908101604052808363ffffffff1681526020018263ffffffff1681525060026000856000191660001916815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555090505082600019167f2c0e11cc9aaa4a90dc5a0f4842b5c2e54ae073611f136201bcdcd7d45351bd1d8383604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a2505050565b60008060008414156118e35760009150611905565b82840290508284828115156118f457fe5b0414151561190157600080fd5b8091505b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561194857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582012a13f60a17112ce1d581b9e4e73670db1ab6f84b1dd32577c97aac2ce4bbfe60029000000000000000000000000d4c2a5c4be6ec37a84a78382c6c7368651d8b443",
  "constructorArguments": "000000000000000000000000d4c2a5c4be6ec37a84a78382c6c7368651d8b443"
}