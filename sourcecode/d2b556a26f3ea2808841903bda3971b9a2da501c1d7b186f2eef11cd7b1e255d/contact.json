{
  "address": "0xac4f2f204b38390b92d0540908447d5ed352799a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NahmiiToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-08\n*/\n\npragma solidity ^0.4.13;\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\ncontract RevenueToken is ERC20Mintable {\n    using SafeMath for uint256;\n\n    bool public mintingDisabled;\n\n    address[] public holders;\n\n    mapping(address => bool) public holdersMap;\n\n    mapping(address => uint256[]) public balances;\n\n    mapping(address => uint256[]) public balanceBlocks;\n\n    mapping(address => uint256[]) public balanceBlockNumbers;\n\n    event DisableMinting();\n\n    /**\n     * @notice Disable further minting\n     * @dev This operation can not be undone\n     */\n    function disableMinting()\n    public\n    onlyMinter\n    {\n        mintingDisabled = true;\n\n        emit DisableMinting();\n    }\n\n    /**\n     * @notice Mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value)\n    public\n    onlyMinter\n    returns (bool)\n    {\n        require(!mintingDisabled);\n\n        // Call super's mint, including event emission\n        bool minted = super.mint(to, value);\n\n        if (minted) {\n            // Adjust balance blocks\n            addBalanceBlocks(to);\n\n            // Add to the token holders list\n            if (!holdersMap[to]) {\n                holdersMap[to] = true;\n                holders.push(to);\n            }\n        }\n\n        return minted;\n    }\n\n    /**\n     * @notice Transfer token for a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transfer(address to, uint256 value)\n    public\n    returns (bool)\n    {\n        // Call super's transfer, including event emission\n        bool transferred = super.transfer(to, value);\n\n        if (transferred) {\n            // Adjust balance blocks\n            addBalanceBlocks(msg.sender);\n            addBalanceBlocks(to);\n\n            // Add to the token holders list\n            if (!holdersMap[to]) {\n                holdersMap[to] = true;\n                holders.push(to);\n            }\n        }\n\n        return transferred;\n    }\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @dev Beware that to change the approve amount you first have to reduce the addresses'\n     * allowance to zero by calling `approve(spender, 0)` if it is not already 0 to mitigate the race\n     * condition described here:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value)\n    public\n    returns (bool)\n    {\n        // Prevent the update of non-zero allowance\n        require(0 == value || 0 == allowance(msg.sender, spender));\n\n        // Call super's approve, including event emission\n        return super.approve(spender, value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFrom(address from, address to, uint256 value)\n    public\n    returns (bool)\n    {\n        // Call super's transferFrom, including event emission\n        bool transferred = super.transferFrom(from, to, value);\n\n        if (transferred) {\n            // Adjust balance blocks\n            addBalanceBlocks(from);\n            addBalanceBlocks(to);\n\n            // Add to the token holders list\n            if (!holdersMap[to]) {\n                holdersMap[to] = true;\n                holders.push(to);\n            }\n        }\n\n        return transferred;\n    }\n\n    /**\n     * @notice Calculate the amount of balance blocks, i.e. the area under the curve (AUC) of\n     * balance as function of block number\n     * @dev The AUC is used as weight for the share of revenue that a token holder may claim\n     * @param account The account address for which calculation is done\n     * @param startBlock The start block number considered\n     * @param endBlock The end block number considered\n     * @return The calculated AUC\n     */\n    function balanceBlocksIn(address account, uint256 startBlock, uint256 endBlock)\n    public\n    view\n    returns (uint256)\n    {\n        require(startBlock < endBlock);\n        require(account != address(0));\n\n        if (balanceBlockNumbers[account].length == 0 || endBlock < balanceBlockNumbers[account][0])\n            return 0;\n\n        uint256 i = 0;\n        while (i < balanceBlockNumbers[account].length && balanceBlockNumbers[account][i] < startBlock)\n            i++;\n\n        uint256 r;\n        if (i >= balanceBlockNumbers[account].length)\n            r = balances[account][balanceBlockNumbers[account].length - 1].mul(endBlock.sub(startBlock));\n\n        else {\n            uint256 l = (i == 0) ? startBlock : balanceBlockNumbers[account][i - 1];\n\n            uint256 h = balanceBlockNumbers[account][i];\n            if (h > endBlock)\n                h = endBlock;\n\n            h = h.sub(startBlock);\n            r = (h == 0) ? 0 : balanceBlocks[account][i].mul(h).div(balanceBlockNumbers[account][i].sub(l));\n            i++;\n\n            while (i < balanceBlockNumbers[account].length && balanceBlockNumbers[account][i] < endBlock) {\n                r = r.add(balanceBlocks[account][i]);\n                i++;\n            }\n\n            if (i >= balanceBlockNumbers[account].length)\n                r = r.add(\n                    balances[account][balanceBlockNumbers[account].length - 1].mul(\n                        endBlock.sub(balanceBlockNumbers[account][balanceBlockNumbers[account].length - 1])\n                    )\n                );\n\n            else if (balanceBlockNumbers[account][i - 1] < endBlock)\n                r = r.add(\n                    balanceBlocks[account][i].mul(\n                        endBlock.sub(balanceBlockNumbers[account][i - 1])\n                    ).div(\n                        balanceBlockNumbers[account][i].sub(balanceBlockNumbers[account][i - 1])\n                    )\n                );\n        }\n\n        return r;\n    }\n\n    /**\n     * @notice Get the count of balance updates for the given account\n     * @return The count of balance updates\n     */\n    function balanceUpdatesCount(address account)\n    public\n    view\n    returns (uint256)\n    {\n        return balanceBlocks[account].length;\n    }\n\n    /**\n     * @notice Get the count of holders\n     * @return The count of holders\n     */\n    function holdersCount()\n    public\n    view\n    returns (uint256)\n    {\n        return holders.length;\n    }\n\n    /**\n     * @notice Get the subset of holders (optionally with positive balance only) in the given 0 based index range\n     * @param low The lower inclusive index\n     * @param up The upper inclusive index\n     * @param posOnly List only positive balance holders\n     * @return The subset of positive balance registered holders in the given range\n     */\n    function holdersByIndices(uint256 low, uint256 up, bool posOnly)\n    public\n    view\n    returns (address[])\n    {\n        require(low <= up);\n\n        up = up > holders.length - 1 ? holders.length - 1 : up;\n\n        uint256 length = 0;\n        if (posOnly) {\n            for (uint256 i = low; i <= up; i++)\n                if (0 < balanceOf(holders[i]))\n                    length++;\n        } else\n            length = up - low + 1;\n\n        address[] memory _holders = new address[](length);\n\n        uint256 j = 0;\n        for (i = low; i <= up; i++)\n            if (!posOnly || 0 < balanceOf(holders[i]))\n                _holders[j++] = holders[i];\n\n        return _holders;\n    }\n\n    function addBalanceBlocks(address account)\n    private\n    {\n        uint256 length = balanceBlockNumbers[account].length;\n        balances[account].push(balanceOf(account));\n        if (0 < length)\n            balanceBlocks[account].push(\n                balances[account][length - 1].mul(\n                    block.number.sub(balanceBlockNumbers[account][length - 1])\n                )\n            );\n        else\n            balanceBlocks[account].push(0);\n        balanceBlockNumbers[account].push(block.number);\n    }\n}\n\ncontract NahmiiToken is RevenueToken {\n\n    string public name = \"Nahmii\";\n\n    string public symbol = \"NII\";\n\n    uint8 public constant decimals = 15;\n\n    event SetName(string name);\n\n    event SetSymbol(string symbol);\n\n    /**\n     * @dev Set the name of the token\n     * @param _name The new token name\n     */\n    function setName(string _name)\n    public\n    onlyMinter\n    {\n        name = _name;\n        emit SetName(name);\n    }\n\n    /**\n     * @dev Set the symbol of the token\n     * @param _symbol The new token symbol\n     */\n    function setSymbol(string _symbol)\n    public\n    onlyMinter\n    {\n        symbol = _symbol;\n        emit SetSymbol(_symbol);\n    }\n}",
  "bytecode": ""
}