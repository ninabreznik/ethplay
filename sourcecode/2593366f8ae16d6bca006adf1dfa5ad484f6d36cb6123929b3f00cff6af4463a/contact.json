{
  "address": "0xb657708d990414bca245e11a2abdcdd11f9227c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rockwood",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract Rockwood is StandardToken, Ownable{\n    \n    string public name = \"Rockwood\";\n    string public symbol = \"RWD\";\n    uint8 public  decimals = 18;\n\n    mapping(address=>uint256)  lockedBalance;\n    mapping(address=>uint)     timeRelease;\n    \n    uint256 internal constant INITIAL_SUPPLY = 300 * (10**8) * (10**18);\n    \n    //address public developer;\n    //uint256 internal crowdsaleAvaible;\n\n\n    event Burn(address indexed burner, uint256 value);\n    event Lock(address indexed locker, uint256 value, uint releaseTime);\n    event UnLock(address indexed unlocker, uint256 value);\n    \n\n    // constructor\n    constructor() public { \n        address onwer = msg.sender;\n        balances[onwer] = INITIAL_SUPPLY;\n        totalSupply = INITIAL_SUPPLY;\n    }\n    function() payable public {\n        owner.transfer(msg.value);\n    }\n    function ownerSetName(string newName) public onlyOwner{\n        name = newName;\n    }\n    function ownerSetSymbol(string newSymbol) public onlyOwner{\n        symbol = newSymbol;\n    }\n    function ownerSetDecimals(uint8 newDecimals) public onlyOwner{\n        decimals = newDecimals;\n    }\n    function ownerSetTotalSupply(uint newTotalSupply) public onlyOwner{\n        balances[msg.sender] = balances[msg.sender].add(newTotalSupply).sub(totalSupply);\n        totalSupply = newTotalSupply;\n    } \n   function ownerUnlock(address tokenHolder) public onlyOwner returns (bool success){\n        uint256 amount = lockedBalance[tokenHolder];\n        require(amount > 0);\n\n        balances[tokenHolder] = balances[tokenHolder].add(amount);\n        lockedBalance[tokenHolder] = 0;\n        timeRelease[tokenHolder] = 0;\n\n        emit Transfer(0x0, tokenHolder, amount);\n        emit UnLock(tokenHolder, amount);\n\n        return true;\n\n    }\n    function ownerKill(bool isKill) public onlyOwner{\n        require(isKill);\n        selfdestruct(owner);\n    }    \n    //balance of locked\n    function lockedOf(address _owner) public constant returns (uint256 balance) {\n        return lockedBalance[_owner];\n    }\n\n    //release time of locked\n    function unlockTimeOf(address _owner) public constant returns (uint timelimit) {\n        return timeRelease[_owner];\n    }\n\n\n    // transfer to and lock it\n    function transferAndLock(address _to, uint256 _value, uint _releaseTime) public returns (bool success) {\n        require(_to != 0x0);\n        require(_value <= balances[msg.sender]);\n        require(_value > 0);\n        require(_releaseTime > now && _releaseTime <= now + 60*60*24*365*5);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n       \n        //if preLock can release \n        uint preRelease = timeRelease[_to];\n        if (preRelease <= now && preRelease != 0x0) {\n            balances[_to] = balances[_to].add(lockedBalance[_to]);\n            lockedBalance[_to] = 0;\n        }\n\n        lockedBalance[_to] = lockedBalance[_to].add(_value);\n        timeRelease[_to] =  _releaseTime >= timeRelease[_to] ? _releaseTime : timeRelease[_to]; \n        emit Transfer(msg.sender, _to, _value);\n        emit Lock(_to, _value, _releaseTime);\n        return true;\n    }\n\n    function transferFromAndLock(address _from, address _to, uint256 _value, uint _releaseTime) public returns (bool success) {\n        require(_to != 0x0);\n        require(_value <= balances[_from]);\n        require(_value > 0);\n        require(_releaseTime > now && _releaseTime <= now + 60*60*24*365*5);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n       \n        //if preLock can release \n        uint preRelease = timeRelease[_to];\n        if (preRelease <= now && preRelease != 0x0) {\n            balances[_to] = balances[_to].add(lockedBalance[_to]);\n            lockedBalance[_to] = 0;\n        }\n\n        lockedBalance[_to] = lockedBalance[_to].add(_value);\n        timeRelease[_to] =  _releaseTime >= timeRelease[_to] ? _releaseTime : timeRelease[_to]; \n        emit Transfer(_from, _to, _value);\n        emit Lock(_to, _value, _releaseTime);\n        return true;\n    }\n\n\n   /**\n   * @notice Transfers tokens held by lock.\n   */\n   function unlock() public returns (bool success){\n        uint256 amount = lockedBalance[msg.sender];\n        require(amount > 0);\n        require(now >= timeRelease[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        lockedBalance[msg.sender] = 0;\n        timeRelease[msg.sender] = 0;\n\n        emit Transfer(0x0, msg.sender, amount);\n        emit UnLock(msg.sender, amount);\n\n        return true;\n\n    }\n\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n    \n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n        return true;\n    }\n\n\n\n}",
  "bytecode": ""
}