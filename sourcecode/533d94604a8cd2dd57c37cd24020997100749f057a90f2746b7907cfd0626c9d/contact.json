{
  "address": "0x12fef5e57bf45873cd9b62e9dbd7bfb99e32d73e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Cofound.it Token",
  "contractName": "CofounditToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-04\n*/\n\npragma solidity ^0.4.11;\n\ncontract owned {\n\n\taddress public owner;\n\n\tfunction owned() {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner {\n\t\tif (msg.sender != owner) throw;\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address newOwner) onlyOwner {\n\t\towner = newOwner;\n\t}\n}\n\ncontract tokenRecipient { \n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); \n} \n\ncontract IERC20Token {     \n\n\t/// @return total amount of tokens     \n\tfunction totalSupply() constant returns (uint256 totalSupply);     \n\n\t/// @param _owner The address from which the balance will be retrieved     \n\t/// @return The balance     \n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {}     \n\n\t/// @notice send `_value` token to `_to` from `msg.sender`     \n\t/// @param _to The address of the recipient     \n\t/// @param _value The amount of token to be transferred     \n\t/// @return Whether the transfer was successful or not     \n\tfunction transfer(address _to, uint256 _value) returns (bool success) {}     \n\n\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`     \n\t/// @param _from The address of the sender     \n\t/// @param _to The address of the recipient     \n\t/// @param _value The amount of token to be transferred     \n\t/// @return Whether the transfer was successful or not     \n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}     \n\n\t/// @notice `msg.sender` approves `_addr` to spend `_value` tokens     \n\t/// @param _spender The address of the account able to transfer the tokens     \n\t/// @param _value The amount of wei to be approved for transfer     \n\t/// @return Whether the approval was successful or not     \n\tfunction approve(address _spender, uint256 _value) returns (bool success) {}     \n\n\t/// @param _owner The address of the account owning tokens     \n\t/// @param _spender The address of the account able to transfer the tokens     \n\t/// @return Amount of remaining tokens allowed to spent     \n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {}       \n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);     \n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); \n} \n\ncontract CofounditToken is IERC20Token, owned{         \n\n\t/* Public variables of the token */     \n\tstring public standard = \"Cofoundit token v1.0\";     \n\tstring public name = \"Cofoundit\";     \n\tstring public symbol = \"CFI\";     \n\tuint8 public decimals = 18;     \n\taddress public icoContractAddress;     \n\tuint256 public tokenFrozenUntilBlock;     \n\n\t/* Private variables of the token */     \n\tuint256 supply = 0;     \n\tmapping (address => uint256) balances;     \n\tmapping (address => mapping (address => uint256)) allowances;     \n\tmapping (address => bool) restrictedAddresses;     \n\n\t/* Events */       \n\tevent Mint(address indexed _to, uint256 _value);     \n\tevent TokenFrozen(uint256 _frozenUntilBlock, string _reason);     \n\n\t/* Initializes contract and  sets restricted addresses */     \n\tfunction CofounditToken(address _icoAddress) {         \n\t\trestrictedAddresses[0x0] = true;\t\t\t// Users cannot send tokens to 0x0 address         \n\t\trestrictedAddresses[_icoAddress] = true;\t// Users cannot send tokens to ico contract         \n\t\trestrictedAddresses[address(this)] = true;\t// Users cannot sent tokens to this contracts address                 \n\t\ticoContractAddress = _icoAddress;\t\t\t// Sets ico contract address from where mints will happen     \n\t}         \n\n\t/* Get total supply of issued coins */     \n\tfunction totalSupply() constant returns (uint256 totalSupply) {         \n\t\treturn supply;     \n\t}         \n\n\t/* Get balance of specific address */     \n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {         \n\t\treturn balances[_owner];     \n\t}     \n\n\t/* Send coins */     \n\tfunction transfer(address _to, uint256 _value) returns (bool success) {     \t\n\t\tif (block.number < tokenFrozenUntilBlock) throw;\t// Throw is token is frozen in case of emergency         \n\t\tif (restrictedAddresses[_to]) throw;                // Prevent transfer to restricted addresses         \n\t\tif (balances[msg.sender] < _value) throw;           // Check if the sender has enough         \n\t\tif (balances[_to] + _value < balances[_to]) throw;  // Check for overflows         \n\t\tbalances[msg.sender] -= _value;                     // Subtract from the sender         \n\t\tbalances[_to] += _value;                            // Add the same to the recipient         \n\t\tTransfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place         \n\t\treturn true;     \n\t}     \n\n\t/* Allow another contract to spend some tokens in your behalf */     \n\tfunction approve(address _spender, uint256 _value) returns (bool success) {     \t\n\t\tif (block.number < tokenFrozenUntilBlock) throw;\t// Throw is token is frozen in case of emergency         \n\t\tallowances[msg.sender][_spender] = _value;          // Set allowance         \n\t\tApproval(msg.sender, _spender, _value);             // Raise Approval event         \n\t\treturn true;     \n\t}     \n\n\t/* Approve and then comunicate the approved contract in a single tx */     \n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \n\t\ttokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n\t\tapprove(_spender, _value);                                      // Set approval to contract for _value         \n\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n\t\treturn true;     \n\t}     \n\n\t/* A contract attempts to get the coins */     \n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {     \t\n\t\tif (block.number < tokenFrozenUntilBlock) throw;\t// Throw is token is frozen in case of emergency         \n\t\tif (restrictedAddresses[_to]) throw;                // Prevent transfer to restricted addresses         \n\t\tif (balances[_from] < _value) throw;                // Check if the sender has enough         \n\t\tif (balances[_to] + _value < balances[_to]) throw;  // Check for overflows         \n\t\tif (_value > allowances[_from][msg.sender]) throw;  // Check allowance         \n\t\tbalances[_from] -= _value;                          // Subtract from the sender         \n\t\tbalances[_to] += _value;                            // Add the same to the recipient         \n\t\tallowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n\t\tTransfer(_from, _to, _value);                       // Notify anyone listening that this transfer took place         \n\t\treturn true;     \n\t}         \n\n\t/* Get the ammount of remaining tokens to spend */     \n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \n\t\treturn allowances[_owner][_spender];     \n\t}         \n\n\t/* Create new tokens*/     \n\tfunction mintTokens(address _to, uint256 _amount, string _reason) {         \n\t\tif (msg.sender != icoContractAddress) throw;\t\t\t// Check if minter is ico Contract address         \n\t\tif (restrictedAddresses[_to]) throw;                    // Prevent transfer to restricted addresses         \n\t\tif (_amount == 0 || sha3(_reason) == sha3(\"\")) throw;   // Check if values are not null;         \n\t\tif (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows         \n\t\tsupply += _amount;                                      // Update total supply         \n\t\tbalances[_to] += _amount;                    \t\t    // Set minted coins to target         \n\t\tMint(_to, _amount);                          \t\t    // Create Mint event         \n\t\tTransfer(0x0, _to, _amount);                            // Create Transfer event from 0x     \n\t}     \n\n\t/* Stops all token transfers in case of emergency */     \n\tfunction freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {     \t\n\t\ttokenFrozenUntilBlock = _frozenUntilBlock;     \t\n\t\tTokenFrozen(_frozenUntilBlock, _reason);     \n\t}     \n\t\n\t/* Owner can add new restricted address or removes one */\n\tfunction editRestrictedAddress(address _newRestrictedAddress) onlyOwner {\n\t\trestrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\n\t}\n\n\tfunction isRestrictedAddress(address _querryAddress) constant returns (bool answer){\n\t\treturn restrictedAddresses[_querryAddress];\n\t}\n\n\t/* This unnamed function is called whenever someone tries to send ether to it */     \n\n\tfunction () {         \n\t\tthrow;     // Prevents accidental sending of ether     \n\t} \n\n\t//\n\t/* This part is here only for testing and will not be included into final version */\n\t//\n\n\t//function changeICOAddress(address _newAddress) onlyOwner{\n\t//\ticoContractAddress = _newAddress;\n\t//}\n\n\t//function killContract() onlyOwner{\n\t//\tselfdestruct(msg.sender);\n\t//}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_querryAddress\",\"type\":\"address\"}],\"name\":\"isRestrictedAddress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRestrictedAddress\",\"type\":\"address\"}],\"name\":\"editRestrictedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052604060405190810160405280601481526020017f436f666f756e64697420746f6b656e2076312e300000000000000000000000008152506001908051906020019062000052929190620002b8565b50604060405190810160405280600981526020017f436f666f756e646974000000000000000000000000000000000000000000000081525060029080519060200190620000a1929190620002b8565b50604060405190810160405280600381526020017f434649000000000000000000000000000000000000000000000000000000000081525060039080519060200190620000f0929190620002b8565b506012600460006101000a81548160ff021916908360ff160217905550600060065534156200011b57fe5b60405160208062001cf6833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160096000600073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5062000367565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fb57805160ff19168380011785556200032c565b828001600101855582156200032c579182015b828111156200032b5782518255916020019190600101906200030e565b5b5090506200033b91906200033f565b5090565b6200036491905b808211156200036057600081600090555060010162000346565b5090565b90565b61197f80620003776000396000f30060606040523615610105576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303c175ff1461011b57806306fdde0314610169578063095ea7b31461020257806318160ddd1461025957806323b872dd1461027f578063313ce567146102f55780634ec883d1146103215780635a3b7e421461035757806370a08231146103f05780638da5cb5b1461043a57806391a67e1e1461048c57806395d89b41146104b25780639fe17cc21461054b578063a9059cbb1461059d578063aa19ed77146105f4578063cae9ca5114610657578063dd62ed3e146106f1578063e67524a31461075a578063f2fde38b146107dc575b341561010d57fe5b6101195b60006000fd5b565b005b341561012357fe5b61014f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610812565b604051808215151515815260200191505060405180910390f35b341561017157fe5b610179610869565b60405180806020018281038252838181518152602001915080519060200190808383600083146101c8575b8051825260208311156101c8576020820191506020810190506020830392506101a4565b505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020a57fe5b61023f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610907565b604051808215151515815260200191505060405180910390f35b341561026157fe5b610269610a0a565b6040518082815260200191505060405180910390f35b341561028757fe5b6102db600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a15565b604051808215151515815260200191505060405180910390f35b34156102fd57fe5b610305610d79565b604051808260ff1660ff16815260200191505060405180910390f35b341561032957fe5b610355600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d8c565b005b341561035f57fe5b610367610e92565b60405180806020018281038252838181518152602001915080519060200190808383600083146103b6575b8051825260208311156103b657602082019150602081019050602083039250610392565b505050905090810190601f1680156103e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f857fe5b610424600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f30565b6040518082815260200191505060405180910390f35b341561044257fe5b61044a610f7a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049457fe5b61049c610fa0565b6040518082815260200191505060405180910390f35b34156104ba57fe5b6104c2610fa6565b6040518080602001828103825283818151815260200191508051906020019080838360008314610511575b805182526020831115610511576020820191506020810190506020830392506104ed565b505050905090810190601f16801561053d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055357fe5b61055b611044565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a557fe5b6105da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061106a565b604051808215151515815260200191505060405180910390f35b34156105fc57fe5b610655600480803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506112b9565b005b341561065f57fe5b6106d7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506113d5565b604051808215151515815260200191505060405180910390f35b34156106f957fe5b610744600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611553565b6040518082815260200191505060405180910390f35b341561076257fe5b6107da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506115db565b005b34156107e457fe5b610810600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118b0565b005b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ff5780601f106108d4576101008083540402835291602001916108ff565b820191906000526020600020905b8154815290600101906020018083116108e257829003601f168201915b505050505081565b60006005544310156109195760006000fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600060065490505b90565b6000600554431015610a275760006000fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a7f5760006000fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610acc5760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610b5a5760006000fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610be45760006000fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600460009054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610de95760006000fd5b600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b50565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f285780601f10610efd57610100808354040283529160200191610f28565b820191906000526020600020905b815481529060010190602001808311610f0b57829003601f168201915b505050505081565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b505050505081565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060055443101561107c5760006000fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156110d45760006000fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111215760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156111af5760006000fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113165760006000fd5b816005819055507f6e3f7ba04d28a67d7a0a5559a2c6d933b1bc57e598867c94b9b7fca03d95a13682826040518083815260200180602001828103825283818151815260200191508051906020019080838360008314611395575b80518252602083111561139557602082019150602081019050602083039250611371565b505050905090810190601f1680156113c15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5050565b600060008490506113e68585610907565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252838181518152602001915080519060200190808383600083146114eb575b8051825260208311156114eb576020820191506020810190506020830392506114c7565b505050905090810190601f1680156115175780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561153557fe5b6102c65a03f1151561154357fe5b505050600191505b509392505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116385760006000fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156116905760006000fd5b60008214806117165750604051806000019050604051809103902060001916816040518082805190602001908083835b602083106116e357805182526020820191506020810190506020830392506116c0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b156117215760006000fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156117af5760006000fd5b8160066000828254019250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190d5760006000fd5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505600a165627a7a723058207b8828bd901d750e8fea582c32421353d39be9eb7ffb4dcba86aa9ef5260afb0002900000000000000000000000055ae5792903b179915e10065e26610435832a3f7",
  "constructorArguments": "00000000000000000000000055ae5792903b179915e10065e26610435832a3f7"
}