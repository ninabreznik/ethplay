{
  "address": "0xc450fe148e1345e9e3de0a3582b4de99c724c711",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AIB",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.25;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    function balanceOf(address who) constant public returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    \n    using SafeMath for uint256;\n    \n    mapping (address => uint256) internal balances;\n    \n    /**\n    * Returns the balance of the qeuried address\n    *\n    * @param _who The address which is being qeuried\n    **/\n    function balanceOf(address _who) public view returns(uint256) {\n        return balances[_who];\n    }\n    \n    /**\n    * Allows for the transfer of MSTCOIN tokens from peer to peer. \n    *\n    * @param _to The address of the receiver\n    * @param _value The amount of tokens to send\n    **/\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(balances[msg.sender] >= _value && _value > 0 && _to != 0x0);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant public returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract Ownable {\n    \n    address public owner;\n\n    /**\n     * The address whcih deploys this contrcat is automatically assgined ownership.\n     * */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * Functions with this modifier can only be executed by the owner of the contract. \n     * */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event OwnershipTransferred(address indexed from, address indexed to);\n\n    /**\n    * Transfers ownership to new Ethereum address. This function can only be called by the \n    * owner.\n    * @param _newOwner the address to be granted ownership.\n    **/\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract StandardToken is BasicToken, ERC20, Ownable {\n    \n    address public MembershipContractAddr = 0x0;\n    \n    mapping (address => mapping (address => uint256)) internal allowances;\n    \n    function changeMembershipContractAddr(address _newAddr) public onlyOwner returns(bool) {\n        require(_newAddr != address(0));\n        MembershipContractAddr = _newAddr;\n    }\n    \n    /**\n    * Returns the amount of tokens one has allowed another to spend on his or her behalf.\n    *\n    * @param _owner The address which is the owner of the tokens\n    * @param _spender The address which has been allowed to spend tokens on the owner's\n    * behalf\n    **/\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n    \n    event TransferFrom(address msgSender);\n    /**\n    * Allows for the transfer of tokens on the behalf of the owner given that the owner has\n    * allowed it previously. \n    *\n    * @param _from The address of the owner\n    * @param _to The address of the recipient \n    * @param _value The amount of tokens to be sent\n    **/\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n        require(allowances[_from][msg.sender] >= _value || msg.sender == MembershipContractAddr);\n        require(balances[_from] >= _value && _value > 0 && _to != address(0));\n        emit TransferFrom(msg.sender);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(msg.sender != MembershipContractAddr) {\n            allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n    * Allows the owner of tokens to approve another to spend tokens on his or her behalf\n    *\n    * @param _spender The address which is being allowed to spend tokens on the owner' behalf\n    * @param _value The amount of tokens to be sent\n    **/\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != 0x0 && _value > 0);\n        if(allowances[msg.sender][_spender] > 0 ) {\n            allowances[msg.sender][_spender] = 0;\n        }\n        allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n\ncontract BurnableToken is StandardToken {\n    \n    address public ICOaddr;\n    address public privateSaleAddr;\n    \n    constructor() public {\n        ICOaddr = 0x837141Aec793bDAd663c71F8B2c8709731Da22B1;\n        privateSaleAddr = 0x87529BE23E0206eBedd6481fA6644d9B8B5cb9A9;\n    }\n    \n    event TokensBurned(address indexed burner, uint256 value);\n    \n    function burnFrom(address _from, uint256 _tokens) public onlyOwner {\n        require(ICOaddr == _from || privateSaleAddr == _from);\n        if(balances[_from] < _tokens) {\n            emit TokensBurned(_from,balances[_from]);\n            emit Transfer(_from, address(0), balances[_from]);\n            balances[_from] = 0;\n            totalSupply = totalSupply.sub(balances[_from]);\n        } else {\n            balances[_from] = balances[_from].sub(_tokens);\n            totalSupply = totalSupply.sub(_tokens);\n            emit TokensBurned(_from, _tokens);\n            emit Transfer(_from, address(0), _tokens);\n        }\n    }\n}\n\ncontract AIB is BurnableToken {\n    \n    constructor() public {\n        name = \"AI Bank\";\n        symbol = \"AIB\";\n        decimals = 18;\n        totalSupply = 856750000e18;\n        balances[owner] = totalSupply;\n        emit Transfer(address(this), owner, totalSupply);\n    }\n}",
  "bytecode": "608060405260068054600160a060020a031916905534801561002057600080fd5b5060058054600160a060020a0319908116331790915560088054821673837141aec793bdad663c71f8b2c8709731da22b1179055600980549091167387529be23e0206ebedd6481fa6644d9b8b5cb9a91790556040805180820190915260078082527f41492042616e6b0000000000000000000000000000000000000000000000000060209092019182526100b79160019161017b565b506040805180820190915260038082527f414942000000000000000000000000000000000000000000000000000000000060209092019182526100fc9160029161017b565b506003805460ff191660121790556b02c4afde9058544490c00000600081815560058054600160a060020a0390811683526004602090815260409384902085905591548351948552925192169230927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3610216565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101bc57805160ff19168380011785556101e9565b828001600101855582156101e9579182015b828111156101e95782518255916020019190600101906101ce565b506101f59291506101f9565b5090565b61021391905b808211156101f557600081556001016101ff565b90565b610bee806102256000396000f3006080604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663019859bb81146100ea57806306fdde031461011f578063095ea7b3146101a957806313da594d146101cd57806318160ddd146101fe57806323b872dd14610225578063313ce5671461024f57806370a082311461027a57806379cc67901461029b5780638da5cb5b146102c157806395d89b41146102d6578063a9059cbb146102eb578063ac45ff441461030f578063dd62ed3e14610324578063f07d549d1461034b578063f2fde38b14610360575b600080fd5b3480156100f657600080fd5b5061010b600160a060020a0360043516610381565b604080519115158252519081900360200190f35b34801561012b57600080fd5b506101346103e1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016e578181015183820152602001610156565b50505050905090810190601f16801561019b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b557600080fd5b5061010b600160a060020a036004351660243561046e565b3480156101d957600080fd5b506101e2610549565b60408051600160a060020a039092168252519081900360200190f35b34801561020a57600080fd5b50610213610558565b60408051918252519081900360200190f35b34801561023157600080fd5b5061010b600160a060020a036004358116906024351660443561055e565b34801561025b57600080fd5b50610264610740565b6040805160ff9092168252519081900360200190f35b34801561028657600080fd5b50610213600160a060020a0360043516610749565b3480156102a757600080fd5b506102bf600160a060020a0360043516602435610764565b005b3480156102cd57600080fd5b506101e261095c565b3480156102e257600080fd5b5061013461096b565b3480156102f757600080fd5b5061010b600160a060020a03600435166024356109c3565b34801561031b57600080fd5b506101e2610a9f565b34801561033057600080fd5b50610213600160a060020a0360043581169060243516610aae565b34801561035757600080fd5b506101e2610ad9565b34801561036c57600080fd5b506102bf600160a060020a0360043516610ae8565b600554600090600160a060020a0316331461039b57600080fd5b600160a060020a03821615156103b057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915590565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b505050505081565b6000600160a060020a038316158015906104885750600082115b151561049357600080fd5b336000908152600760209081526040808320600160a060020a038716845290915281205411156104e257336000908152600760209081526040808320600160a060020a03871684529091528120555b336000818152600760209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600854600160a060020a031681565b60005481565b600160a060020a03831660009081526007602090815260408083203384529091528120548211158061059a5750600654600160a060020a031633145b15156105a557600080fd5b600160a060020a03841660009081526004602052604090205482118015906105cd5750600082115b80156105e15750600160a060020a03831615155b15156105ec57600080fd5b6040805133815290517fcb86b82816006864ae523e405cbcaf3562533feba48aca9cf652a4d8bfb4dd959181900360200190a1600160a060020a038416600090815260046020526040902054610648908363ffffffff610b7d16565b600160a060020a03808616600090815260046020526040808220939093559085168152205461067d908363ffffffff610b8f16565b600160a060020a038481166000908152600460205260409020919091556006541633146106fd57600160a060020a03841660009081526007602090815260408083203384529091529020546106d8908363ffffffff610b7d16565b600160a060020a03851660009081526007602090815260408083203384529091529020555b82600160a060020a031684600160a060020a0316600080516020610ba3833981519152846040518082815260200191505060405180910390a35060019392505050565b60035460ff1681565b600160a060020a031660009081526004602052604090205490565b600554600160a060020a0316331461077b57600080fd5b600854600160a060020a03838116911614806107a45750600954600160a060020a038381169116145b15156107af57600080fd5b600160a060020a03821660009081526004602052604090205481111561089057600160a060020a03821660008181526004602090815260409182902054825190815291517ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb69281900390910190a2600160a060020a03821660008181526004602090815260408083205481519081529051929392600080516020610ba3833981519152929181900390910190a3600160a060020a038216600090815260046020526040812081905580546108889163ffffffff610b7d16565b600055610958565b600160a060020a0382166000908152600460205260409020546108b9908263ffffffff610b7d16565b600160a060020a038316600090815260046020526040812091909155546108e6908263ffffffff610b7d16565b600055604080518281529051600160a060020a038416917ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610ba38339815191529181900360200190a35b5050565b600554600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104665780601f1061043b57610100808354040283529160200191610466565b3360009081526004602052604081205482118015906109e25750600082115b80156109f65750600160a060020a03831615155b1515610a0157600080fd5b33600090815260046020526040902054610a21908363ffffffff610b7d16565b3360009081526004602052604080822092909255600160a060020a03851681522054610a53908363ffffffff610b8f16565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191923392600080516020610ba38339815191529281900390910190a350600192915050565b600654600160a060020a031681565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600954600160a060020a031681565b600554600160a060020a03163314610aff57600080fd5b600160a060020a0381161515610b1457600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b8957fe5b50900390565b81810182811015610b9c57fe5b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582034a7f84a6a795986845c7d10ed5970668c20f9708f569e376c23eec6eae54b2f0029"
}