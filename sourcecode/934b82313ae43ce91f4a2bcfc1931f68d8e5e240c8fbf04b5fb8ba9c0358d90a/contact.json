{
  "address": "0x840086881facb1e8c222fa5deb2f93f238b0ba95",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenRDC",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-23\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n    Transfer(burner, address(0), _value);\n  }\n}\n\n\n/**\n * @title TokenRDC\n *  \n */\n contract TokenRDC is BurnableToken, StandardToken, Ownable  { \n    \n  string public constant name = \"ROOMDAO COIN (RDC)\";\n   \n  string public constant symbol = \"RDC\";\n    \n  uint32 public constant decimals = 18;\n\n  uint256 public INITIAL_SUPPLY = 60000000 * (10 ** uint256(decimals));\n  \n  address public currentCrowdsale;\n\n  function TokenRDC( address _foundation, address _team, address _BAP ) public {\n    require( _foundation != address(0x0));\n    require( _team != address(0x0));  \n    require( _BAP != address(0x0));  \n    \n    uint256 dec = 10 ** uint256(decimals); //1000000000000000000;\n    totalSupply_ = INITIAL_SUPPLY;\n    \n\tbalances[msg.sender] = INITIAL_SUPPLY;\n\ttransfer( _foundation, 12000000 * dec ); \t// Foundation 20%\n\ttransfer( _team, 6000000 * dec );\t\t\t// Team 10%\n\ttransfer(  _BAP, 2400000 * dec );\t\t\t// Bounty, Advisor, Partnership 4%\n  }\n  \n  /**\n  * @dev transfer token to crowdsale's contract / переводим токены на адрес контратракта распродажи\n  * @param _crowdsale The address of crowdsale's contract.\n  */  \n  function startCrowdsale0( address _crowdsale ) onlyOwner public {\n      _startCrowdsale( _crowdsale, 4500000 );\n  }\n  \n  /**\n  * @dev transfer token to crowdsale's contract / переводим токены на адрес контратракта распродажи\n  * @param _crowdsale The address of crowdsale's contract.\n  */  \n  function startCrowdsale1( address _crowdsale ) onlyOwner public {\n      _startCrowdsale( _crowdsale, 7920000 );\n  }\n  \n  /**\n  * @dev transfer token to crowdsale's contract / переводим токены на адрес контратракта распродажи\n  * @param _crowdsale The address of crowdsale's contract.\n  */  \n  function startCrowdsale2( address _crowdsale ) onlyOwner public {\n      _startCrowdsale( _crowdsale, balances[owner] );\n  }\n  \n  /**\n  * @dev transfer token to crowdsale's contract / переводим токены на адрес контратракта распродажи\n  * @param _crowdsale The address of crowdsale's contract.\n  * @param _value The amount to be transferred.\n  */  \n  function _startCrowdsale( address _crowdsale, uint256 _value ) onlyOwner internal {\n      require(currentCrowdsale == address(0));\n      currentCrowdsale = _crowdsale;\n      uint256 dec = 10 ** uint256(decimals);\n      uint256 val = _value * dec;\n      if( val > balances[owner] ) {\n          val = balances[ owner ];\n      }\n      transfer( _crowdsale, val );\n  }\n  \n  /**\n  * @dev transfer token back to owner / переводим токены обратно владельцу контнракта\n  * \n  */\n  function finishCrowdsale() onlyOwner public returns (bool) {\n    require(currentCrowdsale != address(0));\n    require( balances[currentCrowdsale] > 0 );\n    \n    uint256 value = balances[ currentCrowdsale ];\n    balances[currentCrowdsale] = 0;\n    balances[owner] = balances[owner].add(value);\n    Transfer(currentCrowdsale, owner, value);\n    \n    currentCrowdsale = address(0);\n    return true;\n  }\n  \n  \n   /**\n   * @dev Change ownershipment and move all tokens from old owner to new owner\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public {\n\tsuper.transferOwnership( newOwner );\n\tuint256 value = balances[msg.sender];\n\ttransfer( newOwner, value );    \n  }\n\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000031b5f41da2b4349e9a8f2ba26e74c29b9135d994000000000000000000000000a42235c00f7b68641635b6b2b494128d849f5744000000000000000000000000ef98ec33e4dad1ae35ab783b1f13d7b66a8cb6fe"
}