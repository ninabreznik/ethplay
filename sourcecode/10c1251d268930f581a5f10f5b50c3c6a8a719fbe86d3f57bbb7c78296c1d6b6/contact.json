{
  "address": "0x126e6e7247fa74ec17085c80dfbcfe94e081c396",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpankJar",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\ninterface INMR {\n\n    /* ERC20 Interface */\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /* NMR Special Interface */\n\n    // used for user balance management\n    function withdraw(address _from, address _to, uint256 _value) external returns(bool ok);\n\n    // used for migrating active stakes\n    function destroyStake(address _staker, bytes32 _tag, uint256 _tournamentID, uint256 _roundID) external returns (bool ok);\n\n    // used for disabling token upgradability\n    function createRound(uint256, uint256, uint256, uint256) external returns (bool ok);\n\n    // used for upgrading the token delegate logic\n    function createTournament(uint256 _newDelegate) external returns (bool ok);\n\n    // used like burn(uint256)\n    function mint(uint256 _value) external returns (bool ok);\n\n    // used like burnFrom(address, uint256)\n    function numeraiTransfer(address _to, uint256 _value) external returns (bool ok);\n\n    // used to check if upgrade completed\n    function contractUpgradable() external view returns (bool);\n\n    function getTournament(uint256 _tournamentID) external view returns (uint256, uint256[] memory);\n\n    function getRound(uint256 _tournamentID, uint256 _roundID) external view returns (uint256, uint256, uint256);\n\n    function getStake(uint256 _tournamentID, uint256 _roundID, address _staker, bytes32 _tag) external view returns (uint256, uint256, bool, bool);\n\n}\n\n\ncontract NMRUser {\n\n    address internal constant _TOKEN = address(0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671);\n\n    function _burn(uint256 _value) internal {\n        if (INMR(_TOKEN).contractUpgradable())\n            require(INMR(_TOKEN).transfer(address(0), _value));\n        else\n            require(INMR(_TOKEN).mint(_value), \"burn not successful\");\n    }\n\n    function _burnFrom(address _from, uint256 _value) internal {\n        if (INMR(_TOKEN).contractUpgradable())\n            require(INMR(_TOKEN).transferFrom(_from, address(0), _value));\n        else\n            require(INMR(_TOKEN).numeraiTransfer(_from, _value), \"burnFrom not successful\");\n    }\n\n}\n\n\n/**\n * @title SpankJar\n * @dev Contract that allows for spanking using NMR\n */\ncontract SpankJar is NMRUser {\n    \n    using SafeMath for uint256;\n    \n    address public owner;\n    uint256 public ratio;\n    bool public isActive = true;\n    \n    constructor(uint256 _ratio) public {\n        ratio = _ratio;\n        owner = msg.sender;\n    }\n    \n    function() external payable {\n        require(isActive, 'already ended');\n    }\n    \n    event Ended(uint256 nmrBurned, uint256 ethBurned);\n    \n    function end() public {\n        require(msg.sender == owner, 'not sender');\n        require(isActive, 'already ended');\n        \n        uint256 punishment = getTotalPunishment();\n        uint256 balance = getRemainingBalance();\n        \n        _burn(punishment);\n        \n        require(INMR(_TOKEN).transfer(msg.sender, balance));\n        \n        isActive = false;\n        \n        emit Ended(punishment, address(this).balance);\n    }\n    \n    function getTotalPunishment() public view returns (uint256 punishment) {\n        return address(this).balance.mul(ratio);\n    }\n    \n    function getRemainingBalance() public view returns (uint256 balance) {\n        balance = INMR(_TOKEN).balanceOf(address(this));\n        uint256 punishment = getTotalPunishment();\n        balance = (punishment > balance) ? 0 : balance.sub(punishment);\n    }\n}",
  "bytecode": "60806040526001600260006101000a81548160ff02191690831515021790555034801561002b57600080fd5b50604051602080610b868339810180604052602081101561004b57600080fd5b810190808051906020019092919050505080600181905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610ad3806100b36000396000f3fe608060405260043610610072576000357c01000000000000000000000000000000000000000000000000000000009004806322f3e2d4146100f85780632fba2c851461012757806371ca337d146101525780638da5cb5b1461017d578063bf974ad6146101d4578063efbe1c1c146101ff575b600260009054906101000a900460ff1615156100f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f616c726561647920656e6465640000000000000000000000000000000000000081525060200191505060405180910390fd5b005b34801561010457600080fd5b5061010d610216565b604051808215151515815260200191505060405180910390f35b34801561013357600080fd5b5061013c610229565b6040518082815260200191505060405180910390f35b34801561015e57600080fd5b50610167610349565b6040518082815260200191505060405180910390f35b34801561018957600080fd5b5061019261034f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e057600080fd5b506101e9610374565b6040518082815260200191505060405180910390f35b34801561020b57600080fd5b506102146103a7565b005b600260009054906101000a900460ff1681565b6000731776e1f26f98b1a5df9cd347953a26dd3cb4667173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156102d857600080fd5b505afa1580156102ec573d6000803e3d6000fd5b505050506040513d602081101561030257600080fd5b81019080805190602001909291905050509050600061031f610374565b90508181116103405761033b818361068290919063ffffffff16565b610343565b60005b91505090565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103a26001543073ffffffffffffffffffffffffffffffffffffffff163161070d90919063ffffffff16565b905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6e6f742073656e6465720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900460ff1615156104ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f616c726561647920656e6465640000000000000000000000000000000000000081525060200191505060405180910390fd5b60006104f9610374565b90506000610505610229565b905061051082610797565b731776e1f26f98b1a5df9cd347953a26dd3cb4667173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d60208110156105f157600080fd5b8101908080519060200190929190505050151561060d57600080fd5b6000600260006101000a81548160ff0219169083151502179055507feadd714b167a6d432dd3d920fddab9ad589f3ccb20b9aa2c0850c7b56b43a442823073ffffffffffffffffffffffffffffffffffffffff1631604051808381526020018281526020019250505060405180910390a15050565b60008282111515156106fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000808314156107205760009050610791565b6000828402905082848281151561073357fe5b0414151561078c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610a876021913960400191505060405180910390fd5b809150505b92915050565b731776e1f26f98b1a5df9cd347953a26dd3cb4667173ffffffffffffffffffffffffffffffffffffffff166378b150bd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561080d57600080fd5b505afa158015610821573d6000803e3d6000fd5b505050506040513d602081101561083757600080fd5b81019080805190602001909291905050501561095057731776e1f26f98b1a5df9cd347953a26dd3cb4667173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050506040513d602081101561092f57600080fd5b8101908080519060200190929190505050151561094b57600080fd5b610a83565b731776e1f26f98b1a5df9cd347953a26dd3cb4667173ffffffffffffffffffffffffffffffffffffffff1663a0712d68826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156109d357600080fd5b505af11580156109e7573d6000803e3d6000fd5b505050506040513d60208110156109fd57600080fd5b81019080805190602001909291905050501515610a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6275726e206e6f74207375636365737366756c0000000000000000000000000081525060200191505060405180910390fd5b5b5056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a7230582092e8cf658726e558008b384747784930b3af6738d4025f3a84cc9c36e54487dc00290000000000000000000000000000000000000000000000000000000000000019",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000019"
}