{
  "address": "0x4e9d7f37eadc6fef64b5f5dccc4deb6224667677",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AccountFactoryV2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity 0.4.24;\n\ncontract Utils {\n\n    modifier addressValid(address _address) {\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\n        _;\n    }\n\n}\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // custom : not in original DSMath, putting it here for consistency, copied from SafeMath\n    function div(uint x, uint y) internal pure returns (uint z) {\n        z = x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\ncontract SelfAuthorized {\n    modifier authorized() {\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\n        _;\n    }\n}\ncontract Proxy {\n\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    address masterCopy;\n\n    /// @dev Constructor function sets address of master copy contract.\n    /// @param _masterCopy Master copy address.\n    constructor(address _masterCopy)\n        public\n    {\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    function ()\n        external\n        payable\n    {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) { revert(0, returndatasize()) }\n            return(0, returndatasize())\n        }\n    }\n\n    function implementation()\n        public\n        view\n        returns (address)\n    {\n        return masterCopy;\n    }\n\n    function proxyType()\n        public\n        pure\n        returns (uint256)\n    {\n        return 2;\n    }\n}\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\n    event  Deposit(address indexed _owner, uint _value);\n    event  Withdrawal(address indexed _owner, uint _value);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\ninterface ERC20 {\n\n    function name() public view returns(string);\n    function symbol() public view returns(string);\n    function decimals() public view returns(uint8);\n    function totalSupply() public view returns (uint);\n\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\ncontract ErrorUtils {\n\n    event LogError(string methodSig, string errMsg);\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\n\n}\ncontract MasterCopy is SelfAuthorized {\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n  // It should also always be ensured that the address is stored alone (uses a full word)\n    address masterCopy;\n\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\n  /// @param _masterCopy New contract address.\n    function changeMasterCopy(address _masterCopy)\n        public\n        authorized\n    {\n        // Master copy address cannot be null.\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n}\n\n\nlibrary ECRecovery {\n\n    function recover(bytes32 _hash, bytes _sig)\n        internal\n        pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}\n\n\ncontract Utils2 {\n    using ECRecovery for bytes32;\n    \n    function _recoverSigner(bytes32 _hash, bytes _signature) \n        internal\n        pure\n        returns(address _signer)\n    {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n}\ncontract Config is DSNote, DSAuth, Utils {\n\n    WETH9 public weth9;\n    mapping (address => bool) public isAccountHandler;\n    mapping (address => bool) public isAdmin;\n    address[] public admins;\n    bool public disableAdminControl = false;\n    \n    event LogAdminAdded(address indexed _admin, address _by);\n    event LogAdminRemoved(address indexed _admin, address _by);\n\n    constructor() public {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    modifier onlyAdmin(){\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function setWETH9\n    (\n        address _weth9\n    ) \n        public\n        auth\n        note\n        addressValid(_weth9) \n    {\n        weth9 = WETH9(_weth9);\n    }\n\n    function setAccountHandler\n    (\n        address _accountHandler,\n        bool _isAccountHandler\n    )\n        public\n        auth\n        note\n        addressValid(_accountHandler)\n    {\n        isAccountHandler[_accountHandler] = _isAccountHandler;\n    }\n\n    function toggleAdminsControl() \n        public\n        auth\n        note\n    {\n        disableAdminControl = !disableAdminControl;\n    }\n\n    function isAdminValid(address _admin)\n        public\n        view\n        returns (bool)\n    {\n        if(disableAdminControl) {\n            return true;\n        } else {\n            return isAdmin[_admin];\n        }\n    }\n\n    function getAllAdmins()\n        public\n        view\n        returns(address[])\n    {\n        return admins;\n    }\n\n    function addAdmin\n    (\n        address _admin\n    )\n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\n\n        admins.push(_admin);\n        isAdmin[_admin] = true;\n\n        emit LogAdminAdded(_admin, msg.sender);\n    }\n\n    function removeAdmin\n    (\n        address _admin\n    ) \n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\n\n        isAdmin[_admin] = false;\n\n        for (uint i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == _admin) {\n                admins[i] = admins[admins.length - 1];\n                admins.length -= 1;\n                break;\n            }\n        }\n\n        emit LogAdminRemoved(_admin, msg.sender);\n    }\n}\ncontract DSThing is DSNote, DSAuth, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped = false;\n\n    modifier whenNotStopped {\n        require(!stopped, \"DSStop::_ FEATURE_STOPPED\");\n        _;\n    }\n\n    modifier whenStopped {\n        require(stopped, \"DSStop::_ FEATURE_NOT_STOPPED\");\n        _;\n    }\n\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\n\n    address[] public users;\n    mapping (address => bool) public isUser;\n    mapping (bytes32 => bool) public actionCompleted;\n\n    WETH9 public weth9;\n    Config public config;\n    bool public isInitialized = false;\n\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\n    event LogUserAdded(address indexed user, address by);\n    event LogUserRemoved(address indexed user, address by);\n    event LogImplChanged(address indexed newImpl, address indexed oldImpl);\n\n    modifier initialized() {\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!isInitialized, \"Account::_ ACCOUNT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    modifier userExists(address _user) {\n        require(isUser[_user], \"Account::_ INVALID_USER\");\n        _;\n    }\n\n    modifier userDoesNotExist(address _user) {\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Account::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    modifier onlyHandler(){\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\n        _;\n    }\n\n    function init(address _user, address _config)\n        public \n        notInitialized\n    {\n        users.push(_user);\n        isUser[_user] = true;\n        config = Config(_config);\n        weth9 = config.weth9();\n        isInitialized = true;\n    }\n    \n    function getAllUsers() public view returns (address[]) {\n        return users;\n    }\n\n    function balanceFor(address _token) public view returns (uint _balance){\n        _balance = ERC20(_token).balanceOf(this);\n    }\n    \n    function transferBySystem\n    (   \n        address _token,\n        address _to,\n        uint _value\n    ) \n        external \n        onlyHandler\n        note \n        initialized\n    {\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n        ERC20(_token).transfer(_to, _value);\n\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\n    }\n    \n    function transferByUser\n    (   \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt,\n        bytes _signature\n    )\n        external\n        addressValid(_to)\n        note\n        initialized\n        onlyAdmin\n    {\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        if(ERC20(_token).balanceOf(this) < _value){\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n        \n        if (_token == address(weth9)) {\n            weth9.withdraw(_value);\n            _to.transfer(_value);\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTransferByUser(_token, _to, _value, signer);\n    }\n\n    function addUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_user)\n        userDoesNotExist(_user)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        users.push(_user);\n        isUser[_user] = true;\n\n        emit LogUserAdded(_user, signer);\n    }\n\n    function removeUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        note\n        userExists(_user) \n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n        \n        if(users.length == 1){\n            emit LogError(\"Account::removeUser\",  \"ACC_SHOULD_HAVE_ATLEAST_ONE_USER\");\n            return;\n        }\n        \n        if(!isUser[signer]){\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        actionCompleted[actionHash] = true;\n\n        // should delete value from isUser map? delete isUser[_user]?\n        isUser[_user] = false;\n        for (uint i = 0; i < users.length - 1; i++) {\n            if (users[i] == _user) {\n                users[i] = users[users.length - 1];\n                users.length -= 1;\n                break;\n            }\n        }\n\n        emit LogUserRemoved(_user, signer);\n    }\n\n    function _getTransferActionHash\n    ( \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _token,\n                _to,\n                _value,\n                _salt\n            )\n        );\n    }\n\n    function _getUserActionHash\n    ( \n        address _user,\n        string _action,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _user,\n                _action,\n                _salt\n            )\n        );\n    }\n\n    // to directly send ether to contract\n    function() external payable {\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\n\n        if(msg.sender != address(weth9)){\n            weth9.deposit.value(msg.value)();\n        }\n    }\n\n    function changeImpl\n    (\n        address _to,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_to)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_to, \"CHANGE_ACCOUNT_IMPLEMENTATION\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::changeImpl\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::changeImpl\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        address oldImpl = masterCopy;\n        this.changeMasterCopy(_to);\n        \n        emit LogImplChanged(_to, oldImpl);\n    }\n\n}\ncontract AccountFactory is DSStop, Utils {\n    Config public config;\n    mapping (address => bool) public isAccount;\n    mapping (address => address[]) public userToAccounts;\n    address[] public accounts;\n\n    address public accountMaster;\n\n    constructor\n    (\n        Config _config, \n        address _accountMaster\n    ) \n    public \n    {\n        config = _config;\n        accountMaster = _accountMaster;\n    }\n\n    event LogAccountCreated(address indexed user, address indexed account, address by);\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"AccountFactory::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    function setConfig(Config _config) external note auth addressValid(_config) {\n        config = _config;\n    }\n\n    function setAccountMaster(address _accountMaster) external note auth addressValid(_accountMaster) {\n        accountMaster = _accountMaster;\n    }\n\n    function newAccount(address _user)\n        public\n        note\n        onlyAdmin\n        addressValid(config)\n        addressValid(accountMaster)\n        whenNotStopped\n        returns \n        (\n            Account _account\n        ) \n    {\n        address proxy = new Proxy(accountMaster);\n        _account = Account(proxy);\n        _account.init(_user, config);\n\n        accounts.push(_account);\n        userToAccounts[_user].push(_account);\n        isAccount[_account] = true;\n\n        emit LogAccountCreated(_user, _account, msg.sender);\n    }\n    \n    function batchNewAccount(address[] _users) public note onlyAdmin {\n        for (uint i = 0; i < _users.length; i++) {\n            newAccount(_users[i]);\n        }\n    }\n\n    function getAllAccounts() public view returns (address[]) {\n        return accounts;\n    }\n\n    function getAccountsForUser(address _user) public view returns (address[]) {\n        return userToAccounts[_user];\n    }\n\n}\ncontract AccountFactoryV2 is DSStop, Utils {\n    Config public config;\n    mapping (address => bool) public isAccountValid;\n    mapping (address => address[]) public userToAccounts;\n    address[] public accounts;\n\n    address public accountMaster;\n    AccountFactory accountFactoryV1;\n\n    constructor\n    (\n        Config _config, \n        address _accountMaster,\n        AccountFactory _accountFactoryV1\n    ) \n    public \n    {\n        config = _config;\n        accountMaster = _accountMaster;\n        accountFactoryV1 = _accountFactoryV1;\n    }\n\n    event LogAccountCreated(address indexed user, address indexed account, address by);\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"AccountFactory::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    function setConfig(Config _config) external note auth addressValid(_config) {\n        config = _config;\n    }\n\n    function setAccountMaster(address _accountMaster) external note auth addressValid(_accountMaster) {\n        accountMaster = _accountMaster;\n    }\n\n    function setAccountFactoryV1(AccountFactory _accountFactoryV1) external note auth addressValid(_accountFactoryV1) {\n        accountFactoryV1 = _accountFactoryV1;\n    }\n\n\n    function newAccount(address _user)\n        public\n        note\n        addressValid(config)\n        addressValid(accountMaster)\n        whenNotStopped\n        returns \n        (\n            Account _account\n        ) \n    {\n        address proxy = new Proxy(accountMaster);\n        _account = Account(proxy);\n        _account.init(_user, config);\n\n        accounts.push(_account);\n        userToAccounts[_user].push(_account);\n        isAccountValid[_account] = true;\n\n        emit LogAccountCreated(_user, _account, msg.sender);\n    }\n    \n    function batchNewAccount(address[] _users) external note onlyAdmin {\n        for (uint i = 0; i < _users.length; i++) {\n            newAccount(_users[i]);\n        }\n    }\n\n    function getAllAccounts() public view returns (address[]) {\n        uint accLengthV2 = accounts.length; // 1\n        uint accLengthV1 = accountFactoryV1.getAllAccounts().length; // 1\n        uint accLength = accLengthV2 + accLengthV1; // 2\n\n        address[] memory accs = new address[](accLength);\n\n        for(uint i = 0; i < accLength; i++){\n            if(i < accLengthV2) { \n                accs[i] = accounts[i];\n            } else {\n                accs[i] = accountFactoryV1.accounts(i - accLengthV2);\n            }\n        }\n\n        return accs;\n    }\n\n    function getAccountsForUser(address _user) public view returns (address[]) {\n        uint userToAccLengthV2 = userToAccounts[_user].length;\n        uint userToAccLengthV1 = accountFactoryV1.getAccountsForUser(_user).length;\n        uint userToAccLength = userToAccLengthV2 + userToAccLengthV1;\n        \n        address[] memory userToAcc = new address[](userToAccLength);\n\n        for(uint i = 0; i < userToAccLength; i++){\n            if(i < userToAccLengthV2) {\n                userToAcc[i] = userToAccounts[_user][i];\n            } else {\n                userToAcc[i] = accountFactoryV1.userToAccounts(_user, i - userToAccLengthV2);\n            }\n        }\n\n        return userToAcc;\n    }\n\n    function isAccount(address _account) public view returns (bool) {\n        return isAccountValid[_account] || accountFactoryV1.isAccount(_account);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"newAccount\",\"outputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountMaster\",\"type\":\"address\"}],\"name\":\"setAccountMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAccountValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchNewAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountFactoryV1\",\"type\":\"address\"}],\"name\":\"setAccountFactoryV1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_config\",\"type\":\"address\"},{\"name\":\"_accountMaster\",\"type\":\"address\"},{\"name\":\"_accountFactoryV1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogAccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b50604051606080611a2983398101604081815282516020840151919093015160018054600160a060020a0319163390811790915591929091907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a260028054600160a060020a03948516600160a060020a03199182161790915560068054938516938216939093179092556007805491909316911617905561195e806100cb6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303152429811461011657806307da68f51461015357806308e93d0a1461016a57806313af4035146101cf578063169b7012146101f05780631eb9ef911461021457806320e3dbd41461023557806325ca4c9c146102565780633e0bd52e1461028b57806373a6b2be146102ac57806375f12b21146102cd57806379502c55146102e25780637a9e5e4b146102f75780638da5cb5b146103185780639996eb641461032d578063b5ca87c41461034d578063be9a65551461036e578063bf7e214f14610383578063f0a72a8414610398578063f2a40db8146103ad575b600080fd5b34801561012257600080fd5b50610137600160a060020a03600435166103c5565b60408051600160a060020a039092168252519081900360200190f35b34801561015f57600080fd5b506101686106d8565b005b34801561017657600080fd5b5061017f6107bc565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101bb5781810151838201526020016101a3565b505050509050019250505060405180910390f35b3480156101db57600080fd5b50610168600160a060020a0360043516610a2d565b3480156101fc57600080fd5b50610137600160a060020a0360043516602435610ae4565b34801561022057600080fd5b5061017f600160a060020a0360043516610b1b565b34801561024157600080fd5b50610168600160a060020a0360043516610dae565b34801561026257600080fd5b50610277600160a060020a0360043516610edb565b604080519115158252519081900360200190f35b34801561029757600080fd5b50610168600160a060020a0360043516610f98565b3480156102b857600080fd5b50610277600160a060020a03600435166110c5565b3480156102d957600080fd5b506102776110da565b3480156102ee57600080fd5b506101376110fb565b34801561030357600080fd5b50610168600160a060020a036004351661110a565b34801561032457600080fd5b506101376111bd565b34801561033957600080fd5b5061016860048035602481019101356111cc565b34801561035957600080fd5b50610168600160a060020a0360043516611373565b34801561037a57600080fd5b506101686114a0565b34801561038f57600080fd5b5061013761156d565b3480156103a457600080fd5b5061013761157c565b3480156103b957600080fd5b5061013760043561158b565b6040805134808252602082018381523693830184905260009384936004359360243593849386933393600160e060020a03198a35169390928a929091606082018484808284376040519201829003965090945050505050a4600254600160a060020a031680151561046e576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611913833981519152604482015290519081900360640190fd5b600654600160a060020a03168015156104bf576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611913833981519152604482015290519081900360640190fd5b60015474010000000000000000000000000000000000000000900460ff1615610532576040805160e560020a62461bcd02815260206004820152601960248201527f445353746f703a3a5f20464541545552455f53544f5050454400000000000000604482015290519081900360640190fd5b600654600160a060020a03166105466116ba565b600160a060020a03909116815260405190819003602001906000f080158015610573573d6000803e3d6000fd5b50600254604080517ff09a4016000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152928316602482015290519298508897509087169163f09a40169160448082019260009290919082900301818387803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b50506005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018054600160a060020a03808c1673ffffffffffffffffffffffffffffffffffffffff1992831681179093558c1660008181526004602090815260408083208054808901825590845282842001805490951686179094558482526003815290839020805460ff19169095179094558151338152915192955093507eef0c4d7ce8d09e55441711e41dc8f1a6abbe3313f4369ea8094dbf0b7b182092908290030190a35050505050919050565b6106ee33600035600160e060020a0319166115b3565b1515610732576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60606000806000606060006005805490509450600760009054906101000a9004600160a060020a0316600160a060020a03166308e93d0a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561087857600080fd5b81019080805164010000000081111561089057600080fd5b820160208101848111156108a357600080fd5b81518560208202830111640100000000821117156108c057600080fd5b50509291905050505193508385019250826040519080825280602002602001820160405280156108fa578160200160208202803883390190505b509150600090505b82811015610a24578481101561096257600580548290811061092057fe5b6000918252602090912001548251600160a060020a039091169083908390811061094657fe5b600160a060020a03909216602092830290910190910152610a1c565b600754604080517ff2a40db800000000000000000000000000000000000000000000000000000000815287840360048201529051600160a060020a039092169163f2a40db8916024808201926020929091908290030181600087803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b505050506040513d60208110156109f457600080fd5b50518251839083908110610a0457fe5b600160a060020a039092166020928302909101909101525b600101610902565b50949350505050565b610a4333600035600160e060020a0319166115b3565b1515610a87576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b600460205281600052604060002081815481101515610aff57fe5b600091825260209091200154600160a060020a03169150829050565b600160a060020a0380821660008181526004602081905260408083205460075482517f1eb9ef910000000000000000000000000000000000000000000000000000000081529384019590955290516060959194849387938593921691631eb9ef9191602480820192869290919082900301818387803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610bda57600080fd5b810190808051640100000000811115610bf257600080fd5b82016020810184811115610c0557600080fd5b8151856020820283011164010000000082111715610c2257600080fd5b5050929190505050519350838501925082604051908082528060200260200182016040528015610c5c578160200160208202803883390190505b509150600090505b82811015610da45784811015610cda57600160a060020a0387166000908152600460205260409020805482908110610c9857fe5b6000918252602090912001548251600160a060020a0390911690839083908110610cbe57fe5b600160a060020a03909216602092830290910190910152610d9c565b600754604080517f169b7012000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015288850360248301529151919092169163169b70129160448083019260209291908290030181600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050506040513d6020811015610d7457600080fd5b50518251839083908110610d8457fe5b600160a060020a039092166020928302909101909101525b600101610c64565b5095945050505050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a4610e1533600035600160e060020a0319166115b3565b1515610e59576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b82600160a060020a0381161515610ea8576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611913833981519152604482015290519081900360640190fd5b50506002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b600160a060020a03811660009081526003602052604081205460ff1680610f925750600754604080517f25ca4c9c000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916325ca4c9c9160248083019260209291908290030181600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d6020811015610f8f57600080fd5b50515b92915050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a4610fff33600035600160e060020a0319166115b3565b1515611043576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b82600160a060020a0381161515611092576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611913833981519152604482015290519081900360640190fd5b50506006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b60036020526000908152604090205460ff1681565b60015474010000000000000000000000000000000000000000900460ff1681565b600254600160a060020a031681565b61112033600035600160e060020a0319166115b3565b1515611164576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600154600160a060020a031681565b604080513480825260208201838152369383018490526000936004359360243593849386933393600160e060020a03198a351693928a929190606082018484808284376040519201829003965090945050505050a4600254604080517f9c14ee290000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691639c14ee29916024808201926020929091908290030181600087803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506040513d60208110156112b157600080fd5b5051151561132f576040805160e560020a62461bcd02815260206004820152602760248201527f4163636f756e74466163746f72793a3a5f20494e56414c49445f41444d494e5f60448201527f4143434f554e5400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600092505b8383101561136c5761136085858581811061134b57fe5b90506020020135600160a060020a03166103c5565b50600190920191611334565b5050505050565b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a46113da33600035600160e060020a0319166115b3565b151561141e576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b82600160a060020a038116151561146d576040805160e560020a62461bcd0281526020600482015260186024820152600080516020611913833981519152604482015290519081900360640190fd5b50506007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b6114b633600035600160e060020a0319166115b3565b15156114fa576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206118f3833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031681565b600654600160a060020a031681565b600580548290811061159957fe5b600091825260209091200154600160a060020a0316905081565b6000600160a060020a0383163014156115ce57506001610f92565b600154600160a060020a03848116911614156115ec57506001610f92565b600054600160a060020a0316151561160657506000610f92565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561168757600080fd5b505af115801561169b573d6000803e3d6000fd5b505050506040513d60208110156116b157600080fd5b50519392505050565b604051610228806116cb833901905600608060405234801561001057600080fd5b506040516020806102288339810160405251600160a060020a03811615156100be57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c6964206d617374657220636f707920616464726573732070726f7660448201527f6964656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008054600160a060020a03909216600160a060020a031990921691909117905561013a806100ee6000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634555d5c981146100885780635c60da1b146100af575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e801515610083573d6000fd5b3d6000f35b34801561009457600080fd5b5061009d6100ed565b60408051918252519081900360200190f35b3480156100bb57600080fd5b506100c46100f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600290565b60005473ffffffffffffffffffffffffffffffffffffffff16905600a165627a7a7230582000e8963a53396a420e260d6762a2b264be1db09b89fce92475fadd0600ddeffb00294453417574683a3a5f2053454e4445525f4e4f545f415554484f52495a4544005574696c733a3a5f20494e56414c49445f414444524553530000000000000000a165627a7a723058201fb993aeaba6d09f9605692ef881a60e2e4a0fb7b7af403218fbf79cad1092310029000000000000000000000000431f429035a1e3059d5c6a9a83208c6d3143d92500000000000000000000000078b37409628e10df0b661c6b205b872a4df8dd6e000000000000000000000000f5a38fbc26c720c79350b99d9c0bd42b3e9b8316",
  "constructorArguments": "000000000000000000000000431f429035a1e3059d5c6a9a83208c6d3143d92500000000000000000000000078b37409628e10df0b661c6b205b872a4df8dd6e000000000000000000000000f5a38fbc26c720c79350b99d9c0bd42b3e9b8316"
}