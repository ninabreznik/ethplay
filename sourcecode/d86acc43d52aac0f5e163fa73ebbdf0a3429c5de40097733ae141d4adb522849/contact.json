{
  "address": "0xf14c1236921a912bcd9cffcf82a4fddb53f95732",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NiftyStaticCalls",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.5.4;\n\ncontract NiftyStaticCalls {\n    \n    function retAdd() external view returns(address) {\n        return(msg.sender);\n    }\n    \n       /**\n   * Recovery function for signature - taken from OpenZeppelin\n   * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9e1da49f235476290d5433dac6807500e18c7251/contracts/ECRecovery.sol\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n    \n        /** Functions to validate signatures so wallet can sign messages\n     * @dev Two functions - isValidSignature(bytes,bytes) and isValidSignature(bytes32,bytes)\n     * @dev isValidSignature(bytes,bytes) conforms to ERC1271 - https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1271.md\n     * @dev This means it returns the magic value 0x20c13b0b\n     * @dev isValidSignature(bytes32,bytes) conforms to - https://github.com/0xProject/0x-monorepo/blob/development/contracts/exchange/contracts/examples/Wallet.sol#L45\n     */ \n    \n        /// @dev Validates a signature.\n    ///      The signer must match the owner of this wallet.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of signature as bool\n    /// @dev To ensure a signature from one Nifty Wallet can't be used for another,\n    /// @dev Data signed is concantenated with the wallets address\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        require(\n            signature.length == 65,\n            \"LENGTH_65_REQUIRED\"\n        );\n        \n        bytes memory newData = abi.encodePacked(msg.sender, hash);\n        bytes32 newDataHash = keccak256(newData);\n        \n        address recoveredAddress = recover(newDataHash, signature);\n        NiftyWalletContract NW_instance = NiftyWalletContract(msg.sender);\n        address WALLET_OWNER = NW_instance.returnUserAccountAddress();\n        isValid = WALLET_OWNER == recoveredAddress;\n        return isValid;\n    }\n    \n    bytes4 internal MAGICVALUE = 0x20c13b0b;\n    \n        /// @dev Validates a signature.\n    ///      The signer must match the owner of this wallet.\n    /// @param _data Data that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of signature as bytes4\n    /// @dev To ensure a signature from one Nifty Wallet can't be used for another,\n    /// @dev Data signed is concantenated with the wallets address\n    function isValidSignature(\n        bytes calldata _data,\n        bytes calldata signature\n    )\n        external\n        view\n      returns (bytes4 magicValue)\n    {\n        require(\n            signature.length == 65,\n            \"LENGTH_65_REQUIRED\"\n        );\n        \n        bytes32 dataHash = keccak256(_data);\n        bytes memory newData = abi.encodePacked(msg.sender, dataHash);\n        bytes32 newDataHash = keccak256(newData);\n        \n        address recoveredAddress = recover(newDataHash, signature);\n        NiftyWalletContract NW_instance = NiftyWalletContract(msg.sender);\n        address WALLET_OWNER = NW_instance.returnUserAccountAddress();\n        if (WALLET_OWNER == recoveredAddress) {\n            return MAGICVALUE;\n        } else {\n            return (0xdeadbeef);\n        }\n    }\n\n    /**\n     * @dev Safe receiver functions\n    */\n    \n    /** ERC721 receiver function \n     * From OpenZeppelin - https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.12.0/contracts/token/ERC721/ERC721Receiver.sol\n     * Nifty Wallets will always receive an ERC721\n     */\n    \n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n    \n    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\n        return (ERC721_RECEIVED);\n    }\n\n    /** Safe ERC1155 receiver\n    * Nifty Wallets will always receive ERC1155s as well\n    * We like all tokens\n    * From Horizon Games - https://github.com/horizon-games/multi-token-standard\n    */\n    bytes4 constant public ERC1155_RECEIVED_SIG = 0xf23a6e61;\n      bytes4 constant public ERC1155_BATCH_RECEIVED_SIG = 0xbc197c81;\n      bytes4 constant public ERC1155_RECEIVED_INVALID = 0xdeadbeef;\n\n      bytes public lastData;\n      address public lastOperator;\n      uint256 public lastId;\n      uint256 public lastValue;\n\n      /**\n      * @notice Handle the receipt of a single ERC1155 token type.\n      * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n      * This function MAY throw to revert and reject the transfer.\n      * Return of other than the magic value MUST result in the transaction being reverted.\n      * Note: The contract address is always the message sender.\n      * @param _operator  The address which called the `safeTransferFrom` function\n      * @param _from      The address which previously owned the token\n      * @param _id        The id of the token being transferred\n      * @param _value     The amount of tokens being transferred\n      * @param _data      Additional data with no specified format\n      * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n      */\n      function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data )\n        external view returns(bytes4)\n      {\n          return ERC1155_RECEIVED_SIG;\n      }\n\n      /**\n      * @notice Handle the receipt of multiple ERC1155 token types.\n      * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n      * This function MAY throw to revert and reject the transfer.\n      * Return of other than the magic value WILL result in the transaction being reverted.\n      * Note: The contract address is always the message sender.\n      * @param _operator  The address which called the `safeBatchTransferFrom` function\n      * @param _from      The address which previously owned the token\n      * @param _ids       An array containing ids of each token being transferred\n      * @param _values    An array containing amounts of each token being transferred\n      * @param _data      Additional data with no specified format\n      * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n      */\n      function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data)\n        external view returns(bytes4)\n      {\n          return ERC1155_BATCH_RECEIVED_SIG;\n      }\n}\n\ncontract NiftyWalletContract {\n    function returnWalletTxCount() public view returns (uint);\n    function returnUserAccountAddress() public view returns (address);\n}",
  "bytecode": "60806040526320c13b0b7c0100000000000000000000000000000000000000000000000000000000026000806101000a81548163ffffffff02191690837c01000000000000000000000000000000000000000000000000000000009004021790555034801561006d57600080fd5b506111048061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100eb576000357c0100000000000000000000000000000000000000000000000000000000900480636eb3cd49116100a9578063bc197c8111610083578063bc197c81146105ef578063c1292cc3146107a4578063e8c091f7146107c2578063f23a6e611461081e576100eb565b80636eb3cd49146104ff578063acfc5eb114610549578063aef6357914610593576100eb565b80626e75ec146100f05780630a14dcd614610173578063150b7a02146101cf5780631626ba7e1461032657806320c13b0b146103c157806343183834146104e1575b600080fd5b6100f861093d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013857808201518184015260208101905061011d565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017b6109db565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6102d2600480360360808110156101e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610a02565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6103a76004803603604081101561033c57600080fd5b81019080803590602001909291908035906020019064010000000081111561036357600080fd5b82018360208201111561037557600080fd5b8035906020019184600183028401116401000000008311171561039757600080fd5b9091929391929390505050610a32565b604051808215151515815260200191505060405180910390f35b61048d600480360360408110156103d757600080fd5b81019080803590602001906401000000008111156103f457600080fd5b82018360208201111561040657600080fd5b8035906020019184600183028401116401000000008311171561042857600080fd5b90919293919293908035906020019064010000000081111561044957600080fd5b82018360208201111561045b57600080fd5b8035906020019184600183028401116401000000008311171561047d57600080fd5b9091929391929390505050610c5a565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6104e9610f06565b6040518082815260200191505060405180910390f35b610507610f0c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610551610f32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61059b610f3a565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610750600480360360a081101561060557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561066257600080fd5b82018360208201111561067457600080fd5b8035906020019184602083028401116401000000008311171561069657600080fd5b9091929391929390803590602001906401000000008111156106b757600080fd5b8201836020820111156106c957600080fd5b803590602001918460208302840111640100000000831117156106eb57600080fd5b90919293919293908035906020019064010000000081111561070c57600080fd5b82018360208201111561071e57600080fd5b8035906020019184600183028401116401000000008311171561074057600080fd5b9091929391929390505050610f61565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6107ac610f95565b6040518082815260200191505060405180910390f35b6107ca610f9b565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6108e9600480360360a081101561083457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156108a557600080fd5b8201836020820111156108b757600080fd5b803590602001918460018302840111640100000000831117156108d957600080fd5b9091929391929390505050610fc2565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d35780601f106109a8576101008083540402835291602001916109d3565b820191906000526020600020905b8154815290600101906020018083116109b657829003601f168201915b505050505081565b63bc197c817c01000000000000000000000000000000000000000000000000000000000281565b600063150b7a027c0100000000000000000000000000000000000000000000000000000000029050949350505050565b6000604183839050141515610aaf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4c454e4754485f36355f5245515549524544000000000000000000000000000081525060200191505060405180910390fd5b60603385604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019250505060405160208183030381529060405290506000818051906020012090506000610b728287878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610ff4565b9050600033905060008173ffffffffffffffffffffffffffffffffffffffff1663615153346040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d6020811015610c0757600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614955085955050505050509392505050565b6000604183839050141515610cd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4c454e4754485f36355f5245515549524544000000000000000000000000000081525060200191505060405180910390fd5b600085856040518083838082843780830192505050925050506040518091039020905060603382604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018281526020019250505060405160208183030381529060405290506000818051906020012090506000610dbd8288888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610ff4565b9050600033905060008173ffffffffffffffffffffffffffffffffffffffff1663615153346040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d6020811015610e5257600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ed1576000809054906101000a90047c0100000000000000000000000000000000000000000000000000000000029650505050505050610efe565b63deadbeef7c01000000000000000000000000000000000000000000000000000000000296505050505050505b949350505050565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b63f23a6e617c01000000000000000000000000000000000000000000000000000000000281565b600063bc197c817c010000000000000000000000000000000000000000000000000000000002905098975050505050505050565b60035481565b63deadbeef7c01000000000000000000000000000000000000000000000000000000000281565b600063f23a6e617c01000000000000000000000000000000000000000000000000000000000290509695505050505050565b6000806000806041855114151561101157600093505050506110d2565b6020850151925060408501519150606085015160001a9050601b8160ff16101561103c57601b810190505b601b8160ff16141580156110545750601c8160ff1614155b1561106557600093505050506110d2565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156110c2573d6000803e3d6000fd5b5050506020604051035193505050505b9291505056fea165627a7a72305820ffac80791b21fcb807e1b6cb7dfdaaa7e8c57aa44fb071b9843f86d465013d320029"
}