{
  "address": "0x20bD491fee75B6af6c2100C83B83312D620f2958",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AdvancedRealityClashWeapon",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity 0.5.1;\n\n// RCC Tokenization Contract\n\n/**\n * @title ERC20\n * @author Prashant Prabhakar Singh\n * @dev  https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ncontract ERC20Interface {\n  function transfer(address to, uint tokens) public returns (bool success);\n  event Transfer(address indexed from, address indexed to, uint tokens);\n}\n\n/**\n * @title ERC165\n * @author Prashant Prabhakar Singh\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @author Prashant Prabhakar Singh\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. This function MUST use 50,000 gas or less. Return of other\n   * than the magic value MUST result in the transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _from,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public\n    returns(bytes4);\n}\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Prashant Prabhakar Singh\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n/**\n * @title Pausable\n * @author Prashant Prabhakar Singh\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n  address public pauser;\n\n  constructor () internal {\n    _paused = false;\n    pauser = msg.sender;\n  }\n\n  /**\n    * @return true if the contract is paused, false otherwise.\n    */\n  function paused() public view returns (bool) {\n    return _paused;\n  }\n\n  /**\n    * @dev Modifier to make a function callable only by pauser.\n    */\n  modifier onlyPauser() {\n    require(msg.sender == pauser);\n    _;\n  }\n\n  /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n\n  /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n  function pause() public onlyPauser {\n    require(!_paused);\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n  function unpause() public onlyPauser {\n    require(_paused);\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @author Prashant Prabhakar Singh\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165, Pausable {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public;\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @author Prashant Prabhakar Singh\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public whenNotPaused {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public whenNotPaused {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n    whenNotPaused\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n    whenNotPaused\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @author Prashant Prabhakar Singh\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata \n * @author Prashant Prabhakar Singh\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @author Prashant Prabhakar Singh\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n/**\n * @title Full ERC721 Token\n * @author Prashant Prabhakar Singh\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string memory _name, string memory _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string memory) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string memory) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n/**\n * @title Ownership\n * @author Prashant Prabhakar Singh\n * This contract has an owner address, and provides basic authorization control\n */\ncontract Ownership is Pausable {\n  address public owner;\n  event OwnershipUpdated(address oldOwner, address newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function updateOwner(address _newOwner)\n    public\n    onlyOwner\n    whenNotPaused\n  {\n    owner = _newOwner;\n    emit OwnershipUpdated(msg.sender, owner);\n  }\n}\n\n/**\n * @title Operators\n * @author Prashant Prabhakar Singh\n * This contract add functionlaity of adding operators that have higher authority than a normal user\n * @dev Operators can perform different actions based on their level.\n */\ncontract Operators is Ownership {\n  // state variable\n  address[] private operators;\n  uint8 MAX_OP_LEVEL;\n  mapping (address => uint8) operatorLevel; // mapping of address to level\n\n  // events\n  event OperatorAdded (address _operator, uint8 _level);\n  event OperatorUpdated (address _operator, uint8 _level);\n  event OperatorRemoved (address _operator);\n\n  constructor()\n    public\n  {\n    MAX_OP_LEVEL = 3;\n  }\n\n  modifier onlyLevel(uint8 level) {\n    uint8 opLevel = getOperatorLevel(msg.sender);\n    if (level > 0) {\n      require( opLevel <= level && opLevel != 0);\n      _;\n    } else {\n      _;\n    }\n  }\n\n  modifier onlyValidLevel(uint8 _level){\n    require(_level> 0 && _level <= MAX_OP_LEVEL);\n    _;\n  }\n\n  function addOperator(address _newOperator, uint8 _level)\n    public \n    onlyOwner\n    whenNotPaused\n    onlyValidLevel(_level)\n    returns (bool)\n  {\n    require (operatorLevel[_newOperator] == 0); // use change level instead\n    operatorLevel[_newOperator] = _level;\n    operators.push(_newOperator);\n    emit OperatorAdded(_newOperator, _level);\n    return true;\n  }\n\n  function updateOperator(address _operator, uint8 _level)\n    public\n    onlyOwner\n    whenNotPaused\n    onlyValidLevel(_level)\n    returns (bool)\n  {\n    require (operatorLevel[_operator] != 0); // use add Operator\n    operatorLevel[_operator] = _level;\n    emit OperatorUpdated(_operator, _level);\n    return true;\n  }\n\n  function removeOperatorByIndex(uint index)\n    public\n    onlyOwner\n    whenNotPaused\n    returns (bool)\n  {\n    index = index - 1;\n    operatorLevel[operators[index]] = 0;\n    operators[index] = operators[operators.length - 1];\n    operators.length -- ;\n    return true;\n\n  }\n\n  \n    /**\n   * @dev Use removeOperatorByIndex instead to save gas\n   * warning: not advised to use this function.\n   */\n  function removeOperator(address _operator)\n    public\n    onlyOwner\n    whenNotPaused\n    returns (bool)\n  {\n    uint index = getOperatorIndex(_operator);\n    require(index > 0);\n    return removeOperatorByIndex(index);\n  }\n\n  function getOperatorIndex(address _operator)\n    public\n    view\n    returns (uint)\n  {\n    for (uint i=0; i<operators.length; i++) {\n      if (operators[i] == _operator) return i+1;\n    }\n    return 0;\n  }\n\n  function getOperators()\n    public\n    view\n    returns (address[] memory)\n  {\n    return operators;\n  }\n\n  function getOperatorLevel(address _operator)\n    public\n    view\n    returns (uint8)\n  {\n    return operatorLevel[_operator];\n  }\n\n}\n\n/**\n * @title RealityClashWeapon\n * @author Prashant Prabhakar Singh\n * This contract implements Reality Clash Weapons NFTs.\n */\ncontract RealityClashWeapon is ERC721Token, Operators {\n\n  // mappings to store RealityClash Weapon Data\n  mapping (uint => string) gameDataOf;\n  mapping (uint => string) weaponDataOf;\n  mapping (uint => string) ownerDataOf;\n\n \n  event WeaponAdded(uint indexed weaponId, string gameData, string weaponData, string ownerData, string tokenURI);\n  event WeaponUpdated(uint indexed weaponId, string gameData, string weaponData, string ownerData, string tokenURI);\n  event WeaponOwnerUpdated (uint indexed  _weaponId, address indexed  _oldOwner, address indexed  _newOwner);\n\n  constructor() public  ERC721Token('Reality Clash Weapon', 'RC GUN'){\n  }\n\n  /**\n   * @dev Mints new tokens wih jsons on blockchain\n   * Reverts if the sender is not operator with level 1\n   * @param _id Id of weapon to be minted\n   * @param _gameData represent game data of the weapon\n   * @param _weaponData represents weapon data of the weapon\n   * @param _ownerData represents owner data of the weapon\n   */\n  function mint(uint256 _id, string memory _gameData, string memory _weaponData, string memory _ownerData, address _to)\n    public\n    onlyLevel(1)\n    whenNotPaused\n  {\n    super._mint(_to, _id);\n    gameDataOf[_id] = _gameData;\n    weaponDataOf[_id] = _weaponData;\n    ownerDataOf[_id] = _ownerData;\n    emit WeaponAdded(_id, _gameData, _weaponData, _ownerData, '');\n  }\n\n  /**\n   * @dev Mints new tokens with tokenURI\n   * Reverts if the sender is not operator with level 1\n   * @param _id Id of weapon to be minted\n   * @param _to represent address to which unique token is minted\n   * @param _uri represents string URI to assign\n   */\n  function mintWithURI(uint256 _id, address _to, string memory _uri)\n    public\n    onlyLevel(1)\n    whenNotPaused\n  {\n    super._mint(_to, _id);\n    super._setTokenURI(_id, _uri);\n    emit WeaponAdded(_id, '', '', '', _uri);\n  }\n\n\n  /**\n   * @dev Transfer tokens (similar to ERC-20 transfer)\n   * Reverts if the sender is not owner of the weapon or approved\n   * @param _to address to which token is transferred\n   * @param _tokenId Id of weapon being transferred\n   */\n  function transfer(address _to, uint256 _tokenId)\n    public\n    whenNotPaused\n  {\n    safeTransferFrom(msg.sender, _to, _tokenId);\n  }\n\n  /**\n   * @dev Updates metaData of already minted tokens\n   * Reverts if the sender is not operator with level 2 or above\n   * @param _id Id of weapon whose data needs to be updated\n   * @param _gameData represent game data of the weapon\n   * @param _weaponData represents weapon data of the weapon\n   * @param _ownerData represents owner data of the weapon\n   */\n  function updateMetaData(uint _id, string memory _gameData, string memory _weaponData, string memory _ownerData)\n    public \n    onlyLevel(2)\n    whenNotPaused\n  {\n    gameDataOf[_id] = _gameData;\n    weaponDataOf[_id] = _weaponData;\n    ownerDataOf[_id] = _ownerData;\n  }\n\n  /**\n   * @dev Burn an existing weapon\n   * @param _id Id of weapon to be burned\n   */\n  function burn(uint _id)\n    public\n    whenNotPaused\n  {\n   super._burn(msg.sender, _id);\n  }\n\n\n  /**\n   * @dev Update game proprietary data\n   * @param _id Id of weapon whose data needs to be updated\n   * @param _gameData is new game data for weapon\n   */\n  function updateGameData (uint _id, string memory _gameData)\n    public\n    onlyLevel(2)\n    whenNotPaused\n    returns(bool)\n  {\n    gameDataOf[_id] = _gameData;\n    emit WeaponUpdated(_id, _gameData, \"\", \"\", \"\");\n    return true;\n  }\n\n  /**\n   * @dev Update weapon sepcific data of weapon\n   * @param _id Id of weapon whose data needs to be updated\n   * @param _weaponData is new public data for weapon\n   */\n  function updateWeaponData (uint _id,  string memory _weaponData)\n    public \n    onlyLevel(2)\n    whenNotPaused\n    returns(bool) \n  {\n    weaponDataOf[_id] = _weaponData;\n    emit WeaponUpdated(_id, \"\", _weaponData, \"\", \"\");\n    return true;\n  }\n\n  /**\n   * @dev Update owner proprietary data\n   * @param _id Id of weapon whose data needs to be updated\n   * @param _ownerData is new owner data for weapon\n   */\n  function updateOwnerData (uint _id, string memory _ownerData)\n    public\n    onlyLevel(2)\n    whenNotPaused\n    returns(bool)\n  {\n    ownerDataOf[_id] = _ownerData;\n    emit WeaponUpdated(_id, \"\", \"\", _ownerData, \"\");\n    return true;\n  }\n\n  /**\n   * @dev Update token URI of weapon\n   * @param _id Id of weapon whose data needs to be updated\n   * @param _uri Url of weapon details\n   */\n  function updateURI (uint _id, string memory _uri)\n    public\n    onlyLevel(2)\n    whenNotPaused\n    returns(bool)\n  {\n    super._setTokenURI(_id, _uri);\n    emit WeaponUpdated(_id, \"\", \"\", \"\", _uri);\n    return true;\n  }\n\n  //////////////////////////////////////////\n  // PUBLICLY ACCESSIBLE METHODS (CONSTANT)\n  //////////////////////////////////////////\n\n  /**\n  * @return game data of weapon.\n  */\n  function getGameData (uint _id) public view returns(string memory _gameData) {\n    return gameDataOf[_id];\n  }\n\n  /**\n  * @return weapon data of weapon.\n  */\n  function getWeaponData (uint _id) public view returns(string memory _pubicData) {\n    return weaponDataOf[_id];\n  }\n\n  /**\n  * @return owner data of weapon.\n  */\n  function getOwnerData (uint _id) public view returns(string memory _ownerData) {\n    return ownerDataOf[_id] ;\n  }\n\n  /**\n  * @return all metaData data of weapon including game data, weapon data, owner data.\n  */\n  function getMetaData (uint _id) public view returns(string memory _gameData,string memory _pubicData,string memory _ownerData ) {\n    return (gameDataOf[_id], weaponDataOf[_id], ownerDataOf[_id]);\n  }\n}\n\n\n/**\n * @title AdvancedRealityClashWeapon\n * @author Prashant Prabhakar Singh\n * This contract implements submitting a pre signed tx\n * @dev Method allowed is setApproval and transfer\n */\ncontract AdvancedRealityClashWeapon is RealityClashWeapon {\n\n  // mapping for replay protection\n  mapping(address => uint) private userNonce;\n\n  bool public isNormalUserAllowed; // can normal user access advanced features\n  \n  constructor() public {\n    isNormalUserAllowed = false;\n  }\n\n  /**\n   * @dev Allows normal users to call proval fns\n   * Reverts if the sender is not owner of contract\n   * @param _perm permission to users\n   */\n  function allowNormalUser(bool _perm)\n    public \n    onlyOwner\n    whenNotPaused\n  {\n    isNormalUserAllowed = _perm;\n  }\n\n  /**\n   * @dev Allows submitting already signed transaction\n   * Reverts if the signed data is incorrect\n   * @param message signed message by user\n   * @param r signature\n   * @param s signature\n   * @param v recovery id of signature\n   * @param spender address which is approved\n   * @param approved bool value for status of approval\n   * message should be hash(functionWord, contractAddress, nonce, fnParams)\n   */\n  function provable_setApprovalForAll(bytes32 message, bytes32 r, bytes32 s, uint8 v, address spender, bool approved)\n    public\n    whenNotPaused\n  {\n    if (!isNormalUserAllowed) {\n      uint8 opLevel = getOperatorLevel(msg.sender);\n      require (opLevel != 0 && opLevel < 3); // level 3 operators are allowed to submit proof\n    }\n    address signer = getSigner(message, r, s, v);\n    require (signer != address(0));\n\n    bytes32 proof = getMessageSendApprovalForAll(signer, spender, approved);\n    require( proof == message);\n\n    // perform the original set Approval\n    operatorApprovals[signer][spender] = approved;\n    emit ApprovalForAll(signer, spender, approved);\n    userNonce[signer] = userNonce[signer].add(1);\n  }\n\n  /**\n   * @dev Allows submitting already signed transaction for weapon transfer\n   * Reverts if the signed data is incorrect\n   * @param message signed message by user\n   * @param r signature\n   * @param s signature\n   * @param v recovery id of signature\n   * @param to recipient address\n   * @param tokenId ID of RC Weapon\n   * message should be hash(functionWord, contractAddress, nonce, fnParams)\n   */\n  function provable_transfer(bytes32 message, bytes32 r, bytes32 s, uint8 v, address to, uint tokenId)\n    public \n    whenNotPaused\n  {\n    if (!isNormalUserAllowed) {\n      uint8 opLevel = getOperatorLevel(msg.sender);\n      require (opLevel != 0 && opLevel < 3); // level 3 operators are allowed to submit proof\n    }\n    address signer = getSigner(message, r, s, v);\n    require (signer != address(0));\n\n    bytes32 proof = getMessageTransfer(signer, to, tokenId);\n    require (proof == message);\n    \n    // Execute original function\n    require(to != address(0));\n    clearApproval(signer, tokenId);\n    removeTokenFrom(signer, tokenId);\n    addTokenTo(to, tokenId);\n    emit Transfer(signer, to, tokenId);\n\n    // update state variables\n    userNonce[signer] = userNonce[signer].add(1);\n  }\n\n  /**\n   * @dev Check signer of a message\n   * @param message signed message by user\n   * @param r signature\n   * @param s signature\n   * @param v recovery id of signature\n   * @return signer of message\n   */\n  function getSigner(bytes32 message, bytes32 r, bytes32 s,  uint8 v) public pure returns (address){\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, message));\n    address signer = ecrecover(prefixedHash,v,r,s);\n    return signer;\n  }\n\n  /**\n   * @dev Get message to be signed for transfer\n   * @param signer of message\n   * @param to recipient address\n   * @param id weapon id\n   * @return hash of (functionWord, contractAddress, nonce, ...fnParams)\n   */\n  function getMessageTransfer(address signer, address to, uint id)\n    public\n    view\n    returns (bytes32) \n  {\n    return keccak256(abi.encodePacked(\n      bytes4(0xb483afd3),\n      address(this),\n      userNonce[signer],\n      to,\n      id\n    ));\n  }\n\n  /**\n   * @dev Get message to be signed for set Approval\n   * @param signer of message\n   * @param spender address which is approved\n   * @param approved bool value for status of approval\n   * @return hash of (functionWord, contractAddress, nonce, ...fnParams)\n   */\n  function getMessageSendApprovalForAll(address signer, address spender, bool approved)\n    public \n    view \n    returns (bytes32)\n  {\n    bytes32 proof = keccak256(abi.encodePacked(\n      bytes4(0xbad4c8ea),\n      address(this),\n      userNonce[signer],\n      spender,\n      approved\n    ));\n    return proof;\n  }\n\n  /**\n  * returns nonce of user to be used for next signing\n  */\n  function getUserNonce(address user) public view returns (uint) {\n    return userNonce[user];\n  }\n\n  /**\n   * @dev Owner can transfer out any accidentally sent ERC20 tokens\n   * @param contractAddress ERC20 contract address\n   * @param to withdrawal address\n   * @param value no of tokens to be withdrawan\n   */\n  function transferAnyERC20Token(address contractAddress, address to,  uint value) public onlyOwner {\n    ERC20Interface(contractAddress).transfer(to, value);\n  }\n\n  /**\n   * @dev Owner can transfer out any accidentally sent ERC721 tokens\n   * @param contractAddress ERC721 contract address\n   * @param to withdrawal address\n   * @param tokenId Id of 721 token\n   */\n  function withdrawAnyERC721Token(address contractAddress, address to, uint tokenId) public onlyOwner {\n    ERC721Basic(contractAddress).safeTransferFrom(address(this), to, tokenId);\n  }\n\n  /**\n   * @dev Owner kill the smart contract\n   * @param message Confirmation message to prevent accidebtal calling\n   * @notice BE VERY CAREFULL BEFORE CALLING THIS FUNCTION\n   * Better pause the contract\n   * DO CALL \"transferAnyERC20Token\" before TO WITHDRAW ANY ERC-2O's FROM CONTRACT\n   */\n  function kill(uint message) public onlyOwner {\n    require (message == 123456789987654321);\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(msg.sender);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeOperatorByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_weaponData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"name\":\"updateOwnerData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"provable_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_weaponData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"name\":\"updateMetaData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"getMessageSendApprovalForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_perm\",\"type\":\"bool\"}],\"name\":\"allowNormalUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"provable_setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyERC721Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMetaData\",\"outputs\":[{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_pubicData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMessageTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwnerData\",\"outputs\":[{\"name\":\"_ownerData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"addOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_weaponData\",\"type\":\"string\"}],\"name\":\"updateWeaponData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGameData\",\"outputs\":[{\"name\":\"_gameData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintWithURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNormalUserAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWeaponData\",\"outputs\":[{\"name\":\"_pubicData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"}],\"name\":\"updateGameData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weaponData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ownerData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"WeaponAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weaponData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ownerData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"WeaponUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"WeaponOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604080518082018252601481527f5265616c69747920436c61736820576561706f6e0000000000000000000000006020808301919091528251808401909352600683527f52432047554e00000000000000000000000000000000000000000000000000009083015290620000af7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001f4810204565b60018054600160a860020a0319166101003302179055620000f97f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001f4810204565b6200012d7f4f558e7900000000000000000000000000000000000000000000000000000000640100000000620001f4810204565b81516200014290600690602085019062000261565b5080516200015890600790602084019062000261565b506200018d7f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001f4810204565b620001c17f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001f4810204565b5050600d8054600160a060020a03191633179055600f805460ff1990811660031790915560158054909116905562000306565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200022457600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a457805160ff1916838001178555620002d4565b82800160010185558215620002d4579182015b82811115620002d4578251825591602001919060010190620002b7565b50620002e2929150620002e6565b5090565b6200030391905b80821115620002e25760008155600101620002ed565b90565b61438b80620003166000396000f3fe60806040526004361061028c577c0100000000000000000000000000000000000000000000000000000000600035046301ffc9a7811461029157806306fdde03146102d9578063081812fc14610363578063095ea7b3146103a95780630a76802a146103e4578063130db74d1461040e57806318160ddd146105e157806319fa8f501461060857806323b872dd1461063a578063240d2f2a1461067d578063243cd0591461073757806327a099d81461078b5780632a2149a1146107f05780632b37768f146109b85780632f745c59146109f457806331d41c6914610a2d578063380c8e8714610ae75780633f4ba83a14610b2c57806342842e0e14610b4157806342966c6814610b845780634f558e7914610bae5780634f6ccce714610bd8578063587d0f6614610c025780635bdc12c614610c2e5780635c975abb14610c845780635dfd33d114610c9957806361eba55214610cdc5780636352211e14610e4a57806366618d1814610e745780636834e3a814610eb35780636a400fe714610ee657806370a0823114610f19578063841321d914610f4c5780638456cb5914610f8f578063880cdc3114610fa45780638da5cb5b14610fd757806395c671d814610fec57806395d89b41146110165780639fd0506d1461102b578063a22cb46514611040578063a9059cbb1461107b578063aa326df1146110b4578063ac8a584a146110f0578063ad39153114611123578063b6a65665146111dd578063b88d4fde14611207578063c87b56dd146112da578063c8ab0edf14611304578063d29a0025146113cc578063d493b9ac146113f6578063db738ee614611439578063df0756051461144e578063e985e9c514611497578063efa7b945146114d2578063fbd37ff5146114fc575b600080fd5b34801561029d57600080fd5b506102c5600480360360208110156102b457600080fd5b5035600160e060020a0319166115b6565b604080519115158252519081900360200190f35b3480156102e557600080fd5b506102ee6115d9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610328578181015183820152602001610310565b50505050905090810190601f1680156103555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036f57600080fd5b5061038d6004803603602081101561038657600080fd5b5035611670565b60408051600160a060020a039092168252519081900360200190f35b3480156103b557600080fd5b506103e2600480360360408110156103cc57600080fd5b50600160a060020a03813516906020013561168b565b005b3480156103f057600080fd5b506102c56004803603602081101561040757600080fd5b5035611744565b34801561041a57600080fd5b506103e2600480360360a081101561043157600080fd5b8135919081019060408101602082013564010000000081111561045357600080fd5b82018360208201111561046557600080fd5b8035906020019184600183028401116401000000008311171561048757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156104da57600080fd5b8201836020820111156104ec57600080fd5b8035906020019184600183028401116401000000008311171561050e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561056157600080fd5b82018360208201111561057357600080fd5b8035906020019184600183028401116401000000008311171561059557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050509035600160a060020a0316915061183d9050565b3480156105ed57600080fd5b506105f6611c48565b60408051918252519081900360200190f35b34801561061457600080fd5b5061061d611c4e565b60408051600160e060020a03199092168252519081900360200190f35b34801561064657600080fd5b506103e26004803603606081101561065d57600080fd5b50600160a060020a03813581169160208101359091169060400135611c72565b34801561068957600080fd5b506102c5600480360360408110156106a057600080fd5b813591908101906040810160208201356401000000008111156106c257600080fd5b8201836020820111156106d457600080fd5b803590602001918460018302840111640100000000831117156106f657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d15945050505050565b34801561074357600080fd5b506103e2600480360360c081101561075a57600080fd5b5080359060208101359060408101359060ff60608201351690600160a060020a036080820135169060a00135611f47565b34801561079757600080fd5b506107a0612084565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107dc5781810151838201526020016107c4565b505050509050019250505060405180910390f35b3480156107fc57600080fd5b506103e26004803603608081101561081357600080fd5b8135919081019060408101602082013564010000000081111561083557600080fd5b82018360208201111561084757600080fd5b8035906020019184600183028401116401000000008311171561086957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156108bc57600080fd5b8201836020820111156108ce57600080fd5b803590602001918460018302840111640100000000831117156108f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561094357600080fd5b82018360208201111561095557600080fd5b8035906020019184600183028401116401000000008311171561097757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506120e5945050505050565b3480156109c457600080fd5b506102c5600480360360408110156109db57600080fd5b508035600160a060020a0316906020013560ff1661220f565b348015610a0057600080fd5b506105f660048036036040811015610a1757600080fd5b50600160a060020a0381351690602001356122f3565b348015610a3957600080fd5b506102c560048036036040811015610a5057600080fd5b81359190810190604081016020820135640100000000811115610a7257600080fd5b820183602082011115610a8457600080fd5b80359060200191846001830284011164010000000083111715610aa657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612340945050505050565b348015610af357600080fd5b506105f660048036036060811015610b0a57600080fd5b50600160a060020a038135811691602081013590911690604001351515612550565b348015610b3857600080fd5b506103e2612603565b348015610b4d57600080fd5b506103e260048036036060811015610b6457600080fd5b50600160a060020a0381358116916020810135909116906040013561266f565b348015610b9057600080fd5b506103e260048036036020811015610ba757600080fd5b50356126b7565b348015610bba57600080fd5b506102c560048036036020811015610bd157600080fd5b50356126d4565b348015610be457600080fd5b506105f660048036036020811015610bfb57600080fd5b50356126f1565b348015610c0e57600080fd5b506103e260048036036020811015610c2557600080fd5b50351515612726565b348015610c3a57600080fd5b506103e2600480360360c0811015610c5157600080fd5b5080359060208101359060408101359060ff60608201351690600160a060020a036080820135169060a001351515612760565b348015610c9057600080fd5b506102c561287e565b348015610ca557600080fd5b506103e260048036036060811015610cbc57600080fd5b50600160a060020a03813581169160208101359091169060400135612887565b348015610ce857600080fd5b50610d0660048036036020811015610cff57600080fd5b5035612923565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610d4b578181015183820152602001610d33565b50505050905090810190601f168015610d785780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610dab578181015183820152602001610d93565b50505050905090810190601f168015610dd85780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015610e0b578181015183820152602001610df3565b50505050905090810190601f168015610e385780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015610e5657600080fd5b5061038d60048036036020811015610e6d57600080fd5b5035612afe565b348015610e8057600080fd5b5061038d60048036036080811015610e9757600080fd5b508035906020810135906040810135906060013560ff16612b28565b348015610ebf57600080fd5b506105f660048036036020811015610ed657600080fd5b5035600160a060020a0316612c3b565b348015610ef257600080fd5b506105f660048036036020811015610f0957600080fd5b5035600160a060020a0316612c56565b348015610f2557600080fd5b506105f660048036036020811015610f3c57600080fd5b5035600160a060020a0316612cb3565b348015610f5857600080fd5b506105f660048036036060811015610f6f57600080fd5b50600160a060020a03813581169160208101359091169060400135612ce6565b348015610f9b57600080fd5b506103e2612d78565b348015610fb057600080fd5b506103e260048036036020811015610fc757600080fd5b5035600160a060020a0316612de5565b348015610fe357600080fd5b5061038d612e6c565b348015610ff857600080fd5b506102ee6004803603602081101561100f57600080fd5b5035612e7b565b34801561102257600080fd5b506102ee612f1c565b34801561103757600080fd5b5061038d612f7d565b34801561104c57600080fd5b506103e26004803603604081101561106357600080fd5b50600160a060020a0381351690602001351515612f91565b34801561108757600080fd5b506103e26004803603604081101561109e57600080fd5b50600160a060020a038135169060200135613025565b3480156110c057600080fd5b506102c5600480360360408110156110d757600080fd5b508035600160a060020a0316906020013560ff16613044565b3480156110fc57600080fd5b506102c56004803603602081101561111357600080fd5b5035600160a060020a0316613169565b34801561112f57600080fd5b506102c56004803603604081101561114657600080fd5b8135919081019060408101602082013564010000000081111561116857600080fd5b82018360208201111561117a57600080fd5b8035906020019184600183028401116401000000008311171561119c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506131bd945050505050565b3480156111e957600080fd5b506102ee6004803603602081101561120057600080fd5b50356133e9565b34801561121357600080fd5b506103e26004803603608081101561122a57600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561126557600080fd5b82018360208201111561127757600080fd5b8035906020019184600183028401116401000000008311171561129957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613453945050505050565b3480156112e657600080fd5b506102ee600480360360208110156112fd57600080fd5b5035613492565b34801561131057600080fd5b506103e26004803603606081101561132757600080fd5b813591600160a060020a036020820135169181019060608101604082013564010000000081111561135757600080fd5b82018360208201111561136957600080fd5b8035906020019184600183028401116401000000008311171561138b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613510945050505050565b3480156113d857600080fd5b506103e2600480360360208110156113ef57600080fd5b503561372a565b34801561140257600080fd5b506103e26004803603606081101561141957600080fd5b50600160a060020a03813581169160208101359091169060400135613758565b34801561144557600080fd5b506102c5613815565b34801561145a57600080fd5b506114816004803603602081101561147157600080fd5b5035600160a060020a031661381e565b6040805160ff9092168252519081900360200190f35b3480156114a357600080fd5b506102c5600480360360408110156114ba57600080fd5b50600160a060020a038135811691602001351661383c565b3480156114de57600080fd5b506102ee600480360360208110156114f557600080fd5b503561386a565b34801561150857600080fd5b506102c56004803603604081101561151f57600080fd5b8135919081019060408101602082013564010000000081111561154157600080fd5b82018360208201111561155357600080fd5b8035906020019184600183028401116401000000008311171561157557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506138d4945050505050565b600160e060020a0319811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156116655780601f1061163a57610100808354040283529160200191611665565b820191906000526020600020905b81548152906001019060200180831161164857829003601f168201915b505050505090505b90565b600090815260036020526040902054600160a060020a031690565b60015460ff161561169b57600080fd5b60006116a682612afe565b9050600160a060020a0383811690821614156116c157600080fd5b33600160a060020a03821614806116dd57506116dd813361383c565b15156116e857600080fd5b6000828152600360205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d54600090600160a060020a0316331461175e57600080fd5b60015460ff161561176e57600080fd5b600182039150600060106000600e8581548110151561178957fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff191660ff92909216919091179055600e805460001981019081106117d257fe5b600091825260209091200154600e8054600160a060020a0390921691849081106117f857fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600e805490611834906000198301614203565b50600192915050565b6001600061184a3361381e565b905060008260ff161115611a5f578160ff168160ff1611158015611870575060ff811615155b151561187b57600080fd5b60015460ff161561188b57600080fd5b6118958388613b02565b600087815260116020908152604090912087516118b492890190614227565b50600087815260126020908152604090912086516118d492880190614227565b50600087815260136020908152604090912085516118f492870190614227565b50866000805160206143408339815191528787876040518080602001806020018060200180602001858103855288818151815260200191508051906020019080838360005b83811015611951578181015183820152602001611939565b50505050905090810190601f16801561197e5780820380516001836020036101000a031916815260200191505b50858103845287518152875160209182019189019080838360005b838110156119b1578181015183820152602001611999565b50505050905090810190601f1680156119de5780820380516001836020036101000a031916815260200191505b50858103835286518152865160209182019188019080838360005b83811015611a115781810151838201526020016119f9565b50505050905090810190601f168015611a3e5780820380516001836020036101000a031916815260200191505b509485039052505060008252506040805191829003019350915050a2611c3f565b60015460ff1615611a6f57600080fd5b611a798388613b02565b60008781526011602090815260409091208751611a9892890190614227565b5060008781526012602090815260409091208651611ab892880190614227565b5060008781526013602090815260409091208551611ad892870190614227565b50866000805160206143408339815191528787876040518080602001806020018060200180602001858103855288818151815260200191508051906020019080838360005b83811015611b35578181015183820152602001611b1d565b50505050905090810190601f168015611b625780820380516001836020036101000a031916815260200191505b50858103845287518152875160209182019189019080838360005b83811015611b95578181015183820152602001611b7d565b50505050905090810190601f168015611bc25780820380516001836020036101000a031916815260200191505b50858103835286518152865160209182019188019080838360005b83811015611bf5578181015183820152602001611bdd565b50505050905090810190601f168015611c225780820380516001836020036101000a031916815260200191505b509485039052505060008252506040805191829003019350915050a25b50505050505050565b600a5490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b80611c7d3382613b51565b1515611c8857600080fd5b60015460ff1615611c9857600080fd5b600160a060020a0384161515611cad57600080fd5b600160a060020a0383161515611cc257600080fd5b611ccc8483613ba8565b611cd68483613c40565b611ce08383613d74565b8183600160a060020a031685600160a060020a031660008051602061432083398151915260405160405180910390a450505050565b600060026000611d243361381e565b905060008260ff161115611e4c578160ff168160ff1611158015611d4a575060ff811615155b1515611d5557600080fd5b60015460ff1615611d6557600080fd5b60008581526013602090815260409091208551611d8492870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835286818151815260200191508051906020019080838360005b83811015611dfd578181015183820152602001611de5565b50505050905090810190601f168015611e2a5780820380516001836020036101000a031916815260200191505b509485039052505060008252506040805191829003019150a260019250611f3f565b60015460ff1615611e5c57600080fd5b60008581526013602090815260409091208551611e7b92870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835286818151815260200191508051906020019080838360005b83811015611ef4578181015183820152602001611edc565b50505050905090810190601f168015611f215780820380516001836020036101000a031916815260200191505b509485039052505060008252506040805191829003019150a2600192505b505092915050565b60015460ff1615611f5757600080fd5b60155460ff161515611f92576000611f6e3361381e565b905060ff811615801590611f85575060038160ff16105b1515611f9057600080fd5b505b6000611fa087878787612b28565b9050600160a060020a0381161515611fb757600080fd5b6000611fc4828585612ce6565b9050878114611fd257600080fd5b600160a060020a0384161515611fe757600080fd5b611ff18284613ba8565b611ffb8284613c40565b6120058484613d74565b8284600160a060020a031683600160a060020a031660008051602061432083398151915260405160405180910390a4600160a060020a03821660009081526014602052604090205461205e90600163ffffffff613dba16565b600160a060020a0390921660009081526014602052604090209190915550505050505050565b6060600e80548060200260200160405190810160405280929190818152602001828054801561166557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116120be575050505050905090565b600260006120f23361381e565b905060008260ff161115612198578160ff168160ff1611158015612118575060ff811615155b151561212357600080fd5b60015460ff161561213357600080fd5b6000868152601160209081526040909120865161215292880190614227565b506000868152601260209081526040909120855161217292870190614227565b506000868152601360209081526040909120845161219292860190614227565b50612207565b60015460ff16156121a857600080fd5b600086815260116020908152604090912086516121c792880190614227565b50600086815260126020908152604090912085516121e792870190614227565b5060008681526013602090815260409091208451611c3f92860190614227565b505050505050565b600d54600090600160a060020a0316331461222957600080fd5b60015460ff161561223957600080fd5b8160008160ff161180156122565750600f5460ff90811690821611155b151561226157600080fd5b600160a060020a03841660009081526010602052604090205460ff16151561228857600080fd5b600160a060020a038416600081815260106020908152604091829020805460ff191660ff881690811790915582519384529083015280517f9621e7965a4f1664bc5b70f3ff01c2b30ebcce1f532a118019be8c10ed3733309281900390910190a15060019392505050565b60006122fe83612cb3565b821061230957600080fd5b600160a060020a038316600090815260086020526040902080548390811061232d57fe5b9060005260206000200154905092915050565b60006002600061234f3361381e565b905060008260ff161115612467578160ff168160ff1611158015612375575060ff811615155b151561238057600080fd5b60015460ff161561239057600080fd5b61239a8585613dc9565b84600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835260008152602001602001858103825286818151815260200191508051906020019080838360005b83811015612421578181015183820152602001612409565b50505050905090810190601f16801561244e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a260019250611f3f565b60015460ff161561247757600080fd5b6124818585613dc9565b84600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835260008152602001602001858103825286818151815260200191508051906020019080838360005b838110156125085781810151838201526020016124f0565b50505050905090810190601f1680156125355780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a2506001949350505050565b600160a060020a039283166000908152601460209081526040918290205482517fbad4c8ea0000000000000000000000000000000000000000000000000000000081840152306c01000000000000000000000000908102602483015260388201929092529490951690940260588401529015157f010000000000000000000000000000000000000000000000000000000000000002606c8301528051808303604d018152606d9092019052805191012090565b6001546101009004600160a060020a0316331461261f57600080fd5b60015460ff16151561263057600080fd5b6001805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b8061267a3382613b51565b151561268557600080fd5b60015460ff161561269557600080fd5b6126b18484846020604051908101604052806000815250613453565b50505050565b60015460ff16156126c757600080fd5b6126d13382613e01565b50565b600090815260026020526040902054600160a060020a0316151590565b60006126fb611c48565b821061270657600080fd5b600a80548390811061271457fe5b90600052602060002001549050919050565b600d54600160a060020a0316331461273d57600080fd5b60015460ff161561274d57600080fd5b6015805460ff1916911515919091179055565b60015460ff161561277057600080fd5b60155460ff1615156127ab5760006127873361381e565b905060ff81161580159061279e575060038160ff16105b15156127a957600080fd5b505b60006127b987878787612b28565b9050600160a060020a03811615156127d057600080fd5b60006127dd828585612550565b90508781146127eb57600080fd5b600160a060020a03828116600081815260056020908152604080832094891680845294825291829020805460ff1916881515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3600160a060020a03821660009081526014602052604090205461205e90600163ffffffff613dba16565b60015460ff1690565b600d54600160a060020a0316331461289e57600080fd5b604080517f42842e0e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a038481166024830152604482018490529151918516916342842e0e9160648082019260009290919082900301818387803b15801561290f57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b600081815260116020908152604080832060128352818420601384529382902081548351601f600260001961010060018616150201909316929092049182018690048602810186019094528084526060958695869591939285918301828280156129ce5780601f106129a3576101008083540402835291602001916129ce565b820191906000526020600020905b8154815290600101906020018083116129b157829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015612a5c5780601f10612a3157610100808354040283529160200191612a5c565b820191906000526020600020905b815481529060010190602001808311612a3f57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015612aea5780601f10612abf57610100808354040283529160200191612aea565b820191906000526020600020905b815481529060010190602001808311612acd57829003601f168201915b505050505090509250925092509193909250565b600081815260026020526040812054600160a060020a0316801515612b2257600080fd5b92915050565b604080518082018252601c8082527f19457468657265756d205369676e6564204d6573736167653a0a33320000000060208084019182529351600094859385938b939092019182918083835b60208310612b935780518252601f199092019160209182019101612b74565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815284830180835281519184019190912060009182905282860180845281905260ff8b166060870152608086018d905260a086018c90529151919650945060019360c08082019450601f19830192918290030190855afa158015612c22573d6000803e3d6000fd5b5050604051601f1901519450505050505b949350505050565b600160a060020a031660009081526014602052604090205490565b6000805b600e54811015612caa5782600160a060020a0316600e82815481101515612c7d57fe5b600091825260209091200154600160a060020a03161415612ca25760010190506115d4565b600101612c5a565b50600092915050565b6000600160a060020a0382161515612cca57600080fd5b50600160a060020a031660009081526004602052604090205490565b600160a060020a038084166000908152601460209081526040918290205482517fb483afd300000000000000000000000000000000000000000000000000000000818401526c0100000000000000000000000030810260248301526038820192909252938616026058840152606c80840185905282518085039091018152608c90930190915281519101209392505050565b6001546101009004600160a060020a03163314612d9457600080fd5b60015460ff1615612da457600080fd5b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600d54600160a060020a03163314612dfc57600080fd5b60015460ff1615612e0c57600080fd5b600d8054600160a060020a031916600160a060020a0383811691909117918290556040805133815292909116602083015280517f4c19d31874b3f8325813d90efdd10758f703ab99b84367f07276ecd2cd69c95d9281900390910190a150565b600d54600160a060020a031681565b60008181526013602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015612f105780601f10612ee557610100808354040283529160200191612f10565b820191906000526020600020905b815481529060010190602001808311612ef357829003601f168201915b50505050509050919050565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156116655780601f1061163a57610100808354040283529160200191611665565b6001546101009004600160a060020a031681565b60015460ff1615612fa157600080fd5b600160a060020a038216331415612fb757600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60015460ff161561303557600080fd5b61304033838361266f565b5050565b600d54600090600160a060020a0316331461305e57600080fd5b60015460ff161561306e57600080fd5b8160008160ff1611801561308b5750600f5460ff90811690821611155b151561309657600080fd5b600160a060020a03841660009081526010602052604090205460ff16156130bc57600080fd5b600160a060020a0384166000818152601060209081526040808320805460ff191660ff8916908117909155600e805460018101825594527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9093018054600160a060020a0319168517905580519384529083019190915280517fd5c38cfd82a1f6471a6a8c450f174632b7bbcfcdd17fece7d825055bd5e1094a9281900390910190a15060019392505050565b600d54600090600160a060020a0316331461318357600080fd5b60015460ff161561319357600080fd5b600061319e83612c56565b9050600081116131ad57600080fd5b6131b681611744565b9392505050565b6000600260006131cc3361381e565b905060008260ff1611156132f2578160ff168160ff16111580156131f2575060ff811615155b15156131fd57600080fd5b60015460ff161561320d57600080fd5b6000858152601260209081526040909120855161322c92870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845286818151815260200191508051906020019080838360005b8381101561329657818101518382015260200161327e565b50505050905090810190601f1680156132c35780820380516001836020036101000a031916815260200191505b50948503918290526000808652604092830190915281850152519283900360800193505050a260019250611f3f565b60015460ff161561330257600080fd5b6000858152601260209081526040909120855161332192870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855260008152602001602001858103845286818151815260200191508051906020019080838360005b8381101561338b578181015183820152602001613373565b50505050905090810190601f1680156133b85780820380516001836020036101000a031916815260200191505b50948503918290526000808652604092830190915281850152519283900360800193505050a2506001949350505050565b60008181526011602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015612f105780601f10612ee557610100808354040283529160200191612f10565b8161345e3382613b51565b151561346957600080fd5b613474858585611c72565b61348085858585613ef8565b151561348b57600080fd5b5050505050565b606061349d826126d4565b15156134a857600080fd5b6000828152600c602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015612f105780601f10612ee557610100808354040283529160200191612f10565b6001600061351d3361381e565b905060008260ff16111561363b578160ff168160ff1611158015613543575060ff811615155b151561354e57600080fd5b60015460ff161561355e57600080fd5b6135688486613b02565b6135728584613dc9565b84600080516020614340833981519152846040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835260008152602001602001858103825286818151815260200191508051906020019080838360005b838110156135f95781810151838201526020016135e1565b50505050905090810190601f1680156136265780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a261348b565b60015460ff161561364b57600080fd5b6136558486613b02565b61365f8584613dc9565b84600080516020614340833981519152846040518080602001806020018060200180602001858103855260008152602001602001858103845260008152602001602001858103835260008152602001602001858103825286818151815260200191508051906020019080838360005b838110156136e65781810151838201526020016136ce565b50505050905090810190601f1680156137135780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a25050505050565b600d54600160a060020a0316331461374157600080fd5b6701b69b4be052fab1811461375557600080fd5b33ff5b600d54600160a060020a0316331461376f57600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156137eb57600080fd5b505af11580156137ff573d6000803e3d6000fd5b505050506040513d602081101561348b57600080fd5b60155460ff1681565b600160a060020a031660009081526010602052604090205460ff1690565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60008181526012602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015612f105780601f10612ee557610100808354040283529160200191612f10565b6000600260006138e33361381e565b905060008260ff161115613a0a578160ff168160ff1611158015613909575060ff811615155b151561391457600080fd5b60015460ff161561392457600080fd5b6000858152601160209081526040909120855161394392870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855286818151815260200191508051906020019080838360005b8381101561399e578181015183820152602001613986565b50505050905090810190601f1680156139cb5780820380516001836020036101000a031916815260200191505b509485039283905260008086526040808501909352828601819052608093840190915291840191909152519182900360c001925050a260019250611f3f565b60015460ff1615613a1a57600080fd5b60008581526011602090815260409091208551613a3992870190614227565b5084600080516020614300833981519152856040518080602001806020018060200180602001858103855286818151815260200191508051906020019080838360005b83811015613a94578181015183820152602001613a7c565b50505050905090810190601f168015613ac15780820380516001836020036101000a031916815260200191505b509485039283905260008086526040808501909352828601819052608093840190915291840191909152519182900360c001925050a2506001949350505050565b613b0c8282614055565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8015550565b600080613b5d83612afe565b905080600160a060020a031684600160a060020a03161480613b98575083600160a060020a0316613b8d84611670565b600160a060020a0316145b80612c335750612c33818561383c565b81600160a060020a0316613bbb82612afe565b600160a060020a031614613bce57600080fd5b600081815260036020526040902054600160a060020a031615613040576000818152600360205260408082208054600160a060020a031916905551829190600160a060020a038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b613c4a828261409e565b600081815260096020908152604080832054600160a060020a03861684526008909252822054909190613c8490600163ffffffff61412716565b600160a060020a03851660009081526008602052604081208054929350909183908110613cad57fe5b90600052602060002001549050806008600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515613ced57fe5b6000918252602080832090910192909255600160a060020a0387168152600890915260408120805484908110613d1f57fe5b6000918252602080832090910192909255600160a060020a0387168152600890915260409020805490613d56906000198301614203565b50600093845260096020526040808520859055908452909220555050565b613d7e8282614139565b600160a060020a039091166000908152600860209081526040808320805460018101825590845282842081018590559383526009909152902055565b6000828201838110156131b657fe5b613dd2826126d4565b1515613ddd57600080fd5b6000828152600c602090815260409091208251613dfc92840190614227565b505050565b613e0b82826141bd565b6000818152600c60205260409020546002600019610100600184161502019091160415613e49576000818152600c60205260408120613e49916142a5565b6000818152600b6020526040812054600a54909190613e6f90600163ffffffff61412716565b90506000600a82815481101515613e8257fe5b9060005260206000200154905080600a84815481101515613e9f57fe5b6000918252602082200191909155600a805484908110613ebb57fe5b600091825260209091200155600a805490613eda906000198301614203565b506000938452600b6020526040808520859055908452909220555050565b6000613f0c84600160a060020a03166141fb565b1515613f1a57506001612c33565b6040517ff0b9e5ba000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301908152602483018690526060604484019081528551606485015285516000949389169363f0b9e5ba938b938a938a936084019060208501908083838d5b83811015613fa4578181015183820152602001613f8c565b50505050905090810190601f168015613fd15780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015613ff257600080fd5b505af1158015614006573d6000803e3d6000fd5b505050506040513d602081101561401c57600080fd5b5051600160e060020a0319167ff0b9e5ba0000000000000000000000000000000000000000000000000000000014915050949350505050565b600160a060020a038216151561406a57600080fd5b6140748282613d74565b6040518190600160a060020a03841690600090600080516020614320833981519152908290a45050565b81600160a060020a03166140b182612afe565b600160a060020a0316146140c457600080fd5b600160a060020a0382166000908152600460205260409020546140ee90600163ffffffff61412716565b600160a060020a039092166000908152600460209081526040808320949094559181526002909152208054600160a060020a0319169055565b60008282111561413357fe5b50900390565b600081815260026020526040902054600160a060020a03161561415b57600080fd5b60008181526002602090815260408083208054600160a060020a031916600160a060020a0387169081179091558352600490915290205461419d906001613dba565b600160a060020a0390921660009081526004602052604090209190915550565b6141c78282613ba8565b6141d18282613c40565b6040518190600090600160a060020a03851690600080516020614320833981519152908390a45050565b6000903b1190565b815481835581811115613dfc57600083815260209020613dfc9181019083016142e5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061426857805160ff1916838001178555614295565b82800160010185558215614295579182015b8281111561429557825182559160200191906001019061427a565b506142a19291506142e5565b5090565b50805460018160011615610100020316600290046000825580601f106142cb57506126d1565b601f0160209004906000526020600020908101906126d191905b61166d91905b808211156142a157600081556001016142eb56fe905692576fc9cf2fb77c301179fc54458344e92d0e7122acbb42d2c757a7d117ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efad449d2e420087437aaa3ad11b8c4270ae919b93be767c46d518286561e03e1ea165627a7a72305820c32b7df1e7a66e0c0444229de5a0cff22300880903238d8f9f30a4e94e697db10029"
}