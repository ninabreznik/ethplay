{
  "address": "0x24cebc1548e698feffb5553b8ac8043b51069faa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AlvalorToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-18\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() internal {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() external onlyOwner whenNotPaused {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() external onlyOwner whenPaused {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n}\n\n\n/**\n * Alvalor token\n *\n * The Alvalor Token is a simple ERC20 token with an initial supply equivalent to the maximum value\n * of an unsigned 64-bit integer, credited to the creator which represents the Alvalor foundation.\n *\n * It is pausible so that transfers can be frozen when we create the snapshot of balances, which\n * will be used to transfer balances to the Alvalor genesis block.\n **/\n\ncontract AlvalorToken is PausableToken {\n\n  using SafeMath for uint256;\n\n  // the details of the token for wallets\n  string public constant name = \"Alvalor\";\n  string public constant symbol = \"TVAL\";\n  uint8 public constant decimals = 12;\n\n  // when frozen, the supply of the token cannot change anymore\n  bool public frozen = false;\n\n  // defines the maximum total supply and the maximum number of tokens\n  // claimable through the airdrop mechanism\n  uint256 public constant maxSupply = 18446744073709551615;\n  uint256 public constant dropSupply = 3689348814741910323;\n\n  // keeps track of the total supply already claimed through the airdrop\n  uint256 public claimedSupply = 0;\n\n  // keeps track of how much each address can claim in the airdrop\n  mapping(address => uint256) private claims;\n\n  // who is allowed to drop supply during airdrop (for automation)\n  address private dropper;\n\n  // events emmitted by the contract\n  event Freeze();\n  event Drop(address indexed receiver, uint256 value);\n  event Mint(address indexed receiver, uint256 value);\n  event Claim(address indexed receiver, uint256 value);\n\n  // the not frozen modifier guards functions modifying the supply of the token\n  // from being called after the token supply has been frozen\n  modifier whenNotFrozen() {\n    require(!frozen);\n    _;\n  }\n\n  modifier whenFrozen() {\n    require(frozen);\n    _;\n  }\n\n  // make sure only the dropper can drop claimable supply\n  modifier onlyDropper() {\n    require(msg.sender == dropper);\n    _;\n  }\n\n  // AlvalorToken will make sure the owner can claim any unclaimed drop at any\n  // point.\n  function AlvalorToken() public {\n    claims[owner] = dropSupply;\n    dropper = msg.sender;\n  }\n\n  function changeDropper(address _dropper) onlyOwner whenNotFrozen external {\n    dropper = _dropper;\n  }\n\n  // freeze will irrevocably stop all modifications to the supply of the token,\n  // effectively freezing the supply of the token (transfers are still possible)\n  function freeze() onlyOwner whenNotFrozen external {\n    frozen = true;\n    Freeze();\n  }\n\n  // mint can be called by the owner to create tokens for a certain receiver\n  // it will no longer work once the token supply has been frozen\n  function mint(address _receiver, uint256 _value) onlyOwner whenNotFrozen external returns (bool) {\n    require(_value > 0);\n    require(_value <= maxSupply.sub(totalSupply).sub(dropSupply));\n    totalSupply = totalSupply.add(_value);\n    balances[_receiver] = balances[_receiver].add(_value);\n    Mint(_receiver, _value);\n    Transfer(address(0), _receiver, _value);\n    return true;\n  }\n\n  // claimable returns how much a given address can claim from the airdrop\n  function claimable(address _receiver) constant public returns (uint256) {\n    if (claimedSupply >= dropSupply) {\n      return 0;\n    }\n    uint value = Math.min256(claims[_receiver], dropSupply.sub(claimedSupply));\n    return value;\n  }\n\n  // drop will create a new allowance for claimable tokens of the airdrop\n  // it will no longer work once the token supply has been frozen\n  function drop(address _receiver, uint256 _value) onlyDropper whenNotFrozen external returns (bool) {\n    require(claimedSupply < dropSupply);\n    require(_receiver != owner);\n    claims[_receiver] = _value;\n    Drop(_receiver, _value);\n    return true;\n  }\n\n  // claim will allow any sender to retrieve the airdrop tokens assigned to him\n  // it will only work until the maximum number of airdrop tokens are redeemed\n  function claim() whenNotPaused whenFrozen external returns (bool) {\n    require(claimedSupply < dropSupply);\n    require(claims[msg.sender] > 0);\n    uint value = claimable(msg.sender);\n    claims[msg.sender] = claims[msg.sender].sub(value);\n    claimedSupply = claimedSupply.add(value);\n    totalSupply = totalSupply.add(value);\n    balances[msg.sender] = balances[msg.sender].add(value);\n    Claim(msg.sender, value);\n    Transfer(address(0), msg.sender, value);\n    return true;\n  }\n}",
  "bytecode": "60606040526003805460a060020a61ffff02191690556000600455341561002557600080fd5b60038054600160a060020a03338116600160a060020a0319928316811793849055921660009081526005602052604090206733333333333333339055600680549091169091179055610f078061007c6000396000f3006060604052600436106101325763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663054f7d9c811461013757806306fdde031461015e578063095ea7b3146101e857806318160ddd1461020a57806323b872dd1461022f578063313ce567146102575780633be9cfb7146102805780633f4ba83a146102a1578063402914f5146102b457806340c10f19146102d35780634e71d92d146102f55780635c975abb146103085780635fdc9e0a1461031b57806362a5af3b1461032e57806370a08231146103415780638456cb59146103605780638d0f8cef146103735780638da5cb5b1461039557806395d89b41146103c4578063a9059cbb146103d7578063bfc2aa2a146103f9578063d5abeb011461040c578063dd62ed3e1461041f575b600080fd5b341561014257600080fd5b61014a610444565b604051901515815260200160405180910390f35b341561016957600080fd5b610171610454565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ad578082015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f357600080fd5b61014a600160a060020a036004351660243561048b565b341561021557600080fd5b61021d6104b6565b60405190815260200160405180910390f35b341561023a57600080fd5b61014a600160a060020a03600435811690602435166044356104bc565b341561026257600080fd5b61026a6104e9565b60405160ff909116815260200160405180910390f35b341561028b57600080fd5b61029f600160a060020a03600435166104ee565b005b34156102ac57600080fd5b61029f61054f565b34156102bf57600080fd5b61021d600160a060020a03600435166105ce565b34156102de57600080fd5b61014a600160a060020a0360043516602435610638565b341561030057600080fd5b61014a610781565b341561031357600080fd5b61014a610918565b341561032657600080fd5b61021d610928565b341561033957600080fd5b61029f610934565b341561034c57600080fd5b61021d600160a060020a03600435166109b9565b341561036b57600080fd5b61029f6109d4565b341561037e57600080fd5b61014a600160a060020a0360043516602435610a58565b34156103a057600080fd5b6103a8610b18565b604051600160a060020a03909116815260200160405180910390f35b34156103cf57600080fd5b610171610b27565b34156103e257600080fd5b61014a600160a060020a0360043516602435610b5e565b341561040457600080fd5b61021d610b82565b341561041757600080fd5b61021d610b88565b341561042a57600080fd5b61021d600160a060020a0360043581169060243516610b94565b60035460a860020a900460ff1681565b60408051908101604052600781527f416c76616c6f7200000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156104a557600080fd5b6104af8383610bbf565b9392505050565b60005481565b60035460009060a060020a900460ff16156104d657600080fd5b6104e1848484610c2b565b949350505050565b600c81565b60035433600160a060020a0390811691161461050957600080fd5b60035460a860020a900460ff161561052057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a0390811691161461056a57600080fd5b60035460a060020a900460ff16151561058257600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000806733333333333333336004541015156105ed5760009150610632565b600160a060020a03831660009081526005602052604090205460045461062c9190610627906733333333333333339063ffffffff610d9b16565b610dad565b90508091505b50919050565b60035460009033600160a060020a0390811691161461065657600080fd5b60035460a860020a900460ff161561066d57600080fd5b6000821161067a57600080fd5b6106af6733333333333333336106a360005467ffffffffffffffff610d9b90919063ffffffff16565b9063ffffffff610d9b16565b8211156106bb57600080fd5b6000546106ce908363ffffffff610dc316565b6000908155600160a060020a0384168152600160205260409020546106f9908363ffffffff610dc316565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610ebc8339815191528460405190815260200160405180910390a350600192915050565b600354600090819060a060020a900460ff161561079d57600080fd5b60035460a860020a900460ff1615156107b557600080fd5b60045467333333333333333390106107cc57600080fd5b600160a060020a033316600090815260056020526040812054116107ef57600080fd5b6107f8336105ce565b600160a060020a033316600090815260056020526040902054909150610824908263ffffffff610d9b16565b600160a060020a033316600090815260056020526040902055600454610850908263ffffffff610dc316565b600455600054610866908263ffffffff610dc316565b6000908155600160a060020a033316815260016020526040902054610891908263ffffffff610dc316565b600160a060020a0333166000818152600160205260409081902092909255907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49083905190815260200160405180910390a2600160a060020a0333166000600080516020610ebc8339815191528360405190815260200160405180910390a3600191505090565b60035460a060020a900460ff1681565b67333333333333333381565b60035433600160a060020a0390811691161461094f57600080fd5b60035460a860020a900460ff161561096657600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a1565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146109ef57600080fd5b60035460a060020a900460ff1615610a0657600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60065460009033600160a060020a03908116911614610a7657600080fd5b60035460a860020a900460ff1615610a8d57600080fd5b6004546733333333333333339010610aa457600080fd5b600354600160a060020a0384811691161415610abf57600080fd5b600160a060020a038316600081815260056020526040908190208490557f08859879ecaedf3ac2463b4fcd5742ce8dca94bb45814a894b62ce184e0f80479084905190815260200160405180910390a250600192915050565b600354600160a060020a031681565b60408051908101604052600481527f5456414c00000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615610b7857600080fd5b6104af8383610dd2565b60045481565b67ffffffffffffffff81565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a0383161515610c4257600080fd5b600160a060020a038416600090815260016020526040902054821115610c6757600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c9a57600080fd5b600160a060020a038416600090815260016020526040902054610cc3908363ffffffff610d9b16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610cf8908363ffffffff610dc316565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610d40908363ffffffff610d9b16565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610ebc8339815191529085905190815260200160405180910390a35060019392505050565b600082821115610da757fe5b50900390565b6000818310610dbc57816104af565b5090919050565b6000828201838110156104af57fe5b6000600160a060020a0383161515610de957600080fd5b600160a060020a033316600090815260016020526040902054821115610e0e57600080fd5b600160a060020a033316600090815260016020526040902054610e37908363ffffffff610d9b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610e6c908363ffffffff610dc316565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610ebc8339815191529085905190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f3fdf7322af09bb59ccfd4278cb4781b4dc5d0f7c31bdb0fea4f9d0853d73ace0029"
}