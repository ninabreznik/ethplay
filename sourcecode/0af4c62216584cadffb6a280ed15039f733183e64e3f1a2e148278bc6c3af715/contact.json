{
  "address": "0x6f692acc7f77a8de59d25e75e535bc82a21c18f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PositionTokenLogic",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-31\n*/\n\n/**\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n \npragma solidity 0.5.8;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title EIP20/ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract EIP20 is ERC20 {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n}\n\ncontract WETHInterface is EIP20 {\n    function deposit() external payable;\n    function withdraw(uint256 wad) external;\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\n  */\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    return ((_a - 1) / _b) + 1;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n  uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n  /// @dev Constant for locked guard state\n  uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\n    _;\n    reentrancyLock = REENTRANCY_GUARD_FREE;\n  }\n\n}\n\ncontract LoanTokenization is ReentrancyGuard, Ownable {\n\n    uint256 internal constant MAX_UINT = 2**256 - 1;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    address public bZxContract;\n    address public bZxVault;\n    address public bZxOracle;\n    address public wethContract;\n\n    address public loanTokenAddress;\n\n    // price of token at last user checkpoint\n    mapping (address => uint256) internal checkpointPrices_;\n}\n\ncontract PositionTokenStorage is LoanTokenization {\n\n    bool internal isInitialized_ = false;\n\n    address public loanTokenLender;\n    address public tradeTokenAddress;\n\n    uint256 public leverageAmount;\n    bytes32 public loanOrderHash;\n\n    uint256 public initialPrice;\n}\n\ncontract SplittableTokenStorage is PositionTokenStorage {\n    using SafeMath for uint256;\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Mint(\n        address indexed minter,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n    event Burn(\n        address indexed burner,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    uint256 public splitFactor = 10**18;\n\n    function totalSupply()\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(totalSupply_);\n    }\n\n    function balanceOf(\n        address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(balances[_owner]);\n    }\n\n    function allowance(\n        address _owner,\n        address _spender)\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(allowed[_owner][_spender]);\n    }\n\n    function normalize(\n        uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        return _value\n            .mul(splitFactor)\n            .div(10**18);\n    }\n\n    function denormalize(\n        uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        return _value\n            .mul(10**18)\n            .div(splitFactor);\n    }\n}\n\ncontract SplittableToken is SplittableTokenStorage {\n    using SafeMath for uint256;\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        uint256 allowanceAmount = denormalize(allowed[_from][msg.sender]);\n        uint256 fromBalance = denormalize(balances[_from]);\n        require(_value <= fromBalance, \"insufficient balance\");\n        require(_value <= allowanceAmount, \"insufficient allowance\");\n        require(_to != address(0), \"invalid address\");\n\n        balances[_from] = normalize(fromBalance.sub(_value));\n        if (balanceOf(_from) == 0) {\n            balances[_from] = 0;\n        }\n\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\n        if (allowanceAmount < MAX_UINT) {\n            allowed[_from][msg.sender] = normalize(allowanceAmount.sub(_value));\n            if (allowance(_from, msg.sender) == 0) {\n                allowed[_from][msg.sender] = 0;\n            }\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        uint256 fromBalance = denormalize(balances[msg.sender]);\n        require(_value <= fromBalance, \"insufficient balance\");\n        require(_to != address(0), \"invalid address\");\n\n        balances[msg.sender] = normalize(fromBalance.sub(_value));\n        if (balanceOf(msg.sender) == 0) {\n            balances[msg.sender] = 0;\n        }\n\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _value;\n        if (allowance(msg.sender, _spender) == 0) {\n            allowed[msg.sender][_spender] = 0;\n        }\n\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = normalize(denormalize(allowed[msg.sender][_spender]).add(_addedValue));\n        emit Approval(msg.sender, _spender, denormalize(allowed[msg.sender][_spender]));\n        return true;\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue)\n        public\n        returns (bool)\n    {\n        uint256 oldValue = denormalize(allowed[msg.sender][_spender]);\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = normalize(oldValue.sub(_subtractedValue));\n            if (allowance(msg.sender, _spender) == 0) {\n                allowed[msg.sender][_spender] = 0;\n            }\n        }\n        emit Approval(msg.sender, _spender, denormalize(allowed[msg.sender][_spender]));\n        return true;\n    }\n\n    function _mint(\n        address _to,\n        uint256 _tokenAmount,\n        uint256 _assetAmount,\n        uint256 _price)\n        internal\n    {\n        require(_to != address(0), \"invalid address\");\n        totalSupply_ = normalize(denormalize(totalSupply_).add(_tokenAmount));\n        balances[_to] = normalize(denormalize(balances[_to]).add(_tokenAmount));\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\n        emit Transfer(address(0), _to, _tokenAmount);\n    }\n\n    function _burn(\n        address _who,\n        uint256 _tokenAmount,\n        uint256 _assetAmount,\n        uint256 _price)\n        internal\n    {\n        uint256 whoBalance = denormalize(balances[_who]);\n        require(_tokenAmount <= whoBalance, \"burn value exceeds balance\");\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = normalize(whoBalance.sub(_tokenAmount));\n        if (balances[_who] <= 10 || balanceOf(_who) <= 10) { // we can't leave such small balance quantities\n            balances[_who] = 0;\n        }\n\n        totalSupply_ = normalize(denormalize(totalSupply_).sub(_tokenAmount));\n        if (totalSupply() == 0) {\n            totalSupply_ = 0;\n        }\n\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\n        emit Transfer(_who, address(0), _tokenAmount);\n    }\n}\n\ninterface IBZx {\n    function pushLoanOrderOnChain(\n        address[8] calldata orderAddresses,\n        uint256[11] calldata orderValues,\n        bytes calldata oracleData,\n        bytes calldata signature)\n        external\n        returns (bytes32); // loanOrderHash\n\n    function setLoanOrderDesc(\n        bytes32 loanOrderHash,\n        string calldata desc)\n        external\n        returns (bool);\n\n    function updateLoanAsLender(\n        bytes32 loanOrderHash,\n        uint256 increaseAmountForLoan,\n        uint256 newInterestRate,\n        uint256 newExpirationTimestamp)\n        external\n        returns (bool);\n\n    function takeLoanOrderOnChainAsTraderByDelegate(\n        address trader,\n        bytes32 loanOrderHash,\n        address collateralTokenFilled,\n        uint256 loanTokenAmountFilled,\n        address tradeTokenToFillAddress,\n        bool withdrawOnOpen)\n        external\n        returns (uint256);\n\n    function getLenderInterestForOracle(\n        address lender,\n        address oracleAddress,\n        address interestTokenAddress)\n        external\n        view\n        returns (\n            uint256,    // interestPaid\n            uint256,    // interestPaidDate\n            uint256,    // interestOwedPerDay\n            uint256);   // interestUnPaid\n\n    function withdrawCollateral(\n        bytes32 loanOrderHash,\n        uint256 withdrawAmount)\n        external\n        returns (uint256 amountWithdrawn);\n\n    function closeLoanPartially(\n        bytes32 loanOrderHash,\n        uint256 closeAmount)\n        external\n        returns (uint256 actualCloseAmount);\n\n    function getMarginLevels(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (\n            uint256 initialMarginAmount,\n            uint256 maintenanceMarginAmount,\n            uint256 currentMarginAmount);\n\n    function getTotalEscrow(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (\n            uint256 netCollateralAmount,\n            uint256 interestDepositRemaining,\n            uint256 loanTokenAmountBorrowed);\n\n    function shouldLiquidate(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (bool);\n}\n\ninterface IBZxOracle {\n    function tradeUserAsset(\n        address sourceTokenAddress,\n        address destTokenAddress,\n        address receiverAddress,\n        address returnToSenderAddress,\n        uint256 sourceTokenAmount,\n        uint256 maxDestTokenAmount,\n        uint256 minConversionRate)\n        external\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\n\n    function interestFeePercent()\n        external\n        view\n        returns (uint256);\n}\n\ninterface ILoanToken {\n    function getMaxEscrowAmount(\n        uint256 leverageAmount)\n        external\n        view\n        returns (uint256);\n}\n\ncontract PositionTokenLogic is SplittableToken {\n    using SafeMath for uint256;\n\n\n    function()\n        external\n        payable\n    {}\n\n\n    /* Public functions */\n\n    // returns the amount of token minted\n    function mintWithEther(\n        address receiver)\n        external\n        payable\n        returns (uint256)\n    {\n        require (msg.value > 0, \"msg.value == 0\");\n\n        uint256 currentPrice = tokenPrice();\n\n        WETHInterface(wethContract).deposit.value(msg.value)();\n\n        return _mintWithToken(\n            receiver,\n            wethContract,\n            msg.value,\n            currentPrice\n        );\n    }\n\n    // returns the amount of token minted\n    function mintWithToken(\n        address receiver,\n        address depositTokenAddress,\n        uint256 depositAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        require (depositAmount > 0, \"depositAmount == 0\");\n\n        uint256 currentPrice = tokenPrice();\n\n        require(ERC20(depositTokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            depositAmount\n        ), \"transfer of token failed\");\n\n        return _mintWithToken(\n            receiver,\n            depositTokenAddress,\n            depositAmount,\n            currentPrice\n        );\n    }\n\n    function burnToEther(\n        address payable receiver,\n        uint256 burnAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 loanAmountOwed = _burnToken(burnAmount);\n        if (loanAmountOwed > 0) {\n            if (wethContract != loanTokenAddress) {\n                uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), bZxOracle);\n                if (tempAllowance < loanAmountOwed) {\n                    if (tempAllowance > 0) {\n                        // reset approval to 0\n                        require(ERC20(loanTokenAddress).approve(bZxOracle, 0), \"token approval reset failed\");\n                    }\n\n                    require(ERC20(loanTokenAddress).approve(bZxOracle, MAX_UINT), \"token approval failed\");\n                }\n\n                (uint256 destTokenAmountReceived,) = IBZxOracle(bZxOracle).tradeUserAsset(\n                    loanTokenAddress,\n                    address(0), // Ether\n                    receiver, // receiverAddress\n                    receiver, // returnToSenderAddress\n                    loanAmountOwed,\n                    MAX_UINT,\n                    0 // minConversionRate\n                );\n\n                loanAmountOwed = destTokenAmountReceived;\n            } else {\n                WETHInterface(wethContract).withdraw(loanAmountOwed);\n                require(receiver.send(loanAmountOwed), \"transfer of ETH failed\");\n            }\n        }\n\n        return loanAmountOwed;\n    }\n\n    function burnToToken(\n        address receiver,\n        address burnTokenAddress,\n        uint256 burnAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 loanAmountOwed = _burnToken(burnAmount);\n        if (loanAmountOwed > 0) {\n            if (burnTokenAddress != loanTokenAddress) {\n                uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), bZxOracle);\n                if (tempAllowance < loanAmountOwed) {\n                    if (tempAllowance > 0) {\n                        // reset approval to 0\n                        require(ERC20(loanTokenAddress).approve(bZxOracle, 0), \"token approval reset failed\");\n                    }\n\n                    require(ERC20(loanTokenAddress).approve(bZxOracle, MAX_UINT), \"token approval failed\");\n                }\n\n                (uint256 destTokenAmountReceived,) = IBZxOracle(bZxOracle).tradeUserAsset(\n                    loanTokenAddress,\n                    burnTokenAddress,\n                    receiver, // receiverAddress\n                    receiver, // returnToSenderAddress\n                    loanAmountOwed,\n                    MAX_UINT,\n                    0 // minConversionRate\n                );\n\n                loanAmountOwed = destTokenAmountReceived;\n            } else {\n                require(ERC20(loanTokenAddress).transfer(\n                    receiver,\n                    loanAmountOwed\n                ), \"transfer of loanToken failed\");\n            }\n        }\n\n        return loanAmountOwed;\n    }\n\n    function triggerPosition()\n        external\n        nonReentrant\n    {\n        require(_triggerPosition(), \"triggerPosition failed\");\n    }\n\n    function wrapEther()\n        public\n    {\n        if (address(this).balance > 0) {\n            WETHInterface(wethContract).deposit.value(address(this).balance)();\n        }\n    }\n\n    // Sends non-LoanToken assets to the Oracle fund\n    // These are assets that would otherwise be \"stuck\" due to a user accidently sending them to the contract\n    function donateAsset(\n        address tokenAddress)\n        public\n        returns (bool)\n    {\n        if (tokenAddress == loanTokenAddress)\n            return false;\n\n        uint256 balance = ERC20(tokenAddress).balanceOf(address(this));\n        if (balance == 0)\n            return false;\n\n        require(ERC20(tokenAddress).transfer(\n            bZxOracle,\n            balance\n        ), \"transfer of token balance failed\");\n\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        super.transferFrom(\n            _from,\n            _to,\n            _value\n        );\n\n        // handle checkpoint update\n        uint256 currentPrice = denormalize(tokenPrice());\n        if (balanceOf(_from) > 0) {\n            checkpointPrices_[_from] = currentPrice;\n        } else {\n            checkpointPrices_[_from] = 0;\n        }\n        if (balanceOf(_to) > 0) {\n            checkpointPrices_[_to] = currentPrice;\n        } else {\n            checkpointPrices_[_to] = 0;\n        }\n\n        return true;\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        super.transfer(\n            _to,\n            _value\n        );\n        \n        // handle checkpoint update\n        uint256 currentPrice = denormalize(tokenPrice());\n        if (balanceOf(msg.sender) > 0) {\n            checkpointPrices_[msg.sender] = currentPrice;\n        } else {\n            checkpointPrices_[msg.sender] = 0;\n        }\n        if (balanceOf(_to) > 0) {\n            checkpointPrices_[_to] = currentPrice;\n        } else {\n            checkpointPrices_[_to] = 0;\n        }\n\n        return true;\n    }\n\n    /* Public View functions */\n\n    function tokenPrice()\n        public\n        view\n        returns (uint256 price)\n    {\n        uint256 netCollateralAmount = 0;\n        uint256 interestDepositRemaining = 0;\n        if (totalSupply() > 0) {\n            (netCollateralAmount, interestDepositRemaining,) = IBZx(bZxContract).getTotalEscrow(\n                loanOrderHash,\n                address(this));\n        }\n\n        return _tokenPrice(netCollateralAmount, interestDepositRemaining);\n    }\n\n    function liquidationPrice()\n        public\n        view\n        returns (uint256 price)\n    {\n        (,uint256 maintenanceMarginAmount,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\n            loanOrderHash,\n            address(this));\n\n        if (maintenanceMarginAmount == 0)\n            return 0;\n        else if (currentMarginAmount <= maintenanceMarginAmount)\n            return tokenPrice();\n\n        return tokenPrice()\n            .mul(maintenanceMarginAmount)\n            .div(currentMarginAmount);\n    }\n\n    function checkpointPrice(\n        address _user)\n        public\n        view\n        returns (uint256 price)\n    {\n        return normalize(checkpointPrices_[_user]);\n    }\n\n    function currentLeverage()\n        public\n        view\n        returns (uint256 leverage)\n    {\n        (,,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\n            loanOrderHash,\n            address(this));\n\n        if (currentMarginAmount == 0)\n            return 0;\n\n        return SafeMath.div(10**38, currentMarginAmount);\n    }\n\n    function marketLiquidityForAsset()\n        public\n        view\n        returns (uint256)\n    {\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount);\n    }\n\n    function marketLiquidityForToken()\n        public\n        view\n        returns (uint256)\n    {\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount)\n            .mul(10**18)\n            .div(tokenPrice());\n    }\n\n    // returns the user's balance of underlying token\n    function assetBalanceOf(\n        address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return balanceOf(_owner)\n            .mul(tokenPrice())\n            .div(10**18);\n    }\n\n\n    /* Internal functions */\n\n    // returns the amount of token minted\n    function _mintWithToken(\n        address receiver,\n        address depositTokenAddress,\n        uint256 depositAmount,\n        uint256 currentPrice)\n        internal\n        returns (uint256)\n    {\n        uint256 liquidityAmount = marketLiquidityForAsset();\n        require(liquidityAmount > 0, \"marketLiquidity == 0\");\n\n        uint256 refundAmount;\n        if (depositTokenAddress != loanTokenAddress) {\n            uint256 tempAllowance = ERC20(depositTokenAddress).allowance(address(this), bZxOracle);\n            if (tempAllowance < depositAmount) {\n                if (tempAllowance > 0) {\n                    // reset approval to 0\n                    require(ERC20(depositTokenAddress).approve(bZxOracle, 0), \"token approval reset failed\");\n                }\n\n                require(ERC20(depositTokenAddress).approve(bZxOracle, MAX_UINT), \"token approval failed\");\n            }\n\n            (uint256 destTokenAmountReceived, uint256 depositAmountUsed) = IBZxOracle(bZxOracle).tradeUserAsset(\n                depositTokenAddress,\n                loanTokenAddress,\n                address(this), // receiverAddress\n                address(this), // returnToSenderAddress\n                depositAmount,\n                liquidityAmount, // maxDestAmount shouldn't exceed the market liquidity for the pToken\n                0 // minConversionRate\n            );\n\n            if (depositAmount > depositAmountUsed) {\n                refundAmount = depositAmount-depositAmountUsed;\n                if (msg.value == 0) {\n                    require(ERC20(depositTokenAddress).transfer(\n                        msg.sender,\n                        refundAmount\n                    ), \"transfer of token failed\");\n                } else {\n                    WETHInterface(wethContract).withdraw(refundAmount);\n                    require(msg.sender.send(refundAmount), \"transfer of ETH failed\");\n                }\n            }\n\n            depositAmount = destTokenAmountReceived;\n        } else if (depositAmount > liquidityAmount) {\n            refundAmount = depositAmount-liquidityAmount;\n            if (msg.value == 0) {\n                require(ERC20(loanTokenAddress).transfer(\n                    msg.sender,\n                    refundAmount\n                ), \"transfer of token failed\");\n            } else {\n                WETHInterface(wethContract).withdraw(refundAmount);\n                require(msg.sender.send(refundAmount), \"transfer of ETH failed\");\n            }\n            depositAmount = liquidityAmount;\n        }\n\n        require(_triggerPosition(), \"triggerPosition failed\");\n\n        uint256 mintAmount = depositAmount\n            .mul(10**18)\n           .div(currentPrice);\n\n        _mint(receiver, mintAmount, depositAmount, currentPrice);\n\n        checkpointPrices_[receiver] = denormalize(currentPrice);\n\n        return mintAmount;\n    }\n\n    function _burnToken(\n        uint256 burnAmount)\n        internal\n        returns (uint256)\n    {\n        require(burnAmount > 0, \"burnAmount == 0\");\n\n        if (burnAmount > balanceOf(msg.sender)) {\n            burnAmount = balanceOf(msg.sender);\n        }\n\n        (uint256 netCollateralAmount, uint256 interestDepositRemaining, uint256 loanTokenAmountBorrowed) = IBZx(bZxContract).getTotalEscrow(\n            loanOrderHash,\n            address(this));\n        uint256 currentPrice = _tokenPrice(netCollateralAmount, interestDepositRemaining);\n\n        uint256 loanAmountOwed = burnAmount\n            .mul(currentPrice)\n            .div(10**18);\n\n        uint256 loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\n\n        if (loanAmountAvailableInContract < loanAmountOwed) {\n            loanAmountAvailableInContract = loanAmountAvailableInContract.add(\n                IBZx(bZxContract).withdrawCollateral(\n                    loanOrderHash,\n                    loanAmountOwed.sub(loanAmountAvailableInContract)\n                )\n            );\n        }\n\n        if (loanAmountAvailableInContract < loanAmountOwed && !IBZx(bZxContract).shouldLiquidate(\n                loanOrderHash,\n                address(this)))\n        {\n            uint256 closeAmount;\n            if (burnAmount < totalSupply()) {\n                closeAmount = loanAmountOwed\n                    .sub(loanAmountAvailableInContract)\n                    .mul(loanTokenAmountBorrowed)\n                    .div(netCollateralAmount\n                        .add(interestDepositRemaining));\n            } else {\n                // close entire loan\n                closeAmount = MAX_UINT;\n            }\n\n            IBZx(bZxContract).closeLoanPartially(\n                loanOrderHash,\n                closeAmount\n            );\n\n            loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\n        }\n\n        if (loanAmountAvailableInContract < loanAmountOwed) {\n            loanAmountOwed = loanAmountAvailableInContract;\n\n            // update to available burn amount\n            burnAmount = loanAmountOwed\n                .mul(10**18)\n                .div(currentPrice);\n        }\n\n        _burn(msg.sender, burnAmount, loanAmountOwed, currentPrice);\n\n        if (totalSupply() == 0) {\n            splitFactor = 10**18;\n            currentPrice = initialPrice;\n        }\n\n        if (balanceOf(msg.sender) > 0) {\n            checkpointPrices_[msg.sender] = denormalize(currentPrice);\n        } else {\n            checkpointPrices_[msg.sender] = 0;\n        }\n\n        return loanAmountOwed;\n    }\n\n    function _triggerPosition()\n        internal\n        returns (bool)\n    {\n        uint256 assetBalance = ERC20(loanTokenAddress).balanceOf(address(this));\n        if (assetBalance > 0) {\n            uint256 tempAllowance = ERC20(loanTokenAddress).allowance.gas(4999)(address(this), bZxVault);\n            if (tempAllowance < assetBalance) {\n                if (tempAllowance > 0) {\n                    // reset approval to 0\n                    require(ERC20(loanTokenAddress).approve(bZxVault, 0), \"token approval reset failed\");\n                }\n\n                require(ERC20(loanTokenAddress).approve(bZxVault, MAX_UINT), \"token approval failed\");\n            }\n\n            (bool result,) = loanTokenLender.call(\n                abi.encodeWithSignature(\n                    \"borrowTokenFromEscrow(uint256,uint256,address,bool)\",\n                    assetBalance,\n                    leverageAmount,\n                    tradeTokenAddress,\n                    false\n                )\n            );\n            return result;\n        }\n        return false;\n    }\n\n\n    /* Internal View functions */\n\n    function _tokenPrice(\n        uint256 netCollateralAmount,\n        uint256 interestDepositRemaining)\n        internal\n        view\n        returns (uint256)\n    {\n        return totalSupply_ > 0 ?\n            normalize(\n                ERC20(loanTokenAddress).balanceOf(address(this))\n                .add(netCollateralAmount)\n                .add(interestDepositRemaining)\n                .mul(10**18)\n                .div(totalSupply_)\n            ) : initialPrice;\n    }\n\n\n    /* Owner-Only functions */\n\n    function setLoanTokenLender(\n        address _lender)\n        public\n        onlyOwner\n    {\n        loanTokenLender = _lender;\n    }\n\n    function setBZxContract(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxContract = _addr;\n    }\n\n    function setBZxVault(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxVault = _addr;\n    }\n\n    function setBZxOracle(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxOracle = _addr;\n    }\n\n    function setWETHContract(\n        address _addr)\n        public\n        onlyOwner\n    {\n        wethContract = _addr;\n    }\n\n    function setLoanTokenAddress(\n        address _addr)\n        public\n        onlyOwner\n    {\n        loanTokenAddress = _addr;\n    }\n\n    function setTradeTokenAddress(\n        address _addr)\n        public\n        onlyOwner\n    {\n        tradeTokenAddress = _addr;\n    }\n\n    function setInitialPrice(\n        uint256 _value)\n        public\n        onlyOwner\n    {\n        require(_value > 0, \"value can't be 0\");\n        initialPrice = _value;\n    }\n\n    function handleSplit()\n        public\n        onlyOwner\n    {\n        if (totalSupply() > 0) {\n            splitFactor = splitFactor\n                .mul(initialPrice)\n                .div(\n                    tokenPrice()\n                );\n        } else {\n            splitFactor = 10**18;\n        }\n    }\n\n    function initialize(\n        address _bZxContract,\n        address _bZxVault,\n        address _bZxOracle,\n        address _wethContract,\n        address _loanTokenAddress,\n        address _tradeTokenAddress,\n        address _lender,\n        uint256 _leverageAmount,\n        bytes32 _loanOrderHash,\n        string memory _name,\n        string memory _symbol)\n        public\n        onlyOwner\n    {\n        require (!isInitialized_, \"already initialized\");\n\n        bZxContract = _bZxContract;\n        bZxVault = _bZxVault;\n        bZxOracle = _bZxOracle;\n        wethContract = _wethContract;\n        loanTokenAddress = _loanTokenAddress;\n        tradeTokenAddress = _tradeTokenAddress;\n        loanTokenLender = _lender;\n\n        loanOrderHash = _loanOrderHash;\n        leverageAmount = _leverageAmount;\n\n        name = _name;\n        symbol = _symbol;\n        decimals = EIP20(loanTokenAddress).decimals();\n\n        initialPrice = 10**21; // starting price of 1,000\n\n        // set the BZxVault spend approval\n        require(ERC20(_loanTokenAddress).approve(_bZxVault, MAX_UINT), \"approval of loan token failed\");\n\n        isInitialized_ = true;\n    }\n}",
  "bytecode": "608060405260016000819055600a805460ff19169055670de0b6b3a764000060125580546001600160a01b031916331790556144be806100406000396000f3fe6080604052600436106102935760003560e01c80638da5cb5b1161015a578063c190d0d7116100c1578063eebc50811161007a578063eebc50811461072b578063f2fde38b1461074b578063f41e4e6a1461076b578063f84faeea14610780578063fe854dc1146107a0578063ff858bc2146107b557610293565b8063c190d0d714610676578063c85ab79314610696578063d01d46e7146106ab578063d73dd623146106cb578063dd62ed3e146106eb578063e54280e71461070b57610293565b8063a080740411610113578063a0807404146105e2578063a5507b3514610602578063a9059cbb14610617578063ab47c2b314610637578063b2aff0fe1461064c578063b6fc2d5f1461066157610293565b80638da5cb5b1461055b5780638f6ede1f1461057057806395d89b411461058357806396c7871b14610598578063995363d3146105ad5780639f4ba0ee146105c257610293565b80633ec3c578116101fe5780636f1296d2116101b75780636f1296d2146104c757806370a08231146104dc578063797bf385146104fc5780637ff9b5961461051157806381a6b25014610526578063894ca3081461054657610293565b80633ec3c5781461041b578063447eed281461043b5780634780eac1146104505780634858064c1461047257806359e239af1461048757806366188463146104a757610293565b80631d0806ae116102505780631d0806ae1461036f57806323b872dd146103845780632c9e1885146103a4578063313ce567146103c4578063365b4b60146103e657806339fc185f146103fb57610293565b806303c407a51461029557806306b3efd6146102cb57806306fdde03146102eb578063095ea7b31461030d57806314be4ecc1461033a57806318160ddd1461035a575b005b3480156102a157600080fd5b506102b56102b03660046139e6565b6107ca565b6040516102c29190614171565b60405180910390f35b3480156102d757600080fd5b506102b56102e6366004613840565b6108ea565b3480156102f757600080fd5b5061030061092c565b6040516102c291906141a8565b34801561031957600080fd5b5061032d61032836600461385e565b6109b7565b6040516102c29190614163565b34801561034657600080fd5b50610293610355366004613840565b610a66565b34801561036657600080fd5b506102b5610a9f565b34801561037b57600080fd5b506102b5610ab2565b34801561039057600080fd5b5061032d61039f3660046139e6565b610ab8565b3480156103b057600080fd5b506102936103bf366004613840565b610b7d565b3480156103d057600080fd5b506103d9610bb6565b6040516102c29190614342565b3480156103f257600080fd5b506102b5610bbf565b34801561040757600080fd5b50610293610416366004613840565b610c62565b34801561042757600080fd5b506102936104363660046138c8565b610c9b565b34801561044757600080fd5b50610293610eef565b34801561045c57600080fd5b50610465610f4d565b6040516102c29190614008565b34801561047e57600080fd5b50610465610f5c565b34801561049357600080fd5b5061032d6104a2366004613840565b610f70565b3480156104b357600080fd5b5061032d6104c236600461385e565b6110d5565b3480156104d357600080fd5b5061029361121a565b3480156104e857600080fd5b506102b56104f7366004613840565b611287565b34801561050857600080fd5b506104656112a9565b34801561051d57600080fd5b506102b56112b8565b34801561053257600080fd5b506102b561054136600461385e565b61136d565b34801561055257600080fd5b50610465611710565b34801561056757600080fd5b5061046561171f565b6102b561057e366004613840565b61172e565b34801561058f57600080fd5b506103006117e1565b3480156105a457600080fd5b5061046561183c565b3480156105b957600080fd5b5061046561184b565b3480156105ce57600080fd5b506102936105dd366004613a51565b61185f565b3480156105ee57600080fd5b506102936105fd366004613840565b61189e565b34801561060e57600080fd5b506102b56118d7565b34801561062357600080fd5b5061032d61063236600461385e565b6118dd565b34801561064357600080fd5b506102b5611987565b34801561065857600080fd5b5061046561198d565b34801561066d57600080fd5b506102b561199c565b34801561068257600080fd5b50610293610691366004613840565b611a6e565b3480156106a257600080fd5b506102b5611aa7565b3480156106b757600080fd5b506102b56106c63660046139e6565b611b67565b3480156106d757600080fd5b5061032d6106e636600461385e565b611f05565b3480156106f757600080fd5b506102b5610706366004613898565b611fa8565b34801561071757600080fd5b50610293610726366004613840565b611fd9565b34801561073757600080fd5b506102b5610746366004613840565b612018565b34801561075757600080fd5b50610293610766366004613840565b61203a565b34801561077757600080fd5b506102b561205d565b34801561078c57600080fd5b5061029361079b366004613840565b612063565b3480156107ac57600080fd5b506102b56120a2565b3480156107c157600080fd5b5061029361212d565b60006001600054146107fa57604051600160e51b62461bcd0281526004016107f190614299565b60405180910390fd5b60026000558161081f57604051600160e51b62461bcd0281526004016107f190614289565b60006108296112b8565b604051600160e01b6323b872dd0281529091506001600160a01b038516906323b872dd9061085f9033903090889060040161403f565b602060405180830381600087803b15801561087957600080fd5b505af115801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108b19190810190613a33565b6108d057604051600160e51b62461bcd0281526004016107f1906141c9565b6108dc85858584612185565b600160005595945050505050565b6000610924670de0b6b3a76400006109186109036112b8565b61090c86611287565b9063ffffffff61279b16565b9063ffffffff6127c016565b90505b919050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b505050505081565b3360008181526010602090815260408083206001600160a01b03871684529091528120839055906109e89084611fa8565b610a11573360009081526010602090815260408083206001600160a01b03871684529091528120555b826001600160a01b0316336001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a549190614171565b60405180910390a35060015b92915050565b6001546001600160a01b03163314610a7d57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610aac6011546127d3565b90505b90565b600e5481565b6000610ac58484846127f5565b506000610ad8610ad36112b8565b6127d3565b90506000610ae586611287565b1115610b0b576001600160a01b0385166000908152600960205260409020819055610b25565b6001600160a01b0385166000908152600960205260408120555b6000610b3085611287565b1115610b56576001600160a01b0384166000908152600960205260409020819055610b70565b6001600160a01b0384166000908152600960205260408120555b60019150505b9392505050565b6001546001600160a01b03163314610b9457600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60045460ff1681565b6000610aac610bcc6112b8565b600a54600c54604051600160e21b6320a6ce3d02815261091892670de0b6b3a7640000926101009091046001600160a01b03169163829b38f491610c1291600401614171565b60206040518083038186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061090c9190810190613a6f565b6001546001600160a01b03163314610c7957600080fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610cb257600080fd5b600a5460ff1615610cd857604051600160e51b62461bcd0281526004016107f190614229565b600480546001600160a01b03808e16610100908102610100600160a81b031993841617909355600580548e83166001600160a01b031991821617909155600680548e8416908316179055600780548d8416908316179055600880548c8416908316179055600b80548b84169216919091179055600a80549189169093029116179055600d839055600c8490558151610d7790600290602085019061371d565b508051610d8b90600390602084019061371d565b50600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dda57600080fd5b505afa158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e129190810190613b00565b6004805460ff191660ff92909216919091178155683635c9adc5dea00000600e55604051600160e01b63095ea7b30281526001600160a01b0389169163095ea7b391610e64918e916000199101614155565b602060405180830381600087803b158015610e7e57600080fd5b505af1158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eb69190810190613a33565b610ed557604051600160e51b62461bcd0281526004016107f1906142d9565b5050600a805460ff19166001179055505050505050505050565b6001546001600160a01b03163314610f0657600080fd5b6000610f10610a9f565b1115610f3e57610f36610f216112b8565b600e546012546109189163ffffffff61279b16565b601255610f4b565b670de0b6b3a76400006012555b565b6007546001600160a01b031681565b600a5461010090046001600160a01b031681565b6008546000906001600160a01b0383811691161415610f9157506000610927565b604051600160e01b6370a082310281526000906001600160a01b038416906370a0823190610fc3903090600401614016565b60206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110139190810190613a6f565b905080611024576000915050610927565b600654604051600160e01b63a9059cbb0281526001600160a01b038581169263a9059cbb9261105b92909116908590600401614155565b602060405180830381600087803b15801561107557600080fd5b505af1158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ad9190810190613a33565b6110cc57604051600160e51b62461bcd0281526004016107f190614219565b50600192915050565b3360009081526010602090815260408083206001600160a01b03861684529091528120548190611104906127d3565b9050808310611136573360009081526010602090815260408083206001600160a01b03881684529091528120556111a8565b61114e611149828563ffffffff612a1116565b612a23565b3360008181526010602090815260408083206001600160a01b038a16845290915290209190915561117f9085611fa8565b6111a8573360009081526010602090815260408083206001600160a01b03881684529091528120555b3360008181526010602090815260408083206001600160a01b0389168085529252909120549091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906111fb906127d3565b6040516112089190614171565b60405180910390a35060019392505050565b303115610f4b5760075460408051600160e41b630d0e30db02815290516001600160a01b039092169163d0e30db091303191600480830192600092919082900301818588803b15801561126c57600080fd5b505af1158015611280573d6000803e3d6000fd5b5050505050565b6001600160a01b0381166000908152600f6020526040812054610924906127d3565b6008546001600160a01b031681565b60008080806112c5610a9f565b111561135c5760048054600d54604051600160e31b631ef518a10281526101009092046001600160a01b03169263f7a8c50892611305929130910161417f565b60606040518083038186803b15801561131d57600080fd5b505afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113559190810190613abd565b5090925090505b6113668282612a46565b9250505090565b600060016000541461139457604051600160e51b62461bcd0281526004016107f190614299565b600260009081556113a483612b07565b90508015611704576008546007546001600160a01b0390811691161461165b57600854600654604051600160e11b636eb1769f0281526000926001600160a01b039081169263dd62ed3e926113ff9230921690600401614024565b60206040518083038186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061144f9190810190613a6f565b9050818110156115b657801561150a57600854600654604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b3926114999291169060009060040161413a565b602060405180830381600087803b1580156114b357600080fd5b505af11580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114eb9190810190613a33565b61150a57604051600160e51b62461bcd0281526004016107f1906141d9565b600854600654604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b3926115459291169060001990600401614155565b602060405180830381600087803b15801561155f57600080fd5b505af1158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115979190810190613a33565b6115b657604051600160e51b62461bcd0281526004016107f1906141f9565b600654600854604051600160e01b63051c8a8d0281526000926001600160a01b039081169263051c8a8d926115ff929091169085908b9081908a90600019908590600401614082565b6040805180830381600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116509190810190613a8d565b509250611704915050565b600754604051600160e01b632e1a7d4d0281526001600160a01b0390911690632e1a7d4d9061168e908490600401614171565b600060405180830381600087803b1580156116a857600080fd5b505af11580156116bc573d6000803e3d6000fd5b50506040516001600160a01b038716925083156108fc02915083906000818181858888f1935050505061170457604051600160e51b62461bcd0281526004016107f190614249565b60016000559392505050565b6005546001600160a01b031681565b6001546001600160a01b031681565b600080341161175257604051600160e51b62461bcd0281526004016107f1906142a9565b600061175c6112b8565b9050600760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117ae57600080fd5b505af11580156117c2573d6000803e3d6000fd5b5050600754610b7693508692506001600160a01b031690503484612185565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109af5780601f10610984576101008083540402835291602001916109af565b6006546001600160a01b031681565b60045461010090046001600160a01b031681565b6001546001600160a01b0316331461187657600080fd5b6000811161189957604051600160e51b62461bcd0281526004016107f1906142b9565b600e55565b6001546001600160a01b031633146118b557600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60125481565b60006118e98383612fd7565b5060006118f7610ad36112b8565b9050600061190433611287565b111561192157336000908152600960205260409020819055611932565b336000908152600960205260408120555b600061193d85611287565b1115611963576001600160a01b038416600090815260096020526040902081905561197d565b6001600160a01b0384166000908152600960205260408120555b5060019392505050565b600c5481565b600b546001600160a01b031681565b60048054600d54604051600160e51b6306da6857028152600093849384936101009091046001600160a01b03169263db4d0ae0926119dd929130910161417f565b60606040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a2d9190810190613abd565b92509250508160001415611a4657600092505050610aaf565b818111611a5e57611a556112b8565b92505050610aaf565b611366816109188461090c6112b8565b6001546001600160a01b03163314611a8557600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60048054600d54604051600160e51b6306da6857028152600093849361010090046001600160a01b03169263db4d0ae092611ae49230910161417f565b60606040518083038186803b158015611afc57600080fd5b505afa158015611b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b349190810190613abd565b9250505080611b47576000915050610aaf565b611b616f4b3b4ca85a86c47a098a224000000000826127c0565b91505090565b6000600160005414611b8e57604051600160e51b62461bcd0281526004016107f190614299565b60026000908155611b9e83612b07565b90508015611ef8576008546001600160a01b03858116911614611e5257600854600654604051600160e11b636eb1769f0281526000926001600160a01b039081169263dd62ed3e92611bf69230921690600401614024565b60206040518083038186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c469190810190613a6f565b905081811015611dad578015611d0157600854600654604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b392611c909291169060009060040161413a565b602060405180830381600087803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ce29190810190613a33565b611d0157604051600160e51b62461bcd0281526004016107f1906141d9565b600854600654604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b392611d3c9291169060001990600401614155565b602060405180830381600087803b158015611d5657600080fd5b505af1158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8e9190810190613a33565b611dad57604051600160e51b62461bcd0281526004016107f1906141f9565b600654600854604051600160e01b63051c8a8d0281526000926001600160a01b039081169263051c8a8d92611df692909116908a908c9081908a90600019908a90600401614105565b6040805180830381600087803b158015611e0f57600080fd5b505af1158015611e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e479190810190613a8d565b509250611ef8915050565b600854604051600160e01b63a9059cbb0281526001600160a01b039091169063a9059cbb90611e879088908590600401614155565b602060405180830381600087803b158015611ea157600080fd5b505af1158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ed99190810190613a33565b611ef857604051600160e51b62461bcd0281526004016107f1906142c9565b6001600055949350505050565b3360009081526010602090815260408083206001600160a01b0386168452909152812054611f4890611149908490611f3c906127d3565b9063ffffffff6130ed16565b3360008181526010602090815260408083206001600160a01b0389168085529252909120839055917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611f9b906127d3565b604051610a549190614171565b6001600160a01b038083166000908152601060209081526040808320938516835292905290812054610b76906127d3565b6001546001600160a01b03163314611ff057600080fd5b600480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b03811660009081526009602052604081205461092490612a23565b6001546001600160a01b0316331461205157600080fd5b61205a816130fa565b50565b600d5481565b6001546001600160a01b0316331461207a57600080fd5b600a80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600a54600c54604051600160e21b6320a6ce3d02815260009261010090046001600160a01b03169163829b38f4916120dd9190600401614171565b60206040518083038186803b1580156120f557600080fd5b505afa158015612109573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aac9190810190613a6f565b60016000541461215257604051600160e51b62461bcd0281526004016107f190614299565b600260005561215f613169565b61217e57604051600160e51b62461bcd0281526004016107f190614209565b6001600055565b6000806121906120a2565b9050600081116121b557604051600160e51b62461bcd0281526004016107f190614259565b6008546000906001600160a01b038781169116146125b957600654604051600160e11b636eb1769f0281526000916001600160a01b03808a169263dd62ed3e92612206923092911690600401614024565b60206040518083038186803b15801561221e57600080fd5b505afa158015612232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122569190810190613a6f565b9050858110156123b957801561230f57600654604051600160e01b63095ea7b30281526001600160a01b038981169263095ea7b39261229e929091169060009060040161413a565b602060405180830381600087803b1580156122b857600080fd5b505af11580156122cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122f09190810190613a33565b61230f57604051600160e51b62461bcd0281526004016107f1906141d9565b600654604051600160e01b63095ea7b30281526001600160a01b038981169263095ea7b392612348929091169060001990600401614155565b602060405180830381600087803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061239a9190810190613a33565b6123b957604051600160e51b62461bcd0281526004016107f1906141f9565b600654600854604051600160e01b63051c8a8d02815260009283926001600160a01b039182169263051c8a8d92612401928e92911690309081908f908d908a906004016140ea565b6040805180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124529190810190613a8d565b91509150808811156125af5780880393503461250f57604051600160e01b63a9059cbb0281526001600160a01b038a169063a9059cbb906124999033908890600401614067565b602060405180830381600087803b1580156124b357600080fd5b505af11580156124c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124eb9190810190613a33565b61250a57604051600160e51b62461bcd0281526004016107f1906141c9565b6125af565b600754604051600160e01b632e1a7d4d0281526001600160a01b0390911690632e1a7d4d90612542908790600401614171565b600060405180830381600087803b15801561255c57600080fd5b505af1158015612570573d6000803e3d6000fd5b505060405133925086156108fc02915086906000818181858888f193505050506125af57604051600160e51b62461bcd0281526004016107f190614249565b5095506127199050565b8185111561271957508084033461267557600854604051600160e01b63a9059cbb0281526001600160a01b039091169063a9059cbb906125ff9033908590600401614067565b602060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126519190810190613a33565b61267057604051600160e51b62461bcd0281526004016107f1906141c9565b612715565b600754604051600160e01b632e1a7d4d0281526001600160a01b0390911690632e1a7d4d906126a8908490600401614171565b600060405180830381600087803b1580156126c257600080fd5b505af11580156126d6573d6000803e3d6000fd5b505060405133925083156108fc02915083906000818181858888f1935050505061271557604051600160e51b62461bcd0281526004016107f190614249565b8194505b612721613169565b61274057604051600160e51b62461bcd0281526004016107f190614209565b600061275e8561091888670de0b6b3a764000063ffffffff61279b16565b905061276c888288886134b5565b612775856127d3565b6001600160a01b038916600090815260096020526040902055925050505b949350505050565b6000826127aa57506000610a60565b50818102818382816127b857fe5b0414610a6057fe5b60008183816127cb57fe5b049392505050565b6012546000906109249061091884670de0b6b3a764000063ffffffff61279b16565b6001600160a01b03831660009081526010602090815260408083203384529091528120548190612824906127d3565b6001600160a01b0386166000908152600f60205260408120549192509061284a906127d3565b90508084111561286f57604051600160e51b62461bcd0281526004016107f190614279565b8184111561289257604051600160e51b62461bcd0281526004016107f1906141e9565b6001600160a01b0385166128bb57604051600160e51b62461bcd0281526004016107f190614239565b6128ce611149828663ffffffff612a1116565b6001600160a01b0387166000908152600f60205260409020556128f086611287565b61290e576001600160a01b0386166000908152600f60205260408120555b6001600160a01b0385166000908152600f602052604090205461293a90611149908690611f3c906127d3565b6001600160a01b0386166000908152600f60205260409020556000198210156129cc57612970611149838663ffffffff612a1116565b6001600160a01b0387166000908152601060209081526040808320338085529252909120919091556129a3908790611fa8565b6129cc576001600160a01b03861660009081526010602090815260408083203384529091528120555b846001600160a01b0316866001600160a01b0316600080516020614465833981519152866040516129fd9190614171565b60405180910390a350600195945050505050565b600082821115612a1d57fe5b50900390565b6000610924670de0b6b3a76400006109186012548561279b90919063ffffffff16565b60008060115411612a5957600e54610b76565b610b76611149601154610918670de0b6b3a764000061090c87611f3c8a600860009054906101000a90046001600160a01b03166001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612ab79190614016565b60206040518083038186803b158015612acf57600080fd5b505afa158015612ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f3c9190810190613a6f565b6000808211612b2b57604051600160e51b62461bcd0281526004016107f1906141b9565b612b3433611287565b821115612b4757612b4433611287565b91505b60048054600d54604051600160e31b631ef518a1028152600093849384936101009091046001600160a01b03169263f7a8c50892612b88929130910161417f565b60606040518083038186803b158015612ba057600080fd5b505afa158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bd89190810190613abd565b9250925092506000612bea8484612a46565b90506000612c0a670de0b6b3a7640000610918898563ffffffff61279b16565b600854604051600160e01b6370a082310281529192506000916001600160a01b03909116906370a0823190612c43903090600401614016565b60206040518083038186803b158015612c5b57600080fd5b505afa158015612c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c939190810190613a6f565b905081811015612d4557600454600d54612d429161010090046001600160a01b03169063a1e9348290612cc68686612a11565b6040518363ffffffff1660e01b8152600401612ce392919061419a565b602060405180830381600087803b158015612cfd57600080fd5b505af1158015612d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d359190810190613a6f565b829063ffffffff6130ed16565b90505b8181108015612ddb575060048054600d54604051600160e01b63ee73722f0281526101009092046001600160a01b03169263ee73722f92612d89929130910161417f565b60206040518083038186803b158015612da157600080fd5b505afa158015612db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612dd99190810190613a33565b155b15612f38576000612dea610a9f565b891015612e1f57612e18612e04888863ffffffff6130ed16565b6109188761090c878763ffffffff612a1116565b9050612e24565b506000195b60048054600d54604051600160e01b6388788f710281526101009092046001600160a01b0316926388788f7192612e5e929186910161419a565b602060405180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612eb09190810190613a6f565b50600854604051600160e01b6370a082310281526001600160a01b03909116906370a0823190612ee4903090600401614016565b60206040518083038186803b158015612efc57600080fd5b505afa158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f349190810190613a6f565b9150505b81811015612f6257905080612f5f8361091883670de0b6b3a764000063ffffffff61279b16565b97505b612f6e338984866135b8565b612f76610a9f565b612f8c57670de0b6b3a7640000601255600e5492505b6000612f9733611287565b1115612fbb57612fa6836127d3565b33600090815260096020526040902055612fcc565b336000908152600960205260408120555b509695505050505050565b336000908152600f60205260408120548190612ff2906127d3565b90508083111561301757604051600160e51b62461bcd0281526004016107f190614279565b6001600160a01b03841661304057604051600160e51b62461bcd0281526004016107f190614239565b613053611149828563ffffffff612a1116565b336000818152600f602052604090209190915561306f90611287565b61308457336000908152600f60205260408120555b6001600160a01b0384166000908152600f60205260409020546130b090611149908590611f3c906127d3565b6001600160a01b0385166000818152600f602052604090819020929092559051339060008051602061446583398151915290611208908790614171565b81810182811015610a6057fe5b6001600160a01b03811661310d57600080fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600854604051600160e01b6370a0823102815260009182916001600160a01b03909116906370a08231906131a1903090600401614016565b60206040518083038186803b1580156131b957600080fd5b505afa1580156131cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131f19190810190613a6f565b905080156134ad57600854600554604051600160e11b636eb1769f0281526000926001600160a01b039081169263dd62ed3e9261138792613239923092911690600401614024565b60206040518083038187803b15801561325157600080fd5b5086fa158015613265573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525061328a9190810190613a6f565b9050818110156133f157801561334557600854600554604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b3926132d49291169060009060040161413a565b602060405180830381600087803b1580156132ee57600080fd5b505af1158015613302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133269190810190613a33565b61334557604051600160e51b62461bcd0281526004016107f1906141d9565b600854600554604051600160e01b63095ea7b30281526001600160a01b039283169263095ea7b3926133809291169060001990600401614155565b602060405180830381600087803b15801561339a57600080fd5b505af11580156133ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133d29190810190613a33565b6133f157604051600160e51b62461bcd0281526004016107f1906141f9565b600a54600c54600b546040516000936001600160a01b036101009091048116936134259388939192169086906024016142e9565b60408051601f198184030181529181526020820180516001600160e01b0316600160e01b63247bbed7021790525161345d9190613ffc565b6000604051808303816000865af19150503d806000811461349a576040519150601f19603f3d011682016040523d82523d6000602084013e61349f565b606091505b50909450610aaf9350505050565b600091505090565b6001600160a01b0384166134de57604051600160e51b62461bcd0281526004016107f190614239565b6134f061114984611f3c6011546127d3565b6011556001600160a01b0384166000908152600f602052604090205461351f90611149908590611f3c906127d3565b6001600160a01b0385166000818152600f6020526040908190209290925590517fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9061357090869086908690614327565b60405180910390a2836001600160a01b031660006001600160a01b0316600080516020614465833981519152856040516135aa9190614171565b60405180910390a350505050565b6001600160a01b0384166000908152600f60205260408120546135da906127d3565b9050808411156135ff57604051600160e51b62461bcd0281526004016107f190614269565b613612611149828663ffffffff612a1116565b6001600160a01b0386166000908152600f60205260409020819055600a1015806136455750600a61364286611287565b11155b15613664576001600160a01b0385166000908152600f60205260408120555b613682611149856136766011546127d3565b9063ffffffff612a1116565b60115561368d610a9f565b6136975760006011555b846001600160a01b03167f743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b46448585856040516136d493929190614327565b60405180910390a260006001600160a01b0316856001600160a01b03166000805160206144658339815191528660405161370e9190614171565b60405180910390a35050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061375e57805160ff191683800117855561378b565b8280016001018555821561378b579182015b8281111561378b578251825591602001919060010190613770565b5061379792915061379b565b5090565b610aaf91905b8082111561379757600081556001016137a1565b8035610a6081614435565b8051610a6081614449565b8035610a6081614452565b600082601f8301126137e757600080fd5b81356137fa6137f582614377565b614350565b9150808252602083016020830185838301111561381657600080fd5b6138218382846143ef565b50505092915050565b8051610a6081614452565b8051610a608161445b565b60006020828403121561385257600080fd5b600061279384846137b5565b6000806040838503121561387157600080fd5b600061387d85856137b5565b925050602061388e858286016137cb565b9150509250929050565b600080604083850312156138ab57600080fd5b60006138b785856137b5565b925050602061388e858286016137b5565b60008060008060008060008060008060006101608c8e0312156138ea57600080fd5b60006138f68e8e6137b5565b9b505060206139078e828f016137b5565b9a505060406139188e828f016137b5565b99505060606139298e828f016137b5565b985050608061393a8e828f016137b5565b97505060a061394b8e828f016137b5565b96505060c061395c8e828f016137b5565b95505060e061396d8e828f016137cb565b94505061010061397f8e828f016137cb565b9350506101208c013567ffffffffffffffff81111561399d57600080fd5b6139a98e828f016137d6565b9250506101408c013567ffffffffffffffff8111156139c757600080fd5b6139d38e828f016137d6565b9150509295989b509295989b9093969950565b6000806000606084860312156139fb57600080fd5b6000613a0786866137b5565b9350506020613a18868287016137b5565b9250506040613a29868287016137cb565b9150509250925092565b600060208284031215613a4557600080fd5b600061279384846137c0565b600060208284031215613a6357600080fd5b600061279384846137cb565b600060208284031215613a8157600080fd5b6000612793848461382a565b60008060408385031215613aa057600080fd5b6000613aac858561382a565b925050602061388e8582860161382a565b600080600060608486031215613ad257600080fd5b6000613ade868661382a565b9350506020613aef8682870161382a565b9250506040613a298682870161382a565b600060208284031215613b1257600080fd5b60006127938484613835565b613b27816143ce565b82525050565b613b27816143ac565b613b27816143b7565b613b2781610aaf565b6000613b538261439f565b613b5d8185610927565b9350613b6d8185602086016143fb565b9290920192915050565b613b27816143d9565b6000613b8b8261439f565b613b9581856143a3565b9350613ba58185602086016143fb565b613bae8161442b565b9093019392505050565b6000613bc5600f836143a3565b7f6275726e416d6f756e74203d3d20300000000000000000000000000000000000815260200192915050565b6000613bfe6018836143a3565b7f7472616e73666572206f6620746f6b656e206661696c65640000000000000000815260200192915050565b6000613c37601b836143a3565b7f746f6b656e20617070726f76616c207265736574206661696c65640000000000815260200192915050565b6000613c706016836143a3565b7f696e73756666696369656e7420616c6c6f77616e636500000000000000000000815260200192915050565b6000613ca96015836143a3565b7f746f6b656e20617070726f76616c206661696c65640000000000000000000000815260200192915050565b6000613ce26016836143a3565b7f74726967676572506f736974696f6e206661696c656400000000000000000000815260200192915050565b6000613d1b6020836143a3565b7f7472616e73666572206f6620746f6b656e2062616c616e6365206661696c6564815260200192915050565b6000613d546013836143a3565b7f616c726561647920696e697469616c697a656400000000000000000000000000815260200192915050565b6000613d8d600f836143a3565b7f696e76616c696420616464726573730000000000000000000000000000000000815260200192915050565b6000613dc66016836143a3565b7f7472616e73666572206f6620455448206661696c656400000000000000000000815260200192915050565b6000613dff6014836143a3565b7f6d61726b65744c6971756964697479203d3d2030000000000000000000000000815260200192915050565b6000613e38601a836143a3565b7f6275726e2076616c756520657863656564732062616c616e6365000000000000815260200192915050565b6000613e716014836143a3565b7f696e73756666696369656e742062616c616e6365000000000000000000000000815260200192915050565b6000613eaa6012836143a3565b7f6465706f736974416d6f756e74203d3d20300000000000000000000000000000815260200192915050565b6000613ee3600c836143a3565b7f6e6f6e5265656e7472616e740000000000000000000000000000000000000000815260200192915050565b6000613f1c600e836143a3565b7f6d73672e76616c7565203d3d2030000000000000000000000000000000000000815260200192915050565b6000613f556010836143a3565b7f76616c75652063616e2774206265203000000000000000000000000000000000815260200192915050565b6000613f8e601c836143a3565b7f7472616e73666572206f66206c6f616e546f6b656e206661696c656400000000815260200192915050565b6000613fc7601d836143a3565b7f617070726f76616c206f66206c6f616e20746f6b656e206661696c6564000000815260200192915050565b613b27816143c8565b6000610b768284613b48565b60208101610a608284613b2d565b60208101610a608284613b1e565b604081016140328285613b1e565b610b766020830184613b2d565b6060810161404d8286613b1e565b61405a6020830185613b1e565b6127936040830184613b3f565b604081016140758285613b1e565b610b766020830184613b3f565b60e08101614090828a613b2d565b61409d6020830189613b1e565b6140aa6040830188613b1e565b6140b76060830187613b1e565b6140c46080830186613b3f565b6140d160a0830185613b3f565b6140de60c0830184613b77565b98975050505050505050565b60e081016140f8828a613b2d565b61409d6020830189613b2d565b60e08101614113828a613b2d565b6141206020830189613b2d565b61412d6040830188613b2d565b6140b76060830187613b2d565b604081016141488285613b2d565b610b766020830184613b77565b604081016140758285613b2d565b60208101610a608284613b36565b60208101610a608284613b3f565b6040810161418d8285613b3f565b610b766020830184613b1e565b604081016140758285613b3f565b60208082528101610b768184613b80565b6020808252810161092481613bb8565b6020808252810161092481613bf1565b6020808252810161092481613c2a565b6020808252810161092481613c63565b6020808252810161092481613c9c565b6020808252810161092481613cd5565b6020808252810161092481613d0e565b6020808252810161092481613d47565b6020808252810161092481613d80565b6020808252810161092481613db9565b6020808252810161092481613df2565b6020808252810161092481613e2b565b6020808252810161092481613e64565b6020808252810161092481613e9d565b6020808252810161092481613ed6565b6020808252810161092481613f0f565b6020808252810161092481613f48565b6020808252810161092481613f81565b6020808252810161092481613fba565b608081016142f78287613b3f565b6143046020830186613b3f565b6143116040830185613b2d565b61431e6060830184613b36565b95945050505050565b606081016143358286613b3f565b61405a6020830185613b3f565b60208101610a608284613ff3565b60405181810167ffffffffffffffff8111828210171561436f57600080fd5b604052919050565b600067ffffffffffffffff82111561438e57600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b6000610924826143bc565b151590565b6001600160a01b031690565b60ff1690565b6000610924826143e4565b600061092482610aaf565b6000610924826143ac565b82818337506000910152565b60005b838110156144165781810151838201526020016143fe565b83811115614425576000848401525b50505050565b601f01601f191690565b61443e816143ac565b811461205a57600080fd5b61443e816143b7565b61443e81610aaf565b61443e816143c856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa265627a7a72305820447f63a2ad07fcb5cdbb9e21f6a7667f11954d6c438f55ba327863f96235941a6c6578706572696d656e74616cf50037",
  "constructorArguments": "00490600052602060002090601f016020900481019282601f1061375e57805160ff191683800117855561378b565b8280016001018555821561378b579182015b8281111561378b578251825591602001919060010190613770565b5061379792915061379b565b5090565b610aaf91905b8082111561379757600081556001016137a1565b8035610a6081614435565b8051610a6081614449565b8035610a6081614452565b600082601f8301126137e757600080fd5b81356137fa6137f582614377565b614350565b9150808252602083016020830185838301111561381657600080fd5b6138218382846143ef565b50505092915050565b8051610a6081614452565b8051610a608161445b565b60006020828403121561385257600080fd5b600061279384846137b5565b6000806040838503121561387157600080fd5b600061387d85856137b5565b925050602061388e858286016137cb565b9150509250929050565b600080604083850312156138ab57600080fd5b60006138b785856137b5565b925050602061388e858286016137b5565b60008060008060008060008060008060006101608c8e0312156138ea57600080fd5b60006138f68e8e6137b5565b9b505060206139078e828f016137b5565b9a505060406139188e828f016137b5565b99505060606139298e828f016137b5565b985050608061393a8e828f016137b5565b97505060a061394b8e828f016137b5565b96505060c061395c8e828f016137b5565b95505060e061396d8e828f016137cb565b94505061010061397f8e828f016137cb565b9350506101208c013567ffffffffffffffff81111561399d57600080fd5b6139a98e828f016137d6565b9250506101408c013567ffffffffffffffff8111156139c757600080fd5b6139d38e828f016137d6565b9150509295989b509295989b9093969950565b6000806000606084860312156139fb57600080fd5b6000613a0786866137b5565b9350506020613a18868287016137b5565b9250506040613a29868287016137cb565b9150509250925092565b600060208284031215613a4557600080fd5b600061279384846137c0565b600060208284031215613a6357600080fd5b600061279384846137cb565b600060208284031215613a8157600080fd5b6000612793848461382a565b60008060408385031215613aa057600080fd5b6000613aac858561382a565b925050602061388e8582860161382a565b600080600060608486031215613ad257600080fd5b6000613ade868661382a565b9350506020613aef8682870161382a565b9250506040613a298682870161382a565b600060208284031215613b1257600080fd5b60006127938484613835565b613b27816143ce565b82525050565b613b27816143ac565b613b27816143b7565b613b2781610aaf565b6000613b538261439f565b613b5d8185610927565b9350613b6d8185602086016143fb565b9290920192915050565b613b27816143d9565b6000613b8b8261439f565b613b9581856143a3565b9350613ba58185602086016143fb565b613bae8161442b565b9093019392505050565b6000613bc5600f836143a3565b7f6275726e416d6f756e74203d3d20300000000000000000000000000000000000815260200192915050565b6000613bfe6018836143a3565b7f7472616e73666572206f6620746f6b656e206661696c65640000000000000000815260200192915050565b6000613c37601b836143a3565b7f746f6b656e20617070726f76616c207265736574206661696c65640000000000815260200192915050565b6000613c706016836143a3565b7f696e73756666696369656e7420616c6c6f77616e636500000000000000000000815260200192915050565b6000613ca96015836143a3565b7f746f6b656e20617070726f76616c206661696c65640000000000000000000000815260200192915050565b6000613ce26016836143a3565b7f74726967676572506f736974696f6e206661696c656400000000000000000000815260200192915050565b6000613d1b6020836143a3565b7f7472616e73666572206f6620746f6b656e2062616c616e6365206661696c6564815260200192915050565b6000613d546013836143a3565b7f616c726561647920696e697469616c697a656400000000000000000000000000815260200192915050565b6000613d8d600f836143a3565b7f696e76616c696420616464726573730000000000000000000000000000000000815260200192915050565b6000613dc66016836143a3565b7f7472616e73666572206f6620455448206661696c656400000000000000000000815260200192915050565b6000613dff6014836143a3565b7f6d61726b65744c6971756964697479203d3d2030000000000000000000000000815260200192915050565b6000613e38601a836143a3565b7f6275726e2076616c756520657863656564732062616c616e6365000000000000815260200192915050565b6000613e716014836143a3565b7f696e73756666696369656e742062616c616e6365000000000000000000000000815260200192915050565b6000613eaa6012836143a3565b7f6465706f736974416d6f756e74203d3d20300000000000000000000000000000815260200192915050565b6000613ee3600c836143a3565b7f6e6f6e5265656e7472616e740000000000000000000000000000000000000000815260200192915050565b6000613f1c600e836143a3565b7f6d73672e76616c7565203d3d2030000000000000000000000000000000000000815260200192915050565b6000613f556010836143a3565b7f76616c75652063616e2774206265203000000000000000000000000000000000815260200192915050565b6000613f8e601c836143a3565b7f7472616e73666572206f66206c6f616e546f6b656e206661696c656400000000815260200192915050565b6000613fc7601d836143a3565b7f617070726f76616c206f66206c6f616e20746f6b656e206661696c6564000000815260200192915050565b613b27816143c8565b6000610b768284613b48565b60208101610a608284613b2d565b60208101610a608284613b1e565b604081016140328285613b1e565b610b766020830184613b2d565b6060810161404d8286613b1e565b61405a6020830185613b1e565b6127936040830184613b3f565b604081016140758285613b1e565b610b766020830184613b3f565b60e08101614090828a613b2d565b61409d6020830189613b1e565b6140aa6040830188613b1e565b6140b76060830187613b1e565b6140c46080830186613b3f565b6140d160a0830185613b3f565b6140de60c0830184613b77565b98975050505050505050565b60e081016140f8828a613b2d565b61409d6020830189613b2d565b60e08101614113828a613b2d565b6141206020830189613b2d565b61412d6040830188613b2d565b6140b76060830187613b2d565b604081016141488285613b2d565b610b766020830184613b77565b604081016140758285613b2d565b60208101610a608284613b36565b60208101610a608284613b3f565b6040810161418d8285613b3f565b610b766020830184613b1e565b604081016140758285613b3f565b60208082528101610b768184613b80565b6020808252810161092481613bb8565b6020808252810161092481613bf1565b6020808252810161092481613c2a565b6020808252810161092481613c63565b6020808252810161092481613c9c565b6020808252810161092481613cd5565b6020808252810161092481613d0e565b6020808252810161092481613d47565b6020808252810161092481613d80565b6020808252810161092481613db9565b6020808252810161092481613df2565b6020808252810161092481613e2b565b6020808252810161092481613e64565b6020808252810161092481613e9d565b6020808252810161092481613ed6565b6020808252810161092481613f0f565b6020808252810161092481613f48565b6020808252810161092481613f81565b6020808252810161092481613fba565b608081016142f78287613b3f565b6143046020830186613b3f565b6143116040830185613b2d565b61431e6060830184613b36565b95945050505050565b606081016143358286613b3f565b61405a6020830185613b3f565b60208101610a608284613ff3565b60405181810167ffffffffffffffff8111828210171561436f57600080fd5b604052919050565b600067ffffffffffffffff82111561438e57600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b6000610924826143bc565b151590565b6001600160a01b031690565b60ff1690565b6000610924826143e4565b600061092482610aaf565b6000610924826143ac565b82818337506000910152565b60005b838110156144165781810151838201526020016143fe565b83811115614425576000848401525b50505050565b601f01601f191690565b61443e816143ac565b811461205a57600080fd5b61443e816143b7565b61443e81610aaf565b61443e816143c856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa265627a7a72305820447f63a2ad07fcb5cdbb9e21f6a7667f11954d6c438f55ba327863f96235941a6c6578706572696d656e74616cf50037"
}