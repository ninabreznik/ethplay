{
  "address": "0x087432b7f9a47efc56b4a0cc3c6d0644ae74b982",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrowdSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-23\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC223 interface\n * @dev see https://github.com/ethereum/EIPs/issues/223\n */\ninterface ERC223I {\n\n  function balanceOf(address _owner) external view returns (uint balance);\n  \n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function decimals() external view returns (uint8 _decimals);\n  function totalSupply() external view returns (uint256 supply);\n\n  function transfer(address to, uint value) external returns (bool ok);\n  function transfer(address to, uint value, bytes data) external returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) external returns (bool ok);\n\n  function releaseTokenTransfer() external;\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);  \n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow.\n    */\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n        assert(y <= x);\n        uint256 z = x - y;\n        return z;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x + y;\n        assert(z >= x);\n        return z;\n    }\n\t\n\t/**\n    * @dev Integer division of two numbers, reverts on division by zero.\n    */\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x / y;\n        return z;\n    }\n    \n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\t\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \n        if (x == 0) {\n            return 0;\n        }\n    \n        uint256 z = x * y;\n        assert(z / x == y);\n        return z;\n    }\n\n    /**\n    * @dev Returns the integer percentage of the number.\n    */\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (x == 0) {\n            return 0;\n        }\n        \n        uint256 z = x * y;\n        assert(z / x == y);    \n        z = z / 10000; // percent to hundredths\n        return z;\n    }\n\n    /**\n    * @dev Returns the minimum value of two numbers.\n    */\t\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x <= y ? x : y;\n        return z;\n    }\n\n    /**\n    * @dev Returns the maximum value of two numbers.\n    */\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x >= y ? x : y;\n        return z;\n    }\n}\n/**\n * @title Ownable contract - base contract with an owner\n */\ncontract Ownable {\n  \n  address public owner;\n  address public newOwner;\n\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n  \n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    assert(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    assert(_newOwner != address(0));      \n    newOwner = _newOwner;\n  }\n\n  /**\n   * @dev Accept transferOwnership.\n   */\n  function acceptOwnership() public {\n    if (msg.sender == newOwner) {\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n  }\n}\n\n/**\n * @title RateContract Interface\n * @dev \n */\ninterface RateContractI {\n    // returns the Currency information\n    function getCurrency(bytes32 _code) external view returns (string, uint, uint, uint, uint);\n\n    // returns Rate of coin to PMC (with the exception of rate[\"ETH\"]) \n    function getRate(bytes32 _code) external view returns (uint);\n\n    // returns Price of Object in the specified currency (local user currency)\n    // _code - specified currency\n    // _amount - price of object in PMC\n    function getLocalPrice(bytes32 _code, uint _amount) external view returns (uint);\n\n    // returns Price of Object in the crypto currency (ETH)    \n    // _amount - price of object in PMC\n    function getCryptoPrice(uint _amount) external view returns (uint);\n\n    // update rates for a specific coin\n    function updateRate(bytes32 _code, uint _pmc) external;\n}\n\n/**\n * @title Agent contract - base contract with an agent\n */\ncontract Agent is Ownable {\n\n  address public defAgent;\n\n  mapping(address => bool) public Agents;  \n\n  event UpdatedAgent(address _agent, bool _status);\n\n  constructor() public {\n    defAgent = msg.sender;\n    Agents[msg.sender] = true;\n  }\n  \n  modifier onlyAgent() {\n    assert(Agents[msg.sender]);\n    _;\n  }\n  \n  function updateAgent(address _agent, bool _status) public onlyOwner {\n    assert(_agent != address(0));\n    Agents[_agent] = _status;\n\n    emit UpdatedAgent(_agent, _status);\n  }  \n}\n\n/**\n * @title Standard ERC223 token\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC223 is ERC223I, Agent, SafeMath {\n\n  mapping(address => uint) balances;\n  \n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n\n  address public crowdsale = address(0);\n  bool public released = false;\n\n  /**\n   * @dev Limit token transfer until the crowdsale is over.\n   */\n  modifier canTransfer() {\n    assert(released || msg.sender == crowdsale);\n    _;\n  }\n\n  modifier onlyCrowdsaleContract() {\n    assert(msg.sender == crowdsale);\n    _;\n  }  \n  \n  function name() public view returns (string _name) {\n    return name;\n  }\n\n  function symbol() public view returns (string _symbol) {\n    return symbol;\n  }\n\n  function decimals() public view returns (uint8 _decimals) {\n    return decimals;\n  }\n\n  function totalSupply() public view returns (uint256 _totalSupply) {\n    return totalSupply;\n  }\n\n  function balanceOf(address _owner) public view returns (uint balance) {\n    return balances[_owner];\n  }  \n\n  // if bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private view returns (bool is_contract) {\n    uint length;\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    }\n    return (length>0);\n  }\n  \n  // function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data) external canTransfer() returns (bool success) {      \n    if(isContract(_to)) {\n      return transferToContract(_to, _value, _data);\n    } else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n  \n  // standard function transfer similar to ERC20 transfer with no _data.\n  // added due to backwards compatibility reasons.\n  function transfer(address _to, uint _value) external canTransfer() returns (bool success) {      \n    bytes memory empty;\n    if(isContract(_to)) {\n      return transferToContract(_to, _value, empty);\n    } else {\n      return transferToAddress(_to, _value, empty);\n    }\n  }\n\n  // function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    emit Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  // function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    assert(_to.call.value(0)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", msg.sender, _value, _data)));\n    emit Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  // function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) external canTransfer() returns (bool success) {      \n    if(isContract(_to)) {\n      if (balanceOf(msg.sender) < _value) revert();\n      balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n      balances[_to] = safeAdd(balanceOf(_to), _value);      \n      assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));    \n      emit Transfer(msg.sender, _to, _value, _data);\n      return true;\n    } else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n\n  function setCrowdsaleContract(address _contract) external onlyOwner {\n    crowdsale = _contract;\n  }\n\n  /**\n   * @dev One way function to release the tokens to the wild. Can be called only from the crowdsale contract.\n   */\n  function releaseTokenTransfer() external onlyCrowdsaleContract {\n    released = true;\n  }\n}\n\n\n/**\n * @title SABIGlobal CrowdSale management contract\n */\ncontract CrowdSale is Agent, SafeMath {\n\n  uint public decimals = 8;\n  uint public multiplier = 10 ** decimals;\n  \n  RateContractI public RateContract;\n  ERC223I public ERC223;\n\n  uint public totalSupply;\n  \n  uint public SoftCap;\n  uint public HardCap;\n\n  /* The UNIX timestamp start/end date of the crowdsale */\n  uint public startsAt;\n  uint public endsIn;\n  \n  /* How many unique addresses that have invested */\n  uint public investorCount = 0;\n  \n  /* How many wei of funding we have raised */\n  uint public weiRaised = 0;\n  \n  /* How many usd of funding we have raised */\n  uint public usdRaised = 0;\n  \n  /* The number of tokens already sold through this contract*/\n  uint public tokensSold = 0;\n  \n  /* Has this crowdsale been finalized */\n  bool public finalized;\n\n  /** State\n   *\n   * - Preparing: All contract initialization calls and variables have not been set yet\n   * - PrivateSale: Private sale\n   * - PreSale: Pre Sale\n   * - Sale: Active crowdsale\n   * - Success: HardCap reached\n   * - Failure: HardCap not reached before ending time\n   * - Finalized: The finalized has been called and succesfully executed\n   */\n  enum State{Unknown, Preparing, PrivateSale, PreSale, Sale, Success, Failure, Finalized}\n\n  /* How much ETH each address has invested to this crowdsale */\n  mapping (address => uint) public investedAmountOf;\n  \n  /* How much tokens this crowdsale has credited for each investor address */\n  mapping (address => uint) public tokenAmountOf;\n  \n  /* Wei will be transfered on this address */\n  address public multisigWallet;\n  \n  /* How much wei we have given back to investors. */\n  uint public weiRefunded = 0;\n\n  /* token price in USD */\n  uint public price;\n\n  struct _Stage {\n    uint startsAt;\n    uint endsIn;\n    uint bonus;    \n    uint min;\n    uint tokenAmount;\n    mapping (address => uint) tokenAmountOfStage; // how much tokens this crowdsale has credited for each investor address in a particular stage\n  }\n\n  _Stage[5] public Stages;\n\n  mapping (bytes32 => uint) public cap;\n  uint[5] public duration;\n\n  /* A new investment was made */\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint bonusAmount);\n  /* Receive ether on the contract */\n  event ReceiveEtherOnContract(address sender, uint amount);\n  \n  /**\n   * @dev Constructor sets default parameters\n   * @param _startsAt1 = 1539993600 (20.10.2018)\n   * @param _startsAt2 = 1543104000 (25.11.2018)\n   * @param _startsAt3 = 1544313600 (09.12.2018)\n   * @param _startsAt4 = 1545523200 (23.12.2018)\n   * @param _startsAt5 = 1552176000 (10.03.2019)\n   */\n  constructor(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public {\n    \n    duration[0] = 36 days;\n    duration[1] = 14 days;\n    duration[2] = 14 days;\n    duration[3] =  9 days;  \n    duration[4] = 32 days;\n\n    initialization(_multisigWallet, _priceTokenInUSDCents, _startsAt1, _startsAt2, _startsAt3, _startsAt4, _startsAt5);\n  }\n\n  function hash(State _data) private pure returns (bytes32 _hash) {\n    return keccak256(abi.encodePacked(_data));\n  }\n\n  function initialization(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public onlyOwner {\n\n    require(_multisigWallet != address(0) && _priceTokenInUSDCents > 0);\n\n    require(_startsAt1 < _startsAt2 &&\n            _startsAt2 >= _startsAt1 + duration[0] &&\n            _startsAt3 >= _startsAt2 + duration[1] &&\n            _startsAt4 >= _startsAt3 + duration[2] &&\n            _startsAt5 >= _startsAt4 + duration[3]);\n\n    multisigWallet =_multisigWallet;\n    startsAt = _startsAt1;\n    endsIn = _startsAt5 + duration[4];\n    price = _priceTokenInUSDCents;\n\n    SoftCap =  200 * (10**6) * multiplier;\n    HardCap = 1085 * (10**6) * multiplier;\n\n    cap[hash(State.PrivateSale)] = 150 * (10**6) * multiplier +  60 * (10**6) * multiplier;\n    cap[hash(State.PreSale)]     = 500 * (10**6) * multiplier + 125 * (10**6) * multiplier;\n    cap[hash(State.Sale)]        = 250 * (10**6) * multiplier;\n\n    Stages[0] = _Stage({startsAt: _startsAt1, endsIn:_startsAt1 + duration[0] - 1, bonus: 4000, min: 1250 * 10**3 * multiplier, tokenAmount: 0});\n    Stages[1] = _Stage({startsAt: _startsAt2, endsIn:_startsAt2 + duration[1] - 1, bonus: 2500, min: 2500 * multiplier, tokenAmount: 0});\n    Stages[2] = _Stage({startsAt: _startsAt3, endsIn:_startsAt3 + duration[2] - 1, bonus: 2000, min: 2500 * multiplier, tokenAmount: 0});\n    Stages[3] = _Stage({startsAt: _startsAt4, endsIn:_startsAt4 + duration[3],     bonus: 1500, min: 2500 * multiplier, tokenAmount: 0});\n    Stages[4] = _Stage({startsAt: _startsAt5, endsIn:_startsAt5 + duration[4],     bonus:    0, min: 1000 * multiplier, tokenAmount: 0});\n  }\n  \n  /** \n   * @dev Crowdfund state\n   * @return State current state\n   */\n  function getState() public constant returns (State) {\n    if (finalized) return State.Finalized;\n    else if (ERC223 == address(0) || RateContract == address(0) || now < startsAt) return State.Preparing;\n    else if (now >= Stages[0].startsAt && now <= Stages[0].endsIn) return State.PrivateSale;\n    else if (now >= Stages[1].startsAt && now <= Stages[3].endsIn) return State.PreSale;\n    else if (now > Stages[3].endsIn && now < Stages[4].startsAt) return State.Preparing;\n    else if (now >= Stages[4].startsAt && now <= Stages[4].endsIn) return State.Sale;    \n    else if (isCrowdsaleFull()) return State.Success;\n    else return State.Failure;\n  }\n\n  /** \n   * @dev Gets the current stage.\n   * @return uint current stage\n   */\n  function getStage() public constant returns (uint) {\n    uint i;\n    for (i = 0; i < Stages.length; i++) {\n      if (now >= Stages[i].startsAt && now < Stages[i].endsIn) {\n        return i;\n      }\n    }\n    return Stages.length-1;\n  }\n\n  /**\n   * Buy tokens from the contract\n   */\n  function() public payable {\n    investInternal(msg.sender, msg.value);\n  }\n\n  /**\n   * Buy tokens from personal area (ETH or BTC)\n   */\n  function investByAgent(address _receiver, uint _weiAmount) external onlyAgent {\n    investInternal(_receiver, _weiAmount);\n  }\n  \n  /**\n   * Make an investment.\n   *\n   * @param _receiver The Ethereum address who receives the tokens\n   * @param _weiAmount The invested amount\n   *\n   */\n  function investInternal(address _receiver, uint _weiAmount) private {\n\n    require(_weiAmount > 0);\n\n    State currentState = getState();\n    require(currentState == State.PrivateSale || currentState == State.PreSale || currentState == State.Sale);\n\n    uint currentStage = getStage();\n    \n    // Calculating the number of tokens\n    uint tokenAmount = 0;\n    uint bonusAmount = 0;\n    (tokenAmount, bonusAmount) = calculateTokens(_weiAmount, currentStage);\n\n    tokenAmount = safeAdd(tokenAmount, bonusAmount);\n    \n    // Check cap for every State\n    if (currentState == State.PrivateSale || currentState == State.Sale) {\n      require(safeAdd(Stages[currentStage].tokenAmount, tokenAmount) <= cap[hash(currentState)]);\n    } else {\n      uint TokenSoldOnPreSale = safeAdd(safeAdd(Stages[1].tokenAmount, Stages[2].tokenAmount), Stages[3].tokenAmount);\n      TokenSoldOnPreSale = safeAdd(TokenSoldOnPreSale, tokenAmount);\n      require(TokenSoldOnPreSale <= cap[hash(currentState)]);\n    }      \n\n    // Check HardCap\n    require(safeAdd(tokensSold, tokenAmount) <= HardCap);\n    \n    // Update stage counts  \n    Stages[currentStage].tokenAmount  = safeAdd(Stages[currentStage].tokenAmount, tokenAmount);\n    Stages[currentStage].tokenAmountOfStage[_receiver] = safeAdd(Stages[currentStage].tokenAmountOfStage[_receiver], tokenAmount);\n\t\n    // Update investor\n    if(investedAmountOf[_receiver] == 0) {       \n       investorCount++; // A new investor\n    }  \n    investedAmountOf[_receiver] = safeAdd(investedAmountOf[_receiver], _weiAmount);\n    tokenAmountOf[_receiver] = safeAdd(tokenAmountOf[_receiver], tokenAmount);\n\n    // Update totals\n    weiRaised  = safeAdd(weiRaised, _weiAmount);\n    usdRaised  = safeAdd(usdRaised, weiToUsdCents(_weiAmount));\n    tokensSold = safeAdd(tokensSold, tokenAmount);    \n\n    // Send ETH to multisigWallet\n    multisigWallet.transfer(msg.value);\n\n    // Send tokens to _receiver\n    ERC223.transfer(_receiver, tokenAmount);\n\n    // Tell us invest was success\n    emit Invested(_receiver, _weiAmount, tokenAmount, bonusAmount);\n  }  \n  \n  /**\n   * @dev Calculating tokens count\n   * @param _weiAmount invested\n   * @param _stage stage of crowdsale\n   * @return tokens amount\n   */\n  function calculateTokens(uint _weiAmount, uint _stage) internal view returns (uint tokens, uint bonus) {\n    uint usdAmount = weiToUsdCents(_weiAmount);    \n    tokens = safeDiv(safeMul(multiplier, usdAmount), price);\n\n    // Check minimal amount to buy\n    require(tokens >= Stages[_stage].min);    \n\n    bonus = safePerc(tokens, Stages[_stage].bonus);\n    return (tokens, bonus);\n  }\n  \n  /**\n   * @dev Converts wei value into USD cents according to current exchange rate\n   * @param weiValue wei value to convert\n   * @return USD cents equivalent of the wei value\n   */\n  function weiToUsdCents(uint weiValue) internal view returns (uint) {\n    return safeDiv(safeMul(weiValue, RateContract.getRate(\"ETH\")), 1 ether);\n  }\n  \n  /**\n   * @dev Check if SoftCap was reached.\n   * @return true if the crowdsale has raised enough money to be a success\n   */\n  function isCrowdsaleFull() public constant returns (bool) {\n    if(tokensSold >= SoftCap){\n      return true;  \n    }\n    return false;\n  }\n\n  /**\n   * @dev burn unsold tokens and allow transfer of tokens.\n   */\n  function finalize() public onlyOwner {    \n    require(!finalized);\n    require(now > endsIn);\n\n    if(HardCap > tokensSold){\n      // burn unsold tokens \n      ERC223.transfer(address(0), safeSub(HardCap, tokensSold));\n    }\n\n    // allow transfer of tokens\n    ERC223.releaseTokenTransfer();\n\n    finalized = true;\n  }\n\n  /**\n   * Receives ether on the contract\n   */\n  function receive() public payable {\n    emit ReceiveEtherOnContract(msg.sender, msg.value);\n  }\n\n  function setTokenContract(address _contract) external onlyOwner {\n    ERC223 = ERC223I(_contract);\n    totalSupply = ERC223.totalSupply();\n    HardCap = ERC223.balanceOf(address(this));\n  }\n\n  function setRateContract(address _contract) external onlyOwner {\n    RateContract = RateContractI(_contract);\n  }\n\n  function setDurations(uint _duration1, uint _duration2, uint _duration3, uint _duration4, uint _duration5) public onlyOwner {\n    duration[0] = _duration1;\n    duration[1] = _duration2;\n    duration[2] = _duration3;\n    duration[3] = _duration4;\n    duration[4] = _duration5;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"investByAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC223\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Stages\",\"outputs\":[{\"name\":\"startsAt\",\"type\":\"uint256\"},{\"name\":\"endsIn\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setRateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration1\",\"type\":\"uint256\"},{\"name\":\"_duration2\",\"type\":\"uint256\"},{\"name\":\"_duration3\",\"type\":\"uint256\"},{\"name\":\"_duration4\",\"type\":\"uint256\"},{\"name\":\"_duration5\",\"type\":\"uint256\"}],\"name\":\"setDurations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_priceTokenInUSDCents\",\"type\":\"uint256\"},{\"name\":\"_startsAt1\",\"type\":\"uint256\"},{\"name\":\"_startsAt2\",\"type\":\"uint256\"},{\"name\":\"_startsAt3\",\"type\":\"uint256\"},{\"name\":\"_startsAt4\",\"type\":\"uint256\"},{\"name\":\"_startsAt5\",\"type\":\"uint256\"}],\"name\":\"initialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_priceTokenInUSDCents\",\"type\":\"uint256\"},{\"name\":\"_startsAt1\",\"type\":\"uint256\"},{\"name\":\"_startsAt2\",\"type\":\"uint256\"},{\"name\":\"_startsAt3\",\"type\":\"uint256\"},{\"name\":\"_startsAt4\",\"type\":\"uint256\"},{\"name\":\"_startsAt5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveEtherOnContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdatedAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526008600455600454600a0a6005556000600d556000600e556000600f55600060105560006015553480156200003857600080fd5b5060405160e08062001d008339810160409081528151602080840151838501516060860151608087015160a088015160c0909801516000805433600160a060020a0319918216811783556002805490921681179091558152600390965296909420805460ff19166001179055622f7600603655621275006037819055603855620bdd80603955622a3000603a55939591949093929190620000e887878787878787640100000000620000f5810204565b5050505050505062000506565b600054600160a060020a031633146200010a57fe5b600160a060020a03871615801590620001235750600086115b15156200012f57600080fd5b838510801562000143575060365485018410155b801562000154575060375484018310155b801562000165575060385483018210155b801562000176575060395482018110155b15156200018257600080fd5b60148054600160a060020a031916600160a060020a038916179055600b8590556036600401548101600c556016869055600554630bebc20081026009556340abc9408102600a556308f0d180810263039387009091020160356000620001f2600264010000000062000450810204565b81526020810191909152604001600090812091909155600554631dcd650081026307735940909102019060359062000234600364010000000062000450810204565b81526020810191909152604001600090812091909155600554630ee6b28002906035906200026c600464010000000062000450810204565b81526020808201929092526040908101600090812093909355805160a08082018352898252603680548b0160001901838601819052610fa0848601819052600554621312d00260608601819052608090950188905260178d9055601891909155601955601a92909255601b9490945581519384019091528683529082019060019081015487010381526109c4602080830182905260055490910260408084019190915260006060938401528351601d5583820151601e5583810151601f55918301518155608090920151602155805160a08101909152848152908101600160366002015486010381526107d06020808301919091526005546109c40260408084019190915260006060938401528351602355838201516024558381015160255591830151602655608090920151602755805160a081019091528381529081016036600301549390930183526105dc6020808501919091526005546109c4810260408087019190915260006060968701819052845160295584840151602a5584820151602b5584870151602c55608094850151602d55815160a081018352868152603a5487019481018590529182018190526103e8909202958101869052909201829052602f9290925560309190915560318190556032919091556033555050505050565b600081604051602001808260078111156200046757fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019150506040516020818303038152906040526040518082805190602001908083835b60208310620004d45780518252601f199092019160209182019101620004b3565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6117ea80620005166000396000f3006080604052600436106101c95763ffffffff60e060020a60003504166315fcb6d981146101d557806318160ddd146101f95780631865c57d146102205780631aae3460146102595780631b3ed7221461027a578063313ce5671461028f57806335bc5462146102a45780633fb86ebe146102bc5780634042b66f146102d45780634ad4fa5d146102e95780634b9e7dc71461031a5780634bb278f31461035d5780635040c6e714610372578063518ab2a8146103875780635da89ac01461039c5780636b96668f146103b15780636e84f870146103d257806379ba5097146104075780638da5cb5b1461041c5780639075becf1461043157806397b150ca146104465780639e5fd0bb14610467578063a035b1fe1461047c578063a3e76c0f14610491578063a4e44fdd14610499578063af468682146104bd578063b3f05b97146104d2578063bbcd5bbe146104e7578063c673c09b14610508578063d4ee1d901461051d578063d5d0902114610532578063d7e64c0014610547578063e4787de81461055c578063eadd94ec1461058f578063f0b53256146105a4578063f21e2d86146105b9578063f2fde38b146105ce578063faad6eb5146105ef578063fcaa766414610615575b6101d3333461062a565b005b3480156101e157600080fd5b506101d3600160a060020a0360043516602435610a3e565b34801561020557600080fd5b5061020e610a67565b60408051918252519081900360200190f35b34801561022c57600080fd5b50610235610a6d565b6040518082600781111561024557fe5b60ff16815260200191505060405180910390f35b34801561026557600080fd5b5061020e600160a060020a0360043516610b5b565b34801561028657600080fd5b5061020e610b6d565b34801561029b57600080fd5b5061020e610b73565b3480156102b057600080fd5b5061020e600435610b79565b3480156102c857600080fd5b5061020e600435610b8d565b3480156102e057600080fd5b5061020e610b9f565b3480156102f557600080fd5b506102fe610ba5565b60408051600160a060020a039092168252519081900360200190f35b34801561032657600080fd5b50610332600435610bb4565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561036957600080fd5b506101d3610be6565b34801561037e57600080fd5b5061020e610d45565b34801561039357600080fd5b5061020e610d4b565b3480156103a857600080fd5b5061020e610d51565b3480156103bd57600080fd5b506101d3600160a060020a0360043516610d57565b3480156103de57600080fd5b506103f3600160a060020a0360043516610d9a565b604080519115158252519081900360200190f35b34801561041357600080fd5b506101d3610daf565b34801561042857600080fd5b506102fe610e31565b34801561043d57600080fd5b506102fe610e40565b34801561045257600080fd5b5061020e600160a060020a0360043516610e4f565b34801561047357600080fd5b506102fe610e61565b34801561048857600080fd5b5061020e610e70565b6101d3610e76565b3480156104a557600080fd5b506101d3600435602435604435606435608435610eb2565b3480156104c957600080fd5b5061020e610edd565b3480156104de57600080fd5b506103f3610ee3565b3480156104f357600080fd5b506101d3600160a060020a0360043516610eec565b34801561051457600080fd5b5061020e61104b565b34801561052957600080fd5b506102fe611051565b34801561053e57600080fd5b506103f3611060565b34801561055357600080fd5b5061020e61107d565b34801561056857600080fd5b506101d3600160a060020a036004351660243560443560643560843560a43560c435611083565b34801561059b57600080fd5b5061020e6113c6565b3480156105b057600080fd5b5061020e6113cc565b3480156105c557600080fd5b506102fe6113d2565b3480156105da57600080fd5b506101d3600160a060020a03600435166113e1565b3480156105fb57600080fd5b506101d3600160a060020a03600435166024351515611436565b34801561062157600080fd5b5061020e6114c0565b60008080808080861161063c57600080fd5b610644610a6d565b9450600285600781111561065457fe5b148061066b5750600385600781111561066957fe5b145b806106815750600485600781111561067f57fe5b145b151561068c57600080fd5b6106946114c0565b935060009250600091506106a8868561151f565b90935091506106b78383611593565b925060028560078111156106c757fe5b14806106de575060048560078111156106dc57fe5b145b1561072f57603560006106f0876115ad565b815260208101919091526040016000205461071f6017866005811061071157fe5b600602016004015485611593565b111561072a57600080fd5b61078d565b6021546107559061074c90601760025b6006020160040154611593565b6017600361073f565b90506107618184611593565b905060356000610770876115ad565b815260208101919091526040016000205481111561078d57600080fd5b600a5461079c60105485611593565b11156107a757600080fd5b6107c5601785600581106107b757fe5b600602016004015484611593565b601785600581106107d257fe5b60060201600401819055506108206017856005811015156107ef57fe5b60060201600501600089600160a060020a0316600160a060020a031681526020019081526020016000205484611593565b6017856005811061082d57fe5b600160a060020a038a166000908152600560069290920292909201016020908152604080832093909355601290522054151561086d57600d805460010190555b600160a060020a0387166000908152601260205260409020546108909087611593565b600160a060020a0388166000908152601260209081526040808320939093556013905220546108bf9084611593565b600160a060020a038816600090815260136020526040902055600e546108e59087611593565b600e55600f546108fd906108f888611660565b611593565b600f5560105461090d9084611593565b601055601454604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610949573d6000803e3d6000fd5b50600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156109b957600080fd5b505af11580156109cd573d6000803e3d6000fd5b505050506040513d60208110156109e357600080fd5b505060408051600160a060020a0389168152602081018890528082018590526060810184905290517f9bce88ff835d9d8831ccf5c7e04a2533f68510314393b3a54f990dea62e7134e9181900360800190a150505050505050565b3360009081526003602052604090205460ff161515610a5957fe5b610a63828261062a565b5050565b60085481565b60115460009060ff1615610a8357506007610b58565b600754600160a060020a03161580610aa45750600654600160a060020a0316155b80610ab05750600b5442105b15610abd57506001610b58565b6017544210801590610ad157506018544211155b15610ade57506002610b58565b601d544210801590610af25750602a544211155b15610aff57506003610b58565b602a5442118015610b115750602f5442105b15610b1e57506001610b58565b602f544210801590610b3257506030544211155b15610b3f57506004610b58565b610b47611060565b15610b5457506005610b58565b5060065b90565b60126020526000908152604090205481565b60055481565b60045481565b60368160058110610b8657fe5b0154905081565b60356020526000908152604090205481565b600e5481565b600754600160a060020a031681565b60178160058110610bc157fe5b6006020180546001820154600283015460038401546004909401549294509092909185565b600054600160a060020a03163314610bfa57fe5b60115460ff1615610c0a57600080fd5b600c544211610c1857600080fd5b601054600a541115610ccb57600754600a54601054600160a060020a039092169163a9059cbb91600091610c4c9190611734565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b505050506040513d6020811015610cc857600080fd5b50505b600760009054906101000a9004600160a060020a0316600160a060020a0316635f412d4f6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610d1e57600080fd5b505af1158015610d32573d6000803e3d6000fd5b50506011805460ff191660011790555050565b600a5481565b60105481565b60155481565b600054600160a060020a03163314610d6b57fe5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60036020526000908152604090205460ff1681565b600154600160a060020a0316331415610e2f5760015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b565b600054600160a060020a031681565b601454600160a060020a031681565b60136020526000908152604090205481565b600254600160a060020a031681565b60165481565b6040805133815234602082015281517ff94bf0d7720da0874b1697206201fb6e1b1113bc06d5b1cebdb5e355937aa4b6929181900390910190a1565b600054600160a060020a03163314610ec657fe5b603694909455603792909255603855603955603a55565b600b5481565b60115460ff1681565b600054600160a060020a03163314610f0057fe5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905192909116916318160ddd916004808201926020929091908290030181600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b505050506040513d6020811015610fae57600080fd5b5051600855600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b505050506040513d602081101561104357600080fd5b5051600a5550565b600c5481565b600154600160a060020a031681565b600060095460105410151561107757506001610b58565b50600090565b600d5481565b600054600160a060020a0316331461109757fe5b600160a060020a038716158015906110af5750600086115b15156110ba57600080fd5b83851080156110cd575060365485018410155b80156110dd575060375484018310155b80156110ed575060385483018210155b80156110fd575060395482018110155b151561110857600080fd5b6014805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038916179055600b8590556036600401548101600c556016869055600554630bebc20081026009556340abc9408102600a556308f0d18081026303938700909102016035600061117a60026115ad565b6000191660001916815260200190815260200160002081905550600554630773594002600554631dcd65000201603560006111b560036115ad565b81526020810191909152604001600090812091909155600554630ee6b28002906035906111e260046115ad565b81526020808201929092526040908101600090812093909355805160a08082018352898252603680548b0160001901838601819052610fa0848601819052600554621312d00260608601819052608090950188905260178d9055601891909155601955601a92909255601b9490945581519384019091528683529082019060019081015487010381526109c4602080830182905260055490910260408084019190915260006060938401528351601d5583820151601e5583810151601f55918301518155608090920151602155805160a08101909152848152908101600160366002015486010381526107d06020808301919091526005546109c40260408084019190915260006060938401528351602355838201516024558381015160255591830151602655608090920151602755805160a081019091528381529081016036600301549390930183526105dc6020808501919091526005546109c4810260408087019190915260006060968701819052845160295584840151602a5584820151602b5584870151602c55608094850151602d55815160a081018352868152603a5487019481018590529182018190526103e8909202958101869052909201829052602f9290925560309190915560318190556032919091556033555050505050565b600f5481565b60095481565b600654600160a060020a031681565b600054600160a060020a031633146113f557fe5b600160a060020a038116151561140757fe5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461144a57fe5b600160a060020a038216151561145c57fe5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517fefdea550a3bf9a494aa4c9dc6131b82ddac18bde46375308e367bcd2dda4d5c99281900390910190a15050565b6000805b600581101561151657601781600581106114da57fe5b600602015442108015906115015750601781600581106114f657fe5b600602016001015442105b1561150e5780915061151b565b6001016114c4565b600491505b5090565b600080600061152d85611660565b905061154661153e60055483611748565b601654611773565b92506017846005811061155557fe5b6006020160030154831015151561156b57600080fd5b611589836017866005811061157c57fe5b600602016002015461178a565b9150509250929050565b6000828201838110156115a257fe5b8091505b5092915050565b600081604051602001808260078111156115c357fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019150506040516020818303038152906040526040518082805190602001908083835b6020831061162e5780518252601f19909201916020918201910161160f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b600654604080517fb32b56f90000000000000000000000000000000000000000000000000000000081527f45544800000000000000000000000000000000000000000000000000000000006004820152905160009261172e92611720928692600160a060020a03169163b32b56f991602480830192602092919082900301818a87803b1580156116ef57600080fd5b505af1158015611703573d6000803e3d6000fd5b505050506040513d602081101561171957600080fd5b5051611748565b670de0b6b3a7640000611773565b92915050565b6000808383111561174157fe5b5050900390565b60008083151561175b57600091506115a6565b5082820282848281151561176b57fe5b04146115a257fe5b600080828481151561178157fe5b04949350505050565b60008083151561179d57600091506115a6565b508282028284828115156117ad57fe5b04146117b557fe5b612710816117815600a165627a7a723058200b3ed2f0d5a924031a16e234c3a92ceb18cb25d55d2cf37cf79b475814ef3c890029000000000000000000000000cf397f46880cad41c6dc5620cb23e003f91c78f50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000005bca7000000000000000000000000000000000000000000000000000000000005bf9e600000000000000000000000000000000000000000000000000000000005c0c5b00000000000000000000000000000000000000000000000000000000005c1ed000000000000000000000000000000000000000000000000000000000005c845380",
  "constructorArguments": "000000000000000000000000cf397f46880cad41c6dc5620cb23e003f91c78f50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000005bca7000000000000000000000000000000000000000000000000000000000005bf9e600000000000000000000000000000000000000000000000000000000005c0c5b00000000000000000000000000000000000000000000000000000000005c1ed000000000000000000000000000000000000000000000000000000000005c845380"
}