{
  "address": "0x288409411793d180d6d8cd5ecab48a93e4d4f09b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GeneralTransferManager",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-23\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Utility contract to allow pausing and unpausing of certain functions\n */\ncontract Pausable {\n\n    event Pause(uint256 _timestammp);\n    event Unpause(uint256 _timestamp);\n\n    bool public paused = false;\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Contract is paused\");\n        _;\n    }\n\n    /**\n    * @notice Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"Contract is not paused\");\n        _;\n    }\n\n   /**\n    * @notice Called by the owner to pause, triggers stopped state\n    */\n    function _pause() internal whenNotPaused {\n        paused = true;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Pause(now);\n    }\n\n    /**\n    * @notice Called by the owner to unpause, returns to normal state\n    */\n    function _unpause() internal whenPaused {\n        paused = false;\n        /*solium-disable-next-line security/no-block-members*/\n        emit Unpause(now);\n    }\n\n}\n\n/**\n * @title Interface that every module contract should implement\n */\ninterface IModule {\n\n    /**\n     * @notice This function returns the signature of configure function\n     */\n    function getInitFunction() external pure returns (bytes4);\n\n    /**\n     * @notice Return the permission flags that are associated with a module\n     */\n    function getPermissions() external view returns(bytes32[]);\n\n    /**\n     * @notice Used to withdraw the fee by the factory owner\n     */\n    function takeFee(uint256 _amount) external returns(bool);\n\n}\n\n/**\n * @title Interface for all security tokens\n */\ninterface ISecurityToken {\n\n    // Standard ERC20 interface\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //transfer, transferFrom must respect the result of verifyTransfer\n    function verifyTransfer(address _from, address _to, uint256 _value) external returns (bool success);\n\n    /**\n     * @notice Mints new tokens and assigns them to the target _investor.\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n     * @param _investor Address the tokens will be minted to\n     * @param _value is the amount of tokens that will be minted to the investor\n     */\n    function mint(address _investor, uint256 _value) external returns (bool success);\n\n    /**\n     * @notice Mints new tokens and assigns them to the target _investor.\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n     * @param _investor Address the tokens will be minted to\n     * @param _value is The amount of tokens that will be minted to the investor\n     * @param _data Data to indicate validation\n     */\n    function mintWithData(address _investor, uint256 _value, bytes _data) external returns (bool success);\n\n    /**\n     * @notice Used to burn the securityToken on behalf of someone else\n     * @param _from Address for whom to burn tokens\n     * @param _value No. of tokens to be burned\n     * @param _data Data to indicate validation\n     */\n    function burnFromWithData(address _from, uint256 _value, bytes _data) external;\n\n    /**\n     * @notice Used to burn the securityToken\n     * @param _value No. of tokens to be burned\n     * @param _data Data to indicate validation\n     */\n    function burnWithData(uint256 _value, bytes _data) external;\n\n    event Minted(address indexed _to, uint256 _value);\n    event Burnt(address indexed _burner, uint256 _value);\n\n    // Permissions this to a Permission module, which has a key of 1\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns (bool);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _module Address of the module\n     * @return bytes32 Name\n     * @return address Module address\n     * @return address Module factory address\n     * @return bool Module archived\n     * @return uint8 Module type\n     * @return uint256 Module index\n     * @return uint256 Name index\n\n     */\n    function getModule(address _module) external view returns(bytes32, address, address, bool, uint8, uint256, uint256);\n\n    /**\n     * @notice Returns module list for a module name\n     * @param _name Name of the module\n     * @return address[] List of modules with this name\n     */\n    function getModulesByName(bytes32 _name) external view returns (address[]);\n\n    /**\n     * @notice Returns module list for a module type\n     * @param _type Type of the module\n     * @return address[] List of modules with this type\n     */\n    function getModulesByType(uint8 _type) external view returns (address[]);\n\n    /**\n     * @notice Queries totalSupply at a specified checkpoint\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function totalSupplyAt(uint256 _checkpointId) external view returns (uint256);\n\n    /**\n     * @notice Queries balance at a specified checkpoint\n     * @param _investor Investor to query balance for\n     * @param _checkpointId Checkpoint ID to query as of\n     */\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns (uint256);\n\n    /**\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n     */\n    function createCheckpoint() external returns (uint256);\n\n    /**\n     * @notice Gets length of investors array\n     * NB - this length may differ from investorCount if the list has not been pruned of zero-balance investors\n     * @return Length\n     */\n    function getInvestors() external view returns (address[]);\n\n    /**\n     * @notice returns an array of investors at a given checkpoint\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\n     * @return list of investors\n     */\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]);\n\n    /**\n     * @notice generates subset of investors\n     * NB - can be used in batches if investor list is large\n     * @param _start Position of investor to start iteration from\n     * @param _end Position of investor to stop iteration at\n     * @return list of investors\n     */\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]);\n    \n    /**\n     * @notice Gets current checkpoint ID\n     * @return Id\n     */\n    function currentCheckpointId() external view returns (uint256);\n\n    /**\n    * @notice Gets an investor at a particular index\n    * @param _index Index to return address from\n    * @return Investor address\n    */\n    function investors(uint256 _index) external view returns (address);\n\n   /**\n    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n    * @param _tokenContract Address of the ERC20Basic compliance token\n    * @param _value Amount of POLY to withdraw\n    */\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\n\n    /**\n    * @notice Allows owner to approve more POLY to one of the modules\n    * @param _module Module address\n    * @param _budget New budget\n    */\n    function changeModuleBudget(address _module, uint256 _budget) external;\n\n    /**\n     * @notice Changes the tokenDetails\n     * @param _newTokenDetails New token details\n     */\n    function updateTokenDetails(string _newTokenDetails) external;\n\n    /**\n    * @notice Allows the owner to change token granularity\n    * @param _granularity Granularity level of the token\n    */\n    function changeGranularity(uint256 _granularity) external;\n\n    /**\n    * @notice Removes addresses with zero balances from the investors list\n    * @param _start Index in investors list at which to start removing zero balances\n    * @param _iters Max number of iterations of the for loop\n    * NB - pruning this list will mean you may not be able to iterate over investors on-chain as of a historical checkpoint\n    */\n    function pruneInvestors(uint256 _start, uint256 _iters) external;\n\n    /**\n     * @notice Freezes all the transfers\n     */\n    function freezeTransfers() external;\n\n    /**\n     * @notice Un-freezes all the transfers\n     */\n    function unfreezeTransfers() external;\n\n    /**\n     * @notice Ends token minting period permanently\n     */\n    function freezeMinting() external;\n\n    /**\n     * @notice Mints new tokens and assigns them to the target investors.\n     * Can only be called by the STO attached to the token or by the Issuer (Security Token contract owner)\n     * @param _investors A list of addresses to whom the minted tokens will be delivered\n     * @param _values A list of the amount of tokens to mint to corresponding addresses from _investor[] list\n     * @return Success\n     */\n    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success);\n\n    /**\n     * @notice Function used to attach a module to the security token\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n     * @dev to control restrictions on transfers.\n     * @dev You are allowed to add a new moduleType if:\n     * @dev - there is no existing module of that type yet added\n     * @dev - the last member of the module list is replacable\n     * @param _moduleFactory is the address of the module factory to be added\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\n     */\n    function addModule(\n        address _moduleFactory,\n        bytes _data,\n        uint256 _maxCost,\n        uint256 _budget\n    ) external;\n\n    /**\n    * @notice Archives a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function archiveModule(address _module) external;\n\n    /**\n    * @notice Unarchives a module attached to the SecurityToken\n    * @param _module address of module to unarchive\n    */\n    function unarchiveModule(address _module) external;\n\n    /**\n    * @notice Removes a module attached to the SecurityToken\n    * @param _module address of module to archive\n    */\n    function removeModule(address _module) external;\n\n    /**\n     * @notice Used by the issuer to set the controller addresses\n     * @param _controller address of the controller\n     */\n    function setController(address _controller) external;\n\n    /**\n     * @notice Used by a controller to execute a forced transfer\n     * @param _from address from which to take tokens\n     * @param _to address where to send tokens\n     * @param _value amount of tokens to transfer\n     * @param _data data to indicate validation\n     * @param _log data attached to the transfer by controller to emit in event\n     */\n    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) external;\n\n    /**\n     * @notice Used by a controller to execute a foced burn\n     * @param _from address from which to take tokens\n     * @param _value amount of tokens to transfer\n     * @param _data data to indicate validation\n     * @param _log data attached to the transfer by controller to emit in event\n     */\n    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) external;\n\n    /**\n     * @notice Used by the issuer to permanently disable controller functionality\n     * @dev enabled via feature switch \"disableControllerAllowed\"\n     */\n     function disableController() external;\n\n     /**\n     * @notice Used to get the version of the securityToken\n     */\n     function getVersion() external view returns(uint8[]);\n\n     /**\n     * @notice Gets the investor count\n     */\n     function getInvestorCount() external view returns(uint256);\n\n     /**\n      * @notice Overloaded version of the transfer function\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n     function transferWithData(address _to, uint256 _value, bytes _data) external returns (bool success);\n\n     /**\n      * @notice Overloaded version of the transferFrom function\n      * @param _from sender of transfer\n      * @param _to receiver of transfer\n      * @param _value value of transfer\n      * @param _data data to indicate validation\n      * @return bool success\n      */\n     function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external returns(bool);\n\n     /**\n      * @notice Provides the granularity of the token\n      * @return uint256\n      */\n     function granularity() external view returns(uint256);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Interface that any module contract should implement\n * @notice Contract is abstract\n */\ncontract Module is IModule {\n\n    address public factory;\n\n    address public securityToken;\n\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\n\n    IERC20 public polyToken;\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress) public {\n        securityToken = _securityToken;\n        factory = msg.sender;\n        polyToken = IERC20(_polyAddress);\n    }\n\n    //Allows owner, factory or permissioned delegate\n    modifier withPerm(bytes32 _perm) {\n        bool isOwner = msg.sender == Ownable(securityToken).owner();\n        bool isFactory = msg.sender == factory;\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == Ownable(securityToken).owner(), \"Sender is not owner\");\n        _;\n    }\n\n    modifier onlyFactory {\n        require(msg.sender == factory, \"Sender is not factory\");\n        _;\n    }\n\n    modifier onlyFactoryOwner {\n        require(msg.sender == Ownable(factory).owner(), \"Sender is not factory owner\");\n        _;\n    }\n\n    modifier onlyFactoryOrOwner {\n        require((msg.sender == Ownable(securityToken).owner()) || (msg.sender == factory), \"Sender is not factory or owner\");\n        _;\n    }\n\n    /**\n     * @notice used to withdraw the fee by the factory owner\n     */\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n        require(polyToken.transferFrom(securityToken, Ownable(factory).owner(), _amount), \"Unable to take fee\");\n        return true;\n    }\n}\n\n/**\n * @title Interface to be implemented by all Transfer Manager modules\n * @dev abstract contract\n */\ncontract ITransferManager is Module, Pausable {\n\n    //If verifyTransfer returns:\n    //  FORCE_VALID, the transaction will always be valid, regardless of other TM results\n    //  INVALID, then the transfer should not be allowed regardless of other TM results\n    //  VALID, then the transfer is valid for this TM\n    //  NA, then the result from this TM is ignored\n    enum Result {INVALID, NA, VALID, FORCE_VALID}\n\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes _data, bool _isTransfer) public returns(Result);\n\n    function unpause() public onlyOwner {\n        super._unpause();\n    }\n\n    function pause() public onlyOwner {\n        super._pause();\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Transfer Manager module for core transfer validation functionality\n */\ncontract GeneralTransferManager is ITransferManager {\n\n    using SafeMath for uint256;\n\n    //Address from which issuances come\n    address public issuanceAddress = address(0);\n\n    //Address which can sign whitelist changes\n    address public signingAddress = address(0);\n\n    bytes32 public constant WHITELIST = \"WHITELIST\";\n    bytes32 public constant FLAGS = \"FLAGS\";\n\n    //from and to timestamps that an investor can send / receive tokens respectively\n    struct TimeRestriction {\n        uint256 fromTime;\n        uint256 toTime;\n        uint256 expiryTime;\n        bool canBuyFromSTO;\n    }\n\n    // An address can only send / receive tokens once their corresponding uint256 > block.number\n    // (unless allowAllTransfers == true or allowAllWhitelistTransfers == true)\n    mapping (address => TimeRestriction) public whitelist;\n    // Map of used nonces by customer\n    mapping(address => mapping(uint256 => bool)) public nonceMap;  \n\n    //If true, there are no transfer restrictions, for any addresses\n    bool public allowAllTransfers = false;\n    //If true, time lock is ignored for transfers (address must still be on whitelist)\n    bool public allowAllWhitelistTransfers = false;\n    //If true, time lock is ignored for issuances (address must still be on whitelist)\n    bool public allowAllWhitelistIssuances = true;\n    //If true, time lock is ignored for burn transactions\n    bool public allowAllBurnTransfers = false;\n\n    // Emit when Issuance address get changed\n    event ChangeIssuanceAddress(address _issuanceAddress);\n    // Emit when there is change in the flag variable called allowAllTransfers\n    event AllowAllTransfers(bool _allowAllTransfers);\n    // Emit when there is change in the flag variable called allowAllWhitelistTransfers\n    event AllowAllWhitelistTransfers(bool _allowAllWhitelistTransfers);\n    // Emit when there is change in the flag variable called allowAllWhitelistIssuances\n    event AllowAllWhitelistIssuances(bool _allowAllWhitelistIssuances);\n    // Emit when there is change in the flag variable called allowAllBurnTransfers\n    event AllowAllBurnTransfers(bool _allowAllBurnTransfers);\n    // Emit when there is change in the flag variable called signingAddress\n    event ChangeSigningAddress(address _signingAddress);\n    // Emit when investor details get modified related to their whitelisting\n    event ModifyWhitelist(\n        address _investor,\n        uint256 _dateAdded,\n        address _addedBy,\n        uint256 _fromTime,\n        uint256 _toTime,\n        uint256 _expiryTime,\n        bool _canBuyFromSTO\n    );\n\n    /**\n     * @notice Constructor\n     * @param _securityToken Address of the security token\n     * @param _polyAddress Address of the polytoken\n     */\n    constructor (address _securityToken, address _polyAddress)\n    public\n    Module(_securityToken, _polyAddress)\n    {\n    }\n\n    /**\n     * @notice This function returns the signature of configure function\n     */\n    function getInitFunction() public pure returns (bytes4) {\n        return bytes4(0);\n    }\n\n    /**\n     * @notice Used to change the Issuance Address\n     * @param _issuanceAddress new address for the issuance\n     */\n    function changeIssuanceAddress(address _issuanceAddress) public withPerm(FLAGS) {\n        issuanceAddress = _issuanceAddress;\n        emit ChangeIssuanceAddress(_issuanceAddress);\n    }\n\n    /**\n     * @notice Used to change the Sigining Address\n     * @param _signingAddress new address for the signing\n     */\n    function changeSigningAddress(address _signingAddress) public withPerm(FLAGS) {\n        signingAddress = _signingAddress;\n        emit ChangeSigningAddress(_signingAddress);\n    }\n\n    /**\n     * @notice Used to change the flag\n            true - It refers there are no transfer restrictions, for any addresses\n            false - It refers transfers are restricted for all addresses.\n     * @param _allowAllTransfers flag value\n     */\n    function changeAllowAllTransfers(bool _allowAllTransfers) public withPerm(FLAGS) {\n        allowAllTransfers = _allowAllTransfers;\n        emit AllowAllTransfers(_allowAllTransfers);\n    }\n\n    /**\n     * @notice Used to change the flag\n            true - It refers that time lock is ignored for transfers (address must still be on whitelist)\n            false - It refers transfers are restricted for all addresses.\n     * @param _allowAllWhitelistTransfers flag value\n     */\n    function changeAllowAllWhitelistTransfers(bool _allowAllWhitelistTransfers) public withPerm(FLAGS) {\n        allowAllWhitelistTransfers = _allowAllWhitelistTransfers;\n        emit AllowAllWhitelistTransfers(_allowAllWhitelistTransfers);\n    }\n\n    /**\n     * @notice Used to change the flag\n            true - It refers that time lock is ignored for issuances (address must still be on whitelist)\n            false - It refers transfers are restricted for all addresses.\n     * @param _allowAllWhitelistIssuances flag value\n     */\n    function changeAllowAllWhitelistIssuances(bool _allowAllWhitelistIssuances) public withPerm(FLAGS) {\n        allowAllWhitelistIssuances = _allowAllWhitelistIssuances;\n        emit AllowAllWhitelistIssuances(_allowAllWhitelistIssuances);\n    }\n\n    /**\n     * @notice Used to change the flag\n            true - It allow to burn the tokens\n            false - It deactivate the burning mechanism.\n     * @param _allowAllBurnTransfers flag value\n     */\n    function changeAllowAllBurnTransfers(bool _allowAllBurnTransfers) public withPerm(FLAGS) {\n        allowAllBurnTransfers = _allowAllBurnTransfers;\n        emit AllowAllBurnTransfers(_allowAllBurnTransfers);\n    }\n\n    /**\n     * @notice Default implementation of verifyTransfer used by SecurityToken\n     * If the transfer request comes from the STO, it only checks that the investor is in the whitelist\n     * If the transfer request comes from a token holder, it checks that:\n     * a) Both are on the whitelist\n     * b) Seller's sale lockup period is over\n     * c) Buyer's purchase lockup is over\n     * @param _from Address of the sender\n     * @param _to Address of the receiver\n    */\n    function verifyTransfer(address _from, address _to, uint256 /*_amount*/, bytes /* _data */, bool /* _isTransfer */) public returns(Result) {\n        if (!paused) {\n            if (allowAllTransfers) {\n                //All transfers allowed, regardless of whitelist\n                return Result.VALID;\n            }\n            if (allowAllBurnTransfers && (_to == address(0))) {\n                return Result.VALID;\n            }\n            if (allowAllWhitelistTransfers) {\n                //Anyone on the whitelist can transfer, regardless of time\n                return (_onWhitelist(_to) && _onWhitelist(_from)) ? Result.VALID : Result.NA;\n            }\n            if (allowAllWhitelistIssuances && _from == issuanceAddress) {\n                if (!whitelist[_to].canBuyFromSTO && _isSTOAttached()) {\n                    return Result.NA;\n                }\n                return _onWhitelist(_to) ? Result.VALID : Result.NA;\n            }\n            //Anyone on the whitelist can transfer provided the blocknumber is large enough\n            /*solium-disable-next-line security/no-block-members*/\n            return ((_onWhitelist(_from) && whitelist[_from].fromTime <= now) &&\n                (_onWhitelist(_to) && whitelist[_to].toTime <= now)) ? Result.VALID : Result.NA; /*solium-disable-line security/no-block-members*/\n        }\n        return Result.NA;\n    }\n\n    /**\n    * @notice Adds or removes addresses from the whitelist.\n    * @param _investor is the address to whitelist\n    * @param _fromTime is the moment when the sale lockup period ends and the investor can freely sell his tokens\n    * @param _toTime is the moment when the purchase lockup period ends and the investor can freely purchase tokens from others\n    * @param _expiryTime is the moment till investors KYC will be validated. After that investor need to do re-KYC\n    * @param _canBuyFromSTO is used to know whether the investor is restricted investor or not.\n    */\n    function modifyWhitelist(\n        address _investor,\n        uint256 _fromTime,\n        uint256 _toTime,\n        uint256 _expiryTime,\n        bool _canBuyFromSTO\n    )\n        public\n        withPerm(WHITELIST)\n    {\n        //Passing a _time == 0 into this function, is equivalent to removing the _investor from the whitelist\n        whitelist[_investor] = TimeRestriction(_fromTime, _toTime, _expiryTime, _canBuyFromSTO);\n        /*solium-disable-next-line security/no-block-members*/\n        emit ModifyWhitelist(_investor, now, msg.sender, _fromTime, _toTime, _expiryTime, _canBuyFromSTO);\n    }\n\n    /**\n    * @notice Adds or removes addresses from the whitelist.\n    * @param _investors List of the addresses to whitelist\n    * @param _fromTimes An array of the moment when the sale lockup period ends and the investor can freely sell his tokens\n    * @param _toTimes An array of the moment when the purchase lockup period ends and the investor can freely purchase tokens from others\n    * @param _expiryTimes An array of the moment till investors KYC will be validated. After that investor need to do re-KYC\n    * @param _canBuyFromSTO An array of boolean values\n    */\n    function modifyWhitelistMulti(\n        address[] _investors,\n        uint256[] _fromTimes,\n        uint256[] _toTimes,\n        uint256[] _expiryTimes,\n        bool[] _canBuyFromSTO\n    ) public withPerm(WHITELIST) {\n        require(_investors.length == _fromTimes.length, \"Mismatched input lengths\");\n        require(_fromTimes.length == _toTimes.length, \"Mismatched input lengths\");\n        require(_toTimes.length == _expiryTimes.length, \"Mismatched input lengths\");\n        require(_canBuyFromSTO.length == _toTimes.length, \"Mismatched input length\");\n        for (uint256 i = 0; i < _investors.length; i++) {\n            modifyWhitelist(_investors[i], _fromTimes[i], _toTimes[i], _expiryTimes[i], _canBuyFromSTO[i]);\n        }\n    }\n\n    /**\n    * @notice Adds or removes addresses from the whitelist - can be called by anyone with a valid signature\n    * @param _investor is the address to whitelist\n    * @param _fromTime is the moment when the sale lockup period ends and the investor can freely sell his tokens\n    * @param _toTime is the moment when the purchase lockup period ends and the investor can freely purchase tokens from others\n    * @param _expiryTime is the moment till investors KYC will be validated. After that investor need to do re-KYC\n    * @param _canBuyFromSTO is used to know whether the investor is restricted investor or not.\n    * @param _validFrom is the time that this signature is valid from\n    * @param _validTo is the time that this signature is valid until\n    * @param _nonce nonce of signature (avoid replay attack)\n    * @param _v issuer signature\n    * @param _r issuer signature\n    * @param _s issuer signature\n    */\n    function modifyWhitelistSigned(\n        address _investor,\n        uint256 _fromTime,\n        uint256 _toTime,\n        uint256 _expiryTime,\n        bool _canBuyFromSTO,\n        uint256 _validFrom,\n        uint256 _validTo,\n        uint256 _nonce,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public {\n        /*solium-disable-next-line security/no-block-members*/\n        require(_validFrom <= now, \"ValidFrom is too early\");\n        /*solium-disable-next-line security/no-block-members*/\n        require(_validTo >= now, \"ValidTo is too late\");\n        require(!nonceMap[_investor][_nonce], \"Already used signature\");\n        nonceMap[_investor][_nonce] = true;\n        bytes32 hash = keccak256(\n            abi.encodePacked(this, _investor, _fromTime, _toTime, _expiryTime, _canBuyFromSTO, _validFrom, _validTo, _nonce)\n        );\n        _checkSig(hash, _v, _r, _s);\n        //Passing a _time == 0 into this function, is equivalent to removing the _investor from the whitelist\n        whitelist[_investor] = TimeRestriction(_fromTime, _toTime, _expiryTime, _canBuyFromSTO);\n        /*solium-disable-next-line security/no-block-members*/\n        emit ModifyWhitelist(_investor, now, msg.sender, _fromTime, _toTime, _expiryTime, _canBuyFromSTO);\n    }\n\n    /**\n     * @notice Used to verify the signature\n     */\n    function _checkSig(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal view {\n        //Check that the signature is valid\n        //sig should be signing - _investor, _fromTime, _toTime & _expiryTime and be signed by the issuer address\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _v, _r, _s);\n        require(signer == Ownable(securityToken).owner() || signer == signingAddress, \"Incorrect signer\");\n    }\n\n    /**\n     * @notice Internal function used to check whether the investor is in the whitelist or not\n            & also checks whether the KYC of investor get expired or not\n     * @param _investor Address of the investor\n     */\n    function _onWhitelist(address _investor) internal view returns(bool) {\n        return (((whitelist[_investor].fromTime != 0) || (whitelist[_investor].toTime != 0)) &&\n            (whitelist[_investor].expiryTime >= now)); /*solium-disable-line security/no-block-members*/\n    }\n\n    /**\n     * @notice Internal function use to know whether the STO is attached or not\n     */\n    function _isSTOAttached() internal view returns(bool) {\n        bool attached = ISecurityToken(securityToken).getModulesByType(3).length > 0;\n        return attached;\n    }\n\n    /**\n     * @notice Return the permissions flag that are associated with general trnasfer manager\n     */\n    function getPermissions() public view returns(bytes32[]) {\n        bytes32[] memory allPermissions = new bytes32[](2);\n        allPermissions[0] = WHITELIST;\n        allPermissions[1] = FLAGS;\n        return allPermissions;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_fromTimes\",\"type\":\"uint256[]\"},{\"name\":\"_toTimes\",\"type\":\"uint256[]\"},{\"name\":\"_expiryTimes\",\"type\":\"uint256[]\"},{\"name\":\"_canBuyFromSTO\",\"type\":\"bool[]\"}],\"name\":\"modifyWhitelistMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowAllBurnTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowAllWhitelistTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowAllTransfers\",\"type\":\"bool\"}],\"name\":\"changeAllowAllTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signingAddress\",\"type\":\"address\"}],\"name\":\"changeSigningAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowAllWhitelistIssuances\",\"type\":\"bool\"}],\"name\":\"changeAllowAllWhitelistIssuances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowAllWhitelistTransfers\",\"type\":\"bool\"}],\"name\":\"changeAllowAllWhitelistTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAGS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"fromTime\",\"type\":\"uint256\"},{\"name\":\"toTime\",\"type\":\"uint256\"},{\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"name\":\"canBuyFromSTO\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowAllTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"name\":\"_toTime\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_canBuyFromSTO\",\"type\":\"bool\"}],\"name\":\"modifyWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issuanceAddress\",\"type\":\"address\"}],\"name\":\"changeIssuanceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowAllWhitelistIssuances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowAllBurnTransfers\",\"type\":\"bool\"}],\"name\":\"changeAllowAllBurnTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"name\":\"_toTime\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_canBuyFromSTO\",\"type\":\"bool\"},{\"name\":\"_validFrom\",\"type\":\"uint256\"},{\"name\":\"_validTo\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"modifyWhitelistSigned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_securityToken\",\"type\":\"address\"},{\"name\":\"_polyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_issuanceAddress\",\"type\":\"address\"}],\"name\":\"ChangeIssuanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_allowAllTransfers\",\"type\":\"bool\"}],\"name\":\"AllowAllTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_allowAllWhitelistTransfers\",\"type\":\"bool\"}],\"name\":\"AllowAllWhitelistTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_allowAllWhitelistIssuances\",\"type\":\"bool\"}],\"name\":\"AllowAllWhitelistIssuances\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_allowAllBurnTransfers\",\"type\":\"bool\"}],\"name\":\"AllowAllBurnTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_signingAddress\",\"type\":\"address\"}],\"name\":\"ChangeSigningAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_dateAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_addedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_canBuyFromSTO\",\"type\":\"bool\"}],\"name\":\"ModifyWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestammp\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000cf5b6b12a97dc4111663eea9d66e552812943b880000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec"
}