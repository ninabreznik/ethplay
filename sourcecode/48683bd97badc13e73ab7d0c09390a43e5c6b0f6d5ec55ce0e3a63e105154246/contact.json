{
  "address": "0xcceed0b7185fbe7f69c083a6c0f6ff5910548d75",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Game365",
  "contractName": "Game365Meta",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-19\n*/\n\npragma solidity <= 0.6;\n\ncontract Game365Meta {\n\n    /*\n        set constants\n    */\n    uint constant HOUSE_EDGE_PERCENT = 1;\n    uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; \n\n    // Chance to win jackpot (currently 0.1%) and fee deducted into jackpot fund.\n    uint public constant MIN_JACKPOT_BET = 0.1 ether;\n    uint public constant JACKPOT_MODULO = 1000; \n    uint constant JACKPOT_FEE = 0.001 ether; \n    // There is minimum and maximum bets.\n    uint public constant MIN_BET = 0.01 ether;\n    uint constant MAX_AMOUNT = 300000 ether; \n    \n    // Modulo is a number of equiprobable outcomes in a game:\n    //  - 2 for coin flip\n    //  - 6 for dice\n    //  - 6*6 = 36 for double dice\n    //  - 100 for etheroll\n    //  etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    uint constant MAX_MODULO = 100;\n    uint constant MAX_MASK_MODULO = 40;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\n    // past. Given that settleBet uses block hash of placeBet as one of\n    // complementary entropy sources, we cannot process bets older than this\n    // threshold. On rare occasions our croupier may fail to invoke\n    // settleBet in this timespan due to technical issues or extreme Ethereum\n    // congestion; such bets can be refunded via invoking refundBet.\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F; // decimal:63, binary:111111\n    \n    // Owner setting\n    address payable public owner = address(0x0);\n\n    // Croupier account.\n    address public croupier = address(0x0);\n\n    // The address corresponding to a private key used to sign placeBet commits.\n    address public secretSigner = address(0x0);\n\n    // Adjustable max bet profit and start winning the jackpot. Used to cap bets against dynamic odds.\n    uint public maxProfit = 5 ether;\n    uint public minJackpotWinAmount = 0.1 ether;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint256 public lockedInBets_;\n    uint256 public lockedInJackpot_;\n\n    struct Bet {\n        // Wager amount in wei.\n        uint128 amount;\n        // Modulo of a game.\n        uint8 modulo;\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 rollUnder;\n        // Block number of placeBet tx.\n        uint40 placeBlockNumber;\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint40 mask;\n        // Address of a gambler, used to pay out winning bets.\n        address payable gambler;\n    }\n    mapping(uint256 => Bet) bets;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(uint256 indexed commit, address indexed beneficiary, uint amount, uint jackpotAmount);\n    event Payment(uint256 indexed commit, address indexed beneficiary, uint amount, uint jackpotAmount);\n    event JackpotPayment(address indexed beneficiary, uint amount);\n    event Commit(uint256 indexed commit, uint256 possibleWinAmount);\n    \n    /**\n        Constructor\n     */\n    constructor () \n        public\n    {\n        owner = msg.sender;\n    }\n\n    /**\n        Modifier\n    */\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n    \n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n        require (msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    // Change the croupier address.\n    function setCroupier(address newCroupier) external onlyOwner {\n        croupier = newCroupier;\n    }\n\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\n        require (_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    function setMinJackPotWinAmount(uint _minJackpotAmount) public onlyOwner {\n        minJackpotWinAmount = _minJackpotAmount;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require (increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (lockedInJackpot_ + lockedInBets_ + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        lockedInJackpot_ += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of our operation.\n    function withdrawFunds(address payable beneficiary, uint withdrawAmount) external onlyOwner {\n        require (withdrawAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (lockedInJackpot_ + lockedInBets_ + withdrawAmount <= address(this).balance, \"Not enough funds.\");\n        sendFunds(1, beneficiary, withdrawAmount, 0);\n    }\n    \n    // Contract may be destroyed only when there are no ongoing bets,\n    // either settled or refunded. All funds are transferred to contract owner.\n    function kill() external onlyOwner {\n        require (lockedInBets_ == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        selfdestruct(owner);\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function () external payable {\n    }\n    \n    function placeBet(uint256 betMask, uint256 modulo, uint256 commitLastBlock, uint256 commit, bytes32 r, bytes32 s) \n        external\n        payable \n    {\n        Bet storage bet = bets[commit];\n        require(bet.gambler == address(0), \"already betting same commit number\");\n\n        uint256 amount = msg.value;\n        require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require (amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        require (block.number <= commitLastBlock, \"Commit has expired.\");\n\n        //@DEV It will be changed later.\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, commit));\n        require (secretSigner == ecrecover(prefixedHash, 28, r, s), \"ECDSA signature is not valid.\");\n\n        // Winning amount and jackpot increase.\n        uint rollUnder;\n        \n        // Small modulo games specify bet outcomes via bit mask.\n        // rollUnder is a number of 1 bits in this mask (population count).\n        // This magical looking formula is an efficient way to compute population\n        // count on EVM for numbers below 2**40. For detailed proof consult\n        // the our whitepaper.\n        if(modulo <= MAX_MASK_MODULO){\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            // mask = betMask;  //Stack too deep, try removing local variables.\n        }else{\n            require (betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        }\n\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = getGameWinAmount(amount, modulo, rollUnder);\n\n        // Enforce max profit limit.\n        require (possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation.\");\n\n        // Lock funds.\n        lockedInBets_ += uint128(possibleWinAmount);\n        lockedInJackpot_ += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require (lockedInJackpot_ + lockedInBets_ <= address(this).balance, \"Cannot afford to lose this bet.\");\n        \n        // Record commit in logs.\n        emit Commit(commit, possibleWinAmount);\n\n        bet.amount = uint128(amount);\n        bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(rollUnder);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint40(betMask);\n        bet.gambler = msg.sender;\n    }\n    \n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require (block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require (blockhash(placeBlockNumber) == blockHash, \"Does not matched blockHash.\");\n\n        // Settle bet using reveal and blockhash as entropy sources.\n        settleBetCommon(bet, reveal, blockHash);\n    }\n\n    // Common settlement code for settleBet.\n    function settleBetCommon(Bet storage bet, uint reveal, bytes32 entropyBlockHash) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n        uint amount = bet.amount;\n        uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address payable gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n        \n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint game = uint(entropy) % modulo;\n\n        uint gameWinAmount;\n        uint _jackpotFee;\n        (gameWinAmount, _jackpotFee) = getGameWinAmount(amount, modulo, rollUnder);\n\n        uint gameWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine game outcome.\n        if (modulo <= MAX_MASK_MODULO) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** game) & bet.mask != 0) {\n                gameWin = gameWinAmount;\n            }\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (game < rollUnder) {\n                gameWin = gameWinAmount;\n            }\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets_ -= uint128(gameWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET && lockedInJackpot_ >= minJackpotWinAmount) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = lockedInJackpot_;\n                lockedInJackpot_ = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin);\n        }\n\n        // Send the funds to gambler.\n        sendFunds(commit, gambler, gameWin, jackpotWin);\n    }\n\n    function getGameWinAmount(uint amount, uint modulo, uint rollUnder) private pure returns (uint winAmount, uint jackpotFee) {\n        require (0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_PERCENT / 100;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require (houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder;\n    }\n    \n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\n    // BET_EXPIRATION_BLOCKS comment above for details). In case you ever find yourself\n    // in a situation like this, just contact the our support, however nothing\n    // precludes you from invoking this method yourself.\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require (block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n        \n        uint gameWinAmount;\n        uint jackpotFee;\n        (gameWinAmount, jackpotFee) = getGameWinAmount(amount, bet.modulo, bet.rollUnder);\n\n        lockedInBets_ -= uint128(gameWinAmount);\n        lockedInJackpot_ -= uint128(jackpotFee);\n\n        // Send the refund.\n        sendFunds(commit, bet.gambler, amount, 0);\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(uint commit, address payable beneficiary, uint gameWin, uint jackpotWin) private {\n        uint amount = gameWin + jackpotWin == 0 ? 1 wei : gameWin + jackpotWin;\n        uint successLogAmount = gameWin;\n\n        if (beneficiary.send(amount)) {\n            emit Payment(commit, beneficiary, successLogAmount, jackpotWin);\n        } else {\n            emit FailedPayment(commit, beneficiary, amount, 0);\n        }\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_MODULO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_JACKPOT_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minJackpotAmount\",\"type\":\"uint256\"}],\"name\":\"setMinJackPotWinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInJackpot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJackpotWinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reveal\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInBets_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotAmount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotAmount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"possibleWinAmount\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"}]",
  "bytecode": ""
}