{
  "address": "0x2d2789067e458f5299efa2af1beadc065fd31b81",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ldoh",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-28\n*/\n\npragma solidity ^0.4.25;\n\n/**\n\n\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n\n**/\n\n\t/*==============================\n    =          Version 9.2       =\n    ==============================*/\n\t\ncontract EthereumSmartContract {    \n    address EthereumNodes; \n\t\n    constructor() public { \n        EthereumNodes = msg.sender;\n    }\n    modifier restricted() {\n        require(msg.sender == EthereumNodes);\n        _;\n    } \n\t\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\n}\n\ncontract ldoh is EthereumSmartContract {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n\tevent onUnlocktoken\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n\tevent onReceiveAirdrop\t(address indexed hodler, uint256 amount, uint256 datetime);\t\t\n\t\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t//-------o Hold 24 Months, Unlock 3% Permonth\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// [01] -- > Registration Number\n        uint256 amount;\t\t\t\t\t// [02] -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// [03] -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// [04] -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// [05] -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// [06] -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// [07] -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// [08] -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// [09] -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// [10] -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// [11] -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// [12] -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// [13] -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// [14] -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// [15] -- > Cashback Status\n    }\n\t\n\t\n\tuint256 public nowtime; //Change before deploy\n\tuint256 public Burnstatus; \n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// [01] -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// [02] -- > Total Smart Contract User\t\t\t\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// [03] -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// [04] -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// [05] -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// [06] -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// [07] -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// [08] -- > Contract Address \t\t\n\n\tmapping (address => mapping (uint256 => uint256)) public Bigdata; \n\t\n/** Bigdata Mapping : \n[1] Percent (Monthly Unlocked tokens)\t\t[7] All Payments \t\t\t\t[13] Total TX Affiliate (Withdraw) \t\n[2] Holding Time (in seconds) \t\t\t\t[8] Active User \t\t\t\t[14] Current Price (USD)\t\n[3] Token Balance \t\t\t\t\t\t\t[9] Total User \t\t\t\t\t[15] ATH Price (USD)\n[4] Min Contribution \t\t\t\t\t\t[10] Total TX Hold \t\t\t\t[16] ATL Price (USD)\t\t\t\n[5] Max Contribution \t\t\t\t\t\t[11] Total TX Unlock \t\t\t[17] Current ETH Price (ETH) \t\t\n[6] All Contribution \t\t\t\t\t\t[12] Total TX Airdrop\t\t\t[18] Date Register\t\t\t\t\n**/\n\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n// Statistics = [1] LifetimeContribution [2] LifetimePayments [3] Affiliatevault [4] Affiliateprofit [5] ActiveContribution\n\t\n// Airdrop - Hold Platform (HOLD)\t\t\n\taddress public Holdplatform_address;\t\t\t\t\t\t\t\t\t\t\t// [01]\n\tuint256 public Holdplatform_balance; \t\t\t\t\t\t\t\t\t\t\t// [02]\n\tmapping(address => uint256) public Holdplatform_status;\t\t\t\t\t\t\t// [03]\n\tmapping(address => mapping (uint256 => uint256)) public Holdplatform_divider; \n// Holdplatform_divider = [1] Lock Airdrop\t[2] Unlock Airdrop\t[3] Affiliate Airdrop\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n    function () public payable {  \n\t\tif (msg.value == 0) {\n\t\t\ttothe_moon();\n\t\t} else { revert(); }\n    }\n    function tothemoon() public payable {  \n\t\tif (msg.value == 0) {\n\t\t\ttothe_moon();\n\t\t} else { revert(); }\n    }\n\tfunction tothe_moon() private {  \n\t\tfor(uint256 i = 1; i < idnumber; i++) {            \n\t\tSafe storage s = _safes[i];\n\t\t\n\t\t\t// Send all unlocked tokens\n\t\t\tif (s.user == msg.sender) {\n\t\t\tUnlocktoken(s.tokenAddress, s.id);\n\t\t\t\n\n\t\t\t}\n\t\t}\n    }\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 && Bigdata[_cashbackcode][8] == 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n\t\trequire(amount >= 1 );\n\t\tuint256 holdamount\t= add(Statistics[msg.sender][tokenAddress][5], amount);\n\t\t\n\t\trequire(holdamount <= Bigdata[tokenAddress][5] );\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 ) { \n\t\t\tcashbackcode[msg.sender] \t= EthereumNodes;\n\t\t} \n\t\t\n\t\tif (Bigdata[msg.sender][18] == 0) { \n\t\t\tBigdata[msg.sender][18] = now;\n\t\t} \n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);\n\t\tAirdrop(tokenAddress, amount, 1);\n\t\t}\t\t\t\t\t\t\t\n\t}\n\t\n\t//--o 02\t\n    function HodlTokens2(address ERC, uint256 amount) private {\n\t\t\n\t\taddress ref\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\taddress ref2\t\t\t\t\t= EthereumNodes;\n\t\tuint256 ReferrerContribution \t= Statistics[ref][ERC][5];\t\n\t\tuint256 ReferralContribution \t= Statistics[msg.sender][ERC][5];\n\t\tuint256 MyContribution \t\t\t= add(ReferralContribution, amount); \n\t\t\n\t  \tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) { \n\t\t\tuint256 nodecomission \t\t= div(mul(amount, 28), 100);\n\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], nodecomission ); \n\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], nodecomission );\t\t\n\t\t\t\n\t\t} else { \n\t\t\n// Very complicated code, need to be checked carefully!\t\t\n\n\t\t\tuint256 affcomission \t= div(mul(amount, 12), 100); \n\t\t\t\n\t\t\tif (ReferrerContribution >= MyContribution) { //--o  if referrer contribution >= My contribution\n\n\t\t\t\tStatistics[ref][ERC][3] \t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t= add(Statistics[ref][ERC][4], affcomission); \n\n\t\t\t} else {\n\t\t\t\t\tif (ReferrerContribution > ReferralContribution  ) { \t\n\t\t\t\t\t\tif (amount <= add(ReferrerContribution,ReferralContribution)  ) { \n\t\t\t\t\t\t\n\t\t\t\t\t\tuint256 AAA\t\t\t\t= sub(ReferrerContribution, ReferralContribution );\n\t\t\t\t\t\tuint256 affcomission2\t= div(mul(AAA, 12), 100); \n\t\t\t\t\t\tuint256 affcomission3\t= sub(affcomission, affcomission2);\t\t\n\t\t\t\t\t\t} else {\t\n\t\t\t\t\t\tuint256 BBB\t\t\t\t= sub(sub(amount, ReferrerContribution), ReferralContribution);\n\t\t\t\t\t\taffcomission3\t\t\t= div(mul(BBB, 12), 100); \n\t\t\t\t\t\taffcomission2\t\t\t= sub(affcomission, affcomission3); } \n\t\t\t\t\t\t\n\t\t\t\t\t} else { affcomission2\t= 0; \taffcomission3\t= affcomission; } \n// end //\t\t\t\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t= add(Statistics[ref][ERC][3], affcomission2); \n\t\t\t\tStatistics[ref][ERC][4] \t\t= add(Statistics[ref][ERC][4], affcomission2); \t\n\t\n\t\t\t\tStatistics[ref2][ERC][3] \t\t= add(Statistics[ref2][ERC][3], affcomission3); \n\t\t\t\tStatistics[ref2][ERC][4] \t\t= add(Statistics[ref2][ERC][4], affcomission3);\t\n\t\t\t}\t\n\t\t}\n\n\t\tHodlTokens3(ERC, amount, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens3(address ERC, uint256 amount, address ref) private {\n\t    \n\t\tuint256 AvailableBalances \t\t= div(mul(amount, 72), 100);\n\t\t\n\t\tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) \n\t\t{ uint256\tAvailableCashback = 0; } else { AvailableCashback = div(mul(amount, 16), 100);}\n\t\t\n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= Bigdata[ERC][1];\t\n\t\tuint256 TokenHodlTime \t= Bigdata[ERC][2];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tBigdata[ERC][6] \t\t\t\t\t\t= add(Bigdata[ERC][6], AM);   \t\n        Bigdata[ERC][3]\t\t\t\t\t\t\t= add(Bigdata[ERC][3], AM);  \n\n\t\tif(Bigdata[msg.sender][8] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][10]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][9]++; Bigdata[ERC][10]++; TotalUser++;   }\n\t\t\n\t\tBigdata[msg.sender][8] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\n\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function Unlocktoken(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < nowtime){ //--o  Hold Complete , Now time delete before deploy\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= amounttransfer;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ;\n\n\t\tuint256 sid = s.id;\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes && idaddress[msg.sender][0] == sid ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n\t\tAirdrop(s.tokenAddress, realAmount, 2);   \n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n\t\n        uint256 Burnamount\t\t= div(amount, 100);\n\t\tuint256 Transferamount\t= div(mul(amount, 99), 100);\n\t\t\n\t\tif (Burnstatus == 0) {\n\t\ttoken.transfer(user, amount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 1) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(address(0x0), Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 2) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(0x0, Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 3) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(0x0000000000000000000000000000000000000000, Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 4) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(address(0), Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 5) {\n\t\taddress burnaddress\t\t= 0x0000000000000000000000000000000000000000;\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(burnaddress, Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 6) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(0, Burnamount);\n\t\t}\n\t\t\n\t\tif (Burnstatus == 7) {\n\t\ttoken.transfer(user, Transferamount);\n\t\ttoken.transfer(0xd7Ad056944E6533C41F457Bbbc457c76a28db443, Burnamount);\n\t\t}\n\t\t\n\t\tBigdata[tokenAddress][3]\t\t\t\t\t= sub(Bigdata[tokenAddress][3], amount); \n\t\tBigdata[tokenAddress][7]\t\t\t\t\t= add(Bigdata[tokenAddress][7], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tBigdata[tokenAddress][11]++;\n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount, uint256 divfrom) private {\n\t\t\n\t\tuint256 divider\t\t\t= Holdplatform_divider[tokenAddress][divfrom];\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == 1) {\n\t\t\t\n\t\t\tif (Holdplatform_balance > 0 && divider > 0) {\n\t\t\n\t\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\t\taddress airdropaddress\t= Holdplatform_address;\n\t\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n\t\t\ttoken.transfer(msg.sender, airdrop);\n\t\t\n\t\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\t\tBigdata[tokenAddress][12]++;\n\t\t\n\t\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t\t}\n\t\t\t\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 Burn_status) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\trequire(_maxcontribution >= 10000000000000000000000000);\n\t\t\n\t\tBurnstatus \t\t\t\t\t\t= Burn_status;\t\n\t\tBigdata[tokenAddress][1] \t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tBigdata[tokenAddress][5] \t\t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\tBigdata[tokenAddress][2]\t\t= HodlTime;\t\n\t\t\n\t\tcontractaddress[tokenAddress] \t= true;\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice, uint256 ETHprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { Bigdata[tokenAddress][14] = Currentprice; }\n\t\tif (ATHprice > 0  ) \t{ Bigdata[tokenAddress][15] = ATHprice; }\n\t\tif (ATLprice > 0  ) \t{ Bigdata[tokenAddress][16] = ATLprice; }\n\t\tif (ETHprice > 0  ) \t{ Bigdata[tokenAddress][17] = ETHprice; }\n\n    }\n\t\n\n\t\n//-------o Only test\n    function updatenowtime(uint256 _nowtime) public restricted {\n\t\tnowtime \t= _nowtime;\t\n    }\t\n\t\n\tfunction updateburn(uint256 Burn_status) public restricted {\n\n\t\tBurnstatus \t\t\t\t\t\t= Burn_status;\t\n    }\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bigdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Burn_status\",\"type\":\"uint256\"}],\"name\":\"updateburn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Burnstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unlocktoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"Currentprice\",\"type\":\"uint256\"},{\"name\":\"ATHprice\",\"type\":\"uint256\"},{\"name\":\"ATLprice\",\"type\":\"uint256\"},{\"name\":\"ETHprice\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"name\":\"Burn_status\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nowtime\",\"type\":\"uint256\"}],\"name\":\"updatenowtime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tothemoon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_divider\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUnlocktoken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onReceiveAirdrop\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f46003819055507323badee11bf49c40669e9b09035f048e9146213e600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615a3f80620000bf6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a2dd261461017157806311d2c211146101c85780631d1f7578146102845780631ea9e351146102e557806327a02110146103125780632adb1b24146103935780632ea57923146103be57806331b78a921461040b57806347f849cd146104625780634b698aff146105ad5780634d6ac6a11461060e5780634eeaa2121461065b57806356b71f71146106b65780635df1539c146107395780636ad952301461077c5780637028b6a3146107e757806376b1459d1461087457806386c425fc1461091b5780638adf5db514610948578063900771031461095257806395006c301461097d578063d9d61a10146109d4578063daca166314610a2b578063ec80571b14610a56578063f2c8a32714610aad578063f443629314610ad8575b600034141561016a57610165610b39565b61016f565b600080fd5b005b34801561017d57600080fd5b506101b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bfc565b6040518082815260200191505060405180910390f35b3480156101d457600080fd5b50610209600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c48565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024957808201518184015260208101905061022e565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029057600080fd5b506102cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf8565b6040518082815260200191505060405180910390f35b3480156102f157600080fd5b5061031060048036038101908080359060200190929190505050610d1d565b005b34801561031e57600080fd5b5061037d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d82565b6040518082815260200191505060405180910390f35b34801561039f57600080fd5b506103a8610db4565b6040518082815260200191505060405180910390f35b3480156103ca57600080fd5b50610409600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dba565b005b34801561041757600080fd5b50610420610ee3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046e57600080fd5b5061048d60048036038101908080359060200190929190505050610f0c565b604051808d81526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a815260200189815260200180602001888152602001878152602001868152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b8381101561056757808201518184015260208101905061054c565b50505050905090810190601f1680156105945780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b3480156105b957600080fd5b506105f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611075565b6040518082815260200191505060405180910390f35b34801561061a57600080fd5b50610659600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110a5565b005b34801561066757600080fd5b5061069c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611531565b604051808215151515815260200191505060405180910390f35b3480156106c257600080fd5b506106f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611551565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074557600080fd5b5061077a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611584565b005b34801561078857600080fd5b506107e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611850565b005b3480156107f357600080fd5b50610832600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088057600080fd5b50610919600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611a7f565b005b34801561092757600080fd5b5061094660048036038101908080359060200190929190505050611cf7565b005b610950611d5c565b005b34801561095e57600080fd5b50610967611d79565b6040518082815260200191505060405180910390f35b34801561098957600080fd5b50610992611d7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109e057600080fd5b50610a15600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611da5565b6040518082815260200191505060405180910390f35b348015610a3757600080fd5b50610a40611df1565b6040518082815260200191505060405180910390f35b348015610a6257600080fd5b50610a97600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df7565b6040518082815260200191505060405180910390f35b348015610ab957600080fd5b50610ac2611e0f565b6040518082815260200191505060405180910390f35b348015610ae457600080fd5b50610b23600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e15565b6040518082815260200191505060405180910390f35b600080600191505b600354821015610bf8576009600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610beb57610bea8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260000154610dba565b5b8180600101925050610b41565b5050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60086020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cf05780601f10610cc557610100808354040283529160200191610cf0565b820191906000526020600020905b815481529060010190602001808311610cd357829003601f168201915b505050505081565b600b602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7857600080fd5b8060028190555050565b600c60205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b60025481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610de157600080fd5b60008214151515610df157600080fd5b6009600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610e6457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ec257600080fd5b600081600601541415610ed457600080fd5b610ede8383611e3a565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080600060606000806000806000806000600960008f8152602001908152602001600020905080600001548160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836001015484600201548560050186600601548760070154886008015489600901548a600a01548b600b0154868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110465780601f1061101b57610100808354040283529160200191611046565b820191906000526020600020905b81548152906001019060200180831161102957829003601f168201915b505050505096509c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b60066020528160005260406000208181548110151561109057fe5b90600052602060002001600091509150505481565b600080600183101515156110b857600080fd5b611150600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020548461236b565b9150600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600581526020019081526020016000205482111515156111b257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112e6576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601281526020019081526020016000205414156113975742600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060128152602001908152602001600020819055505b60001515600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156113f557600080fd5b8390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050506040513d60208110156114f957600080fd5b8101908080519060200190929190505050151561151557600080fd5b61151f848461238c565b61152b84846001613044565b50505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156116ab57506001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008815260200190815260200160002054145b156117335780600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506117d3565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b3373ffffffffffffffffffffffffffffffffffffffff167f3bf019f5f0b17480693601e318eb6120c1eac4732d3b7b3a006c5024f9dd69bd82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ab57600080fd5b600084111561190b5783600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e8152602001908152602001600020819055505b600083111561196b5782600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600f8152602001908152602001600020819055505b60008211156119cb5781600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060108152602001908152602001600020819055505b6000811115611a2b5780600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060118152602001908152602001600020819055505b5050505050565b600760205281600052604060002081815481101515611a4d57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611adf57600080fd5b84925060038310158015611af45750600c8311155b1515611aff57600080fd5b6a084595161401484a0000008710151515611b1957600080fd5b8360028190555082600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600181526020019081526020016000208190555085600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611bc99291906158ee565b5086600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002081905550611c35611c2e6048856132e3565b601e61330d565b9150620151808202905080600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028152602001908152602001600020819055506001600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d5257600080fd5b8060018190555050565b6000341415611d7257611d6d610b39565b611d77565b600080fd5b565b600e5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60045481565b600f6020528060005260406000206000915090505481565b60015481565b6010602052816000526040600020602052806000526040600020600091509150505481565b6000806000606060006009600087815260200190815260200160002094506000856000015414151515611e6c57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff168560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611eca57600080fd5b846006015493508460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250846005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f905780601f10611f6557610100808354040283529160200191611f90565b820191906000526020600020905b815481529060010190602001808311611f7357829003601f168201915b505050505091506001548560020154101561235357611fb78560060154866007015461236b565b905061209d600c60008760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002054866001015461334b565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020819055508085600c01819055506000856006018190555042856008018190555061219e8560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361336c565b600085600701541180156121c757506000151585600d0160149054906101000a900460ff161515145b806121e757506001151585600d0160149054906101000a900460ff161515145b1561222d576122056121fe8660010154605861330d565b60646132e3565b85600b0181905550612220670de0b6b3a7640000605861330d565b85600a018190555061226a565b61224661223f8660010154604861330d565b60646132e3565b85600b0181905550612261670de0b6b3a7640000604861330d565b85600a01819055505b600085600701819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f808c825ca451d8bf9c5cd240397aac35f88ad12825764d352ab3d6c0588804678487426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156123125780820151818401526020810190506122f7565b50505050905090810190601f16801561233f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3612362565b6123618786600001546144d2565b5b50505050505050565b600080828401905083811015151561238257600080fd5b8091505092915050565b6000806000806000806000806000806000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169a506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169950600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020549850600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002054975061254f888d61236b565b96506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161480156125fe57506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008815260200190815260200160002054145b15612873576126186126118d601c61330d565b60646132e3565b95506126b2600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548761236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020819055506127dc600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020548761236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600481526020019081526020016000208190555061302a565b6128886128818d600c61330d565b60646132e3565b94508689101515612aec5761292b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548661236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550612a55600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020548661236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004815260200190815260200160002081905550613029565b87891115612b7857612afe898961236b565b8c111515612b3a57612b10898961334b565b9350612b27612b2085600c61330d565b60646132e3565b9250612b33858461334b565b9150612b73565b612b4d612b478d8b61334b565b8961334b565b9050612b64612b5d82600c61330d565b60646132e3565b9150612b70858361334b565b92505b612b80565b600092508491505b612c18600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548461236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550612d42600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020548461236b565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004815260200190815260200160002081905550612e6c600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548361236b565b600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006003815260200190815260200160002081905550612f96600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020548361236b565b600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048152602001908152602001600020819055505b5b6130358d8d8d614646565b50505050505050505050505050565b600080600080601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205493506001600f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156132da576000600e541180156130f75750600084115b156132d95761310686856132e3565b9250600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156131d357600080fd5b505af11580156131e7573d6000803e3d6000fd5b505050506040513d60208110156131fd57600080fd5b81019080805190602001909291905050505061321b600e548461334b565b600e81905550600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600c8152602001908152602001600020600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff167f93e34edfdcd5ca8f9d8786b9baa823f85e7b7f3981742ae53ceb0bef9aa610f78442604051808381526020018281526020019250505060405180910390a25b5b50505050505050565b6000806000831115156132f557600080fd5b828481151561330057fe5b0490508091505092915050565b60008060008414156133225760009150613344565b828402905082848281151561333357fe5b0414151561334057600080fd5b8091505b5092915050565b60008083831115151561335d57600080fd5b82840390508091505092915050565b600080600080859350848473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561341157600080fd5b505af1158015613425573d6000803e3d6000fd5b505050506040513d602081101561343b57600080fd5b81019080805190602001909291905050501015151561345957600080fd5b6134648560646132e3565b925061347b61347486606361330d565b60646132e3565b915060006002541415613568578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561352b57600080fd5b505af115801561353f573d6000803e3d6000fd5b505050506040513d602081101561355557600080fd5b8101908080519060200190929190505050505b60016002541415613733578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561361657600080fd5b505af115801561362a573d6000803e3d6000fd5b505050506040513d602081101561364057600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156136f657600080fd5b505af115801561370a573d6000803e3d6000fd5b505050506040513d602081101561372057600080fd5b8101908080519060200190929190505050505b6002805414156138e7578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156137e057600080fd5b505af11580156137f4573d6000803e3d6000fd5b505050506040513d602081101561380a57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156138aa57600080fd5b505af11580156138be573d6000803e3d6000fd5b505050506040513d60208110156138d457600080fd5b8101908080519060200190929190505050505b60036002541415613ab2578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561399557600080fd5b505af11580156139a9573d6000803e3d6000fd5b505050506040513d60208110156139bf57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613a7557600080fd5b505af1158015613a89573d6000803e3d6000fd5b505050506040513d6020811015613a9f57600080fd5b8101908080519060200190929190505050505b60046002541415613c7d578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613b6057600080fd5b505af1158015613b74573d6000803e3d6000fd5b505050506040513d6020811015613b8a57600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c4057600080fd5b505af1158015613c54573d6000803e3d6000fd5b505050506040513d6020811015613c6a57600080fd5b8101908080519060200190929190505050505b60056002541415613e4b57600090508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613d2f57600080fd5b505af1158015613d43573d6000803e3d6000fd5b505050506040513d6020811015613d5957600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613e0e57600080fd5b505af1158015613e22573d6000803e3d6000fd5b505050506040513d6020811015613e3857600080fd5b8101908080519060200190929190505050505b60066002541415614000578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613ef957600080fd5b505af1158015613f0d573d6000803e3d6000fd5b505050506040513d6020811015613f2357600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613fc357600080fd5b505af1158015613fd7573d6000803e3d6000fd5b505050506040513d6020811015613fed57600080fd5b8101908080519060200190929190505050505b600760025414156141de578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156140ae57600080fd5b505af11580156140c2573d6000803e3d6000fd5b505050506040513d60208110156140d857600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73d7ad056944e6533c41f457bbbc457c76a28db443856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156141a157600080fd5b505af11580156141b5573d6000803e3d6000fd5b505050506040513d60208110156141cb57600080fd5b8101908080519060200190929190505050505b614239600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548661334b565b600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020819055506142e9600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060078152602001908152602001600020548661236b565b600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060078152602001908152602001600020819055506143d6600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028152602001908152602001600020548661236b565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002815260200190815260200160002081905550600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600b81526020019081526020016000206000815480929190600101919050555050505050505050565b600080600080600080600080600960008a81526020019081526020016000209750600088600001541415151561450757600080fd5b8973ffffffffffffffffffffffffffffffffffffffff168860040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561456557600080fd5b61457342896008015461334b565b96506145a661459d6145976145908b600101548c6009015461330d565b60646132e3565b8961330d565b62278d006132e3565b95506145b78860010154600a6132e3565b9450848611156145c9578493506145cd565b8593505b87600601548411156145e557876006015492506145e9565b8392505b6145f788600701548461236b565b915061460788600601548461334b565b9050600088600701819055508088600601819055508188600c018190555042886008018190555061463a8a8a838561545b565b50505050505050505050565b60008060008060008060008060006146696146628c604861330d565b60646132e3565b98506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614801561471857506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008815260200190815260200160002054145b15614726576000975061473e565b61473b6147348c601061330d565b60646132e3565b97505b8b9650600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020549550600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600281526020019081526020016000205494506147f3428661236b565b93508a925088915087905060009a5060009850600097506101e06040519081016040528060035481526020018481526020018581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156148c757600080fd5b505af11580156148db573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561490557600080fd5b81019080805164010000000081111561491d57600080fd5b8281019050602081018481111561493357600080fd5b815185600182028301116401000000008211171561495057600080fd5b505092919050505081526020018381526020018281526020014281526020018781526020016000815260200160008152602001600081526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060096000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190614a8a92919061596e565b5060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101c082015181600d0160146101000a81548160ff021916908315150217905550905050614bda600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020548461236b565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001815260200190815260200160002081905550614d04600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060058152602001908152602001600020548461236b565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006005815260200190815260200160002081905550614df1600b60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060068152602001908152602001600020548461236b565b600b60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006006815260200190815260200160002081905550614ea1600b60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020548461236b565b600b60008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038152602001908152602001600020819055506001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008815260200190815260200160002054141561503357600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003549080600181540180825580915050906001820390600052602060002001600090919290919091505550600360008154809291906001019190505550600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a815260200190815260200160002060008154809291906001019190505550615228565b600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003549080600181540180825580915050906001820390600052602060002001600090919290919091505550600360008154809291906001019190505550600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006009815260200190815260200160002060008154809291906001019190505550600b60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a8152602001908152602001600020600081548092919060010191905055506004600081548092919060010191905055505b6001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060088152602001908152602001600020819055508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05fb89c4b424ffdc61374e38eb92a8ff16db5b32923736b264aedfcc06be08468973ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561533257600080fd5b505af1158015615346573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561537057600080fd5b81019080805164010000000081111561538857600080fd5b8281019050602081018481111561539e57600080fd5b81518560018202830111640100000000821117156153bb57600080fd5b505092919050505086886040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156154115780820151818401526020810190506153f6565b50505050905090810190601f16801561543e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a3505050505050505050505050565b600080600060606000806000806000600960008d81526020019081526020016000209850600089600001541415151561549357600080fd5b8c73ffffffffffffffffffffffffffffffffffffffff168960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156154f157600080fd5b8997508860040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650886005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156155b35780601f10615588576101008083540402835291602001916155b3565b820191906000526020600020905b81548152906001019060200180831161559657829003601f168201915b505050505095506155d36155cc8a60010154600c61330d565b60646132e3565b94506155ee6155e78a60010154601061330d565b60646132e3565b9350886000015492506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015615708575082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154811015156156fb57fe5b9060005260206000200154145b156157345761572d6157276157218b600101548861334b565b8661334b565b8c61334b565b915061574e565b61574b6157458a600101548761334b565b8c61334b565b91505b61576e6157648368056bc75e2d6310000061330d565b8a600101546132e3565b90508189600b01819055508089600a01819055506157d58960030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c61336c565b8673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f808c825ca451d8bf9c5cd240397aac35f88ad12825764d352ab3d6c058880467888b426040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015615873578082015181840152602081019050615858565b50505050905090810190601f1680156158a05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a36158df8960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6002613044565b50505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061592f57805160ff191683800117855561595d565b8280016001018555821561595d579182015b8281111561595c578251825591602001919060010190615941565b5b50905061596a91906159ee565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106159af57805160ff19168380011785556159dd565b828001600101855582156159dd579182015b828111156159dc5782518255916020019190600101906159c1565b5b5090506159ea91906159ee565b5090565b615a1091905b80821115615a0c5760008160009055506001016159f4565b5090565b905600a165627a7a723058208e660ec8d2f66dba0521ff862a57baa7cdadae085dddbab0fd81e00164194b280029"
}