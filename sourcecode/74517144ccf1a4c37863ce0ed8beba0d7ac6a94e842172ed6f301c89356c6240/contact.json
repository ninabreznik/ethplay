{
  "address": "0xc1be9895d1fe36f164f5b878a76865205ecb40b7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyWishEosRegister",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-18\n*/\n\npragma solidity ^0.4.25;\n\ncontract MyWishEosRegister {\n    event RegisterAdd(address indexed, string, bytes32);\n    mapping(address => bytes32) private register;\n    \n    function put(string _eosAccountName) external {\n        require(register[msg.sender] == 0, \"address already bound\");\n        bytes memory byteString = bytes(_eosAccountName);\n        require(byteString.length == 12, \"worng length\");\n\n        for (uint i = 0; i < 12; i ++) {\n            byte b = byteString[i];\n            require((b >= 48 && b <= 53) || (b >= 97 && b <= 122), \"wrong symbol\");\n        }\n        bytes32 result;\n        assembly {\n            result := mload(add(byteString, 0x20))\n        }\n        register[msg.sender] = result;\n        emit RegisterAdd(msg.sender, _eosAccountName, result);\n    }\n\n    \n    function get(address _addr) public view returns (string memory result) {\n        bytes32 eos = register[_addr];\n        if (eos == 0) {\n            return;\n        }\n        result = \"............\";\n        assembly {\n            mstore(add(result, 0x20), eos)\n        }\n    }\n\n    \n    function get() public view returns (string memory) {\n        return get(msg.sender);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506104f6806100206000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634c21eb07811461005b5780636d4ce63c1461007d578063c2bc2efc14610107575b600080fd5b34801561006757600080fd5b5061007b6004803560248101910135610135565b005b34801561008957600080fd5b50610092610467565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100cc5781810151838201526020016100b4565b50505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011357600080fd5b5061009273ffffffffffffffffffffffffffffffffffffffff60043516610477565b336000908152602081905260408120546060919081908190156101b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6164647265737320616c726561647920626f756e640000000000000000000000604482015290519081900360640190fd5b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505093508351600c14151561026057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f776f726e67206c656e6774680000000000000000000000000000000000000000604482015290519081900360640190fd5b600092505b600c8310156103ef57838381518110151561027c57fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190040291507f3000000000000000000000000000000000000000000000000000000000000000600160f860020a031983161080159061030d57507f3500000000000000000000000000000000000000000000000000000000000000600160f860020a0319831611155b8061037757507f6100000000000000000000000000000000000000000000000000000000000000600160f860020a031983161080159061037757507f7a00000000000000000000000000000000000000000000000000000000000000600160f860020a0319831611155b15156103e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f77726f6e672073796d626f6c0000000000000000000000000000000000000000604482015290519081900360640190fd5b600190920191610265565b506020838101513360008181528084526040908190208390558051938401839052808452830187905290917fe308632be6ce11ab1f60ecf5ca874a0652c3dcca9900b7bc641087bebda56e3a9088908890859080606081018585808284376040519201829003965090945050505050a2505050505050565b606061047233610477565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020546060908015156104ac576104c4565b60408051808201909152600c81526020810182905291505b509190505600a165627a7a723058205836ff30b668f796621ad90cef2e97b5a5509588a55b55b597766f6182dd30e60029"
}