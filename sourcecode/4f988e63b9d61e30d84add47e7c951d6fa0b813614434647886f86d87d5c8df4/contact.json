{
  "address": "0xe448c94856b36ffb701fb5a578452d32f52788ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "P3Daily",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.25;\n\ncontract P3Daily {\n    \n    using SafeMath for uint256;\n    \n    struct Round {\n        uint256 pot;\n        uint256 ticketsSold;\n        uint256 blockNumber;\n        uint256 startTime;\n        mapping(uint256 => address) tickets;\n        mapping(address => uint256) ticketsPerAddress;\n    }\n    \n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n    address constant sacMasternode = address(0x4fac33dAbFd83d160717dFee4175d9cAaA249CA5);\n    address constant dev = address(0xF0EA6CE7d210Ee58e83a463Af13989B5c2DbE108);\n    \n    uint256 constant public PRICE_PER_TICKET = 0.01 ether;\n    uint256 constant public ROUND_LENGTH = 24 hours;\n    \n    mapping(uint256 => Round) public rounds;\n    mapping(address => uint256) private vault;\n    \n    uint256 public currentRoundNumber;\n    \n    event TicketsPurchased(address indexed player, uint256 indexed amount);\n    event LotteryWinner(address indexed winner, uint256 indexed winnings, uint256 indexed ticket);\n    event WithdrawVault(address indexed player, uint256 indexed amaount);\n    event Validator(address indexed validator, uint256 indexed reward);\n    \n    modifier isValidPurchase(uint256 _howMany)\n    {\n        require(_howMany > 0);\n        require(msg.value == _howMany.mul(PRICE_PER_TICKET));\n        _;\n    }\n    \n    modifier canPayFromVault(uint256 _howMany)\n    {\n        require(_howMany > 0);\n        require(vault[msg.sender] >= _howMany.mul(PRICE_PER_TICKET));\n        _;\n    }\n    \n    modifier positiveVaultBalance()\n    {\n        require(vault[msg.sender] > 0);\n        _;\n    }\n    \n    constructor()\n        public\n    {\n        currentRoundNumber = 0;\n        rounds[currentRoundNumber] = Round(0, 0, 0, now);\n    }\n    \n    function() external payable {}\n       \n    function isRoundOver()\n        public\n        view\n        returns(bool)\n    {\n        return now >= rounds[currentRoundNumber].startTime.add(ROUND_LENGTH);\n    }\n    \n    function potentialWinner()\n        external\n        view\n        returns(address)\n    {\n        if(isRoundOver() &&\n        rounds[currentRoundNumber].blockNumber != 0 &&\n        block.number - 256 <= rounds[currentRoundNumber].blockNumber &&\n        rounds[currentRoundNumber].blockNumber != block.number) {\n            uint256 potentialwinningTicket = uint256(blockhash(rounds[currentRoundNumber].blockNumber)) % rounds[currentRoundNumber].ticketsSold;\n            return rounds[currentRoundNumber].tickets[potentialwinningTicket];\n        }\n        \n        return address(0);\n    }\n    \n    function blocksUntilNewPotentialWinner()\n        external\n        view\n        returns (uint256)\n    {\n        if(isRoundOver() &&\n        rounds[currentRoundNumber].blockNumber != 0 &&\n        block.number - 256 <= rounds[currentRoundNumber].blockNumber &&\n        rounds[currentRoundNumber].blockNumber != block.number) {\n           return 256 - (block.number - rounds[currentRoundNumber].blockNumber);\n        }\n        \n        return 0;\n    }\n    \n    function getTicketOwner(uint256 _number)\n        external\n        view\n        returns(address)\n    {\n        return rounds[currentRoundNumber].tickets[_number];\n    }\n    \n     function ticketsPurchased()\n        external\n        view\n        returns(uint256)\n    {\n        return rounds[currentRoundNumber].ticketsSold;\n    }\n    \n    function timeLeft()\n        external\n        view\n        returns(uint256)\n    {\n        if(isRoundOver()) {\n            return 0;\n        }\n        \n        return ROUND_LENGTH.sub(now.sub(rounds[currentRoundNumber].startTime));\n    }\n    \n    function jackpotSize()\n        external\n        view\n        returns(uint256)\n    {\n        return rounds[currentRoundNumber].pot.add(p3dContract.myDividends(true)).mul(97) / 100;\n    }\n    \n    function validatorReward()\n        external\n        view\n        returns(uint256)\n    {\n        return rounds[currentRoundNumber].pot.add(p3dContract.myDividends(true)) / 100;\n    }\n    \n    function myVault()\n        external\n        view\n        returns(uint256)\n    {\n        return vault[msg.sender];\n    }\n    \n    function myTickets()\n        external\n        view\n        returns(uint256)\n    {\n        return rounds[currentRoundNumber].ticketsPerAddress[msg.sender];\n    }\n    \n    function purchaseTicket(uint256 _howMany)\n        external\n        payable\n        isValidPurchase(_howMany)\n    {\n        if(!isRoundOver() || onRoundEnd()) {\n            acceptPurchase(_howMany, msg.value);\n        } else {\n            vault[msg.sender] = vault[msg.sender].add(msg.value);\n        }\n    }\n    \n    function purchaseFromVault(uint256 _howMany)\n        external\n        canPayFromVault(_howMany)\n    {\n        if(!isRoundOver() || onRoundEnd()) {\n            uint256 value = _howMany.mul(PRICE_PER_TICKET);\n            vault[msg.sender] -= value;\n            acceptPurchase(_howMany, value);\n        }\n    }\n    \n    function validate()\n        external\n    {\n        require(isRoundOver());\n        \n        onRoundEnd();\n    }\n    \n    function withdrawFromVault()\n        external\n        positiveVaultBalance\n    {\n        uint256 amount = vault[msg.sender];\n        vault[msg.sender] = 0;\n        \n        emit WithdrawVault(msg.sender, amount);\n        \n        msg.sender.transfer(amount);\n    }\n    \n    function onRoundEnd()\n        private\n        returns(bool newRound)\n    {\n        //no tickets sold => create new round\n        if(rounds[currentRoundNumber].ticketsSold == 0) {\n            currentRoundNumber++;\n            rounds[currentRoundNumber] = Round(0, 0, 0, now);\n            return true;\n        }\n        \n        //blocknumber has not been chosen or is too old => set new one\n        if(rounds[currentRoundNumber].blockNumber == 0 || block.number - 256 > rounds[currentRoundNumber].blockNumber) {\n            rounds[currentRoundNumber].blockNumber = block.number;\n            return false;\n        }\n        \n        //can't determine hash of current block\n        if(block.number == rounds[currentRoundNumber].blockNumber) {return false;}\n        \n        //determine winner\n        uint256 winningTicket = uint256(blockhash(rounds[currentRoundNumber].blockNumber)) % rounds[currentRoundNumber].ticketsSold;\n        address winner = rounds[currentRoundNumber].tickets[winningTicket];\n        \n        uint256 totalWinnings = rounds[currentRoundNumber].pot;\n        \n        uint256 dividends = p3dContract.myDividends(true);\n        if(dividends > 0) {\n            p3dContract.withdraw();\n            totalWinnings = totalWinnings.add(dividends);\n        }\n        \n        //winner reward\n        uint256 winnings = totalWinnings.mul(97) / 100;\n        vault[winner] = vault[winner].add(winnings);\n        emit LotteryWinner(winner, winnings, winningTicket);\n        \n        //validator reward\n        vault[msg.sender] = vault[msg.sender].add(totalWinnings / 100);\n        emit Validator(msg.sender, totalWinnings / 100);\n        \n        //dev fee\n        vault[dev] = vault[dev].add(totalWinnings.mul(2) / 100);\n        \n        currentRoundNumber++;\n        rounds[currentRoundNumber] = Round(0, 0, 0, now);\n        return true;\n    }\n    \n    function acceptPurchase(uint256 _howMany, uint256 value)\n        private\n    {\n        uint256 ticketsSold = rounds[currentRoundNumber].ticketsSold;\n        uint256 boundary = _howMany.add(ticketsSold);\n        \n        for(uint256 i = ticketsSold; i < boundary; i++) {\n            rounds[currentRoundNumber].tickets[i] = msg.sender;\n        }\n        \n        rounds[currentRoundNumber].ticketsSold = boundary;\n        rounds[currentRoundNumber].pot = rounds[currentRoundNumber].pot.add(value.mul(60) / 100);\n        rounds[currentRoundNumber].ticketsPerAddress[msg.sender] = rounds[currentRoundNumber].ticketsPerAddress[msg.sender].add(_howMany);\n        \n        emit TicketsPurchased(msg.sender, _howMany);\n        \n        p3dContract.buy.value(value.mul(40) / 100)(sacMasternode);\n    }\n}\n\ninterface HourglassInterface {\n    function buy(address _playerAddress) payable external returns(uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\n}\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n}",
  "bytecode": ""
}