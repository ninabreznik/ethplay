{
  "address": "0x3ccb1fe6d628444fb1c823a3ee3573ed0a21f338",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BNTE",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity 0.5.2;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint256 total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\n  function approve(address spender, uint256 value)public returns (bool ok);\n  function transfer(address to, uint256 value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BNTE is ERC20 { \n    using SafeMath for uint256;\n    //--- Token configurations ----// \n    string public constant name = \"Bountie\";\n    string public constant symbol = \"BNTE\";\n    uint8 public constant decimals = 18;\n    uint256 public constant basePrice = 6500;\n    uint public maxCap = 20000 ether;\n    \n    //--- Token allocations -------//\n    uint256 public _totalsupply;\n    uint256 public mintedTokens;\n    uint256 public ETHcollected;\n\n    //--- Address -----------------//\n    address public owner;\n    address payable public ethFundMain;\n    address public novumAddress;\n   \n    //--- Milestones --------------//\n    uint256 public presale1_startdate = 1537675200; // 23-9-2018\n    uint256 public presale2_startdate = 1538712000; // 5-10-2018\n    uint256 public presale3_startdate = 1539662400; // 16-10-2018\n    uint256 public ico_startdate = 1540612800; // 27-10-2018\n    uint256 public ico_enddate = 1541563200; // 7-11-2018\n    \n    //--- Variables ---------------//\n    bool public lockstatus = true;\n    bool public stopped = false;\n    \n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    event Mint(address indexed from, address indexed to, uint256 amount);\n    event Burn(address indexed from, uint256 amount);\n    \n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n    modifier onlyICO() {\n        require(now >= presale1_startdate && now < ico_enddate);\n        _;\n    }\n\n    modifier onlyFinishedICO() {\n        require(now >= ico_enddate);\n        _;\n    }\n    \n    constructor() public\n    {\n        owner = msg.sender;\n        ethFundMain = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\n        novumAddress = 0xDEe3a6b14ef8E21B9df09a059186292C9472045D;\n    }\n\n    function totalSupply() public view returns (uint256 total_Supply) {\n        total_Supply = _totalsupply;\n    }\n    \n    function balanceOf(address _owner)public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\n        require( _to != address(0));\n        require(!lockstatus);\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n        balances[_from] = (balances[_from]).sub(_amount);\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\n        require(!lockstatus);\n        require( _spender != address(0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n        require( _owner != address(0) && _spender != address(0));\n        return allowed[_owner][_spender];\n    }\n\n\n    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\n        require(!lockstatus);\n        require( _to != address(0));\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function burn(uint256 value) public onlyOwner returns (bool success) {\n        uint256 _value = value * 10 ** 18;\n        require(balances[msg.sender] >= _value);   \n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \n        _totalsupply = _totalsupply.sub(_value);                     \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    \n    function stopTransferToken() external onlyOwner onlyFinishedICO {\n        require(!lockstatus);\n        lockstatus = true;\n    }\n\n    function startTransferToken() external onlyOwner onlyFinishedICO {\n        require(lockstatus);\n        lockstatus = false;\n    }\n\n    function manualMint(address receiver, uint256 _tokenQuantity) external onlyOwner{\n        uint256 tokenQuantity = _tokenQuantity * 10 ** 18;\n        uint256 tokenPrice = calculatePrice();\n        uint256 ethAmount = tokenQuantity.div(tokenPrice);\n        ETHcollected = ETHcollected.add(ethAmount);\n        require(ETHcollected <= maxCap);\n        mintContract(owner, receiver, tokenQuantity);\n    }\n\n    function () external payable onlyICO {\n        require(msg.value != 0 && msg.sender != address(0));\n        require(!stopped && msg.sender != owner);\n        uint256 tokenPrice = calculatePrice();\n        uint256 tokenQuantity = (msg.value).mul(tokenPrice);\n        ETHcollected = ETHcollected.add(msg.value);\n        require(ETHcollected <= maxCap);\n        mintContract(address(this), msg.sender, tokenQuantity);\n    }\n\n    function mintContract(address from, address receiver, uint256 tokenQuantity) private {\n        require(tokenQuantity > 0);\n        mintedTokens = mintedTokens.add(tokenQuantity);\n        uint256 novumShare = tokenQuantity * 4 / 65;\n        uint256 userManagement = tokenQuantity * 31 / 65;\n        balances[novumAddress] = balances[novumAddress].add(novumShare);\n        balances[owner] = balances[owner].add(userManagement);\n        _totalsupply = _totalsupply.add(tokenQuantity * 100 / 65);\n        balances[receiver] = balances[receiver].add(tokenQuantity);\n        emit Mint(from, receiver, tokenQuantity);\n        emit Transfer(address(0), receiver, tokenQuantity);\n        emit Mint(from, novumAddress, novumShare);\n        emit Transfer(address(0), novumAddress, novumShare);\n        emit Mint(from, owner, userManagement);\n        emit Transfer(address(0), owner, userManagement);\n    }\n    \n    function calculatePrice() private view returns (uint256){\n        uint256 price_token = basePrice;\n         \n        if(now < presale1_startdate) {\n            require(ETHcollected < 10000 ether);\n            price_token = basePrice * 6 / 5;   \n        }\n        else  if (now < presale2_startdate) {\n            require(ETHcollected < 11739 ether);\n            price_token = basePrice * 23 / 20;   \n        }\n        else if (now < presale3_startdate) {\n            require(ETHcollected < 13557 ether);\n            price_token = basePrice * 11 / 10;\n        }\n        else if (now < ico_startdate) {\n            require(ETHcollected < 15462 ether);\n            price_token = basePrice * 21 / 20;\n        }\n        else {\n            require(ETHcollected < maxCap);\n            price_token = basePrice;\n        }\n        return price_token;\n    }\n    \n    function CrowdSale_Halt() external onlyOwner onlyICO {\n        require(!stopped);\n        stopped = true;\n    }\n\n\n    function CrowdSale_Resume() external onlyOwner onlyICO {\n        require(stopped);\n        stopped = false;\n    }\n\n    function CrowdSale_Change_ReceiveWallet(address payable New_Wallet_Address) external onlyOwner {\n        require(New_Wallet_Address != address(0));\n        ethFundMain = New_Wallet_Address;\n    }\n\n\tfunction CrowdSale_AssignOwnership(address newOwner) public onlyOwner {\n\t    require(newOwner != address(0));\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\n\t}\n\n    function forwardFunds() external onlyOwner { \n        address myAddress = address(this);\n        ethFundMain.transfer(myAddress.balance);\n    }\n\n    function modify_NovumAddress(address newAddress) public onlyOwner returns(bool) {\n        require(newAddress != address(0) && novumAddress != newAddress);\n        uint256 novumBalance = balances[novumAddress];\n        address oldAddress = novumAddress;\n        balances[newAddress] = (balances[newAddress]).add(novumBalance);\n        balances[novumAddress] = 0;\n        novumAddress = newAddress;\n        emit Transfer(oldAddress, newAddress, novumBalance);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHcollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale1_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale3_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modify_NovumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CrowdSale_AssignOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"New_Wallet_Address\",\"type\":\"address\"}],\"name\":\"CrowdSale_Change_ReceiveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"novumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale2_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405269043c33c1937564800000600055635ba70fc0600755635bb6e1c0600855635bc56240600955635bd3e2c0600a55635be26340600b556001600c60006101000a81548160ff0219169083151502179055506000600c60016101000a81548160ff02191690831515021790555034801561007c57600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dee3a6b14ef8e21b9df09a059186292c9472045d600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dee3a6b14ef8e21b9df09a059186292c9472045d600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b71806101776000396000f3fe608060405260043610610216576000357c0100000000000000000000000000000000000000000000000000000000900480637d4d31281161012a578063a9059cbb116100bd578063d344e01b1161008c578063d344e01b14610b1e578063dd62ed3e14610b35578063e4c5ff4614610bba578063e754a4e514610c15578063f094768014610c4057610216565b8063a9059cbb146109d8578063b1432cc314610a4b578063c35c326514610a9c578063c7876ea414610af357610216565b806395d89b41116100f957806395d89b41146108b55780639d735286146109455780639f62e2021461095c578063a393dc44146109ad57610216565b80637d4d3128146107f157806386f7313d146108085780638d75fe05146108335780638da5cb5b1461085e57610216565b8063313ce567116101ad57806355f6a4121161017c57806355f6a41214610686578063658f2ad6146106ef5780636bf82d741461070657806370a082311461075d57806375f12b21146107c257610216565b8063313ce567146105c057806342966c68146105f15780634f6c33721461064457806355f413c91461065b57610216565b806321424e7d116101e957806321424e7d146104ac57806323548b8b146104d757806323b872dd14610502578063268432511461059557610216565b806306fdde0314610353578063095ea7b3146103e357806318160ddd14610456578063203a318f14610481575b60075442101580156102295750600b5442105b151561023457600080fd5b600034141580156102725750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b151561027d57600080fd5b600c60019054906101000a900460ff161580156102e85750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15156102f357600080fd5b60006102fd610c6f565b905060006103148234610d8d90919063ffffffff16565b905061032b34600354610dc890919063ffffffff16565b6003819055506000546003541115151561034457600080fd5b61034f303383610de6565b5050005b34801561035f57600080fd5b50610368611399565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a857808201518184015260208101905061038d565b50505050905090810190601f1680156103d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ef57600080fd5b5061043c6004803603604081101561040657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113d2565b604051808215151515815260200191505060405180910390f35b34801561046257600080fd5b5061046b61152d565b6040518082815260200191505060405180910390f35b34801561048d57600080fd5b50610496611537565b6040518082815260200191505060405180910390f35b3480156104b857600080fd5b506104c161153d565b6040518082815260200191505060405180910390f35b3480156104e357600080fd5b506104ec611543565b6040518082815260200191505060405180910390f35b34801561050e57600080fd5b5061057b6004803603606081101561052557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611549565b604051808215151515815260200191505060405180910390f35b3480156105a157600080fd5b506105aa611940565b6040518082815260200191505060405180910390f35b3480156105cc57600080fd5b506105d5611946565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105fd57600080fd5b5061062a6004803603602081101561061457600080fd5b810190808035906020019092919050505061194b565b604051808215151515815260200191505060405180910390f35b34801561065057600080fd5b50610659611b0e565b005b34801561066757600080fd5b50610670611bc1565b6040518082815260200191505060405180910390f35b34801561069257600080fd5b506106d5600480360360208110156106a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bc7565b604051808215151515815260200191505060405180910390f35b3480156106fb57600080fd5b50610704611ef5565b005b34801561071257600080fd5b5061071b611fa7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076957600080fd5b506107ac6004803603602081101561078057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fcd565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b506107d7612016565b604051808215151515815260200191505060405180910390f35b3480156107fd57600080fd5b50610806612029565b005b34801561081457600080fd5b5061081d6120ce565b6040518082815260200191505060405180910390f35b34801561083f57600080fd5b506108486120d4565b6040518082815260200191505060405180910390f35b34801561086a57600080fd5b506108736120da565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108c157600080fd5b506108ca612100565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561090a5780820151818401526020810190506108ef565b50505050905090810190601f1680156109375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561095157600080fd5b5061095a612139565b005b34801561096857600080fd5b506109ab6004803603602081101561097f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061221d565b005b3480156109b957600080fd5b506109c26124fa565b6040518082815260200191505060405180910390f35b3480156109e457600080fd5b50610a31600480360360408110156109fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612500565b604051808215151515815260200191505060405180910390f35b348015610a5757600080fd5b50610a9a60048036036020811015610a6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061275f565b005b348015610aa857600080fd5b50610ab161283b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610aff57600080fd5b50610b08612861565b6040518082815260200191505060405180910390f35b348015610b2a57600080fd5b50610b33612867565b005b348015610b4157600080fd5b50610ba460048036036040811015610b5857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061290d565b6040518082815260200191505060405180910390f35b348015610bc657600080fd5b50610c1360048036036040811015610bdd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a08565b005b348015610c2157600080fd5b50610c2a612af8565b6040518082815260200191505060405180910390f35b348015610c4c57600080fd5b50610c55612afe565b604051808215151515815260200191505060405180910390f35b6000806119649050600754421015610cb45769021e19e0c9bab2400000600354101515610c9b57600080fd5b6005600661196402811515610cac57fe5b049050610d86565b600854421015610cf15769027c5f59e01cc68c0000600354101515610cd857600080fd5b6014601761196402811515610ce957fe5b049050610d85565b600954421015610d2e576902deed2b57ef82b40000600354101515610d1557600080fd5b600a600b61196402811515610d2657fe5b049050610d84565b600a54421015610d6b57690346325ae6d021d80000600354101515610d5257600080fd5b6014601561196402811515610d6357fe5b049050610d83565b600054600354101515610d7d57600080fd5b61196490505b5b5b5b8091505090565b600080831415610da05760009050610dc2565b60008284029050828482811515610db357fe5b04141515610dbd57fe5b809150505b92915050565b6000808284019050838110151515610ddc57fe5b8091505092915050565b600081111515610df557600080fd5b610e0a81600254610dc890919063ffffffff16565b6002819055506000604160048302811515610e2157fe5b04905060006041601f8402811515610e3557fe5b049050610eac82600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8581600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061100e604160648502811515610ffc57fe5b04600154610dc890919063ffffffff16565b60018190555061106683600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8836040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505050565b6040805190810160405280600781526020017f426f756e7469650000000000000000000000000000000000000000000000000081525081565b6000600b5442101515156113e557600080fd5b600c60009054906101000a900460ff1615151561140157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561143d57600080fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600a5481565b60035481565b60005481565b6000600b54421015151561155c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561159857600080fd5b600c60009054906101000a900460ff161515156115b457600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561167f575081600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561168c575060008210155b151561169757600080fd5b6116e982600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1190919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117bb82600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1190919063ffffffff16565b600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061188d82600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60075481565b601281565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a957600080fd5b6000670de0b6b3a76400008302905080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a0657600080fd5b611a5881600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1190919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ab081600154612b1190919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a26001915050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b6a57600080fd5b6007544210158015611b7d5750600b5442105b1515611b8857600080fd5b600c60019054906101000a900460ff16151515611ba457600080fd5b6001600c60016101000a81548160ff021916908315150217905550565b60095481565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c2557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611cb057508173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611cbb57600080fd5b6000600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611d9a82600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600192505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f5157600080fd5b6007544210158015611f645750600b5442105b1515611f6f57600080fd5b600c60019054906101000a900460ff161515611f8a57600080fd5b6000600c60016101000a81548160ff021916908315150217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c60019054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561208557600080fd5b600b54421015151561209657600080fd5b600c60009054906101000a900460ff1615156120b157600080fd5b6000600c60006101000a81548160ff021916908315150217905550565b600b5481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f424e54450000000000000000000000000000000000000000000000000000000081525081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561219557600080fd5b6000309050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8273ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612219573d6000803e3d6000fd5b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561227957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156122b557600080fd5b612368600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60015481565b6000600b54421015151561251357600080fd5b600c60009054906101000a900460ff1615151561252f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561256b57600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156125bb575060008210155b15156125c657600080fd5b61261882600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b1190919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126ad82600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc890919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127bb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156127f757600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61196481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c357600080fd5b600b5442101515156128d457600080fd5b600c60009054906101000a900460ff161515156128f057600080fd5b6001600c60006101000a81548160ff021916908315150217905550565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156129785750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b151561298357600080fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a6457600080fd5b6000670de0b6b3a7640000820290506000612a7d610c6f565b90506000612a948284612b2a90919063ffffffff16565b9050612aab81600354610dc890919063ffffffff16565b60038190555060005460035411151515612ac457600080fd5b612af1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168685610de6565b5050505050565b60085481565b600c60009054906101000a900460ff1681565b6000828211151515612b1f57fe5b818303905092915050565b6000808284811515612b3857fe5b049050809150509291505056fea165627a7a7230582015dc88e9b96d14073fc2ba4c7ee32cd61191003d5c042cef9b179e7d4bcba5220029"
}