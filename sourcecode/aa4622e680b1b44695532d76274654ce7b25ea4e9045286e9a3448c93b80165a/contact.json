{
  "address": "0xe25bcec5d3801ce3a794079bf94adf1b8ccd802d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MATRIX AI Network: Old Token",
  "contractName": "MANToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-05\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract MANToken {\n    string public name; // MAN\n    string public symbol; // MAN\n    uint256 public decimals = 18;\n    uint256 DECIMALSFACTOR = 10**decimals;\n    uint256 constant weiDECIMALS = 18; \n    uint256 weiFACTOR =  10 ** weiDECIMALS; \n    \n    address ethFundAddress  = 0xdF039a39899eC1Bc571eBcb7944B3b3A0A30C36d; \n\n    address address1 = 0x75C6CBe2cd50932D1E565A9B1Aea9F7671c7fEbc; \n    address address2 = 0xD94D499685bDdC28477f394bf3d7e4Ba729077f6; \n    address address3 = 0x11786422E7dF7A88Ea47C2dA76EE0a94aD2c5c64; \n    address address4 = 0xb1Df8C1a78582Db6CeEbFe6aAE3E01617198322e; \n    address address5 = 0x7eCc05F2da74036a9152dB3a4891f0AFDBB4eCc2; \n    address address6 = 0x39aC1d06EA941E2A41113F54737D49d9dD2c5022; \n    address address7 = 0x371895F2000053a61216011Aa43542cdd0dEb750; \n    address address8 = 0xf6a5F686bAd809b2Eb163fBE7Df646c472458852; \n    address address9 = 0xD21eF6388b232E5ceb6c2a43F93D7337dEb63274; \n    address address10 = 0xE92fFe240773E1F60fe17db7fAF8a3CdCD7bC6EC;\n\n    uint256 public startTime; \n    uint256 public endTime; \n    uint256 lockedDuration = 3 * 24 * 60 * 60; \n    uint256 tokenPerETH = 3780; \n\n    address contractOwner; \n    uint256 ethRaised; \n    uint256 tokenDistributed; \n    uint256 donationCount; \n    uint256 public currentTokenPerETH = tokenPerETH;     \n\n    uint256 public totalSupply = 250 * (10**6) * DECIMALSFACTOR;\n    uint256 softCap = 20 * (10**6) * DECIMALSFACTOR; \n    uint256 reservedAmountPerAddress = 20 * (10**6) * DECIMALSFACTOR;\n    uint256 minimumDonation = 5 * 10 ** (weiDECIMALS - 1); \n    \n    uint256 public availableSupply = totalSupply; \n    uint8 public currentStage = 0;\n    bool public isInLockStage = true;\n    bool public finalised = false;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    function MANToken(\n        string tokenName,\n        string tokenSymbol,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp) \n    public {\n        contractOwner = msg.sender;\n\n        name = tokenName; \n        symbol = tokenSymbol; \n        startTime = _startTimestamp;\n        endTime = _endTimestamp; \n\n        balanceOf[address1] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address2] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address3] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address4] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address5] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address6] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address7] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address8] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address9] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[address10] += reservedAmountPerAddress;\n        availableSupply -= reservedAmountPerAddress;\n\n        balanceOf[contractOwner] = availableSupply;\n    }\n\n\n    function () payable public {\n        require(!finalised);\n\n        require(block.timestamp >= startTime);\n        require(block.timestamp <= endTime);\n\n        require(availableSupply > 0);\n\n        mintMAN(); \n    }\n\n    function mintMAN() payable public {\n        require(msg.value >= minimumDonation); \n\n        uint256 preLockedTime = startTime + lockedDuration;\n        \n        if (block.timestamp <= preLockedTime) { \n            currentStage = 0;\n            isInLockStage = true;\n        }else if (block.timestamp > preLockedTime && tokenDistributed <= softCap) { \n            currentStage = 1;\n            isInLockStage = true;\n        }else if (block.timestamp > preLockedTime && tokenDistributed <= 35 * (10**6) * DECIMALSFACTOR) { \n            currentTokenPerETH = 3430;\n            currentStage = 2;\n            isInLockStage = false;\n        }else if (block.timestamp > preLockedTime && tokenDistributed >= 35 * (10**6) * DECIMALSFACTOR) { \n            currentTokenPerETH = 3150;\n            currentStage = 3;\n            isInLockStage = false;\n        }\n\n        uint256 tokenValue = currentTokenPerETH * msg.value / 10 ** (weiDECIMALS - decimals);\n        uint256 etherValue = msg.value;\n\n        if (tokenValue > availableSupply) {\n            tokenValue = availableSupply;\n            \n            etherValue = weiFACTOR * availableSupply / currentTokenPerETH / DECIMALSFACTOR;\n\n            require(msg.sender.send(msg.value - etherValue));\n        }\n\n        ethRaised += etherValue;\n        donationCount += 1;\n        availableSupply -= tokenValue;\n\n        _transfer(contractOwner, msg.sender, tokenValue);\n        tokenDistributed += tokenValue;\n\n        require(ethFundAddress.send(etherValue));\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(!isInLockStage);\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\n    function finalise() public {\n        require( msg.sender == contractOwner );\n        require(!finalised);\n\n        finalised = true;\n    } \n\n\tfunction unlockTokens() public {\n        require(msg.sender == contractOwner);\n        isInLockStage = false;\n    }\n\n    function tokenHasDistributed() public constant returns (uint256) {\n        return tokenDistributed;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintMAN\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInLockStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHasDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "606060405260126002819055670de0b6b3a7640000600381905560045560058054600160a060020a031990811673df039a39899ec1bc571ebcb7944b3b3a0a30c36d179091556006805482167375c6cbe2cd50932d1e565a9b1aea9f7671c7febc17905560078054821673d94d499685bddc28477f394bf3d7e4ba729077f61790556008805482167311786422e7df7a88ea47c2da76ee0a94ad2c5c6417905560098054821673b1df8c1a78582db6ceebfe6aae3e01617198322e179055600a80548216737ecc05f2da74036a9152db3a4891f0afdbb4ecc2179055600b805482167339ac1d06ea941e2a41113f54737d49d9dd2c5022179055600c8054821673371895f2000053a61216011aa43542cdd0deb750179055600d8054821673f6a5f686bad809b2eb163fbe7df646c472458852179055600e8054821673d21ef6388b232e5ceb6c2a43f93d7337deb63274179055600f805490911673e92ffe240773e1f60fe17db7faf8a3cdcd7bc6ec1790556203f4809055610ec460138190556018556acecb8f27f4200f3a00000060198190556a108b2a2c28029094000000601a819055601b556706f05b59d3b20000601c55601d55601e805462ff00001961ffff199091166101001716905534156101d957600080fd5b604051611116380380611116833981016040528080518201919060200180518201919060200180519190602001805160148054600160a060020a03191633600160a060020a031617905591506000905084805161023a929160200190610388565b50600183805161024e929160200190610388565b506010919091556011555050601b8054600654600160a060020a039081166000908152601f602052604080822080549094019093558354601d8054829003815560075484168352848320805490920190915584548154819003825560085484168352848320805490910190558454815481900382556009548416835284832080549091019055845481548190038255600a548416835284832080549091019055845481548190038255600b548416835284832080549091019055845481548190038255600c548416835284832080549091019055845481548190038255600d548416835284832080549091019055845481548190038255600e548416835284832080549091019055845481548190038255600f54841683528483208054909101905593548454039384905560145490911681522055610423565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103c957805160ff19168380011785556103f6565b828001600101855582156103f6579182015b828111156103f65782518255916020019190600101906103db565b50610402929150610406565b5090565b61042091905b80821115610402576000815560010161040c565b90565b610ce4806104326000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610180578063095ea7b31461020a5780630c3304d11461017657806318160ddd14610240578063214bb60f1461026557806323b872dd14610278578063313ce567146102a05780633197cbb6146102b357806342966c68146102c65780635bf5d54c146102dc578063699c181e1461030557806370a082311461031857806378e979251461033757806379cc67901461034a5780637ecc2b561461036c57806395d89b411461037f578063a439926314610392578063a9059cbb146103a5578063ba399ad2146103c7578063cae9ca51146103da578063dd62ed3e1461043f578063de31482a14610464578063f968f49314610477575b601e5462010000900460ff161561014857600080fd5b60105442101561015757600080fd5b60115442111561016657600080fd5b601d546000901161017657600080fd5b61017e61048a565b005b341561018b57600080fd5b610193610665565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101cf5780820151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021557600080fd5b61022c600160a060020a0360043516602435610703565b604051901515815260200160405180910390f35b341561024b57600080fd5b610253610731565b60405190815260200160405180910390f35b341561027057600080fd5b61022c610737565b341561028357600080fd5b61022c600160a060020a0360043581169060243516604435610746565b34156102ab57600080fd5b6102536107b9565b34156102be57600080fd5b6102536107bf565b34156102d157600080fd5b61022c6004356107c5565b34156102e757600080fd5b6102ef610850565b60405160ff909116815260200160405180910390f35b341561031057600080fd5b610253610859565b341561032357600080fd5b610253600160a060020a036004351661085f565b341561034257600080fd5b610253610871565b341561035557600080fd5b61022c600160a060020a0360043516602435610877565b341561037757600080fd5b610253610950565b341561038a57600080fd5b610193610956565b341561039d57600080fd5b61017e6109c1565b34156103b057600080fd5b61017e600160a060020a0360043516602435610a05565b34156103d257600080fd5b61022c610a29565b34156103e557600080fd5b61022c60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a3795505050505050565b341561044a57600080fd5b610253600160a060020a0360043581169060243516610b69565b341561046f57600080fd5b610253610b84565b341561048257600080fd5b61017e610b8a565b6000806000601c5434101515156104a057600080fd5b601254601054019250428390116104c557601e805461ffff1916610100179055610570565b82421180156104d85750601a5460165411155b156104fa57601e805461ff001960ff1990911660011716610100179055610570565b824211801561051357506003546302160ec00260165411155b1561053757610d66601855601e805461ff001960ff19909116600217169055610570565b824211801561055057506003546302160ec00260165410155b1561057057610c4e601855601e805461ff001960ff199091166003171690555b600254601203600a0a346018540281151561058757fe5b049150349050601d548211156105f457601d549150600354601854601d54600454028115156105b257fe5b048115156105bc57fe5b04905033600160a060020a03166108fc8234039081150290604051600060405180830381858888f1935050505015156105f457600080fd5b6015805482019055601780546001019055601d8054839003905560145461062590600160a060020a03163384610bb2565b6016805483019055600554600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561066057600080fd5b505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b505050505081565b600160a060020a03338116600090815260208080526040808320938616835292905220819055600192915050565b60195481565b601e5462010000900460ff1681565b600160a060020a038084166000908152602080805260408083203390941683529290529081205482111561077957600080fd5b600160a060020a0380851660009081526020808052604080832033909416835292905220805483900390556107af848484610bb2565b5060019392505050565b60025481565b60115481565b600160a060020a0333166000908152601f6020526040812054829010156107eb57600080fd5b600160a060020a0333166000818152601f602052604090819020805485900390556019805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b601e5460ff1681565b60185481565b601f6020526000908152604090205481565b60105481565b600160a060020a0382166000908152601f60205260408120548290101561089d57600080fd5b600160a060020a0380841660009081526020808052604080832033909416835292905220548211156108ce57600080fd5b600160a060020a038084166000818152601f602090815260408083208054889003905581805280832033909516835293905282902080548590039055601980548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b601d5481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fb5780601f106106d0576101008083540402835291602001916106fb565b60145433600160a060020a039081169116146109dc57600080fd5b601e5462010000900460ff16156109f257600080fd5b601e805462ff0000191662010000179055565b601e54610100900460ff1615610a1a57600080fd5b610a25338383610bb2565b5050565b601e54610100900460ff1681565b600083610a448185610703565b15610b615780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610afa578082015183820152602001610ae2565b50505050905090810190601f168015610b275780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b4857600080fd5b6102c65a03f11515610b5957600080fd5b505050600191505b509392505050565b60208080526000928352604080842090915290825290205481565b60165490565b60145433600160a060020a03908116911614610ba557600080fd5b601e805461ff0019169055565b6000600160a060020a0383161515610bc957600080fd5b600160a060020a0384166000908152601f602052604090205482901015610bef57600080fd5b600160a060020a0383166000908152601f602052604090205482810111610c1557600080fd5b50600160a060020a038083166000818152601f602052604080822080549488168084528284208054888103909155938590528154870190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a038084166000908152601f6020526040808220549287168252902054018114610cb257fe5b505050505600a165627a7a72305820b2e70bb7b9a6d34850f4732447711b3047a9b34c8336ba7592021dfee7aa8ee30029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000005a5ebc30000000000000000000000000000000000000000000000000000000005a8505c000000000000000000000000000000000000000000000000000000000000000114d4154524958204149204e6574776f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d414e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000005a5ebc30000000000000000000000000000000000000000000000000000000005a8505c000000000000000000000000000000000000000000000000000000000000000114d4154524958204149204e6574776f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d414e0000000000000000000000000000000000000000000000000000000000"
}