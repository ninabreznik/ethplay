{
  "address": "0xd5cfa997a1052464e4b9af462f9d5face9b1f730",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YOBTC",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.15;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toUINT112(uint256 a) internal pure returns(uint112) {\n    assert(uint112(a) == a);\n    return uint112(a);\n  }\n\n  function toUINT120(uint256 a) internal pure returns(uint120) {\n    assert(uint120(a) == a);\n    return uint120(a);\n  }\n\n  function toUINT128(uint256 a) internal pure returns(uint128) {\n    assert(uint128(a) == a);\n    return uint128(a);\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract YOBTC is StandardToken {\n\n  string public constant name = \"Yobtc Token\";\n  string public constant symbol = \"YOBTC\";\n  uint8 public constant decimals = 18;\n\n\n  uint256 public constant INITIAL_SUPPLY = 100000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function YOBTC() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b69152d02c7e14af68000006000818155600160a060020a033316815260016020526040902055610674806100446000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d5780632ff2e9dc146101b5578063313ce567146101c857806370a08231146101f157806395d89b4114610210578063a9059cbb14610223578063dd62ed3e14610245575b600080fd5b34156100b357600080fd5b6100bb61026a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a03600435166024356102a1565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b61030d565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a0360043581169060243516604435610313565b34156101c057600080fd5b61017b610495565b34156101d357600080fd5b6101db6104a3565b60405160ff909116815260200160405180910390f35b34156101fc57600080fd5b61017b600160a060020a03600435166104a8565b341561021b57600080fd5b6100bb6104c3565b341561022e57600080fd5b610154600160a060020a03600435166024356104fa565b341561025057600080fd5b61017b600160a060020a03600435811690602435166105f5565b60408051908101604052600b81527f596f62746320546f6b656e000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600160a060020a038316151561032a57600080fd5b600160a060020a03841660009081526001602052604090205482111561034f57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561038257600080fd5b600160a060020a0384166000908152600160205260409020546103ab908363ffffffff61062016565b600160a060020a0380861660009081526001602052604080822093909355908516815220546103e0908363ffffffff61063216565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610428908363ffffffff61062016565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b69152d02c7e14af680000081565b601281565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600581527f594f425443000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561051157600080fd5b600160a060020a03331660009081526001602052604090205482111561053657600080fd5b600160a060020a03331660009081526001602052604090205461055f908363ffffffff61062016565b600160a060020a033381166000908152600160205260408082209390935590851681522054610594908363ffffffff61063216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561062c57fe5b50900390565b60008282018381101561064157fe5b93925050505600a165627a7a7230582021a93c07f58f9b9fb47d9261fa08bfc018f83108932160408bd0eac2cbd5ec240029"
}