{
  "address": "0x6b6220677b93e8fc9dc3ffe582e481b7a56c79a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KittyRace",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-16\n*/\n\npragma solidity ^0.4.21;\n\ncontract KittyRace {\n    struct Race {\n        uint32 blockJoinedFirstRacer;\n        uint32 blockJoinedLastRacer;\n        Racer[] racers;\n    }\n\n    struct Racer {\n        address kittyOwner;\n        uint256 kittyId;\n    }\n\n    event RegisterEvent(\n        uint32 raceId,\n        address kittyAddress,\n        uint256 kittyId,\n        uint256 position\n    );\n\n    event RaceEvent(\n        uint32 raceId,\n        uint256 numRacers,\n        uint256 winnerKittyId\n    );\n\n    event PayoutEvent(\n        uint32 raceId,\n        address winnerKittyAddress,\n        uint256 winnerAmount,\n        bool winnerTxError,\n        address processingAddress,\n        uint256 processingAmount,\n        bool processingTxError\n    );\n\n    // Contract owner\n    address public owner;\n\n    // KittyCore contract reference\n    address public kittyCoreAddress;\n    KittyCoreI kittyCore;\n\n    // Pause button\n    bool gameOn = true;\n\n    // Precise payment value required to registerForRace(). This can be\n    // updated by the owner role as the gas or fiat prices adjust.\n    uint256 public entryFee = 0.005 ether;\n    uint256 public processingFee = 0.0005 ether; // paid from each entry fee to whoever successfully calls race() function\n    uint8 public registrationPeriod = 25; // number of blocks after race creation others can join\n    uint8 public maxRacers = 10; // maximum number of racers allowed for single race\n\n    uint32 public raceId = 0;\n    mapping (uint256 => Race) public races;\n    mapping (uint256 => bool) public activeRacers;\n    mapping (uint256 => bool) public completedRaces;\n\n    // Slight advantage for Kitties with the following genes\n    // Array of arrays: [ gene mask, gene value, skill value ]\n    uint256[][] geneMasks = [\n        [ uint256(0x0000000000000000000000000000000000000000001f00000000000000000000), uint256(0x0000000000000000000000000000000000000000000500000000000000000000), uint256(2) ], // mauveover (D) - colorprimary\n        [ uint256(0x000000000000000000000000000000000000000003e000000000000000000000), uint256(0x000000000000000000000000000000000000000000a000000000000000000000), uint256(1) ], // mauveover (R1) - colorprimary\n        [ uint256(0x000000000000000000000000000000000000000000000001f000000000000000), uint256(0x0000000000000000000000000000000000000000000000019000000000000000), uint256(2) ], // wingtips (D) - eyes\n        [ uint256(0x00000000000000000000000000000000000000000000003e0000000000000000), uint256(0x0000000000000000000000000000000000000000000000320000000000000000), uint256(1) ], // wingtips (R1) - eyes\n        [ uint256(0x00000000000000000000000000000000000001f0000000000000000000000000), uint256(0x00000000000000000000000000000000000000c0000000000000000000000000), uint256(2) ], // coffee (D) - colorsecondary\n        [ uint256(0x0000000000000000000000000000000000003e00000000000000000000000000), uint256(0x0000000000000000000000000000000000001800000000000000000000000000), uint256(1) ], // coffee (R1) - colorsecondary\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000001f00000), uint256(0x0000000000000000000000000000000000000000000000000000000000900000), uint256(2) ], // luckystripe (D) - pattern\n        [ uint256(0x000000000000000000000000000000000000000000000000000000003e000000), uint256(0x0000000000000000000000000000000000000000000000000000000012000000), uint256(1) ], // luckystripe (R1) - pattern\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000001f00000), uint256(0x0000000000000000000000000000000000000000000000000000000000b00000), uint256(2) ], // jaguar (D) - pattern\n        [ uint256(0x000000000000000000000000000000000000000000000000000000003e000000), uint256(0x0000000000000000000000000000000000000000000000000000000016000000), uint256(1) ]  // jaguar (R1) - pattern\n    ];\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n\n    function KittyRace(address _kittyCoreAddress) public {\n        owner = msg.sender;\n        kittyCoreAddress = _kittyCoreAddress;\n        kittyCore = KittyCoreI(kittyCoreAddress);\n    }\n\n    function kill() public onlyOwner {\n        // Contract cannot be killed after midnight, April 1, 2018 (Pacific)\n        require(now < 1522566000);\n\n        selfdestruct(owner);\n    }\n\n    function setEntryFee(uint256 _entryFee) public onlyOwner { entryFee = _entryFee; }\n    function setProcessingFee(uint256 _processingFee) public onlyOwner { processingFee = _processingFee; }\n    function setRegistrationPeriod(uint8 _registrationPeriod) public onlyOwner { registrationPeriod = _registrationPeriod; }\n    function setMaxRacers(uint8 _maxRacers) public onlyOwner { maxRacers = _maxRacers; }\n    function setGameOn(bool _gameOn) public onlyOwner { gameOn = _gameOn; }\n\n    function setKittyCoreAddress(address _kittyCoreAddress)\n        public\n        onlyOwner\n    {\n        kittyCoreAddress = _kittyCoreAddress;\n        kittyCore = KittyCoreI(kittyCoreAddress);\n    }\n\n    function getRace(uint32 _raceId)\n        public\n        view\n        returns (uint256 blockJoinedFirstRacer, uint256 blockJoinedLastRacer, uint256 numRacers)\n    {\n        return (races[_raceId].blockJoinedFirstRacer, races[_raceId].blockJoinedLastRacer, races[_raceId].racers.length);\n    }\n\n    function getRacer(uint32 _raceId, uint256 _racerIndex)\n        public\n        view\n        returns (address kittyOwner, uint256 kittyId)\n    {\n        Racer storage racer = races[_raceId].racers[_racerIndex];\n        return (racer.kittyOwner, racer.kittyId);\n    }\n\n    function registerForRace(uint256 _kittyId)\n        external\n        payable\n        returns (uint256)\n    {\n        require(gameOn);\n\n        // Confirm precise entry fee was provided\n        require(msg.value == entryFee);\n\n        // Confirm sender owns the Kitty\n        require(msg.sender == kittyCore.ownerOf(_kittyId));\n\n        // Confirm Kitty is not currently in another race\n        require(activeRacers[_kittyId] != true);\n\n        Race storage race = races[raceId];\n\n        // Create new race if current race is completed or full\n        if (completedRaces[raceId] || race.racers.length >= maxRacers) {\n            raceId += 1;\n            race = races[raceId];\n        }\n\n        // Separated from statement above to function for first racer of first race\n        if (race.racers.length == 0) {\n            race.blockJoinedFirstRacer = uint32(block.number);\n        }\n        race.blockJoinedLastRacer = uint32(block.number);\n\n        Racer memory racer = Racer({\n            kittyOwner: msg.sender,\n            kittyId: _kittyId\n        });\n\n        race.racers.push(racer);\n\n        activeRacers[_kittyId] = true;\n\n        emit RegisterEvent(\n            raceId,\n            racer.kittyOwner,\n            racer.kittyId,\n            race.racers.length - 1 // Race position\n        );\n\n        return raceId;\n    }\n\n    function race(uint32 _raceId)\n        external\n        returns (uint256)\n    {\n        uint256 numRacers = races[_raceId].racers.length;\n\n        // Is race full, if not, have racers had enough time to join?\n        require(numRacers >= maxRacers || block.number > races[_raceId].blockJoinedFirstRacer + registrationPeriod);\n\n        // Enough unique block hashes to provide random roll for each racer?\n        require(block.number > races[_raceId].blockJoinedLastRacer + numRacers);\n\n        Racer memory racer;\n        Racer memory winner = races[_raceId].racers[0];\n        uint8 raceScore;\n        uint8 highScore = 0;\n\n        // Calc finishing order\n        for(uint i = 0; i < numRacers; i++) {\n            racer = races[_raceId].racers[i];\n            // Genetic skill score\n            raceScore = getKittySkillScore(racer.kittyId);\n            // Random chance score\n            raceScore += uint8(block.blockhash(races[_raceId].blockJoinedLastRacer + numRacers - i)) % 20;\n            // First and second entry incentives\n            if (i == 0) { raceScore += 2; } // First to join\n            if (i == 1) { raceScore += 1; } // Second to join\n\n            if (raceScore > highScore) {\n                winner = racer;\n                highScore = raceScore;\n            }\n\n            delete activeRacers[racer.kittyId];\n        }\n\n        emit RaceEvent(\n            _raceId,\n            numRacers,\n            winner.kittyId\n        );\n\n        emit PayoutEvent(\n            _raceId,\n            winner.kittyOwner,\n            (entryFee * numRacers) - (processingFee * numRacers),\n            !winner.kittyOwner.send((entryFee * numRacers) - (processingFee * numRacers)),\n            msg.sender,\n            processingFee * numRacers,\n            !msg.sender.send(processingFee * numRacers)\n        );\n\n        completedRaces[_raceId] = true;\n        delete races[_raceId];\n\n        return winner.kittyId;\n    }\n\n    function getKittySkillScore(uint256 _kittyId)\n        private\n        view\n        returns (uint8)\n    {\n        uint256 genes;\n        ( , , , , , , , , , genes) = kittyCore.getKitty(_kittyId);\n\n        uint8 skillScore;\n        for(uint8 i = 0; i < geneMasks.length; i++) {\n            if (genes & geneMasks[i][0] == geneMasks[i][1]) {\n                skillScore += uint8(geneMasks[i][2]);\n            }\n        }\n\n        return skillScore;\n    }\n}\n\n// Barebones interface to CryptoKitties contract\ncontract KittyCoreI {\n    function getKitty(uint _id) public returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256 genes\n    );\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameOn\",\"type\":\"bool\"}],\"name\":\"setGameOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrationPeriod\",\"type\":\"uint8\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"}],\"name\":\"getRace\",\"outputs\":[{\"name\":\"blockJoinedFirstRacer\",\"type\":\"uint256\"},{\"name\":\"blockJoinedLastRacer\",\"type\":\"uint256\"},{\"name\":\"numRacers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"registerForRace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completedRaces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"}],\"name\":\"race\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"name\":\"setKittyCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"races\",\"outputs\":[{\"name\":\"blockJoinedFirstRacer\",\"type\":\"uint32\"},{\"name\":\"blockJoinedLastRacer\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"},{\"name\":\"_racerIndex\",\"type\":\"uint256\"}],\"name\":\"getRacer\",\"outputs\":[{\"name\":\"kittyOwner\",\"type\":\"address\"},{\"name\":\"kittyId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_processingFee\",\"type\":\"uint256\"}],\"name\":\"setProcessingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxRacers\",\"type\":\"uint8\"}],\"name\":\"setMaxRacers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entryFee\",\"type\":\"uint256\"}],\"name\":\"setEntryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raceId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"kittyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numRacers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerKittyId\",\"type\":\"uint256\"}],\"name\":\"RaceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"winnerKittyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerTxError\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"processingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"processingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processingTxError\",\"type\":\"bool\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"}]",
  "bytecode": "60606040526001600260146101000a81548160ff0219169083151502179055506611c37937e080006003556601c6bf526340006004556019600560006101000a81548160ff021916908360ff160217905550600a600560016101000a81548160ff021916908360ff1602179055506000600560026101000a81548163ffffffff021916908363ffffffff160217905550610140604051908101604052806060604051908101604052806a1f0000000000000000000081526020016a05000000000000000000008152602001600281525081526020016060604051908101604052806b03e00000000000000000000081526020016aa0000000000000000000008152602001600181525081526020016060604051908101604052806801f000000000000000815260200168019000000000000000815260200160028152508152602001606060405190810160405280683e00000000000000008152602001683200000000000000008152602001600181525081526020016060604051908101604052806d01f000000000000000000000000081526020016cc00000000000000000000000008152602001600281525081526020016060604051908101604052806d3e0000000000000000000000000081526020016d18000000000000000000000000008152602001600181525081526020016060604051908101604052806301f00000815260200162900000815260200160028152508152602001606060405190810160405280633e000000815260200163120000008152602001600181525081526020016060604051908101604052806301f00000815260200162b00000815260200160028152508152602001606060405190810160405280633e0000008152602001631600000081526020016001815250815250600990600a620002a6929190620003bb565b503415620002b357600080fd5b60405160208062001d4c83398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620004eb565b8280548282559060005260206000209081019282156200040a579160200282015b828111156200040957825182906003620003f89291906200041d565b5091602001919060010190620003dc565b5b5090506200041991906200046f565b5090565b8280548282559060005260206000209081019282156200045c579160200282015b828111156200045b5782518255916020019190600101906200043e565b5b5090506200046b9190620004a0565b5090565b6200049d91905b808211156200049957600081816200048f9190620004c8565b5060010162000476565b5090565b90565b620004c591905b80821115620004c1576000816000905550600101620004a7565b5090565b90565b5080546000825590600052602060002090810190620004e89190620004a0565b50565b61185180620004fb6000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063040c3a5314610122578063072ea61c146101515780632c2ccdfb1461017a578063370d4c6e146101cf57806338692ca6146101f45780633c3861b61461021a57806341c0e1b51461026557806344dc4dec1461027a5780635939ee04146102a65780635ef16bbc146102d55780635fe2535c14610310578063647aac0c1461034b57806378a7b804146103885780637bbc469e146103c157806380e9f98c146104175780638da5cb5b146104905780639461446d146104e5578063de1881a814610508578063e0ff5d2f14610531578063eb770d0c14610557578063ed3a865e1461057a575b600080fd5b341561012d57600080fd5b6101356105af565b604051808260ff1660ff16815260200191505060405180910390f35b341561015c57600080fd5b6101646105c2565b6040518082815260200191505060405180910390f35b341561018557600080fd5b61018d6105c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101da57600080fd5b6101f2600480803515159060200190919050506105ee565b005b34156101ff57600080fd5b610218600480803560ff16906020019091905050610666565b005b341561022557600080fd5b610241600480803563ffffffff169060200190919050506106df565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561027057600080fd5b61027861077d565b005b6102906004808035906020019091905050610824565b6040518082815260200191505060405180910390f35b34156102b157600080fd5b6102b9610c5f565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e057600080fd5b6102f66004808035906020019091905050610c72565b604051808215151515815260200191505060405180910390f35b341561031b57600080fd5b6103316004808035906020019091905050610c92565b604051808215151515815260200191505060405180910390f35b341561035657600080fd5b610372600480803563ffffffff16906020019091905050610cb2565b6040518082815260200191505060405180910390f35b341561039357600080fd5b6103bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611216565b005b34156103cc57600080fd5b6103e26004808035906020019091905050611318565b604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390f35b341561042257600080fd5b610447600480803563ffffffff1690602001909190803590602001909190505061135c565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561049b57600080fd5b6104a36113d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104f057600080fd5b61050660048080359060200190919050506113f5565b005b341561051357600080fd5b61051b61145a565b6040518082815260200191505060405180910390f35b341561053c57600080fd5b610555600480803560ff16906020019091905050611460565b005b341561056257600080fd5b61057860048080359060200190919050506114d9565b005b341561058557600080fd5b61058d61153e565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b600560019054906101000a900460ff1681565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561064957600080fd5b80600260146101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106c157600080fd5b80600560006101000a81548160ff021916908360ff16021790555050565b6000806000600660008563ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff16600660008663ffffffff16815260200190815260200160002060000160049054906101000a900463ffffffff16600660008763ffffffff168152602001908152602001600020600101805490508263ffffffff1692508163ffffffff1691509250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107d857600080fd5b635ac08370421015156107ea57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008061082f611751565b600260149054906101000a900460ff16151561084a57600080fd5b6003543414151561085a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156108ea57600080fd5b5af115156108f757600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093a57600080fd5b600115156007600086815260200190815260200160002060009054906101000a900460ff1615151415151561096e57600080fd5b60066000600560029054906101000a900463ffffffff1663ffffffff168152602001908152602001600020915060086000600560029054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff16806109f85750600560019054906101000a900460ff1660ff16826001018054905010155b15610a62576001600560028282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff16021790555060066000600560029054906101000a900463ffffffff1663ffffffff16815260200190815260200160002091505b600082600101805490501415610a9657438260000160006101000a81548163ffffffff021916908363ffffffff1602179055505b438260000160046101000a81548163ffffffff021916908363ffffffff16021790555060408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001858152509050816001018054806001018281610afc9190611781565b9160005260206000209060020201600083909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550505060016007600086815260200190815260200160002060006101000a81548160ff0219169083151502179055507f1f333758fd922bc0d77e736277f389313b09d08b24bc069b7d2dfe295248a4bc600560029054906101000a900463ffffffff16826000015183602001516001866001018054905003604051808563ffffffff1663ffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1600560029054906101000a900463ffffffff1663ffffffff1692505050919050565b600560009054906101000a900460ff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b600080610cbd611751565b610cc5611751565b6000806000600660008963ffffffff168152602001908152602001600020600101805490509550600560019054906101000a900460ff1660ff1686101580610d525750600560009054906101000a900460ff1660ff16600660008a63ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff160163ffffffff1643115b1515610d5d57600080fd5b85600660008a63ffffffff16815260200190815260200160002060000160049054906101000a900463ffffffff1663ffffffff160143111515610d9f57600080fd5b600660008963ffffffff1681526020019081526020016000206001016000815481101515610dc957fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050935060009150600090505b85811015610fc057600660008963ffffffff16815260200190815260200160002060010181815481101515610e7e57fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509450610f068560200151611554565b925060148187600660008c63ffffffff16815260200190815260200160002060000160049054906101000a900463ffffffff1663ffffffff160103406001900460ff16811515610f5257fe5b06830192506000811415610f67576002830192505b6001811415610f77576001830192505b8160ff168360ff161115610f8c578493508291505b600760008660200151815260200190815260200160002060006101000a81549060ff02191690558080600101915050610e4d565b7fcf04eec56c00c98b7c40b29d03f096276f55c878939911a966acf1f0f817ded088878660200151604051808463ffffffff1663ffffffff168152602001838152602001828152602001935050505060405180910390a17fae713e74274d4eaf1f6e5073ce10af3794129d30243632bc6f8ef220bedcd4058885600001518860045402896003540203876000015173ffffffffffffffffffffffffffffffffffffffff166108fc8b600454028c60035402039081150290604051600060405180830381858888f1935050505015338b600454023373ffffffffffffffffffffffffffffffffffffffff166108fc8e600454029081150290604051600060405180830381858888f1935050505015604051808863ffffffff1663ffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001851515151581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215151515815260200197505050505050505060405180910390a16001600860008a63ffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600660008963ffffffff168152602001908152602001600020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549063ffffffff021916905560018201600061120291906117b3565b505083602001519650505050505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127157600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900463ffffffff16905082565b6000806000600660008663ffffffff1681526020019081526020016000206001018481548110151561138a57fe5b906000526020600020906002020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001015492509250509250929050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145057600080fd5b8060048190555050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114bb57600080fd5b80600560016101000a81548160ff021916908360ff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153457600080fd5b8060038190555050565b600560029054906101000a900463ffffffff1681565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e98b7f4d866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505061014060405180830381600087803b15156115eb57600080fd5b5af115156115f857600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051905090919293949596979850909192939495969750909192939495965090919293949550909192939450909192935090919250909150905080935050600090505b6009805490508160ff1610156117465760098160ff1681548110151561169957fe5b906000526020600020900160018154811015156116b257fe5b90600052602060002090015460098260ff168154811015156116d057fe5b906000526020600020900160008154811015156116e957fe5b906000526020600020900154841614156117395760098160ff1681548110151561170f57fe5b9060005260206000209001600281548110151561172857fe5b906000526020600020900154820191505b8080600101915050611677565b819350505050919050565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8154818355818115116117ae576002028160020283600052602060002091820191016117ad91906117d7565b5b505050565b50805460008255600202906000526020600020908101906117d491906117d7565b50565b61182291905b8082111561181e57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055506002016117dd565b5090565b905600a165627a7a72305820249c69dabcea3b092932de66cc54c19011d2dcd10578da4b2f292d42bb13c52b002900000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d",
  "constructorArguments": "00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d"
}