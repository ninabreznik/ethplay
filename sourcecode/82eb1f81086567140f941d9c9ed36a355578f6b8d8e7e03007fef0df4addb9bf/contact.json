{
  "address": "0xbd034b87f1e92757e4bcd5c9a9ea178e317a4abf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IQRSaleFirst",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-14\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private minters;\n\n    constructor() internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n\ninterface IQRToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n    external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n    external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n    function mint(address to, uint256 value)\n    external returns (bool);\n\n    function addMinter(address account)\n    external;\n\n    function frozenTime(address owner)\n    external view returns (uint);\n\n    function setFrozenTime(address owner, uint newtime)\n    external;\n}\n\ncontract IQRSaleFirst is MinterRole {\n\n    using SafeMath for uint256;\n\n    uint256 private  _usdc_for_iqr;\n    uint256 private _usdc_for_eth;\n    uint256 private _leftToSale;\n\n    address private _cold_wallet;\n\n    IQRToken private _token;\n\n    constructor() public  {\n        // price usd cents for one IQR. Default: 1 IQR = $0.06\n        _usdc_for_iqr = 6;\n        // usd cents for one ether. Default: 1 ETH = $130.92\n        _usdc_for_eth = 13092;\n        // MAX tokens to sale for this contract\n        _leftToSale = 200000000 ether;\n        // Address for ether\n        _cold_wallet = 0x5BAC0CE2276ebE6845c31C86499C6D7F5C9b0650;\n    }\n\n    function() public payable {\n        require(msg.value > 0.1 ether);\n        require(_token != address(0x0));\n        require(_cold_wallet != address(0x0));\n\n        uint256 received = msg.value;\n        uint256 tokens_to_send = received.mul(_usdc_for_eth).div(_usdc_for_iqr);\n        _leftToSale = _leftToSale.sub(tokens_to_send);\n        _token.mint(msg.sender, tokens_to_send);\n\n        _cold_wallet.transfer(msg.value);\n    }\n\n    function sendTokens(address beneficiary, uint256 tokens_to_send) public onlyMinter {\n        require(_token != address(0x0));\n        _leftToSale = _leftToSale.sub(tokens_to_send);\n        _token.mint(beneficiary, tokens_to_send);\n    }\n\n    function sendTokensToManyAddresses(address[] beneficiaries, uint256 tokens_to_send) public onlyMinter {\n        require(_token != address(0x0));\n        _leftToSale = _leftToSale.sub(tokens_to_send * beneficiaries.length);\n        for (uint i = 0; i < beneficiaries.length; i++) {\n            _token.mint(beneficiaries[i], tokens_to_send);\n        }\n    }\n\n    function setFrozenTime(address _owner, uint _newtime) public onlyMinter {\n        require(_token != address(0x0));\n        _token.setFrozenTime(_owner, _newtime);\n    }\n\n    function setFrozenTimeToManyAddresses(address[] _owners, uint _newtime) public onlyMinter {\n        require(_token != address(0x0));\n        for (uint i = 0; i < _owners.length; i++) {\n            _token.setFrozenTime(_owners[i], _newtime);\n        }\n    }\n\n    function unFrozen(address _owner) public onlyMinter {\n        require(_token != address(0x0));\n        _token.setFrozenTime(_owner, 0);\n    }\n\n    function unFrozenManyAddresses(address[] _owners) public onlyMinter {\n        require(_token != address(0x0));\n        for (uint i = 0; i < _owners.length; i++) {\n            _token.setFrozenTime(_owners[i], 0);\n        }\n    }\n\n    function usdc_for_iqr() public view returns (uint256) {\n        return _usdc_for_iqr;\n    }\n\n    function usdc_for_eth() public view returns (uint256) {\n        return _usdc_for_eth;\n    }\n\n    function leftToSale() public view returns (uint256) {\n        return _leftToSale;\n    }\n\n    function cold_wallet() public view returns (address) {\n        return _cold_wallet;\n    }\n\n    function token() public view returns (IQRToken) {\n        return _token;\n    }\n\n    function setUSDCforIQR(uint256 _usdc_for_iqr_) public onlyMinter {\n        _usdc_for_iqr = _usdc_for_iqr_;\n    }\n\n    function setUSDCforETH(uint256 _usdc_for_eth_) public onlyMinter {\n        _usdc_for_eth = _usdc_for_eth_;\n    }\n\n    function setColdWallet(address _cold_wallet_) public onlyMinter {\n        _cold_wallet = _cold_wallet_;\n    }\n\n    function setToken(IQRToken _token_) public onlyMinter {\n        _token = _token_;\n    }\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5061002333640100000000610068810204565b60066001556133246002556aa56fa5b99019a5c800000060035560048054600160a060020a031916735bac0ce2276ebe6845c31c86499c6d7f5c9b0650179055610145565b610080600082640100000000610c9c6100b782021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811615156100cc57600080fd5b6100df828264010000000061010e810204565b156100e957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216151561012557600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610d62806101546000396000f3006080604052600436106100e25763ffffffff60e060020a6000350416630416a028811461024157806304f5d3be1461029857806305ab421d146102c957806306087e5b146102ed578063065483451461030e578063144fa6d7146103355780634b39bfa7146103565780635816ba9d1461036e5780635a02a5011461038f5780636684bfe4146103e6578063983b2d561461043d578063986502751461045e5780639c9f09b214610473578063aa271e1a14610488578063b65dc413146104bd578063b9ac09a8146104e1578063bcaa8699146104f6578063fc0c546a1461050e575b60008067016345785d8a000034116100f957600080fd5b600554600160a060020a0316151561011057600080fd5b600454600160a060020a0316151561012757600080fd5b3491506101516001546101456002548561052390919063ffffffff16565b9063ffffffff61055c16565b600354909150610167908263ffffffff61057f16565b600355600554604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a03909216916340c10f19916044808201926020929091908290030181600087803b1580156101d757600080fd5b505af11580156101eb573d6000803e3d6000fd5b505050506040513d602081101561020157600080fd5b5050600454604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561023c573d6000803e3d6000fd5b505050005b34801561024d57600080fd5b5060408051602060048035808201358381028086018501909652808552610296953695939460249493850192918291850190849080828437509497506105969650505050505050565b005b3480156102a457600080fd5b506102ad610679565b60408051600160a060020a039092168252519081900360200190f35b3480156102d557600080fd5b50610296600160a060020a0360043516602435610688565b3480156102f957600080fd5b50610296600160a060020a0360043516610768565b34801561031a57600080fd5b506103236107ab565b60408051918252519081900360200190f35b34801561034157600080fd5b50610296600160a060020a03600435166107b1565b34801561036257600080fd5b506102966004356107f4565b34801561037a57600080fd5b50610296600160a060020a036004351661080d565b34801561039b57600080fd5b50604080516020600480358082013583810280860185019096528085526102969536959394602494938501929182918501908490808284375094975050933594506108bf9350505050565b3480156103f257600080fd5b50604080516020600480358082013583810280860185019096528085526102969536959394602494938501929182918501908490808284375094975050933594506109cb9350505050565b34801561044957600080fd5b50610296600160a060020a0360043516610aa9565b34801561046a57600080fd5b50610296610ac9565b34801561047f57600080fd5b50610323610ad4565b34801561049457600080fd5b506104a9600160a060020a0360043516610ada565b604080519115158252519081900360200190f35b3480156104c957600080fd5b50610296600160a060020a0360043516602435610af2565b3480156104ed57600080fd5b50610323610ba7565b34801561050257600080fd5b50610296600435610bad565b34801561051a57600080fd5b506102ad610bc6565b6000808315156105365760009150610555565b5082820282848281151561054657fe5b041461055157600080fd5b8091505b5092915050565b60008080831161056b57600080fd5b828481151561057657fe5b04949350505050565b6000808383111561058f57600080fd5b5050900390565b60006105a133610ada565b15156105ac57600080fd5b600554600160a060020a031615156105c357600080fd5b5060005b8151811015610675576005548251600160a060020a039091169063b65dc413908490849081106105f357fe5b9060200190602002015160006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b5050600190920191506105c79050565b5050565b600454600160a060020a031690565b61069133610ada565b151561069c57600080fd5b600554600160a060020a031615156106b357600080fd5b6003546106c6908263ffffffff61057f16565b600355600554604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d602081101561076257600080fd5b50505050565b61077133610ada565b151561077c57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025490565b6107ba33610ada565b15156107c557600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6107fd33610ada565b151561080857600080fd5b600155565b61081633610ada565b151561082157600080fd5b600554600160a060020a0316151561083857600080fd5b600554604080517fb65dc413000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152600060248301819052925193169263b65dc4139260448084019391929182900301818387803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b5050505050565b60006108ca33610ada565b15156108d557600080fd5b600554600160a060020a031615156108ec57600080fd5b825160035461090291840263ffffffff61057f16565b6003555060005b82518110156109c6576005548351600160a060020a03909116906340c10f199085908490811061093557fe5b90602001906020020151846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b505050506040513d60208110156109bc57600080fd5b5050600101610909565b505050565b60006109d633610ada565b15156109e157600080fd5b600554600160a060020a031615156109f857600080fd5b5060005b82518110156109c6576005548351600160a060020a039091169063b65dc41390859084908110610a2857fe5b90602001906020020151846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b5050600190920191506109fc9050565b610ab233610ada565b1515610abd57600080fd5b610ac681610bd5565b50565b610ad233610c1d565b565b60015490565b6000610aec818363ffffffff610c6516565b92915050565b610afb33610ada565b1515610b0657600080fd5b600554600160a060020a03161515610b1d57600080fd5b600554604080517fb65dc413000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163b65dc41391604480830192600092919082900301818387803b158015610b8b57600080fd5b505af1158015610b9f573d6000803e3d6000fd5b505050505050565b60035490565b610bb633610ada565b1515610bc157600080fd5b600255565b600554600160a060020a031690565b610be660008263ffffffff610c9c16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610c2e60008263ffffffff610cea16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610c7c57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515610cb157600080fd5b610cbb8282610c65565b15610cc557600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610cff57600080fd5b610d098282610c65565b1515610d1457600080fd5b600160a060020a0316600090815260209190915260409020805460ff191690555600a165627a7a7230582026bc20ec66adaccc4d59b803819a8812c86a1b21f300f72bc88c10eaca4970ce0029"
}