{
  "address": "0x0e5632feb2c2619dba9c7e2dc5a7ed3fd14969da",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArconaMarketplaceContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity 0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC721Interface {\n    //ERC721\n    function balanceOf(address owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 tokenID) public view returns (address owner);\n    function transfer(address to, uint256 tokenID) public returns (bool);\n    function approve(address to, uint256 tokenID) public returns (bool);\n    function takeOwnership(uint256 tokenID) public;\n    function totalSupply() public view returns (uint);\n    function owns(address owner, uint256 tokenID) public view returns (bool);\n    function allowance(address claimant, uint256 tokenID) public view returns (bool);\n    function transferFrom(address from, address to, uint256 tokenID) public returns (bool);\n    function createLand(address owner) external returns (uint);\n}\n\n\ncontract ERC20 {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract Ownable {\n    address public owner;\n    mapping(address => bool) admins;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event AddAdmin(address indexed admin);\n    event DelAdmin(address indexed admin);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n\n    function addAdmin(address _adminAddress) external onlyOwner {\n        require(_adminAddress != address(0));\n        admins[_adminAddress] = true;\n        emit AddAdmin(_adminAddress);\n    }\n\n    function delAdmin(address _adminAddress) external onlyOwner {\n        require(admins[_adminAddress]);\n        admins[_adminAddress] = false;\n        emit DelAdmin(_adminAddress);\n    }\n\n    function isAdmin(address _adminAddress) public view returns (bool) {\n        return admins[_adminAddress];\n    }\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\ninterface NewAuctionContract {\n    function receiveAuction(address _token, uint _tokenId, uint _startPrice, uint _stopTime) external returns (bool);\n}\n\n\ncontract ArconaMarketplaceContract is Ownable {\n    using SafeMath for uint;\n\n    ERC20 public arconaToken;\n\n    struct Auction {\n        address owner;\n        address token;\n        uint tokenId;\n        uint startPrice;\n        uint stopTime;\n        address winner;\n        uint executeTime;\n        uint finalPrice;\n        bool executed;\n        bool exists;\n    }\n\n    mapping(address => bool) public acceptedTokens;\n    mapping(address => bool) public whiteList;\n    mapping (address => bool) public users;\n    mapping(uint256 => Auction) public auctions;\n    //token => token_id = auction id\n    mapping (address => mapping (uint => uint)) public auctionIndex;\n    mapping(address => uint256[]) private ownedAuctions;\n    uint private lastAuctionId;\n    uint defaultExecuteTime = 24 hours;\n    uint public auctionFee = 300; //3%\n    uint public gasInTokens = 1000000000000000000;\n    uint public minDuration = 1;\n    uint public maxDuration = 20160;\n    address public profitAddress;\n\n    event ReceiveCreateAuction(address from, uint tokenId, address token);\n    event AddAcceptedToken(address indexed token);\n    event DelAcceptedToken(address indexed token);\n    event AddWhiteList(address indexed addr);\n    event DelWhiteList(address indexed addr);\n    event NewAuction(address indexed owner, uint tokenId, uint auctionId);\n    event AddUser(address indexed user);\n    event GetToken(uint auctionId, address winner);\n    event SetWinner(address winner, uint auctionId, uint finalPrice, uint executeTime);\n    event CancelAuction(uint auctionId);\n    event RestartAuction(uint auctionId);\n\n    constructor(address _token, address _profitAddress) public {\n        arconaToken = ERC20(_token);\n        profitAddress = _profitAddress;\n    }\n\n\n    function() public payable {\n        if (!users[msg.sender]) {\n            users[msg.sender] = true;\n            emit AddUser(msg.sender);\n        }\n    }\n\n\n    function receiveCreateAuction(address _from, address _token, uint _tokenId, uint _startPrice, uint _duration) public returns (bool) {\n        require(isAcceptedToken(_token));\n        require(_duration >= minDuration && _duration <= maxDuration);\n        _createAuction(_from, _token, _tokenId, _startPrice, _duration);\n        emit ReceiveCreateAuction(_from, _tokenId, _token);\n        return true;\n    }\n\n\n    function createAuction(address _token, uint _tokenId, uint _startPrice, uint _duration) external returns (bool) {\n        require(isAcceptedToken(_token));\n        require(_duration >= minDuration && _duration <= maxDuration);\n        _createAuction(msg.sender, _token, _tokenId, _startPrice, _duration);\n        return true;\n    }\n\n\n    function _createAuction(address _from, address _token, uint _tokenId, uint _startPrice, uint _duration) internal returns (uint) {\n        require(ERC721Interface(_token).transferFrom(_from, this, _tokenId));\n\n        auctions[++lastAuctionId] = Auction({\n            owner : _from,\n            token : _token,\n            tokenId : _tokenId,\n            startPrice : _startPrice,\n            //startTime : now,\n            stopTime : now + (_duration * 1 minutes),\n            winner : address(0),\n            executeTime : now + (_duration * 1 minutes) + defaultExecuteTime,\n            finalPrice : 0,\n            executed : false,\n            exists: true\n            });\n\n        auctionIndex[_token][_tokenId] = lastAuctionId;\n        ownedAuctions[_from].push(lastAuctionId);\n\n        emit NewAuction(_from, _tokenId, lastAuctionId);\n        return lastAuctionId;\n    }\n\n\n    function setWinner(address _winner, uint _auctionId, uint _finalPrice, uint _executeTime) onlyAdmin external {\n        require(auctions[_auctionId].exists);\n        require(!auctions[_auctionId].executed);\n        require(now > auctions[_auctionId].stopTime);\n        //require(auctions[_auctionId].winner == address(0));\n        require(_finalPrice >= auctions[_auctionId].startPrice);\n\n        auctions[_auctionId].winner = _winner;\n        auctions[_auctionId].finalPrice = _finalPrice;\n        if (_executeTime > 0) {\n            auctions[_auctionId].executeTime = now + (_executeTime * 1 minutes);\n        }\n        emit SetWinner(_winner, _auctionId, _finalPrice, _executeTime);\n    }\n\n\n    function getToken(uint _auctionId) external {\n        require(auctions[_auctionId].exists);\n        require(!auctions[_auctionId].executed);\n        require(now <= auctions[_auctionId].executeTime);\n        require(msg.sender == auctions[_auctionId].winner);\n\n        uint fullPrice = auctions[_auctionId].finalPrice;\n        require(arconaToken.transferFrom(msg.sender, this, fullPrice));\n\n        if (!inWhiteList(auctions[_auctionId].owner)) {\n            uint fee = valueFromPercent(fullPrice, auctionFee);\n            fullPrice = fullPrice.sub(fee).sub(gasInTokens);\n        }\n        arconaToken.transfer(auctions[_auctionId].owner, fullPrice);\n\n        require(ERC721Interface(auctions[_auctionId].token).transfer(auctions[_auctionId].winner, auctions[_auctionId].tokenId));\n        auctions[_auctionId].executed = true;\n        emit GetToken(_auctionId, msg.sender);\n    }\n\n\n    function cancelAuction(uint _auctionId) external {\n        require(auctions[_auctionId].exists);\n        require(!auctions[_auctionId].executed);\n        require(msg.sender == auctions[_auctionId].owner);\n        require(now > auctions[_auctionId].executeTime);\n\n        require(ERC721Interface(auctions[_auctionId].token).transfer(auctions[_auctionId].owner, auctions[_auctionId].tokenId));\n        emit CancelAuction(_auctionId);\n    }\n\n    function restartAuction(uint _auctionId, uint _startPrice, uint _duration) external {\n        require(auctions[_auctionId].exists);\n        require(!auctions[_auctionId].executed);\n        require(msg.sender == auctions[_auctionId].owner);\n        require(now > auctions[_auctionId].executeTime);\n\n        auctions[_auctionId].startPrice = _startPrice;\n        auctions[_auctionId].stopTime = now + (_duration * 1 minutes);\n        auctions[_auctionId].executeTime = now + (_duration * 1 minutes) + defaultExecuteTime;\n        emit RestartAuction(_auctionId);\n    }\n\n    function migrateAuction(uint _auctionId, address _newAuction) external {\n        require(auctions[_auctionId].exists);\n        require(!auctions[_auctionId].executed);\n        require(msg.sender == auctions[_auctionId].owner);\n        require(now > auctions[_auctionId].executeTime);\n\n        require(ERC721Interface(auctions[_auctionId].token).approve(_newAuction, auctions[_auctionId].tokenId));\n        require(NewAuctionContract(_newAuction).receiveAuction(\n                auctions[_auctionId].token,\n                auctions[_auctionId].tokenId,\n                auctions[_auctionId].startPrice,\n                auctions[_auctionId].stopTime\n            ));\n    }\n\n\n    function ownerAuctionCount(address _owner) external view returns (uint256) {\n        return ownedAuctions[_owner].length;\n    }\n\n\n    function auctionsOf(address _owner) external view returns (uint256[]) {\n        return ownedAuctions[_owner];\n    }\n\n\n    function addAcceptedToken(address _token) onlyAdmin external {\n        require(_token != address(0));\n        acceptedTokens[_token] = true;\n        emit AddAcceptedToken(_token);\n    }\n\n\n    function delAcceptedToken(address _token) onlyAdmin external {\n        require(acceptedTokens[_token]);\n        acceptedTokens[_token] = false;\n        emit DelAcceptedToken(_token);\n    }\n\n\n    function addWhiteList(address _address) onlyAdmin external {\n        require(_address != address(0));\n        whiteList[_address] = true;\n        emit AddWhiteList(_address);\n    }\n\n\n    function delWhiteList(address _address) onlyAdmin external {\n        require(whiteList[_address]);\n        whiteList[_address] = false;\n        emit DelWhiteList(_address);\n    }\n\n\n    function setDefaultExecuteTime(uint _hours) onlyAdmin external {\n        defaultExecuteTime = _hours * 1 hours;\n    }\n\n\n    function setAuctionFee(uint _fee) onlyAdmin external {\n        auctionFee = _fee;\n    }\n\n\n    function setGasInTokens(uint _gasInTokens) onlyAdmin external {\n        gasInTokens = _gasInTokens;\n    }\n\n\n    function setMinDuration(uint _minDuration) onlyAdmin external {\n        minDuration = _minDuration;\n    }\n\n\n    function setMaxDuration(uint _maxDuration) onlyAdmin external {\n        maxDuration = _maxDuration;\n    }\n\n\n    function setProfitAddress(address _profitAddress) onlyOwner external {\n        require(_profitAddress != address(0));\n        profitAddress = _profitAddress;\n    }\n\n\n    function isAcceptedToken(address _token) public view returns (bool) {\n        return acceptedTokens[_token];\n    }\n\n\n    function inWhiteList(address _address) public view returns (bool) {\n        return whiteList[_address];\n    }\n\n\n    function withdrawTokens() onlyAdmin public {\n        require(arconaToken.balanceOf(this) > 0);\n        arconaToken.transfer(profitAddress, arconaToken.balanceOf(this));\n    }\n\n    //1% - 100, 10% - 1000 50% - 5000\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\n        uint _amount = _value.mul(_percent).div(10000);\n        return (_amount);\n    }\n\n    function destruct() onlyOwner public {\n        selfdestruct(owner);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"receiveCreateAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minDuration\",\"type\":\"uint256\"}],\"name\":\"setMinDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerAuctionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"},{\"name\":\"_executeTime\",\"type\":\"uint256\"}],\"name\":\"setWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arconaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAcceptedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"setDefaultExecuteTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"stopTime\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"executeTime\",\"type\":\"uint256\"},{\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasInTokens\",\"type\":\"uint256\"}],\"name\":\"setGasInTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"delAcceptedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitAddress\",\"type\":\"address\"}],\"name\":\"setProfitAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"migrateAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"auctionsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"restartAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAuctionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_profitAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ReceiveCreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DelAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DelWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"executeTime\",\"type\":\"uint256\"}],\"name\":\"SetWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"RestartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DelAdmin\",\"type\":\"event\"}]",
  "bytecode": "608060405262015180600a5561012c600b55670de0b6b3a7640000600c556001600d55614ec0600e5534801561003457600080fd5b50604051604080611e8583398101604052805160209091015160008054600160a060020a0319908116331790915560028054600160a060020a03948516908316179055600f8054939092169216919091179055611def806100966000396000f3006080604052600436106101e25763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663100a0ed1811461023e578063123702e21461028257806314525b6b146102b35780631674bade146102da5780631a9aa710146102f25780631da835501461031357806324d7806c1461033d57806329d592bf1461035e5780632b68b9c61461037357806333a87ade14610388578063372c12b11461039d5780633b6e750f146103be5780633eee83f1146103df57806345262b05146104005780635671576114610418578063571a26a01461042d578063605e5ee1146104ad57806361beb1d7146104ce57806362d91855146104f857806369e0e346146105195780636db5c8fd1461053a578063704802751461054f5780638059382a14610570578063810869181461058857806382cf114c146105a957806382dc4a05146105ca5780638d8f2adb146105eb5780638da5cb5b1461060057806396b5a75514610615578063a87430ba1461062d578063c70fe6bd1461064e578063c824a22214610672578063cf0f34c4146106e3578063e1d2f649146106fb578063e4b50cb814610719578063e7cd4a0414610731578063eba39dab14610752578063f2fde38b14610776578063f59e754c14610797575b3360009081526005602052604090205460ff16151561023c5733600081815260056020526040808220805460ff19166001179055517f93e8ef53fa1762269961bdc02811e560fa10787f7f2f9c13f74ddad8221614d29190a25b005b34801561024a57600080fd5b5061026e600160a060020a03600435811690602435166044356064356084356107af565b604080519115158252519081900360200190f35b34801561028e57600080fd5b50610297610848565b60408051600160a060020a039092168252519081900360200190f35b3480156102bf57600080fd5b506102c8610857565b60408051918252519081900360200190f35b3480156102e657600080fd5b5061023c60043561085d565b3480156102fe57600080fd5b506102c8600160a060020a0360043516610876565b34801561031f57600080fd5b5061023c600160a060020a0360043516602435604435606435610891565b34801561034957600080fd5b5061026e600160a060020a03600435166109da565b34801561036a57600080fd5b506102976109f8565b34801561037f57600080fd5b5061023c610a07565b34801561039457600080fd5b506102c8610a2c565b3480156103a957600080fd5b5061026e600160a060020a0360043516610a32565b3480156103ca57600080fd5b5061026e600160a060020a0360043516610a47565b3480156103eb57600080fd5b5061023c600160a060020a0360043516610a65565b34801561040c57600080fd5b5061023c600435610ada565b34801561042457600080fd5b506102c8610af7565b34801561043957600080fd5b50610445600435610afd565b60408051600160a060020a039b8c168152998b1660208b015289810198909852606089019690965260808801949094529190961660a086015260c085019590955260e08401949094529215156101008301529115156101208201529051908190036101400190f35b3480156104b957600080fd5b5061023c600160a060020a0360043516610b64565b3480156104da57600080fd5b5061026e600160a060020a0360043516602435604435606435610be8565b34801561050457600080fd5b5061023c600160a060020a0360043516610c36565b34801561052557600080fd5b5061026e600160a060020a0360043516610cbd565b34801561054657600080fd5b506102c8610cdb565b34801561055b57600080fd5b5061023c600160a060020a0360043516610ce1565b34801561057c57600080fd5b5061023c600435610d5c565b34801561059457600080fd5b5061023c600160a060020a0360043516610d75565b3480156105b557600080fd5b5061023c600160a060020a0360043516610df9565b3480156105d657600080fd5b5061026e600160a060020a0360043516610e54565b3480156105f757600080fd5b5061023c610e69565b34801561060c57600080fd5b5061029761104b565b34801561062157600080fd5b5061023c60043561105a565b34801561063957600080fd5b5061026e600160a060020a03600435166111d2565b34801561065a57600080fd5b5061023c600435600160a060020a03602435166111e7565b34801561067e57600080fd5b50610693600160a060020a03600435166113fa565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106cf5781810151838201526020016106b7565b505050509050019250505060405180910390f35b3480156106ef57600080fd5b5061023c600435611466565b34801561070757600080fd5b5061023c60043560243560443561147f565b34801561072557600080fd5b5061023c60043561156a565b34801561073d57600080fd5b5061023c600160a060020a03600435166118d1565b34801561075e57600080fd5b506102c8600160a060020a0360043516602435611946565b34801561078257600080fd5b5061023c600160a060020a0360043516611963565b3480156107a357600080fd5b5061023c6004356119f7565b60006107ba85610a47565b15156107c557600080fd5b600d5482101580156107d95750600e548211155b15156107e457600080fd5b6107f18686868686611a10565b5060408051600160a060020a0380891682526020820187905287168183015290517f52cf95338051277639fa0945f1014440443e26a47d16f0ccfd0f11c543b574969181900360600190a150600195945050505050565b600f54600160a060020a031681565b600b5481565b610866336109da565b151561087157600080fd5b600d55565b600160a060020a031660009081526008602052604090205490565b61089a336109da565b15156108a557600080fd5b600083815260066020526040902060080154610100900460ff1615156108ca57600080fd5b60008381526006602052604090206008015460ff16156108e957600080fd5b600083815260066020526040902060040154421161090657600080fd5b60008381526006602052604090206003015482101561092457600080fd5b600083815260066020526040812060058101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617905560070183905581111561098457600083815260066020819052604090912042603c8402019101555b60408051600160a060020a0386168152602081018590528082018490526060810183905290517f6df7f1ac1af0d9df17b3f57818b7c7fb72d75e2acdbf61fca4bc5971619823ce9181900360800190a150505050565b600160a060020a031660009081526001602052604090205460ff1690565b600254600160a060020a031681565b600054600160a060020a03163314610a1e57600080fd5b600054600160a060020a0316ff5b600c5481565b60046020526000908152604090205460ff1681565b600160a060020a031660009081526003602052604090205460ff1690565b610a6e336109da565b1515610a7957600080fd5b600160a060020a0381161515610a8e57600080fd5b600160a060020a038116600081815260036020526040808220805460ff19166001179055517f8d12536a26e1c757d393b039469ce97499ed4a5c39f067cd950f9295a269061b9190a250565b610ae3336109da565b1515610aee57600080fd5b610e1002600a55565b600d5481565b6006602081905260009182526040909120805460018201546002830154600384015460048501546005860154968601546007870154600890970154600160a060020a0396871698958716979496939592949390921692909160ff808216916101009004168a565b610b6d336109da565b1515610b7857600080fd5b600160a060020a03811660009081526004602052604090205460ff161515610b9f57600080fd5b600160a060020a038116600081815260046020526040808220805460ff19169055517f4be8d593c63e0ba664ad9b6f5158c6dbb2553758fbeb4e947d2e0fb93e34c0ab9190a250565b6000610bf385610a47565b1515610bfe57600080fd5b600d548210158015610c125750600e548211155b1515610c1d57600080fd5b610c2a3386868686611a10565b50600195945050505050565b600054600160a060020a03163314610c4d57600080fd5b600160a060020a03811660009081526001602052604090205460ff161515610c7457600080fd5b600160a060020a038116600081815260016020526040808220805460ff19169055517fb6932914dcfc2a1d602e4e0cd9f9d99dc9640ccfc789b1b83a691fc0c90c24c39190a250565b600160a060020a031660009081526004602052604090205460ff1690565b600e5481565b600054600160a060020a03163314610cf857600080fd5b600160a060020a0381161515610d0d57600080fd5b600160a060020a0381166000818152600160208190526040808320805460ff1916909217909155517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9190a250565b610d65336109da565b1515610d7057600080fd5b600c55565b610d7e336109da565b1515610d8957600080fd5b600160a060020a03811660009081526003602052604090205460ff161515610db057600080fd5b600160a060020a038116600081815260036020526040808220805460ff19169055517f069d00d2f2dbd28f23c2700b746dcb098284ac37ffe50573648bbdd69ff9d4909190a250565b600054600160a060020a03163314610e1057600080fd5b600160a060020a0381161515610e2557600080fd5b600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60036020526000908152604090205460ff1681565b610e72336109da565b1515610e7d57600080fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b158015610ee257600080fd5b505af1158015610ef6573d6000803e3d6000fd5b505050506040513d6020811015610f0c57600080fd5b505111610f1857600080fd5b600254600f54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169363a9059cbb93169184916370a08231916024808201926020929091908290030181600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b505050506040513d6020811015610fb557600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b505050506040513d602081101561104757600080fd5b5050565b600054600160a060020a031681565b600081815260066020526040902060080154610100900460ff16151561107f57600080fd5b60008181526006602052604090206008015460ff161561109e57600080fd5b600081815260066020526040902054600160a060020a031633146110c157600080fd5b6000818152600660208190526040909120015442116110df57600080fd5b60008181526006602090815260408083206001810154815460029092015483517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201526024810191909152925191169363a9059cbb93604480850194919392918390030190829087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b505050506040513d602081101561118f57600080fd5b5051151561119c57600080fd5b6040805182815290517fbea0e66c2d42b9131695ceea7d1aaa21b37e93070cde19c9b5fbd686a32592929181900360200190a150565b60056020526000908152604090205460ff1681565b600082815260066020526040902060080154610100900460ff16151561120c57600080fd5b60008281526006602052604090206008015460ff161561122b57600080fd5b600082815260066020526040902054600160a060020a0316331461124e57600080fd5b60008281526006602081905260409091200154421161126c57600080fd5b6000828152600660209081526040808320600181015460029091015482517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526024820192909252925191169363095ea7b393604480850194919392918390030190829087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050506040513d602081101561131a57600080fd5b5051151561132757600080fd5b600082815260066020908152604080832060018101546002820154600383015460049384015485517fb783508c000000000000000000000000000000000000000000000000000000008152600160a060020a039485169581019590955260248501929092526044840152606483015291519185169363b783508c9360848084019491939192918390030190829087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050506040513d60208110156113ed57600080fd5b5051151561104757600080fd5b600160a060020a03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561145a57602002820191906000526020600020905b815481526020019060010190808311611446575b50505050509050919050565b61146f336109da565b151561147a57600080fd5b600e55565b600083815260066020526040902060080154610100900460ff1615156114a457600080fd5b60008381526006602052604090206008015460ff16156114c357600080fd5b600083815260066020526040902054600160a060020a031633146114e657600080fd5b60008381526006602081905260409091200154421161150457600080fd5b6000838152600660208181526040928390206003810186905542603c86020160048201819055600a5401920191909155815185815291517f4026f0fcda522fa75132cf30fa90ee1dd7890120be3ce3ec5cf9f78694b5946a9281900390910190a1505050565b6000818152600660205260408120600801548190610100900460ff16151561159157600080fd5b60008381526006602052604090206008015460ff16156115b057600080fd5b600083815260066020819052604090912001544211156115cf57600080fd5b600083815260066020526040902060050154600160a060020a031633146115f557600080fd5b60008381526006602090815260408083206007015460025482517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529251919650600160a060020a0316936323b872dd93606480850194919392918390030190829087803b15801561167a57600080fd5b505af115801561168e573d6000803e3d6000fd5b505050506040513d60208110156116a457600080fd5b505115156116b157600080fd5b6000838152600660205260409020546116d290600160a060020a0316610cbd565b151561170d576116e482600b54611d36565b600c5490915061170a906116fe848463ffffffff611d6816565b9063ffffffff611d6816565b91505b60025460008481526006602090815260408083205481517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03918216600482015260248101889052915194169363a9059cbb93604480840194938390030190829087803b15801561178657600080fd5b505af115801561179a573d6000803e3d6000fd5b505050506040513d60208110156117b057600080fd5b505060008381526006602090815260408083206001810154600582015460029092015483517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201526024810191909152925191169363a9059cbb93604480850194919392918390030190829087803b15801561183b57600080fd5b505af115801561184f573d6000803e3d6000fd5b505050506040513d602081101561186557600080fd5b5051151561187257600080fd5b600083815260066020908152604091829020600801805460ff191660011790558151858152339181019190915281517fe845626ba2a08ab4c2056f4bc64b91bcbe039c8c7fc3e7def11408870cf5409c929181900390910190a1505050565b6118da336109da565b15156118e557600080fd5b600160a060020a03811615156118fa57600080fd5b600160a060020a038116600081815260046020526040808220805460ff19166001179055517ff8d5f40934646cedded2cab1b5960f020db583f154fabcf831277b87d1803d139190a250565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461197a57600080fd5b600160a060020a038116151561198f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b611a00336109da565b1515611a0b57600080fd5b600b55565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301523060248301526044820186905291516000928716916323b872dd91606480830192602092919082900301818787803b158015611a8257600080fd5b505af1158015611a96573d6000803e3d6000fd5b505050506040513d6020811015611aac57600080fd5b50511515611ab957600080fd5b6101406040519081016040528087600160a060020a0316815260200186600160a060020a0316815260200185815260200184815260200183603c02420181526020016000600160a060020a03168152602001600a5484603c024201018152602001600081526020016000151581526020016001151581525060066000600960008154600101919050819055815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a815481600160a060020a030219169083600160a060020a0316021790555060c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055509050506009546007600087600160a060020a0316600160a060020a031681526020019081526020016000206000868152602001908152602001600020819055506008600087600160a060020a0316600160a060020a03168152602001908152602001600020600954908060018154018082558091505090600182039060005260206000200160009091929091909150555085600160a060020a03167fc078426956212265671526c1abdaea1311badbf1505fe0711db77bca2fa9afae85600954604051808381526020018281526020019250505060405180910390a25060095495945050505050565b600080611d5b612710611d4f868663ffffffff611d7a16565b9063ffffffff611dac16565b90508091505b5092915050565b600082821115611d7457fe5b50900390565b600080831515611d8d5760009150611d61565b50828202828482811515611d9d57fe5b0414611da557fe5b9392505050565b6000808284811515611dba57fe5b049493505050505600a165627a7a72305820dada6c82eb83443b2b740bb0f70cab41192ffa21613e714c669bc71f1b8979cf00290000000000000000000000000f71b8de197a1c84d31de0f1fa7926c365f052b3000000000000000000000000603542187b3b06b9de01c9961b017c117d8ebad6",
  "constructorArguments": "0000000000000000000000000f71b8de197a1c84d31de0f1fa7926c365f052b3000000000000000000000000603542187b3b06b9de01c9961b017c117d8ebad6"
}