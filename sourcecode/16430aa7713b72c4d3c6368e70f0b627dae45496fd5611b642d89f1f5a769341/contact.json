{
  "address": "0xef5b7b041f0b6aa62e70d16f81238fe2261e72bb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-17\n*/\n\npragma solidity 0.4.24;\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    \n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) public returns (bool success);\n    function approve(address spender, uint256 tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n        internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\ncontract TokenVesting is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    event Released(uint256 amount);\n    event Revoked();\n\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    uint256 public cliff;\n    uint256 public start;\n    uint256 public duration;\n\n    bool public revocable;\n\n    mapping (address => uint256) public released;\n    mapping (address => bool) public revoked;\n\n    /**\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n     * of the balance will have vested.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _start the time (as Unix time) at which point vesting starts \n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _revocable whether the vesting is revocable or not\n     */\n    constructor(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        bool _revocable\n    )\n        public\n    {\n        require(_beneficiary != address(0));\n        require(_cliff <= _duration);\n\n        beneficiary = _beneficiary;\n        revocable = _revocable;\n        duration = _duration;\n        cliff = _start.add(_cliff);\n        start = _start;\n    }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     * @param token ERC20 token which is being vested\n     */\n    function release(ERC20 token) public {\n        uint256 unreleased = releasableAmount(token);\n\n        require(unreleased > 0);\n\n        released[token] = released[token].add(unreleased);\n\n        token.safeTransfer(beneficiary, unreleased);\n\n        emit Released(unreleased);\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param token ERC20 token which is being vested\n     */\n    function revoke(ERC20 token) public onlyOwner {\n        require(revocable);\n        require(!revoked[token]);\n\n        uint256 balance = token.balanceOf(this);\n\n        uint256 unreleased = releasableAmount(token);\n        uint256 refund = balance.sub(unreleased);\n\n        revoked[token] = true;\n\n        token.safeTransfer(owner, refund);\n\n        emit Revoked();\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\n     * @param token ERC20 token which is being vested\n     */\n    function releasableAmount(ERC20 token) public view returns (uint256) {\n        return vestedAmount(token).sub(released[token]);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param token ERC20 token which is being vested\n     */\n    function vestedAmount(ERC20 token) public view returns (uint256) {\n        uint256 currentBalance = token.balanceOf(this);\n        uint256 totalBalance = currentBalance.add(released[token]);\n\n        if (block.timestamp < cliff) {\n          return 0;\n        } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n          return totalBalance;\n        } else {\n          uint256 gap = 86400 * 30;\n          uint256 start_gap = block.timestamp.sub(start).div(gap).mul(gap);\n          return totalBalance.mul(start_gap).div(duration);\n        }\n    }\n\n    /**\n     * Don't accept ETH\n     */\n    function () public payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a0806109c28339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317905591939091600160a060020a038516151561006457600080fd5b8183111561007157600080fd5b60018054600160a060020a031916600160a060020a0387161790556005805460ff191682151517905560048290556100b684846401000000006100c5810261073f1704565b600255505050600355506100d8565b818101828110156100d257fe5b92915050565b6108db806100e76000396000f3006080604052600436106100b65763ffffffff60e060020a6000350416630fb5a6b481146100bb57806313d033c0146100e25780631726cbc8146100f75780631916558714610118578063384711cc1461013b57806338af3eed1461015c578063715018a61461018d57806374a8f103146101a2578063872a7810146101c35780638da5cb5b146101ec5780639852595c14610201578063be9a655514610222578063f2fde38b14610237578063fa01dc0614610258575b600080fd5b3480156100c757600080fd5b506100d0610279565b60408051918252519081900360200190f35b3480156100ee57600080fd5b506100d061027f565b34801561010357600080fd5b506100d0600160a060020a0360043516610285565b34801561012457600080fd5b50610139600160a060020a03600435166102bd565b005b34801561014757600080fd5b506100d0600160a060020a0360043516610369565b34801561016857600080fd5b506101716104e3565b60408051600160a060020a039092168252519081900360200190f35b34801561019957600080fd5b506101396104f2565b3480156101ae57600080fd5b50610139600160a060020a036004351661055e565b3480156101cf57600080fd5b506101d86106c5565b604080519115158252519081900360200190f35b3480156101f857600080fd5b506101716106ce565b34801561020d57600080fd5b506100d0600160a060020a03600435166106dd565b34801561022e57600080fd5b506100d06106ef565b34801561024357600080fd5b50610139600160a060020a03600435166106f5565b34801561026457600080fd5b506101d8600160a060020a0360043516610718565b60045481565b60025481565b600160a060020a0381166000908152600660205260408120546102b7906102ab84610369565b9063ffffffff61072d16565b92915050565b60006102c882610285565b9050600081116102d757600080fd5b600160a060020a038216600090815260066020526040902054610300908263ffffffff61073f16565b600160a060020a038084166000818152600660205260409020929092556001546103329291168363ffffffff61074c16565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b600080600080600085600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156103cc57600080fd5b505af11580156103e0573d6000803e3d6000fd5b505050506040513d60208110156103f657600080fd5b5051600160a060020a03871660009081526006602052604090205490945061042590859063ffffffff61073f16565b925060025442101561043a57600094506104da565b60045460035461044f9163ffffffff61073f16565b421015806104755750600160a060020a03861660009081526007602052604090205460ff165b15610482578294506104da565b62278d0091506104bd826104b1846104a56003544261072d90919063ffffffff16565b9063ffffffff6107eb16565b9063ffffffff61080916565b6004549091506104d7906104a5858463ffffffff61080916565b94505b50505050919050565b600154600160a060020a031681565b600054600160a060020a0316331461050957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000805481908190600160a060020a0316331461057a57600080fd5b60055460ff16151561058b57600080fd5b600160a060020a03841660009081526007602052604090205460ff16156105b157600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b15801561061257600080fd5b505af1158015610626573d6000803e3d6000fd5b505050506040513d602081101561063c57600080fd5b5051925061064984610285565b915061065b838363ffffffff61072d16565b600160a060020a038086166000818152600760205260408120805460ff1916600117905554929350610696929091168363ffffffff61074c16565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60035481565b600054600160a060020a0316331461070c57600080fd5b61071581610832565b50565b60076020526000908152604090205460ff1681565b60008282111561073957fe5b50900390565b818101828110156102b757fe5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156107af57600080fd5b505af11580156107c3573d6000803e3d6000fd5b505050506040513d60208110156107d957600080fd5b505115156107e657600080fd5b505050565b60008082116107f657fe5b818381151561080157fe5b049392505050565b600082151561081a575060006102b7565b5081810281838281151561082a57fe5b04146102b757fe5b600160a060020a038116151561084757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820417f4a4a7d4eda34f58e7f6cd44f6dd81e6eee5bd3d254c4501f8de786100eb10029000000000000000000000000833ac9eb5fa3de94ec02b0df85b5b11d77db1c51000000000000000000000000000000000000000000000000000000005b48cc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5c1000000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "000000000000000000000000833ac9eb5fa3de94ec02b0df85b5b11d77db1c51000000000000000000000000000000000000000000000000000000005b48cc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5c1000000000000000000000000000000000000000000000000000000000000000001"
}