{
  "address": "0x94b322df3a8206cef343bfd573378c353f2fa4ec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MangachainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-19\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: contracts/MangachainToken.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    uint public totalSupply;\n\n    // ERC223 and ERC20 functions and events\n    function balanceOf(address who) public view returns (uint);\n    function totalSupply() public view returns (uint256 _supply);\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n\n    // ERC223 functions\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n\n    // ERC20 functions and events\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n\n/**\n * @title MangachainToken\n * @dev MangachainToken is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract MangachainToken is ERC223, Pausable {\n    using SafeMath for uint256;\n\n    string public name = \"Mangachain Token\";\n    string public symbol = \"MCT\";\n    uint8 public decimals = 8;\n    uint256 public totalSupply = 5e10 * 1e8;\n    uint256 public distributeAmount = 0;\n    bool public mintingFinished = false;\n    address public depositAddress;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n    mapping (address => uint256) public unlockUnixTime;\n\n    event LockedFunds(address indexed target, uint256 locked);\n    event Burn(address indexed from, uint256 amount);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    /**\n     * @dev Constructor is called only once and can not be called again\n     */\n    function MangachainToken(address _team, address _development, address _marketing, address _release, address _deposit) public {\n      owner = _team;\n      depositAddress = _deposit;\n\n      balanceOf[_team] = totalSupply.mul(15).div(100);\n      balanceOf[_development] = totalSupply.mul(15).div(100);\n      balanceOf[_marketing] = totalSupply.mul(30).div(100);\n      balanceOf[_release] = totalSupply.mul(40).div(100);\n    }\n\n\n    function name() public view returns (string _name) {\n        return name;\n    }\n\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOf[_owner];\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n     * @param targets Addresses to be locked funds\n     * @param unixTimes Unix times when locking up will be finished\n     */\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\n        require(targets.length > 0\n                && targets.length == unixTimes.length);\n\n        for(uint i = 0; i < targets.length; i++){\n            require(unlockUnixTime[targets[i]] < unixTimes[i]);\n            unlockUnixTime[targets[i]] = unixTimes[i];\n            LockedFunds(targets[i], unixTimes[i]);\n        }\n    }\n\n\n    /**\n     * @dev Function that is called when a user or another contract wants to transfer funds\n     */\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) whenNotPaused public returns (bool success) {\n        require(_value > 0\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            require(balanceOf[msg.sender] >= _value);\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value, _data);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    function transfer(address _to, uint _value, bytes _data) whenNotPaused public returns (bool success) {\n        require(_value > 0\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) whenNotPaused public returns (bool success) {\n        require(_value > 0\n                && now > unlockUnixTime[msg.sender]\n                && now > unlockUnixTime[_to]);\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balanceOf[_from] >= _value\n                && allowance[_from][msg.sender] >= _value\n                && now > unlockUnixTime[_from]\n                && now > unlockUnixTime[_to]);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    function distributeTokens(address[] addresses, uint[] amounts) whenNotPaused public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length\n                && now > unlockUnixTime[msg.sender]);\n\n        uint256 totalAmount = 0;\n\n        for(uint i = 0; i < addresses.length; i++){\n            require(amounts[i] > 0\n                    && addresses[i] != 0x0\n                    && now > unlockUnixTime[addresses[i]]);\n\n            amounts[i] = amounts[i].mul(1e8);\n            totalAmount = totalAmount.add(amounts[i]);\n        }\n        require(balanceOf[msg.sender] >= totalAmount);\n\n        for (i = 0; i < addresses.length; i++) {\n            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amounts[i]);\n            Transfer(msg.sender, addresses[i], amounts[i]);\n        }\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n        return true;\n    }\n\n    /**\n    * @dev To collect tokens from target addresses. This function is used when we collect tokens which transfer to our service.\n    * @param _targets collect target addresses\n    */\n    function collectTokens(address[] _targets) onlyOwner whenNotPaused public returns (bool) {\n      require(_targets.length > 0);\n\n      uint256 totalAmount = 0;\n\n      for (uint i = 0; i < _targets.length; i++) {\n        require(_targets[i] != 0x0 && now > unlockUnixTime[_targets[i]]);\n\n        totalAmount = totalAmount.add(balanceOf[_targets[i]]);\n        Transfer(_targets[i], depositAddress, balanceOf[_targets[i]]);\n        balanceOf[_targets[i]] = 0;\n      }\n\n      balanceOf[depositAddress] = balanceOf[depositAddress].add(totalAmount);\n      return true;\n    }\n\n    function setDepositAddress(address _addr) onlyOwner whenNotPaused public {\n      require(_addr != 0x0 && now > unlockUnixTime[_addr]);\n      depositAddress = _addr;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _from The address that will burn the tokens.\n     * @param _unitAmount The amount of token to be burned.\n     */\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n        require(_unitAmount > 0\n                && balanceOf[_from] >= _unitAmount);\n\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\n        totalSupply = totalSupply.sub(_unitAmount);\n        Burn(_from, _unitAmount);\n    }\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n        require(_unitAmount > 0);\n\n        totalSupply = totalSupply.add(_unitAmount);\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n        Mint(_to, _unitAmount);\n        Transfer(address(0), _to, _unitAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        MintFinished();\n        return true;\n    }\n\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\n        distributeAmount = _unitAmount;\n    }\n\n    /**\n     * @dev Function to distribute tokens to the msg.sender automatically\n     *      If distributeAmount is 0, this function doesn't work\n     */\n    function autoDistribute() payable public {\n        require(distributeAmount > 0\n                && balanceOf[depositAddress] >= distributeAmount\n                && now > unlockUnixTime[msg.sender]);\n        if(msg.value > 0) depositAddress.transfer(msg.value);\n\n        balanceOf[depositAddress] = balanceOf[depositAddress].sub(distributeAmount);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);\n        Transfer(depositAddress, msg.sender, distributeAmount);\n    }\n\n    /**\n     * @dev fallback function\n     */\n    function() payable public {\n        autoDistribute();\n     }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000d3d501e82eef99e25843f145bebcaf857e4dba44000000000000000000000000eaf7a844327cf49cdd7f08c5aac402e55f0400030000000000000000000000004c70c2a29089af6107eff1439543246515b09377000000000000000000000000ad78b681302a4a23a66e675b2aefae9218c8b13b00000000000000000000000063cba0b940a225d3b9d035553b175333c0dd7afa"
}