{
  "address": "0x737fa0372c8d001904ae6acaf0552d4015f9c947",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MediBit Token",
  "contractName": "medibitToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-06\n*/\n\ncontract Ownable {\n  address public owner;\n\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract medibitICO is Pausable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\nmapping (address => mapping (address => uint256)) internal allowed;\n\n\n  //Gas/GWei\n  uint constant public minPublicContribAmount = 1 ether;\n  \n\n  // The token being sold\n  medibitToken public token;\n  uint256 constant public tokenDecimals = 18;\n\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime; \n  uint256 public endTime; \n\n\n  // need to be enabled to allow investor to participate in the ico\n  bool public icoEnabled;\n\n  // address where funds are collected\n  address public walletOne;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  // totalSupply\n  uint256 public totalSupply = 50000000000 * (10 ** tokenDecimals);\n  uint256 constant public toekensForBTCandBonus = 12500000000 * (10 ** tokenDecimals);\n  uint256 constant public toekensForTeam = 5000000000 * (10 ** tokenDecimals);\n  uint256 constant public toekensForOthers = 22500000000 * (10 ** tokenDecimals);\n\n\n  //ICO tokens\n  //Is calcluated as: initialICOCap + preSaleCap\n  uint256 public icoCap;\n  uint256 public icoSoldTokens;\n  bool public icoEnded = false;\n\n  address constant public walletTwo = 0x938Ee925D9EFf6698472a19EbAc780667999857B;\n  address constant public walletThree = 0x09E72590206d652BD1aCDB3A8e358AeB3f21513A;\n\n  //Sale rates\n\n  uint256 constant public STANDARD_RATE = 1500000;\n\n  event Burn(address indexed from, uint256 value);\n\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n\n  function medibitICO(address _walletOne) public {\n    require(_walletOne != address(0));\n    token = createTokenContract();\n    \n    //send all dao tokens to multiwallet\n    uint256 tokensToWallet1 = toekensForBTCandBonus;\n    uint256 tokensToWallet2 = toekensForTeam;\n    uint256 tokensToWallet3 = toekensForOthers;\n    \n    walletOne = _walletOne;\n    \n    token.transfer(walletOne, tokensToWallet1);\n    token.transfer(walletTwo, tokensToWallet2);\n    token.transfer(walletThree, tokensToWallet3);\n  }\n\n\n  //\n  // Token related operations\n  //\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (medibitToken) {\n    return new medibitToken();\n  }\n\n\n  // enable token tranferability\n  function enableTokenTransferability() external onlyOwner {\n    require(token != address(0));\n    token.unpause();\n  }\n\n  // disable token tranferability\n  function disableTokenTransferability() external onlyOwner {\n    require(token != address(0));\n    token.pause();\n  }\n\n  // transfer token to owner account for burn\n   function transferUnsoldIcoTokens() external onlyOwner {\n    require(token != address(0));\n    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\n    token.transfer(walletOne, unsoldTokens);\n   }\n\n  //\n  // ICO related operations\n  //\n\n  // set multisign wallet\n  function setwalletOne(address _walletOne) external onlyOwner{\n    // need to be set before the ico start\n    require(!icoEnabled || now < startTime);\n    require(_walletOne != address(0));\n    walletOne = _walletOne;\n  }\n\n\n  // set contribution dates\n  function setContributionDates(uint64 _startTime, uint64 _endTime) external onlyOwner{\n    require(!icoEnabled);\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    startTime = _startTime;\n    endTime = _endTime;\n  }\n\n\n  // enable ICO, need to be true to actually start ico\n  // multisign wallet need to be set, because once ico started, invested funds is transfered to this address\n  // once ico is enabled, following parameters can not be changed anymore:\n  // startTime, endTime, soldPreSaleTokens\n  function enableICO() external onlyOwner{\n    icoEnabled = true;\n    icoCap = totalSupply;\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable whenNotPaused public {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable whenNotPaused {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    uint256 returnWeiAmount;\n\n    // calculate token amount to be created\n    uint rate = getRate();\n    assert(rate > 0);\n    uint256 tokens = weiAmount.mul(rate);\n\n    uint256 newIcoSoldTokens = icoSoldTokens.add(tokens);\n\n    if (newIcoSoldTokens > icoCap) {\n        newIcoSoldTokens = icoCap;\n        tokens = icoCap.sub(icoSoldTokens);\n        uint256 newWeiAmount = tokens.div(rate);\n        returnWeiAmount = weiAmount.sub(newWeiAmount);\n        weiAmount = newWeiAmount;\n    }\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.transfer(beneficiary, tokens);\n    icoSoldTokens = newIcoSoldTokens;\n    if (returnWeiAmount > 0){\n        msg.sender.transfer(returnWeiAmount);\n    }\n\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    walletOne.transfer(address(this).balance);\n  }\n\n\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonMinimumPurchase;\n    bool icoTokensAvailable = icoSoldTokens < icoCap;\n \n    nonMinimumPurchase = msg.value >= minPublicContribAmount;\n    \n\n    return !icoEnded && icoEnabled && withinPeriod && nonMinimumPurchase && icoTokensAvailable;\n  }\n\n\n\n  // end ico by owner, not really needed in normal situation\n  function endIco() external onlyOwner {\n    icoEnded = true;\n    // send unsold tokens to multi-sign wallet\n    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\n    token.transfer(walletOne, unsoldTokens);\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return (icoEnded || icoSoldTokens >= icoCap || now > endTime);\n  }\n\n\n  function getRate() public constant returns(uint){\n    require(now >= startTime);\n      return STANDARD_RATE;\n\n  }\n\n  // drain all eth for owner in an emergency situation\n  function drain() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n\n}\n\n\n\n\n\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\nlibrary SafeERC20 {\n function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\ncontract PausableToken is StandardToken, Pausable {\n  /**\n   * @dev modifier to allow actions only when the contract is not paused or\n   * the sender is the owner of the contract\n   */\n  modifier whenNotPausedOrOwner() {\n    require(msg.sender == owner || !paused);\n    _;\n  }\n\n  function transfer(address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPausedOrOwner returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPausedOrOwner returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n}\n\ncontract medibitToken is PausableToken {\n  string constant public name = \"MEDIBIT\";\n  string constant public symbol = \"MEDIBIT\";\n  uint256 constant public decimals = 18;\n  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\n  uint256 constant INITIAL_SUPPLY = 50000000000 * TOKEN_UNIT;\n\n\n  function medibitToken() public {\n    // Set untransferable by default to the token\n    paused = true;\n    // asign all tokens to the contract creator\n    totalSupply = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b50600380547401000000000000000000000000000000000000000033600160a060020a0319909216821760a060020a60ff021916179091556ba18f07d736b90be5500000006000818155604080519283525190917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916020918190039190910190a33360009081526001602052604090206ba18f07d736b90be5500000009055610a98806100cf6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f25780633f4ba83a146102075780635c975abb1461021e578063661884631461023357806370a08231146102575780638456cb59146102785780638da5cb5b1461028d57806395d89b41146100df578063a9059cbb146102be578063d73dd623146102e2578063dd62ed3e14610306575b600080fd5b3480156100eb57600080fd5b506100f461032d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a0360043516602435610364565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b66103a6565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a03600435811690602435166044356103ac565b3480156101fe57600080fd5b506101b66103f0565b34801561021357600080fd5b5061021c6103f5565b005b34801561022a57600080fd5b5061018d61046d565b34801561023f57600080fd5b5061018d600160a060020a036004351660243561047d565b34801561026357600080fd5b506101b6600160a060020a03600435166104b8565b34801561028457600080fd5b5061021c6104d3565b34801561029957600080fd5b506102a2610550565b60408051600160a060020a039092168252519081900360200190f35b3480156102ca57600080fd5b5061018d600160a060020a036004351660243561055f565b3480156102ee57600080fd5b5061018d600160a060020a036004351660243561059a565b34801561031257600080fd5b506101b6600160a060020a03600435811690602435166105d5565b60408051808201909152600781527f4d45444942495400000000000000000000000000000000000000000000000000602082015281565b600354600090600160a060020a031633148061038a575060035460a060020a900460ff16155b151561039557600080fd5b61039f8383610600565b9392505050565b60005481565b600354600090600160a060020a03163314806103d2575060035460a060020a900460ff16155b15156103dd57600080fd5b6103e8848484610666565b949350505050565b601281565b600354600160a060020a0316331461040c57600080fd5b60035460a060020a900460ff16151561042457600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460a060020a900460ff1681565b600354600090600160a060020a03163314806104a3575060035460a060020a900460ff16155b15156104ae57600080fd5b61039f83836107df565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031633146104ea57600080fd5b60035460a060020a900460ff161561050157600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b600354600090600160a060020a0316331480610585575060035460a060020a900460ff16155b151561059057600080fd5b61039f83836108cf565b600354600090600160a060020a03163314806105c0575060035460a060020a900460ff16155b15156105cb57600080fd5b61039f83836109b2565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a038316151561067d57600080fd5b600160a060020a0384166000908152600160205260409020548211156106a257600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156106d257600080fd5b600160a060020a0384166000908152600160205260409020546106fb908363ffffffff610a4b16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610730908363ffffffff610a5d16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610774908363ffffffff610a4b16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561083457336000908152600260209081526040808320600160a060020a0388168452909152812055610869565b610844818463ffffffff610a4b16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a03831615156108e657600080fd5b3360009081526001602052604090205482111561090257600080fd5b33600090815260016020526040902054610922908363ffffffff610a4b16565b3360009081526001602052604080822092909255600160a060020a03851681522054610954908363ffffffff610a5d16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546109e6908363ffffffff610a5d16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600082821115610a5757fe5b50900390565b60008282018381101561039f57fe00a165627a7a723058209b6ac1262f6fd15cba45ff1c7a3d573f3c3d64338ec87f958d6710f0cb2603b90029"
}