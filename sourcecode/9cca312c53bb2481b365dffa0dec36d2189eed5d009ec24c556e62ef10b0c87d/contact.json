{
  "address": "0x28b94f58b11ac945341329dbf2e5ef7f8bd44225",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Emblem",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-17\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/LeasedEmblem.sol\n\npragma solidity ^0.4.24;\n\n\n\ncontract LeasedEmblem is  ERC721Token, Ownable {\n\n\n  address internal leaseExchange;\n\n\n  struct Metadata {\n    uint256 amount;\n    address leasor;\n    uint256 duration;\n    uint256 tradeExpiry;\n    uint256 leaseExpiry;\n    bool isMining;\n  }\n\n\n  mapping(uint256 => Metadata) public metadata;\n\n\n  mapping(address => uint256[]) internal leasedTokens;\n\n\n  mapping(uint256 => uint256) internal leasedTokensIndex;\n\n\n  mapping (uint256 => address) internal tokenLeasor;\n\n\n  mapping (address => uint256) internal leasedTokensCount;\n\n  uint256 highestId = 1;\n\n  uint256 sixMonths       = 15768000;\n\n  constructor (string _name, string _symbol) public ERC721Token(_name, _symbol) {\n  }\n\n\n\n  function getNewId() public view returns(uint256) {\n    return highestId;\n  }\n\n  function leasorOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenLeasor[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  function balanceOfLeasor(address _leasor) public view returns (uint256) {\n    require(_leasor != address(0));\n    return leasedTokensCount[_leasor];\n  }\n\n  function tokenOfLeasorByIndex(address _leasor,uint256 _index) public view returns (uint256){\n    require(_index < balanceOfLeasor(_leasor));\n    return leasedTokens[_leasor][_index];\n  }\n\n  function addTokenToLeasor(address _to, uint256 _tokenId) internal {\n    require(tokenLeasor[_tokenId] == address(0));\n    tokenLeasor[_tokenId] = _to;\n    leasedTokensCount[_to] = leasedTokensCount[_to].add(1);\n    uint256 length = leasedTokens[_to].length;\n    leasedTokens[_to].push(_tokenId);\n    leasedTokensIndex[_tokenId] = length;\n  }\n\n  function removeTokenFromLeasor(address _from, uint256 _tokenId) internal {\n    require(leasorOf(_tokenId) == _from);\n    leasedTokensCount[_from] = leasedTokensCount[_from].sub(1);\n    tokenLeasor[_tokenId] = address(0);\n\n    uint256 tokenIndex = leasedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = leasedTokens[_from].length.sub(1);\n    uint256 lastToken = leasedTokens[_from][lastTokenIndex];\n\n    leasedTokens[_from][tokenIndex] = lastToken;\n    leasedTokens[_from][lastTokenIndex] = 0;\n    leasedTokens[_from].length--;\n    leasedTokensIndex[_tokenId] = 0;\n    leasedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  function setLeaseExchange(address _leaseExchange) public onlyOwner {\n    leaseExchange = _leaseExchange;\n  }\n\n  function totalAmount() external view returns (uint256) {\n    uint256 amount = 0;\n    for(uint256 i = 0; i < allTokens.length; i++){\n      amount += metadata[allTokens[i]].amount;\n    }\n    return amount;\n  }\n\n  function setMetadata(uint256 _tokenId, uint256 amount, address leasor, uint256 duration,uint256 tradeExpiry, uint256 leaseExpiry) internal {\n    require(exists(_tokenId));\n    metadata[_tokenId]= Metadata(amount,leasor,duration,tradeExpiry,leaseExpiry,false);\n  }\n\n  function getMetadata(uint256 _tokenId) public view returns (uint256, address, uint256, uint256,uint256, bool) {\n    require(exists(_tokenId));\n    return (\n      metadata[_tokenId].amount,\n      metadata[_tokenId].leasor,\n      metadata[_tokenId].duration,\n      metadata[_tokenId].tradeExpiry,\n      metadata[_tokenId].leaseExpiry,\n      metadata[_tokenId].isMining\n    );\n  }\n\n  function getAmountForUser(address owner) external view returns (uint256) {\n    uint256 amount = 0;\n    uint256 numTokens = balanceOf(owner);\n\n    for(uint256 i = 0; i < numTokens; i++){\n      amount += metadata[tokenOfOwnerByIndex(owner,i)].amount;\n    }\n    return amount;\n  }\n\n  function getAmountForUserMining(address owner) external view returns (uint256) {\n    uint256 amount = 0;\n    uint256 numTokens = balanceOf(owner);\n\n    for(uint256 i = 0; i < numTokens; i++){\n      if(metadata[tokenOfOwnerByIndex(owner,i)].isMining) {\n        amount += metadata[tokenOfOwnerByIndex(owner,i)].amount;\n      }\n    }\n    return amount;\n  }\n\n  function getAmount(uint256 _tokenId) public view returns (uint256) {\n    require(exists(_tokenId));\n    return metadata[_tokenId].amount;\n  }\n\n  function getTradeExpiry(uint256 _tokenId) public view returns (uint256) {\n    require(exists(_tokenId));\n    return metadata[_tokenId].tradeExpiry;\n  }\n\n  function getDuration(uint256 _tokenId) public view returns (uint256) {\n    require(exists(_tokenId));\n    return metadata[_tokenId].duration;\n  }\n\n  function getIsMining(uint256 _tokenId) public view returns (bool) {\n    require(exists(_tokenId));\n    return metadata[_tokenId].isMining;\n  }\n\n  function startMining(address _owner, uint256 _tokenId) public returns (bool) {\n    require(msg.sender == leaseExchange);\n    require(exists(_tokenId));\n    require(ownerOf(_tokenId) == _owner);\n    require(now < metadata[_tokenId].tradeExpiry);\n    require(metadata[_tokenId].isMining == false);\n    Metadata storage m = metadata[_tokenId];\n    m.isMining = true;\n    m.leaseExpiry = now + m.duration;\n    return true;\n  }\n\n  function canRetrieveEMB(address _leasor, uint256 _tokenId) public view returns (bool) {\n    require(exists(_tokenId));\n    require(metadata[_tokenId].leasor == _leasor);\n    if(metadata[_tokenId].isMining == false) {\n      return(now > metadata[_tokenId].leaseExpiry);\n    }\n    else {\n      return(now > metadata[_tokenId].tradeExpiry);\n    }\n  }\n\n  function endLease(address _leasee, uint256 _tokenId) public {\n    require(msg.sender == leaseExchange);\n    require(exists(_tokenId));\n    require(ownerOf(_tokenId) == _leasee);\n    require(now > metadata[_tokenId].leaseExpiry);\n    removeTokenFromLeasor(metadata[_tokenId].leasor, _tokenId);\n    _burn(_leasee, _tokenId);\n  }\n\n  function splitLEMB(uint256 _tokenId, uint256 amount) public {\n    require(exists(_tokenId));\n    require(ownerOf(_tokenId) == msg.sender);\n    require(metadata[_tokenId].isMining == false);\n    require(now < metadata[_tokenId].tradeExpiry);\n    require(amount < getAmount(_tokenId));\n\n    uint256 _newTokenId = getNewId();\n\n    Metadata storage m = metadata[_tokenId];\n    m.amount = m.amount - amount;\n\n    _mint(msg.sender, _newTokenId);\n    addTokenToLeasor(m.leasor, _newTokenId);\n    setMetadata(_newTokenId, amount, m.leasor, m.duration,m.tradeExpiry, 0);\n    highestId = highestId + 1;\n  }\n\n  function mintUniqueTokenTo(address _to, uint256 amount, address leasor, uint256 duration) public {\n    require(msg.sender == leaseExchange);\n    uint256 _tokenId = getNewId();\n    _mint(_to, _tokenId);\n    addTokenToLeasor(leasor, _tokenId);\n    uint256 tradeExpiry = now + sixMonths;\n    setMetadata(_tokenId, amount, leasor, duration,tradeExpiry, 0);\n    highestId = highestId + 1;\n  }\n\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n    delete metadata[_tokenId];\n  }\n\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(metadata[_tokenId].isMining == false);\n    _;\n  }\n\n}\n\n// File: contracts/Emblem.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\ncontract Emblem is DetailedERC20, StandardToken, Ownable {\n  using SafeMath for uint256;\n\n   mapping (bytes12 => address) public vanityAddresses;\n   mapping (address => bytes12[]) public ownedVanities;\n   mapping (address => mapping(bytes12 => uint256)) public ownedVanitiesIndex;\n   mapping (bytes12 => uint256) allVanitiesIndex;\n   bytes12[] public allVanities;\n   mapping (address => mapping (bytes12 => address)) internal allowedVanities;\n\n   mapping (bytes12 => uint256) vanityFees;\n   mapping (bytes12 => bool) vanityFeeEnabled;\n\n   bool internal useVanityFees = true;\n   uint256 internal vanityPurchaseCost = 100 * (10 ** 8);\n\n   mapping (address => bool) public frozenAccounts;\n   bool public completeFreeze = false;\n\n   mapping (address => bool) internal freezable;\n   mapping (address => bool) internal externalFreezers;\n\n   address leaseExchange;\n   LeasedEmblem LEMB;\n\n   event TransferVanity(address from, address to, bytes12 vanity);\n   event ApprovedVanity(address from, address to, bytes12 vanity);\n   event VanityPurchased(address from, bytes12 vanity);\n\n   constructor(string _name, string _ticker, uint8 _decimal, uint256 _supply, address _wallet, address _lemb) DetailedERC20(_name, _ticker, _decimal) public {\n     totalSupply_ = _supply;\n     balances[_wallet] = _supply;\n     LEMB = LeasedEmblem(_lemb);\n   }\n\n   function setLeaseExchange(address _leaseExchange) public onlyOwner {\n     leaseExchange = _leaseExchange;\n   }\n\n   function setVanityPurchaseCost(uint256 cost) public onlyOwner {\n     vanityPurchaseCost = cost;\n   }\n\n   function enableFees(bool enabled) public onlyOwner {\n     useVanityFees = enabled;\n   }\n\n   function setLEMB(address _lemb) public onlyOwner {\n     LEMB = LeasedEmblem(_lemb);\n   }\n\n   function setVanityFee(bytes12 vanity, uint256 fee) public onlyOwner {\n     require(fee >= 0);\n     vanityFees[vanity] = fee;\n   }\n\n   function getFee(bytes12 vanity) public view returns(uint256) {\n     return vanityFees[vanity];\n   }\n\n   function enabledVanityFee(bytes12 vanity) public view returns(bool) {\n     return vanityFeeEnabled[vanity] && useVanityFees;\n   }\n\n   function setTicker(string _ticker) public onlyOwner {\n     symbol = _ticker;\n   }\n\n   function approveOwner(uint256 _value) public onlyOwner returns (bool) {\n     allowed[msg.sender][address(this)] = _value;\n     return true;\n   }\n\n   function vanityAllowance(address _owner, bytes12 _vanity, address _spender) public view returns (bool) {\n     return allowedVanities[_owner][_vanity] == _spender;\n   }\n\n   function getVanityOwner(bytes12 _vanity) public view returns (address) {\n     return vanityAddresses[_vanity];\n   }\n\n   function getAllVanities() public view returns (bytes12[]){\n     return allVanities;\n   }\n\n   function getMyVanities() public view returns (bytes12[]){\n     return ownedVanities[msg.sender];\n   }\n\n   function approveVanity(address _spender, bytes12 _vanity) public returns (bool) {\n     require(vanityAddresses[_vanity] == msg.sender);\n     allowedVanities[msg.sender][_vanity] = _spender;\n\n     emit ApprovedVanity(msg.sender, _spender, _vanity);\n     return true;\n   }\n\n   function clearVanityApproval(bytes12 _vanity) public returns (bool){\n     require(vanityAddresses[_vanity] == msg.sender);\n     delete allowedVanities[msg.sender][_vanity];\n     return true;\n   }\n\n   function transferVanity(bytes12 van, address newOwner) public returns (bool) {\n     require(newOwner != 0x0);\n     require(vanityAddresses[van] == msg.sender);\n\n     vanityAddresses[van] = newOwner;\n     ownedVanities[newOwner].push(van);\n     ownedVanitiesIndex[newOwner][van] = ownedVanities[newOwner].length.sub(1);\n\n     uint256 vanityIndex = ownedVanitiesIndex[msg.sender][van];\n     uint256 lastVanityIndex = ownedVanities[msg.sender].length.sub(1);\n     bytes12 lastVanity = ownedVanities[msg.sender][lastVanityIndex];\n\n     ownedVanities[msg.sender][vanityIndex] = lastVanity;\n     ownedVanities[msg.sender][lastVanityIndex] = \"\";\n     ownedVanities[msg.sender].length--;\n\n     ownedVanitiesIndex[msg.sender][van] = 0;\n     ownedVanitiesIndex[msg.sender][lastVanity] = vanityIndex;\n\n     emit TransferVanity(msg.sender, newOwner,van);\n\n     return true;\n   }\n\n   function transferVanityFrom(\n     address _from,\n     address _to,\n     bytes12 _vanity\n   )\n     public\n     returns (bool)\n   {\n     require(_to != address(0));\n     require(_from == vanityAddresses[_vanity]);\n     require(msg.sender == allowedVanities[_from][_vanity]);\n\n     vanityAddresses[_vanity] = _to;\n     ownedVanities[_to].push(_vanity);\n     ownedVanitiesIndex[_to][_vanity] = ownedVanities[_to].length.sub(1);\n\n     uint256 vanityIndex = ownedVanitiesIndex[_from][_vanity];\n     uint256 lastVanityIndex = ownedVanities[_from].length.sub(1);\n     bytes12 lastVanity = ownedVanities[_from][lastVanityIndex];\n\n     ownedVanities[_from][vanityIndex] = lastVanity;\n     ownedVanities[_from][lastVanityIndex] = \"\";\n     ownedVanities[_from].length--;\n\n     ownedVanitiesIndex[_from][_vanity] = 0;\n     ownedVanitiesIndex[_from][lastVanity] = vanityIndex;\n\n     emit TransferVanity(msg.sender, _to,_vanity);\n\n     return true;\n   }\n\n   function purchaseVanity(bytes12 van) public returns (bool) {\n     require(vanityAddresses[van] == address(0));\n\n     for(uint8 i = 0; i < 12; i++){\n       require((van[i] >= 48 && van[i] <= 57) || (van[i] >= 65 && van[i] <= 90));\n     }\n\n     require(canTransfer(msg.sender,vanityPurchaseCost));\n\n     balances[msg.sender] = balances[msg.sender].sub(vanityPurchaseCost);\n     balances[address(this)] = balances[address(this)].add(vanityPurchaseCost);\n     emit Transfer(msg.sender, address(this), vanityPurchaseCost);\n\n     vanityAddresses[van] = msg.sender;\n     ownedVanities[msg.sender].push(van);\n     ownedVanitiesIndex[msg.sender][van] = ownedVanities[msg.sender].length.sub(1);\n     allVanities.push(van);\n     allVanitiesIndex[van] = allVanities.length.sub(1);\n\n     emit VanityPurchased(msg.sender, van);\n   }\n\n   function freezeTransfers(bool _freeze) public onlyOwner {\n     completeFreeze = _freeze;\n   }\n\n   function freezeAccount(address _target, bool _freeze) public onlyOwner {\n     frozenAccounts[_target] = _freeze;\n   }\n\n   function canTransfer(address _account,uint256 _value) internal view returns (bool) {\n      return (!frozenAccounts[_account] && !completeFreeze && (_value + LEMB.getAmountForUserMining(_account) <= balances[_account]));\n   }\n\n   function transfer(address _to, uint256 _value) public returns (bool){\n      require(canTransfer(msg.sender,_value));\n      super.transfer(_to,_value);\n   }\n\n\n   function multiTransfer(bytes32[] _addressesAndAmounts) public {\n      for (uint i = 0; i < _addressesAndAmounts.length; i++) {\n          address to = address(_addressesAndAmounts[i] >> 96);\n          uint amount = uint(uint56(_addressesAndAmounts[i]));\n          transfer(to, amount);\n      }\n   }\n\n   function freezeMe(bool freeze) public {\n     require(!frozenAccounts[msg.sender]);\n     freezable[msg.sender] = freeze;\n   }\n\n   function canFreeze(address _target) public view returns(bool){\n     return freezable[_target];\n   }\n\n   function isFrozen(address _target) public view returns(bool) {\n     return completeFreeze || frozenAccounts[_target];\n   }\n\n   function externalFreezeAccount(address _target, bool _freeze) public {\n     require(freezable[_target]);\n     require(externalFreezers[msg.sender]);\n     frozenAccounts[_target] = _freeze;\n   }\n\n   function setExternalFreezer(address _target, bool _canFreeze) public onlyOwner {\n     externalFreezers[_target] = _canFreeze;\n   }\n\n\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n      require(!completeFreeze);\n      if(msg.sender != leaseExchange) require(canTransfer(_from,_value));\n      super.transferFrom(_from,_to,_value);\n   }\n\n   function decreaseApproval(address _spender,uint256 _subtractedValue) public returns (bool) {\n\n\n     if(_spender == leaseExchange) {\n       require(allowed[msg.sender][_spender].sub(_subtractedValue) >= LEMB.getAmountForUserMining(msg.sender));\n     }\n     super.decreaseApproval(_spender,_subtractedValue);\n   }\n\n   function approve(address _spender, uint256 _value) public returns (bool) {\n\n\n     if(_spender == leaseExchange){\n       require(_value >= LEMB.getAmountForUserMining(msg.sender));\n     }\n\n     allowed[msg.sender][_spender] = _value;\n     emit Approval(msg.sender, _spender, _value);\n     return true;\n   }\n\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000f3e6efada7acb1882142d8928663abb4dedb0b0b00000000000000000000000071e0773e3739dabdf99980d582910e5941af299c0000000000000000000000000000000000000000000000000000000000000006456d626c656d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d420000000000000000000000000000000000000000000000000000000000"
}