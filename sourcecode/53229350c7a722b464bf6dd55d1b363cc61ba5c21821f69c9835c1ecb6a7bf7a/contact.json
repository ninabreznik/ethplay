{
  "address": "0xc16cf13922c18de7842374f9baace4489f1d24af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DEEX",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-26\n*/\n\npragma solidity ^0.4.15;\n\n\n/*\n*  deex.exchange pre-ICO tokens smart contract\n*  implements [ERC-20 Token Standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\n*\n*  Style\n*  1) before start coding, run Python and type 'import this' in Python console.\n*  2) we avoid using inheritance (contract B is A) as it makes code less clear for observer\n*  (\"Flat is better than nested\", \"Readability counts\")\n*  3) we avoid using -= ; =- ; +=; =+\n*  see: https://github.com/ether-camp/virtual-accelerator/issues/8\n*  https://www.ethnews.com/ethercamps-hkg-token-has-a-bug-and-needs-to-be-reissued\n*  4) always explicitly mark variables and functions visibility (\"Explicit is better than implicit\")\n*  5) every function except constructor should trigger at leas one event.\n*  6) smart contracts have to be audited and reviewed, comment your code.\n*\n*  Code is published on https://github.com/thedeex/thedeex.github.io\n*/\n\n\n/* \"Interfaces\" */\n\n//  this is expected from another contracts\n//  if it wants to spend tokens of behalf of the token owner in our contract\n//  this can be used in many situations, for example to convert pre-ICO tokens to ICO tokens\n//  see 'approveAndCall' function\ncontract allowanceRecipient {\n    function receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData) returns (bool success);\n}\n\n\n// see:\n// https://github.com/ethereum/EIPs/issues/677\ncontract tokenRecipient {\n    function tokenFallback(address _from, uint256 _value, bytes _extraData) returns (bool success);\n}\n\n\ncontract DEEX {\n\n    // ver. 2.0\n\n    /* ---------- Variables */\n\n    /* --- ERC-20 variables */\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#name\n    // function name() constant returns (string name)\n    string public name = \"deex\";\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#symbol\n    // function symbol() constant returns (string symbol)\n    string public symbol = \"deex\";\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#decimals\n    // function decimals() constant returns (uint8 decimals)\n    uint8 public decimals = 0;\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply\n    // function totalSupply() constant returns (uint256 totalSupply)\n    // we start with zero and will create tokens as SC receives ETH\n    uint256 public totalSupply;\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof\n    // function balanceOf(address _owner) constant returns (uint256 balance)\n    mapping (address => uint256) public balanceOf;\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance\n    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* ----- For tokens sale */\n\n    uint256 public salesCounter = 0;\n\n    uint256 public maxSalesAllowed;\n\n    bool private transfersBetweenSalesAllowed;\n\n    // initial value should be changed by the owner\n    uint256 public tokenPriceInWei = 0;\n\n    uint256 public saleStartUnixTime = 0; // block.timestamp\n    uint256 public saleEndUnixTime = 0;  // block.timestamp\n\n    /* --- administrative */\n    address public owner;\n\n    // account that can set prices\n    address public priceSetter;\n\n    // 0 - not set\n    uint256 private priceMaxWei = 0;\n    // 0 - not set\n    uint256 private priceMinWei = 0;\n\n    // accounts holding tokens for for the team, for advisers and for the bounty campaign\n    mapping (address => bool) public isPreferredTokensAccount;\n\n    bool public contractInitialized = false;\n\n\n    /* ---------- Constructor */\n    // do not forget about:\n    // https://medium.com/@codetractio/a-look-into-paritys-multisig-wallet-bug-affecting-100-million-in-ether-and-tokens-356f5ba6e90a\n    function DEEX() {\n        owner = msg.sender;\n\n        // for testNet can be more than 2\n        // --------------------------------2------------------------------------------------------change  in production!\n        maxSalesAllowed = 2;\n        //\n        transfersBetweenSalesAllowed = true;\n    }\n\n\n    function initContract(address team, address advisers, address bounty) public onlyBy(owner) returns (bool){\n\n        require(contractInitialized == false);\n        contractInitialized = true;\n\n        priceSetter = msg.sender;\n\n        totalSupply = 100000000;\n\n        // tokens for sale go SC own account\n        balanceOf[this] = 75000000;\n\n        // for the team\n        balanceOf[team] = balanceOf[team] + 15000000;\n        isPreferredTokensAccount[team] = true;\n\n        // for advisers\n        balanceOf[advisers] = balanceOf[advisers] + 7000000;\n        isPreferredTokensAccount[advisers] = true;\n\n        // for the bounty campaign\n        balanceOf[bounty] = balanceOf[bounty] + 3000000;\n        isPreferredTokensAccount[bounty] = true;\n\n    }\n\n    /* ---------- Events */\n\n    /* --- ERC-20 events */\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#events\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer-1\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approval\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\n\n    /* --- Administrative events:  */\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /* ---- Tokens creation and sale events  */\n\n    event PriceChanged(uint256 indexed newTokenPriceInWei);\n\n    event SaleStarted(uint256 startUnixTime, uint256 endUnixTime, uint256 indexed saleNumber);\n\n    event NewTokensSold(uint256 numberOfTokens, address indexed purchasedBy, uint256 indexed priceInWei);\n\n    event Withdrawal(address indexed to, uint sumInWei);\n\n    /* --- Interaction with other contracts events  */\n    event DataSentToAnotherContract(address indexed _from, address indexed _toContract, bytes _extraData);\n\n    /* ---------- Functions */\n\n    /* --- Modifiers  */\n    modifier onlyBy(address _account){\n        require(msg.sender == _account);\n\n        _;\n    }\n\n    /* --- ERC-20 Functions */\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#methods\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer\n    function transfer(address _to, uint256 _value) public returns (bool){\n        return transferFrom(msg.sender, _to, _value);\n    }\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n\n        // transfers are possible only after sale is finished\n        // except for manager and preferred accounts\n\n        bool saleFinished = saleIsFinished();\n        require(saleFinished || msg.sender == owner || isPreferredTokensAccount[msg.sender]);\n\n        // transfers can be forbidden until final ICO is finished\n        // except for manager and preferred accounts\n        require(transfersBetweenSalesAllowed || salesCounter == maxSalesAllowed || msg.sender == owner || isPreferredTokensAccount[msg.sender]);\n\n        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)\n        require(_value >= 0);\n\n        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\n        require(msg.sender == _from || _value <= allowance[_from][msg.sender]);\n\n        // check if _from account have required amount\n        require(_value <= balanceOf[_from]);\n\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from] - _value;\n        //\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to] + _value;\n\n        // If allowance used, change allowances correspondingly\n        if (_from != msg.sender) {\n            allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;\n        }\n\n        // event\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approve\n    // there is and attack, see:\n    // https://github.com/CORIONplatform/solidity/issues/6,\n    // https://drive.google.com/file/d/0ByMtMw2hul0EN3NCaVFHSFdxRzA/view\n    // but this function is required by ERC-20\n    function approve(address _spender, uint256 _value) public returns (bool success){\n\n        require(_value >= 0);\n\n        allowance[msg.sender][_spender] = _value;\n\n        // event\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /*  ---------- Interaction with other contracts  */\n\n    /* User can allow another smart contract to spend some shares in his behalf\n    *  (this function should be called by user itself)\n    *  @param _spender another contract's address\n    *  @param _value number of tokens\n    *  @param _extraData Data that can be sent from user to another contract to be processed\n    *  bytes - dynamically-sized byte array,\n    *  see http://solidity.readthedocs.io/en/v0.4.15/types.html#dynamically-sized-byte-array\n    *  see possible attack information in comments to function 'approve'\n    *  > this may be used to convert pre-ICO tokens to ICO tokens\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n\n        approve(_spender, _value);\n\n        // 'spender' is another contract that implements code as prescribed in 'allowanceRecipient' above\n        allowanceRecipient spender = allowanceRecipient(_spender);\n\n        // our contract calls 'receiveApproval' function of another contract ('allowanceRecipient') to send information about\n        // allowance and data sent by user\n        // 'this' is this (our) contract address\n        if (spender.receiveApproval(msg.sender, _value, this, _extraData)) {\n            DataSentToAnotherContract(msg.sender, _spender, _extraData);\n            return true;\n        }\n        else return false;\n    }\n\n    function approveAllAndCall(address _spender, bytes _extraData) public returns (bool success) {\n        return approveAndCall(_spender, balanceOf[msg.sender], _extraData);\n    }\n\n    /* https://github.com/ethereum/EIPs/issues/677\n    * transfer tokens with additional info to another smart contract, and calls its correspondent function\n    * @param address _to - another smart contract address\n    * @param uint256 _value - number of tokens\n    * @param bytes _extraData - data to send to another contract\n    * > this may be used to convert pre-ICO tokens to ICO tokens\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _extraData) public returns (bool success){\n\n        transferFrom(msg.sender, _to, _value);\n\n        tokenRecipient receiver = tokenRecipient(_to);\n\n        if (receiver.tokenFallback(msg.sender, _value, _extraData)) {\n            DataSentToAnotherContract(msg.sender, _to, _extraData);\n            return true;\n        }\n        else return false;\n    }\n\n    // for example for conveting ALL tokens of user account to another tokens\n    function transferAllAndCall(address _to, bytes _extraData) public returns (bool success){\n        return transferAndCall(_to, balanceOf[msg.sender], _extraData);\n    }\n\n    /* --- Administrative functions */\n\n    function changeOwner(address _newOwner) public onlyBy(owner) returns (bool success){\n        //\n        require(_newOwner != address(0));\n\n        address oldOwner = owner;\n        owner = _newOwner;\n\n        OwnerChanged(oldOwner, _newOwner);\n\n        return true;\n    }\n\n    /* ---------- Create and sell tokens  */\n\n    /* set time for start and time for end pre-ICO\n    * time is integer representing block timestamp\n    * in UNIX Time,\n    * see: https://www.epochconverter.com\n    * @param uint256 startTime - time to start\n    * @param uint256 endTime - time to end\n    * should be taken into account that\n    * \"block.timestamp\" can be influenced by miners to a certain degree.\n    * That means that a miner can \"choose\" the block.timestamp, to a certain degree,\n    * to change the outcome of a transaction in the mined block.\n    * see:\n    * http://solidity.readthedocs.io/en/v0.4.15/frequently-asked-questions.html#are-timestamps-now-block-timestamp-reliable\n    */\n\n    function startSale(uint256 _startUnixTime, uint256 _endUnixTime) public onlyBy(owner) returns (bool success){\n\n        require(balanceOf[this] > 0);\n        require(salesCounter < maxSalesAllowed);\n\n        // time for sale can be set only if:\n        // this is first sale (saleStartUnixTime == 0 && saleEndUnixTime == 0) , or:\n        // previous sale finished ( saleIsFinished() )\n        require(\n        (saleStartUnixTime == 0 && saleEndUnixTime == 0) || saleIsFinished()\n        );\n        // time can be set only for future\n        require(_startUnixTime > now && _endUnixTime > now);\n        // end time should be later than start time\n        require(_endUnixTime - _startUnixTime > 0);\n\n        saleStartUnixTime = _startUnixTime;\n        saleEndUnixTime = _endUnixTime;\n        salesCounter = salesCounter + 1;\n\n        SaleStarted(_startUnixTime, _endUnixTime, salesCounter);\n\n        return true;\n    }\n\n    function saleIsRunning() public constant returns (bool){\n\n        if (balanceOf[this] == 0) {\n            return false;\n        }\n\n        if (saleStartUnixTime == 0 && saleEndUnixTime == 0) {\n            return false;\n        }\n\n        if (now > saleStartUnixTime && now < saleEndUnixTime) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function saleIsFinished() public constant returns (bool){\n\n        if (balanceOf[this] == 0) {\n            return true;\n        }\n\n        else if (\n        (saleStartUnixTime > 0 && saleEndUnixTime > 0)\n        && now > saleEndUnixTime) {\n\n            return true;\n        }\n\n        // <<<\n        return false;\n    }\n\n    function changePriceSetter(address _priceSetter) public onlyBy(owner) returns (bool success) {\n        priceSetter = _priceSetter;\n        return true;\n    }\n\n    function setMinMaxPriceInWei(uint256 _priceMinWei, uint256 _priceMaxWei) public onlyBy(owner) returns (bool success){\n        require(_priceMinWei >= 0 && _priceMaxWei >= 0);\n        priceMinWei = _priceMinWei;\n        priceMaxWei = _priceMaxWei;\n        return true;\n    }\n\n\n    function setTokenPriceInWei(uint256 _priceInWei) public onlyBy(priceSetter) returns (bool success){\n\n        require(_priceInWei >= 0);\n\n        // if 0 - not set\n        if (priceMinWei != 0 && _priceInWei < priceMinWei) {\n            tokenPriceInWei = priceMinWei;\n        }\n        else if (priceMaxWei != 0 && _priceInWei > priceMaxWei) {\n            tokenPriceInWei = priceMaxWei;\n        }\n        else {\n            tokenPriceInWei = _priceInWei;\n        }\n\n        PriceChanged(tokenPriceInWei);\n\n        return true;\n    }\n\n    // allows sending ether and receiving tokens just using contract address\n    // warning:\n    // 'If the fallback function requires more than 2300 gas, the contract cannot receive Ether'\n    // see:\n    // https://ethereum.stackexchange.com/questions/21643/fallback-function-best-practices-when-registering-information\n    function() public payable {\n        buyTokens();\n    }\n\n    //\n    function buyTokens() public payable returns (bool success){\n\n        if (saleIsRunning() && tokenPriceInWei > 0) {\n\n            uint256 numberOfTokens = msg.value / tokenPriceInWei;\n\n            if (numberOfTokens <= balanceOf[this]) {\n\n                balanceOf[msg.sender] = balanceOf[msg.sender] + numberOfTokens;\n                balanceOf[this] = balanceOf[this] - numberOfTokens;\n\n                NewTokensSold(numberOfTokens, msg.sender, tokenPriceInWei);\n\n                return true;\n            }\n            else {\n                // (payable)\n                revert();\n            }\n        }\n        else {\n            // (payable)\n            revert();\n        }\n    }\n\n    /*  After sale contract owner\n    *  (can be another contract or account)\n    *  can withdraw all collected Ether\n    */\n    function withdrawAllToOwner() public onlyBy(owner) returns (bool) {\n\n        // only after sale is finished:\n        require(saleIsFinished());\n        uint256 sumInWei = this.balance;\n\n        if (\n        // makes withdrawal and returns true or false\n        !msg.sender.send(this.balance)\n        ) {\n            return false;\n        }\n        else {\n            // event\n            Withdrawal(msg.sender, sumInWei);\n            return true;\n        }\n    }\n\n    /* ---------- Referral System */\n\n    // list of registered referrers\n    // represented by keccak256(address) (returns bytes32)\n    // ! referrers can not be removed !\n    mapping (bytes32 => bool) private isReferrer;\n\n    uint256 private referralBonus = 0;\n\n    uint256 private referrerBonus = 0;\n    // tokens owned by referrers:\n    mapping (bytes32 => uint256) public referrerBalanceOf;\n\n    mapping (bytes32 => uint) public referrerLinkedSales;\n\n    function addReferrer(bytes32 _referrer) public onlyBy(owner) returns (bool success){\n        isReferrer[_referrer] = true;\n        return true;\n    }\n\n    function removeReferrer(bytes32 _referrer) public onlyBy(owner) returns (bool success){\n        isReferrer[_referrer] = false;\n        return true;\n    }\n\n    // bonuses are set in as integers (20%, 30%), initial 0%\n    function setReferralBonuses(uint256 _referralBonus, uint256 _referrerBonus) public onlyBy(owner) returns (bool success){\n        require(_referralBonus > 0 && _referrerBonus > 0);\n        referralBonus = _referralBonus;\n        referrerBonus = _referrerBonus;\n        return true;\n    }\n\n    function buyTokensWithReferrerAddress(address _referrer) public payable returns (bool success){\n\n        bytes32 referrer = keccak256(_referrer);\n\n        if (saleIsRunning() && tokenPriceInWei > 0) {\n\n            if (isReferrer[referrer]) {\n\n                uint256 numberOfTokens = msg.value / tokenPriceInWei;\n\n                if (numberOfTokens <= balanceOf[this]) {\n\n                    referrerLinkedSales[referrer] = referrerLinkedSales[referrer] + numberOfTokens;\n\n                    uint256 referralBonusTokens = (numberOfTokens * (100 + referralBonus) / 100) - numberOfTokens;\n                    uint256 referrerBonusTokens = (numberOfTokens * (100 + referrerBonus) / 100) - numberOfTokens;\n\n                    balanceOf[this] = balanceOf[this] - numberOfTokens - referralBonusTokens - referrerBonusTokens;\n\n                    balanceOf[msg.sender] = balanceOf[msg.sender] + (numberOfTokens + referralBonusTokens);\n\n                    referrerBalanceOf[referrer] = referrerBalanceOf[referrer] + referrerBonusTokens;\n\n                    NewTokensSold(numberOfTokens + referralBonusTokens, msg.sender, tokenPriceInWei);\n\n                    return true;\n                }\n                else {\n                    // (payable)\n                    revert();\n                }\n            }\n            else {\n                // (payable)\n                buyTokens();\n            }\n        }\n        else {\n            // (payable)\n            revert();\n        }\n    }\n\n    event ReferrerBonusTokensTaken(address referrer, uint256 bonusTokensValue);\n\n    function getReferrerBonusTokens() public returns (bool success){\n        require(saleIsFinished());\n        uint256 bonusTokens = referrerBalanceOf[keccak256(msg.sender)];\n        balanceOf[msg.sender] = balanceOf[msg.sender] + bonusTokens;\n        ReferrerBonusTokensTaken(msg.sender, bonusTokens);\n        return true;\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600481527f6465657800000000000000000000000000000000000000000000000000000000602082015260009080516200004d92916020019062000118565b5060408051908101604052600481527f6465657800000000000000000000000000000000000000000000000000000000602082015260019080516200009792916020019062000118565b506002805460ff19908116909155600060068190556009819055600a819055600b819055600e819055600f8190556011805490921690915560138190556014553415620000e357600080fd5b5b600c8054600160a060020a03191633600160a060020a031617905560026007556008805460ff191660011790555b620001c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015b57805160ff19168380011785556200018b565b828001600101855582156200018b579182015b828111156200018b5782518255916020019190600101906200016e565b5b506200019a9291506200019e565b5090565b620001bf91905b808211156200019a5760008155600101620001a5565b5090565b90565b611cb380620001d26000396000f300606060405236156101c65763ffffffff60e060020a600035041662b3474781146101d357806306fdde03146101fa578063095ea7b3146102855780630f79cfa2146102bb57806318160ddd146102e55780631b19f6a31461030a5780631e06c41f146103345780631ff1a37814610359578063206885821461037e57806323b872dd146103a557806325f281b4146103e15780632c09bef7146104145780632cf975af146104435780632f8de81014610476578063313ce5671461049b5780634000aea0146104c45780634f36fbdc1461053d5780635daa0c371461056a57806370a08231146105925780637c7d809b146105c35780637f37b905146105e857806380710f391461060d578063816c7da41461063457806388c0bc8e146106a75780638da5cb5b146106cf57806395d89b41146106fe5780639b1bb32314610789578063a6f9dae1146107c8578063a9059cbb146107fb578063b597e78414610831578063b67d50b51461085b578063bb7c62cb14610883578063cae9ca51146108aa578063cfdafde414610923578063d0febe4c1461094a578063d87692d914610966578063dd62ed3e146109d9578063eec48ca514610a10578063f4f3122e14610a3d575b5b6101cf610a6a565b505b005b34156101de57600080fd5b6101e6610b3d565b604051901515815260200160405180910390f35b341561020557600080fd5b61020d610b46565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024a5780820151818401525b602001610231565b50505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029057600080fd5b6101e6600160a060020a0360043516602435610be4565b604051901515815260200160405180910390f35b34156102c657600080fd5b6101e6600435610c5d565b604051901515815260200160405180910390f35b34156102f057600080fd5b6102f8610ca2565b60405190815260200160405180910390f35b341561031557600080fd5b6101e6600435610ca8565b604051901515815260200160405180910390f35b341561033f57600080fd5b6102f8610ce9565b60405190815260200160405180910390f35b341561036457600080fd5b6102f8610cef565b60405190815260200160405180910390f35b341561038957600080fd5b6101e6610cf5565b604051901515815260200160405180910390f35b34156103b057600080fd5b6101e6600160a060020a0360043581169060243516604435610d5f565b604051901515815260200160405180910390f35b34156103ec57600080fd5b6101e6600160a060020a0360043516610f4c565b604051901515815260200160405180910390f35b341561041f57600080fd5b610427610f9f565b604051600160a060020a03909116815260200160405180910390f35b341561044e57600080fd5b6101e6600160a060020a0360043516610fae565b604051901515815260200160405180910390f35b341561048157600080fd5b6102f8610fc3565b60405190815260200160405180910390f35b34156104a657600080fd5b6104ae610fc9565b60405160ff909116815260200160405180910390f35b34156104cf57600080fd5b6101e660048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610fd295505050505050565b604051901515815260200160405180910390f35b341561054857600080fd5b6101e66004356024356111a2565b604051901515815260200160405180910390f35b341561057557600080fd5b6102f86004356111f5565b60405190815260200160405180910390f35b341561059d57600080fd5b6102f8600160a060020a0360043516611207565b60405190815260200160405180910390f35b34156105ce57600080fd5b6102f8611219565b60405190815260200160405180910390f35b34156105f357600080fd5b6102f861121f565b60405190815260200160405180910390f35b341561061857600080fd5b6101e6611225565b604051901515815260200160405180910390f35b341561063f57600080fd5b6101e660048035600160a060020a03169060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506112f095505050505050565b604051901515815260200160405180910390f35b6101e6600160a060020a036004351661131e565b604051901515815260200160405180910390f35b34156106da57600080fd5b6104276114b5565b604051600160a060020a03909116815260200160405180910390f35b341561070957600080fd5b61020d6114c4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024a5780820151818401525b602001610231565b50505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561079457600080fd5b6101e6600160a060020a0360043581169060243581169060443516611562565b604051901515815260200160405180910390f35b34156107d357600080fd5b6101e6600160a060020a0360043516611663565b604051901515815260200160405180910390f35b341561080657600080fd5b6101e6600160a060020a0360043516602435611702565b604051901515815260200160405180910390f35b341561083c57600080fd5b6101e6600435611718565b604051901515815260200160405180910390f35b341561086657600080fd5b6102f86004356117cb565b60405190815260200160405180910390f35b341561088e57600080fd5b6101e66117dd565b604051901515815260200160405180910390f35b34156108b557600080fd5b6101e660048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506118a595505050505050565b604051901515815260200160405180910390f35b341561092e57600080fd5b6101e6611a8e565b604051901515815260200160405180910390f35b6101e6610a6a565b604051901515815260200160405180910390f35b341561097157600080fd5b6101e660048035600160a060020a03169060446024803590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611aeb95505050505050565b604051901515815260200160405180910390f35b34156109e457600080fd5b6102f8600160a060020a0360043581169060243516611b19565b60405190815260200160405180910390f35b3415610a1b57600080fd5b6101e6600435602435611b36565b604051901515815260200160405180910390f35b3415610a4857600080fd5b6101e6600435602435611b87565b604051901515815260200160405180910390f35b600080610a75610cf5565b8015610a8357506000600954115b15610b295760095434811515610a9557fe5b600160a060020a03301660009081526004602052604090205491900491508111610b2957600160a060020a0333811660008181526004602052604080822080548601905530909316815282902080548490039055600954917fca4a2bf7d59318f19c3cd42dde6c0c5e52e7810110f7b0774cc048b6f3047cad9084905190815260200160405180910390a360019150610b38565b600080fd5b610b38565b600080fd5b5b5090565b60115460ff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b505050505081565b600080821015610bf357600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600c54600090600160a060020a039081169033168114610c7c57600080fd5b6000838152601260205260409020805460ff1916600190811790915591505b5b50919050565b60035481565b600c54600090600160a060020a039081169033168114610cc757600080fd5b6000838152601260205260409020805460ff19169055600191505b5b50919050565b600a5481565b60075481565b600160a060020a0330166000908152600460205260408120541515610d1c57506000610d5c565b600a54158015610d2c5750600b54155b15610d3957506000610d5c565b600a5442118015610d4b5750600b5442105b15610d5857506001610d5c565b5060005b90565b600080610d6a611a8e565b90508080610d865750600c5433600160a060020a039081169116145b80610da95750600160a060020a03331660009081526010602052604090205460ff165b1515610db457600080fd5b60085460ff1680610dc85750600754600654145b80610de15750600c5433600160a060020a039081169116145b80610e045750600160a060020a03331660009081526010602052604090205460ff165b1515610e0f57600080fd5b6000831015610e1d57600080fd5b84600160a060020a031633600160a060020a03161480610e635750600160a060020a03808616600090815260056020908152604080832033909416835292905220548311155b1515610e6e57600080fd5b600160a060020a038516600090815260046020526040902054831115610e9357600080fd5b600160a060020a0380861660008181526004602052604080822080548890039055878416825290208054860190553390911614610ef857600160a060020a03858116600090815260056020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3600191505b509392505050565b600c54600090600160a060020a039081169033168114610f6b57600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038516179055600191505b5b50919050565b600d54600160a060020a031681565b60106020526000908152604090205460ff1681565b60095481565b60025460ff1681565b600080610fe0338686610d5f565b5084905080600160a060020a031663c0ee0b8a3386866000604051602001526040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561106d5780820151818401525b602001611054565b50505050905090810190601f16801561109a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15156110ba57600080fd5b6102c65a03f115156110cb57600080fd5b50505060405180519050156111905784600160a060020a031633600160a060020a03167f21ef8368734ad953ed9ae3c3035d58f91f69a15ebc986c4e008bc18f8cdc4d698560405160208082528190810183818151815260200191508051906020019080838360005b8381101561114d5780820151818401525b602001611134565b50505050905090810190601f16801561117a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a360019150610f44565b60009150610f44565b5b509392505050565b600c54600090600160a060020a0390811690331681146111c157600080fd5b600084101580156111d3575060008310155b15156111de57600080fd5b600f849055600e839055600191505b5b5092915050565b60166020526000908152604090205481565b60046020526000908152604090205481565b600b5481565b60065481565b600c546000908190600160a060020a03908116903316811461124657600080fd5b61124e611a8e565b151561125957600080fd5b30600160a060020a031631915033600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156112a757600092506112e9565b33600160a060020a03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658360405190815260200160405180910390a2600192505b5b5b505090565b600160a060020a033316600090815260046020526040812054611315908490846118a5565b90505b92915050565b600080600080600085604051600160a060020a03919091166c010000000000000000000000000281526014016040518091039020935061135c610cf5565b801561136a57506000600954115b15610b295760008481526012602052604090205460ff1615611497576009543481151561139357fe5b600160a060020a03301660009081526004602052604090205491900493508311610b295760008481526016602052604090208054840190556013548390606490810182025b0403915082606460145460640185028115156113f057fe5b600160a060020a033081166000908152600460209081526040808320805496909504969096039489900388900385900390935533909116808252848220805489890190810190915589835260159093529084902080548401905560095492945091927fca4a2bf7d59318f19c3cd42dde6c0c5e52e7810110f7b0774cc048b6f3047cad91905190815260200160405180910390a3600194506114ab565b600080fd5b6114a1565b61149f610a6a565b505b6114ab565b600080fd5b5b50505050919050565b600c54600160a060020a031681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b505050505081565b600c54600090600160a060020a03908116903316811461158157600080fd5b60115460ff161561159157600080fd5b60118054600160ff199182168117909255600d805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a03908116919091179091556305f5e100600355308116600090815260046020818152604080842063047868c090558b85168452808420805462e4e1c0019055601080835281852080548816891790558b861685528383528185208054626acfc00190558083528185208054881689179055948a1684529181528183208054622dc6c00190559290925220805490911690911790555b5b509392505050565b600c546000908190600160a060020a03908116903316811461168457600080fd5b600160a060020a038416151561169957600080fd5b600c8054600160a060020a0386811673ffffffffffffffffffffffffffffffffffffffff1983168117909355169250827fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a3600192505b5b5050919050565b6000611315338484610d5f565b90505b92915050565b600d54600090600160a060020a03908116903316811461173757600080fd5b600083101561174557600080fd5b600f54158015906117575750600f5483105b1561176757600f5460095561178f565b600e54158015906117795750600e5483115b1561178957600e5460095561178f565b60098390555b5b6009547fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d62260405160405180910390a2600191505b5b50919050565b60156020526000908152604090205481565b6000806117e8611a8e565b15156117f357600080fd5b6015600033604051600160a060020a03919091166c010000000000000000000000000281526014016040519081900390208152602080820192909252604090810160009081205433600160a060020a038116835260049094529082902080548201905592507f3e78afd8b9d30e929b555c423b8ac8156b03d8b3a0579359e04d3d85ed2c500a9190839051600160a060020a03909216825260208201526040908101905180910390a1600191505b5090565b6000806118b28585610be4565b5084905080600160a060020a0316638f4ffcb1338630876000604051602001526040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119585780820151818401525b60200161193f565b50505050905090810190601f1680156119855780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156110ba57600080fd5b6102c65a03f115156110cb57600080fd5b50505060405180519050156111905784600160a060020a031633600160a060020a03167f21ef8368734ad953ed9ae3c3035d58f91f69a15ebc986c4e008bc18f8cdc4d698560405160208082528190810183818151815260200191508051906020019080838360005b8381101561114d5780820151818401525b602001611134565b50505050905090810190601f16801561117a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a360019150610f44565b60009150610f44565b5b509392505050565b600160a060020a0330166000908152600460205260408120541515611ab557506001610d5c565b6000600a54118015611ac957506000600b54115b8015610d4b5750600b5442115b15610d5857506001610d5c565b5b5060005b90565b600160a060020a03331660009081526004602052604081205461131590849084610fd2565b90505b92915050565b600560209081526000928352604080842090915290825290205481565b600c54600090600160a060020a039081169033168114611b5557600080fd5b600084118015611b655750600083115b1515611b7057600080fd5b60138490556014839055600191505b5b5092915050565b600c54600090600160a060020a039081169033168114611ba657600080fd5b600160a060020a03301660009081526004602052604081205411611bc957600080fd5b60075460065410611bd957600080fd5b600a54158015611be95750600b54155b80611bf75750611bf7611a8e565b5b1515611c0357600080fd5b4284118015611c1157504283115b1515611c1c57600080fd5b600084840311611c2b57600080fd5b600a849055600b83905560068054600101908190557f5ee5e9eecd6fd27ba20784f8da118fe26b697aca487c80f605baec0b88ed3636858560405191825260208201526040908101905180910390a2600191505b5b50929150505600a165627a7a72305820b3bc60739f58c8f425c79647d2af7493c578cc19633611a33f4bc7917b51cf430029"
}