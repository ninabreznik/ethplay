{
  "address": "0x7e580bc06576002d43232cf0784b4df028857070",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QuestContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *Humpty Dumpty sat up in bed,\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * Eating yellow bananas.\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * Where do you think he put the skins?\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * No transferOwnership function to minimize attack surface\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipSet(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipSet(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipSet(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\n\n/**\n * @title CommonQuestToken with no INITIAL_SUPPLY and 98m totalSupply.\n * The Times 8/dec/2018\n * Cross-party plot to dump May.\n */\ncontract QToken is ERC20, MinterRole, Ownable {\n\n  string public constant name = \"QuestCoin\";\n  string public constant symbol = \"QUEST\";\n  uint public startblock = block.number;\n  uint8 public constant decimals = 18;\n  uint256 public constant INITIAL_SUPPLY = 0;\n  uint256 public constant MAX_SUPPLY = 98000000 * (10 ** uint256(decimals));\n\n}\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 AID minting logic - announce minting 15 days before the possibility of mint to\n * prevent a possibility of instant dumps.\n * @notice Dev Max Emission Cap can only go lower.\n * Dev timer in blocks and goes down and socialMultiplier changes with new every Stage.\n */\ncontract ERC20Mintable is QToken {\n    uint mintValue;\n    uint mintDate;\n    uint maxAmount = 2000000 * (10 ** 18);\n    uint devMintTimer = 86400;\n    uint socialMultiplier = 1;\n    event MintingAnnounce(\n    uint value,\n    uint date\n  );\n  event PromotionalStageStarted(\n    bool promo\n  );\n  event TransitionalStageStarted(\n    bool transition\n  );\n   event DevEmissionSetLower(uint value);\n    /**@dev Owner tools\n      *@notice 20m coin Supply required to start Transitional phase\n      * 70m of totalSupply required to start Promotional stage\n      */\nfunction setMaxDevMintAmount(uint _amount) public onlyOwner returns(bool){\n    require(_amount < maxAmount);\n    maxAmount = _amount;\n    emit DevEmissionSetLower(_amount);\n    return(true);\n}\n     /*@dev Can be used as a promotional tool ONLY in case of net unpopularity*/\nfunction setSocialMultiplier (uint _number) public onlyOwner returns(bool){\n    require(_number >= 1);\n    socialMultiplier = _number;\n    return(true);\n}\n\n    /*@dev Creator/MinterTools*/\n function announceMinting(uint _amount) public onlyMinter{\n     require(_amount.add(totalSupply()) < MAX_SUPPLY);\n     require(_amount < maxAmount);\n      mintDate = block.number;\n      mintValue = _amount;\n      emit MintingAnnounce(_amount , block.number);\n   }\n\n function AIDmint(\n    address to\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n      require(mintDate != 0);\n    require(block.number.sub(mintDate) > devMintTimer);\n      mintDate = 0;\n    _mint(to, mintValue);\n    mintValue = 0;\n    return true;\n  }\n\n function startPromotionalStage() public onlyMinter returns(bool) {\n    require(totalSupply() > 70000000 * (10 ** 18));\n    devMintTimer = 5760;\n    socialMultiplier = 4;\n    emit PromotionalStageStarted(true);\n    return(true);\n}\n\n function startTransitionalStage() public onlyMinter returns(bool){\n    require(totalSupply() > 20000000 * (10 ** 18));\n    devMintTimer = 40420;\n    socialMultiplier = 2;\n    emit TransitionalStageStarted(true);\n    return(true);\n}}\n\n/**\n * @title `QuestCoinContract`\n * @dev Quest creation and solve the system, social rewards, and karma.\n * CREATORS are free to publish quests limited by dev timers and RewardSize cap.\n * @notice maxQuestReward is capped at 125,000 coins at the start and can only go lower.\n * karmaSystem is used for unique access rights.\n * @notice questPeriodicity is freely adjustable demand and supply regulator timer represented in blocks\n * and cannot be set lower than 240.\n */\ncontract QuestContract is ERC20Mintable {\n\n    mapping (address => uint) public karmaSystem;\n    mapping (address => uint) public userIncentive;\n    mapping (bytes32 => uint) public questReward;\n    uint questTimer;\n    uint maxQuestReward = 125000;\n    uint questPeriodicity = 1;\n    event NewQuestEvent(\n    uint RewardSize,\n    uint DatePosted\n   );\n    event QuestRedeemedEvent(\n    uint WinReward,\n    string WinAnswer,\n    address WinAddres\n  );\n    event UserRewarded(\n    address UserAdress,\n    uint RewardSize\n  );\n  event MaxRewardDecresed(\n    uint amount\n  );\n  event PeriodicitySet(\n    uint amount\n  );\n\n    /*@dev Public tools*/\n    function solveQuest (string memory  _quest) public returns (bool){\n     require(questReward[keccak256(abi.encodePacked( _quest))] != 0);\n    uint _reward = questReward[keccak256(abi.encodePacked( _quest))];\n         questReward[keccak256(abi.encodePacked( _quest))] = 0;\n         emit QuestRedeemedEvent(_reward,  _quest , msg.sender);\n         _mint(msg.sender, _reward);\n         karmaSystem[msg.sender] = karmaSystem[msg.sender].add(1);\n         if (userIncentive[msg.sender] < _reward){\n             userIncentive[msg.sender] = _reward;\n         }\n         return true;\n    }\n\n    /*@dev Check answer for quest or puzzle with Joi*/\n    function joiLittleHelper (string memory test) public pure returns(bytes32){\n        return(keccak256(abi.encodePacked(test)));\n    }\n\n    /**\n     * @dev Creator/MinterTools\n     * @notice _reward is exact number of whole tokens\n     */\n  function createQuest (bytes32 _quest , uint _reward) public onlyMinter returns (bool) {\n        require(_reward <= maxQuestReward);\n        require(block.number.sub(questTimer) > questPeriodicity);\n        _reward = _reward * (10 ** uint256(decimals));\n        require(_reward.add(totalSupply()) < MAX_SUPPLY);\n        questTimer = block.number;\n        questReward[ _quest] = _reward;\n        emit NewQuestEvent(_reward, block.number - startblock);\n        return true;\n    }\n\n     /*@dev 25% reward for public social activity at promotional stage*/\n function rewardUser (address _user) public onlyMinter returns (bool) {\n        require(userIncentive[_user] > 0);\n        uint _reward = userIncentive[_user].div(socialMultiplier);\n        userIncentive[_user] = 0;\n        _mint(_user ,_reward);\n        karmaSystem[_user] = karmaSystem[_user].add(1);\n        emit UserRewarded(_user ,_reward);\n        return true;\n    }\n\n     /*@dev Owner tools*/\n     function setMaxQuestReward (uint _amount) public onlyOwner returns(bool){\n         require(_amount < maxQuestReward);\n        maxQuestReward = _amount;\n        emit MaxRewardDecresed(_amount);\n        return true;\n    }\n    function setQuestPeriodicity (uint _amount) public onlyOwner returns(bool){\n        require(_amount > 240);\n        questPeriodicity = _amount;\n        emit PeriodicitySet(_amount);\n        return true;\n    }\n}",
  "bytecode": "6080604052436005556a01a784379d99db42000000600855620151806009556001600a556201e848600f55600160105562000049336200010d640100000000026401000000009004565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167ff6a7092513e1f3f720c1d0ad65eb323494afe10d43e19dc4a40bac61ade7579160405160405180910390a3620002cf565b62000131816003620001776401000000000262002808179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001b457600080fd5b620001cf82826200023a640100000000026401000000009004565b151515620001dc57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200027857600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61299380620002df6000396000f3006080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101bc578063095ea7b31461024c5780630f7875c6146102b157806316208017146102dc57806318160ddd1461032f57806319662fcd1461035a5780631c700d1f1461039f57806323b872dd146103e45780632ef3d2d8146104695780632ff2e9dc146104ae578063313ce567146104d957806332cb6b0c1461050a578063361432611461053557806339509351146105b657806370a082311461061b578063715018a614610672578063718e19d11461068957806379f47462146106b85780637e577e98146106e55780638cb097771461072a5780638da5cb5b146107855780638f32d59b146107dc57806395d89b411461080b578063983b2d561461089b57806398650275146108de578063a457c2d7146108f5578063a6afd7db1461095a578063a9059cbb146109b5578063aa271e1a14610a1a578063b17a130b14610a75578063b3440eba14610afa578063bda0cb4114610b3f578063c678b18514610b96578063cd191ed014610bed578063dd62ed3e14610c1c575b600080fd5b3480156101c857600080fd5b506101d1610c93565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102115780820151818401526020810190506101f6565b50505050905090810190601f16801561023e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025857600080fd5b50610297600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ccc565b604051808215151515815260200191505060405180910390f35b3480156102bd57600080fd5b506102c6610df9565b6040518082815260200191505060405180910390f35b3480156102e857600080fd5b50610315600480360381019080803560001916906020019092919080359060200190929190505050610dff565b604051808215151515815260200191505060405180910390f35b34801561033b57600080fd5b50610344610efe565b6040518082815260200191505060405180910390f35b34801561036657600080fd5b5061038560048036038101908080359060200190929190505050610f08565b604051808215151515815260200191505060405180910390f35b3480156103ab57600080fd5b506103ce6004803603810190808035600019169060200190929190505050610f74565b6040518082815260200191505060405180910390f35b3480156103f057600080fd5b5061044f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f8c565b604051808215151515815260200191505060405180910390f35b34801561047557600080fd5b50610494600480360381019080803590602001909291905050506110b3565b604051808215151515815260200191505060405180910390f35b3480156104ba57600080fd5b506104c361111e565b6040518082815260200191505060405180910390f35b3480156104e557600080fd5b506104ee611123565b604051808260ff1660ff16815260200191505060405180910390f35b34801561051657600080fd5b5061051f611128565b6040518082815260200191505060405180910390f35b34801561054157600080fd5b5061059c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611139565b604051808215151515815260200191505060405180910390f35b3480156105c257600080fd5b50610601600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161e565b604051808215151515815260200191505060405180910390f35b34801561062757600080fd5b5061065c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611855565b6040518082815260200191505060405180910390f35b34801561067e57600080fd5b5061068761189d565b005b34801561069557600080fd5b5061069e611971565b604051808215151515815260200191505060405180910390f35b3480156106c457600080fd5b506106e3600480360381019080803590602001909291905050506119fb565b005b3480156106f157600080fd5b5061071060048036038101908080359060200190929190505050611aa3565b604051808215151515815260200191505060405180910390f35b34801561073657600080fd5b5061076b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ad8565b604051808215151515815260200191505060405180910390f35b34801561079157600080fd5b5061079a611b49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107e857600080fd5b506107f1611b73565b604051808215151515815260200191505060405180910390f35b34801561081757600080fd5b50610820611bcb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610860578082015181840152602081019050610845565b50505050905090810190601f16801561088d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108a757600080fd5b506108dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c04565b005b3480156108ea57600080fd5b506108f3611c24565b005b34801561090157600080fd5b50610940600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c2f565b604051808215151515815260200191505060405180910390f35b34801561096657600080fd5b5061099b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e66565b604051808215151515815260200191505060405180910390f35b3480156109c157600080fd5b50610a00600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061207b565b604051808215151515815260200191505060405180910390f35b348015610a2657600080fd5b50610a5b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612092565b604051808215151515815260200191505060405180910390f35b348015610a8157600080fd5b50610adc600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506120af565b60405180826000191660001916815260200191505060405180910390f35b348015610b0657600080fd5b50610b2560048036038101908080359060200190929190505050612187565b604051808215151515815260200191505060405180910390f35b348015610b4b57600080fd5b50610b80600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121f3565b6040518082815260200191505060405180910390f35b348015610ba257600080fd5b50610bd7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061220b565b6040518082815260200191505060405180910390f35b348015610bf957600080fd5b50610c02612223565b604051808215151515815260200191505060405180910390f35b348015610c2857600080fd5b50610c7d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ad565b6040518082815260200191505060405180910390f35b6040805190810160405280600981526020017f5175657374436f696e000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d0957600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b6000610e0a33612092565b1515610e1557600080fd5b600f548211151515610e2657600080fd5b601054610e3e600e544361233490919063ffffffff16565b111515610e4a57600080fd5b601260ff16600a0a82029150601260ff16600a0a6305d75c8002610e7e610e6f610efe565b8461235590919063ffffffff16565b101515610e8a57600080fd5b43600e8190555081600d60008560001916600019168152602001908152602001600020819055507f5484dca3a06e6d42354e20bdffaa941cdc4a4757a14d7e97f8ce0f255f9e3fd7826005544303604051808381526020018281526020019250505060405180910390a16001905092915050565b6000600254905090565b6000610f12611b73565b1515610f1d57600080fd5b60085482101515610f2d57600080fd5b816008819055507fd88c7ad3ae41e68ac887201d1fb9dc3716b3e9ce1d1b9ee59d6dbe362d937778826040518082815260200191505060405180910390a160019050919050565b600d6020528060005260406000206000915090505481565b600061101d82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110a8848484612376565b600190509392505050565b60006110bd611b73565b15156110c857600080fd5b60f0821115156110d757600080fd5b816010819055507fdce2ac3ceb7de8767c49aa623db543b5ad08bd154b0293a9f79318a3337a4916826040518082815260200191505060405180910390a160019050919050565b600081565b601281565b601260ff16600a0a6305d75c800281565b6000806000600d6000856040516020018082805190602001908083835b60208310151561117b5780518252602082019150602081019050602083039250611156565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156111e457805182526020820191506020810190506020830392506111bf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020541415151561123557600080fd5b600d6000846040516020018082805190602001908083835b602083101515611272578051825260208201915060208101905060208303925061124d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156112db57805182526020820191506020810190506020830392506112b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000205490506000600d6000856040516020018082805190602001908083835b602083101515611360578051825260208201915060208101905060208303925061133b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156113c957805182526020820191506020810190506020830392506113a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020819055507f8042eb60f02d4b2e87cd114b4c3e7a2c96c71a29ea192309198b2b4a2b1073da81843360405180848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156114ac578082015181840152602081019050611491565b50505050905090810190601f1680156114d95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16114f23382612542565b6115456001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461235590919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156116145780600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6001915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561165b57600080fd5b6116ea82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461235590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6118a5611b73565b15156118b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff6a7092513e1f3f720c1d0ad65eb323494afe10d43e19dc4a40bac61ade7579160405160405180910390a36000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600061197c33612092565b151561198757600080fd5b6a39e7139a8c08fa0600000061199b610efe565b1115156119a757600080fd5b6116806009819055506004600a819055507f0ddb75f3d5441965abc2c6f3cd652efb07e14bf753657b88485558a5123a3a1f6001604051808215151515815260200191505060405180910390a16001905090565b611a0433612092565b1515611a0f57600080fd5b601260ff16600a0a6305d75c8002611a37611a28610efe565b8361235590919063ffffffff16565b101515611a4357600080fd5b60085481101515611a5357600080fd5b43600781905550806006819055507ffbebdeb0774e0a4c640caae2d2a6a8bb530fd24ea902def27e996d12c318a6a58143604051808381526020018281526020019250505060405180910390a150565b6000611aad611b73565b1515611ab857600080fd5b60018210151515611ac857600080fd5b81600a8190555060019050919050565b6000611ae333612092565b1515611aee57600080fd5b600060075414151515611b0057600080fd5b600954611b186007544361233490919063ffffffff16565b111515611b2457600080fd5b6000600781905550611b3882600654612542565b600060068190555060019050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6040805190810160405280600581526020017f515545535400000000000000000000000000000000000000000000000000000081525081565b611c0d33612092565b1515611c1857600080fd5b611c2181612696565b50565b611c2d336126f0565b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611c6c57600080fd5b611cfb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600080611e7233612092565b1515611e7d57600080fd5b6000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611ecb57600080fd5b611f1f600a54600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461274a90919063ffffffff16565b90506000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f708382612542565b611fc36001600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461235590919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fe366ef68d2c0620e9e4c5074fd7ad0ce6739b65287f9c2d09b7d002da556879b8382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001915050919050565b6000612088338484612376565b6001905092915050565b60006120a882600361277490919063ffffffff16565b9050919050565b6000816040516020018082805190602001908083835b6020831015156120ea57805182526020820191506020810190506020830392506120c5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612153578051825260208201915060208101905060208303925061212e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b6000612191611b73565b151561219c57600080fd5b600f54821015156121ac57600080fd5b81600f819055507f7debfb148e65e0ab27cd74ef6fdb48d1a715a7221a4ec748dcb9c5c30df317b5826040518082815260200191505060405180910390a160019050919050565b600c6020528060005260406000206000915090505481565b600b6020528060005260406000206000915090505481565b600061222e33612092565b151561223957600080fd5b6a108b2a2c2802909400000061224d610efe565b11151561225957600080fd5b619de46009819055506002600a819055507f9cda3d77e343bbbcbdb2f2c03b6a1c9d5a76031cc13a837a1fab15af9e60921e6001604051808215151515815260200191505060405180910390a16001905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083831115151561234657600080fd5b82840390508091505092915050565b600080828401905083811015151561236c57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156123b257600080fd5b612403816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612496816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461235590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561257e57600080fd5b6125938160025461235590919063ffffffff16565b6002819055506125ea816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461235590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6126aa81600361280890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6127048160036128b890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008060008311151561275c57600080fd5b828481151561276757fe5b0490508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127b157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561284457600080fd5b61284e8282612774565b15151561285a57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128f457600080fd5b6128fe8282612774565b151561290957600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820a061f8d4f195ec4586e9d36c3e5861f6c3bc74208d0fe624dd5defb20fe6f2a60029"
}