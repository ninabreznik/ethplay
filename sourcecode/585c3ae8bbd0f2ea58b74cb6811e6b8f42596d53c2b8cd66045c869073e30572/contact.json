{
  "address": "0x5e365a320779acc2c72f5dcd2ba8a81e4a34569f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESCBCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-31\n*/\n\npragma solidity ^0.4.19;\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n// Slightly modified Zeppelin's Vested Token deriving MiniMeToken\n\n/*\n    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n    Copyright 2017, Jordi Baylina (Giveth)\n\n    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n*/\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n}\n\n/*\n    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n    Copyright 2017, Jordi Baylina (Giveth)\n\n    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n */\n\ncontract Controlled {\n    address public controller;\n\n    function Controlled() {\n         controller = msg.sender;\n    }\n\n    /// @notice The address of the controller is the only address that can call\n    ///    a function with this modifier\n    modifier onlyController {\n        require(msg.sender == controller);\n        _;\n    }\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\n/*\n    Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n    Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n    Copyright 2017, Jordi Baylina (Giveth)\n\n    Based on MiniMeToken.sol from https://github.com/Giveth/minime\n */\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///    controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///    controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) returns(bool);\n}\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.    If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///    token using the token distribution at a given block, this will allow DAO's\n///    and DApps to upgrade their features in a decentralized manner without\n///    affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///    that deploys the contract, so usually this token will be deployed by a\n///    token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;               //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;               //An identifier: e.g. REP\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///    given value, the block number attached is the one that last changed the\n    ///    value\n    struct    Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //    it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //    used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //    contract when the balance changes the block number that the change\n    //    occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///    will create the Clone token contracts, the token factory needs to be\n    ///    deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///    new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///    determine the initial distribution of the clone token, set to 0 if it\n    ///    is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                // Set the name\n        decimals = _decimalUnits;                            // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///    is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //    this is important to recognize! Confirm that you trust the\n        //    controller of this contract, which in most situations should be\n        //    another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            require(allowed[_from][msg.sender] >= _amount);\n            allowed[_from][msg.sender] -= _amount;\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///    only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal {\n\n             if (_amount == 0) {\n             Transfer(_from, _to, _amount);    // Follow the spec to issue the event when transfer 0\n             return;\n             }\n\n             require(parentSnapShotBlock < block.number);\n\n             // Do not allow transfer to 0x0 or the token contract itself\n             require((_to != 0) && (_to != address(this)));\n\n             // If the amount being transfered is more than the balance of the\n             //    account the transfer throws\n             uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n             require(previousBalanceFrom >= _amount);\n\n             // Alerts the token controller of the transfer\n             if (isContract(controller)) {\n                 require(TokenController(controller).onTransfer(_from, _to, _amount));\n             }\n\n             // First update the balance array with the new value for the address\n             //    sending the tokens\n             updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n             // Then update the balance array with the new value for the address\n             //    receiving the tokens\n             uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n             require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n             updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n             // An event to make the transfer easy to find on the blockchain\n             Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///    its behalf. This is a modified version of the ERC20 approve function\n    ///    to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //    allowance to zero by calling `approve(_spender,0)` if it is not\n        //    already 0 to mitigate the race condition described here:\n        //    https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///    to spend\n    function allowance(address _owner, address _spender\n    ) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///    its behalf, and then a function is triggered in the contract that is\n    ///    being approved, `_spender`. This allows users to use their tokens to\n    ///    interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public view\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //    requested before a check point was ever created for this token, it\n        //    requires that the `parentToken.balanceOfAt` be queried at the\n        //    genesis block for that token as this contains initial balance of\n        //    this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n               return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n               // Has no parent\n               return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //    requested before a check point was ever created for this token, it\n        //    requires that the `parentToken.totalSupplyAt` be queried at the\n        //    genesis block for this token as that contains totalSupply of this\n        //    token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n               return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n               return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///    this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///    copied to set the initial distribution of the new clone token;\n    ///    if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint256 _amount\n    ) onlyController returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint256 previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) internal view returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n               min = mid;\n            } else {\n               max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///    `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal    {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n                 Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n                 newCheckPoint.fromBlock =    uint128(block.number);\n                 newCheckPoint.value = uint128(_value);\n             } else {\n                 Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n                 oldCheckPoint.value = uint128(_value);\n             }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) internal view returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///    set to 0, then the `proxyPayment` method is called which relays the\n    ///    ether and creates tokens as described in the token controller contract\n    function ()    payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///    sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///    set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///    In solidity this is the way to create a contract from a contract of the\n///    same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///    the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///    determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n/**\n    * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n    * Copyright 2017, Jorge Izquierdo (Aragon Foundation)\n    *\n    * Based on VestedToken.sol from https://github.com/OpenZeppelin/zeppelin-solidity\n    *\n    * Math – Copyright (c) 2016 Smart Contract Solutions, Inc.\n    * SafeMath – Copyright (c) 2016 Smart Contract Solutions, Inc.\n    * MiniMeToken – Copyright 2017, Jordi Baylina (Giveth)\n    **/\n\n// @dev MiniMeIrrevocableVestedToken is a derived version of MiniMeToken adding the\n// ability to createTokenGrants which are basically a transfer that limits the\n// receiver of the tokens how can he spend them over time.\n\n// For simplicity, token grants are not saved in MiniMe type checkpoints.\n// Vanilla cloning ESCBCoin will clone it into a MiniMeToken without vesting.\n// More complex cloning could account for past vesting calendars.\n\ncontract MiniMeIrrevocableVestedToken is MiniMeToken {\n\n    using SafeMath for uint256;\n\n    uint256 MAX_GRANTS_PER_ADDRESS = 20;\n    // Keep the struct at 2 stores (1 slot for value + 64 * 3 (dates) + 20 (address) = 2 slots\n    // (2nd slot is 212 bytes, lower than 256))\n    struct TokenGrant {\n    address granter;    // 20 bytes\n    uint256 value;         // 32 bytes\n    uint64 cliff;\n    uint64 vesting;\n    uint64 start;        // 3 * 8 = 24 bytes\n    bool revokable;\n    bool burnsOnRevoke;    // 2 * 1 = 2 bits? or 2 bytes?\n    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n    mapping (address => TokenGrant[]) public grants;\n\n    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint64 start, uint64 cliff, uint64 vesting, uint256 grantId);\n\n    mapping (address => bool) canCreateGrants;\n    address vestingWhitelister;\n\n    modifier canTransfer(address _sender, uint _value) {\n    require(_value <= spendableBalanceOf(_sender));\n    _;\n    }\n\n    modifier onlyVestingWhitelister {\n    require(msg.sender == vestingWhitelister);\n    _;\n    }\n\n    function MiniMeIrrevocableVestedToken (\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\n    vestingWhitelister = msg.sender;\n    doSetCanCreateGrants(vestingWhitelister, true);\n    }\n\n    // @dev Add canTransfer modifier before allowing transfer and transferFrom to go through\n    function transfer(address _to, uint _value)\n             canTransfer(msg.sender, _value)\n             public\n             returns (bool success) {\n    return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value)\n             canTransfer(_from, _value)\n             public\n             returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n    }\n\n    function spendableBalanceOf(address _holder) constant public returns (uint) {\n    return transferableTokens(_holder, uint64(now));\n    }\n\n    /**\n    * @dev Grant tokens to a specified address\n    * @param _to address The address which the tokens will be granted to.\n    * @param _value uint256 The amount of tokens to be granted.\n    * @param _start uint64 Time of the beginning of the grant.\n    * @param _cliff uint64 Time of the cliff period.\n    * @param _vesting uint64 The vesting period.\n    * @param _revokable bool Token can be revoked with send amount to back.\n    * @param _burnsOnRevoke bool Token can be revoked with send amount to back and destroyed.\n    */\n    function grantVestedTokens(\n    address _to,\n    uint256 _value,\n    uint64 _start,\n    uint64 _cliff,\n    uint64 _vesting,\n    bool _revokable,\n    bool _burnsOnRevoke\n    ) public {\n\n    // Check for date inconsistencies that may cause unexpected behavior\n    require(_cliff >= _start && _vesting >= _cliff);\n    require(canCreateGrants[msg.sender]);\n\n    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);    // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n    uint256 count = grants[_to].push(\n               TokenGrant(\n                   _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n                   _value,\n                   _cliff,\n                   _vesting,\n                   _start,\n                   _revokable,\n                   _burnsOnRevoke\n               )\n               );\n\n    transfer(_to, _value);\n\n    NewTokenGrant(msg.sender, _to, _value, _cliff, _vesting, _start, count - 1);\n    }\n\n    function setCanCreateGrants(address _addr, bool _allowed) onlyVestingWhitelister public {\n    doSetCanCreateGrants(_addr, _allowed);\n    }\n\n    function doSetCanCreateGrants(address _addr, bool _allowed) internal {\n    canCreateGrants[_addr] = _allowed;\n    }\n\n    function changeVestingWhitelister(address _newWhitelister) onlyVestingWhitelister public {\n    doSetCanCreateGrants(vestingWhitelister, false);\n    vestingWhitelister = _newWhitelister;\n    doSetCanCreateGrants(vestingWhitelister, true);\n    }\n\n    /**\n    * @dev Revoke the grant of tokens of a specifed address.\n    * @param _holder The address which will have its tokens revoked.\n    * @param _grantId The id of the token grant.\n    */\n    function revokeTokenGrant(address _holder, uint256 _grantId) public {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    require(grant.revokable);\n    require(grant.granter == msg.sender); // Only granter can revoke it\n\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n\n    // remove grant from array\n    delete grants[_holder][_grantId];\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n    grants[_holder].length -= 1;\n\n    var previousBalanceReceiver = balanceOfAt(receiver, block.number);\n\n    //balances[receiver] = balances[receiver].add(nonVested);\n    updateValueAtNow(balances[receiver], previousBalanceReceiver + nonVested);\n\n    var previousBalance_holder = balanceOfAt(_holder, block.number);\n\n    //balances[_holder] = balances[_holder].sub(nonVested);\n    updateValueAtNow(balances[_holder], previousBalance_holder - nonVested);\n\n    Transfer(_holder, receiver, nonVested);\n    }\n\n    /**\n    * @dev Calculate the total amount of transferable tokens of a holder at a given time\n    * @param holder address The address of the holder\n    * @param time uint64 The specific time.\n    * @return An uint256 representing a holder's total amount of transferable tokens.\n    */\n    function transferableTokens(address holder, uint64 time) public view returns (uint256) {\n    uint256 grantIndex = tokenGrantsCount(holder);\n\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n\n    // Iterate through all the grants the holder has, and add all non-vested tokens\n    uint256 nonVested = 0;\n    for (uint256 i = 0; i < grantIndex; i++) {\n        nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n    }\n\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n\n    // Return the minimum of how many vested can transfer and other value\n    // in case there are other limiting transferability factors (default is balanceOf)\n    return Math.min256(vestedTransferable, balanceOf(holder));\n    }\n\n    /**\n    * @dev Check the amount of grants that an address has.\n    * @param _holder The holder of the grants.\n    * @return A uint256 representing the total amount of grants.\n    */\n    function tokenGrantsCount(address _holder) public view returns (uint256 index) {\n    return grants[_holder].length;\n    }\n\n    /**\n    * @dev Calculate amount of vested tokens at a specifc time.\n    * @param tokens uint256 The amount of tokens grantted.\n    * @param time uint64 The time to be checked\n    * @param start uint64 A time representing the begining of the grant\n    * @param cliff uint64 The cliff period.\n    * @param vesting uint64 The vesting period.\n    * @return An uint256 representing the amount of vested tokensof a specif grant.\n    *    transferableTokens\n    *    |                        _/--------    vestedTokens rect\n    *    |                        _/\n    *    |                    _/\n    *    |                    _/\n    *    |                 _/\n    *    |               /\n    *    |               .|\n    *    |            .    |\n    *    |            .    |\n    *    |        .        |\n    *    |        .        |\n    *    |    .            |\n    *    +===+===========+---------+----------> time\n    *        Start         Clift    Vesting\n    */\n    function calculateVestedTokens(\n    uint256 tokens,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) internal view returns (uint256)\n    {\n        // Shortcuts for before cliff and after vesting cases.\n        if (time < cliff) return 0;\n        if (time >= vesting) return tokens;\n\n        // Interpolate all vested tokens.\n        // As before cliff the shortcut returns 0, we can use just calculate a value\n        // in the vesting rect (as shown in above's figure)\n\n        // vestedTokens = tokens * (time - start) / (vesting - start)\n        uint256 vestedTokens = SafeMath.div(\n                                    SafeMath.mul(\n                                       tokens,\n                                       SafeMath.sub(time, start)\n                                       ),\n                                    SafeMath.sub(vesting, start)\n                                    );\n\n        return vestedTokens;\n    }\n\n    /**\n    * @dev Get all information about a specifc grant.\n    * @param _holder The address which will have its tokens revoked.\n    * @param _grantId The id of the token grant.\n    * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n    * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n    */\n    function tokenGrant(address _holder, uint256 _grantId) public view returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    granter = grant.granter;\n    value = grant.value;\n    start = grant.start;\n    cliff = grant.cliff;\n    vesting = grant.vesting;\n    revokable = grant.revokable;\n    burnsOnRevoke = grant.burnsOnRevoke;\n\n    vested = vestedTokens(grant, uint64(now));\n    }\n\n    /**\n    * @dev Get the amount of vested tokens at a specific time.\n    * @param grant TokenGrant The grant to be checked.\n    * @param time The time to be checked\n    * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n    */\n    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    return calculateVestedTokens(\n        grant.value,\n        uint256(time),\n        uint256(grant.start),\n        uint256(grant.cliff),\n        uint256(grant.vesting)\n    );\n    }\n\n    /**\n    * @dev Calculate the amount of non vested tokens at a specific time.\n    * @param grant TokenGrant The grant to be checked.\n    * @param time uint64 The time to be checked\n    * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\n    * passed time frame.\n    */\n    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    // Of all the tokens of the grant, how many of them are not vested?\n    // grantValue - vestedTokens\n    return grant.value.sub(vestedTokens(grant, time));\n    }\n\n    /**\n    * @dev Calculate the date when the holder can trasfer all its tokens\n    * @param holder address The address of the holder\n    * @return An uint256 representing the date of the last transferable tokens.\n    */\n    function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n    date = uint64(now);\n    uint256 grantIndex = grants[holder].length;\n    for (uint256 i = 0; i < grantIndex; i++) {\n        date = Math.max64(grants[holder][i].vesting, date);\n    }\n    }\n\n}\n\n/**\n * Dividends\n * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n * Copyright 2017, Adam Dossa\n * Based on ProfitSharingContract.sol from https://github.com/adamdossa/ProfitSharingContract\n **/\n\ncontract MiniMeIrrVesDivToken is MiniMeIrrevocableVestedToken {\n\n    event DividendDeposited(address indexed _depositor, uint256 _blockNumber, uint256 _timestamp, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\n    event DividendClaimed(address indexed _claimer, uint256 _dividendIndex, uint256 _claim);\n    event DividendRecycled(address indexed _recycler, uint256 _blockNumber, uint256 _timestamp, uint256 _amount, uint256 _totalSupply, uint256 _dividendIndex);\n\n    uint256 public RECYCLE_TIME = 1 years;\n\n    function MiniMeIrrVesDivToken (\n         address _tokenFactory,\n         address _parentToken,\n         uint _parentSnapShotBlock,\n         string _tokenName,\n         uint8 _decimalUnits,\n         string _tokenSymbol,\n         bool _transfersEnabled\n    ) public MiniMeIrrevocableVestedToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {}\n\n    struct Dividend {\n    uint256 blockNumber;\n    uint256 timestamp;\n    uint256 amount;\n    uint256 claimedAmount;\n    uint256 totalSupply;\n    bool recycled;\n    mapping (address => bool) claimed;\n    }\n\n    Dividend[] public dividends;\n\n    mapping (address => uint256) dividendsClaimed;\n\n    modifier validDividendIndex(uint256 _dividendIndex) {\n    require(_dividendIndex < dividends.length);\n    _;\n    }\n\n    function depositDividend() public payable\n    onlyController\n    {\n    uint256 currentSupply = super.totalSupplyAt(block.number);\n    uint256 dividendIndex = dividends.length;\n    uint256 blockNumber = SafeMath.sub(block.number, 1);\n    dividends.push(\n         Dividend(\n         blockNumber,\n         getNow(),\n         msg.value,\n         0,\n         currentSupply,\n         false\n         )\n    );\n    DividendDeposited(msg.sender, blockNumber, getNow(), msg.value, currentSupply, dividendIndex);\n    }\n\n    function claimDividend(uint256 _dividendIndex) public\n    validDividendIndex(_dividendIndex)\n    {\n    Dividend storage dividend = dividends[_dividendIndex];\n    require(dividend.claimed[msg.sender] == false);\n    require(dividend.recycled == false);\n    uint256 balance = super.balanceOfAt(msg.sender, dividend.blockNumber);\n    uint256 claim = balance.mul(dividend.amount).div(dividend.totalSupply);\n    dividend.claimed[msg.sender] = true;\n    dividend.claimedAmount = SafeMath.add(dividend.claimedAmount, claim);\n    if (claim > 0) {\n         msg.sender.transfer(claim);\n         DividendClaimed(msg.sender, _dividendIndex, claim);\n    }\n    }\n\n    function claimDividendAll() public {\n    require(dividendsClaimed[msg.sender] < dividends.length);\n    for (uint i = dividendsClaimed[msg.sender]; i < dividends.length; i++) {\n         if ((dividends[i].claimed[msg.sender] == false) && (dividends[i].recycled == false)) {\n         dividendsClaimed[msg.sender] = SafeMath.add(i, 1);\n         claimDividend(i);\n         }\n    }\n    }\n\n    function recycleDividend(uint256 _dividendIndex) public\n    onlyController\n    validDividendIndex(_dividendIndex)\n    {\n    Dividend storage dividend = dividends[_dividendIndex];\n    require(dividend.recycled == false);\n    require(dividend.timestamp < SafeMath.sub(getNow(), RECYCLE_TIME));\n    dividends[_dividendIndex].recycled = true;\n    uint256 currentSupply = super.totalSupplyAt(block.number);\n    uint256 remainingAmount = SafeMath.sub(dividend.amount, dividend.claimedAmount);\n    uint256 dividendIndex = dividends.length;\n    uint256 blockNumber = SafeMath.sub(block.number, 1);\n    dividends.push(\n         Dividend(\n         blockNumber,\n         getNow(),\n         remainingAmount,\n         0,\n         currentSupply,\n         false\n         )\n    );\n    DividendRecycled(msg.sender, blockNumber, getNow(), remainingAmount, currentSupply, dividendIndex);\n    }\n\n    function getNow() internal constant returns (uint256) {\n    return now;\n    }\n}\n\n/**\n * Copyright 2018, Konstantin Viktorov (EscrowBlock Foundation)\n **/\n\ncontract ESCBCoin is MiniMeIrrVesDivToken {\n  // @dev ESCBCoin constructor just parametrizes the MiniMeIrrVesDivToken constructor\n  function ESCBCoin (\n    address _tokenFactory\n  ) public MiniMeIrrVesDivToken(\n    _tokenFactory,\n    0x0,            // no parent token\n    0,              // no snapshot block number from parent\n    \"ESCB token\",   // Token name\n    18,             // Decimals\n    \"ESCB\",         // Symbol\n    true            // Enable transfers\n    ) {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setCanCreateGrants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendIndex\",\"type\":\"uint256\"}],\"name\":\"recycleDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividendAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECYCLE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"recycled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendIndex\",\"type\":\"uint256\"}],\"name\":\"claimDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"changeVestingWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dividendIndex\",\"type\":\"uint256\"}],\"name\":\"DividendDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_dividendIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claim\",\"type\":\"uint256\"}],\"name\":\"DividendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recycler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dividendIndex\",\"type\":\"uint256\"}],\"name\":\"DividendRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"cliff\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"vesting\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600781526020017f4d4d545f302e310000000000000000000000000000000000000000000000000081525060049080519060200190620000519291906200033c565b506014600c556301e1338060105534156200006b57600080fd5b6040516020806200542a83398101604052808051906020019091905050806000806040805190810160405280600a81526020017f4553434220746f6b656e0000000000000000000000000000000000000000000081525060126040805190810160405280600481526020017f455343420000000000000000000000000000000000000000000000000000000081525060018686868686868686868686868686336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360019080519060200190620001a39291906200033c565b5082600260006101000a81548160ff021916908360ff1602179055508160039080519060200190620001d79291906200033c565b5085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460068190555080600b60006101000a81548160ff021916908315150217905550436007819055505050505050505033600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002cc600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001620002e164010000000002620042c8176401000000009004565b505050505050505050505050505050620003eb565b80600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037f57805160ff1916838001178555620003b0565b82800160010185558215620003b0579182015b82811115620003af57825182559160200191906001019062000392565b5b509050620003bf9190620003c3565b5090565b620003e891905b80821115620003e4576000816000905550600101620003ca565b5090565b90565b61502f80620003fb6000396000f3006060604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302a72a4c1461031b57806306fdde0314610368578063095ea7b3146103f65780630f8f8b8314610450578063176345141461049d57806318160ddd146104c65780631f9a391c146104ef57806322c9427e1461053357806323b872dd146105565780632c71e60a146105cf57806330e1f16f146106bf578063313ce567146106d45780633cebb823146107035780634ee2cd7e1461073c57806354fd4d5014610792578063600e85b7146108205780636638c087146109175780636c182e9914610a1757806370a0823114610a785780637c1a35d714610ac557806380a5400114610aee578063814b3fe014610b43578063827f32c014610ba157806395d89b4114610bfb5780639754a4d914610c89578063981b24d014610d1a5780639abd357214610d51578063a289d18714610d74578063a9059cbb14610d7e578063bef97c8714610dd8578063c5bcc4f114610e05578063cae9ca5114610e2e578063d347c20514610ecb578063d3ce77fe14610f2b578063dd62ed3e14610f85578063df8de3e714610ff1578063e77772fe1461102a578063eb944e4c1461107f578063f41e60c5146110c1578063f77c4791146110e6578063fb13a7071461113b575b6102236000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611174565b151561022e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f48c305434336000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15156102f257600080fd5b6125ee5a03f1151561030357600080fd5b5050505060405180519050151561031957600080fd5b005b341561032657600080fd5b610352600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111b0565b6040518082815260200191505060405180910390f35b341561037357600080fd5b61037b6111fc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bb5780820151818401526020810190506103a0565b50505050905090810190601f1680156103e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040157600080fd5b610436600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061129a565b604051808215151515815260200191505060405180910390f35b341561045b57600080fd5b610487600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611593565b6040518082815260200191505060405180910390f35b34156104a857600080fd5b6104b06115a6565b6040518082815260200191505060405180910390f35b34156104d157600080fd5b6104d96115ac565b6040518082815260200191505060405180910390f35b34156104fa57600080fd5b610531600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506115bc565b005b341561053e57600080fd5b6105546004808035906020019091905050611626565b005b341561056157600080fd5b6105b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118a6565b604051808215151515815260200191505060405180910390f35b34156105da57600080fd5b61060f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118d7565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018667ffffffffffffffff1667ffffffffffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff168152602001831515151581526020018215151515815260200197505050505050505060405180910390f35b34156106ca57600080fd5b6106d26119ab565b005b34156106df57600080fd5b6106e7611b6b565b604051808260ff1660ff16815260200191505060405180910390f35b341561070e57600080fd5b61073a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b7e565b005b341561074757600080fd5b61077c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c1c565b6040518082815260200191505060405180910390f35b341561079d57600080fd5b6107a5611e91565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107e55780820151818401526020810190506107ca565b50505050905090810190601f1680156108125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561082b57600080fd5b610860600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f2f565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018667ffffffffffffffff1667ffffffffffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff16815260200183151515158152602001821515151581526020019850505050505050505060405180910390f35b341561092257600080fd5b6109d5600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080351515906020019091905050612192565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a2257600080fd5b610a4e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612489565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3415610a8357600080fd5b610aaf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612574565b6040518082815260200191505060405180910390f35b3415610ad057600080fd5b610ad8612587565b6040518082815260200191505060405180910390f35b3415610af957600080fd5b610b0161258d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b4e57600080fd5b610b6460048080359060200190919050506125b3565b6040518087815260200186815260200185815260200184815260200183815260200182151515158152602001965050505050505060405180910390f35b3415610bac57600080fd5b610be1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061260b565b604051808215151515815260200191505060405180910390f35b3415610c0657600080fd5b610c0e612755565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c4e578082015181840152602081019050610c33565b50505050905090810190601f168015610c7b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610c9457600080fd5b610d18600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091908035151590602001909190803515159060200190919050506127f3565b005b3415610d2557600080fd5b610d3b6004808035906020019091905050612b82565b6040518082815260200191505060405180910390f35b3415610d5c57600080fd5b610d726004808035906020019091905050612d0b565b005b610d7c612f1e565b005b3415610d8957600080fd5b610dbe600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506130cf565b604051808215151515815260200191505060405180910390f35b3415610de357600080fd5b610deb6130fe565b604051808215151515815260200191505060405180910390f35b3415610e1057600080fd5b610e18613111565b6040518082815260200191505060405180910390f35b3415610e3957600080fd5b610eb1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050613117565b604051808215151515815260200191505060405180910390f35b3415610ed657600080fd5b610f15600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050613290565b6040518082815260200191505060405180910390f35b3415610f3657600080fd5b610f6b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506134b3565b604051808215151515815260200191505060405180910390f35b3415610f9057600080fd5b610fdb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506135f9565b6040518082815260200191505060405180910390f35b3415610ffc57600080fd5b611028600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613680565b005b341561103557600080fd5b61103d6139b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561108a57600080fd5b6110bf600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506139d7565b005b34156110cc57600080fd5b6110e460048080351515906020019091905050614131565b005b34156110f157600080fd5b6110f96141a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561114657600080fd5b611172600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506141ce565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff16141561119f57600091506111aa565b823b90506000811191505b50919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b505050505081565b6000600b60009054906101000a900460ff1615156112b757600080fd5b600082148061134257506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561134d57600080fd5b6113776000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611174565b156114a3576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561147c57600080fd5b6102c65a03f1151561148d57600080fd5b5050506040518051905015156114a257600080fd5b5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600061159f8242613290565b9050919050565b60075481565b60006115b743612b82565b905090565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161857600080fd5b61162282826142c8565b5050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168957600080fd5b856011805490508110151561169d57600080fd5b6011878154811015156116ac57fe5b90600052602060002090600702019550600015158660050160009054906101000a900460ff1615151415156116e057600080fd5b6116f36116eb614323565b60105461432b565b866001015410151561170457600080fd5b600160118881548110151561171557fe5b906000526020600020906007020160050160006101000a81548160ff02191690831515021790555061174643612b82565b945061175a8660020154876003015461432b565b9350601180549050925061176f43600161432b565b9150601180548060010182816117859190614dba565b9160005260206000209060070201600060c0604051908101604052808681526020016117af614323565b815260200188815260200160008152602001898152602001600015158152509091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050503373ffffffffffffffffffffffffffffffffffffffff167f654f6c6d8c5993b3a48fd45ebd2dad7c1f46361368e21781a8b726dd719e99de83611869614323565b878988604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a250505050505050565b600083826118b382611593565b81111515156118c157600080fd5b6118cc868686614344565b925050509392505050565b600d602052816000526040600020818154811015156118f257fe5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16908060020160109054906101000a900467ffffffffffffffff16908060020160189054906101000a900460ff16908060020160199054906101000a900460ff16905087565b6000601180549050601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156119ff57600080fd5b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b601180549050811015611b685760001515601182815481101515611a6257fe5b906000526020600020906007020160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015611afe575060001515601182815481101515611adb57fe5b906000526020600020906007020160050160009054906101000a900460ff161515145b15611b5b57611b0e8160016144e3565b601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b5a81612d0b565b5b8080600101915050611a42565b50565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bd957600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480611cf6575081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815481101515611cb757fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611e40576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e3757600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e84611d8885600654614501565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611e1557600080fd5b6102c65a03f11515611e2657600080fd5b505050604051805190509050611e8b565b60009050611e8b565b611e88600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361451a565b90505b92915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f275780601f10611efc57610100808354040283529160200191611f27565b820191906000526020600020905b815481529060010190602001808311611f0a57829003601f168201915b505050505081565b6000806000806000806000806000600d60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a815481101515611f8957fe5b906000526020600020906003020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169850806001015497508060020160109054906101000a900467ffffffffffffffff1695508060020160009054906101000a900467ffffffffffffffff1694508060020160089054906101000a900467ffffffffffffffff1693508060020160189054906101000a900460ff1692508060020160199054906101000a900460ff1691506121828160e060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900460ff161515151581526020016002820160199054906101000a900460ff1615151515815250504261472e565b9650509295985092959890939650565b60008060008414156121a2574393505b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7b72c130868a8a8a896000604051602001526040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff1681526020018060200184151515158152602001838103835287818151815260200191508051906020019080838360005b838110156122ac578082015181840152602081019050612291565b50505050905090810190601f1680156122d95780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156123125780820151818401526020810190506122f7565b50505050905090810190601f16801561233f5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b151561236357600080fd5b6102c65a03f1151561237457600080fd5b5050506040518051905090508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b151561241a57600080fd5b6102c65a03f1151561242b57600080fd5b5050508073ffffffffffffffffffffffffffffffffffffffff167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade856040518082815260200191505060405180910390a28091505095945050505050565b6000806000429250600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509150600090505b8181101561256d5761255e600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561253257fe5b906000526020600020906003020160020160089054906101000a900467ffffffffffffffff168461477d565b925080806001019150506124db565b5050919050565b60006125808243611c1c565b9050919050565b60105481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6011818154811015156125c257fe5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561266b57600080fd5b6126736115ac565b9150818483011015151561268657600080fd5b61268f85612574565b905080848201101515156126a257600080fd5b6126af600a8584016147ab565b6126f9600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583016147ab565b8473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127eb5780601f106127c0576101008083540402835291602001916127eb565b820191906000526020600020905b8154815290600101906020018083116127ce57829003601f168201915b505050505081565b60008567ffffffffffffffff168567ffffffffffffffff161015801561282d57508467ffffffffffffffff168467ffffffffffffffff1610155b151561283857600080fd5b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561289057600080fd5b600c5461289c896111b0565b1015156128a857600080fd5b600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060010182816128f99190614dec565b9160005260206000209060030201600060e06040519081016040528087612921576000612923565b335b73ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018a67ffffffffffffffff1681526020018715158152602001861515815250909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160020160186101000a81548160ff02191690831515021790555060c08201518160020160196101000a81548160ff02191690831515021790555050509050612ab388886130cf565b508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167facf4cec39c634fc6958ddf75a7624844305bc72a2b9c55f689b2e9adb06dc6438988888b60018803604051808681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff1681526020018281526020019550505050505060405180910390a35050505050505050565b600080600a805490501480612be2575081600a6000815481101515612ba357fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15612cf8576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612cef57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0612c7384600654614501565b6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1515612ccd57600080fd5b6102c65a03f11515612cde57600080fd5b505050604051805190509050612d06565b60009050612d06565b612d03600a8361451a565b90505b919050565b60008060008360118054905081101515612d2457600080fd5b601185815481101515612d3357fe5b90600052602060002090600702019350600015158460060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612da457600080fd5b600015158460050160009054906101000a900460ff161515141515612dc857600080fd5b612dd6338560000154611c1c565b9250612e058460040154612df786600201548661492290919063ffffffff16565b61495d90919063ffffffff16565b915060018460060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e6f8460030154836144e3565b84600301819055506000821115612f17573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515612ec057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fa1c93169468f71ef26f4adf10bca8df21460f11843a01ed9c69da306e33c38478684604051808381526020018281526020019250505060405180910390a25b5050505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f7e57600080fd5b612f8743612b82565b92506011805490509150612f9c43600161432b565b905060118054806001018281612fb29190614dba565b9160005260206000209060070201600060c060405190810160405280858152602001612fdc614323565b815260200134815260200160008152602001878152602001600015158152509091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050503373ffffffffffffffffffffffffffffffffffffffff167fb4905ab4ae27a8ddd55bb2776c772228977220ad54db462c5cac4a7a1b83748282613096614323565b348787604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a2505050565b600033826130dc82611593565b81111515156130ea57600080fd5b6130f48585614978565b9250505092915050565b600b60009054906101000a900460ff1681565b60065481565b6000613123848461129a565b151561312e57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613223578082015181840152602081019050613208565b50505050905090810190601f1680156132505780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561327157600080fd5b6102c65a03f1151561328257600080fd5b505050600190509392505050565b60008060008060006132a1876111b0565b935060008414156132bc576132b587612574565b94506134a9565b60009250600091505b83821015613480576134718361346c600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110151561332057fe5b906000526020600020906003020160e060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900460ff161515151581526020016002820160199054906101000a900460ff161515151581525050896149aa565b6144e3565b925081806001019250506132c5565b61349261348c88612574565b8461432b565b90506134a6816134a189612574565b6149d4565b94505b5050505092915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561351357600080fd5b61351b6115ac565b915083821015151561352c57600080fd5b61353585612574565b905083811015151561354657600080fd5b613553600a8584036147ab565b61359d600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583036147ab565b60008573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156136de57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141561377a576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561377557600080fd5b6139ac565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561382057600080fd5b6102c65a03f1151561383157600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561390957600080fd5b6102c65a03f1151561391a57600080fd5b50505060405180519050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481101515613a2b57fe5b906000526020600020906003020194508460020160189054906101000a900460ff161515613a5857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613ab657600080fd5b8460020160199054906101000a900460ff16613ad25733613ad6565b61dead5b9350613c1a8560e060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900460ff161515151581526020016002820160199054906101000a900460ff161515151581525050426149aa565b9250600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481101515613c6857fe5b9060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff02191690556002820160106101000a81549067ffffffffffffffff02191690556002820160186101000a81549060ff02191690556002820160196101000a81549060ff02191690555050600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613db66001600d60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061432b90919063ffffffff16565b815481101515613dc257fe5b9060005260206000209060030201600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087815481101515613e1c57fe5b90600052602060002090600302016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900467ffffffffffffffff168160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002820160089054906101000a900467ffffffffffffffff168160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002820160109054906101000a900467ffffffffffffffff168160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002820160189054906101000a900460ff168160020160186101000a81548160ff0219169083151502179055506002820160199054906101000a900460ff168160020160196101000a81548160ff0219169083151502179055509050506001600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818180549050039150816140169190614e1e565b506140218443611c1c565b915061406d600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208484016147ab565b6140778743611c1c565b90506140c3600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208483036147ab565b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561418c57600080fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561422a57600080fd5b614257600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006142c8565b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506142c5600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016142c8565b50565b80600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600042905090565b600082821115151561433957fe5b818303905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156144cd57600b60009054906101000a900460ff1615156143b757600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561444257600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b6144d88484846149ed565b600190509392505050565b60008082840190508381101515156144f757fe5b8091505092915050565b60008183106145105781614512565b825b905092915050565b6000806000806000868054905014156145365760009350614725565b85600187805490500381548110151561454b57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16851015156145e9578560018780549050038154811015156145a557fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169350614725565b8560008154811015156145f857fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510156146455760009350614725565b60009250600186805490500391505b828211156146d757600260018484010181151561466d57fe5b04905084868281548110151561467f57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161115156146cb578092506146d2565b6001810391505b614654565b85838154811015156146e557fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b600061477583602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff16614d60565b905092915050565b60008167ffffffffffffffff168367ffffffffffffffff1610156147a157816147a3565b825b905092915050565b6000806000848054905014806148115750438460018680549050038154811015156147d257fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b156148be578384805480919060010161482a9190614e50565b81548110151561483657fe5b90600052602060002090019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061491c565b8360018580549050038154811015156148d357fe5b90600052602060002090019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b60008060008414156149375760009150614956565b828402905082848281151561494857fe5b0414151561495257fe5b8091505b5092915050565b600080828481151561496b57fe5b0490508091505092915050565b6000600b60009054906101000a900460ff16151561499557600080fd5b6149a03384846149ed565b6001905092915050565b60006149cc6149b9848461472e565b846020015161432b90919063ffffffff16565b905092915050565b60008183106149e357816149e5565b825b905092915050565b6000806000831415614a63578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3614d59565b43600654101515614a7357600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1614158015614ac657503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1515614ad157600080fd5b614adb8543611c1c565b9150828210151515614aec57600080fd5b614b166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611174565b15614c42576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a3931498686866000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515614c1b57600080fd5b6102c65a03f11515614c2c57600080fd5b505050604051805190501515614c4157600080fd5b5b614c8c600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208484036147ab565b614c968443611c1c565b90508083820110151515614ca957600080fd5b614cf3600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208483016147ab565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5050505050565b60008083861015614d745760009150614db0565b8286101515614d8557869150614db0565b614daa614d9b88614d96898961432b565b614922565b614da5858861432b565b61495d565b90508091505b5095945050505050565b815481835581811511614de757600702816007028360005260206000209182019101614de69190614e7c565b5b505050565b815481835581811511614e1957600302816003028360005260206000209182019101614e189190614ed7565b5b505050565b815481835581811511614e4b57600302816003028360005260206000209182019101614e4a9190614ed7565b5b505050565b815481835581811511614e7757818360005260206000209182019101614e769190614f9e565b5b505050565b614ed491905b80821115614ed05760008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549060ff021916905550600701614e82565b5090565b90565b614f9b91905b80821115614f9757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff02191690556002820160106101000a81549067ffffffffffffffff02191690556002820160186101000a81549060ff02191690556002820160196101000a81549060ff021916905550600301614edd565b5090565b90565b61500091905b80821115614ffc57600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101614fa4565b5090565b905600a165627a7a723058209746ffcf0392af9ae1e3444acd9db50f5519774fb81555c03432113d34bd37b50029000000000000000000000000c2a70783271c46a989209815f125ebe442b89cd4",
  "constructorArguments": "000000000000000000000000c2a70783271c46a989209815f125ebe442b89cd4"
}