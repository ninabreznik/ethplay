{
  "address": "0x1806b3527c18fb532c46405f6f014c1f381b499a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PlanetCryptoToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  /*function transferFrom(address from, address to, uint256 tokenId) public;*/\n  /*function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;*/\n\n  /*function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;*/\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  /*\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n  */\n}\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721_custom is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n  \n  \n  \n  \n    function internal_transferFrom(\n        address _from,\n        address to,\n        uint256 tokenId\n    )\n    internal\n  {\n    // permissions already checked on price basis\n    \n    require(to != address(0));\n\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n    \n    //_removeTokenFrom(from, tokenId);\n    if(_ownedTokensCount[_from] > 1) {\n    _ownedTokensCount[_from] = _ownedTokensCount[_from] -1; //.sub(1); // error here\n    // works without .sub()????\n    \n    }\n    _tokenOwner[tokenId] = address(0); \n    \n    _addTokenTo(to, tokenId); // error here?\n\n    emit Transfer(_from, to, tokenId);\n    \n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  /*function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }*/\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  /*function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }*/\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n  \n  \n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable_custom is ERC165, ERC721_custom, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n\n\n\n\n\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n\ncontract ERC721Metadata_custom is ERC165, ERC721_custom, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  \n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /*\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  \n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n*/\n  \n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n\ncontract ERC721Full_custom is ERC721_custom, ERC721Enumerable_custom, ERC721Metadata_custom {\n  constructor(string name, string symbol) ERC721Metadata_custom(name, symbol)\n    public\n  {\n  }\n}\n\n\ninterface PlanetCryptoCoin_I {\n    function balanceOf(address owner) external returns(uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\n}\n\ninterface PlanetCryptoUtils_I {\n    function validateLand(address _sender, int256[] plots_lat, int256[] plots_lng) external returns(bool);\n    function validatePurchase(address _sender, uint256 _value, int256[] plots_lat, int256[] plots_lng) external returns(bool);\n    function validateTokenPurchase(address _sender, int256[] plots_lat, int256[] plots_lng) external returns(bool);\n    function validateResale(address _sender, uint256 _value, uint256 _token_id) external returns(bool);\n\n    //UTILS\n    function strConcat(string _a, string _b, string _c, string _d, string _e, string _f) external view returns (string);\n    function strConcat(string _a, string _b, string _c, string _d, string _e) external view returns (string);\n    function strConcat(string _a, string _b, string _c, string _d) external view returns (string);\n    function strConcat(string _a, string _b, string _c) external view returns (string);\n    function strConcat(string _a, string _b) external view returns (string);\n    function int2str(int i) external view returns (string);\n    function uint2str(uint i) external view returns (string);\n    function substring(string str, uint startIndex, uint endIndex) external view returns (string);\n    function utfStringLength(string str) external view returns (uint length);\n    function ceil1(int256 a, int256 m) external view returns (int256 );\n    function parseInt(string _a, uint _b) external view returns (uint);\n    \n    function roundLatLngFull(uint8 _zoomLvl, int256 __in) external pure returns(int256);\n}\n\ninterface PlanetCryptoToken_I {\n    \n    function all_playerObjects(uint256) external returns(\n        address playerAddress,\n        uint256 lastAccess,\n        uint256 totalEmpireScore,\n        uint256 totalLand);\n        \n    function balanceOf(address) external returns(uint256);\n    \n    function getAllPlayerObjectLen() external returns(uint256);\n    \n    function getToken(uint256 _token_id, bool isBasic) external returns(\n        address token_owner,\n        bytes32  name,\n        uint256 orig_value,\n        uint256 current_value,\n        uint256 empire_score,\n        int256[] plots_lat,\n        int256[] plots_lng\n        );\n        \n    \n    function tax_distributed() external returns(uint256);\n    function tax_fund() external returns(uint256);\n    \n    function taxEarningsAvailable() external returns(uint256);\n    \n    function tokens_rewards_allocated() external returns(uint256);\n    function tokens_rewards_available() external returns(uint256);\n    \n    function total_empire_score() external returns(uint256);\n    function total_land_sold() external returns(uint256);\n    function total_trades() external returns(uint256);\n    function totalSupply() external returns(uint256);\n    function current_plot_price() external returns(uint256);\n    \n    \n}\n\n\nlibrary Percent {\n\n  struct percent {\n    uint num;\n    uint den;\n  }\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n/*\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) return 0;\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n*/\n}\n\n\n\ncontract PlanetCryptoToken is ERC721Full_custom{\n    \n    using Percent for Percent.percent;\n    \n    \n    // EVENTS\n        \n    event referralPaid(address indexed search_to,\n                    address to, uint256 amnt, uint256 timestamp);\n    \n    event issueCoinTokens(address indexed searched_to, \n                    address to, uint256 amnt, uint256 timestamp);\n    \n    event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, \n            uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp);\n    \n    event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp);\n    \n    event cardBought(\n                    uint256 indexed search_token_id, address indexed search_from, address indexed search_to,\n                    uint256 token_id, address from, address to, \n                    bytes32 name,\n                    uint256 orig_value, \n                    uint256 new_value,\n                    uint256 empireScore, uint256 newEmpireScore, uint256 now);\n                    \n    event cardChange(\n            uint256 indexed search_token_id,\n            address indexed search_owner, \n            uint256 token_id,\n            address owner, uint256 changeType, bytes32 data, uint256 now);\n            \n\n    // CONTRACT MANAGERS\n    address owner;\n    address devBankAddress; // where marketing funds are sent\n    address tokenBankAddress; \n\n    // MODIFIERS\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier validateLand(int256[] plots_lat, int256[] plots_lng) {\n        \n        require(planetCryptoUtils_interface.validateLand(msg.sender, plots_lat, plots_lng) == true, \"Some of this land already owned!\");\n\n        \n        _;\n    }\n    \n    modifier validatePurchase(int256[] plots_lat, int256[] plots_lng) {\n\n        require(planetCryptoUtils_interface.validatePurchase(msg.sender, msg.value, plots_lat, plots_lng) == true, \"Not enough ETH!\");\n        _;\n    }\n    \n    \n    modifier validateTokenPurchase(int256[] plots_lat, int256[] plots_lng) {\n\n        require(planetCryptoUtils_interface.validateTokenPurchase(msg.sender, plots_lat, plots_lng) == true, \"Not enough COINS to buy these plots!\");\n        \n\n        \n\n        require(planetCryptoCoin_interface.transferFrom(msg.sender, tokenBankAddress, plots_lat.length) == true, \"Token transfer failed\");\n        \n        \n        _;\n    }\n    \n    \n    modifier validateResale(uint256 _token_id) {\n        require(planetCryptoUtils_interface.validateResale(msg.sender, msg.value, _token_id) == true, \"Not enough ETH to buy this card!\");\n        _;\n    }\n    \n    \n    modifier updateUsersLastAccess() {\n        \n        uint256 allPlyersIdx = playerAddressToPlayerObjectID[msg.sender];\n        if(allPlyersIdx == 0){\n\n            all_playerObjects.push(player(msg.sender,now,0,0));\n            playerAddressToPlayerObjectID[msg.sender] = all_playerObjects.length-1;\n        } else {\n            all_playerObjects[allPlyersIdx].lastAccess = now;\n        }\n        \n        _;\n    }\n    \n    // STRUCTS\n    struct plotDetail {\n        bytes32 name;\n        uint256 orig_value;\n        uint256 current_value;\n        uint256 empire_score;\n        int256[] plots_lat;\n        int256[] plots_lng;\n        bytes32 img;\n    }\n    \n    struct plotBasic {\n        int256 lat;\n        int256 lng;\n    }\n    \n    struct player {\n        address playerAddress;\n        uint256 lastAccess;\n        uint256 totalEmpireScore;\n        uint256 totalLand;\n        \n        \n    }\n    \n\n    // INTERFACES\n    address planetCryptoCoinAddress = 0xA1c8031EF18272d8BfeD22E1b61319D6d9d2881B; // mainnet\n    PlanetCryptoCoin_I internal planetCryptoCoin_interface;\n    \n\n    address planetCryptoUtilsAddress = 0x8a511e355e4233f0ab14cddbc1dd60a80a349f8b; // mainnet\n    PlanetCryptoUtils_I internal planetCryptoUtils_interface;\n    \n    \n    \n    // settings\n    Percent.percent private m_newPlot_devPercent = Percent.percent(75,100); //75/100*100% = 75%\n    Percent.percent private m_newPlot_taxPercent = Percent.percent(25,100); //25%\n    \n    Percent.percent private m_resalePlot_devPercent = Percent.percent(10,100); // 10%\n    Percent.percent private m_resalePlot_taxPercent = Percent.percent(10,100); // 10%\n    Percent.percent private m_resalePlot_ownerPercent = Percent.percent(80,100); // 80%\n    \n    Percent.percent private m_refPercent = Percent.percent(5,100); // 5% referral \n    \n    Percent.percent private m_empireScoreMultiplier = Percent.percent(150,100); // 150%\n    Percent.percent private m_resaleMultipler = Percent.percent(200,100); // 200%;\n\n    \n    \n    \n    uint256 public devHoldings = 0; // holds dev funds in cases where the instant transfer fails\n\n\n    mapping(address => uint256) internal playersFundsOwed;\n\n\n\n\n    // add in limit of land plots before tokens stop being distributed\n    uint256 public tokens_rewards_available;\n    uint256 public tokens_rewards_allocated;\n    \n    // add in spend amount required to earn tokens\n    uint256 public min_plots_purchase_for_token_reward = 10;\n    uint256 public plots_token_reward_divisor = 10;\n    \n    \n    // GAME SETTINGS\n    uint256 public current_plot_price = 20000000000000000;\n    uint256 public price_update_amount = 2000000000000;\n    uint256 public cardChangeNameCost = 50000000000000000;\n    uint256 public cardImageCost = 100000000000000000;\n\n    uint256 public current_plot_empire_score = 100;\n\n    string public baseURI = 'https://planetcrypto.app/api/token/';\n    \n    \n    uint256 public tax_fund = 0;\n    uint256 public tax_distributed = 0;\n\n\n    // GAME STATS\n    bool public game_started = false;\n    uint256 public total_land_sold = 0;\n    uint256 public total_trades = 0;\n    uint256 internal tax_carried_forward = 0;\n    \n    uint256 public total_empire_score; \n    player[] public all_playerObjects;\n    mapping(address => uint256) internal playerAddressToPlayerObjectID;\n    \n    \n    \n    \n    plotDetail[] plotDetails;\n    mapping(uint256 => uint256) internal tokenIDplotdetailsIndexId; // e.g. tokenIDplotdetailsIndexId shows us the index of the detail obj for each token\n\n\n\n    \n    mapping(int256 => mapping(int256 => uint256)) internal latlngTokenID_grids;\n    //mapping(uint256 => plotBasic[]) internal tokenIDlatlngLookup; // IS THIS USED???\n    \n    \n    \n    mapping(uint8 => mapping(int256 => mapping(int256 => uint256))) internal latlngTokenID_zoomAll;\n\n    mapping(uint8 => mapping(uint256 => plotBasic[])) internal tokenIDlatlngLookup_zoomAll;\n\n\n    PlanetCryptoToken internal planetCryptoToken_I = PlanetCryptoToken(0x8C55B18e6bb7083b29102e57c34d0C3124c0a952);\n    \n    constructor() ERC721Full_custom(\"PlanetCrypto\", \"PTC\") public {\n        owner = msg.sender;\n        tokenBankAddress = owner;\n        devBankAddress = owner;\n        planetCryptoCoin_interface = PlanetCryptoCoin_I(planetCryptoCoinAddress);\n        planetCryptoUtils_interface = PlanetCryptoUtils_I(planetCryptoUtilsAddress);\n        all_playerObjects.push(player(address(0x0),0,0,0));\n        playerAddressToPlayerObjectID[address(0x0)] = 0;\n        \n        \n        //planetCryptoToken_I = PlanetCryptoToken(_prevAddress);\n        \n    \n        total_trades = planetCryptoToken_I.total_trades();\n        total_land_sold = planetCryptoToken_I.total_land_sold();\n        total_empire_score = planetCryptoToken_I.total_empire_score();\n        tokens_rewards_available = planetCryptoToken_I.tokens_rewards_available();\n        tokens_rewards_allocated = planetCryptoToken_I.tokens_rewards_allocated();\n        tax_distributed = planetCryptoToken_I.tax_distributed();\n        tax_fund = 0;\n        current_plot_price = planetCryptoToken_I.current_plot_price();\n        \n    }\n    \n    function initPlayers(uint32 _start, uint32 _end) public onlyOwner {\n        require(game_started == false);\n        \n        for(uint32 c=_start; c< _end+1; c++){\n            transferPlayer(uint256(c));\n        }\n    }\n    \n    function transferPlayer(uint256 _player_id) internal {\n        (address _playerAddress, uint256 _uint1, uint256 _uint2, uint256 _uint3) \n            =  planetCryptoToken_I.all_playerObjects(_player_id);\n        \n\n        all_playerObjects.push(\n                player(\n                    _playerAddress,\n                    _uint1,\n                    _uint2,\n                    _uint3\n                    )\n                );\n        playerAddressToPlayerObjectID[_playerAddress] = all_playerObjects.length-1;\n    }\n    \n    \n    function transferTokens(uint256 _start, uint256 _end) public onlyOwner {\n        require(game_started == false);\n        \n        for(uint256 c=_start; c< _end+1; c++) {\n            \n            (\n                address _playerAddress,\n                bytes32 name,\n                uint256 orig_value,\n                uint256 current_value,\n                uint256 empire_score,\n                int256[] memory plots_lat,\n                int256[] memory plots_lng\n            ) = \n                planetCryptoToken_I.getToken(c, false);\n    \n\n            transferCards(c, _playerAddress, name, orig_value, current_value, empire_score, plots_lat, plots_lng);\n        }\n        \n    }\n    \n    \n\n    \n    function transferCards(\n                            uint256 _cardID,\n                            address token_owner,\n                            bytes32 name,\n                            uint256 orig_value,\n                            uint256 current_value,\n                            uint256 empire_score,\n                            int256[] memory plots_lat,\n                            int256[] memory plots_lng\n                            ) internal {\n\n        \n\n       \n       _mint(token_owner, _cardID);\n\n            \n        plotDetails.push(plotDetail(\n            name,\n            orig_value,\n            current_value,\n            empire_score,\n            plots_lat, plots_lng, ''\n        ));\n        \n        tokenIDplotdetailsIndexId[_cardID] = plotDetails.length-1;\n        \n        \n        setupPlotOwnership(_cardID, plots_lat, plots_lng);\n        \n        \n\n    }\n    \n\n    function tokenURI(uint256 tokenId) external view returns (string) {\n        require(_exists(tokenId));\n        return planetCryptoUtils_interface.strConcat(baseURI, \n                    planetCryptoUtils_interface.uint2str(tokenId));\n    }\n\n\n    function getToken(uint256 _tokenId, bool isBasic) public view returns(\n        address token_owner,\n        bytes32 name,\n        uint256 orig_value,\n        uint256 current_value,\n        uint256 empire_score,\n        int256[] plots_lat,\n        int256[] plots_lng\n        ) {\n        token_owner = ownerOf(_tokenId);\n        plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_tokenId]];\n        name = _plotDetail.name;\n        empire_score = _plotDetail.empire_score;\n        orig_value = _plotDetail.orig_value;\n        current_value = _plotDetail.current_value;\n        if(!isBasic){\n            plots_lat = _plotDetail.plots_lat;\n            plots_lng = _plotDetail.plots_lng;\n        }\n    }\n    function getTokenEnhanced(uint256 _tokenId, bool isBasic) public view returns(\n        address token_owner,\n        bytes32 name,\n        bytes32 img,\n        uint256 orig_value,\n        uint256 current_value,\n        uint256 empire_score,\n        int256[] plots_lat,\n        int256[] plots_lng\n        ) {\n        token_owner = ownerOf(_tokenId);\n        plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_tokenId]];\n        name = _plotDetail.name;\n        img = _plotDetail.img;\n        empire_score = _plotDetail.empire_score;\n        orig_value = _plotDetail.orig_value;\n        current_value = _plotDetail.current_value;\n        if(!isBasic){\n            plots_lat = _plotDetail.plots_lat;\n            plots_lng = _plotDetail.plots_lng;\n        }\n    }\n    \n\n    function taxEarningsAvailable() public view returns(uint256) {\n        return playersFundsOwed[msg.sender];\n    }\n\n    function withdrawTaxEarning() public {\n        uint256 taxEarnings = playersFundsOwed[msg.sender];\n        playersFundsOwed[msg.sender] = 0;\n        tax_fund = tax_fund.sub(taxEarnings);\n        \n        if(!msg.sender.send(taxEarnings)) {\n            playersFundsOwed[msg.sender] = playersFundsOwed[msg.sender] + taxEarnings;\n            tax_fund = tax_fund.add(taxEarnings);\n        }\n    }\n\n    function buyLandWithTokens(bytes32 _name, int256[] _plots_lat, int256[] _plots_lng)\n     validateTokenPurchase(_plots_lat, _plots_lng) validateLand(_plots_lat, _plots_lng) updateUsersLastAccess() public {\n        require(_name.length > 4);\n        \n\n        processPurchase(_name, _plots_lat, _plots_lng); \n        game_started = true;\n    }\n    \n\n    \n    function buyLand(bytes32 _name, \n            int256[] _plots_lat, int256[] _plots_lng,\n            address _referrer\n            )\n                validatePurchase(_plots_lat, _plots_lng) \n                validateLand(_plots_lat, _plots_lng) \n                updateUsersLastAccess()\n                public payable {\n       require(_name.length > 4);\n       \n        // split payment\n        uint256 _runningTotal = msg.value;\n        \n        _runningTotal = _runningTotal.sub(processReferer(_referrer));\n        \n        /*\n        uint256 _referrerAmnt = 0;\n        if(_referrer != msg.sender && _referrer != address(0)) {\n            _referrerAmnt = m_refPercent.mul(msg.value);\n            if(_referrer.send(_referrerAmnt)) {\n                emit referralPaid(_referrer, _referrer, _referrerAmnt, now);\n                _runningTotal = _runningTotal.sub(_referrerAmnt);\n            }\n        }\n        */\n        tax_fund = tax_fund.add(m_newPlot_taxPercent.mul(_runningTotal));\n        \n        \n        processDevPayment(_runningTotal);\n        /*\n        if(!devBankAddress.send(m_newPlot_devPercent.mul(_runningTotal))){\n            devHoldings = devHoldings.add(m_newPlot_devPercent.mul(_runningTotal));\n        }\n        */\n        \n        \n\n        processPurchase(_name, _plots_lat, _plots_lng);\n        \n        calcPlayerDivs(m_newPlot_taxPercent.mul(_runningTotal));\n        \n        game_started = true;\n        \n        if(_plots_lat.length >= min_plots_purchase_for_token_reward\n            && tokens_rewards_available > 0) {\n                \n            uint256 _token_rewards = _plots_lat.length / plots_token_reward_divisor;\n            if(_token_rewards > tokens_rewards_available)\n                _token_rewards = tokens_rewards_available;\n                \n                \n            planetCryptoCoin_interface.transfer(msg.sender, _token_rewards);\n                \n            emit issueCoinTokens(msg.sender, msg.sender, _token_rewards, now);\n            tokens_rewards_allocated = tokens_rewards_allocated + _token_rewards;\n            tokens_rewards_available = tokens_rewards_available - _token_rewards;\n        }\n    \n    }\n    \n    function processReferer(address _referrer) internal returns(uint256) {\n        uint256 _referrerAmnt = 0;\n        if(_referrer != msg.sender && _referrer != address(0)) {\n            _referrerAmnt = m_refPercent.mul(msg.value);\n            if(_referrer.send(_referrerAmnt)) {\n                emit referralPaid(_referrer, _referrer, _referrerAmnt, now);\n                //_runningTotal = _runningTotal.sub(_referrerAmnt);\n            }\n        }\n        return _referrerAmnt;\n    }\n    \n    \n    function processDevPayment(uint256 _runningTotal) internal {\n        if(!devBankAddress.send(m_newPlot_devPercent.mul(_runningTotal))){\n            devHoldings = devHoldings.add(m_newPlot_devPercent.mul(_runningTotal));\n        }\n    }\n\n    function buyCard(uint256 _token_id, address _referrer) validateResale(_token_id) updateUsersLastAccess() public payable {\n        \n        \n        // split payment\n        uint256 _runningTotal = msg.value;\n        _runningTotal = _runningTotal.sub(processReferer(_referrer));\n        /*\n        uint256 _referrerAmnt = 0;\n        if(_referrer != msg.sender && _referrer != address(0)) {\n            _referrerAmnt = m_refPercent.mul(msg.value);\n            if(_referrer.send(_referrerAmnt)) {\n                emit referralPaid(_referrer, _referrer, _referrerAmnt, now);\n                _runningTotal = _runningTotal.sub(_referrerAmnt);\n            }\n        }\n        */\n        \n        tax_fund = tax_fund.add(m_resalePlot_taxPercent.mul(_runningTotal));\n        \n        \n        processDevPayment(_runningTotal);\n        /*\n        if(!devBankAddress.send(m_resalePlot_devPercent.mul(_runningTotal))){\n            devHoldings = devHoldings.add(m_resalePlot_devPercent.mul(_runningTotal));\n        }\n        */\n        \n\n        address from = ownerOf(_token_id);\n        \n        if(!from.send(m_resalePlot_ownerPercent.mul(_runningTotal))) {\n            playersFundsOwed[from] = playersFundsOwed[from].add(m_resalePlot_ownerPercent.mul(_runningTotal));\n        }\n        \n        \n\n        //our_transferFrom(from, msg.sender, _token_id);\n        process_swap(from,msg.sender,_token_id);\n        internal_transferFrom(from, msg.sender, _token_id);\n        \n\n        plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_token_id]];\n        uint256 _empireScore = _plotDetail.empire_score; // apply bonus when card is bought through site\n        uint256 _newEmpireScore = m_empireScoreMultiplier.mul(_empireScore);\n        uint256 _origValue = _plotDetail.current_value;\n        \n        //uint256 _playerObject_idx = playerAddressToPlayerObjectID[msg.sender];\n        \n\n        all_playerObjects[playerAddressToPlayerObjectID[msg.sender]].totalEmpireScore\n            = all_playerObjects[playerAddressToPlayerObjectID[msg.sender]].totalEmpireScore + (_newEmpireScore - _empireScore);\n        \n        \n        plotDetails[tokenIDplotdetailsIndexId[_token_id]].empire_score = _newEmpireScore;\n\n        total_empire_score = total_empire_score + (_newEmpireScore - _empireScore);\n        \n        plotDetails[tokenIDplotdetailsIndexId[_token_id]].current_value = \n            m_resaleMultipler.mul(plotDetails[tokenIDplotdetailsIndexId[_token_id]].current_value);\n        \n        total_trades = total_trades + 1;\n        \n        \n        calcPlayerDivs(m_resalePlot_taxPercent.mul(_runningTotal));\n        \n        \n        // emit event\n        emit cardBought(_token_id, from, msg.sender,\n                    _token_id, from, msg.sender, \n                    _plotDetail.name,\n                    _origValue, \n                    msg.value,\n                    _empireScore, _newEmpireScore, now);\n    }\n    \n    function processPurchase(bytes32 _name, \n            int256[] _plots_lat, int256[] _plots_lng) internal {\n    \n        uint256 _token_id = totalSupply().add(1);\n        _mint(msg.sender, _token_id);\n        \n\n        \n\n       // uint256 _empireScore =\n    //                current_plot_empire_score * _plots_lng.length;\n            \n            \n        plotDetails.push(plotDetail(\n            _name,\n            current_plot_price * _plots_lat.length,\n            current_plot_price * _plots_lat.length,\n            current_plot_empire_score * _plots_lng.length,\n            _plots_lat, _plots_lng, ''\n        ));\n        \n        tokenIDplotdetailsIndexId[_token_id] = plotDetails.length-1;\n        \n        \n        setupPlotOwnership(_token_id, _plots_lat, _plots_lng);\n        \n        \n        \n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[msg.sender];\n        all_playerObjects[_playerObject_idx].totalEmpireScore\n            = all_playerObjects[playerAddressToPlayerObjectID[msg.sender]].totalEmpireScore + (current_plot_empire_score * _plots_lng.length);\n            \n        total_empire_score = total_empire_score + (current_plot_empire_score * _plots_lng.length);\n            \n        all_playerObjects[_playerObject_idx].totalLand\n            = all_playerObjects[_playerObject_idx].totalLand + _plots_lat.length;\n            \n        \n        emit landPurchased(\n                _token_id, msg.sender,\n                _token_id, msg.sender, _name, _plots_lat[0], _plots_lng[0], _plots_lat.length, current_plot_price, (current_plot_empire_score * _plots_lng.length), now);\n\n\n        current_plot_price = current_plot_price + (price_update_amount * _plots_lat.length);\n        total_land_sold = total_land_sold + _plots_lat.length;\n        \n    }\n\n    function updateCardDetail(uint256 _token_id, uint256 _updateType, bytes32 _data) public payable {\n        require(msg.sender == ownerOf(_token_id));\n        if(_updateType == 1) {\n            // CardImage\n            require(msg.value == cardImageCost);\n            \n            plotDetails[\n                    tokenIDplotdetailsIndexId[_token_id]\n                        ].img = _data;\n\n        }\n        if(_updateType == 2) {\n            // Name change\n            require(_data.length > 4);\n            require(msg.value == cardChangeNameCost);\n            plotDetails[\n                    tokenIDplotdetailsIndexId[_token_id]\n                        ].name = _data;\n        }\n        \n        \n        processDevPayment(msg.value);\n        /*\n        if(!devBankAddress.send(msg.value)){\n            devHoldings = devHoldings.add(msg.value);\n        }\n        */\n        \n        emit cardChange(\n            _token_id,\n            msg.sender, \n            _token_id, msg.sender, _updateType, _data, now);\n            \n    }\n    \n    \n    \n\n\n    \n    \n    function calcPlayerDivs(uint256 _value) internal {\n        // total up amount split so we can emit it\n        //if(totalSupply() > 1) {\n        if(game_started) {\n            uint256 _totalDivs = 0;\n            uint256 _totalPlayers = 0;\n            \n            uint256 _taxToDivide = _value + tax_carried_forward;\n            \n            // ignore player 0\n            for(uint256 c=1; c< all_playerObjects.length; c++) {\n                \n                // allow for 0.0001 % =  * 10000\n                \n                uint256 _playersPercent \n                    = (all_playerObjects[c].totalEmpireScore*10000000 / total_empire_score * 10000000) / 10000000;\n                    \n                uint256 _playerShare = _taxToDivide / 10000000 * _playersPercent;\n                \n\n                \n                if(_playerShare > 0) {\n                    \n                    \n                    playersFundsOwed[all_playerObjects[c].playerAddress] = playersFundsOwed[all_playerObjects[c].playerAddress].add(_playerShare);\n                    tax_distributed = tax_distributed.add(_playerShare);\n                    \n                    _totalDivs = _totalDivs + _playerShare;\n                    _totalPlayers = _totalPlayers + 1;\n                \n                }\n            }\n\n            tax_carried_forward = 0;\n            emit taxDistributed(_totalDivs, _totalPlayers, now);\n\n        } else {\n            // first land purchase - no divs this time, carried forward\n            tax_carried_forward = tax_carried_forward + _value;\n        }\n    }\n    \n\n    \n    \n    function setupPlotOwnership(uint256 _token_id, int256[] _plots_lat, int256[] _plots_lng) internal {\n\n       for(uint256 c=0;c< _plots_lat.length;c++) {\n         \n            //mapping(int256 => mapping(int256 => uint256)) internal latlngTokenID_grids;\n            latlngTokenID_grids[_plots_lat[c]]\n                [_plots_lng[c]] = _token_id;\n                \n            //mapping(uint256 => plotBasic[]) internal tokenIDlatlngLookup;\n            /*\n            tokenIDlatlngLookup[_token_id].push(plotBasic(\n                _plots_lat[c], _plots_lng[c]\n            ));\n            */\n            \n        }\n       \n        \n        //int256 _latInt = _plots_lat[0];\n        //int256 _lngInt = _plots_lng[0];\n\n\n        for(uint8 zoomC = 1; c < 5; c++) {\n            setupZoomLvl(zoomC,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 10 on way out    \n        }\n        /*\n        setupZoomLvl(1,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 10 on way out\n        setupZoomLvl(2,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 100\n        setupZoomLvl(3,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 1000\n        setupZoomLvl(4,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 10000\n        */\n\n      \n    }\n\n\n\n    // TO TEST\n    function setupZoomLvl(uint8 zoom, int256 lat, int256 lng, uint256 _token_id) internal  {\n        \n        lat = planetCryptoUtils_interface.roundLatLngFull(zoom, lat);\n        lng = planetCryptoUtils_interface.roundLatLngFull(zoom, lng);\n        \n        \n        /*\n        lat = planetCryptoUtils_interface.roundLatLng(zoom, lat);\n        lng  = planetCryptoUtils_interface.roundLatLng(zoom, lng); \n        \n        \n        uint256 _remover = 5;\n        if(zoom == 1)\n            _remover = 5;\n        if(zoom == 2)\n            _remover = 4;\n        if(zoom == 3)\n            _remover = 3;\n        if(zoom == 4)\n            _remover = 2;\n        \n        string memory _latStr;  // = int2str(lat);\n        string memory _lngStr; // = int2str(lng);\n        \n        \n        bool _tIsNegative = false;\n        \n        if(lat < 0) {\n            _tIsNegative = true;   \n            lat = lat * -1;\n        }\n        _latStr = planetCryptoUtils_interface.int2str(lat);\n        _latStr = planetCryptoUtils_interface.substring(_latStr,0,planetCryptoUtils_interface.utfStringLength(_latStr)-_remover); //_lat_len-_remover);\n        lat = int256(planetCryptoUtils_interface.parseInt(_latStr,0));\n        if(_tIsNegative)\n            lat = lat * -1;\n\n        \n        if(lng < 0) {\n            _tIsNegative = true;\n            lng = lng * -1;\n        } else {\n            _tIsNegative = false;\n        }\n        _lngStr = planetCryptoUtils_interface.int2str(lng);\n        _lngStr = planetCryptoUtils_interface.substring(_lngStr,0,planetCryptoUtils_interface.utfStringLength(_lngStr)-_remover);\n        lng = int256(planetCryptoUtils_interface.parseInt(_lngStr,0));\n        if(_tIsNegative)\n            lng = lng * -1;\n    \n        */\n        \n        latlngTokenID_zoomAll[zoom][lat][lng] = _token_id;\n        tokenIDlatlngLookup_zoomAll[zoom][_token_id].push(plotBasic(lat,lng));\n \n        \n        \n    }\n\n\n\n\n    \n\n\n    function getAllPlayerObjectLen() public view returns(uint256){\n        return all_playerObjects.length;\n    }\n    \n\n    function queryMap(uint8 zoom, int256[] lat_rows, int256[] lng_columns) public view returns(string _outStr) {\n        \n        \n        for(uint256 y=0; y< lat_rows.length; y++) {\n\n            for(uint256 x=0; x< lng_columns.length; x++) {\n                \n                \n                \n                if(zoom == 0){\n                    if(latlngTokenID_grids[lat_rows[y]][lng_columns[x]] > 0){\n                        \n                        \n                      _outStr = planetCryptoUtils_interface.strConcat(\n                            _outStr, '[', planetCryptoUtils_interface.int2str(lat_rows[y]) , ':', planetCryptoUtils_interface.int2str(lng_columns[x]) );\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, ':', \n                                    planetCryptoUtils_interface.uint2str(latlngTokenID_grids[lat_rows[y]][lng_columns[x]]), ']');\n                    }\n                    \n                } else {\n                    //_out[c] = latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]];\n                    if(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]] > 0){\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, '[', planetCryptoUtils_interface.int2str(lat_rows[y]) , ':', planetCryptoUtils_interface.int2str(lng_columns[x]) );\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, ':', \n                                    planetCryptoUtils_interface.uint2str(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]]), ']');\n                    }\n                    \n                }\n                //c = c+1;\n                \n            }\n        }\n        \n        //return _out;\n    }\n    // used in utils\n    function queryPlotExists(uint8 zoom, int256[] lat_rows, int256[] lng_columns) public view returns(bool) {\n        \n        \n        for(uint256 y=0; y< lat_rows.length; y++) {\n\n            for(uint256 x=0; x< lng_columns.length; x++) {\n                \n                if(zoom == 0){\n                    if(latlngTokenID_grids[lat_rows[y]][lng_columns[x]] > 0){\n                        return true;\n                    } \n                } else {\n                    if(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]] > 0){\n\n                        return true;\n                        \n                    }                     \n                }\n           \n                \n            }\n        }\n        \n        return false;\n    }\n\n    \n\n    \n\n   \n\n\n\n\n    // ERC721 overrides\n    \n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public {\n        transferFrom(from, to, tokenId);\n        // solium-disable-next-line arg-overflow\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n    \n\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        // check permission on the from address first\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        require(to != address(0));\n        \n        process_swap(from,to,tokenId);\n        \n        super.transferFrom(from, to, tokenId);\n\n    }\n    \n    function process_swap(address from, address to, uint256 tokenId) internal {\n\n        \n        // remove the empire score & total land owned...\n        uint256 _empireScore;\n        uint256 _size;\n        \n        //plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[tokenId]];\n        _empireScore = plotDetails[tokenIDplotdetailsIndexId[tokenId]].empire_score;\n        _size = plotDetails[tokenIDplotdetailsIndexId[tokenId]].plots_lat.length;\n        \n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[from];\n        \n        all_playerObjects[_playerObject_idx].totalEmpireScore\n            = all_playerObjects[_playerObject_idx].totalEmpireScore - _empireScore;\n            \n        all_playerObjects[_playerObject_idx].totalLand\n            = all_playerObjects[_playerObject_idx].totalLand - _size;\n            \n        // and increment on the other side...\n        _playerObject_idx = playerAddressToPlayerObjectID[to];\n        \n        // ensure the player is setup first...\n        if(_playerObject_idx == 0){\n            all_playerObjects.push(player(to,now,0,0));\n            playerAddressToPlayerObjectID[to] = all_playerObjects.length-1;\n            _playerObject_idx = all_playerObjects.length-1;\n        }\n        \n        all_playerObjects[_playerObject_idx].totalEmpireScore\n            = all_playerObjects[_playerObject_idx].totalEmpireScore + _empireScore;\n            \n        all_playerObjects[_playerObject_idx].totalLand\n            = all_playerObjects[_playerObject_idx].totalLand + _size;\n    }\n\n\n   \n\n\n    // PRIVATE METHODS\n    function p_update_action(uint256 _type, address _address, uint256 _val, string _strVal) public onlyOwner {\n        if(_type == 0){\n            owner = _address;    \n        }\n        if(_type == 1){\n            tokenBankAddress = _address;    \n        }\n        if(_type == 2) {\n            devBankAddress = _address;\n        }\n        if(_type == 3) {\n            cardChangeNameCost = _val;    \n        }\n        if(_type == 4) {\n            cardImageCost = _val;    \n        }\n        if(_type == 5) {\n            baseURI = _strVal;\n        }\n        if(_type == 6) {\n            price_update_amount = _val;\n        }\n        if(_type == 7) {\n            current_plot_empire_score = _val;    \n        }\n        if(_type == 8) {\n            planetCryptoCoinAddress = _address;\n            if(address(planetCryptoCoinAddress) != address(0)){ \n                planetCryptoCoin_interface = PlanetCryptoCoin_I(planetCryptoCoinAddress);\n            }\n        }\n        if(_type ==9) {\n            planetCryptoUtilsAddress = _address;\n            if(address(planetCryptoUtilsAddress) != address(0)){ \n                planetCryptoUtils_interface = PlanetCryptoUtils_I(planetCryptoUtilsAddress);\n            }            \n        }\n        if(_type == 10) {\n            m_newPlot_devPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 11) {\n            m_newPlot_taxPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 12) {\n            m_resalePlot_devPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 13) {\n            m_resalePlot_taxPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 14) {\n            m_resalePlot_ownerPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 15) {\n            m_refPercent = Percent.percent(_val,100);    \n        }\n        if(_type == 16) {\n            m_empireScoreMultiplier = Percent.percent(_val, 100);    \n        }\n        if(_type == 17) {\n            m_resaleMultipler = Percent.percent(_val, 100);    \n        }\n        if(_type == 18) {\n            tokens_rewards_available = _val;    \n        }\n        if(_type == 19) {\n            tokens_rewards_allocated = _val;    \n        }\n        if(_type == 20) {\n            // clear card image \n            plotDetails[\n                    tokenIDplotdetailsIndexId[_val]\n                        ].img = '';\n                        \n            emit cardChange(\n                _val,\n                msg.sender, \n                _val, msg.sender, 1, '', now);\n        }\n        if(_type == 99) {\n            // burnToken \n        \n            address _token_owner = ownerOf(_val);\n            processBurn(_token_owner, _val);\n        \n        }\n    }\n    \n    function burn(uint256 _token_id) public {\n        require(msg.sender == ownerOf(_token_id));\n        \n        uint256 _cardSize = plotDetails[tokenIDplotdetailsIndexId[_token_id]].plots_lat.length;\n        \n        processBurn(msg.sender, _token_id);\n        \n        // allocate PlanetCOIN tokens to user...\n        planetCryptoCoin_interface.transfer(msg.sender, _cardSize);\n        \n        \n        \n    }\n    \n    function processBurn(address _token_owner, uint256 _val) internal {\n        _burn(_token_owner, _val);\n            \n        // remove the empire score & total land owned...\n        uint256 _empireScore;\n        uint256 _size;\n        \n        //plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_val]];\n        _empireScore = plotDetails[tokenIDplotdetailsIndexId[_val]].empire_score;\n        _size = plotDetails[tokenIDplotdetailsIndexId[_val]].plots_lat.length;\n        \n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[_token_owner];\n        \n        all_playerObjects[_playerObject_idx].totalEmpireScore\n            = all_playerObjects[_playerObject_idx].totalEmpireScore - _empireScore;\n            \n        all_playerObjects[_playerObject_idx].totalLand\n            = all_playerObjects[_playerObject_idx].totalLand - _size;\n            \n       \n        /*\n        for(uint256 c=0;c < tokenIDlatlngLookup[_tokenId].length; c++) {\n            latlngTokenID_grids[\n                    tokenIDlatlngLookup[_tokenId][c].lat\n                ][tokenIDlatlngLookup[_tokenId][c].lng] = 0;\n        }\n        delete tokenIDlatlngLookup[_tokenId];\n        */\n        \n        \n        \n        //Same for tokenIDplotdetailsIndexId        \n        // clear from plotDetails array... (Holds the detail of the card)\n        uint256 oldIndex = tokenIDplotdetailsIndexId[_val];\n        if(oldIndex != plotDetails.length-1) {\n            plotDetails[oldIndex] = plotDetails[plotDetails.length-1];\n        }\n        plotDetails.length--;\n        \n\n        delete tokenIDplotdetailsIndexId[_val];\n\n        for(uint8 zoom=1; zoom < 5; zoom++) {\n            plotBasic[] storage _plotBasicList = tokenIDlatlngLookup_zoomAll[zoom][_val];\n            for(uint256 _plotsC=0; _plotsC< _plotBasicList.length; _plotsC++) {\n                delete latlngTokenID_zoomAll[zoom][\n                    _plotBasicList[_plotsC].lat\n                    ][\n                        _plotBasicList[_plotsC].lng\n                        ];\n                        \n                delete _plotBasicList[_plotsC];\n            }\n            \n        }\n    }\n\n    function p_withdrawDevHoldings() public {\n        require(msg.sender == devBankAddress);\n        uint256 _t = devHoldings;\n        devHoldings = 0;\n        if(!devBankAddress.send(devHoldings)){\n            devHoldings = _t;\n        }\n    }\n\n\n\n\n    function m() public {\n        \n    }\n    \n}",
  "bytecode": "600f8054600160a060020a031990811673a1c8031ef18272d8bfed22e1b61319d6d9d2881b1790915560118054909116738a511e355e4233f0ab14cddbc1dd60a80a349f8b179055604b6080819052606460a08190526013919091556014819055601960c081905260e082905260158190556016829055600a6101008190526101208390526017819055601883905561014081905261016083905290819055601a82905560506101808190526101a0839052601b55601c82905560056101c08190526101e0839052601d55601e8290556096610200819052610220839052601f55602082905560c8610240819052610260839052602155602282905560006023908155602782905560289190915566470de4df8200006029556501d1a94a2000602a5566b1a2bc2ec50000602b5567016345785d8a0000602c55602d919091556102e06040526102808190527f68747470733a2f2f706c616e657463727970746f2e6170702f6170692f746f6b6102a09081527f656e2f00000000000000000000000000000000000000000000000000000000006102c052620001a691602e919062000937565b506000602f81905560308190556031805460ff1916905560328190556033819055603455603d8054600160a060020a031916738c55b18e6bb7083b29102e57c34d0c3124c0a952179055348015620001fd57600080fd5b50604080518082018252600c81527f506c616e657443727970746f00000000000000000000000000000000000000006020808301919091528251808401909352600383527f5054430000000000000000000000000000000000000000000000000000000000908301529081816200029d7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620008ca810204565b620002d17f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620008ca810204565b620003057f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620008ca810204565b81516200031a90600990602085019062000937565b5080516200033090600a90602084019062000937565b50620003657f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620008ca810204565b5050600c8054600160a060020a0319908116331791829055600e80548216600160a060020a03938416908117909155600d805483169091179055600f5460108054831691841691909117905560115460128054831691841691909117905560408051608081018252600080825260208083018281528385018381526060850184815260368054600181018255908652955160049687027f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b881018054928c1692909a169190911790985591517f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b9880155517f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81ba870155517f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81bb90950194909455808052603784527fa0a618d80eda9243166be83cb7421d97e9dab6ddddd3c70ac7a6b4440256e8e7819055603d5483517fbe3f347100000000000000000000000000000000000000000000000000000000815293519516965063be3f34719550828201949283900390910190829087803b1580156200052057600080fd5b505af115801562000535573d6000803e3d6000fd5b505050506040513d60208110156200054c57600080fd5b5051603355603d54604080517faeaf5a370000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163aeaf5a37916004808201926020929091908290030181600087803b158015620005b257600080fd5b505af1158015620005c7573d6000803e3d6000fd5b505050506040513d6020811015620005de57600080fd5b5051603255603d54604080517f9ee837f50000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691639ee837f5916004808201926020929091908290030181600087803b1580156200064457600080fd5b505af115801562000659573d6000803e3d6000fd5b505050506040513d60208110156200067057600080fd5b5051603555603d54604080517f01ef74f10000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916301ef74f1916004808201926020929091908290030181600087803b158015620006d657600080fd5b505af1158015620006eb573d6000803e3d6000fd5b505050506040513d60208110156200070257600080fd5b5051602555603d54604080517f4a22c7fb0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691634a22c7fb916004808201926020929091908290030181600087803b1580156200076857600080fd5b505af11580156200077d573d6000803e3d6000fd5b505050506040513d60208110156200079457600080fd5b5051602655603d54604080517fe1036f860000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163e1036f86916004808201926020929091908290030181600087803b158015620007fa57600080fd5b505af11580156200080f573d6000803e3d6000fd5b505050506040513d60208110156200082657600080fd5b50516030556000602f819055603d54604080517f3fadc3880000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633fadc388926004808401936020939083900390910190829087803b1580156200089357600080fd5b505af1158015620008a8573d6000803e3d6000fd5b505050506040513d6020811015620008bf57600080fd5b5051602955620009dc565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620008fa57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200097a57805160ff1916838001178555620009aa565b82800160010185558215620009aa579182015b82811115620009aa5782518255916020019190600101906200098d565b50620009b8929150620009bc565b5090565b620009d991905b80821115620009b85760008155600101620009c3565b90565b615e8c80620009ec6000396000f30060806040526004361061024d5763ffffffff60e060020a60003504166301de168a811461025257806301ef74f11461027957806301ffc9a71461028e57806303a7b41f146102d957806306fdde031461036f578063081812fc146103f9578063095ea7b31461042d5780630cb9ee4b146104535780630d4ea316146104685780630e61c106146104fb57806318160ddd14610510578063222d7c8a14610525578063232720651461053a57806323b872dd146105825780632f745c59146105ac57806332b98616146105d05780633cc6c20b146105e15780633fadc3881461065057806342842e0e1461066557806342966c681461068f57806345de2567146106a75780634a22c7fb146106c25780634f6ccce7146106d757806350357beb146106ef578063567c31f7146107065780635a2ee0191461071b5780636352211e146107305780636c0360eb1461074857806370a082311461075d578063741922091461077e5780637517b57e1461087057806387dfc909146108855780638913b8091461091b57806395d89b411461093f578063973112e9146109545780639ee837f514610969578063a22cb4651461097e578063aeaf5a37146109a4578063b88d4fde146109b9578063bdb42bac14610a28578063be3f347114610a3d578063c87b56dd14610a52578063d3f78cb414610a6a578063db737c7814610a7f578063dbc933bc14610b72578063dc00adef14610b87578063e1036f8614610c18578063e4fd6f8114610c2d578063e717dc3d14610c42578063e985e9c514610c57578063f719db8e14610c7e575b600080fd5b34801561025e57600080fd5b50610267610c93565b60408051918252519081900360200190f35b34801561028557600080fd5b50610267610c99565b34801561029a57600080fd5b506102c57bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610c9f565b604080519115158252519081900360200190f35b3480156102e557600080fd5b506040805160206004602480358281013584810280870186019097528086526102c596843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610cd39650505050505050565b34801561037b57600080fd5b50610384610df4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103be5781810151838201526020016103a6565b50505050905090810190601f1680156103eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040557600080fd5b50610411600435610e8b565b60408051600160a060020a039092168252519081900360200190f35b34801561043957600080fd5b50610451600160a060020a0360043516602435610ebd565b005b34801561045f57600080fd5b50610267610f66565b34801561047457600080fd5b5060408051602060046024803582810135848102808701860190975280865261045196843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f6c9650505050505050565b34801561050757600080fd5b506102676114a7565b34801561051c57600080fd5b506102676114ad565b34801561053157600080fd5b506102676114b3565b34801561054657600080fd5b506105526004356114b9565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190f35b34801561058e57600080fd5b50610451600160a060020a03600435811690602435166044356114fb565b3480156105b857600080fd5b50610267600160a060020a0360043516602435611540565b61045160043560243560443561158e565b3480156105ed57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261045194803594600160a060020a03602480359190911695604435953695608494930191819084018382808284375094975061169b9650505050505050565b34801561065c57600080fd5b50610267611a35565b34801561067157600080fd5b50610451600160a060020a0360043581169060243516604435611a3b565b34801561069b57600080fd5b50610451600435611a57565b3480156106b357600080fd5b50610451600435602435611b52565b3480156106ce57600080fd5b50610267611d37565b3480156106e357600080fd5b50610267600435611d3d565b610451600435600160a060020a0360243516611d72565b34801561071257600080fd5b50610267612393565b34801561072757600080fd5b506104516123a6565b34801561073c57600080fd5b506104116004356123a8565b34801561075457600080fd5b506103846123cc565b34801561076957600080fd5b50610267600160a060020a036004351661245a565b34801561078a57600080fd5b5061079b600435602435151561248d565b60408051600160a060020a038a16815260208082018a9052918101889052606081018790526080810186905260a0810185905261010060c0820181815285519183019190915284519192909160e0840191610120850191878201910280838360005b838110156108155781810151838201526020016107fd565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561085457818101518382015260200161083c565b505050509050019a505050505050505050505060405180910390f35b34801561087c57600080fd5b50610451612608565b34801561089157600080fd5b5060408051602060046024803582810135848102808701860190975280865261038496843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506126839650505050505050565b34801561092757600080fd5b5061045163ffffffff6004358116906024351661363d565b34801561094b57600080fd5b50610384613698565b34801561096057600080fd5b506102676136f9565b34801561097557600080fd5b506102676136ff565b34801561098a57600080fd5b50610451600160a060020a03600435166024351515613705565b3480156109b057600080fd5b50610267613789565b3480156109c557600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261045194600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061378f9650505050505050565b348015610a3457600080fd5b506102c56137b1565b348015610a4957600080fd5b506102676137ba565b348015610a5e57600080fd5b506103846004356137c0565b348015610a7657600080fd5b50610267613a73565b348015610a8b57600080fd5b50610a9c6004356024351515613a79565b6040518088600160a060020a0316600160a060020a0316815260200187600019166000191681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610b18578181015183820152602001610b00565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610b57578181015183820152602001610b3f565b50505050905001995050505050505050505060405180910390f35b348015610b7e57600080fd5b50610451613bea565b60408051602060046024803582810135848102808701860190975280865261045196843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975050509235600160a060020a03169350613c4092505050565b348015610c2457600080fd5b506102676141e5565b348015610c3957600080fd5b506102676141eb565b348015610c4e57600080fd5b506102676141f1565b348015610c6357600080fd5b506102c5600160a060020a03600435811690602435166141f7565b348015610c8a57600080fd5b50610267614225565b60275481565b60255481565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b600080805b8451821015610de6575060005b8351811015610ddb5760ff86161515610d61576000603a60008785815181101515610d0c57fe5b90602001906020020151815260200190815260200160002060008684815181101515610d3457fe5b906020019060200201518152602001908152602001600020541115610d5c5760019250610deb565b610dd3565b60ff86166000908152603b6020526040812086518290889086908110610d8357fe5b90602001906020020151815260200190815260200160002060008684815181101515610dab57fe5b906020019060200201518152602001908152602001600020541115610dd35760019250610deb565b600101610ce5565b600190910190610cd8565b600092505b50509392505050565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505090505b90565b6000610e968261422b565b1515610ea157600080fd5b50600090815260026020526040902054600160a060020a031690565b6000610ec8826123a8565b9050600160a060020a038381169082161415610ee357600080fd5b33600160a060020a0382161480610eff5750610eff81336141f7565b1515610f0a57600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60365490565b6012546040517f05117e0d000000000000000000000000000000000000000000000000000000008152336004820181815260606024840190815286516064850152865187958795600160a060020a03909116946305117e0d9490938893889360448101916084909101906020808801910280838360005b83811015610ffb578181015183820152602001610fe3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561103a578181015183820152602001611022565b5050505090500195505050505050602060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505050506040513d602081101561108c57600080fd5b5051151560011461110c576040805160e560020a62461bcd028152602060048201526024808201527f4e6f7420656e6f75676820434f494e5320746f2062757920746865736520706c60448201527f6f74732100000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b601054600e548351604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015260448101929092525191909216916323b872dd9160648083019260209291908290030181600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050506040513d60208110156111b057600080fd5b5051151560011461120b576040805160e560020a62461bcd02815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b6012546040517f62026229000000000000000000000000000000000000000000000000000000008152336004820181815260606024840190815288516064850152885189958995600160a060020a039091169463620262299490938893889360448101916084909101906020808801910280838360005b8381101561129a578181015183820152602001611282565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156112d95781810151838201526020016112c1565b5050505090500195505050505050602060405180830381600087803b15801561130157600080fd5b505af1158015611315573d6000803e3d6000fd5b505050506040513d602081101561132b57600080fd5b50511515600114611386576040805160e560020a62461bcd02815260206004820181905260248201527f536f6d65206f662074686973206c616e6420616c7265616479206f776e656421604482015290519081900360640190fd5b3360009081526037602052604090205480151561145f576040805160808101825233808252426020808401918252600084860181815260608601828152603680546001810182558185529751600080516020615de183398151915260049099029889018054600160a060020a031916600160a060020a039092169190911790559451600080516020615e418339815191528801559051600080516020615e2183398151915287015551600080516020615e0183398151915290950194909455905491835260379052919020600019919091019055611485565b4260368281548110151561146f57fe5b9060005260206000209060040201600101819055505b611490888888614248565b50506031805460ff19166001179055505050505050565b602b5481565b60075490565b602a5481565b60368054829081106114c757fe5b60009182526020909120600490910201805460018201546002830154600390930154600160a060020a039092169350919084565b611505338261458a565b151561151057600080fd5b600160a060020a038216151561152557600080fd5b6115308383836145e9565b61153b838383614889565b505050565b600061154b8361245a565b821061155657600080fd5b600160a060020a038316600090815260056020526040902080548390811061157a57fe5b906000526020600020015490505b92915050565b611597836123a8565b600160a060020a031633146115ab57600080fd5b81600114156115f557602c5434146115c257600080fd5b6000838152603960205260409020546038805483929081106115e057fe5b60009182526020909120600660079092020101555b816002141561163c57602b54341461160c57600080fd5b60008381526039602052604090205460388054839290811061162a57fe5b60009182526020909120600790910201555b61164534614917565b60408051848152336020820181905281830185905260608201849052426080830152915185917f7d13a800c84963404b55189e82b783b86ad2172516aa8efe4cf51d54a4f72ade919081900360a00190a3505050565b600c54600090600160a060020a031633146116b557600080fd5b8415156116d857600c8054600160a060020a031916600160a060020a0386161790555b84600114156116fd57600e8054600160a060020a031916600160a060020a0386161790555b846002141561172257600d8054600160a060020a031916600160a060020a0386161790555b846003141561173157602b8390555b846004141561174057602c8390555b846005141561175e57815161175c90602e906020850190615b92565b505b846006141561176d57602a8390555b846007141561177c57602d8390555b84600814156117cf57600f8054600160a060020a031916600160a060020a03868116919091179182905516156117cf57600f5460108054600160a060020a031916600160a060020a039092169190911790555b84600914156118225760118054600160a060020a031916600160a060020a03868116919091179182905516156118225760115460128054600160a060020a031916600160a060020a039092169190911790555b84600a141561184b57604080518082019091528381526064602090910181905260138490556014555b84600b141561187457604080518082019091528381526064602090910181905260158490556016555b84600c141561189d57604080518082019091528381526064602090910181905260178490556018555b84600d14156118c65760408051808201909152838152606460209091018190526019849055601a555b84600e14156118ef576040805180820190915283815260646020909101819052601b849055601c555b84600f1415611918576040805180820190915283815260646020909101819052601d849055601e555b8460101415611940576040805180820190915283815260646020918201819052601f85905590555b846011141561196957604080518082019091528381526064602090910181905260218490556022555b84601214156119785760258390555b84601314156119875760268390555b8460141415611a10576000838152603960205260408120546038805490919081106119ae57fe5b6000918252602091829020600660079092020101919091556040805185815233928101839052600181830152426080820152905185917f7d13a800c84963404b55189e82b783b86ad2172516aa8efe4cf51d54a4f72ade919081900360a00190a35b8460631415611a2e57611a22836123a8565b9050611a2e818461497d565b5050505050565b60295481565b61153b838383602060405190810160405280600081525061378f565b6000611a62826123a8565b600160a060020a03163314611a7657600080fd5b600082815260396020526040902054603880549091908110611a9457fe5b9060005260206000209060070201600401805490509050611ab5338361497d565b601054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015611b2257600080fd5b505af1158015611b36573d6000803e3d6000fd5b505050506040513d6020811015611b4c57600080fd5b50505050565b600c54600090819081908190819081906060908190600160a060020a03163314611b7b57600080fd5b60315460ff1615611b8b57600080fd5b8997505b88600101881015611d2b57603d54604080517fdb737c78000000000000000000000000000000000000000000000000000000008152600481018b90526000602482018190529151600160a060020a039093169263db737c789260448084019391929182900301818387803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015611c4357600080fd5b8151602083015160408401516060850151608086015160a08701805195979496939592949193820192640100000000811115611c7e57600080fd5b82016020810184811115611c9157600080fd5b8151856020820283011164010000000082111715611cae57600080fd5b50509291906020018051640100000000811115611cca57600080fd5b82016020810184811115611cdd57600080fd5b8151856020820283011164010000000082111715611cfa57600080fd5b50509291905050509650965096509650965096509650611d208888888888888888614c85565b600190970196611b8f565b50505050505050505050565b60265481565b6000611d476114ad565b8210611d5257600080fd5b6007805483908110611d6057fe5b90600052602060002001549050919050565b600080611d7d615c10565b601254604080517e54438d000000000000000000000000000000000000000000000000000000008152336004820152346024820152604481018890529051600092839283928a92600160a060020a0316916254438d91606480830192602092919082900301818887803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b505050506040513d6020811015611e1d57600080fd5b50511515600114611e78576040805160e560020a62461bcd02815260206004820181905260248201527f4e6f7420656e6f7567682045544820746f206275792074686973206361726421604482015290519081900360640190fd5b33600090815260376020526040902054801515611f51576040805160808101825233808252426020808401918252600084860181815260608601828152603680546001810182558185529751600080516020615de183398151915260049099029889018054600160a060020a031916600160a060020a039092169190911790559451600080516020615e418339815191528801559051600080516020615e2183398151915287015551600080516020615e0183398151915290950194909455905491835260379052919020600019919091019055611f77565b42603682815481101515611f6157fe5b9060005260206000209060040201600101819055505b349750611f93611f868a614e07565b899063ffffffff614ebd16565b9750611fb8611fa960198a63ffffffff614ed416565b602f549063ffffffff614eff16565b602f55611fc488614917565b611fcd8a6123a8565b9650600160a060020a0387166108fc611fed601b8b63ffffffff614ed416565b6040518115909202916000818181858888f19350505050151561205d5761204361201e601b8a63ffffffff614ed416565b600160a060020a0389166000908152602460205260409020549063ffffffff614eff16565b600160a060020a0388166000908152602460205260409020555b61206887338c6145e9565b61207387338c614f18565b60008a81526039602052604090205460388054909190811061209157fe5b60009182526020918290206040805160e081018252600790930290910180548352600181015483850152600281015483830152600381015460608401526004810180548351818702810187019094528084529394919360808601939283018282801561211c57602002820191906000526020600020905b815481526020019060010190808311612108575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561217457602002820191906000526020600020905b815481526020019060010190808311612160575b505050918352505060069190910154602090910152606081015190965094506121a4601f8663ffffffff614ed416565b60408088015133600090815260376020529190912054603680549397509195508787039281106121d057fe5b9060005260206000209060040201600201540160366037600033600160a060020a0316600160a060020a031681526020019081526020016000205481548110151561221757fe5b906000526020600020906004020160020181905550836038603960008d81526020019081526020016000205481548110151561224f57fe5b906000526020600020906007020160030181905550848403603554016035819055506122b86038603960008d81526020019081526020016000205481548110151561229657fe5b9060005260206000209060070201600201546021614ed490919063ffffffff16565b60008b8152603960205260409020546038805490919081106122d657fe5b600091825260209091206002600790920201015560338054600101905561230c61230760198a63ffffffff614ed416565b614fcf565b8551604080518c8152600160a060020a038a1660208201819052338284018190526060830194909452608082018790523460a083015260c0820189905260e082018890524261010083015291518d917fca6cef801d696b99880261abca3984a0cf932a69993676ef85130e9ce94e94da91908190036101200190a450505050505050505050565b3360009081526024602052604090205490565b565b600081815260016020526040812054600160a060020a031680151561158857600080fd5b602e805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156124525780601f1061242757610100808354040283529160200191612452565b820191906000526020600020905b81548152906001019060200180831161243557829003601f168201915b505050505081565b6000600160a060020a038216151561247157600080fd5b50600160a060020a031660009081526003602052604090205490565b6000806000806000806060806124a1615c10565b6124aa8b6123a8565b60008c81526039602052604090205460388054929b509181106124c957fe5b60009182526020918290206040805160e081018252600790930290910180548352600181015483850152600281015483830152600381015460608401526004810180548351818702810187019094528084529394919360808601939283018282801561255457602002820191906000526020600020905b815481526020019060010190808311612540575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156125ac57602002820191906000526020600020905b815481526020019060010190808311612598575b505050918352505060069190910154602091820152815160c08301516060840151928401516040850151929c50909a5098509650945090508915156125fa57806080015192508060a0015191505b509295985092959890939650565b3360009081526024602052604081208054919055602f5461262f908263ffffffff614ebd16565b602f55604051339082156108fc029083906000818181858888f19350505050151561268057336000908152602460205260409020805482019055602f5461267c908263ffffffff614eff16565b602f555b50565b60606000805b8451821015610deb575060005b83518110156136325760ff86161515612e5d576000603a600087858151811015156126bd57fe5b906020019060200201518152602001908152602001600020600086848151811015156126e557fe5b906020019060200201518152602001908152602001600020541115612e58576012548551600160a060020a03909116906395978868908590839063997bc6c9908a908890811061273157fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561277457600080fd5b505af1158015612788573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156127b157600080fd5b8101908080516401000000008111156127c957600080fd5b820160208101848111156127dc57600080fd5b81516401000000008111828201871017156127f657600080fd5b50506012548b51919450600160a060020a0316925063997bc6c991508a908890811061281e57fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561286157600080fd5b505af1158015612875573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561289e57600080fd5b8101908080516401000000008111156128b657600080fd5b820160208101848111156128c957600080fd5b81516401000000008111828201871017156128e357600080fd5b50509291905050506040518463ffffffff1660e060020a028152600401808060200180602001806020018060200180602001868103865289818151815260200191508051906020019080838360005b8381101561294a578181015183820152602001612932565b50505050905090810190601f1680156129775780820380516001836020036101000a031916815260200191505b50868103855260018152602001807f5b00000000000000000000000000000000000000000000000000000000000000815250602001868103845288818151815260200191508051906020019080838360005b838110156129e15781810151838201526020016129c9565b50505050905090810190601f168015612a0e5780820380516001836020036101000a031916815260200191505b508681038352600181526020018060f960020a601d02815250602001868103825287818151815260200191508051906020019080838360005b83811015612a5f578181015183820152602001612a47565b50505050905090810190601f168015612a8c5780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b158015612ab157600080fd5b505af1158015612ac5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612aee57600080fd5b810190808051640100000000811115612b0657600080fd5b82016020810184811115612b1957600080fd5b8151640100000000811182820187101715612b3357600080fd5b50506012548951919750600160a060020a031693506345e965cd9250869150839063f76f950e90603a906000908c908a908110612b6c57fe5b90602001906020020151815260200190815260200160002060008a88815181101515612b9457fe5b906020019060200201518152602001908152602001600020546040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015612be657600080fd5b505af1158015612bfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c2357600080fd5b810190808051640100000000811115612c3b57600080fd5b82016020810184811115612c4e57600080fd5b8151640100000000811182820187101715612c6857600080fd5b50509291905050506040518363ffffffff1660e060020a0281526004018080602001806020018060200180602001858103855287818151815260200191508051906020019080838360005b83811015612ccb578181015183820152602001612cb3565b50505050905090810190601f168015612cf85780820380516001836020036101000a031916815260200191505b508581038452600181526020018060f960020a601d02815250602001858103835286818151815260200191508051906020019080838360005b83811015612d49578181015183820152602001612d31565b50505050905090810190601f168015612d765780820380516001836020036101000a031916815260200191505b50858103825260018152602001807f5d000000000000000000000000000000000000000000000000000000000000008152506020019650505050505050600060405180830381600087803b158015612dcd57600080fd5b505af1158015612de1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612e0a57600080fd5b810190808051640100000000811115612e2257600080fd5b82016020810184811115612e3557600080fd5b8151640100000000811182820187101715612e4f57600080fd5b50909650505050505b61362a565b60ff86166000908152603b6020526040812086518290889086908110612e7f57fe5b90602001906020020151815260200190815260200160002060008684815181101515612ea757fe5b90602001906020020151815260200190815260200160002054111561362a576012548551600160a060020a03909116906395978868908590839063997bc6c9908a9088908110612ef357fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015612f3657600080fd5b505af1158015612f4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612f7357600080fd5b810190808051640100000000811115612f8b57600080fd5b82016020810184811115612f9e57600080fd5b8151640100000000811182820187101715612fb857600080fd5b50506012548b51919450600160a060020a0316925063997bc6c991508a9088908110612fe057fe5b906020019060200201516040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561302357600080fd5b505af1158015613037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561306057600080fd5b81019080805164010000000081111561307857600080fd5b8201602081018481111561308b57600080fd5b81516401000000008111828201871017156130a557600080fd5b50509291905050506040518463ffffffff1660e060020a028152600401808060200180602001806020018060200180602001868103865289818151815260200191508051906020019080838360005b8381101561310c5781810151838201526020016130f4565b50505050905090810190601f1680156131395780820380516001836020036101000a031916815260200191505b50868103855260018152602001807f5b00000000000000000000000000000000000000000000000000000000000000815250602001868103845288818151815260200191508051906020019080838360005b838110156131a357818101518382015260200161318b565b50505050905090810190601f1680156131d05780820380516001836020036101000a031916815260200191505b508681038352600181526020018060f960020a601d02815250602001868103825287818151815260200191508051906020019080838360005b83811015613221578181015183820152602001613209565b50505050905090810190601f16801561324e5780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561327357600080fd5b505af1158015613287573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156132b057600080fd5b8101908080516401000000008111156132c857600080fd5b820160208101848111156132db57600080fd5b81516401000000008111828201871017156132f557600080fd5b505060125460ff8b166000908152603b602052604081208b51939950600160a060020a0390921695506345e965cd9450889350859263f76f950e9291908c908a90811061333e57fe5b90602001906020020151815260200190815260200160002060008a8881518110151561336657fe5b906020019060200201518152602001908152602001600020546040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b1580156133b857600080fd5b505af11580156133cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156133f557600080fd5b81019080805164010000000081111561340d57600080fd5b8201602081018481111561342057600080fd5b815164010000000081118282018710171561343a57600080fd5b50509291905050506040518363ffffffff1660e060020a0281526004018080602001806020018060200180602001858103855287818151815260200191508051906020019080838360005b8381101561349d578181015183820152602001613485565b50505050905090810190601f1680156134ca5780820380516001836020036101000a031916815260200191505b508581038452600181526020018060f960020a601d02815250602001858103835286818151815260200191508051906020019080838360005b8381101561351b578181015183820152602001613503565b50505050905090810190601f1680156135485780820380516001836020036101000a031916815260200191505b50858103825260018152602001807f5d000000000000000000000000000000000000000000000000000000000000008152506020019650505050505050600060405180830381600087803b15801561359f57600080fd5b505af11580156135b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156135dc57600080fd5b8101908080516401000000008111156135f457600080fd5b8201602081018481111561360757600080fd5b815164010000000081118282018710171561362157600080fd5b50909650505050505b600101612696565b600190910190612689565b600c54600090600160a060020a0316331461365757600080fd5b60315460ff161561366757600080fd5b50815b8160010163ffffffff168163ffffffff16101561153b576136908163ffffffff16615170565b60010161366a565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610e805780601f10610e5557610100808354040283529160200191610e80565b602c5481565b60355481565b600160a060020a03821633141561371b57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60325481565b61379a8484846114fb565b6137a6848484846152da565b1515611b4c57600080fd5b60315460ff1681565b60335481565b60606137cb8261422b565b15156137d657600080fd5b601254604080517ff76f950e000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163ff74927b91602e91849163f76f950e91602480830192600092919082900301818387803b15801561384657600080fd5b505af115801561385a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561388357600080fd5b81019080805164010000000081111561389b57600080fd5b820160208101848111156138ae57600080fd5b81516401000000008111828201871017156138c857600080fd5b50506040805160e060020a63ffffffff891602815260048101918252865460026000196101006001841615020190911604604482018190529295509093508392506024810191606490910190869080156139635780601f1061393857610100808354040283529160200191613963565b820191906000526020600020905b81548152906001019060200180831161394657829003601f168201915b5050838103825284518152845160209182019186019080838360005b8381101561399757818101518382015260200161397f565b50505050905090810190601f1680156139c45780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156139e557600080fd5b505af11580156139f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613a2257600080fd5b810190808051640100000000811115613a3a57600080fd5b82016020810184811115613a4d57600080fd5b8151640100000000811182820187101715613a6757600080fd5b50909695505050505050565b602d5481565b6000806000806000606080613a8c615c10565b613a958a6123a8565b60008b81526039602052604090205460388054929a50918110613ab457fe5b60009182526020918290206040805160e0810182526007909302909101805483526001810154838501526002810154838301526003810154606084015260048101805483518187028101870190945280845293949193608086019392830182828015613b3f57602002820191906000526020600020905b815481526020019060010190808311613b2b575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613b9757602002820191906000526020600020905b815481526020019060010190808311613b83575b50505091835250506006919091015460209182015281516060830151918301516040840151919a509850965094509050881515613bdd57806080015192508060a0015191505b5092959891949750929550565b600d54600090600160a060020a03163314613c0457600080fd5b5060238054600091829055600d546040519192600160a060020a03909116916108fc919081818181818888f19350505050151561268057602355565b6000808484601260009054906101000a9004600160a060020a0316600160a060020a031663862c5e16333485856040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a031681526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015613ce1578181015183820152602001613cc9565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015613d20578181015183820152602001613d08565b505050509050019650505050505050602060405180830381600087803b158015613d4957600080fd5b505af1158015613d5d573d6000803e3d6000fd5b505050506040513d6020811015613d7357600080fd5b50511515600114613dce576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420656e6f75676820455448210000000000000000000000000000000000604482015290519081900360640190fd5b6012546040517f6202622900000000000000000000000000000000000000000000000000000000815233600482018181526060602484019081528b5160648501528b518c958c95600160a060020a039091169463620262299490938893889360448101916084909101906020808801910280838360005b83811015613e5d578181015183820152602001613e45565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015613e9c578181015183820152602001613e84565b5050505090500195505050505050602060405180830381600087803b158015613ec457600080fd5b505af1158015613ed8573d6000803e3d6000fd5b505050506040513d6020811015613eee57600080fd5b50511515600114613f49576040805160e560020a62461bcd02815260206004820181905260248201527f536f6d65206f662074686973206c616e6420616c7265616479206f776e656421604482015290519081900360640190fd5b33600090815260376020526040902054801515614022576040805160808101825233808252426020808401918252600084860181815260608601828152603680546001810182558185529751600080516020615de183398151915260049099029889018054600160a060020a031916600160a060020a039092169190911790559451600080516020615e418339815191528801559051600080516020615e2183398151915287015551600080516020615e0183398151915290950194909455905491835260379052919020600019919091019055614048565b4260368281548110151561403257fe5b9060005260206000209060040201600101819055505b34965061406461405789614e07565b889063ffffffff614ebd16565b965061407a611fa960158963ffffffff614ed416565b602f5561408687614917565b6140918b8b8b614248565b6140a561230760158963ffffffff614ed416565b6031805460ff191660011790556027548a51108015906140c757506000602554115b156141d8576028548a518115156140da57fe5b0495506025548611156140ed5760255495505b601054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018990529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561415a57600080fd5b505af115801561416e573d6000803e3d6000fd5b505050506040513d602081101561418457600080fd5b5050604080513380825260208201899052428284015291517f4b4baca05c77f3008ba9b998920e58005aeb17a94101186b0a80f564075c043e9181900360600190a260268054870190556025805487900390555b5050505050505050505050565b60305481565b60235481565b602f5481565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60285481565b600090815260016020526040902054600160a060020a0316151590565b60008061426460016142586114ad565b9063ffffffff614eff16565b9150614270338361545c565b6040805160e0810182528681528551602954908102602080840191825288519092029383019384528651602d5402606084019081526080840189815260a08501899052600060c08601819052603880546001810180835591909252865160079092027f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f456199810192835594517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619a86015596517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619b85015591517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619c840155518051919361439e937f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619d0192910190615c4b565b5060a082015180516143ba916005840191602090910190615c4b565b5060c0919091015160069091015550603854600083815260396020526040902060001990910190556143ed8285856154ab565b50336000908152603760205260409020548251602d54603680549190920291908390811061441757fe5b9060005260206000209060040201600201540160368281548110151561443957fe5b9060005260206000209060040201600201819055508251602d540260355401603581905550835160368281548110151561446f57fe5b9060005260206000209060040201600301540160368281548110151561449157fe5b90600052602060002090600402016003018190555033600160a060020a0316827f807689f8da61b73f683c57d12d78610d2e69edfaa2feac878373d92ba25e27308433898960008151811015156144e457fe5b906020019060200201518960008151811015156144fd57fe5b60209081029091018101518c516029548d51602d54604080519a8b52600160a060020a03909916958a0195909552888801969096526060880194909452608087019190915260a086015260c08501919091520260e08301524261010083015251908190036101200190a38351602a5402602954016029819055508351603254016032819055505050505050565b600080614596836123a8565b905080600160a060020a031684600160a060020a031614806145d1575083600160a060020a03166145c684610e8b565b600160a060020a0316145b806145e157506145e181856141f7565b949350505050565b600081815260396020526040812054603880548392839291811061460957fe5b90600052602060002090600702016003015492506038603960008681526020019081526020016000205481548110151561463f57fe5b90600052602060002090600702016004018054905091506037600087600160a060020a0316600160a060020a031681526020019081526020016000205490508260368281548110151561468e57fe5b906000526020600020906004020160020154036036828154811015156146b057fe5b906000526020600020906004020160020181905550816036828154811015156146d557fe5b906000526020600020906004020160030154036036828154811015156146f757fe5b6000918252602080832060036004909302019190910192909255600160a060020a03871681526037909152604090205490508015156147f3575060408051608081018252600160a060020a03868116808352426020808501918252600085870181815260608701828152603680546001810182558185529851600080516020615de18339815191526004909a02998a018054600160a060020a03191691909916179097559351600080516020615e4183398151915288015551600080516020615e218339815191528701559151600080516020615e01833981519152909501949094558254918152603790935292909120600019928301905554015b8260368281548110151561480357fe5b9060005260206000209060040201600201540160368281548110151561482557fe5b9060005260206000209060040201600201819055508160368281548110151561484a57fe5b9060005260206000209060040201600301540160368281548110151561486c57fe5b906000526020600020906004020160030181905550505050505050565b614893338261458a565b151561489e57600080fd5b600160a060020a03821615156148b357600080fd5b6148bd838261556c565b6148c783826155d0565b6148d182826156d7565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600d54600160a060020a03166108fc61493760138463ffffffff614ed416565b6040518115909202916000818181858888f1935050505015156126805761497761496860138363ffffffff614ed416565b6023549063ffffffff614eff16565b60235550565b60008060008060008060006149928989615720565b6000888152603960205260409020546038805490919081106149b057fe5b90600052602060002090600702016003015496506038603960008a8152602001908152602001600020548154811015156149e657fe5b9060005260206000209060070201600401805490509550603760008a600160a060020a0316600160a060020a0316815260200190815260200160002054945086603686815481101515614a3557fe5b90600052602060002090600402016002015403603686815481101515614a5757fe5b90600052602060002090600402016002018190555085603686815481101515614a7c57fe5b90600052602060002090600402016003015403603686815481101515614a9e57fe5b600091825260208083206003600490930201919091019290925589815260399091526040902054603854909450600019018414614b6b57603880546000198101908110614ae757fe5b9060005260206000209060070201603885815481101515614b0457fe5b60009182526020909120825460079092020190815560018083015490820155600280830154908201556003808301549082015560048083018054614b4b9284019190615c85565b5060058281018054614b609284019190615c85565b506006918201549101555b6038805490614b7e906000198301615cc5565b50600088815260396020526040812055600192505b60058360ff161015614c7a57505060ff81166000908152603c602090815260408083208984529091528120905b8154811015614c6f5760ff83166000908152603b602052604081208354909190849084908110614bec57fe5b906000526020600020906002020160000154815260200190815260200160002060008383815481101515614c1c57fe5b9060005260206000209060020201600101548152602001908152602001600020600090558181815481101515614c4e57fe5b60009182526020822060029091020181815560019081019190915501614bc0565b600190920191614b93565b505050505050505050565b614c8f878961545c565b6040805160e0810182528781526020808201888152928201878152606083018781526080840187815260a08501879052600060c08601819052603880546001810180835591909252865160079092027f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f456199810192835597517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619a89015593517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619b88015591517f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619c87015551805192959193614dae937f38395c5dceade9603479b177b68959049485df8aa97b39f3533039af5f45619d90930192910190615c4b565b5060a08201518051614dca916005840191602090910190615c4b565b5060c091909101516006909101555060385460008981526039602052604090206000199091019055614dfd8883836154ab565b5050505050505050565b600080600160a060020a0383163314801590614e2b5750600160a060020a03831615155b1561158857614e41601d3463ffffffff614ed416565b604051909150600160a060020a0384169082156108fc029083906000818181858888f19350505050156115885760408051600160a060020a03851680825260208201849052428284015291517f500a1821a82e1e9951feb0c4eb0043d6f9d97be1a522ffa083f6a91b7b5c013d9181900360600190a292915050565b60008083831115614ecd57600080fd5b5050900390565b6000811515614ee557506000611588565b600183015483548302811515614ef757fe5b049392505050565b600082820183811015614f1157600080fd5b9392505050565b600160a060020a0382161515614f2d57600080fd5b600081815260026020526040902054600160a060020a031615614f675760008181526002602052604090208054600160a060020a03191690555b600160a060020a03831660009081526003602052604090205460011015614fa957600160a060020a038316600090815260036020526040902080546000190190555b60008181526001602052604090208054600160a060020a03191690556148d182826156d7565b6031546000908190819081908190819060ff161561515e57600095506000945060345487019350600192505b603654831015615115576298968060355460368581548110151561501b57fe5b906000526020600020906004020160020154629896800281151561503b57fe5b04629896800281151561504a57fe5b049150506298968083048102600081111561510a576150ac816024600060368781548110151561507657fe5b60009182526020808320600490920290910154600160a060020a031683528201929092526040019020549063ffffffff614eff16565b602460006036868154811015156150bf57fe5b60009182526020808320600490920290910154600160a060020a031683528201929092526040019020556030546150fc908263ffffffff614eff16565b603055948501946001909401935b600190920191614ffb565b60006034556040805187815260208101879052428183015290517f5fe10e72bed621bd9aa98489cd68e8ee3f0446c3472cea71de9c6c105c089f8f9181900360600190a1615167565b60348054880190555b50505050505050565b603d54604080517f23272065000000000000000000000000000000000000000000000000000000008152600481018490529051600092839283928392600160a060020a031691632327206591602480830192608092919082900301818787803b1580156151dc57600080fd5b505af11580156151f0573d6000803e3d6000fd5b505050506040513d608081101561520657600080fd5b5080516020808301516040808501516060958601518251608081018452600160a060020a039687168082528187019586528185019384529781019182526036805460018101825560008281529251600080516020615de183398151915260049092029182018054600160a060020a03191691909a16179098559451600080516020615e418339815191528801559151600080516020615e2183398151915287015551600080516020615e01833981519152909501949094559054938352603790915290206000199190910190555050505050565b6000806152ef85600160a060020a0316615768565b15156152fe5760019150615453565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015615391578181015183820152602001615379565b50505050905090810190601f1680156153be5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156153e057600080fd5b505af11580156153f4573d6000803e3d6000fd5b505050506040513d602081101561540a57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b6154668282615770565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b6000805b83518210156155185784603a600086858151811015156154cb57fe5b906020019060200201518152602001908152602001600020600085858151811015156154f357fe5b60209081029091018101518252810191909152604001600020556001909101906154af565b5060015b6005821015611a2e576155618185600081518110151561553857fe5b9060200190602002015185600081518110151561555157fe5b90602001906020020151886157cb565b60019091019061551c565b81600160a060020a031661557f826123a8565b600160a060020a03161461559257600080fd5b600081815260026020526040902054600160a060020a0316156155cc5760008181526002602052604090208054600160a060020a03191690555b5050565b60008060006155df858561597a565b600084815260066020908152604080832054600160a060020a038916845260059092529091205490935061561a90600163ffffffff614ebd16565b600160a060020a03861660009081526005602052604090208054919350908390811061564257fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561568257fe5b6000918252602080832090910192909255600160a060020a03871681526005909152604090208054906156b9906000198301615cf1565b50600093845260066020526040808520859055908452909220555050565b60006156e38383615a03565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b61572a8282615a86565b6000818152600b602052604090205460026000196101006001841615020190911604156155cc576000818152600b602052604081206155cc91615d15565b6000903b1190565b600160a060020a038216151561578557600080fd5b61578f82826156d7565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b601254604080517f99a2e1ec00000000000000000000000000000000000000000000000000000000815260ff87166004820152602481018690529051600160a060020a03909216916399a2e1ec916044808201926020929091908290030181600087803b15801561583b57600080fd5b505af115801561584f573d6000803e3d6000fd5b505050506040513d602081101561586557600080fd5b5051601254604080517f99a2e1ec00000000000000000000000000000000000000000000000000000000815260ff88166004820152602481018690529051929550600160a060020a03909116916399a2e1ec916044808201926020929091908290030181600087803b1580156158da57600080fd5b505af11580156158ee573d6000803e3d6000fd5b505050506040513d602081101561590457600080fd5b505160ff9094166000818152603b6020908152604080832087845282528083208884528252808320859055928252603c8152828220938252928352818120825180840190935294825281830195865284546001818101875595825292902090516002909202019081559251929091019190915550565b81600160a060020a031661598d826123a8565b600160a060020a0316146159a057600080fd5b600160a060020a0382166000908152600360205260409020546159ca90600163ffffffff614ebd16565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b600081815260016020526040902054600160a060020a031615615a2557600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a0388169081179091558452600390915290912054615a6691614eff565b600160a060020a0390921660009081526003602052604090209190915550565b6000806000615a958585615b42565b600084815260086020526040902054600754909350615abb90600163ffffffff614ebd16565b9150600782815481101515615acc57fe5b9060005260206000200154905080600784815481101515615ae957fe5b60009182526020822001919091556007805484908110615b0557fe5b6000918252602090912001556007805490615b24906000198301615cf1565b50600093845260086020526040808520859055908452909220555050565b615b4c828261556c565b615b5682826155d0565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615bd357805160ff1916838001178555615c00565b82800160010185558215615c00579182015b82811115615c00578251825591602001919060010190615be5565b50615c0c929150615d55565b5090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082015260c081019190915290565b828054828255906000526020600020908101928215615c005791602002820182811115615c00578251825591602001919060010190615be5565b828054828255906000526020600020908101928215615c005760005260206000209182015b82811115615c00578254825591600101919060010190615caa565b81548183558181111561153b5760070281600702836000526020600020918201910161153b9190615d6f565b81548183558181111561153b5760008381526020902061153b918101908301615d55565b50805460018160011615610100020316600290046000825580601f10615d3b5750612680565b601f01602090049060005260206000209081019061268091905b610e8891905b80821115615c0c5760008155600101615d5b565b610e8891905b80821115615c0c576000808255600182018190556002820181905560038201819055615da46004830182615dc2565b615db2600583016000615dc2565b5060006006820155600701615d75565b50805460008255906000526020600020908101906126809190615d5556004a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b84a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81bb4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81ba4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b9a165627a7a723058207a967218f2daa749ed2d6fddebab05421703a89c54507fde5e3a919d17ae23d50029"
}