{
  "address": "0xcd8aac9972dc4ddc48d700bc0710c0f5223fbcfa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "VjuCoin",
  "contractName": "VjuCoin",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-05\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Interface {\n  function totalSupply() constant returns (uint256 supply);\n  function balanceOf(address _owner) constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract VjuCoin is ERC20Interface {\n  string public constant symbol = \"VJU\";\n  string public constant name = \"VjuCoin\";\n  uint8 public constant decimals = 0;\n  uint256 _totalSupply = 100000000;\n  address public owner;\n  mapping(address => uint256) balances;\n  mapping(address => mapping (address => uint256)) allowed;\n  modifier onlyOwner() {\n    if (msg.sender != owner) {revert();}\n    _;\n  }\n  \n  function VjuCoin() {\n    owner = msg.sender;\n    balances[owner] = _totalSupply;\n  }\n   \n  function totalSupply() constant returns (uint256 supply) {\n    supply = _totalSupply;\n  }\n   \n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n   \n  function transfer(address _to, uint256 _amount) returns (bool success) {\n    if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n      balances[msg.sender] -= _amount;\n      balances[_to] += _amount;\n      Transfer(msg.sender, _to, _amount);\n      return true;\n    } else {return false;}\n  }\n   \n  function transferFrom(address _from,address _to,uint256 _amount) returns (bool success) {\n    if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n      balances[_from] -= _amount;\n       allowed[_from][msg.sender] -= _amount;\n       balances[_to] += _amount;\n       Transfer(_from, _to, _amount);\n       return true;\n    } else {return false;}\n  }\n  \n  function approve(address _spender, uint256 _amount) returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n  \n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function () {\n    revert();\n  }\n   \n}",
  "bytecode": "60606040526305f5e100600055341561001757600080fd5b5b60018054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600260205260409020555b5b6106b58061005f6000396000f300606060405236156100a15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b9578063095ea7b31461014457806318160ddd1461017a57806323b872dd1461019f578063313ce567146101db57806370a08231146102045780638da5cb5b1461023557806395d89b4114610264578063a9059cbb146102ef578063dd62ed3e14610325575b34156100ac57600080fd5b6100b75b600080fd5b565b005b34156100c457600080fd5b6100cc61035c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101095780820151818401525b6020016100f0565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014f57600080fd5b610166600160a060020a0360043516602435610393565b604051901515815260200160405180910390f35b341561018557600080fd5b61018d610400565b60405190815260200160405180910390f35b34156101aa57600080fd5b610166600160a060020a0360043581169060243516604435610407565b604051901515815260200160405180910390f35b34156101e657600080fd5b6101ee610523565b60405160ff909116815260200160405180910390f35b341561020f57600080fd5b61018d600160a060020a0360043516610528565b60405190815260200160405180910390f35b341561024057600080fd5b610248610547565b604051600160a060020a03909116815260200160405180910390f35b341561026f57600080fd5b6100cc610556565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101095780820151818401525b6020016100f0565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102fa57600080fd5b610166600160a060020a036004351660243561058d565b604051901515815260200160405180910390f35b341561033057600080fd5b61018d600160a060020a036004358116906024351661065c565b60405190815260200160405180910390f35b60408051908101604052600781527f566a75436f696e00000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b600160a060020a0383166000908152600260205260408120548290108015906104575750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b80156104635750600082115b80156104885750600160a060020a038316600090815260026020526040902054828101115b1561051757600160a060020a0380851660008181526002602081815260408084208054899003905560038252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161051b565b5060005b5b9392505050565b600081565b600160a060020a0381166000908152600260205260409020545b919050565b600154600160a060020a031681565b60408051908101604052600381527f564a550000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600260205260408120548290108015906105b65750600082115b80156105db5750600160a060020a038316600090815260026020526040902054828101115b1561064d57600160a060020a033381166000818152600260205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103fa565b5060006103fa565b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b929150505600a165627a7a72305820d0e311ced265567ffd2f8ff5a5bd6a13f2f23666e32d0cb32fe170b36659dbc10029"
}