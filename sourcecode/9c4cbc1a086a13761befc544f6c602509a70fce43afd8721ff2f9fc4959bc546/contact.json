{
  "address": "0x6329316475a98027e62246d25e4a5ed8d7f9fc51",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SWAP",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n  // mitigate short address attack\n  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\n  // TODO: doublecheck implication of >= compared to ==\n  modifier onlyPayloadSize(uint numWords) {\n     assert(msg.data.length >= numWords * 32 + 4);\n     _;\n  }\n}\ncontract Token { // ERC20 standard\n\t\tfunction balanceOf(address _owner) public  view returns (uint256 balance);\n\t\tfunction transfer(address _to, uint256 _value) public  returns (bool success);\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n\t\tfunction approve(address _spender, uint256 _value)  returns (bool success);\n\t\tfunction allowance(address _owner, address _spender) public  view returns (uint256 remaining);\n\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\t}\t\ncontract STC is Token{\n\tPrice public currentPrice;\n\tuint256 public fundingEndTime;\n\taddress public fundWallet;\n\tfunction() payable {\n\t\t\trequire(tx.origin == msg.sender);\n\t\t\tbuyTo(msg.sender);\n\t}\n\tfunction buyTo(address participant) public payable; \n\tfunction icoDenominatorPrice() public view returns (uint256);\n\tstruct Price { // tokensPerEth\n\t\t\tuint256 numerator;\n\t\t\tuint256 denominator;\n\t}\n}\t\ncontract STCDR is Token{\n\t//function burnMyTokens(uint256 amountTokens);\n}\t\ncontract OwnerControl is SafeMath {\n\tbool public halted = false;\n\taddress public controlWallet;\t\n\t//event\n\tevent AddLiquidity(uint256 ethAmount);\n\tevent RemoveLiquidity(uint256 ethAmount);\n\t//modifier\n\tmodifier onlyControlWallet {\n\t\t\trequire(msg.sender == controlWallet);\n\t\t\t_;\n\t}\n\t// allow controlWallet  to add ether to contract\n\tfunction addLiquidity() external onlyControlWallet payable {\n\t\t\trequire(msg.value > 0);\n\t\t\tAddLiquidity(msg.value);\n\t}\n\t// allow controlWallet to remove ether from contract\n\tfunction removeLiquidity(uint256 amount) external onlyControlWallet {\n\t\t\trequire(amount <= this.balance);\n\t\t\tcontrolWallet.transfer(amount);\n\t\t\tRemoveLiquidity(amount);\n\t}\n\tfunction changeControlWallet(address newControlWallet) external onlyControlWallet {\n\t\t\trequire(newControlWallet != address(0));\n\t\t\tcontrolWallet = newControlWallet;\n\t}\n\tfunction halt() external onlyControlWallet {\n\t\t\thalted = true;\n\t}\n\tfunction unhalt() external onlyControlWallet {\n\t\t\thalted = false;\n\t}\n\tfunction claimTokens(address _token) external onlyControlWallet {\n\t\t\trequire(_token != address(0));\n\t\t\tToken token = Token(_token);\n\t\t\tuint256 balance = token.balanceOf(this);\n\t\t\ttoken.transfer(controlWallet, balance);\n\t}\n\t\n}\ncontract SWAP is OwnerControl {\n\tstring public name = \"SWAP STCDR-STC\";\t\n\tSTC public STCToken;\n\tSTCDR public STCDRToken;\n\tuint256 public discount = 5;\n\tuint256 public stcdr2stc_Ratio = 40;\n\t//event\n\t event TokenSwaped(address indexed _from,  uint256 _stcBuy, uint256 _stcBonus, uint256 _stcdrBurn, uint256 _ethPrice, uint256 _stcPrice);\n\t//modifier\n\t//Initialize\n\tfunction SWAP(address _STCToken,address _STCDRToken) public  {\n\t\t\tcontrolWallet = msg.sender;\n\t\t\tSTCToken = STC(_STCToken);\n\t\t\tSTCDRToken = STCDR(_STCDRToken);\n\t}\t\n\tfunction() payable {\n\t\t\trequire(tx.origin == msg.sender);\n\t\t\tbuyTo(msg.sender);\n\t}\n\tfunction transferTokensAfterEndTime(address participant, uint256 _tokens ,uint256 _tokenBonus , uint256 _tokensToBurn) private\n\t{\n\t\trequire(this.balance>=msg.value);\n\t\t//Check if STC token are available to transfer\n\t\trequire(availableSTCTokens() > safeAdd(_tokens,_tokenBonus));\n\t\t//Burn Tokens\t\t\n\t\tSTCDRToken.transferFrom(participant,this,_tokensToBurn);\n\t\tSTCDRToken.transfer(controlWallet, _tokensToBurn);\n\t\t//Transfer STC Tokens\n\t\tSTCToken.transferFrom(controlWallet,this,safeAdd(_tokens,_tokenBonus));\n\t\tSTCToken.transfer(participant, _tokens);\n\t\tSTCToken.transfer(participant, _tokenBonus);\n\t\t//TransferMoney\n\t\tSTCToken.fundWallet().transfer(msg.value);\n\t}\n\tfunction addEthBonusToBuy(address participant, uint256 _ethBonus , uint256 _tokensToBurn ) private {\n\t\t//Check If SWAP contract have enaf ether for this opertion\n\t\trequire(this.balance>=safeAdd(msg.value, _ethBonus));\t\n\t    //Burn Tokens\t\t\t\n\t\tSTCDRToken.transferFrom(participant,this,_tokensToBurn);\n\t\tSTCDRToken.transfer(controlWallet, _tokensToBurn);\n\t\t//Forward Etherium in to STC contract\n\t\tSTCToken.buyTo.value(safeAdd(msg.value, _ethBonus))(participant);\n\t}\n\tfunction buyTo(address participant) public payable {\n\t\trequire(!halted);\t\t\n\t\trequire(msg.value > 0);\n\t\t\n\t\t//Get STCDR tokens that can be transfer and burn\n\t\tuint256 availableTokenSTCDR = availableSTCDRTokensOF(participant);\n\t\trequire(availableTokenSTCDR > 0);\n\t\t//Last ETH-USD price\n\t\tuint256 _numerator = currentETHPrice();\n\t\trequire(_numerator > 0);\n\t\t//GetEnd Time\n\t\tuint256 _fundingEndTime = STCToken.fundingEndTime();\n\t\t//STC Denominator price\n\t\tuint256 _denominator = currentSTCPrice();\t\n\t\trequire(_denominator > 0);\t\n\t\t//Max STC that can be as used to callculated bonus\n\t\tuint256 _stcMaxBonus = safeMul(availableTokenSTCDR,10000000000) / stcdr2stc_Ratio; //stcMaxBonus(availableTokenSTCDR);\n\t\trequire(_stcMaxBonus > 0);\n\t\t//Calculated STC that user buy for ETH\n\t\tuint256 _stcOrginalBuy = safeMul(msg.value,_numerator) / _denominator; //stcOrginalBuy(msg.value);\t\n\t\trequire(_stcOrginalBuy > 0);\n\t\t\n\t\tuint256 _tokensToBurn =0 ;\n\t\tuint256 _tokensBonus =0 ;\n\t\tif (_stcOrginalBuy >= _stcMaxBonus){\n\t\t\t_tokensToBurn =  availableTokenSTCDR;\n\t\t\t_tokensBonus= safeSub(safeMul((_stcMaxBonus / safeSub(100,discount)),100),_stcMaxBonus); //safeMul(_stcMaxBonus,discount)/100;\n\t\t} else {\n\t\t\t_tokensToBurn = safeMul(_stcOrginalBuy,stcdr2stc_Ratio)/10000000000;\t\n\t\t\t_tokensBonus =  safeSub(safeMul((_stcOrginalBuy / safeSub(100,discount)),100),_stcOrginalBuy);  // safeMul(_stcOrginalBuy,discount)/100;\t\t\t\t\t\n\t\t} \n\t\trequire(_tokensToBurn > 0);\n\t\trequire(_tokensBonus > 0);\n\t\trequire(_tokensBonus < _stcOrginalBuy);\n\t\t\n\t\tif (now < _fundingEndTime) {\n\t\t\t//Method 1 Before End Date\n\t\t\t//Convert Token in to EthValue\n\t\t\tuint256 _ethBonus=safeMul(_tokensBonus, _denominator) / _numerator ;\n\t\t\taddEthBonusToBuy(participant,_ethBonus,_tokensToBurn);\n\t\t//----\t\n\t\t} else {\n\t\t\t//Method 2\n\t\t\ttransferTokensAfterEndTime(participant,_stcOrginalBuy,_tokensBonus ,_tokensToBurn);\n\t\t\t//----\n\t\t}\n\n\tTokenSwaped(participant,  _stcOrginalBuy , _tokensBonus,_tokensToBurn, _numerator ,_denominator);\n\t}\t\n\tfunction currentETHPrice() public view returns (uint256 numerator)\n\t{\n\t\tvar (a, b) = STCToken.currentPrice();\n\t\treturn STC.Price(a, b).numerator;\n\t}\t\n\tfunction currentSTCPrice() public view returns (uint256 numerator)\n\t{\n\t\treturn STCToken.icoDenominatorPrice();\n\t}\n\t//Information Tokens Transfered to control wallet for burn.\n\tfunction tokenSTCDRforBurnInControlWallett() view returns (uint256 numerator) {\n\t\treturn  STCDRToken.balanceOf(controlWallet);\n\t}\n\t//Information STCDR allowed for user to burn\n\tfunction availableSTCDRTokensOF(address _owner) view returns (uint256 numerator) {\n\t\tuint256 alowedTokenSTCDR = STCDRToken.allowance(_owner, this);\n\t\tuint256 balanceTokenSTCDR = STCDRToken.balanceOf(_owner);\n\t\tif (alowedTokenSTCDR>balanceTokenSTCDR) {\n\t\t\treturn balanceTokenSTCDR;\t\n\t\t} else {\n\t\t\treturn alowedTokenSTCDR;\n\t\t}\n\t}\n\t//Information available STC tokens to assign after fundenttime when user use STCDR\n\tfunction availableSTCTokens() view returns (uint256 numerator) {\n\t\tuint256 alowedTokenSTC = STCToken.allowance(controlWallet, this);\n\t\tuint256 balanceTokenSTC = STCToken.balanceOf(controlWallet);\n\t\tif (alowedTokenSTC>balanceTokenSTC) {\n\t\t\treturn balanceTokenSTC;\t\n\t\t} else {\n\t\t\treturn alowedTokenSTC;\n\t\t}\n\t}\n\n}",
  "bytecode": "608060405260008060006101000a81548160ff0219169083151502179055506040805190810160405280600e81526020017f535741502053544344522d535443000000000000000000000000000000000000815250600190805190602001906200006b9291906200017c565b50600560045560286005553480156200008357600080fd5b50604051604080620024d8833981018060405281019080805190602001909291908051906020019092919050505033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200022b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bf57805160ff1916838001178555620001f0565b82800160010185558215620001f0579182015b82811115620001ef578251825591602001919060010190620001d2565b5b509050620001ff919062000203565b5090565b6200022891905b80821115620002245760008160009055506001016200020a565b5090565b90565b61229d806200023b6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014c578063331a9d73146101dc5780635a8cf571146102075780635e2171621461024a5780635ed7ca5b146102a15780636b6f4a9d146102b85780637264727d146102e357806372faf84a1461033a578063823e569e146103655780639c8f9f23146103bc578063aedd3acc146103e9578063b16704d114610414578063b9b8af0b1461043f578063cb3e64fd1461046e578063dcf72c1014610485578063df8de3e7146104bb578063e680c2fd146104fe578063e8078d9414610555578063e9a158a61461055f575b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614151561014157600080fd5b61014a3361058a565b005b34801561015857600080fd5b50610161610898565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a1578082015181840152602081019050610186565b50505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e857600080fd5b506101f1610936565b6040518082815260200191505060405180910390f35b34801561021357600080fd5b50610248600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc0565b005b34801561025657600080fd5b5061028b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c9c565b6040518082815260200191505060405180910390f35b3480156102ad57600080fd5b506102b6610ee4565b005b3480156102c457600080fd5b506102cd610f5c565b6040518082815260200191505060405180910390f35b3480156102ef57600080fd5b506102f8610f62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034657600080fd5b5061034f610f88565b6040518082815260200191505060405180910390f35b34801561037157600080fd5b5061037a6110a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103c857600080fd5b506103e7600480360381019080803590602001909291905050506110cf565b005b3480156103f557600080fd5b506103fe6111f4565b6040518082815260200191505060405180910390f35b34801561042057600080fd5b506104296112bc565b6040518082815260200191505060405180910390f35b34801561044b57600080fd5b506104546112c2565b604051808215151515815260200191505060405180910390f35b34801561047a57600080fd5b506104836112d4565b005b6104b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061058a565b005b3480156104c757600080fd5b506104fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061134c565b005b34801561050a57600080fd5b506105136115c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61055d6115ee565b005b34801561056b57600080fd5b50610574611692565b6040518082815260200191505060405180910390f35b60008060008060008060008060008060009054906101000a900460ff161515156105b357600080fd5b6000341115156105c257600080fd5b6105cb8a610c9c565b98506000891115156105dc57600080fd5b6105e4611692565b97506000881115156105f557600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374eedd466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d60208110156106a557600080fd5b810190808051906020019092919050505096506106c06111f4565b95506000861115156106d157600080fd5b6005546106e38a6402540be400611785565b8115156106ec57fe5b0494506000851115156106fe57600080fd5b85610709348a611785565b81151561071257fe5b04935060008411151561072457600080fd5b6000925060009150848410151561076a5788925061076361075d61074b60646004546117b8565b8781151561075557fe5b046064611785565b866117b8565b91506107b6565b6402540be40061077c85600554611785565b81151561078557fe5b0492506107b36107ad61079b60646004546117b8565b868115156107a557fe5b046064611785565b856117b8565b91505b6000831115156107c557600080fd5b6000821115156107d457600080fd5b83821015156107e257600080fd5b8642101561081157876107f58388611785565b8115156107fe57fe5b04905061080c8a82856117d1565b61081e565b61081d8a858486611b3c565b5b8973ffffffffffffffffffffffffffffffffffffffff167fad415bc1173babf1b985ee70c6b9bb8d9768d0b96895bf400232446553d4327c8584868c8b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a250505050505050505050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092e5780601f106109035761010080835404028352916020019161092e565b820191906000526020600020905b81548152906001019060200180831161091157829003601f168201915b505050505081565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610a4e57600080fd5b505af1158015610a62573d6000803e3d6000fd5b505050506040513d6020811015610a7857600080fd5b81019080805190602001909291905050509150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610b6a57600080fd5b505af1158015610b7e573d6000803e3d6000fd5b505050506040513d6020811015610b9457600080fd5b8101908080519060200190929190505050905080821115610bb757809250610bbb565b8192505b505090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c5857600080fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610d9257600080fd5b505af1158015610da6573d6000803e3d6000fd5b505050506040513d6020811015610dbc57600080fd5b81019080805190602001909291905050509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e8c57600080fd5b505af1158015610ea0573d6000803e3d6000fd5b505050506040513d6020811015610eb657600080fd5b8101908080519060200190929190505050905080821115610ed957809250610edd565b8192505b5050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4057600080fd5b60016000806101000a81548160ff021916908315150217905550565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050506040513d602081101561109357600080fd5b8101908080519060200190929190505050905090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112b57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631811115151561115157600080fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111b9573d6000803e3d6000fd5b507f9a5a8a32afd899e7f95003c6e21c9fab2d50e11992439d14472229180c60c7aa816040518082815260200191505060405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa0d80fc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561127c57600080fd5b505af1158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b8101908080519060200190929190505050905090565b60055481565b6000809054906101000a900460ff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133057600080fd5b60008060006101000a81548160ff021916908315150217905550565b600080600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ab57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156113e757600080fd5b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561148557600080fd5b505af1158015611499573d6000803e3d6000fd5b505050506040513d60208110156114af57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505050506040513d60208110156115b157600080fd5b810190808051906020019092919050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164a57600080fd5b60003411151561165957600080fd5b7ff53d9d58a7ff16a2e1360446f1c4b5e81a427d3efd25615be081f4003662400a346040518082815260200191505060405180910390a1565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d1b464a6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050506040513d604081101561174657600080fd5b81019080805190602001909291908051906020019092919050505091509150604080519081016040528083815260200182815250600001519250505090565b600080828402905060008414806117a657508284828115156117a357fe5b04145b15156117ae57fe5b8091505092915050565b60008282111515156117c657fe5b818303905092915050565b6117db3483612247565b3073ffffffffffffffffffffffffffffffffffffffff16311015151561180057600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8430846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b505050506040513d602081101561192357600080fd5b810190808051906020019092919050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d6020811015611a4657600080fd5b810190808051906020019092919050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf72c10611aa03485612247565b856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b158015611b1e57600080fd5b505af1158015611b32573d6000803e3d6000fd5b5050505050505050565b343073ffffffffffffffffffffffffffffffffffffffff163110151515611b6257600080fd5b611b6c8383612247565b611b74610936565b111515611b8057600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b505050506040513d6020811015611ca357600080fd5b810190808051906020019092919050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611d9c57600080fd5b505af1158015611db0573d6000803e3d6000fd5b505050506040513d6020811015611dc657600080fd5b810190808051906020019092919050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630611e448787612247565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611efc57600080fd5b505af1158015611f10573d6000803e3d6000fd5b505050506040513d6020811015611f2657600080fd5b810190808051906020019092919050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611ffd57600080fd5b505af1158015612011573d6000803e3d6000fd5b505050506040513d602081101561202757600080fd5b810190808051906020019092919050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156120fe57600080fd5b505af1158015612112573d6000803e3d6000fd5b505050506040513d602081101561212857600080fd5b810190808051906020019092919050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663664a1ad66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156121c057600080fd5b505af11580156121d4573d6000803e3d6000fd5b505050506040513d60208110156121ea57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612240573d6000803e3d6000fd5b5050505050565b600080828401905083811015801561225f5750828110155b151561226757fe5b80915050929150505600a165627a7a72305820967dc0ff26267e8ca4064f79c8d0969dcf116fe166e9e1dd8ddafbf0cd4ad723002900000000000000000000000083dc8423170e95ee18b770bbdd6b3becb73c9c300000000000000000000000008d2da938d6f717eb5d84f68bb0eca7584c8faf2a",
  "constructorArguments": "00000000000000000000000083dc8423170e95ee18b770bbdd6b3becb73c9c300000000000000000000000008d2da938d6f717eb5d84f68bb0eca7584c8faf2a"
}