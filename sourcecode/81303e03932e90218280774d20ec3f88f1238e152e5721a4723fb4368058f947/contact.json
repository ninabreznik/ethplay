{
  "address": "0xab0b48266f362f82c9226b1ca5fb2c8b07ad01a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KassaNetwork",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-23\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract Ownable \n{\n    address public owner;\n    address public newOwner;\n    \n    constructor() public \n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() \n    {\n        require(msg.sender == owner, \"Can used only by owner\");\n        _;\n    }\n\n    function changeOwner(address _owner) onlyOwner public \n    {\n        require(_owner != 0, \"Please provide new owner address\");\n        newOwner = _owner;\n    }\n    \n    function confirmOwner() public \n    {\n        require(newOwner == msg.sender, \"Please call from new owner\");\n        owner = newOwner;\n        delete newOwner;\n    }\n}\n\nlibrary SafeMath \n{\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) \n    {\n        if (_a == 0) { return 0; }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) \n    {\n        return _a / _b;\n    }\n\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) \n    {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) \n    {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\ncontract KassaNetwork is Ownable \n{\n    using SafeMath for uint;\n\n    string  public constant name    = 'Kassa 100/40';\n    uint public startTimestamp = now;\n\n    uint public constant procKoef = 10000;\n    uint public constant perDay = 140;\n    uint public constant ownerFee = 700;\n    uint[3] public bonusReferrer = [600, 200, 100];\n\n    uint public constant procReturn = 9000;\n\n\n    uint public constant maxDepositDays = 100;\n\n\n    uint public constant minimalDeposit = 0.25 ether;\n    uint public constant maximalDepositStart = 15 ether;\n\n    uint public constant minimalDepositForBonusReferrer = 0.015 ether;\n\n    uint public constant dayLimitStart = 50 ether;\n\n\n    uint public constant progressProcKoef = 100;\n    uint public constant dayLimitProgressProc = 3;\n    uint public constant maxDepositProgressProc = 2;\n\n    uint public countInvestors = 0;\n    uint public totalInvest = 0;\n    uint public totalPenalty = 0;\n    uint public totalSelfInvest = 0;\n    uint public totalPaid = 0;\n\n    event LogInvestment(address _addr, uint _value, bytes _refData);\n    event LogTransfer(address _addr, uint _amount, uint _contactBalance);\n    event LogSelfInvestment(uint _value);\n\n    event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount);\n    event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres);\n\n    event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount);\n    event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals);\n\n    event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty);\n    event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty);\n    event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit);\n\n    event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay);\n    event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer);\n\n\n    struct User\n    {\n        uint balance;\n        uint paidInteres;\n        uint timestamp;\n        uint countReferrals;\n        uint earnOnReferrals;\n        uint paidReferrals;\n        address referrer;\n    }\n\n    mapping (address => User) private user;\n\n    mapping (uint => uint) private usedDeposit;\n\n    function getInteres(address addr) private view returns(uint interes) \n    {\n        uint diffDays = getNDay(user[addr].timestamp);\n\n        if( diffDays > maxDepositDays ) diffDays = maxDepositDays;\n\n        interes = user[addr].balance.mul(perDay).mul(diffDays).div(procKoef);\n    }\n\n    function getUser(address addr) public view returns(uint balance, uint timestamp, uint paidInteres, uint totalInteres, uint countReferrals, uint earnOnReferrals, uint paidReferrals, address referrer) \n    {\n        address a = addr;\n        return (\n            user[a].balance,\n            user[a].timestamp,\n            user[a].paidInteres,\n            getInteres(a),\n            user[a].countReferrals,\n            user[a].earnOnReferrals,\n            user[a].paidReferrals,\n            user[a].referrer\n        );\n    }\n\n    function getCurrentDay() public view returns(uint nday) \n    {\n        nday = getNDay(startTimestamp);\n    }\n\n    function getNDay(uint date) public view returns(uint nday) \n    {\n        uint diffTime = date > 0 ? now.sub(date) : 0;\n\n        nday = diffTime.div(24 hours);\n    }\n\n    function getCurrentDayDepositLimit() public view returns(uint limit) \n    {\n        uint nDay = getCurrentDay();\n\n        limit = getDayDepositLimit(nDay);\n    }\n\n    function calcProgress(uint start, uint proc, uint nDay) public pure returns(uint res) \n    {\n        uint s = start;\n\n        for (uint i = 0; i < nDay; i++)\n        {\n            s = s.mul(progressProcKoef + proc).div(progressProcKoef);\n        }\n\n        return s;\n    }\n\n    function getDayDepositLimit(uint nDay) public pure returns(uint limit) \n    {                         \n        return calcProgress(dayLimitStart, dayLimitProgressProc, nDay );\n    }\n\n    function getMaximalDeposit(uint nDay) public pure returns(uint limit) \n    {                 \n        return calcProgress(maximalDepositStart, maxDepositProgressProc, nDay );\n    }\n\n    function getCurrentDayRestDepositLimit() public view returns(uint restLimit) \n    {\n        uint nDay = getCurrentDay();\n\n        restLimit = getDayRestDepositLimit(nDay);\n    }\n\n    function getDayRestDepositLimit(uint nDay) public view returns(uint restLimit) \n    {\n        restLimit = getCurrentDayDepositLimit().sub(usedDeposit[nDay]);\n    }\n\n    function getCurrentMaximalDeposit() public view returns(uint maximalDeposit) \n    {\n        uint nDay = getCurrentDay();\n\n        maximalDeposit = getMaximalDeposit(nDay);\n    }\n\n    function() external payable \n    {\n        emit LogInvestment(msg.sender, msg.value, msg.data);\n        processPayment(msg.value, msg.data);\n    }\n\n    function processPayment(uint moneyValue, bytes refData) private\n    {\n        if (msg.sender == owner) \n        { \n            totalSelfInvest = totalSelfInvest.add(moneyValue);\n            emit LogSelfInvestment(moneyValue);\n            return; \n        }\n\n        if (moneyValue == 0) \n        { \n            preparePayment();\n            return; \n        }\n\n        if (moneyValue < minimalDeposit) \n        { \n            totalPenalty = totalPenalty.add(moneyValue);\n            emit LogMinimalDepositPayment(msg.sender, moneyValue, totalPenalty);\n            return; \n        }\n\n        address referrer = bytesToAddress(refData);\n\n        if (user[msg.sender].balance > 0 || \n            refData.length != 20 || \n            moneyValue > getCurrentMaximalDeposit() ||\n            referrer != owner &&\n              (\n                 user[referrer].balance <= 0 || \n                 referrer == msg.sender) \n              )\n        { \n            uint amount = moneyValue.mul(procReturn).div(procKoef);\n\n            totalPenalty = totalPenalty.add(moneyValue.sub(amount));\n\n            emit LogPenaltyPayment(msg.sender, user[msg.sender].balance, refData.length, referrer, user[referrer].balance, moneyValue, amount, totalPenalty);\n\n            msg.sender.transfer(amount);\n\n            return; \n        }\n\n\n\n        uint nDay = getCurrentDay();\n\n        uint restDepositPerDay = getDayRestDepositLimit(nDay);\n\n        uint addDeposit = moneyValue;\n\n\n        if (moneyValue > restDepositPerDay)\n        {\n            uint returnDeposit = moneyValue.sub(restDepositPerDay);\n\n            uint returnAmount = returnDeposit.mul(procReturn).div(procKoef);\n\n            addDeposit = addDeposit.sub(returnDeposit);\n\n            totalPenalty = totalPenalty.add(returnDeposit.sub(returnAmount));\n\n            emit LogExceededRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, returnDeposit, returnAmount, totalPenalty, addDeposit);\n\n            msg.sender.transfer(returnAmount);\n        }\n\n        usedDeposit[nDay] = usedDeposit[nDay].add(addDeposit);\n\n        emit LogUsedRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, addDeposit, usedDeposit[nDay]);\n\n\n        registerInvestor(referrer);\n        sendOwnerFee(addDeposit);\n        calcBonusReferrers(referrer, addDeposit);\n        updateInvestBalance(addDeposit);\n    }\n\n\n    function registerInvestor(address referrer) private \n    {\n        user[msg.sender].timestamp = now;\n        countInvestors++;\n\n        user[msg.sender].referrer = referrer;\n        user[referrer].countReferrals++;\n    }\n\n    function sendOwnerFee(uint addDeposit) private \n    {\n        transfer(owner, addDeposit.mul(ownerFee).div(procKoef));\n    }\n\n    function calcBonusReferrers(address referrer, uint addDeposit) private \n    {\n        for (uint i = 0; i < bonusReferrer.length && referrer != 0; i++)\n        {\n            uint amountReferrer = addDeposit.mul(bonusReferrer[i]).div(procKoef);\n\n            address nextReferrer = user[referrer].referrer;\n\n            emit LogCalcBonusReferrer(referrer, addDeposit, i, bonusReferrer[i], amountReferrer, nextReferrer);\n\n            preparePaymentReferrer(referrer, amountReferrer);\n\n            referrer = nextReferrer;\n        }\n    }\n\n\n    function preparePaymentReferrer(address referrer, uint amountReferrer) private \n    {\n        user[referrer].earnOnReferrals = user[referrer].earnOnReferrals.add(amountReferrer);\n\n        uint totalReferrals = user[referrer].earnOnReferrals;\n        uint paidReferrals = user[referrer].paidReferrals;\n\n\n        if (totalReferrals >= paidReferrals.add(minimalDepositForBonusReferrer)) \n        {\n            uint amount = totalReferrals.sub(paidReferrals);\n\n            user[referrer].paidReferrals = user[referrer].paidReferrals.add(amount);\n\n            emit LogPreparePaymentReferrer(referrer, totalReferrals, paidReferrals, amount);\n\n            transfer(referrer, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePaymentReferrer(referrer, totalReferrals, paidReferrals);\n        }\n\n    }\n\n\n    function preparePayment() public \n    {\n        uint totalInteres = getInteres(msg.sender);\n        uint paidInteres = user[msg.sender].paidInteres;\n        if (totalInteres > paidInteres) \n        {\n            uint amount = totalInteres.sub(paidInteres);\n\n            emit LogPreparePayment(msg.sender, totalInteres, paidInteres, amount);\n\n            user[msg.sender].paidInteres = user[msg.sender].paidInteres.add(amount);\n            transfer(msg.sender, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePayment(msg.sender, totalInteres, paidInteres);\n        }\n    }\n\n    function updateInvestBalance(uint addDeposit) private \n    {\n        user[msg.sender].balance = user[msg.sender].balance.add(addDeposit);\n        totalInvest = totalInvest.add(addDeposit);\n    }\n\n    function transfer(address receiver, uint amount) private \n    {\n        if (amount > 0) \n        {\n            if (receiver != owner) { totalPaid = totalPaid.add(amount); }\n\n            uint balance = address(this).balance;\n\n            emit LogTransfer(receiver, amount, balance);\n\n            require(amount < balance, \"Not enough balance. Please retry later.\");\n\n            receiver.transfer(amount);\n        }\n    }\n\n    function bytesToAddress(bytes source) private pure returns(address addr) \n    {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n    function getTotals() public view returns(uint _maxDepositDays, \n                                             uint _perDay, \n                                             uint _startTimestamp, \n\n                                             uint _minimalDeposit, \n                                             uint _maximalDeposit, \n                                             uint[3] _bonusReferrer, \n                                             uint _minimalDepositForBonusReferrer, \n                                             uint _ownerFee, \n\n                                             uint _countInvestors, \n                                             uint _totalInvest, \n                                             uint _totalPenalty, \n//                                             uint _totalSelfInvest, \n                                             uint _totalPaid, \n\n                                             uint _currentDayDepositLimit, \n                                             uint _currentDayRestDepositLimit)\n    {\n        return (\n                 maxDepositDays,\n                 perDay,\n                 startTimestamp,\n\n                 minimalDeposit,\n                 getCurrentMaximalDeposit(),\n                 bonusReferrer,\n                 minimalDepositForBonusReferrer,\n                 ownerFee,\n\n                 countInvestors,\n                 totalInvest,\n                 totalPenalty,\n//                 totalSelfInvest,\n                 totalPaid,\n\n                 getCurrentDayDepositLimit(),\n                 getCurrentDayRestDepositLimit()\n               );\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDepositDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDepositProgressProc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressProcKoef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preparePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalDepositStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"paidInteres\",\"type\":\"uint256\"},{\"name\":\"totalInteres\",\"type\":\"uint256\"},{\"name\":\"countReferrals\",\"type\":\"uint256\"},{\"name\":\"earnOnReferrals\",\"type\":\"uint256\"},{\"name\":\"paidReferrals\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procKoef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotals\",\"outputs\":[{\"name\":\"_maxDepositDays\",\"type\":\"uint256\"},{\"name\":\"_perDay\",\"type\":\"uint256\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_minimalDeposit\",\"type\":\"uint256\"},{\"name\":\"_maximalDeposit\",\"type\":\"uint256\"},{\"name\":\"_bonusReferrer\",\"type\":\"uint256[3]\"},{\"name\":\"_minimalDepositForBonusReferrer\",\"type\":\"uint256\"},{\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"name\":\"_countInvestors\",\"type\":\"uint256\"},{\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"name\":\"_totalPaid\",\"type\":\"uint256\"},{\"name\":\"_currentDayDepositLimit\",\"type\":\"uint256\"},{\"name\":\"_currentDayRestDepositLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSelfInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"proc\",\"type\":\"uint256\"},{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"calcProgress\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayLimitStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDepositForBonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayLimitProgressProc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPenalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMaximalDeposit\",\"outputs\":[{\"name\":\"maximalDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getMaximalDeposit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getNDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_refData\",\"type\":\"bytes\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_contactBalance\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogSelfInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogMinimalDepositPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentSenderDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerAdressLength\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentReferrerDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogPenaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_badDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_willDeposit\",\"type\":\"uint256\"}],\"name\":\"LogExceededRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_realDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usedDepositPerDay\",\"type\":\"uint256\"}],\"name\":\"LogUsedRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextReferrer\",\"type\":\"address\"}],\"name\":\"LogCalcBonusReferrer\",\"type\":\"event\"}]",
  "bytecode": "4260025560e0604052610258608090815260c860a052606460c0526200002990600390816200005b565b5060006006819055600781905560088190556009819055600a8190558054600160a060020a03191633179055620000c4565b826003810192821562000092579160200282015b8281111562000092578251829061ffff169055916020019190600101906200006f565b50620000a0929150620000a4565b5090565b620000c191905b80821115620000a05760008155600101620000ab565b90565b61178280620000d46000396000f3006080604052600436106101c05763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662a9f0d4811461027057806306fdde031461029a578063174b9fa4146103245780631dec55b3146103395780632319bb2a1461035157806330df4b3c146103665780633636080b1461037b5780633e6968b61461039057806342a64f1c146103a557806343ccee12146103515780634733ec90146103ba578063616b40e3146103cf5780636189168b146103e45780636f77926b146103f95780636fe4d97a14610464578063760bb6d11461047957806384e10a901461048e5780638c85ec66146105395780638da5cb5b1461054e5780638f25159c1461057f5780638fa0237814610597578063959cf2ac146105ac578063a6f9dae1146105c1578063afe76ab1146105e2578063affe06c514610600578063bd9b6d8614610615578063c791fbb71461062a578063d4ee1d901461063f578063d5b2a01a14610654578063d74319e014610669578063e6af61c81461067e578063e6fd48bc14610693578063e7b0f666146106a8578063fa212d37146106bd578063fc9ee045146106d2578063fe16ed13146106ea575b7f99e2484dc464ddf092d71c20d980a682dbf05009ca71f79590e2d3f5675efe5f33346000366040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a161026e346000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610702945050505050565b005b34801561027c57600080fd5b50610288600435610b66565b60408051918252519081900360200190f35b3480156102a657600080fd5b506102af610b93565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e95781810151838201526020016102d1565b50505050905090810190601f1680156103165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033057600080fd5b50610288610bca565b34801561034557600080fd5b50610288600435610be6565b34801561035d57600080fd5b50610288610bf9565b34801561037257600080fd5b50610288610bfe565b34801561038757600080fd5b50610288610c04565b34801561039c57600080fd5b50610288610c0a565b3480156103b157600080fd5b50610288610c1c565b3480156103c657600080fd5b5061026e610c21565b3480156103db57600080fd5b50610288610d38565b3480156103f057600080fd5b50610288610d3e565b34801561040557600080fd5b5061041a600160a060020a0360043516610d4a565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152600160a060020a031660e083015251908190036101000190f35b34801561047057600080fd5b50610288610e5c565b34801561048557600080fd5b50610288610e68565b34801561049a57600080fd5b506104a3610e6e565b604051808f81526020018e81526020018d81526020018c81526020018b81526020018a600360200280838360005b838110156104e95781810151838201526020016104d1565b505050509050018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b34801561054557600080fd5b50610288610f26565b34801561055a57600080fd5b50610563610f3c565b60408051600160a060020a039092168252519081900360200190f35b34801561058b57600080fd5b50610288600435610f4b565b3480156105a357600080fd5b50610288610f62565b3480156105b857600080fd5b50610288610f68565b3480156105cd57600080fd5b5061026e600160a060020a0360043516610f6d565b3480156105ee57600080fd5b5061028860043560243560443561105e565b34801561060c57600080fd5b50610288611095565b34801561062157600080fd5b5061026e6110a2565b34801561063657600080fd5b50610288611138565b34801561064b57600080fd5b50610563611143565b34801561066057600080fd5b50610288611152565b34801561067557600080fd5b50610288611158565b34801561068a57600080fd5b5061028861115d565b34801561069f57600080fd5b50610288611163565b3480156106b457600080fd5b50610288611169565b3480156106c957600080fd5b5061028861116f565b3480156106de57600080fd5b50610288600435611181565b3480156106f657600080fd5b50610288600435611197565b60008054819081908190819081908190600160a060020a031633141561077057600954610735908a63ffffffff6111d516565b600955604080518a815290517f3585958531221565c883e7a8ba901a55ac36449b6bfe60a9dbe534db7c21f0f59181900360200190a1610b5b565b8815156107845761077f610c21565b610b5b565b6703782dace9d900008910156107f1576008546107a7908a63ffffffff6111d516565b600881905560408051338152602081018c905280820192909252517f3654ed221c1eb7340b328ed3408f7cc02d706326934eec02698a25eda9ffcb5c9181900360600190a1610b5b565b6107fa886111e2565b336000908152600b6020526040812054919850108061081b57508751601414155b8061082c575061082961116f565b89115b806108795750600054600160a060020a038881169116148015906108795750600160a060020a0387166000908152600b60205260408120541115806108795750600160a060020a03871633145b15610985576108a26127106108968b61232863ffffffff6111e916565b9063ffffffff61121216565b95506108c66108b78a8863ffffffff61122716565b6008549063ffffffff6111d516565b6008819055336000818152600b60209081526040808320548d51600160a060020a038e168086529483902054835196875293860191909152848201526060840192909252608083015260a082018c905260c0820189905260e082019290925290517f5e8cddbb251d1b21cc4db87b9d1157cc97d91a4439b41aa4d01567dc8060a6ed918190036101000190a1604051339087156108fc029088906000818181858888f1935050505015801561097f573d6000803e3d6000fd5b50610b5b565b61098d610c0a565b945061099885610b66565b935088925083891115610a9e576109b5898563ffffffff61122716565b91506109cf6127106108968461232863ffffffff6111e916565b90506109e1838363ffffffff61122716565b92506109f66108b7838363ffffffff61122716565b600881905560408051338152600160a060020a038a1660208201528082018c9052606081018890526080810187905260a0810185905260c0810184905260e08101929092526101008201859052517f17eaccf7da42210592a965bb9e884cd2664e53ad0faaff1e8d8439052f17b0a9918190036101200190a1604051339082156108fc029083906000818181858888f19350505050158015610a9c573d6000803e3d6000fd5b505b6000858152600c6020526040902054610abd908463ffffffff6111d516565b6000868152600c60209081526040918290208390558151338152600160a060020a038b16918101919091528082018c9052606081018890526080810187905260a0810186905260c0810192909252517f761add23ed054f41556a04f26f05e19442fefa49e127dde0e9bb6a385976d2909181900360e00190a1610b3f87611239565b610b4883611297565b610b5287846112c7565b610b5b836113c0565b505050505050505050565b6000818152600c6020526040812054610b8d90610b81610bca565b9063ffffffff61122716565b92915050565b60408051808201909152600c81527f4b61737361203130302f34300000000000000000000000000000000000000000602082015281565b600080610bd5610c0a565b9050610be081610f4b565b91505090565b600381818110610bf257fe5b0154905081565b606481565b61232881565b60065481565b6000610c17600254611197565b905090565b600281565b6000806000610c2f33611409565b336000908152600b6020526040902060010154909350915081831115610cf257610c5f838363ffffffff61122716565b60408051338152602081018690528082018590526060810183905290519192507f57c51513ed5ecca02e35c0a9c73f9031060fffb0ee67e5ba2ae3a7876bcc4660919081900360800190a1336000908152600b6020526040902060010154610ccd908263ffffffff6111d516565b336000818152600b6020526040902060010191909155610ced9082611483565b610d33565b604080513381526020810185905280820184905290517f269d6e9105178515061a0776774390056c694e459c03ba0bcf1fe366e44ca1239181900360600190a15b505050565b60075481565b67d02ab486cedc000081565b600160a060020a0381166000908152600b602052604081208054600282015460019092015483928392839283928392839283928b9291610d8984611409565b600b600086600160a060020a0316600160a060020a0316815260200190815260200160002060030154600b600087600160a060020a0316600160a060020a0316815260200190815260200160002060040154600b600088600160a060020a0316600160a060020a0316815260200190815260200160002060050154600b600089600160a060020a0316600160a060020a0316815260200190815260200160002060060160009054906101000a9004600160a060020a03169850985098509850985098509850985050919395975091939597565b6703782dace9d9000081565b61271081565b6000806000806000610e7e611737565b6000806000806000806000806064608c6002546703782dace9d90000610ea261116f565b600366354a6ba7a180006102bc600654600754600854600a54610ec3610bca565b610ecb610f26565b604080516060810191829052908a9060039082845b815481526020019060010190808311610ee057505050505098509d509d509d509d509d509d509d509d509d509d509d509d509d509d50909192939495969798999a9b9c9d565b600080610f31610c0a565b9050610be081610b66565b600054600160a060020a031681565b6000610b8d6802b5e3af16b188000060038461105e565b60095481565b608c81565b600054600160a060020a03163314610fcf576040805160e560020a62461bcd02815260206004820152601660248201527f43616e2075736564206f6e6c79206279206f776e657200000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561102f576040805160e560020a62461bcd02815260206004820181905260248201527f506c656173652070726f76696465206e6577206f776e65722061646472657373604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600083815b8381101561108c5761108260646108968488830163ffffffff6111e916565b9150600101611063565b50949350505050565b6802b5e3af16b188000081565b600154600160a060020a03163314611104576040805160e560020a62461bcd02815260206004820152601a60248201527f506c656173652063616c6c2066726f6d206e6577206f776e6572000000000000604482015290519081900360640190fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b66354a6ba7a1800081565b600154600160a060020a031681565b6102bc81565b600381565b60085481565b60025481565b600a5481565b60008061117a610c0a565b9050610be0815b6000610b8d67d02ab486cedc000060028461105e565b600080600083116111a95760006111b9565b6111b9428463ffffffff61122716565b90506111ce816201518063ffffffff61121216565b9392505050565b81810182811015610b8d57fe5b6014015190565b60008215156111fa57506000610b8d565b5081810281838281151561120a57fe5b0414610b8d57fe5b6000818381151561121f57fe5b049392505050565b60008282111561123357fe5b50900390565b336000908152600b602052604080822042600282015560068054600190810182559101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03959095169485179055928252902060030180549091019055565b6000546112c490600160a060020a03166112bf612710610896856102bc63ffffffff6111e916565b611483565b50565b600080805b6003831080156112e45750600160a060020a03851615155b156113b95761130d6127106108966003868181106112fe57fe5b0154879063ffffffff6111e916565b600160a060020a038087166000908152600b60205260409020600601549193501690507f7e12d55f7c1ae1ac0321507b7d010aab01dc2ede8a458d9c22e24116c608c19b85858560038181811061136057fe5b015460408051600160a060020a03958616815260208101949094528381019290925260608301526080820186905291841660a082015290519081900360c00190a16113ab85836115be565b9350600190910190836112cc565b5050505050565b336000908152600b60205260409020546113e0908263ffffffff6111d516565b336000908152600b6020526040902055600754611403908263ffffffff6111d516565b60075550565b600160a060020a0381166000908152600b6020526040812060020154819061143090611197565b9050606481111561143f575060645b600160a060020a0383166000908152600b60205260409020546111ce906127109061089690849061147790608c63ffffffff6111e916565b9063ffffffff6111e916565b600080821115610d3357600054600160a060020a038481169116146114b957600a546114b5908363ffffffff6111d516565b600a555b5060408051600160a060020a038416815260208101839052303181830181905291517f18b0800c80490f5a2cdb8878912fa0744819cf79cb6bda0573399ceee459b66a9181900360600190a1808210611582576040805160e560020a62461bcd02815260206004820152602760248201527f4e6f7420656e6f7567682062616c616e63652e20506c6561736520726574727960448201527f206c617465722e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604051600160a060020a0384169083156108fc029084906000818181858888f193505050501580156115b8573d6000803e3d6000fd5b50505050565b600160a060020a0382166000908152600b6020526040812060040154819081906115ee908563ffffffff6111d516565b600160a060020a0386166000908152600b602052604090206004810182905560050154909350915061162d8266354a6ba7a1800063ffffffff6111d516565b83106116e757611643838363ffffffff61122716565b600160a060020a0386166000908152600b6020526040902060050154909150611672908263ffffffff6111d516565b600160a060020a0386166000818152600b60209081526040918290206005019390935580519182529181018590528082018490526060810183905290517e260dbd6ad9a7bc95a107bbd98c073edf3b09c4bec03b39f37d0dc88b8d34759181900360800190a16116e28582611483565b6113b9565b60408051600160a060020a03871681526020810185905280820184905290517f7d11a9324c66449899d527db8661c450d2049209ed0afc56d94d759f31da6e739181900360600190a15050505050565b60606040519081016040528060039060208202803883395091929150505600a165627a7a723058203d32b019cf97bdc64898df22a36f73c40e598f05a86a2cbb7da33ced3a6511320029"
}