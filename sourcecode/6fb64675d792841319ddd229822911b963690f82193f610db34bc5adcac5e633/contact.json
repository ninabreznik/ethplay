{
  "address": "0xb8dc4140d627d00e8a3c933660bc5ec83ba61718",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GoldToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-03\n*/\n\npragma solidity 0.4.21;\n\nlibrary SafeMath {\n    //internals\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c>=a && c>=b);\n        return c;\n    }\n}\n\ncontract Owned {\n    address public owner;\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function Owned() public {\n        owner = msg.sender;\n    }\n}\n\n/// @title Simple Tokens\n/// Simple Tokens that can be minted by their owner\ncontract SimpleToken is Owned {\n    using SafeMath for uint256;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This creates a mapping with all balances\n    mapping (address => uint256) public balanceOf;\n    // Another array with spending allowances\n    mapping (address => mapping (address => uint256)) public allowance;\n    // The total supply of the token\n    uint256 public totalSupply;\n\n    // Some variables for nice wallet integration\n    string public name = \"CryptoGold\";          // Set the name for display purposes\n    string public symbol = \"CGC\" ;             // Set the symbol for display purposes\n    uint8 public decimals = 6;                // Amount of decimals for display purposes\n\n    // Send coins\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != 0x0);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != 0x0);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // Approve that others can transfer _value tokens for the msg.sender\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n    \n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowance[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowance[msg.sender][_spender] = 0;\n        } else {\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n/// @title Multisignature Mintable Token - Allows minting of Tokens by a 2-2-Multisignature\n/// @author Henning Kopp - <[email protected]>\ncontract MultiSigMint is SimpleToken {\n\n    // Address change event\n    event newOwner(address indexed oldAddress, address indexed newAddress);\n    event newNotary(address indexed oldAddress, address indexed newAddress);    \n    event Mint(address indexed minter, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n\n    // The address of the notary\n    address public notary;\n\n    uint256 proposedMintAmnt = 0;\n    uint256 proposedBurnAmnt = 0;\n\n    address proposeOwner = 0x0;\n    address proposeNotary = 0x0;\n\n    function MultiSigMint(address _notary) public {\n        require(_notary != 0x0);\n        require(msg.sender != _notary);\n        notary = _notary;\n    }\n\n    modifier onlyNotary {\n        require(msg.sender == notary);\n        _;\n    }\n\n    /* Allows the owner to propose the minting of tokens.\n     * tokenamount is the amount of tokens to be minted.\n     */\n    function proposeMinting(uint256 _tokenamount) external onlyOwner returns (bool) {\n        require(_tokenamount > 0);\n        proposedMintAmnt = _tokenamount;\n        return true;\n    }\n\n    /* Allows the notary to confirm the minting of tokens.\n     * tokenamount is the amount of tokens to be minted.\n     */\n    function confirmMinting(uint256 _tokenamount) external onlyNotary returns (bool) {\n        if (_tokenamount == proposedMintAmnt) {\n            proposedMintAmnt = 0; // reset the amount\n            balanceOf[owner] = balanceOf[owner].add(_tokenamount);\n            totalSupply = totalSupply.add(_tokenamount);\n            emit Mint(owner, _tokenamount);\n            emit Transfer(0x0, owner, _tokenamount);\n            return true;\n        } else {\n            proposedMintAmnt = 0; // reset the amount\n            return false;\n        }\n    }\n\n    /* Allows the owner to propose the burning of tokens.\n     * tokenamount is the amount of tokens to be burned.\n     */\n    function proposeBurning(uint256 _tokenamount) external onlyOwner returns (bool) {\n        require(_tokenamount > 0);\n        proposedBurnAmnt = _tokenamount;\n        return true;\n    }\n\n    /* Allows the notary to confirm the burning of tokens.\n     * tokenamount is the amount of tokens to be burning.\n     */\n    function confirmBurning(uint256 _tokenamount) external onlyNotary returns (bool) {\n        if (_tokenamount == proposedBurnAmnt) {\n            proposedBurnAmnt = 0; // reset the amount\n            balanceOf[owner] = balanceOf[owner].sub(_tokenamount);\n            totalSupply = totalSupply.sub(_tokenamount);\n            emit Burn(owner, _tokenamount);\n            emit Transfer(owner, 0x0, _tokenamount);\n            return true;\n        } else {\n            proposedBurnAmnt = 0; // reset the amount\n            return false;\n        }\n    }\n\n    /* Owner can propose an address change for owner\n    The notary has to confirm that address\n    */\n    function proposeNewOwner(address _newAddress) external onlyOwner {\n        proposeOwner = _newAddress;\n    }\n    function confirmNewOwner(address _newAddress) external onlyNotary returns (bool) {\n        if (proposeOwner == _newAddress && _newAddress != 0x0 && _newAddress != notary) {\n            proposeOwner = 0x0;\n            emit newOwner(owner, _newAddress);\n            owner = _newAddress;\n            return true;\n        } else {\n            proposeOwner = 0x0;\n            return false;\n        }\n    }\n    \n    /* Owner can propose an address change for notary\n    The notary has to confirm that address\n    */\n    function proposeNewNotary(address _newAddress) external onlyOwner {\n        proposeNotary = _newAddress;\n    }\n    function confirmNewNotary(address _newAddress) external onlyNotary returns (bool) {\n        if (proposeNotary == _newAddress && _newAddress != 0x0 && _newAddress != owner) {\n            proposeNotary = 0x0;\n            emit newNotary(notary, _newAddress);\n            notary = _newAddress;\n            return true;\n        } else {\n            proposeNotary = 0x0;\n            return false;\n        }\n    }\n}\n\n/// @title Contract with fixed parameters for deployment\n/// @author Henning Kopp - <[email protected]>\ncontract GoldToken is MultiSigMint {\n    function GoldToken(address _notary) public MultiSigMint(_notary) {}\n}",
  "bytecode": "606060405260408051908101604052600a81527f43727970746f476f6c6400000000000000000000000000000000000000000000602082015260049080516200004d9291602001906200016e565b5060408051908101604052600381527f434743000000000000000000000000000000000000000000000000000000000060208201526005908051620000979291602001906200016e565b506006805460ff1916811790556000600781905560085560098054600160a060020a0319908116909155600a805490911690553415620000d657600080fd5b604051602080620011188339810160405280805160008054600160a060020a03191633600160a060020a0390811691909117909155909250829150811615156200011f57600080fd5b80600160a060020a031633600160a060020a0316141515156200014157600080fd5b60068054600160a060020a039092166101000261010060a860020a03199092169190911790555062000213565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b157805160ff1916838001178555620001e1565b82800160010185558215620001e1579182015b82811115620001e1578251825591602001919060010190620001c4565b50620001ef929150620001f3565b5090565b6200021091905b80821115620001ef5760008155600101620001fa565b90565b610ef580620002236000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610121578063095ea7b3146101ab5780630c402ed8146101e15780631649d72b146101f757806318160ddd1461021857806323b872dd1461023d578063313ce567146102655780635af0649e1461028e57806366188463146102ad57806370a08231146102cf578063744c7c7f146102ee57806383fb42ba146103045780638da5cb5b1461031a57806395d89b41146103495780639d54c79d1461035c578063a9059cbb1461036f578063b1f8100d14610391578063b51d93eb146103b0578063d73dd623146103cf578063dd62ed3e146103f1578063e7b9db8d14610416575b600080fd5b341561012c57600080fd5b61013461042c565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610170578082015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b657600080fd5b6101cd600160a060020a03600435166024356104ca565b604051901515815260200160405180910390f35b34156101ec57600080fd5b6101cd600435610536565b341561020257600080fd5b610216600160a060020a0360043516610644565b005b341561022357600080fd5b61022b610681565b60405190815260200160405180910390f35b341561024857600080fd5b6101cd600160a060020a0360043581169060243516604435610687565b341561027057600080fd5b6102786107a0565b60405160ff909116815260200160405180910390f35b341561029957600080fd5b6101cd600160a060020a03600435166107a9565b34156102b857600080fd5b6101cd600160a060020a03600435166024356108ae565b34156102da57600080fd5b61022b600160a060020a03600435166109a8565b34156102f957600080fd5b6101cd6004356109ba565b341561030f57600080fd5b6101cd6004356109ec565b341561032557600080fd5b61032d610a1e565b604051600160a060020a03909116815260200160405180910390f35b341561035457600080fd5b610134610a2d565b341561036757600080fd5b61032d610a98565b341561037a57600080fd5b6101cd600160a060020a0360043516602435610aac565b341561039c57600080fd5b610216600160a060020a0360043516610b70565b34156103bb57600080fd5b6101cd600160a060020a0360043516610bad565b34156103da57600080fd5b6101cd600160a060020a0360043516602435610ca0565b34156103fc57600080fd5b61022b600160a060020a0360043581169060243516610d44565b341561042157600080fd5b6101cd600435610d61565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065460009033600160a060020a03908116610100909204161461055957600080fd5b60075482141561063657600060078190558054600160a060020a0316815260016020526040902054610591908363ffffffff610e6d16565b60008054600160a060020a03168152600160205260409020556003546105bd908363ffffffff610e6d16565b600355600054600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858360405190815260200160405180910390a260008054600160a060020a031690600080516020610eaa8339815191528460405190815260200160405180910390a350600161063f565b50600060078190555b919050565b60005433600160a060020a0390811691161461065f57600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b60035481565b6000600160a060020a038316151561069e57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220546106d5908363ffffffff610e9416565b600160a060020a03808616600081815260026020908152604080832033909516835293815283822094909455908152600190925290205461071c908363ffffffff610e9416565b600160a060020a038086166000908152600160205260408082209390935590851681522054610751908363ffffffff610e6d16565b600160a060020a0380851660008181526001602052604090819020939093559190861690600080516020610eaa8339815191529085905190815260200160405180910390a35060019392505050565b60065460ff1681565b60065460009033600160a060020a0390811661010090920416146107cc57600080fd5b600a54600160a060020a0383811691161480156107f15750600160a060020a03821615155b801561080b5750600054600160a060020a03838116911614155b1561089657600a8054600160a060020a0319169055600654600160a060020a03838116916101009004167f7dc46f045eb336de346724d2924f3abbfd6cdaa174ead23abd8ff32709d2ea5f60405160405180910390a3506006805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a03841602179055600161063f565b50600a8054600160a060020a0319169055600061063f565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561090b57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610942565b61091b818463ffffffff610e9416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60016020526000908152604090205481565b6000805433600160a060020a039081169116146109d657600080fd5b600082116109e357600080fd5b50600755600190565b6000805433600160a060020a03908116911614610a0857600080fd5b60008211610a1557600080fd5b50600855600190565b600054600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c25780601f10610497576101008083540402835291602001916104c2565b6006546101009004600160a060020a031681565b6000600160a060020a0383161515610ac357600080fd5b600160a060020a033316600090815260016020526040902054610aec908363ffffffff610e9416565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b21908363ffffffff610e6d16565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610eaa8339815191529085905190815260200160405180910390a350600192915050565b60005433600160a060020a03908116911614610b8b57600080fd5b60098054600160a060020a031916600160a060020a0392909216919091179055565b60065460009033600160a060020a039081166101009092041614610bd057600080fd5b600954600160a060020a038381169116148015610bf55750600160a060020a03821615155b8015610c145750600654600160a060020a038381166101009092041614155b15610c885760098054600160a060020a0319169055600054600160a060020a0383811691167ff2c0d168bd136fe68a71ccac22bbe4c7276800e64533d1d1e24fcea5af07bc8560405160405180910390a35060008054600160a060020a031916600160a060020a038316179055600161063f565b5060098054600160a060020a0319169055600061063f565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610cd8908363ffffffff610e6d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600260209081526000928352604080842090915290825290205481565b60065460009033600160a060020a039081166101009092041614610d8457600080fd5b600854821415610e6057600060088190558054600160a060020a0316815260016020526040902054610dbc908363ffffffff610e9416565b60008054600160a060020a0316815260016020526040902055600354610de8908363ffffffff610e9416565b600355600054600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a260008054600160a060020a0316600080516020610eaa8339815191528460405190815260200160405180910390a350600161063f565b506000600881905561063f565b6000828201838110801590610e825750828110155b1515610e8d57600080fd5b9392505050565b600082821115610ea357600080fd5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208525b52e70d547cb373f789a1dcf3e351930dd3bfa51568c51a825e4da83a9ab002900000000000000000000000000546f291fd830e626a9799d34946706a8c7bf50",
  "constructorArguments": "00000000000000000000000000546f291fd830e626a9799d34946706a8c7bf50"
}