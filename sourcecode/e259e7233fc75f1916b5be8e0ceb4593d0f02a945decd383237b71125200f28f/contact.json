{
  "address": "0xb9843e5de0f37d1e22c8075e5814e13565fe7c22",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Lucky Block Network Token",
  "contractName": "LBNToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\n/**\n * Lucky Block Network Project Smart-Contracts\n * @authors https://grox.solutions\n */\n\npragma solidity 0.5.7;\n\nlibrary SafeMath {\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\ncontract MultiOwnable {\n\n    mapping (address => bool) _owner;\n\n    modifier onlyOwner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n    function isOwner(address addr) public view returns (bool) {\n        return _owner[addr];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * See https://eips.ethereum.org/EIPS/eip-20\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    function pause() public whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n/**\n * @title ApproveAndCall Interface.\n * @dev ApproveAndCall system hepls to communicate with smart-contracts.\n */\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\n}\n\n/**\n * @title The main project contract.\n * @author https://grox.solutions\n */\ncontract LBNToken is ERC20Pausable, MultiOwnable {\n\n    // name of the token\n    string private _name = \"Lucky Block Network\";\n    // symbol of the token\n    string private _symbol = \"LBN\";\n    // decimals of the token\n    uint8 private _decimals = 18;\n\n    // initial supply\n    uint256 public constant INITIAL_SUPPLY = 99990000 * (10 ** 18);\n\n    // an amount of votes required to process an action\n    uint8 public consensusValue = 1;\n\n    // struct for proposals\n    struct Proposal {\n        // amount of votes\n        uint8 votes;\n        // count of proposals\n        uint256 count;\n        // double mapping to prevent the error of repeating the same proposal\n        mapping (uint256 => mapping (address => bool)) voted;\n    }\n\n    // mapping to implement muptiple owners\n    mapping (address => bool) _owner;\n\n    // boolean value if minting is finished of not\n    bool public mintingIsFinished;\n\n    /**\n     * @dev Throws if called while minting is finished.\n     */\n    modifier isNotFinished {\n        require(!mintingIsFinished);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n    // events\n    event LogProposal(string indexed method, address param1, address param2, uint256 param3, string param4, address indexed voter, uint8 votes, uint8 consensusValue);\n    event LogAction(string indexed method, address param1, address param2, uint256 param3, string param4);\n\n    /**\n      * @dev constructor function that is called once at deployment of the contract.\n      * @param owners 5 initial owners to set.\n      * @param recipient Address to receive initial supply.\n      */\n    constructor(address[] memory owners, address recipient) public {\n\n        for (uint8 i = 0; i < 5; i++) {\n            _owner[owners[i]] = true;\n        }\n\n        _mint(recipient, INITIAL_SUPPLY);\n\n    }\n\n    /**\n      * @dev Internal function that process voting in a given proposal, returns `true` if the voting has succesfully ended.\n      * @param props The proposal storage.\n      * @notice Every next parameter is given only to emit events.\n      * @param method Name of the called method.\n      * @param param1 First address parameter.\n      * @param param2 Second address parameter.\n      * @param param3 uint256 parameter.\n      * @param param4 string parameter.\n      */\n    function _vote(Proposal storage props, string memory method, address param1, address param2, uint256 param3, string memory param4) internal returns(bool) {\n\n        // if that is the new proposal add a number to count to prevent the error of repeating the same proposal\n        if (props.votes == 0) {\n            props.count++;\n        }\n\n        // if msg.sender hasn't voted yet, do this\n        if (!props.voted[props.count][msg.sender]) {\n            props.votes++;\n            props.voted[props.count][msg.sender] = true;\n            emit LogProposal(method, param1, param2, param3, param4, msg.sender, props.votes, consensusValue);\n        }\n\n        // if an amount of votes is equal or more than consensusValue renew the proposal and return `true` to process the action\n        if (props.votes >= consensusValue) {\n            props.votes = 0;\n            emit LogAction(method, param1, param2, param3, param4);\n            return true;\n        }\n\n    }\n\n    /**\n     * @dev Storage for owner proposals.\n     */\n    mapping (address => mapping(address => Proposal)) public ownerProp;\n\n    /**\n     * @dev Vote to transfer control of the contract from one account to another.\n     * @param previousOwner The address to remove ownership from.\n     * @param newOwner The address to transfer ownership to.\n     * @notice There are only 5 owners of this contract\n     */\n    function changeOwner(address previousOwner, address newOwner) public onlyOwner {\n        require(isOwner(previousOwner) && !isOwner(newOwner));\n\n        if (_vote(ownerProp[previousOwner][newOwner], \"changeOwner\", previousOwner, newOwner, 0, \"\")) {\n            _owner[previousOwner] = false;\n            _owner[newOwner] = true;\n        }\n\n    }\n\n    /**\n     * @dev Storage for consensus proposals.\n     */\n    mapping (uint8 => Proposal) public consProp;\n\n    /**\n     * @dev Vote to change the consensusValue.\n     * @param newConsensusValue new value.\n     */\n    function setConsensusValue(uint8 newConsensusValue) public onlyOwner {\n\n        if (_vote(consProp[newConsensusValue], \"setConsensusValue\", address(0), address(0), newConsensusValue, \"\")) {\n            consensusValue = newConsensusValue;\n        }\n\n    }\n\n    /**\n     * @dev Storage for minting finalize proposal.\n     */\n    Proposal public finMintProp;\n\n    /**\n     * @dev Vote to stop minting of tokens forever.\n     */\n    function finalizeMinting() public onlyOwner {\n\n        if (_vote(finMintProp, \"finalizeMinting\", address(0), address(0), 0, \"\")) {\n            mintingIsFinished = true;\n        }\n\n    }\n\n    /**\n     * @dev Storage for mint proposals.\n     */\n    mapping (address => mapping (uint256 => mapping (string => Proposal))) public mintProp;\n\n    /**\n     * @dev Vote to mint an amount of the token and assigns it to\n     * an account.\n     * @param to The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function mint(address to, uint256 value) public isNotFinished onlyOwner returns (bool) {\n\n        if (_vote(mintProp[to][value][\"mint\"], \"mint\", to, address(0), value, \"\")) {\n            _mint(to, value);\n        }\n\n    }\n\n    /**\n     * @dev Storage for burn proposals.\n     */\n    mapping (address => mapping (uint256 => mapping (string => Proposal))) public burnProp;\n\n\n    /**\n     * @dev Vote to burn an amount of the token of a given\n     * account.\n     * @param from The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function burnFrom(address from, uint256 value) public onlyOwner {\n\n        if (_vote(burnProp[from][value][\"burnFrom\"], \"burnFrom\", from, address(0), value, \"\")) {\n            _burn(from, value);\n        }\n\n    }\n\n    /**\n     * @dev Storage for pause proposals.\n     */\n    Proposal public pauseProp;\n\n    /**\n     * @dev Vote to pause any transfer of tokens.\n     * Called by a owner to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner {\n\n        if (_vote(pauseProp, \"pause\", address(0), address(0), 0, \"\")) {\n            super.pause();\n        }\n\n    }\n\n    /**\n     * @dev Storage for unpause proposals.\n     */\n    Proposal public unpauseProp;\n\n    /**\n     * @dev Vote to pause any transfer of tokens.\n     * Called by a owner to unpause, triggers normal state.\n     */\n    function unpause() public onlyOwner {\n\n        if (_vote(unpauseProp, \"unpause\", address(0), address(0), 0, \"\")) {\n            super.unpause();\n        }\n\n    }\n\n    /**\n     * @dev Storage for name proposals.\n     */\n    mapping (string => mapping (string => Proposal)) public nameProp;\n\n    /**\n    * @dev Change the name of the token.\n    * @param newName New name of the token.\n    */\n    function changeName(string memory newName) public onlyOwner {\n\n        if (_vote(nameProp[newName][\"name\"], \"changeName\", address(0), address(0), 0, newName)) {\n            _name = newName;\n        }\n\n    }\n\n    /**\n     * @dev Storage for symbol proposals.\n     */\n    mapping (string => mapping (string => Proposal)) public symbolProp;\n\n    /**\n    * @dev Change the symbol of the token.\n    * @param newSymbol New symbol of the token.\n    */\n    function changeSymbol(string memory newSymbol) public onlyOwner {\n\n        if (_vote(symbolProp[newSymbol][\"symbol\"], \"changeSymbol\", address(0), address(0), 0, newSymbol)) {\n            _symbol = newSymbol;\n        }\n\n    }\n\n    /**\n    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart contract.\n    * @param spender Address of smart contracts to work with.\n    * @param amount Amount of tokens to send.\n    * @param extraData Any extra data.\n    */\n    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\n        require(approve(spender, amount));\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n\n        return true;\n    }\n\n    /**\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\n    * @param ERC20Token Address of ERC20 token.\n    * @param recipient Account to receive tokens.\n    */\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n        IERC20(ERC20Token).transfer(recipient, amount);\n\n    }\n\n    /**\n    * @return true if `addr` is the owner of the contract.\n    */\n    function isOwner(address addr) public view returns (bool) {\n        return _owner[addr];\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n}",
  "bytecode": "60806040526040518060400160405280601381526020017f4c75636b7920426c6f636b204e6574776f726b000000000000000000000000008152506005908051906020019062000051929190620003c0565b506040518060400160405280600381526020017f4c424e0000000000000000000000000000000000000000000000000000000000815250600690805190602001906200009f929190620003c0565b506012600760006101000a81548160ff021916908360ff1602179055506001600760016101000a81548160ff021916908360ff160217905550348015620000e557600080fd5b506040516200361638038062003616833981018060405260408110156200010b57600080fd5b8101908080516401000000008111156200012457600080fd5b828101905060208101848111156200013b57600080fd5b81518560208202830111640100000000821117156200015957600080fd5b5050929190602001805190602001909291905050506000600360006101000a81548160ff02191690831515021790555060008090505b60058160ff1610156200021957600160086000858460ff1681518110620001b257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506200018f565b5062000237816a52b5b4c2e7431831c000006200023f60201b60201c565b50506200046f565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200027a57600080fd5b6200029681600254620003a060201b620030a71790919060201c565b600281905550620002f4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003a060201b620030a71790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080828401905083811015620003b657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040357805160ff191683800117855562000434565b8280016001018555821562000434579182015b828111156200043357825182559160200191906001019062000416565b5b50905062000443919062000447565b5090565b6200046c91905b80821115620004685760008160009055506001016200044e565b5090565b90565b613197806200047f6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370a0823111610125578063a3895fff116100ad578063cae9ca511161007c578063cae9ca5114610f65578063d3f7f7af14611020578063d908287914611051578063dd62ed3e146110a3578063f00d4b5d1461111b5761021c565b8063a3895fff14610cd8578063a457c2d714610d93578063a9059cbb14610df9578063b464e26a14610e5f5761021c565b806395d89b41116100f457806395d89b4114610a0e5780639b300d5714610a915780639dcbe8d214610c045780639fe49f1d14610c2f578063a0e3dfff14610c535761021c565b806370a08231146108fa57806379cc6790146109525780638456cb59146109a05780639456fbcc146109aa5761021c565b8063313ce567116101a857806340c10f191161017757806340c10f19146106865780634664f4c5146106ec5780635353a2d8146107f25780635c975abb146108ad5780636c619c31146108cf5761021c565b8063313ce567146105d057806337c75992146105f457806339509351146106165780633f4ba83a1461067c5761021c565b806323b872dd116101ef57806323b872dd1461049b57806326508269146105215780632c1c86d01461054c5780632f54bf6e146105565780632ff2e9dc146105b25761021c565b806306fdde0314610221578063095ea7b3146102a45780630ae006e91461030a57806318160ddd1461047d575b600080fd5b61022961117f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026957808201518184015260208101905061024e565b50505050905090810190601f1680156102965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f0600480360360408110156102ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611221565b604051808215151515815260200191505060405180910390f35b61045a6004803603604081101561032057600080fd5b810190808035906020019064010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184600183028401116401000000008311171561037157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103d457600080fd5b8201836020820111156103e657600080fd5b8035906020019184600183028401116401000000008311171561040857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061124f565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b6104856112b9565b6040518082815260200191505060405180910390f35b610507600480360360608110156104b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112c3565b604051808215151515815260200191505060405180910390f35b6105296112f3565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b610554611312565b005b6105986004803603602081101561056c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061139c565b604051808215151515815260200191505060405180910390f35b6105ba6113f2565b6040518082815260200191505060405180910390f35b6105d8611401565b604051808260ff1660ff16815260200191505060405180910390f35b6105fc611418565b604051808215151515815260200191505060405180910390f35b6106626004803603604081101561062c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061142b565b604051808215151515815260200191505060405180910390f35b610684611459565b005b6106d26004803603604081101561069c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d0565b604051808215151515815260200191505060405180910390f35b6107cf6004803603606081101561070257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561074957600080fd5b82018360208201111561075b57600080fd5b8035906020019184600183028401116401000000008311171561077d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506115f2565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b6108ab6004803603602081101561080857600080fd5b810190808035906020019064010000000081111561082557600080fd5b82018360208201111561083757600080fd5b8035906020019184600183028401116401000000008311171561085957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611653565b005b6108b561176e565b604051808215151515815260200191505060405180910390f35b6108d7611785565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b61093c6004803603602081101561091057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117a4565b6040518082815260200191505060405180910390f35b61099e6004803603604081101561096857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117ec565b005b6109a86118f0565b005b610a0c600480360360408110156109c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611967565b005b610a16611afd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a56578082015181840152602081019050610a3b565b50505050905090810190601f168015610a835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610be160048036036040811015610aa757600080fd5b8101908080359060200190640100000000811115610ac457600080fd5b820183602082011115610ad657600080fd5b80359060200191846001830284011164010000000083111715610af857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b5b57600080fd5b820183602082011115610b6d57600080fd5b80359060200191846001830284011164010000000083111715610b8f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b9f565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b610c0c611c09565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b610c37611c28565b604051808260ff1660ff16815260200191505060405180910390f35b610cb560048036036040811015610c6957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c3b565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b610d9160048036036020811015610cee57600080fd5b8101908080359060200190640100000000811115610d0b57600080fd5b820183602082011115610d1d57600080fd5b80359060200191846001830284011164010000000083111715610d3f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c79565b005b610ddf60048036036040811015610da957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d94565b604051808215151515815260200191505060405180910390f35b610e4560048036036040811015610e0f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dc2565b604051808215151515815260200191505060405180910390f35b610f4260048036036060811015610e7557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610ebc57600080fd5b820183602082011115610ece57600080fd5b80359060200191846001830284011164010000000083111715610ef057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611df0565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b61100660048036036060811015610f7b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610fc257600080fd5b820183602082011115610fd457600080fd5b80359060200191846001830284011164010000000083111715610ff657600080fd5b9091929391929390505050611e51565b604051808215151515815260200191505060405180910390f35b61104f6004803603602081101561103657600080fd5b81019080803560ff169060200190929190505050611f79565b005b6110806004803603602081101561106757600080fd5b81019080803560ff16906020019092919050505061201d565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b611105600480360360408110156110b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061204e565b6040518082815260200191505060405180910390f35b61117d6004803603604081101561113157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120d5565b005b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112175780601f106111ec57610100808354040283529160200191611217565b820191906000526020600020905b8154815290600101906020018083116111fa57829003601f168201915b5050505050905090565b6000600360009054906101000a900460ff161561123d57600080fd5b6112478383612293565b905092915050565b60178280516020810182018051848252602083016020850120818352809550505050505081805160208101820180518482526020830160208501208183528095505050505050600091509150508060000160009054906101000a900460ff16908060010154905082565b6000600254905090565b6000600360009054906101000a900460ff16156112df57600080fd5b6112ea8484846122aa565b90509392505050565b60118060000160009054906101000a900460ff16908060010154905082565b61131b3361139c565b61132457600080fd5b611379600c6040518060400160405280600f81526020017f66696e616c697a654d696e74696e67000000000000000000000000000000000081525060008060006040518060200160405280600081525061235b565b1561139a576001600960006101000a81548160ff0219169083151502179055505b565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6a52b5b4c2e7431831c0000081565b6000600760009054906101000a900460ff16905090565b600960009054906101000a900460ff1681565b6000600360009054906101000a900460ff161561144757600080fd5b6114518383612826565b905092915050565b6114623361139c565b61146b57600080fd5b6114c060146040518060400160405280600781526020017f756e70617573650000000000000000000000000000000000000000000000000081525060008060006040518060200160405280600081525061235b565b156114ce576114cd6128cb565b5b565b6000600960009054906101000a900460ff16156114ec57600080fd5b6114f53361139c565b6114fe57600080fd5b6115dc600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060405180807f6d696e7400000000000000000000000000000000000000000000000000000000815250600401905090815260200160405180910390206040518060400160405280600481526020017f6d696e7400000000000000000000000000000000000000000000000000000000815250856000866040518060200160405280600081525061235b565b156115ec576115eb8383612964565b5b92915050565b600f6020528260005260406000206020528160005260406000208180516020810182018051848252602083016020850120818352809550505050505060009250925050508060000160009054906101000a900460ff16908060010154905082565b61165c3361139c565b61166557600080fd5b61174e6017826040518082805190602001908083835b6020831061169e578051825260208201915060208101905060208303925061167b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060405180807f6e616d6500000000000000000000000000000000000000000000000000000000815250600401905090815260200160405180910390206040518060400160405280600a81526020017f6368616e67654e616d650000000000000000000000000000000000000000000081525060008060008661235b565b1561176b5780600590805190602001906117699291906130c6565b505b50565b6000600360009054906101000a900460ff16905090565b60148060000160009054906101000a900460ff16908060010154905082565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f53361139c565b6117fe57600080fd5b6118dc601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180807f6275726e46726f6d000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390206040518060400160405280600881526020017f6275726e46726f6d000000000000000000000000000000000000000000000000815250846000856040518060200160405280600081525061235b565b156118ec576118eb8282612ab6565b5b5050565b6118f93361139c565b61190257600080fd5b61195760116040518060400160405280600581526020017f706175736500000000000000000000000000000000000000000000000000000081525060008060006040518060200160405280600081525061235b565b1561196557611964612c08565b5b565b6119703361139c565b61197957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d6020811015611a2257600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b505050506040513d6020811015611ae657600080fd5b810190808051906020019092919050505050505050565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b955780601f10611b6a57610100808354040283529160200191611b95565b820191906000526020600020905b815481529060010190602001808311611b7857829003601f168201915b5050505050905090565b60188280516020810182018051848252602083016020850120818352809550505050505081805160208101820180518482526020830160208501208183528095505050505050600091509150508060000160009054906101000a900460ff16908060010154905082565b600c8060000160009054906101000a900460ff16908060010154905082565b600760019054906101000a900460ff1681565b600a602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060010154905082565b611c823361139c565b611c8b57600080fd5b611d746018826040518082805190602001908083835b60208310611cc45780518252602082019150602081019050602083039250611ca1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060405180807f73796d626f6c0000000000000000000000000000000000000000000000000000815250600601905090815260200160405180910390206040518060400160405280600c81526020017f6368616e676553796d626f6c000000000000000000000000000000000000000081525060008060008661235b565b15611d91578060069080519060200190611d8f9291906130c6565b505b50565b6000600360009054906101000a900460ff1615611db057600080fd5b611dba8383612ca2565b905092915050565b6000600360009054906101000a900460ff1615611dde57600080fd5b611de88383612d47565b905092915050565b60106020528260005260406000206020528160005260406000208180516020810182018051848252602083016020850120818352809550505050505060009250925050508060000160009054906101000a900460ff16908060010154905082565b6000611e5d8585611221565b611e6657600080fd5b8473ffffffffffffffffffffffffffffffffffffffff16638f4ffcb133863087876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015611f5557600080fd5b505af1158015611f69573d6000803e3d6000fd5b5050505060019050949350505050565b611f823361139c565b611f8b57600080fd5b611ff9600b60008360ff1660ff1681526020019081526020016000206040518060400160405280601181526020017f736574436f6e73656e73757356616c75650000000000000000000000000000008152506000808560ff166040518060200160405280600081525061235b565b1561201a5780600760016101000a81548160ff021916908360ff1602179055505b50565b600b6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6120de3361139c565b6120e757600080fd5b6120f08261139c565b801561210257506121008161139c565b155b61210b57600080fd5b6121d9600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405280600b81526020017f6368616e67654f776e6572000000000000000000000000000000000000000000815250848460006040518060200160405280600081525061235b565b1561228f576000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b60006122a0338484612d5e565b6001905092915050565b60006122b7848484612ebd565b612350843361234b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461308790919063ffffffff16565b612d5e565b600190509392505050565b6000808760000160009054906101000a900460ff1660ff16141561238e5786600101600081548092919060010191905055505b8660020160008860010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661265a5786600001600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff1602179055505060018760020160008960010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16866040518082805190602001908083835b602083106124e457805182526020820191506020810190506020830392506124c1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207fd44eb5e87f140d3d695aa20a03ed89578190ce0aa623897e8bf6c0a6f161a29e878787878d60000160009054906101000a900460ff16600760019054906101000a900460ff16604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001806020018460ff1660ff1681526020018360ff1660ff168152602001828103825285818151815260200191508051906020019080838360005b8381101561261a5780820151818401526020810190506125ff565b50505050905090810190601f1680156126475780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a35b600760019054906101000a900460ff1660ff168760000160009054906101000a900460ff1660ff161061281b5760008760000160006101000a81548160ff021916908360ff160217905550856040518082805190602001908083835b602083106126d957805182526020820191506020810190506020830392506126b6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f92956ea3c1dec66827036296e407e7986c13523738f99ffc31392d8bc3de545c86868686604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127d55780820151818401526020810190506127ba565b50505050905090810190601f1680156128025780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a26001905061281c565b5b9695505050505050565b60006128c133846128bc85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130a790919063ffffffff16565b612d5e565b6001905092915050565b600360009054906101000a900460ff166128e457600080fd5b6000600360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561299e57600080fd5b6129b3816002546130a790919063ffffffff16565b600281905550612a0a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130a790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612af057600080fd5b612b058160025461308790919063ffffffff16565b600281905550612b5c816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461308790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600360009054906101000a900460ff1615612c2257600080fd5b6001600360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000612d3d3384612d3885600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461308790919063ffffffff16565b612d5e565b6001905092915050565b6000612d54338484612ebd565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d9857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612dd257600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ef757600080fd5b612f48816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461308790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612fdb816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130a790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008282111561309657600080fd5b600082840390508091505092915050565b6000808284019050838110156130bc57600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061310757805160ff1916838001178555613135565b82800160010185558215613135579182015b82811115613134578251825591602001919060010190613119565b5b5090506131429190613146565b5090565b61316891905b8082111561316457600081600090555060010161314c565b5090565b9056fea165627a7a72305820af0231a5f5f9428004db6f73d38e7dc0a16b9476624d4223dd60ad11ef0689e6002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000000000000000000000000000000000000000000050000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000018a18c95daab159c22867ef554a5ed97aa9d5db00000000000000000000000006f5edb5944b8d11ea2291c523024329f0ca70fe9000000000000000000000000b86c3ed4560cf526c93e74c468ed52b24b0c666b0000000000000000000000003324453dc460dd61cba31df1de7fd1f578aa0bbb",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000000000000000000000000000000000000000000050000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000018a18c95daab159c22867ef554a5ed97aa9d5db00000000000000000000000006f5edb5944b8d11ea2291c523024329f0ca70fe9000000000000000000000000b86c3ed4560cf526c93e74c468ed52b24b0c666b0000000000000000000000003324453dc460dd61cba31df1de7fd1f578aa0bbb"
}