{
  "address": "0xc5e1510dfb5942f0af172af9c3ef3eef46e945c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TMRToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-05\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// Temroy presale token contract\n//\n// Deployed to : 0xD0FDf2ECd4CadE671a7EE1063393eC0eB90816FD\n// Symbol      : TMR\n// Name        : Temroy Token\n// Total supply: Gazillion\n// Decimals    : 18\n//\n// Enjoy.\n//\n// (c) by Moritz Neto & Daniel Bar with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract TMRToken is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    \n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function TMRToken() public {\n        symbol = \"TMR\";\n        name = \"TemroyToken\";\n        decimals = 18;\n        _totalSupply = 600000000000000000000000000;\n        balances[0x6d4a039ea6634f45f449c232a2a43f7c5ee4bc01] = _totalSupply;\n        Transfer(address(0), 0x6d4a039ea6634f45f449c232a2a43f7c5ee4bc01, _totalSupply);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n    \n    // ------------------------------------------------------------------------\n    // 2,000 TMR Tokens per 1 ETH\n    // 2,600 TMR Tokens per 1 ETH for 30% bonus\n    // ------------------------------------------------------------------------\n    function () public payable {\n        uint tokens;\n            tokens = msg.value * 2600;\n             require(balances[owner] >= tokens);\n\n        balances[owner] = balances[owner] - tokens;\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n        Transfer(owner, msg.sender, tokens);\n        owner.transfer(msg.value);\n    }\n\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633600160a060020a03161790556040805180820190915260038082527f544d520000000000000000000000000000000000000000000000000000000000602090920191825261007091600291610155565b5060408051808201909152600b8082527f54656d726f79546f6b656e00000000000000000000000000000000000000000060209092019182526100b591600391610155565b506004805460ff191660121790556b01f04ef12cb04cf1580000006005819055736d4a039ea6634f45f449c232a2a43f7c5ee4bc016000818152600660209081527f1891821c117231c7d70857123e11d1d7e3bacbb608a399cdf10c9d1b633f74ba8490556040805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101f0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019657805160ff19168380011785556101c3565b828001600101855582156101c3579182015b828111156101c35782518255916020019190600101906101a8565b506101cf9291506101d3565b5090565b6101ed91905b808211156101cf57600081556001016101d9565b90565b610bd3806101ff6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101dc578063095ea7b31461026657806318160ddd1461029e57806323b872dd146102c5578063313ce567146102ef5780633eaaf86b1461031a57806370a082311461032f57806379ba5097146103505780638da5cb5b1461036757806395d89b4114610398578063a9059cbb146103ad578063cae9ca51146103d1578063d4ee1d901461043a578063dc39d06d1461044f578063dd62ed3e14610473578063f2fde38b1461049a575b60008054600160a060020a0316815260066020526040902054610a2834029081111561011057600080fd5b60008054600160a060020a039081168252600660205260408083208054859003905533909116825290205461014590826104bb565b600160a060020a0333811660008181526006602090815260408083209590955590548451868152945192949316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a360008054604051600160a060020a03909116913480156108fc02929091818181858888f193505050501580156101d8573d6000803e3d6000fd5b5050005b3480156101e857600080fd5b506101f16104d1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022b578181015183820152602001610213565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027257600080fd5b5061028a600160a060020a036004351660243561055f565b604080519115158252519081900360200190f35b3480156102aa57600080fd5b506102b36105c9565b60408051918252519081900360200190f35b3480156102d157600080fd5b5061028a600160a060020a03600435811690602435166044356105fb565b3480156102fb57600080fd5b506103046106fc565b6040805160ff9092168252519081900360200190f35b34801561032657600080fd5b506102b3610705565b34801561033b57600080fd5b506102b3600160a060020a036004351661070b565b34801561035c57600080fd5b50610365610726565b005b34801561037357600080fd5b5061037c6107b2565b60408051600160a060020a039092168252519081900360200190f35b3480156103a457600080fd5b506101f16107c1565b3480156103b957600080fd5b5061028a600160a060020a0360043516602435610819565b3480156103dd57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028a948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108cc9650505050505050565b34801561044657600080fd5b5061037c610a4f565b34801561045b57600080fd5b5061028a600160a060020a0360043516602435610a5e565b34801561047f57600080fd5b506102b3600160a060020a0360043581169060243516610b1d565b3480156104a657600080fd5b50610365600160a060020a0360043516610b48565b818101828110156104cb57600080fd5b92915050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005540390565b600160a060020a03831660009081526006602052604081205461061e9083610b92565b600160a060020a038086166000908152600660209081526040808320949094556007815283822033909316825291909152205461065b9083610b92565b600160a060020a038086166000908152600760209081526040808320338516845282528083209490945591861681526006909152205461069b90836104bb565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b60055481565b600160a060020a031660009081526006602052604090205490565b60015433600160a060020a0390811691161461074157600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105575780601f1061052c57610100808354040283529160200191610557565b600160a060020a03331660009081526006602052604081205461083c9083610b92565b600160a060020a03338116600090815260066020526040808220939093559085168152205461086b90836104bb565b600160a060020a038085166000818152600660209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b600160a060020a03338116600081815260076020908152604080832094881680845294825280832087905580518781529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a383600160a060020a0316638f4ffcb1338530866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109de5781810151838201526020016109c6565b50505050905090810190601f168015610a0b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a2d57600080fd5b505af1158015610a41573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610a7a57600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b505050506040513d6020811015610b1457600080fd5b50519392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b6357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610ba157600080fd5b509003905600a165627a7a72305820ce7ce416a2caa6441d3899226cbaba8d975d37f15e192767a767a883a1a79f0a0029"
}