{
  "address": "0x44cfe3cb995f6a28855a21a960bce9d595f9434f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GeneralEthereumToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-12\n*/\n\npragma solidity ^0.4.25;\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     *  as the code is not actually created until after the constructor finishes.\n     * @param addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n\n}\n\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n    /**\n    * @dev Magic value to be returned upon successful reception of an NFT\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    */\n    bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n\n    /**\n    * @notice Handle the receipt of an NFT\n    * @dev The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer`. This function MAY throw to revert and reject the\n    * transfer. This function MUST use 50,000 gas or less. Return of other\n    * than the magic value MUST result in the transaction being reverted.\n    * Note: the contract address is always the message sender.\n    * @param _from The sending address\n    * @param _tokenId The NFT identifier which is being transfered\n    * @param _data Additional data with no specified format\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    */\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\n}\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n\n    function approve(address _to, uint256 _tokenId) public;\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n    function name() external view returns (string _name);\n    function symbol() external view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n\n\n}\n\n\n\n\ncontract ERC721Holder is ERC721Receiver {\n    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n        return ERC721_RECEIVED;\n    }\n}\n\n\n\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *   bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor() public {\n        _registerInterface(InterfaceId_ERC165);\n    }\n\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\n        return supportedInterfaces[_interfaceId];\n    }\n\n\n    /**\n     * @dev private method for registering an interface\n     */\n    function _registerInterface(bytes4 _interfaceId) internal {\n        require(_interfaceId != 0xffffffff);\n        supportedInterfaces[_interfaceId] = true;\n    }\n}\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *   bytes4(keccak256('balanceOf(address)')) ^\n     *   bytes4(keccak256('ownerOf(uint256)')) ^\n     *   bytes4(keccak256('approve(address,uint256)')) ^\n     *   bytes4(keccak256('getApproved(uint256)')) ^\n     *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n    /*\n     * 0x4f558e79 ===\n     *   bytes4(keccak256('exists(uint256)'))\n     */\n\n\n    using SafeMath for uint256;\n    using AddressUtils for address;\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) internal tokenOwner;\n\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) internal tokenApprovals;\n\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) internal ownedTokensCount;\n\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n\n    /**\n     * @dev Guarantees msg.sender is owner of the given token\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n     */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n\n    /**\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n     * @param _tokenId uint256 ID of the token to validate\n     */\n    modifier canTransfer(uint256 _tokenId) {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        _;\n    }\n\n\n    constructor() public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721);\n        _registerInterface(InterfaceId_ERC721Exists);\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownedTokensCount[_owner];\n    }\n\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param _tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param _tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * @dev The zero address indicates there is no approved address.\n     * @dev There can only be one approved address per token at a given time.\n     * @dev Can only be called by the token owner or an approved operator.\n     * @param _to address to be approved for the given token ID\n     * @param _tokenId uint256 ID of the token to be approved\n     */\n    function approve(address _to, uint256 _tokenId) public {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n        tokenApprovals[_tokenId] = _to;\n        emit Approval(owner, _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * @param _tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        return tokenApprovals[_tokenId];\n    }\n\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param _to operator address to set the approval\n     * @param _approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address _to, bool _approved) public {\n        require(_to != msg.sender);\n        operatorApprovals[msg.sender][_to] = _approved;\n        emit ApprovalForAll(msg.sender, _to, _approved);\n    }\n\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param _owner owner address which you want to query the approval of\n     * @param _operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n        return operatorApprovals[_owner][_operator];\n    }\n\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n        require(_from != address(0));\n        require(_to != address(0));\n\n\n        clearApproval(_from, _tokenId);\n        removeTokenFrom(_from, _tokenId);\n        addTokenTo(_to, _tokenId);\n\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\n        transferFrom(_from, _to, _tokenId);\n        // solium-disable-next-line arg-overflow\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n    }\n\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param _spender address of the spender to query\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *  is an operator of the owner, or is the owner of the token\n     */\n    function isApprovedOrOwner(\n        address _spender,\n        uint256 _tokenId\n    )\n        internal\n        view\n        returns (bool)\n    {\n        address owner = ownerOf(_tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (\n            _spender == owner ||\n            getApproved(_tokenId) == _spender ||\n            isApprovedForAll(owner, _spender)\n        );\n    }\n\n\n    /**\n     * @dev Internal function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to The address that will own the minted token\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n     */\n    function _mint(address _to, uint256 _tokenId) internal {\n        require(_to != address(0));\n        addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Internal function to clear current approval of a given token ID\n     * @dev Reverts if the given address is not indeed the owner of the token\n     * @param _owner owner of the token\n     * @param _tokenId uint256 ID of the token to be transferred\n     */\n    function clearApproval(address _owner, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _owner);\n        if (tokenApprovals[_tokenId] != address(0)) {\n            tokenApprovals[_tokenId] = address(0);\n            emit Approval(_owner, address(0), _tokenId);\n        }\n    }\n\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        require(tokenOwner[_tokenId] == address(0));\n        tokenOwner[_tokenId] = _to;\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n    }\n\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _from);\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n        tokenOwner[_tokenId] = address(0);\n    }\n\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param _from address representing the previous owner of the given token ID\n     * @param _to target address that will receive the tokens\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        internal\n        returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n\n\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n        _from, _tokenId, _data);\n        return (retval == ERC721_RECEIVED);\n    }\n}\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n     address public owner;\n     address public pendingOwner;\n     address public manager;\n\n\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n     /**\n     * @dev Throws if called by any account other than the owner.\n     */\n     modifier onlyOwner() {\n         require(msg.sender == owner);\n         _;\n     }\n\n\n     /**\n      * @dev Modifier throws if called by any account other than the manager.\n      */\n     modifier onlyManager() {\n         require(msg.sender == manager);\n         _;\n     }\n\n\n     /**\n      * @dev Modifier throws if called by any account other than the pendingOwner.\n      */\n     modifier onlyPendingOwner() {\n         require(msg.sender == pendingOwner);\n         _;\n     }\n\n\n     constructor() public {\n         owner = msg.sender;\n     }\n\n\n     /**\n      * @dev Allows the current owner to set the pendingOwner address.\n      * @param newOwner The address to transfer ownership to.\n      */\n     function transferOwnership(address newOwner) public onlyOwner {\n         pendingOwner = newOwner;\n     }\n\n\n     /**\n      * @dev Allows the pendingOwner address to finalize the transfer.\n      */\n     function claimOwnership() public onlyPendingOwner {\n         emit OwnershipTransferred(owner, pendingOwner);\n         owner = pendingOwner;\n         pendingOwner = address(0);\n     }\n\n\n     /**\n      * @dev Sets the manager address.\n      * @param _manager The manager address.\n      */\n     function setManager(address _manager) public onlyOwner {\n         require(_manager != address(0));\n         manager = _manager;\n     }\n\n\n }\n\n\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract GeneralEthereumToken is SupportsInterfaceWithLookup, ERC721, ERC721BasicToken, Ownable {\n\n\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n     * 0x780e9d63 ===\n     *   bytes4(keccak256('totalSupply()')) ^\n     *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n     *   bytes4(keccak256('tokenByIndex(uint256)'))\n     */\n\n\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *   bytes4(keccak256('name()')) ^\n     *   bytes4(keccak256('symbol()')) ^\n     *   bytes4(keccak256('tokenURI(uint256)'))\n     */\n\n\n    // Token name\n    string public name_ = \"GeneralEthereumToken\";\n\n\n    // Token symbol\n    string public symbol_ = \"GET\";\n    \n    uint public tokenIDCount = 0;\n\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) internal ownedTokens;\n\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) internal ownedTokensIndex;\n\n\n    // Array with all token ids, used for enumeration\n    uint256[] internal allTokens;\n\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) internal allTokensIndex;\n\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal tokenURIs;\n\n\n    struct Data{\n        string information;\n        string URL;\n    }\n    \n    mapping(uint256 => Data) internal tokenData;\n    /**\n     * @dev Constructor function\n     */\n    constructor() public {\n\n\n\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721Enumerable);\n        _registerInterface(InterfaceId_ERC721Metadata);\n    }\n\n\n    /**\n     * @dev External function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to address the beneficiary that will own the minted token\n     */\n    function mint(address _to) external onlyManager {\n        _mint(_to, tokenIDCount++);\n    }\n\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string) {\n        return name_;\n    }\n\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string) {\n        return symbol_;\n    }\n\n\n    function arrayOfTokensByAddress(address _holder) public view returns(uint256[]) {\n        return ownedTokens[_holder];\n    }\n\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * @dev Throws if the token ID does not exist. May return an empty string.\n     * @param _tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return tokenURIs[_tokenId];\n    }\n\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n     * @param _owner address owning the tokens list to be accessed\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n        require(_index < balanceOf(_owner));\n        return ownedTokens[_owner][_index];\n    }\n\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return allTokens.length;\n    }\n\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * @dev Reverts if the index is greater or equal to the total number of tokens\n     * @param _index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\n        require(_index < totalSupply());\n        return allTokens[_index];\n    }\n\n\n    /**\n     * @dev Internal function to set the token URI for a given token\n     * @dev Reverts if the token ID does not exist\n     * @param _tokenId uint256 ID of the token to set its URI\n     * @param _uri string URI to assign\n     */\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n        require(exists(_tokenId));\n        tokenURIs[_tokenId] = _uri;\n    }\n\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        super.addTokenTo(_to, _tokenId);\n        uint256 length = ownedTokens[_to].length;\n        ownedTokens[_to].push(_tokenId);\n        ownedTokensIndex[_tokenId] = length;\n    }\n\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        super.removeTokenFrom(_from, _tokenId);\n\n\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\n        ownedTokens[_from][tokenIndex] = lastToken;\n        ownedTokens[_from][lastTokenIndex] = 0;\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\n        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are\n        // first swapping the lastToken to the first position, and then dropping the element placed in the last\n        // position of the list\n\n\n        ownedTokens[_from].length--;\n        ownedTokensIndex[_tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n\n    /**\n     * @dev Internal function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to address the beneficiary that will own the minted token\n     */\n    function _mint(address _to, uint256 _id) internal {\n        allTokens.push(_id);\n        allTokensIndex[_id] = _id;\n        super._mint(_to, _id);\n    }\n    \n    function addTokenData(uint _tokenId, string _information, string _URL) public {\n            require(ownerOf(_tokenId) == msg.sender);\n            tokenData[_tokenId].information = _information;\n            tokenData[_tokenId].URL = _URL;\n\n\n        \n    }\n    \n    function getTokenData(uint _tokenId) public view returns(string Liscence, string URL){\n        require(exists(_tokenId));\n        Liscence = tokenData[_tokenId].information;\n        URL = tokenData[_tokenId].URL;\n    }\n    \n    function() payable{\n        require(msg.value > 0.16 ether);\n        _mint(msg.sender, tokenIDCount++);\n    }\n    \n    function withdraw() public onlyManager{\n        require(0.5 ether > 0);\n        manager.transfer(0.5 ether);\n    }\n}",
  "bytecode": "60806040526040805190810160405280601481526020017f47656e6572616c457468657265756d546f6b656e0000000000000000000000008152506008908051906020019062000051929190620002e9565b506040805190810160405280600381526020017f4745540000000000000000000000000000000000000000000000000000000000815250600990805190602001906200009f929190620002e9565b506000600a55348015620000b257600080fd5b50620000f06301ffc9a77c0100000000000000000000000000000000000000000000000000000000026200022b640100000000026401000000009004565b6200012d6380ac58cd7c0100000000000000000000000000000000000000000000000000000000026200022b640100000000026401000000009004565b6200016a634f558e797c0100000000000000000000000000000000000000000000000000000000026200022b640100000000026401000000009004565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001e863780e9d637c0100000000000000000000000000000000000000000000000000000000026200022b640100000000026401000000009004565b62000225635b5e139f7c0100000000000000000000000000000000000000000000000000000000026200022b640100000000026401000000009004565b62000398565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515156200027d57600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032c57805160ff19168380011785556200035d565b828001600101855582156200035d579182015b828111156200035c5782518255916020019190600101906200033f565b5b5090506200036c919062000370565b5090565b6200039591905b808211156200039157600081600090555060010162000377565b5090565b90565b612d0680620003a86000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146101c857806306fdde031461022c578063081812fc146102bc578063095ea7b3146103295780631244861e1461037657806318160ddd1461042f57806319fa8f501461045a57806323b872dd146104c35780632f745c59146105305780633ccfd60b146105915780633e0c8f20146105a857806342842e0e146105d3578063481c6a75146106405780634e71e0c8146106975780634f558e79146106ae5780634f6ccce7146106f35780636352211e146107345780636a627842146107a157806370a08231146107e45780638da5cb5b1461083b57806395d89b4114610892578063a22cb46514610922578063af17dea614610971578063b09afec114610a01578063b1cee33014610b13578063b88d4fde14610bab578063c87b56dd14610c5e578063d0ebdbe714610d04578063e2b9e18614610d47578063e30c397814610dd7578063e985e9c514610e2e578063f2fde38b14610ea9575b6702386f26fc100000341115156101ac57600080fd5b6101c633600a600081548092919060010191905055610eec565b005b3480156101d457600080fd5b5061021260048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610f3e565b604051808215151515815260200191505060405180910390f35b34801561023857600080fd5b50610241610fa5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610281578082015181840152602081019050610266565b50505050905090810190601f1680156102ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c857600080fd5b506102e760048036038101908080359060200190929190505050611047565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033557600080fd5b50610374600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611084565b005b34801561038257600080fd5b5061042d60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506111c9565b005b34801561043b57600080fd5b50610444611266565b6040518082815260200191505060405180910390f35b34801561046657600080fd5b5061046f611273565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156104cf57600080fd5b5061052e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061129a565b005b34801561053c57600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113a7565b6040518082815260200191505060405180910390f35b34801561059d57600080fd5b506105a661141e565b005b3480156105b457600080fd5b506105bd611504565b6040518082815260200191505060405180910390f35b3480156105df57600080fd5b5061063e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061150a565b005b34801561064c57600080fd5b50610655611542565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a357600080fd5b506106ac611568565b005b3480156106ba57600080fd5b506106d960048036038101908080359060200190929190505050611709565b604051808215151515815260200191505060405180910390f35b3480156106ff57600080fd5b5061071e6004803603810190808035906020019092919050505061177b565b6040518082815260200191505060405180910390f35b34801561074057600080fd5b5061075f600480360381019080803590602001909291905050506117b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ad57600080fd5b506107e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611831565b005b3480156107f057600080fd5b50610825600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118aa565b6040518082815260200191505060405180910390f35b34801561084757600080fd5b5061085061192e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089e57600080fd5b506108a7611954565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108e75780820151818401526020810190506108cc565b50505050905090810190601f1680156109145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561092e57600080fd5b5061096f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506119f6565b005b34801561097d57600080fd5b50610986611b32565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109c65780820151818401526020810190506109ab565b50505050905090810190601f1680156109f35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a0d57600080fd5b50610a2c60048036038101908080359060200190929190505050611bd0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a70578082015181840152602081019050610a55565b50505050905090810190601f168015610a9d5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610b1f57600080fd5b50610b54600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d4e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b97578082015181840152602081019050610b7c565b505050509050019250505060405180910390f35b348015610bb757600080fd5b50610c5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611de5565b005b348015610c6a57600080fd5b50610c8960048036038101908080359060200190929190505050611e24565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610cc9578082015181840152602081019050610cae565b50505050905090810190601f168015610cf65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d1057600080fd5b50610d45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eed565b005b348015610d5357600080fd5b50610d5c611fc9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d9c578082015181840152602081019050610d81565b50505050905090810190601f168015610dc95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610de357600080fd5b50610dec612067565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3a57600080fd5b50610e8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061208d565b604051808215151515815260200191505060405180910390f35b348015610eb557600080fd5b50610eea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612121565b005b600d81908060018154018082558091505090600182039060005260206000200160009091929091909150555080600e600083815260200190815260200160002081905550610f3a82826121c1565b5050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061108f826117b3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110cc57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061110c575061110b813361208d565b5b151561111757600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff166111e9846117b3565b73ffffffffffffffffffffffffffffffffffffffff1614151561120b57600080fd5b81601060008581526020019081526020016000206000019080519060200190611235929190612c09565b5080601060008581526020019081526020016000206001019080519060200190611260929190612c09565b50505050565b6000600d80549050905090565b6301ffc9a77c01000000000000000000000000000000000000000000000000000000000281565b806112a53382612267565b15156112b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156112ec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561132857600080fd5b61133284836122fc565b61133c848361245b565b6113468383612673565b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60006113b2836118aa565b821015156113bf57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561140b57fe5b9060005260206000200154905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147a57600080fd5b60006706f05b59d3b2000011151561149157600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6706f05b59d3b200009081150290604051600060405180830381858888f19350505050158015611501573d6000803e3d6000fd5b50565b600a5481565b806115153382612267565b151561152057600080fd5b61153c8484846020604051908101604052806000815250611de5565b50505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115c457600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611785611266565b8210151561179257600080fd5b600d828154811015156117a157fe5b90600052602060002001549050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561182857600080fd5b80915050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188d57600080fd5b6118a781600a600081548092919060010191905055610eec565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118e757600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119ec5780601f106119c1576101008083540402835291602001916119ec565b820191906000526020600020905b8154815290600101906020018083116119cf57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a3157600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bc85780601f10611b9d57610100808354040283529160200191611bc8565b820191906000526020600020905b815481529060010190602001808311611bab57829003601f168201915b505050505081565b606080611bdc83611709565b1515611be757600080fd5b601060008481526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c915780601f10611c6657610100808354040283529160200191611c91565b820191906000526020600020905b815481529060010190602001808311611c7457829003601f168201915b50505050509150601060008481526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d425780601f10611d1757610100808354040283529160200191611d42565b820191906000526020600020905b815481529060010190602001808311611d2557829003601f168201915b50505050509050915091565b6060600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611dd957602002820191906000526020600020905b815481526020019060010190808311611dc5575b50505050509050919050565b81611df03382612267565b1515611dfb57600080fd5b611e0685858561129a565b611e128585858561274a565b1515611e1d57600080fd5b5050505050565b6060611e2f82611709565b1515611e3a57600080fd5b600f60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ee15780601f10611eb657610100808354040283529160200191611ee1565b820191906000526020600020905b815481529060010190602001808311611ec457829003601f168201915b50505050509050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f8557600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561205f5780601f106120345761010080835404028352916020019161205f565b820191906000526020600020905b81548152906001019060200180831161204257829003601f168201915b505050505081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217d57600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156121fd57600080fd5b6122078282612673565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080612273836117b3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806122e257508373ffffffffffffffffffffffffffffffffffffffff166122ca84611047565b73ffffffffffffffffffffffffffffffffffffffff16145b806122f357506122f2818561208d565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661231c826117b3565b73ffffffffffffffffffffffffffffffffffffffff1614151561233e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156124575760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b5050565b600080600061246a8585612938565b600c60008581526020019081526020016000205492506124d66001600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612a6790919063ffffffff16565b9150600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561252457fe5b9060005260206000200154905080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561257e57fe5b90600052602060002001819055506000600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156125da57fe5b9060005260206000200181905550600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361263a9190612c89565b506000600c60008681526020019081526020016000208190555082600c6000838152602001908152602001600020819055505050505050565b600061267f8383612a80565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150555080600c600084815260200190815260200160002081905550505050565b60008061276c8573ffffffffffffffffffffffffffffffffffffffff16612bda565b151561277b576001915061292f565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561283d578082015181840152602081019050612822565b50505050905090810190601f16801561286a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561288b57600080fd5b505af115801561289f573d6000803e3d6000fd5b505050506040513d60208110156128b557600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff16612958826117b3565b73ffffffffffffffffffffffffffffffffffffffff1614151561297a57600080fd5b6129cd6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a6790919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000828211151515612a7557fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612aee57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b936001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bed90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b60008183019050828110151515612c0057fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c4a57805160ff1916838001178555612c78565b82800160010185558215612c78579182015b82811115612c77578251825591602001919060010190612c5c565b5b509050612c859190612cb5565b5090565b815481835581811115612cb057818360005260206000209182019101612caf9190612cb5565b5b505050565b612cd791905b80821115612cd3576000816000905550600101612cbb565b5090565b905600a165627a7a723058208ed6b1b905c6b130c9f4600853c10f0d7893b662e8c05736bbe97444e0123dc10029"
}