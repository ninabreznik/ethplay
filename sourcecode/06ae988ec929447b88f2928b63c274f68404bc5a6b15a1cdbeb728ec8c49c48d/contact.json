{
  "address": "0x5a7802e66b067cb1770ee5b1165aa201690a8b6a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DarknodePayment",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Calculates the average of two numbers. Since these are integers,\n     * averages of an even and odd number cannot be represented, and will be\n     * rounded down.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/// @notice Implements safeTransfer, safeTransferFrom and\n/// safeApprove for CompatibleERC20.\n///\n/// See https://github.com/ethereum/solidity/issues/4116\n///\n/// This library allows interacting with ERC20 tokens that implement any of\n/// these interfaces:\n///\n/// (1) transfer returns true on success, false on failure\n/// (2) transfer returns true on success, reverts on failure\n/// (3) transfer returns nothing on success, reverts on failure\n///\n/// Additionally, safeTransferFromWithFees will return the final token\n/// value received after accounting for token fees.\n\nlibrary CompatibleERC20Functions {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /// @notice Calls transferFrom on the token, reverts if the call fails and\n    /// returns the value transferred after fees.\n    function safeTransferFromWithFees(IERC20 token, address from, address to, uint256 value) internal returns (uint256) {\n        uint256 balancesBefore = token.balanceOf(to);\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n        require(previousReturnValue(), \"transferFrom failed\");\n        uint256 balancesAfter = token.balanceOf(to);\n        return Math.min(value, balancesAfter.sub(balancesBefore));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n\n    /// @notice Checks the return value of the previous function. Returns true\n    /// if the previous function returned 32 non-zero bytes or returned zero\n    /// bytes.\n    function previousReturnValue() private pure returns (bool)\n    {\n        uint256 returnData = 0;\n\n        assembly { /* solium-disable-line security/no-inline-assembly */\n            // Switch on the number of bytes returned by the previous call\n            switch returndatasize\n\n            // 0 bytes: ERC20 of type (3), did not throw\n            case 0 {\n                returnData := 1\n            }\n\n            // 32 bytes: ERC20 of types (1) or (2)\n            case 32 {\n                // Copy the return data into scratch space\n                returndatacopy(0, 0, 32)\n\n                // Load  the return data into returnData\n                returnData := mload(0)\n            }\n\n            // Other return size: return false\n            default { }\n        }\n\n        return returnData != 0;\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\n\n    string private constant _name = \"Republic Token\";\n    string private constant _symbol = \"REN\";\n    uint8 private constant _decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(_decimals);\n\n    /// @notice The RenToken Constructor.\n    constructor() ERC20Burnable() ERC20Pausable() ERC20Detailed(_name, _symbol, _decimals) public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\n        /* solium-disable error-reason */\n        require(amount > 0);\n\n        _transfer(msg.sender, beneficiary, amount);\n        emit Transfer(msg.sender, beneficiary, amount);\n\n        return true;\n    }\n}\n\n/// @notice DarknodeSlasher will become a voting system for darknodes to\n/// deregister other misbehaving darknodes.\n/// Right now, it is a placeholder.\ncontract DarknodeSlasher is Ownable {\n\n    DarknodeRegistry public darknodeRegistry;\n\n    constructor(DarknodeRegistry _darknodeRegistry) public {\n        darknodeRegistry = _darknodeRegistry;\n    }\n\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlyOwner\n    {\n        darknodeRegistry.slash(_prover, _challenger1, _challenger2);\n    }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable {\n    address private _pendingOwner;\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n      require(msg.sender == _pendingOwner);\n      _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n      _pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() onlyPendingOwner public {\n      emit OwnershipTransferred(_owner, _pendingOwner);\n      _owner = _pendingOwner;\n      _pendingOwner = address(0);\n    }\n}\n\n/**\n * @notice LinkedList is a library for a circular double linked list.\n */\nlibrary LinkedList {\n\n    /*\n    * @notice A permanent NULL node (0x0) in the circular double linked list.\n    * NULL.next is the head, and NULL.previous is the tail.\n    */\n    address public constant NULL = address(0);\n\n    /**\n    * @notice A node points to the node before it, and the node after it. If\n    * node.previous = NULL, then the node is the head of the list. If\n    * node.next = NULL, then the node is the tail of the list.\n    */\n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    /**\n    * @notice LinkedList uses a mapping from address to nodes. Each address\n    * uniquely identifies a node, and in this way they are used like pointers.\n    */\n    struct List {\n        mapping (address => Node) list;\n    }\n\n    /**\n    * @notice Insert a new node before an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert before the target.\n    */\n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Insert a new node after an existing node.\n    *\n    * @param self The list being used.\n    * @param target The existing node in the list.\n    * @param newNode The next node to insert after the target.\n    */\n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(!isInList(self, newNode), \"already in list\");\n        require(isInList(self, target) || target == NULL, \"not in list\");\n\n        // It is expected that this value is sometimes NULL.\n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    /**\n    * @notice Remove a node from the list, and fix the previous and next\n    * pointers that are pointing to the removed node. Removing anode that is not\n    * in the list will do nothing.\n    *\n    * @param self The list being using.\n    * @param node The node in the list to be removed.\n    */\n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"not in list\");\n        if (node == NULL) {\n            return;\n        }\n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        // Deleting the node should set this value to false, but we set it here for\n        // explicitness.\n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    /**\n    * @notice Insert a node at the beginning of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the beginning of the list.\n    */\n    function prepend(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertBefore(self, begin(self), node);\n    }\n\n    /**\n    * @notice Insert a node at the end of the list.\n    *\n    * @param self The list being used.\n    * @param node The node to insert at the end of the list.\n    */\n    function append(List storage self, address node) internal {\n        // isInList(node) is checked in insertBefore\n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        // isInList(left) and isInList(right) are checked in remove\n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    /**\n    * @notice Get the node at the beginning of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the beginning of the double\n    * linked list.\n    */\n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    /**\n    * @notice Get the node at the end of a double linked list.\n    *\n    * @param self The list being used.\n    *\n    * @return A address identifying the node at the end of the double linked\n    * list.\n    */\n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"not in list\");\n        return self.list[node].previous;\n    }\n\n}\n\n/// @notice This contract stores data and funds for the DarknodeRegistry\n/// contract. The data / fund logic and storage have been separated to improve\n/// upgradability.\ncontract DarknodeRegistryStore is Claimable {\n    using SafeMath for uint256;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknodes are stored in the darknode struct. The owner is the\n    /// address that registered the darknode, the bond is the amount of REN that\n    /// was transferred during registration, and the public key is the\n    /// encryption key that should be used when sending sensitive information to\n    /// the darknode.\n    struct Darknode {\n        // The owner of a Darknode is the address that called the register\n        // function. The owner is the only address that is allowed to\n        // deregister the Darknode, unless the Darknode is slashed for\n        // malicious behavior.\n        address payable owner;\n\n        // The bond is the amount of REN submitted as a bond by the Darknode.\n        // This amount is reduced when the Darknode is slashed for malicious\n        // behavior.\n        uint256 bond;\n\n        // The block number at which the Darknode is considered registered.\n        uint256 registeredAt;\n\n        // The block number at which the Darknode is considered deregistered.\n        uint256 deregisteredAt;\n\n        // The public key used by this Darknode for encrypting sensitive data\n        // off chain. It is assumed that the Darknode has access to the\n        // respective private key, and that there is an agreement on the format\n        // of the public key.\n        bytes publicKey;\n    }\n\n    /// Registry data.\n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    // RenToken.\n    RenToken public ren;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _ren The address of the RenToken contract.\n    constructor(\n        string memory _VERSION,\n        RenToken _ren\n    ) public {\n        VERSION = _VERSION;\n        ren = _ren;\n    }\n\n    /// @notice Instantiates a darknode and appends it to the darknodes\n    /// linked-list.\n    ///\n    /// @param _darknodeID The darknode's ID.\n    /// @param _darknodeOwner The darknode's owner's address\n    /// @param _bond The darknode's bond value\n    /// @param _publicKey The darknode's public key\n    /// @param _registeredAt The time stamp when the darknode is registered.\n    /// @param _deregisteredAt The time stamp when the darknode is deregistered.\n    function appendDarknode(\n        address _darknodeID,\n        address payable _darknodeOwner,\n        uint256 _bond,\n        bytes calldata _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOwner,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    /// @notice Returns the address of the first darknode in the store\n    function begin() external view onlyOwner returns(address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    /// @notice Returns the address of the next darknode in the store after the\n    /// given address.\n    function next(address darknodeID) external view onlyOwner returns(address) {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    /// @notice Removes a darknode from the store and transfers its bond to the\n    /// owner of this contract.\n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(ren.transfer(owner(), bond), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the bond of a darknode. The new bond must be smaller\n    /// than the previous bond of the darknode.\n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond) external onlyOwner {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        require(decreasedBond < previousBond, \"bond not decreased\");\n        darknodeRegistry[darknodeID].bond = decreasedBond;\n        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), \"bond transfer failed\");\n    }\n\n    /// @notice Updates the deregistration timestamp of a darknode.\n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    /// @notice Returns the owner of a given darknode.\n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address payable) {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    /// @notice Returns the bond of a given darknode.\n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    /// @notice Returns the registration time of a given darknode.\n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    /// @notice Returns the deregistration time of a given darknode.\n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    /// @notice Returns the encryption public key of a given darknode.\n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes memory) {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\n/// @notice DarknodeRegistry is responsible for the registration and\n/// deregistration of Darknodes.\ncontract DarknodeRegistry is Ownable {\n    using SafeMath for uint256;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice Darknode pods are shuffled after a fixed number of blocks.\n    /// An Epoch stores an epoch hash used as an (insecure) RNG seed, and the\n    /// blocknumber which restricts when the next epoch can be called.\n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocknumber;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    /// Variables used to parameterize behavior.\n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n\n    /// When one of the above variables is modified, it is only updated when the\n    /// next epoch is called. These variables store the values for the next epoch.\n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n\n    /// The current and previous epoch\n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    /// Republic ERC20 token contract used to transfer bonds.\n    RenToken public ren;\n\n    /// Darknode Registry Store is the storage contract for darknodes.\n    DarknodeRegistryStore public store;\n\n    /// Darknode Slasher allows darknodes to vote on bond slashing.\n    DarknodeSlasher public slasher;\n    DarknodeSlasher public nextSlasher;\n\n    /// @notice Emitted when a darknode is registered.\n    /// @param _darknodeID The darknode ID that was registered.\n    /// @param _bond The amount of REN that was transferred as bond.\n    event LogDarknodeRegistered(address indexed _darknodeID, uint256 _bond);\n\n    /// @notice Emitted when a darknode is deregistered.\n    /// @param _darknodeID The darknode ID that was deregistered.\n    event LogDarknodeDeregistered(address indexed _darknodeID);\n\n    /// @notice Emitted when a refund has been made.\n    /// @param _owner The address that was refunded.\n    /// @param _amount The amount of REN that was refunded.\n    event LogDarknodeOwnerRefunded(address indexed _owner, uint256 _amount);\n\n    /// @notice Emitted when a new epoch has begun.\n    event LogNewEpoch(uint256 indexed epochhash);\n\n    /// @notice Emitted when a constructor parameter has been updated.\n    event LogMinimumBondUpdated(uint256 previousMinimumBond, uint256 nextMinimumBond);\n    event LogMinimumPodSizeUpdated(uint256 previousMinimumPodSize, uint256 nextMinimumPodSize);\n    event LogMinimumEpochIntervalUpdated(uint256 previousMinimumEpochInterval, uint256 nextMinimumEpochInterval);\n    event LogSlasherUpdated(address previousSlasher, address nextSlasher);\n\n    /// @notice Only allow the owner that registered the darknode to pass.\n    modifier onlyDarknodeOwner(address _darknodeID) {\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"must be darknode owner\");\n        _;\n    }\n\n    /// @notice Only allow unregistered darknodes.\n    modifier onlyRefunded(address _darknodeID) {\n        require(isRefunded(_darknodeID), \"must be refunded or never registered\");\n        _;\n    }\n\n    /// @notice Only allow refundable darknodes.\n    modifier onlyRefundable(address _darknodeID) {\n        require(isRefundable(_darknodeID), \"must be deregistered for at least one epoch\");\n        _;\n    }\n\n    /// @notice Only allowed registered nodes without a pending deregistration to\n    /// deregister\n    modifier onlyDeregisterable(address _darknodeID) {\n        require(isDeregisterable(_darknodeID), \"must be deregisterable\");\n        _;\n    }\n\n    /// @notice Only allow the Slasher contract.\n    modifier onlySlasher() {\n        require(address(slasher) == msg.sender, \"must be slasher\");\n        _;\n    }\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _renAddress The address of the RenToken contract.\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\n    ///        Darknode.\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\n    /// @param _minimumEpochInterval The minimum number of blocks between\n    ///        epochs.\n    constructor(\n        string memory _VERSION,\n        RenToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochInterval\n    ) public {\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochInterval;\n        nextMinimumEpochInterval = minimumEpochInterval;\n\n        currentEpoch = Epoch({\n            epochhash: uint256(blockhash(block.number - 1)),\n            blocknumber: block.number\n        });\n        numDarknodes = 0;\n        numDarknodesNextEpoch = 0;\n        numDarknodesPreviousEpoch = 0;\n    }\n\n    /// @notice Register a darknode and transfer the bond to this contract.\n    /// Before registering, the bond transfer must be approved in the REN\n    /// contract. The caller must provide a public encryption key for the\n    /// darknode. The darknode will remain pending registration until the next\n    /// epoch. Only after this period can the darknode be deregistered. The\n    /// caller of this method will be stored as the owner of the darknode.\n    ///\n    /// @param _darknodeID The darknode ID that will be registered.\n    /// @param _publicKey The public key of the darknode. It is stored to allow\n    ///        other darknodes and traders to encrypt messages to the trader.\n    function register(address _darknodeID, bytes calldata _publicKey) external onlyRefunded(_darknodeID) {\n        // Use the current minimum bond as the darknode's bond.\n        uint256 bond = minimumBond;\n\n        // Transfer bond to store\n        require(ren.transferFrom(msg.sender, address(store), bond), \"bond transfer failed\");\n\n        // Flag this darknode for registration\n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            bond,\n            _publicKey,\n            currentEpoch.blocknumber.add(minimumEpochInterval),\n            0\n        );\n\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\n\n        // Emit an event.\n        emit LogDarknodeRegistered(_darknodeID, bond);\n    }\n\n    /// @notice Deregister a darknode. The darknode will not be deregistered\n    /// until the end of the epoch. After another epoch, the bond can be\n    /// refunded by calling the refund method.\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\n    ///        of this method store.darknodeRegisteredAt(_darknodeID) must be\n    //         the owner of this darknode.\n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\n        deregisterDarknode(_darknodeID);\n    }\n\n    /// @notice Progress the epoch if it is possible to do so. This captures\n    /// the current timestamp and current blockhash and overrides the current\n    /// epoch.\n    function epoch() external {\n        if (previousEpoch.blocknumber == 0) {\n            // The first epoch must be called by the owner of the contract\n            require(msg.sender == owner(), \"not authorized (first epochs)\");\n        }\n\n        // Require that the epoch interval has passed\n        require(block.number >= currentEpoch.blocknumber.add(minimumEpochInterval), \"epoch interval has not passed\");\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        // Update the epoch hash and timestamp\n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocknumber: block.number\n        });\n\n        // Update the registry information\n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        // If any update functions have been called, update the values now\n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\n        }\n\n        // Emit an event\n        emit LogNewEpoch(epochhash);\n    }\n\n    /// @notice Allows the contract owner to initiate an ownership transfer of\n    /// the DarknodeRegistryStore. \n    /// @param _newOwner The address to transfer the ownership to.\n    function transferStoreOwnership(address _newOwner) external onlyOwner {\n        store.transferOwnership(_newOwner);\n    }\n\n    /// @notice Claims ownership of the store passed in to the constructor.\n    /// `transferStoreOwnership` must have previously been called when\n    /// transferring from another Darknode Registry.\n    function claimStoreOwnership() external onlyOwner {\n        store.claimOwnership();\n    }\n\n    /// @notice Allows the contract owner to update the minimum bond.\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\n    ///        a darknode.\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    /// @notice Allows the contract owner to update the minimum pod size.\n    /// @param _nextMinimumPodSize The minimum size of a pod.\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    /// @notice Allows the contract owner to update the minimum epoch interval.\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\n        // Will be updated next epoch\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\n    /// address.\n    /// @param _slasher The new slasher address.\n    function updateSlasher(DarknodeSlasher _slasher) external onlyOwner {\n        require(address(_slasher) != address(0), \"invalid slasher address\");\n        nextSlasher = _slasher;\n    }\n\n    /// @notice Allow the DarknodeSlasher contract to slash half of a darknode's\n    /// bond and deregister it. The bond is distributed as follows:\n    ///   1/2 is kept by the guilty prover\n    ///   1/8 is rewarded to the first challenger\n    ///   1/8 is rewarded to the second challenger\n    ///   1/4 becomes unassigned\n    /// @param _prover The guilty prover whose bond is being slashed\n    /// @param _challenger1 The first of the two darknodes who submitted the challenge\n    /// @param _challenger2 The second of the two darknodes who submitted the challenge\n    function slash(address _prover, address _challenger1, address _challenger2)\n        external\n        onlySlasher\n    {\n        uint256 penalty = store.darknodeBond(_prover) / 2;\n        uint256 reward = penalty / 4;\n\n        // Slash the bond of the failed prover in half\n        store.updateDarknodeBond(_prover, penalty);\n\n        // If the darknode has not been deregistered then deregister it\n        if (isDeregisterable(_prover)) {\n            deregisterDarknode(_prover);\n        }\n\n        // Reward the challengers with less than the penalty so that it is not\n        // worth challenging yourself\n        require(ren.transfer(store.darknodeOwner(_challenger1), reward), \"reward transfer failed\");\n        require(ren.transfer(store.darknodeOwner(_challenger2), reward), \"reward transfer failed\");\n    }\n\n    /// @notice Refund the bond of a deregistered darknode. This will make the\n    /// darknode available for registration again. Anyone can call this function\n    /// but the bond will always be refunded to the darknode owner.\n    ///\n    /// @param _darknodeID The darknode ID that will be refunded. The caller\n    ///        of this method must be the owner of this darknode.\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\n\n        // Remember the bond amount\n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        // Erase the darknode from the registry\n        store.removeDarknode(_darknodeID);\n\n        // Refund the owner by transferring REN\n        require(ren.transfer(darknodeOwner, amount), \"bond transfer failed\");\n\n        // Emit an event.\n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\n    }\n\n    /// @notice Retrieves the address of the account that registered a darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\n    function getDarknodeOwner(address _darknodeID) external view returns (address payable) {\n        return store.darknodeOwner(_darknodeID);\n    }\n\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    /// @notice Retrieves the encryption public key of the darknode.\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes memory) {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    /// @notice Retrieves a list of darknodes which are registered for the\n    /// current epoch.\n    /// @param _start A darknode ID used as an offset for the list. If _start is\n    ///        0x0, the first dark node will be used. _start won't be\n    ///        included it is not registered for the epoch.\n    /// @param _count The number of darknodes to retrieve starting from _start.\n    ///        If _count is 0, all of the darknodes from _start are\n    ///        retrieved. If _count is more than the remaining number of\n    ///        registered darknodes, the rest of the list will contain\n    ///        0x0s.\n    function getDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    /// @notice Retrieves a list of darknodes which were registered for the\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    /// @notice Returns whether a darknode is scheduled to become registered\n    /// at next epoch.\n    /// @param _darknodeID The ID of the darknode to return\n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the pending deregistered state. In\n    /// this state a darknode is still considered registered.\n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the deregistered state.\n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode can be deregistered. This is true if the\n    /// darknodes is in the registered state and has not attempted to\n    /// deregister yet.\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        // The Darknode is currently in the registered state and has not been\n        // transitioned to the pending deregistration, or deregistered, state\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is in the refunded state. This is true\n    /// for darknodes that have never been registered, or darknodes that have\n    /// been deregistered and refunded.\n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\n    /// that have been in the deregistered state for one full epoch.\n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocknumber;\n    }\n\n    /// @notice Returns if a darknode is in the registered state.\n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state last epoch.\n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    /// @notice Returns if a darknode was in the registered state for a given\n    /// epoch.\n    /// @param _darknodeID The ID of the darknode\n    /// @param _epoch One of currentEpoch, previousEpoch\n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;\n        // The Darknode has been registered and has not yet been deregistered,\n        // although it might be pending deregistration\n        return registered && notDeregistered;\n    }\n\n    /// @notice Returns a list of darknodes registered for either the current\n    /// or the previous epoch. See `getDarknodes` for documentation on the\n    /// parameters `_start` and `_count`.\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\n    ///        the current epoch.\n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        // Begin with the first node in the list\n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = store.begin();\n        }\n\n        // Iterate until all registered Darknodes have been collected\n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            // Only include Darknodes that are currently registered\n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n\n    /// Private function called by `deregister` and `slash`\n    function deregisterDarknode(address _darknodeID) private {\n        // Flag the darknode for deregistration\n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocknumber.add(minimumEpochInterval));\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\n\n        // Emit an event\n        emit LogDarknodeDeregistered(_darknodeID);\n    }\n}\n\n/// @notice DarknodePaymentStore is responsible for tracking black/whitelisted\n///         darknodes as well as the balances which have been allocated to the\n///         darknodes. It is also responsible for holding the tokens to be paid\n///         out to darknodes.\ncontract DarknodePaymentStore is Claimable {\n    using SafeMath for uint256;\n    using CompatibleERC20Functions for ERC20;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice The special address for Ether.\n    address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @notice The size of the whitelist\n    uint256 public darknodeWhitelistLength;\n\n    /// @notice Mapping of darknode -> token -> balance\n    mapping(address => mapping(address => uint256)) public darknodeBalances;\n\n    /// @notice Mapping of token -> lockedAmount\n    mapping(address => uint256) public lockedBalances;\n\n    /// @notice mapping of darknode -> blacklistTimestamp\n    mapping(address => uint256) public darknodeBlacklist;\n\n    /// @notice mapping of darknode -> whitelistTimestamp\n    mapping(address => uint256) public darknodeWhitelist;\n\n    /// @notice The contract constructor.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    constructor(\n        string memory _VERSION\n    ) public {\n        VERSION = _VERSION;\n    }\n\n    /// @notice Allow direct payments to be made to the DarknodePaymentStore.\n    function () external payable {\n    }\n\n    /// @notice Checks to see if a darknode is blacklisted\n    ///\n    /// @param _darknode The address of the darknode\n    /// @return true if the darknode is blacklisted\n    function isBlacklisted(address _darknode) public view returns (bool) {\n        return darknodeBlacklist[_darknode] != 0;\n    }\n\n    /// @notice Checks to see if a darknode is whitelisted\n    ///\n    /// @param _darknode The address of the darknode\n    /// @return true if the darknode is whitelisted\n    function isWhitelisted(address _darknode) public view returns (bool) {\n        return darknodeWhitelist[_darknode] != 0;\n    }\n\n    /// @notice Get the total balance of the contract for a particular token\n    ///\n    /// @param _token The token to check balance of\n    /// @return The total balance of the contract\n    function totalBalance(address _token) public view returns (uint256) {\n        if (_token == ETHEREUM) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).balanceOf(address(this));\n        }\n    }\n\n    /// @notice Get the available balance of the contract for a particular token\n    ///         This is the free amount which has not yet been allocated to\n    ///         darknodes.\n    ///\n    /// @param _token The token to check balance of\n    /// @return The available balance of the contract\n    function availableBalance(address _token) public view returns (uint256) {\n        return totalBalance(_token).sub(lockedBalances[_token]);\n    }\n\n    /// @notice Blacklists a darknode from participating in reward allocation.\n    ///         If the darknode is whitelisted, it is removed from the whitelist\n    ///         and the number of whitelisted nodes is decreased.\n    ///\n    /// @param _darknode The address of the darknode to blacklist\n    function blacklist(address _darknode) external onlyOwner {\n        require(!isBlacklisted(_darknode), \"darknode already blacklisted\");\n        darknodeBlacklist[_darknode] = now;\n\n        // Unwhitelist if necessary\n        if (isWhitelisted(_darknode)) {\n            darknodeWhitelist[_darknode] = 0;\n            // Use SafeMath when subtracting to avoid underflows\n            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);\n        }\n    }\n\n    /// @notice Whitelists a darknode allowing it to participate in reward\n    ///         allocation.\n    ///\n    /// @param _darknode The address of the darknode to whitelist\n    function whitelist(address _darknode) external onlyOwner {\n        require(!isBlacklisted(_darknode), \"darknode is blacklisted\");\n        require(!isWhitelisted(_darknode), \"darknode already whitelisted\");\n\n        darknodeWhitelist[_darknode] = now;\n        darknodeWhitelistLength++;\n    }\n\n    /// @notice Increments the amount of funds allocated to a particular\n    ///         darknode.\n    ///\n    /// @param _darknode The address of the darknode to increase balance of\n    /// @param _token The token which the balance should be incremented\n    /// @param _amount The amount that the balance should be incremented by\n    function incrementDarknodeBalance(address _darknode, address _token, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"invalid amount\");\n        require(availableBalance(_token) >= _amount, \"insufficient contract balance\");\n\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);\n        lockedBalances[_token] = lockedBalances[_token].add(_amount);\n    }\n\n    /// @notice Transfers an amount out of balance to a specified address\n    ///\n    /// @param _darknode The address of the darknode\n    /// @param _token Which token to transfer\n    /// @param _amount The amount to transfer\n    /// @param _recipient The address to withdraw it to\n    function transfer(address _darknode, address _token, uint256 _amount, address payable _recipient) external onlyOwner {\n        require(darknodeBalances[_darknode][_token] >= _amount, \"insufficient darknode balance\");\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);\n        lockedBalances[_token] = lockedBalances[_token].sub(_amount);\n\n        if (_token == ETHEREUM) {\n            _recipient.transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(_recipient, _amount);\n        }\n    }\n\n}\n\n/// @notice DarknodePayment is responsible for paying off darknodes for their\n///         computation.\ncontract DarknodePayment is Ownable {\n    using SafeMath for uint256;\n    using CompatibleERC20Functions for ERC20;\n\n    string public VERSION; // Passed in as a constructor parameter.\n\n    /// @notice The special address for Ether.\n    address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    DarknodeRegistry public darknodeRegistry; // Passed in as a constructor parameter.\n\n    /// @notice DarknodePaymentStore is the storage contract for darknode\n    ///         payments.\n    DarknodePaymentStore public store; // Passed in as a constructor parameter.\n\n    /// @notice The address that can call blacklist()\n    address public blacklister;\n\n    uint256 public currentCycle;\n    uint256 public previousCycle;\n\n    /// @notice The number of whitelisted darknodes this cycle\n    uint256 public shareCount;\n\n    /// @notice The list of tokens that will be registered next cycle.\n    ///         We only update the shareCount at the change of cycle to\n    ///         prevent the number of shares from changing.\n    address[] public pendingTokens;\n\n    /// @notice The list of tokens which are already registered and rewards can\n    ///         be claimed for.\n    address[] public registeredTokens;\n\n    /// @notice Mapping from token -> index. Index starts from 1. 0 means not in\n    ///         list.\n    mapping(address => uint256) public registeredTokenIndex;\n\n    /// @notice Mapping from token -> amount.\n    ///         The amount of rewards allocated for all darknodes to claim into\n    ///         their account.\n    mapping(address => uint256) public unclaimedRewards;\n\n    /// @notice Mapping from token -> amount.\n    ///         The amount of rewards allocated for each darknode.\n    mapping(address => uint256) public previousCycleRewardShare;\n\n    /// @notice The time that the current cycle started.\n    uint256 public cycleStartTime;\n\n    /// @notice The minimum duration that the current cycle must go for.\n    uint256 public cycleDuration;\n\n    /// @notice The earliest timestamp that changeCycle() can be called.\n    uint256 public cycleTimeout;\n\n    /// @notice Mapping of darknode -> cycle -> already_claimed\n    ///         Used to keep track of which darknodes have already claimed their\n    ///         rewards.\n    mapping(address => mapping(uint256 => bool)) public rewardClaimed;\n\n    /// @notice Emitted when a darknode is blacklisted from receiving rewards\n    /// @param _darknode The address of the darknode which was blacklisted\n    /// @param _time The time at which the darknode was blacklisted\n    event LogDarknodeBlacklisted(address indexed _darknode, uint256 _time);\n\n    /// @notice Emitted when a darknode is whitelisted to receive rewards\n    /// @param _darknode The address of the darknode which was whitelisted\n    /// @param _time The time at which the darknode was whitelisted\n    event LogDarknodeWhitelisted(address indexed _darknode, uint256 _time);\n\n    /// @notice Emitted when a darknode claims their share of reward\n    /// @param _darknode The darknode which claimed\n    /// @param _cycle The cycle that the darknode claimed for\n    event LogDarknodeClaim(address indexed _darknode, uint256 _cycle);\n\n    /// @notice Emitted when someone pays the DarknodePayment contract\n    /// @param _payer The darknode which claimed\n    /// @param _amount The cycle that the darknode claimed for\n    /// @param _token The address of the token that was transferred\n    event LogPaymentReceived(address indexed _payer, uint256 _amount, address _token);\n\n    /// @notice Emitted when a darknode calls withdraw\n    /// @param _payee The address of the darknode which withdrew\n    /// @param _value The amount of DAI withdrawn\n    /// @param _token The address of the token that was withdrawn\n    event LogDarknodeWithdrew(address indexed _payee, uint256 _value, address _token);\n\n    /// @notice Emitted when a new cycle happens\n    /// @param _newCycle The new, current cycle\n    /// @param _lastCycle The previous cycle\n    /// @param _cycleTimeout The earliest a new cycle can be called\n    event LogNewCycle(uint256 _newCycle, uint256 _lastCycle, uint256 _cycleTimeout);\n\n    /// @notice Emitted when the cycle duration changes\n    /// @param _newDuration The new duration\n    /// @param _oldDuration The old duration\n    event LogCycleDurationChanged(uint256 _newDuration, uint256 _oldDuration);\n\n    /// @notice Emitted when the Blacklister contract changes\n    /// @param _newBlacklister The new Blacklister\n    /// @param _oldBlacklister The old Blacklister\n    event LogBlacklisterChanged(address _newBlacklister, address _oldBlacklister);\n\n    /// @notice Emitted when a new token is registered\n    /// @param _token The token that was registered\n    event LogTokenRegistered(address _token);\n\n    /// @notice Emitted when a token is deregistered\n    /// @param _token The token that was deregistered\n    event LogTokenDeregistered(address _token);\n\n    /// @notice Only allow registered dark nodes.\n    modifier onlyDarknode(address _darknode) {\n        require(darknodeRegistry.isRegistered(_darknode), \"darknode is not registered\");\n        _;\n    }\n\n    /// @notice Only allow the Darknode Payment contract.\n    modifier onlyBlacklister() {\n        require(blacklister == msg.sender, \"not Blacklister\");\n        _;\n    }\n\n    /// @notice Only allow darknodes which haven't been blacklisted\n    modifier notBlacklisted(address _darknode) {\n        require(!store.isBlacklisted(_darknode), \"darknode is blacklisted\");\n        _;\n    }\n\n    /// @notice The contract constructor. Starts the current cycle using the\n    ///         time of deploy.\n    ///\n    /// @param _VERSION A string defining the contract version.\n    /// @param _darknodeRegistry The address of the DarknodeRegistry contract\n    /// @param _darknodePaymentStore The address of the DarknodePaymentStore\n    ///        contract\n    /// @param _cycleDurationSeconds The minimum time before a new cycle can occur in seconds\n    constructor(\n        string memory _VERSION,\n        DarknodeRegistry _darknodeRegistry,\n        DarknodePaymentStore _darknodePaymentStore,\n        uint256 _cycleDurationSeconds\n    ) public {\n        VERSION = _VERSION;\n        darknodeRegistry = _darknodeRegistry;\n        store = _darknodePaymentStore;\n        cycleDuration = _cycleDurationSeconds;\n        // Default the blacklister to owner\n        blacklister = msg.sender;\n\n        // Start the current cycle\n        currentCycle = block.number;\n        cycleStartTime = now;\n        cycleTimeout = cycleStartTime.add(cycleDuration);\n    }\n\n    /// @notice Transfers the funds allocated to the darknode to the darknode\n    ///         owner.\n    ///\n    /// @param _darknode The address of the darknode\n    /// @param _token Which token to transfer\n    function withdraw(address _darknode, address _token) public {\n        address payable darknodeOwner = darknodeRegistry.getDarknodeOwner(_darknode);\n        require(darknodeOwner != address(0x0), \"invalid darknode owner\");\n\n        uint256 amount = store.darknodeBalances(_darknode, _token);\n        require(amount > 0, \"nothing to withdraw\");\n\n        store.transfer(_darknode, _token, amount, darknodeOwner);\n        emit LogDarknodeWithdrew(_darknode, amount, _token);\n    }\n\n    function withdrawMultiple(address _darknode, address[] calldata _tokens) external {\n        for (uint i = 0; i < _tokens.length; i++) {\n            withdraw(_darknode, _tokens[i]);\n        }\n    }\n\n    /// @notice Forward all payments to the DarknodePaymentStore.\n    function () external payable {\n        address(store).transfer(msg.value);\n        emit LogPaymentReceived(msg.sender, msg.value, ETHEREUM);\n    }\n\n    /// @notice The current balance of the contract available as reward for the\n    ///         current cycle\n    function currentCycleRewardPool(address _token) external view returns (uint256) {\n        return store.availableBalance(_token).sub(unclaimedRewards[_token]);\n    }\n\n    function darknodeBalances(address _darknodeID, address _token) external view returns (uint256) {\n        return store.darknodeBalances(_darknodeID, _token);\n    }\n\n    /// @notice Changes the current cycle.\n    function changeCycle() external returns (uint256) {\n        require(now >= cycleTimeout, \"cannot cycle yet: too early\");\n        require(block.number != currentCycle, \"no new block\");\n\n        // Snapshot balances for the past cycle\n        uint arrayLength = registeredTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            _snapshotBalance(registeredTokens[i]);\n        }\n\n        // Start a new cycle\n        previousCycle = currentCycle;\n        currentCycle = block.number;\n        cycleStartTime = now;\n        cycleTimeout = cycleStartTime.add(cycleDuration);\n\n        // Update the share size for next cycle\n        shareCount = store.darknodeWhitelistLength();\n        // Update the list of registeredTokens\n        _updateTokenList();\n\n        emit LogNewCycle(currentCycle, previousCycle, cycleTimeout);\n        return currentCycle;\n    }\n\n    /// @notice Deposits token into the contract to be paid to the Darknodes\n    ///\n    /// @param _value The amount of token deposit in the token's smallest unit.\n    /// @param _token The token address\n    function deposit(uint256 _value, address _token) external payable {\n        uint256 receivedValue;\n        if (_token == ETHEREUM) {\n            require(_value == msg.value, \"mismatched deposit value\");\n            receivedValue = msg.value;\n            address(store).transfer(msg.value);\n        } else {\n            require(msg.value == 0, \"unexpected ether transfer\");\n            // Forward the funds to the store\n            receivedValue = ERC20(_token).safeTransferFromWithFees(msg.sender, address(store), _value);\n        }\n        emit LogPaymentReceived(msg.sender, receivedValue, _token);\n    }\n\n    /// @notice Claims the rewards allocated to the darknode last cycle and\n    ///         increments the darknode balances. Whitelists the darknode if it\n    ///         hasn't already been whitelisted. If a darknode does not call\n    ///         claim() then the rewards for the previous cycle is lost.\n    ///\n    /// @param _darknode The address of the darknode to claim\n    function claim(address _darknode) external onlyDarknode(_darknode) notBlacklisted(_darknode) {\n        uint256 whitelistedTime = store.darknodeWhitelist(_darknode);\n\n        // The darknode hasn't been whitelisted before\n        if (whitelistedTime == 0) {\n            store.whitelist(_darknode);\n            emit LogDarknodeWhitelisted(_darknode, now);\n            return;\n        }\n\n        require(whitelistedTime < cycleStartTime, \"cannot claim for this cycle\");\n\n        // Claim share of rewards allocated for last cycle\n        _claimDarknodeReward(_darknode);\n        emit LogDarknodeClaim(_darknode, previousCycle);\n    }\n\n    /// @notice Blacklists a darknode from participating in rewards.\n    ///\n    /// @param _darknode The address of the darknode to blacklist\n    function blacklist(address _darknode) external onlyBlacklister onlyDarknode(_darknode) {\n        store.blacklist(_darknode);\n        emit LogDarknodeBlacklisted(_darknode, now);\n    }\n\n    /// @notice Adds tokens to be payable. Registration is pending until next\n    ///         cycle.\n    ///\n    /// @param _token The address of the token to be registered.\n    function registerToken(address _token) external onlyOwner {\n        require(registeredTokenIndex[_token] == 0, \"token already registered\");\n        uint arrayLength = pendingTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            require(pendingTokens[i] != _token, \"token already pending registration\");\n        }\n        pendingTokens.push(_token);\n    }\n\n    /// @notice Removes a token from the list of supported tokens.\n    ///         Deregistration is pending until next cycle.\n    ///\n    /// @param _token The address of the token to be deregistered.\n    function deregisterToken(address _token) external onlyOwner {\n        require(registeredTokenIndex[_token] > 0, \"token not registered\");\n        _deregisterToken(_token);\n    }\n\n    /// @notice Updates the Blacklister contract address.\n    ///\n    /// @param _addr The new Blacklister contract address.\n    function updateBlacklister(address _addr) external onlyOwner {\n        require(_addr != address(0), \"invalid contract address\");\n        emit LogBlacklisterChanged(_addr, blacklister);\n        blacklister = _addr;\n    }\n\n    /// @notice Updates cycle duration\n    ///\n    /// @param _durationSeconds The amount of time (in seconds) that should have\n    ///        passed before a new cycle can be called.\n    function updateCycleDuration(uint256 _durationSeconds) external onlyOwner {\n        uint256 oldDuration = cycleDuration;\n        cycleDuration = _durationSeconds;\n        emit LogCycleDurationChanged(cycleDuration, oldDuration);\n    }\n\n    /// @notice Allows the contract owner to initiate an ownership transfer of\n    ///         the DarknodePaymentStore.\n    ///\n    /// @param _newOwner The address to transfer the ownership to.\n    function transferStoreOwnership(address _newOwner) external onlyOwner {\n        store.transferOwnership(_newOwner);\n    }\n\n    /// @notice Claims ownership of the store passed in to the constructor.\n    ///         `transferStoreOwnership` must have previously been called when\n    ///         transferring from another DarknodePaymentStore.\n    function claimStoreOwnership() external onlyOwner {\n        store.claimOwnership();\n    }\n\n    /// @notice Claims the darknode reward for all registered tokens into\n    ///         darknodeBalances in the DarknodePaymentStore.\n    ///         Rewards can only be claimed once per cycle.\n    ///\n    /// @param _darknode The address to the darknode to claim rewards for\n    function _claimDarknodeReward(address _darknode) private {\n        require(!rewardClaimed[_darknode][previousCycle], \"reward already claimed\");\n        rewardClaimed[_darknode][previousCycle] = true;\n        uint arrayLength = registeredTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            address token = registeredTokens[i];\n\n            // Only increment balance if shares were allocated last cycle\n            if (previousCycleRewardShare[token] > 0) {\n                unclaimedRewards[token] = unclaimedRewards[token].sub(previousCycleRewardShare[token]);\n                store.incrementDarknodeBalance(_darknode, token, previousCycleRewardShare[token]);\n            }\n        }\n    }\n\n    /// @notice Snapshots the current balance of the tokens, for all registered\n    ///         tokens.\n    ///\n    /// @param _token The address the token to snapshot.\n    function _snapshotBalance(address _token) private {\n        if (shareCount == 0) {\n            unclaimedRewards[_token] = 0;\n            previousCycleRewardShare[_token] = 0;\n        } else {\n            // Lock up the current balance for darknode reward allocation\n            unclaimedRewards[_token] = store.availableBalance(_token);\n            previousCycleRewardShare[_token] = unclaimedRewards[_token].div(shareCount);\n        }\n    }\n\n    /// @notice Deregisters a token, removing it from the list of\n    ///         registeredTokens.\n    ///\n    /// @param _token The address of the token to deregister.\n    function _deregisterToken(address _token) private {\n        address lastToken = registeredTokens[registeredTokens.length.sub(1)];\n        uint256 deletedTokenIndex = registeredTokenIndex[_token].sub(1);\n        // Move the last token to _token's position and update it's index\n        registeredTokens[deletedTokenIndex] = lastToken;\n        registeredTokenIndex[lastToken] = registeredTokenIndex[_token];\n        // Decreasing the length will clean up the storage for us\n        // So we don't need to manually delete the element\n        registeredTokens.length = registeredTokens.length.sub(1);\n        registeredTokenIndex[_token] = 0;\n\n        emit LogTokenDeregistered(_token);\n    }\n\n    /// @notice Updates the list of registeredTokens adding tokens that are to be registered.\n    ///         The list of tokens that are pending registration are emptied afterwards.\n    function _updateTokenList() private {\n        // Register tokens\n        uint arrayLength = pendingTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            address token = pendingTokens[i];\n            registeredTokens.push(token);\n            registeredTokenIndex[token] = registeredTokens.length;\n            emit LogTokenRegistered(token);\n        }\n        pendingTokens.length = 0;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620026f3380380620026f3833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b50506020820151604080840151606090940151600080546001600160a01b03191633178082559251949750929550926001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38351620000f690600190602087019062000184565b50600280546001600160a01b038086166001600160a01b0319928316179092556003805492851692821692909217909155600e82905560048054909116331790554360055542600d8190556200015c90826200203f6200016a602090811b91909117901c565b600f55506200022992505050565b6000828201838110156200017d57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c757805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f7578251825591602001919060010190620001da565b506200020592915062000209565b5090565b6200022691905b8082111562000205576000815560010162000210565b90565b6124ba80620002396000396000f3fe6080604052600436106102045760003560e01c80639a0ba2ea11610118578063c2250a99116100a0578063f75adff81161006f578063f75adff814610713578063f7cdf47c146107a0578063f940e385146107b5578063f9f92be4146107f0578063ffa1ad741461082357610204565b8063c2250a9914610665578063e311481514610698578063e80b2b3d146106ad578063f2fde38b146106e057610204565b8063bab2af1d116100e7578063bab2af1d146105c0578063bab2f552146105f3578063bd10243014610608578063bfdce1991461061d578063c0470bb31461065057610204565b80639a0ba2ea146105395780639e45e0d014610563578063ad38bf2214610578578063b3a2af69146105ab57610204565b806370324b771161019b57806383b781881161016a57806383b781881461047a5780638da5cb5b146104c75780638f32d59b146104dc578063949813b8146104f1578063975057e71461052457610204565b806370324b77146103eb578063715018a61461042657806374c9ea821461043b5780637f03864b1461046557610204565b8063352fc85f116101d7578063352fc85f1461034f5780635bec4cb4146103955780636e553f65146103aa5780636fd689e8146103d657610204565b806305cf47441461028d57806309824a80146102d25780631e83409a14610307578063335e536c1461033a575b6003546040516001600160a01b03909116903480156108fc02916000818181858888f1935050505015801561023d573d6000803e3d6000fd5b506040805134815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6020820152815133927fea0e59b45b3d900359e312f5e429275ec827a5e4e2430e1610a1c678cd6cd2e2928290030190a2005b34801561029957600080fd5b506102c0600480360360208110156102b057600080fd5b50356001600160a01b03166108ad565b60408051918252519081900360200190f35b3480156102de57600080fd5b50610305600480360360208110156102f557600080fd5b50356001600160a01b03166108bf565b005b34801561031357600080fd5b506103056004803603602081101561032a57600080fd5b50356001600160a01b0316610a14565b34801561034657600080fd5b506102c0610d9a565b34801561035b57600080fd5b506103796004803603602081101561037257600080fd5b5035610da0565b604080516001600160a01b039092168252519081900360200190f35b3480156103a157600080fd5b506102c0610dc7565b610305600480360360408110156103c057600080fd5b50803590602001356001600160a01b0316610dcd565b3480156103e257600080fd5b50610305610f4e565b3480156103f757600080fd5b506102c06004803603604081101561040e57600080fd5b506001600160a01b0381358116916020013516610fc9565b34801561043257600080fd5b50610305611058565b34801561044757600080fd5b506103056004803603602081101561045e57600080fd5b50356110b3565b34801561047157600080fd5b506102c061110b565b34801561048657600080fd5b506104b36004803603604081101561049d57600080fd5b506001600160a01b038135169060200135611111565b604080519115158252519081900360200190f35b3480156104d357600080fd5b50610379611131565b3480156104e857600080fd5b506104b3611141565b3480156104fd57600080fd5b506102c06004803603602081101561051457600080fd5b50356001600160a01b0316611152565b34801561053057600080fd5b50610379611164565b34801561054557600080fd5b506103796004803603602081101561055c57600080fd5b5035611173565b34801561056f57600080fd5b50610379611180565b34801561058457600080fd5b506103056004803603602081101561059b57600080fd5b50356001600160a01b031661118f565b3480156105b757600080fd5b506102c0611268565b3480156105cc57600080fd5b50610305600480360360208110156105e357600080fd5b50356001600160a01b0316611453565b3480156105ff57600080fd5b506102c06114dd565b34801561061457600080fd5b506103796114e3565b34801561062957600080fd5b506102c06004803603602081101561064057600080fd5b50356001600160a01b03166114f2565b34801561065c57600080fd5b506102c0611504565b34801561067157600080fd5b506103056004803603602081101561068857600080fd5b50356001600160a01b031661150a565b3480156106a457600080fd5b506102c0611587565b3480156106b957600080fd5b506102c0600480360360208110156106d057600080fd5b50356001600160a01b031661158d565b3480156106ec57600080fd5b506103056004803603602081101561070357600080fd5b50356001600160a01b031661162f565b34801561071f57600080fd5b506103056004803603604081101561073657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561076157600080fd5b82018360208201111561077357600080fd5b8035906020019184602083028401116401000000008311171561079557600080fd5b509092509050611649565b3480156107ac57600080fd5b50610379611681565b3480156107c157600080fd5b50610305600480360360408110156107d857600080fd5b506001600160a01b0381358116916020013516611699565b3480156107fc57600080fd5b506103056004803603602081101561081357600080fd5b50356001600160a01b0316611926565b34801561082f57600080fd5b50610838611b07565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561087257818101518382015260200161085a565b50505050905090810190601f16801561089f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600c6020526000908152604090205481565b6108c7611141565b6108d057600080fd5b6001600160a01b0381166000908152600a60205260409020541561093e5760408051600160e51b62461bcd02815260206004820152601860248201527f746f6b656e20616c726561647920726567697374657265640000000000000000604482015290519081900360640190fd5b60085460005b818110156109c057826001600160a01b03166008828154811061096357fe5b6000918252602090912001546001600160a01b031614156109b857604051600160e51b62461bcd02815260040180806020018281038252602281526020018061246d6022913960400191505060405180910390fd5b600101610944565b5050600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b60025460408051600160e01b63c3c5a5470281526001600160a01b03808516600483015291518493929092169163c3c5a54791602480820192602092909190829003018186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d6020811015610a9157600080fd5b5051610ae75760408051600160e51b62461bcd02815260206004820152601a60248201527f6461726b6e6f6465206973206e6f742072656769737465726564000000000000604482015290519081900360640190fd5b60035460408051600160e01b63fe575a870281526001600160a01b03808616600483015291518593929092169163fe575a8791602480820192602092909190829003018186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d6020811015610b6457600080fd5b505115610bbb5760408051600160e51b62461bcd02815260206004820152601760248201527f6461726b6e6f646520697320626c61636b6c6973746564000000000000000000604482015290519081900360640190fd5b60035460408051600160e01b639a4d6f3b0281526001600160a01b03868116600483015291516000939290921691639a4d6f3b91602480820192602092909190829003018186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b5051905080610cf05760035460408051600160e11b634d8c928d0281526001600160a01b03878116600483015291519190921691639b19251a91602480830192600092919082900301818387803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50506040805142815290516001600160a01b03881693507f7634be097aa1800f447c3ae3ffe9444f1bc44a98bd2c1e986c1883f9f645f2b692509081900360200190a250610d95565b600d548110610d495760408051600160e51b62461bcd02815260206004820152601b60248201527f63616e6e6f7420636c61696d20666f722074686973206379636c650000000000604482015290519081900360640190fd5b610d5284611b94565b60065460408051918252516001600160a01b038616917f99c5ad5c5f898b30039b8cc54b8c0e6eb423e49bfc965a5999ebad131984e40d919081900360200190a2505b505050565b600d5481565b60088181548110610dad57fe5b6000918252602090912001546001600160a01b0316905081565b600e5481565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e8c57348314610e4b5760408051600160e51b62461bcd02815260206004820152601860248201527f6d69736d617463686564206465706f7369742076616c75650000000000000000604482015290519081900360640190fd5b5060035460405134916001600160a01b03169082156108fc029083906000818181858888f19350505050158015610e86573d6000803e3d6000fd5b50610f07565b3415610ee25760408051600160e51b62461bcd02815260206004820152601960248201527f756e6578706563746564206574686572207472616e7366657200000000000000604482015290519081900360640190fd5b600354610f04906001600160a01b03848116913391168663ffffffff611d5c16565b90505b604080518281526001600160a01b0384166020820152815133927fea0e59b45b3d900359e312f5e429275ec827a5e4e2430e1610a1c678cd6cd2e2928290030190a2505050565b610f56611141565b610f5f57600080fd5b600360009054906101000a90046001600160a01b03166001600160a01b0316634e71e0c86040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b50505050565b60035460408051600160e01b6370324b770281526001600160a01b0385811660048301528481166024830152915160009392909216916370324b7791604480820192602092909190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b50519392505050565b611060611141565b61106957600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6110bb611141565b6110c457600080fd5b600e805490829055604080518381526020810183905281517f59cbd678a801fd313f133a5efc6be7aee2814b07d41c9d9fb72f91197b2f9d4a929181900390910190a15050565b60075481565b601060209081526000928352604080842090915290825290205460ff1681565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b600b6020526000908152604090205481565b6003546001600160a01b031681565b60098181548110610dad57fe5b6002546001600160a01b031681565b611197611141565b6111a057600080fd5b6001600160a01b0381166111fe5760408051600160e51b62461bcd02815260206004820152601860248201527f696e76616c696420636f6e747261637420616464726573730000000000000000604482015290519081900360640190fd5b600454604080516001600160a01b038085168252909216602083015280517fef549604431567c0cd1b94ebc91fed6cf5cd907f6ff0b63aa1d475dcf8d4901c9281900390910190a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000600f544210156112c45760408051600160e51b62461bcd02815260206004820152601b60248201527f63616e6e6f74206379636c65207965743a20746f6f206561726c790000000000604482015290519081900360640190fd5b60055443141561131e5760408051600160e51b62461bcd02815260206004820152600c60248201527f6e6f206e657720626c6f636b0000000000000000000000000000000000000000604482015290519081900360640190fd5b60095460005b8181101561135e576113566009828154811061133c57fe5b6000918252602090912001546001600160a01b0316611f47565b600101611324565b506005805460065543905542600d819055600e54611382919063ffffffff61203f16565b600f5560035460408051600160e11b630fe37f4702815290516001600160a01b0390921691631fc6fe8e91600480820192602092909190829003018186803b1580156113cd57600080fd5b505afa1580156113e1573d6000803e3d6000fd5b505050506040513d60208110156113f757600080fd5b5051600755611404612058565b600554600654600f5460408051938452602084019290925282820152517f6611b6f4e1fb92277f863eca934cba1c2d6987070d73762b72b942720bfe43a29181900360600190a1505060055490565b61145b611141565b61146457600080fd5b6001600160a01b0381166000908152600a60205260409020546114d15760408051600160e51b62461bcd02815260206004820152601460248201527f746f6b656e206e6f742072656769737465726564000000000000000000000000604482015290519081900360640190fd5b6114da81612129565b50565b60055481565b6004546001600160a01b031681565b600a6020526000908152604090205481565b600f5481565b611512611141565b61151b57600080fd5b60035460408051600160e01b63f2fde38b0281526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b5050505050565b60065481565b6001600160a01b038082166000818152600b60209081526040808320546003548251600160e01b63a0821be302815260048101969096529151939561162995919492169263a0821be392602480840193829003018186803b1580156115f157600080fd5b505afa158015611605573d6000803e3d6000fd5b505050506040513d602081101561161b57600080fd5b50519063ffffffff61224416565b92915050565b611637611141565b61164057600080fd5b6114da81612259565b60005b81811015610fc3576116798484848481811061166457fe5b905060200201356001600160a01b0316611699565b60010161164c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60025460408051600160e01b631cedf8a30281526001600160a01b03858116600483015291516000939290921691631cedf8a391602480820192602092909190829003018186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d602081101561171757600080fd5b505190506001600160a01b0381166117795760408051600160e51b62461bcd02815260206004820152601660248201527f696e76616c6964206461726b6e6f6465206f776e657200000000000000000000604482015290519081900360640190fd5b60035460408051600160e01b6370324b770281526001600160a01b0386811660048301528581166024830152915160009392909216916370324b7791604480820192602092909190829003018186803b1580156117d557600080fd5b505afa1580156117e9573d6000803e3d6000fd5b505050506040513d60208110156117ff57600080fd5b50519050806118585760408051600160e51b62461bcd02815260206004820152601360248201527f6e6f7468696e6720746f20776974686472617700000000000000000000000000604482015290519081900360640190fd5b60035460408051600160e01b63f9ce78130281526001600160a01b03878116600483015286811660248301526044820185905285811660648301529151919092169163f9ce781391608480830192600092919082900301818387803b1580156118c057600080fd5b505af11580156118d4573d6000803e3d6000fd5b5050604080518481526001600160a01b038781166020830152825190891694507fe1f157c0881b2e477dca89772b158029611366b8e7dc8be4f6f308fa7a0aa02893509081900390910190a250505050565b6004546001600160a01b031633146119885760408051600160e51b62461bcd02815260206004820152600f60248201527f6e6f7420426c61636b6c69737465720000000000000000000000000000000000604482015290519081900360640190fd5b60025460408051600160e01b63c3c5a5470281526001600160a01b03808516600483015291518493929092169163c3c5a54791602480820192602092909190829003018186803b1580156119db57600080fd5b505afa1580156119ef573d6000803e3d6000fd5b505050506040513d6020811015611a0557600080fd5b5051611a5b5760408051600160e51b62461bcd02815260206004820152601a60248201527f6461726b6e6f6465206973206e6f742072656769737465726564000000000000604482015290519081900360640190fd5b60035460408051600160e21b633e7e4af90281526001600160a01b0385811660048301529151919092169163f9f92be491602480830192600092919082900301818387803b158015611aac57600080fd5b505af1158015611ac0573d6000803e3d6000fd5b50506040805142815290516001600160a01b03861693507fd2b847810d644004679c7a8d5f5188fe2b12b6f34dba8501760d99232fa9b7bc92509081900360200190a25050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611b8c5780601f10611b6157610100808354040283529160200191611b8c565b820191906000526020600020905b815481529060010190602001808311611b6f57829003601f168201915b505050505081565b6001600160a01b0381166000908152601060209081526040808320600654845290915290205460ff1615611c125760408051600160e51b62461bcd02815260206004820152601660248201527f72657761726420616c726561647920636c61696d656400000000000000000000604482015290519081900360640190fd5b6001600160a01b038116600090815260106020908152604080832060065484529091528120805460ff19166001179055600954905b81811015610d9557600060098281548110611c5e57fe5b60009182526020808320909101546001600160a01b0316808352600c90915260409091205490915015611d53576001600160a01b0381166000908152600c6020908152604080832054600b90925290912054611cbf9163ffffffff61224416565b6001600160a01b038083166000818152600b6020908152604080832095909555600354600c909152848220548551600160e01b63d23b90a50281528a86166004820152602481019490945260448401529351939092169263d23b90a59260648084019391929182900301818387803b158015611d3a57600080fd5b505af1158015611d4e573d6000803e3d6000fd5b505050505b50600101611c47565b600080856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611db557600080fd5b505afa158015611dc9573d6000803e3d6000fd5b505050506040513d6020811015611ddf57600080fd5b5051604080516001600160a01b0388811660248301528716604482015260648082018790528251808303909101815260849091019091526020810180516001600160e01b0316600160e01b6323b872dd02179052909150611e419087906122c7565b611e496123bd565b611e9d5760408051600160e51b62461bcd02815260206004820152601360248201527f7472616e7366657246726f6d206661696c656400000000000000000000000000604482015290519081900360640190fd5b6000866001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611ef557600080fd5b505afa158015611f09573d6000803e3d6000fd5b505050506040513d6020811015611f1f57600080fd5b50519050611f3c84611f37838563ffffffff61224416565b6123f1565b979650505050505050565b600754611f79576001600160a01b0381166000908152600b60209081526040808320839055600c9091528120556114da565b60035460408051600160e01b63a0821be30281526001600160a01b0384811660048301529151919092169163a0821be3916024808301926020929190829003018186803b158015611fc957600080fd5b505afa158015611fdd573d6000803e3d6000fd5b505050506040513d6020811015611ff357600080fd5b50516001600160a01b0382166000908152600b60205260409020819055600754612023919063ffffffff61240716565b6001600160a01b0382166000908152600c602052604090205550565b60008282018381101561205157600080fd5b9392505050565b60085460005b818110156121175760006008828154811061207557fe5b6000918252602080832090910154600980546001810182557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b03909316928317905554818452600a835260409384902055825181815292519093507fd780ddbc43f0c4efd61c5ca1bc8eeee3368abfb1f97aa7355da9f8bf8431c8ae9281900390910190a15060010161205e565b50600061212560088261242f565b5050565b600980546000919061214290600163ffffffff61224416565b8154811061214c57fe5b60009182526020808320909101546001600160a01b038581168452600a90925260408320549116925061218690600163ffffffff61224416565b9050816009828154811061219657fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600a905260408082205492851682529020556009546121e3906001612244565b6121ee60098261242f565b506001600160a01b0383166000818152600a6020908152604080832092909255815192835290517fe46f21bb6906b7d69a6c06d5662a2b6c1c59d134cd7b1235babdb1a70a4b436a9281900390910190a1505050565b60008282111561225357600080fd5b50900390565b6001600160a01b03811661226c57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6122d9826001600160a01b0316612429565b6122e257600080fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106123205780518252601f199092019160209182019101612301565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612382576040519150601f19603f3d011682016040523d82523d6000602084013e612387565b606091505b50915091508161239657600080fd5b805115610fc3578080602001905160208110156123b257600080fd5b5051610fc357600080fd5b6000803d80156123d457602081146123dd576123e9565b600191506123e9565b60206000803e60005191505b501515905090565b60008183106124005781612051565b5090919050565b600080821161241557600080fd5b600082848161242057fe5b04949350505050565b3b151590565b815481835581811115610d9557600083815260209020610d9591810190830161113e91905b808211156124685760008155600101612454565b509056fe746f6b656e20616c72656164792070656e64696e6720726567697374726174696f6ea165627a7a72305820a9a625767b70865cece90be116e98586c0a2b271187bdc6517b8df49b6bd103e0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000034bd421c7948bc16f826fd99f9b785929b121633000000000000000000000000731ea4ba77ff184d89dbeb160a0078274acbe9d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000034bd421c7948bc16f826fd99f9b785929b121633000000000000000000000000731ea4ba77ff184d89dbeb160a0078274acbe9d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000"
}