{
  "address": "0x2bdc0d42996017fce214b21607a515da41a9e0c5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SkinCoin Token",
  "contractName": "SkinCoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-09\n*/\n\npragma solidity ^0.4.11;\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract Ownable {\n    address public owner;\n    function Ownable() {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n/*\n * Pausable\n * Abstract contract that allows children to implement an\n * emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  bool public stopped;\n  modifier stopInEmergency {\n    if (stopped) {\n      throw;\n    }\n    _;\n  }\n  \n  modifier onlyInEmergency {\n    if (!stopped) {\n      throw;\n    }\n    _;\n  }\n  // called by the owner on emergency, triggers stopped state\n  function emergencyStop() external onlyOwner {\n    stopped = true;\n  }\n  // called by the owner on end of emergency, returns to normal state\n  function release() external onlyOwner onlyInEmergency {\n    stopped = false;\n  }\n}\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n/*\n * PullPayment\n * Base contract supporting async send for pull payments.\n * Inherit from this contract and use asyncSend instead of send.\n */\ncontract PullPayment {\n  using SafeMath for uint;\n  \n  mapping(address => uint) public payments;\n  event LogRefundETH(address to, uint value);\n  /**\n  *  Store sent amount as credit to be pulled, called by payer \n  **/\n  function asyncSend(address dest, uint amount) internal {\n    payments[dest] = payments[dest].add(amount);\n  }\n  // withdraw accumulated balance, called by payee\n  function withdrawPayments() {\n    address payee = msg.sender;\n    uint payment = payments[payee];\n    \n    if (payment == 0) {\n      throw;\n    }\n    if (this.balance < payment) {\n      throw;\n    }\n    payments[payee] = 0;\n    if (!payee.send(payment)) {\n      throw;\n    }\n    LogRefundETH(payee,payment);\n  }\n}\ncontract BasicToken is ERC20Basic {\n  \n  using SafeMath for uint;\n  \n  mapping(address => uint) balances;\n  \n  /*\n   * Fix for the ERC20 short address attack  \n  */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\ncontract StandardToken is BasicToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n  function approve(address _spender, uint _value) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n/**\n *  SkinCoin token contract. Implements\n */\ncontract SkinCoin is StandardToken, Ownable {\n  string public constant name = \"SkinCoin\";\n  string public constant symbol = \"SKIN\";\n  uint public constant decimals = 6;\n  // Constructor\n  function SkinCoin() {\n      totalSupply = 1000000000000000;\n      balances[msg.sender] = totalSupply; // Send all tokens to owner\n  }\n  /**\n   *  Burn away the specified amount of SkinCoin tokens\n   */\n  function burn(uint _value) onlyOwner returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Transfer(msg.sender, 0x0, _value);\n    return true;\n  }\n}\n/*\n  Crowdsale Smart Contract for the skincoin.org project\n  This smart contract collects ETH, and in return emits SkinCoin tokens to the backers\n*/\ncontract Crowdsale is Pausable, PullPayment {\n    \n    using SafeMath for uint;\n    struct Backer {\n        uint weiReceived; // Amount of Ether given\n        uint coinSent;\n    }\n    /*\n    * Constants\n    */\n    /* Minimum number of SkinCoin to sell */\n    uint public constant MIN_CAP = 30000000000000; // 30,000,000 SkinCoins\n    /* Maximum number of SkinCoin to sell */\n    uint public constant MAX_CAP = 600000000000000; // 600,000,000 SkinCoins\n    /* Minimum amount to invest */\n    uint public constant MIN_INVEST_ETHER = 100 finney;\n    /* Crowdsale period */\n    uint private constant CROWDSALE_PERIOD = 30 days;\n    /* Number of SkinCoins per Ether */\n    uint public constant COIN_PER_ETHER = 6000000000; // 6,000 SkinCoins\n    /*\n    * Variables\n    */\n    /* SkinCoin contract reference */\n    SkinCoin public coin;\n    /* Multisig contract that will receive the Ether */\n    address public multisigEther;\n    /* Number of Ether received */\n    uint public etherReceived;\n    /* Number of SkinCoins sent to Ether contributors */\n    uint public coinSentToEther;\n    /* Crowdsale start time */\n    uint public startTime;\n    /* Crowdsale end time */\n    uint public endTime;\n    /* Is crowdsale still on going */\n    bool public crowdsaleClosed;\n    /* Backers Ether indexed by their Ethereum address */\n    mapping(address => Backer) public backers;\n    /*\n    * Modifiers\n    */\n    modifier minCapNotReached() {\n        if ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n        _;\n    }\n    modifier respectTimeFrame() {\n        if ((now < startTime) || (now > endTime )) throw;\n        _;\n    }\n    /*\n     * Event\n    */\n    event LogReceivedETH(address addr, uint value);\n    event LogCoinsEmited(address indexed from, uint amount);\n    /*\n     * Constructor\n    */\n    function Crowdsale(address _skinCoinAddress, address _to) {\n        coin = SkinCoin(_skinCoinAddress);\n        multisigEther = _to;\n    }\n    /* \n     * The fallback function corresponds to a donation in ETH\n     */\n    function() stopInEmergency respectTimeFrame payable {\n        receiveETH(msg.sender);\n    }\n    /* \n     * To call to start the crowdsale\n     */\n    function start() onlyOwner {\n        if (startTime != 0) throw; // Crowdsale was already started\n        startTime = now ;            \n        endTime =  now + CROWDSALE_PERIOD;    \n    }\n    /*\n     *  Receives a donation in Ether\n    */\n    function receiveETH(address beneficiary) internal {\n        if (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold\n        \n        uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of SkinCoin to send\n        if (coinToSend.add(coinSentToEther) > MAX_CAP) throw;    \n        Backer backer = backers[beneficiary];\n        coin.transfer(beneficiary, coinToSend); // Transfer SkinCoins right now \n        backer.coinSent = backer.coinSent.add(coinToSend);\n        backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \n        etherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n        coinSentToEther = coinSentToEther.add(coinToSend);\n        // Send events\n        LogCoinsEmited(msg.sender ,coinToSend);\n        LogReceivedETH(beneficiary, etherReceived); \n    }\n    \n    /*\n     *Compute the SkinCoin bonus according to the investment period\n     */\n    function bonus(uint amount) internal constant returns (uint) {\n        if (now < startTime.add(2 days)) return amount.add(amount.div(5));   // bonus 20%\n        return amount;\n    }\n    /*  \n     * Finalize the crowdsale, should be called after the refund period\n    */\n    function finalize() onlyOwner public {\n        if (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\n            if (coinSentToEther == MAX_CAP) {\n            } else {\n                throw;\n            }\n        }\n        if (coinSentToEther < MIN_CAP && now < endTime + 15 days) throw; // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\n        if (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n        \n        uint remains = coin.balanceOf(this);\n        if (remains > 0) { // Burn the rest of SkinCoins\n            if (!coin.burn(remains)) throw ;\n        }\n        crowdsaleClosed = true;\n    }\n    /*  \n    * Failsafe drain\n    */\n    function drain() onlyOwner {\n        if (!owner.send(this.balance)) throw;\n    }\n    /**\n     * Allow to change the team multisig address in the case of emergency.\n     */\n    function setMultisig(address addr) onlyOwner public {\n        if (addr == address(0)) throw;\n        multisigEther = addr;\n    }\n    /**\n     * Manually back SkinCoin owner address.\n     */\n    function backSkinCoinOwner() onlyOwner public {\n        coin.transferOwnership(owner);\n    }\n    /**\n     * Transfer remains to owner in case if impossible to do min invest\n     */\n    function getRemainCoins() onlyOwner public {\n        var remains = MAX_CAP - coinSentToEther;\n        uint minCoinsToSell = bonus(MIN_INVEST_ETHER.mul(COIN_PER_ETHER) / (1 ether));\n        if(remains > minCoinsToSell) throw;\n        Backer backer = backers[owner];\n        coin.transfer(owner, remains); // Transfer SkinCoins right now \n        backer.coinSent = backer.coinSent.add(remains);\n        coinSentToEther = coinSentToEther.add(remains);\n        // Send events\n        LogCoinsEmited(this ,remains);\n        LogReceivedETH(owner, etherReceived); \n    }\n    /* \n     * When MIN_CAP is not reach:\n     * 1) backer call the \"approve\" function of the SkinCoin token contract with the amount of all SkinCoins they got in order to be refund\n     * 2) backer call the \"refund\" function of the Crowdsale contract with the same amount of SkinCoins\n     * 3) backer call the \"withdrawPayments\" function of the Crowdsale contract to get a refund in ETH\n     */\n    function refund(uint _value) minCapNotReached public {\n        \n        if (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\n        coin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n        if (!coin.burn(_value)) throw ; // token sent for refund are burnt\n        uint ETHToSend = backers[msg.sender].weiReceived;\n        backers[msg.sender].weiReceived=0;\n        if (ETHToSend > 0) {\n            asyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000c57fe5b5b5b60038054600160a060020a03191633600160a060020a03161790555b66038d7ea4c680006000818155600160a060020a0333168152600160205260409020555b5b6107e98061005e6000396000f3006060604052361561009e5763ffffffff60e060020a60003504166306fdde0381146100a0578063095ea7b31461013057806318160ddd1461015157806323b872dd14610173578063313ce5671461019a57806342966c68146101bc57806370a08231146101e35780638da5cb5b1461021157806395d89b411461023d578063a9059cbb146102cd578063dd62ed3e146102ee578063f2fde38b14610322575bfe5b34156100a857fe5b6100b0610340565b6040805160208082528351818301528351919283929083019185019080838382156100f6575b8051825260208311156100f657601f1990920191602091820191016100d6565b505050905090810190601f1680156101225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013857fe5b61014f600160a060020a0360043516602435610365565b005b341561015957fe5b610161610405565b60408051918252519081900360200190f35b341561017b57fe5b61014f600160a060020a036004358116906024351660443561040b565b005b34156101a257fe5b61016161051d565b60408051918252519081900360200190f35b34156101c457fe5b6101cf600435610522565b604080519115158252519081900360200190f35b34156101eb57fe5b610161600160a060020a03600435166105d3565b60408051918252519081900360200190f35b341561021957fe5b6102216105f2565b60408051600160a060020a039092168252519081900360200190f35b341561024557fe5b6100b0610601565b6040805160208082528351818301528351919283929083019185019080838382156100f6575b8051825260208311156100f657601f1990920191602091820191016100d6565b505050905090810190601f1680156101225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102d557fe5b61014f600160a060020a0360043516602435610622565b005b34156102f657fe5b610161600160a060020a03600435811690602435166106de565b60408051918252519081900360200190f35b341561032a57fe5b61014f600160a060020a036004351661070b565b005b604080518082019091526008815260c160020a6729b5b4b721b7b4b702602082015281565b80158015906103985750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156103a35760006000fd5b600160a060020a03338116600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35b5050565b60005481565b60006060606436101561041e5760006000fd5b600160a060020a038086166000908152600260209081526040808320338516845282528083205493881683526001909152902054909250610465908463ffffffff61075716565b600160a060020a03808616600090815260016020526040808220939093559087168152205461049a908463ffffffff61077316565b600160a060020a0386166000908152600160205260409020556104c3828463ffffffff61077316565b600160a060020a0380871660008181526002602090815260408083203386168452825291829020949094558051878152905192881693919260008051602061079e833981519152929181900390910190a35b5b5050505050565b600681565b60035460009033600160a060020a039081169116146105415760006000fd5b600160a060020a03331660009081526001602052604090205461056a908363ffffffff61077316565b600160a060020a03331660009081526001602052604081209190915554610597908363ffffffff61077316565b6000908155604080518481529051600160a060020a0333169160008051602061079e833981519152919081900360200190a35060015b5b919050565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b604080518082019091526004815260e160020a6329a5a4a702602082015281565b604060443610156106335760006000fd5b600160a060020a03331660009081526001602052604090205461065c908363ffffffff61077316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610691908363ffffffff61075716565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193339093169260008051602061079e83398151915292918290030190a35b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146107275760006000fd5b600160a060020a038116156107525760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b60008282016107688482101561078c565b8091505b5092915050565b60006107818383111561078c565b508082035b92915050565b8015156107525760006000fd5b5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820dcd73a7dc10e751871b22500ac39d1ef1d5338a3d40720276808cf53bf01be8f0029"
}