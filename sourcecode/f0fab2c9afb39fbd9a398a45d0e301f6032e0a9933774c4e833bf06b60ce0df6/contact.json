{
  "address": "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FoundationTipJar",
  "contractName": "Congress",
  "compilerVersion": "v0.2.0-2016-01-13-d2f18c7",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-08-05\n*/\n\ncontract owned {\n        address public owner;\n\n        function owned() {\n                owner = msg.sender;\n        }\n\n        modifier onlyOwner {\n                if (msg.sender != owner) throw;\n                _\n        }\n\n        function transferOwnership(address newOwner) onlyOwner {\n                owner = newOwner;\n        }\n}\n\n/* The token is used as a voting shares */\ncontract token {\n        function mintToken(address target, uint256 mintedAmount);\n}\n\ncontract Congress is owned {\n\n        /* Contract Variables and events */\n        uint public minimumQuorum;\n        uint public debatingPeriodInMinutes;\n        int public majorityMargin;\n        Proposal[] public proposals;\n        uint public numProposals;\n        mapping(address => uint) public memberId;\n        Member[] public members;\n\n        address public unicornAddress;\n        uint public priceOfAUnicornInFinney;\n\n        event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\n        event Voted(uint proposalID, bool position, address voter, string justification);\n        event ProposalTallied(uint proposalID, int result, uint quorum, bool active);\n        event MembershipChanged(address member);\n        event ChangeOfRules(uint minimumQuorum, uint debatingPeriodInMinutes, int majorityMargin);\n\n        struct Proposal {\n                address recipient;\n                uint amount;\n                string description;\n                uint votingDeadline;\n                bool executed;\n                bool proposalPassed;\n                uint numberOfVotes;\n                int currentResult;\n                bytes32 proposalHash;\n                Vote[] votes;\n                mapping(address => bool) voted;\n        }\n\n        struct Member {\n                address member;\n                uint voteWeight;\n                bool canAddProposals;\n                string name;\n                uint memberSince;\n        }\n\n        struct Vote {\n                bool inSupport;\n                address voter;\n                string justification;\n        }\n\n\n        /* First time setup */\n        function Congress(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority, address congressLeader) {\n                minimumQuorum = minimumQuorumForProposals;\n                debatingPeriodInMinutes = minutesForDebate;\n                majorityMargin = marginOfVotesForMajority;\n                members.length++;\n                members[0] = Member({\n                        member: 0,\n                        voteWeight: 0,\n                        canAddProposals: false,\n                        memberSince: now,\n                        name: ''\n                });\n                if (congressLeader != 0) owner = congressLeader;\n\n        }\n\n        /*make member*/\n        function changeMembership(address targetMember, uint voteWeight, bool canAddProposals, string memberName) onlyOwner {\n                uint id;\n                if (memberId[targetMember] == 0) {\n                        memberId[targetMember] = members.length;\n                        id = members.length++;\n                        members[id] = Member({\n                                member: targetMember,\n                                voteWeight: voteWeight,\n                                canAddProposals: canAddProposals,\n                                memberSince: now,\n                                name: memberName\n                        });\n                } else {\n                        id = memberId[targetMember];\n                        Member m = members[id];\n                        m.voteWeight = voteWeight;\n                        m.canAddProposals = canAddProposals;\n                        m.name = memberName;\n                }\n\n                MembershipChanged(targetMember);\n\n        }\n\n        /*change rules*/\n        function changeVotingRules(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority) onlyOwner {\n                minimumQuorum = minimumQuorumForProposals;\n                debatingPeriodInMinutes = minutesForDebate;\n                majorityMargin = marginOfVotesForMajority;\n\n                ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, majorityMargin);\n        }\n\n        // ribbonPriceInEther\n        function changeUnicorn(uint newUnicornPriceInFinney, address newUnicornAddress) onlyOwner {\n                unicornAddress = newUnicornAddress;\n                priceOfAUnicornInFinney = newUnicornPriceInFinney;\n        }\n\n        /* Function to create a new proposal */\n        function newProposalInWei(address beneficiary, uint weiAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n\n                proposalID = proposals.length++;\n                Proposal p = proposals[proposalID];\n                p.recipient = beneficiary;\n                p.amount = weiAmount;\n                p.description = JobDescription;\n                p.proposalHash = sha3(beneficiary, weiAmount, transactionBytecode);\n                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n                p.executed = false;\n                p.proposalPassed = false;\n                p.numberOfVotes = 0;\n                ProposalAdded(proposalID, beneficiary, weiAmount, JobDescription);\n                numProposals = proposalID + 1;\n        }\n\n        /* Function to create a new proposal */\n        function newProposalInEther(address beneficiary, uint etherAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n\n                proposalID = proposals.length++;\n                Proposal p = proposals[proposalID];\n                p.recipient = beneficiary;\n                p.amount = etherAmount * 1 ether;\n                p.description = JobDescription;\n                p.proposalHash = sha3(beneficiary, etherAmount * 1 ether, transactionBytecode);\n                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n                p.executed = false;\n                p.proposalPassed = false;\n                p.numberOfVotes = 0;\n                ProposalAdded(proposalID, beneficiary, etherAmount, JobDescription);\n                numProposals = proposalID + 1;\n        }\n\n        /* function to check if a proposal code matches */\n        function checkProposalCode(uint proposalNumber, address beneficiary, uint amount, bytes transactionBytecode) constant returns(bool codeChecksOut) {\n                Proposal p = proposals[proposalNumber];\n                return p.proposalHash == sha3(beneficiary, amount, transactionBytecode);\n        }\n\n        function vote(uint proposalNumber, bool supportsProposal, string justificationText) returns(uint voteID) {\n                if (memberId[msg.sender] == 0) throw;\n\n                uint voteWeight = members[memberId[msg.sender]].voteWeight;\n\n                Proposal p = proposals[proposalNumber]; // Get the proposal\n                if (p.voted[msg.sender] == true) throw; // If has already voted, cancel\n                p.voted[msg.sender] = true; // Set this voter as having voted\n                p.numberOfVotes += voteWeight; // Increase the number of votes\n                if (supportsProposal) { // If they support the proposal\n                        p.currentResult += int(voteWeight); // Increase score\n                } else { // If they don't\n                        p.currentResult -= int(voteWeight); // Decrease the score\n                }\n                // Create a log of this event\n                Voted(proposalNumber, supportsProposal, msg.sender, justificationText);\n        }\n\n        function executeProposal(uint proposalNumber, bytes transactionBytecode) returns(int result) {\n                Proposal p = proposals[proposalNumber];\n                /* Check if the proposal can be executed */\n                if (now < p.votingDeadline // has the voting deadline arrived?  \n                        || p.executed // has it been already executed? \n                        || p.proposalHash != sha3(p.recipient, p.amount, transactionBytecode) // Does the transaction code match the proposal? \n                        || p.numberOfVotes < minimumQuorum) // has minimum quorum?\n                        throw;\n\n                /* execute result */\n                if (p.currentResult > majorityMargin) {\n                        /* If difference between support and opposition is larger than margin */\n                        p.recipient.call.value(p.amount)(transactionBytecode);\n                        p.executed = true;\n                        p.proposalPassed = true;\n                } else {\n                        p.executed = true;\n                        p.proposalPassed = false;\n                }\n                // Fire Events\n                ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n        }\n\n        function() {\n                if (msg.value > priceOfAUnicornInFinney) {\n                        token unicorn = token(unicornAddress);\n                        unicorn.mintToken(msg.sender, msg.value / (priceOfAUnicornInFinney * 1 finney));\n                }\n\n        }\n}\n\n\ncontract MyToken is owned {\n        /* Public variables of the token */\n        string public name;\n        string public symbol;\n        uint8 public decimals;\n        uint256 public totalSupply;\n\n        /* This creates an array with all balances */\n        mapping(address => uint256) public balanceOf;\n        mapping(address => bool) public frozenAccount;\n        mapping(address => mapping(address => uint)) public allowance;\n        mapping(address => mapping(address => uint)) public spentAllowance;\n\n\n        /* This generates a public event on the blockchain that will notify clients */\n        event Transfer(address indexed from, address indexed to, uint256 value);\n        event FrozenFunds(address target, bool frozen);\n\n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        function MyToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter) {\n                if (centralMinter != 0) owner = centralMinter; // Sets the minter\n                balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens                    \n                name = tokenName; // Set the name for display purposes     \n                symbol = tokenSymbol; // Set the symbol for display purposes    \n                decimals = decimalUnits; // Amount of decimals for display purposes        \n                totalSupply = initialSupply;\n        }\n\n        /* Send coins */\n        function transfer(address _to, uint256 _value) {\n                if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough   \n                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n                if (frozenAccount[msg.sender]) throw; // Check if frozen\n                balanceOf[msg.sender] -= _value; // Subtract from the sender\n                balanceOf[_to] += _value; // Add the same to the recipient            \n                Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n        }\n\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n                balanceOf[target] += mintedAmount;\n                totalSupply += mintedAmount;\n                Transfer(owner, target, mintedAmount);\n        }\n\n        function freezeAccount(address target, bool freeze) onlyOwner {\n                frozenAccount[target] = freeze;\n                FrozenFunds(target, freeze);\n        }\n\n        function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n                if (balanceOf[_from] < _value) throw; // Check if the sender has enough   \n                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n                if (frozenAccount[_from]) throw; // Check if frozen\n                if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw; // Check allowance\n                balanceOf[_from] -= _value; // Subtract from the sender\n                balanceOf[_to] += _value; // Add the same to the recipient            \n                spentAllowance[_from][msg.sender] += _value;\n                Transfer(msg.sender, _to, _value);\n        }\n\n        function approve(address _spender, uint256 _value) returns(bool success) {\n                allowance[msg.sender][_spender] = _value;\n        }\n\n        function() {\n                //owner.send(msg.value);\n                throw;\n        }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"currentResult\",\"type\":\"int256\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"name\":\"result\",\"type\":\"int256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOfAUnicornInFinney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnicornPriceInFinney\",\"type\":\"uint256\"},{\"name\":\"newUnicornAddress\",\"type\":\"address\"}],\"name\":\"changeUnicorn\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"name\":\"canAddProposals\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"memberSince\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetMember\",\"type\":\"address\"},{\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"name\":\"canAddProposals\",\"type\":\"bool\"},{\"name\":\"memberName\",\"type\":\"string\"}],\"name\":\"changeMembership\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"JobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposalInWei\",\"outputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"majorityMargin\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"JobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposalInEther\",\"outputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumQuorumForProposals\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"},{\"name\":\"marginOfVotesForMajority\",\"type\":\"int256\"}],\"name\":\"changeVotingRules\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"supportsProposal\",\"type\":\"bool\"},{\"name\":\"justificationText\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"voteID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"codeChecksOut\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"name\":\"minimumQuorumForProposals\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"},{\"name\":\"marginOfVotesForMajority\",\"type\":\"int256\"},{\"name\":\"congressLeader\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MembershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minimumQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"debatingPeriodInMinutes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"majorityMargin\",\"type\":\"int256\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"}]",
  "bytecode": "6060604052604051608080611b95833960e06040529051905160a05160c05160008054600160a060020a03191633179055600184815560028490556003839055600780549182018082558280158290116100c25760008390526100c2906005908102600080516020611b75833981519152908101918402016101bb565b50506080919091015160049190910155600160a060020a0381166000146100b05760008054600160a060020a031916821790555b50505050611903806102726000396000f35b50506040805160a081018252600080825260208281018290528284018290528351908101909352808352606082019290925242608082015260078054919450925081101561000257908152600080516020611b75833981519152905081518154600160a060020a03191617815560208281015160018381019190915560408401516002848101805460ff191690921790915560608501518051600386018054600082815287902091969581161561010002600019011693909304601f9081018590048401949193929091019083901061024157805160ff19168380011785555b5061007c929150610229565b5050600060048201556001015b8082111561023d578054600160a060020a0319168155600060018281018290556002838101805460ff19169055600384018054848255909281161561010002600019011604601f81901061020f57506101ae565b601f0160209004906000526020600020908101906101ae91905b8082111561023d5760008155600101610229565b5090565b828001600101855582156101a2579182015b828111156101a25782518260005055916020019190600101906102535600606060405236156100e55760e060020a6000350463013cf08b8114610173578063237e9492146101e05780633910682114610327578063400e39491461033f57806350c3487814610348578063522103fa146103515780635daf08ca1461037657806369bd3436146104475780638160f0b514610450578063824dbc9a1461045957806383876bc9146104c55780638da5cb5b146105ad578063aa02a90f146105bf578063b7782455146105c8578063b9f256cd146105da578063bcca1fd3146106c2578063d3c0715b146106ea578063eceb29451461075f578063f2fde38b1461083b575b61085d60095460009034111561017057604080516008546009547f79c65068000000000000000000000000000000000000000000000000000000008352600160a060020a03338116600485015266038d7ea4c680009190910234046024840152925192169283926379c65068926044818101939291829003018183876161da5a03f115610002575050505b50565b61085f6004356004805482908110156100025790600052602060002090600a02016000506005810154815460018301546003840154600485015460068601546007870154600160a060020a03959095169750929560020194919360ff828116946101009093041692919089565b60408051602060248035600481810135601f81018590048502860185019096528585526109389581359591946044949293909201918190840183828082843750949650505050505050600060006004600050848154811015610002575090527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e600a8402908101546000805160206118e38339815191529091019042108061028c5750600481015460ff165b8061030d57508060000160009054906101000a9004600160a060020a03168160010160005054846040518084600160a060020a0316606060020a0281526014018381526020018280519060200190808383829060006004602084601f0104600f02600301f15090500193505050506040518091039020816007016000505414155b8061031d57506001546005820154105b1561178e57610002565b61093860043560066020526000908152604090205481565b61093860055481565b61093860095481565b61085d600435602435600054600160a060020a039081163390911614610e2057610002565b61094a60043560078054829081101561000257506000526005027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888101547fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6898201547fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8301546000805160206118c3833981519152840154600160a060020a039390931693919260ff16917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b019085565b61093860025481565b61093860015481565b604080516020606435600481810135601f810184900484028501840190955284845261085d94813594602480359560443595608494920191908190840183828082843750949650505050505050600080548190600160a060020a039081163390911614610a2c57610002565b604080516020604435600481810135601f8101849004840285018401909552848452610938948135946024803595939460649492939101918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897608497919650602491909101945090925082915084018382808284375094965050505050505033600160a060020a031660009081526006602052604081205481908114806105a35750604081205460078054909190811015610002579082526005026000805160206118c3833981519152015460ff16155b15610fb157610002565b6109fa600054600160a060020a031681565b61093860035481565b6109fa600854600160a060020a031681565b604080516020604435600481810135601f8101849004840285018401909552848452610938948135946024803595939460649492939101918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897608497919650602491909101945090925082915084018382808284375094965050505050505033600160a060020a031660009081526006602052604081205481908114806106b85750604081205460078054909190811015610002579082526005026000805160206118c3833981519152015460ff16155b156111d457610002565b61085d600435602435604435600054600160a060020a039081163390911614610dcc57610002565b604080516020604435600481810135601f810184900484028501840190955284845261093894813594602480359593946064949293910191819084018382808284375094965050505050505033600160a060020a0316600090815260066020526040812054819081908114156115d757610002565b604080516020606435600481810135601f81018490048402850184019095528484526109389481359460248035956044359560849492019190819084018382808284375094965050505050505060006000600460005086815481101561000257908252600a026000805160206118e383398151915201815090508484846040518084600160a060020a0316606060020a0281526014018381526020018280519060200190808383829060006004602084601f0104600f02600301f150905001935050505060405180910390208160070160005054149150610fa8565b61085d600435600054600160a060020a039081163390911614610a1757610002565b005b604051808a600160a060020a03168152602001898152602001806020018881526020018781526020018681526020018581526020018481526020018381526020018281038252898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b50509a505050505050505050505060405180910390f35b60408051918252519081900360200190f35b60408051600160a060020a0387168152602081018690529081018490526080810182905260a0606082018181528454600260018216156101000260001901909116049183018290529060c0830190859080156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b5050965050505050505060405180910390f35b60408051600160a060020a03929092168252519081900360200190f35b60008054600160a060020a0319168217905550565b600160a060020a0386166000908152600660205260408120541415610a88576040600020600780549182905560018201808255828015829011610b9b57600502816005028360005260206000209182019101610b9b9190610c8a565b600160a060020a0386166000908152600660205260409020546007805491935090839081101561000257506000908152600583027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68981018790556000805160206118c38339815191528101805460ff19168717905584517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b820180548185526020948590207fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688949094019550909360026001831615610100026000190190921691909104601f90810182900484019391880190839010610d9c57805160ff19168380011785555b50610d55929150610cf8565b5050509150815060a06040519081016040528087815260200186815260200185815260200184815260200142815260200150600760005083815481101561000257906000526020600020906005020160005081518154600160a060020a03191617815560208281015160018381019190915560028381018054604087015160ff199190911617905560608501518051600386018054600082815287902091969581161561010002600019011693909304601f90810185900484019491939290910190839010610d1057805160ff19168380011785555b50610d40929150610cf8565b5050600060048201556001015b80821115610d0c578054600160a060020a0319168155600060018281018290556002838101805460ff19169055600384018054848255909281161561010002600019011604601f819010610cde5750610c7d565b601f016020900490600052602060002090810190610c7d91905b80821115610d0c5760008155600101610cf8565b5090565b82800160010185558215610c71579182015b82811115610c71578251826000505591602001919060010190610d22565b50506080919091015160049190910155610d58565b50505b60408051600160a060020a038816815290517f4cea7af04e7093442a4d8d039e7b517557c4787a8cf68f900473c9bf3abfae4c9181900360200190a1505050505050565b82800160010185558215610b8f579182015b82811115610b8f578251826000505591602001919060010190610dae565b600183905560028290556003819055604080518481526020810184905280820183905290517fa439d3fa452be5e0e1e24a8145e715f4fd8b9c08c96a42fd82a855a85e5d57de9181900360600190a1505050565b60088054600160a060020a0319169091179055600955565b50508585846040518084600160a060020a0316606060020a0281526014018381526020018280519060200190808383829060006004602084601f0104600f02600301f150905001935050505060405180910390208160070160005081905550600260005054603c024201816003016000508190555060008160040160006101000a81548160ff0219169083021790555060008160040160016101000a81548160ff02191690830217905550600081600501600050819055507f646fec02522b41e7125cfc859a64fd4f4cefd5dc3b6237ca0abe251ded1fa881828787876040518085815260200184600160a060020a03168152602001838152602001806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610f905780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1600182016005555b50949350505050565b6004805460018101808355909190828015829011610fe857600a0281600a028360005260206000209182019101610fe89190611084565b505060048054929450918491508110156100025790600052602060002090600a02016000508054600160a060020a031916871781556001818101879055855160028381018054600082815260209081902096975091959481161561010002600019011691909104601f908101829004840193918901908390106111a457805160ff19168380011785555b50610e38929150610cf8565b50506001015b80821115610d0c578054600160a060020a03191681556000600182810182905560028381018054848255909281161561010002600019011604601f81901061116857505b5060006003830181905560048301805461ffff19169055600583018190556006830181905560078301819055600883018054828255908252602090912061107e916002028101905b80821115610d0c57805474ffffffffffffffffffffffffffffffffffffffffff1916815560018181018054600080835592600290821615610100026000190190911604601f81901061118657505b5050600101611110565b601f0160209004906000526020600020908101906110c89190610cf8565b601f01602090049060005260206000209081019061115e9190610cf8565b82800160010185558215611072579182015b828111156110725782518260005055916020019190600101906111b6565b600480546001810180835590919082801582901161121557600083905261121590600a9081026000805160206118e383398151915290810191840201611306565b5050600480549294509184915081101561000257506000908152600a83026000805160206118e383398151915281018054600160a060020a03191689178155670de0b6b3a764000088027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83015586517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d929092018054818552602094859020929550909360026001831615610100026000190190921691909104601f908101829004830193929189019083901061142657805160ff19168380011785555b50611456929150610cf8565b50506001015b80821115610d0c578054600160a060020a03191681556000600182810182905560028381018054848255909281161561010002600019011604601f8190106113ea57505b5060006003830181905560048301805461ffff191690556005830181905560068301819055600783018190556008830180548282559082526020909120611300916002028101905b80821115610d0c57805474ffffffffffffffffffffffffffffffffffffffffff1916815560018181018054600080835592600290821615610100026000190190911604601f81901061140857505b5050600101611392565b601f01602090049060005260206000209081019061134a9190610cf8565b601f0160209004906000526020600020908101906113e09190610cf8565b828001600101855582156112f4579182015b828111156112f4578251826000505591602001919060010190611438565b50508585670de0b6b3a764000002846040518084600160a060020a0316606060020a0281526014018381526020018280519060200190808383829060006004602084601f0104600f02600301f150905001935050505060405180910390208160070160005081905550600260005054603c024201816003016000508190555060008160040160006101000a81548160ff0219169083021790555060008160040160016101000a81548160ff02191690830217905550600081600501600050819055507f646fec02522b41e7125cfc859a64fd4f4cefd5dc3b6237ca0abe251ded1fa881828787876040518085815260200184600160a060020a03168152602001838152602001806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610f905780820380516001836020036101000a03191681526020019150509550505050505060405180910390a16001820160055550949350505050565b33600160a060020a03166000908152600660205260409020546007805490919081101561000257600091909152600480546005929092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68901549350908790811015610002576000918252600a026000805160206118e383398151915201905033600160a060020a0316600090815260098201602052604090205490915060ff166001141561168557610002565b33600160a060020a031660009081526009820160205260409020805460ff191660011790556005810180548301905584156116c957600681018054830190556116d5565b60068101805483900390555b7fc34f869b7ff431b034b7b9aea9822dac189a685e0b015c7d1be3add3f89128e8868633876040518085815260200184815260200183600160a060020a03168152602001806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156117755780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150509392505050565b600681015460035490131561184a578060000160009054906101000a9004600160a060020a0316600160a060020a0316816001016000505484604051808280519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156118145780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876185025a03f15050505060048101805460ff191660011761ff00191661010017905561185f565b60048101805460ff191660011761ff00191690555b60068101546005820154600483015460408051888152602081019490945283810192909252610100900460ff166060830152517fd220b7272a8b6d0d7d6bcdace67b936a8f175e6d5c1b3ee438b72256b32ab3af9181900360800190a1509291505056a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19ba66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}