{
  "address": "0xffb4e34067f99b2f42dc55ce17417241d6bc59d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BankerFarmer",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.20; \n\n\n\ncontract BankerFarmer{\n    //uint256 EGGS_PER_BANKER_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1BANKER=86400;//for final version should be seconds in a day\n    uint256 public STARTING_BANKER=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryBanker;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    uint256 public bankermasterReq=100000;\n    function BankerFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function becomeBankermaster() public{\n        require(initialized);\n        require(hatcheryBanker[msg.sender]>=bankermasterReq);\n        hatcheryBanker[msg.sender]=SafeMath.sub(hatcheryBanker[msg.sender],bankermasterReq);\n        bankermasterReq=SafeMath.add(bankermasterReq,100000);//+100k bankers each time\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newBanker=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1BANKER);\n        hatcheryBanker[msg.sender]=SafeMath.add(hatcheryBanker[msg.sender],newBanker);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf banker hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        // kill one third of the owner's bankers on egg sale\n        hatcheryBanker[msg.sender]=SafeMath.mul(SafeMath.div(hatcheryBanker[msg.sender],3),2);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeBanker() public payable{\n        require(initialized);\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n        ceoAddress.transfer(msg.value); //bankermaster gets this entrance fee\n        require(hatcheryBanker[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryBanker[msg.sender]=STARTING_BANKER;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyBanker() public view returns(uint256){\n        return hatcheryBanker[msg.sender];\n    }\n    function getBankermasterReq() public view returns(uint256){\n        return bankermasterReq;\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1BANKER,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryBanker[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60606040526201518060005561012c6001556127106002556113886003556000600460006101000a81548160ff021916908315150217905550620186a0600a55341561004a57600080fd5b33600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061153b8061009a6000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f81681461015957806312065fe0146101ae578063158ef93e146101d75780631b8d0e6014610204578063229824c41461022d57806326fd8422146102765780632e9392bb146102b65780633955f0fe146102df5780633b653755146102f45780633bc0461a1461030c5780633ec862a81461034357806343ce74221461037c578063467ece79146103a55780634f74acfe146103f257806370926370146103fc57806372670361146104255780637e56fde5146104725780638e316327146104a95780639ca423b3146104e0578063c3c503b714610559578063cad7a58b1461056e578063d7c8843b146105bb578063dc7fc89814610608578063e6bcc29714610631578063fba9ecac1461065a578063fbf184c614610664575b600080fd5b341561016457600080fd5b61016c61068d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101b957600080fd5b6101c16106b3565b6040518082815260200191505060405180910390f35b34156101e257600080fd5b6101ea6106d2565b604051808215151515815260200191505060405180910390f35b341561020f57600080fd5b6102176106e5565b6040518082815260200191505060405180910390f35b341561023857600080fd5b610260600480803590602001909190803590602001909190803590602001909190505061072c565b6040518082815260200191505060405180910390f35b341561028157600080fd5b6102a0600480803590602001909190803590602001909190505061077f565b6040518082815260200191505060405180910390f35b34156102c157600080fd5b6102c9610796565b6040518082815260200191505060405180910390f35b34156102ea57600080fd5b6102f261079c565b005b61030a60048080359060200190919050506109be565b005b341561031757600080fd5b61032d60048080359060200190919050506109f4565b6040518082815260200191505060405180910390f35b341561034e57600080fd5b61037a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a12565b005b341561038757600080fd5b61038f610e66565b6040518082815260200191505060405180910390f35b34156103b057600080fd5b6103dc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ebe565b6040518082815260200191505060405180910390f35b6103fa610ed6565b005b341561040757600080fd5b61040f61102c565b6040518082815260200191505060405180910390f35b341561043057600080fd5b61045c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611032565b6040518082815260200191505060405180910390f35b341561047d57600080fd5b610493600480803590602001909190505061104a565b6040518082815260200191505060405180910390f35b34156104b457600080fd5b6104ca6004808035906020019091905050611074565b6040518082815260200191505060405180910390f35b34156104eb57600080fd5b610517600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056457600080fd5b61056c6110d4565b005b341561057957600080fd5b6105a5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611225565b6040518082815260200191505060405180910390f35b34156105c657600080fd5b6105f2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061123d565b6040518082815260200191505060405180910390f35b341561061357600080fd5b61061b6112e7565b6040518082815260200191505060405180910390f35b341561063c57600080fd5b6106446112ed565b6040518082815260200191505060405180910390f35b6106626112f3565b005b341561066f57600080fd5b61067761145f565b6040518082815260200191505060405180910390f35b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600460009054906101000a900460ff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600061077661073d60025484611469565b61077160035461076c6107666107556002548a611469565b6107616003548c611469565b6114a4565b896114c2565b6114a4565b6114c2565b90509392505050565b600061078e838360095461072c565b905092915050565b60095481565b6000806000600460009054906101000a900460ff1615156107bc57600080fd5b6107c4610e66565b92506107cf83611074565b91506107da826109f4565b9050610830610829600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460036114c2565b6002611469565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610908600954846114a4565b600981905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561097057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc61099484846114dd565b9081150290604051600060405180830381858888f1935050505015156109b957600080fd5b505050565b60006009541415156109cf57600080fd5b6001600460006101000a81548160ff0219169083151502179055508060098190555050565b6000610a0b610a04836004611469565b60646114c2565b9050919050565b600080600460009054906101000a900460ff161515610a3057600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610b4057503373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610bc45782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610bcc610e66565b9150610bda826000546114c2565b9050610c25600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114a4565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da360066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d9e8460056114c2565b6114a4565b60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e5b600954610e5684600a6114c2565b6114a4565b600981905550505050565b6000610eb9600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610eb43361123d565b6114a4565b905090565b60076020528060005260406000206000915090505481565b6000600460009054906101000a900460ff161515610ef357600080fd5b610f1d34610f183073ffffffffffffffffffffffffffffffffffffffff1631346114dd565b61077f565b9050610f3181610f2c836109f4565b6114dd565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610f78346109f4565b9081150290604051600060405180830381858888f193505050501515610f9d57600080fd5b610fe6600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114a4565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60005481565b60066020528060005260406000206000915090505481565b600061106d823073ffffffffffffffffffffffffffffffffffffffff163161077f565b9050919050565b600061109a826009543073ffffffffffffffffffffffffffffffffffffffff163161072c565b9050919050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900460ff1615156110ef57600080fd5b600a54600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561113f57600080fd5b61118a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a546114dd565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111dc600a54620186a06114a4565b600a8190555033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60056020528060005260406000206000915090505481565b60008061129460005461128f42600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114dd565b6114f6565b90506112df81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611469565b915050919050565b600a5481565b60015481565b600460009054906101000a900460ff16151561130e57600080fd5b66038d7ea4c680003414151561132357600080fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561138557600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156113d357600080fd5b42600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600a54905090565b600080600084141561147e576000915061149d565b828402905082848281151561148f57fe5b0414151561149957fe5b8091505b5092915050565b60008082840190508381101515156114b857fe5b8091505092915050565b60008082848115156114d057fe5b0490508091505092915050565b60008282111515156114eb57fe5b818303905092915050565b60008183106115055781611507565b825b9050929150505600a165627a7a723058206228653c30b6da9f94f31ccb74cc5cd55b91342cad37e74db7c1a123639727b90029"
}