{
  "address": "0x983df154a9d257987a94721cbc428f167de39521",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "tokemon20",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.20;\n\ncontract Token {\n\n\n    /// @return total amount of tokens\n\n    function totalSupply() constant returns (uint256 supply) {}\n\n\n    /// @param _owner The address from which the balance will be retrieved\n\n    /// @return The balance\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n\n    /// @param _to The address of the recipient\n\n    /// @param _value The amount of token to be transferred\n\n    /// @return Whether the transfer was successful or not\n\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n\n    /// @param _from The address of the sender\n\n    /// @param _to The address of the recipient\n\n    /// @param _value The amount of token to be transferred\n\n    /// @return Whether the transfer was successful or not\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n\n    /// @param _spender The address of the account able to transfer the tokens\n\n    /// @param _value The amount of wei to be approved for transfer\n\n    /// @return Whether the approval was successful or not\n\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n\n    /// @param _owner The address of the account owning tokens\n\n    /// @param _spender The address of the account able to transfer the tokens\n\n    /// @return Amount of remaining tokens allowed to spent\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\n}\n\n\ncontract StandardToken is Token {\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n\n        //Replace the if with this one instead.\n\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n\n            balances[msg.sender] -= _value;\n\n            balances[_to] += _value;\n\n            Transfer(msg.sender, _to, _value);\n\n            return true;\n\n        } else { return false; }\n\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n\n            balances[_to] += _value;\n\n            balances[_from] -= _value;\n\n            allowed[_from][msg.sender] -= _value;\n\n            Transfer(_from, _to, _value);\n\n            return true;\n\n        } else { return false; }\n\n    }\n\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n\n        return balances[_owner];\n\n    }\n\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\n      return allowed[_owner][_spender];\n\n    }\n\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n}\n\n\n//name this contract whatever you'd like\n\ncontract tokemon20 is StandardToken {\n\n\n    function () {\n\n        //if ether is sent to this address, send it back.\n\n        throw;\n\n    }\n\n\n    /* Public variables of the token */\n\n\n    /*\n\n    NOTE:\n\n    The following variables are OPTIONAL vanities. One does not have to include them.\n\n    They allow one to customise the token contract & in no way influences the core functionality.\n\n    Some wallets/interfaces might not even bother to look at this information.\n\n    */\n\n    string public name;                   //fancy name: eg Simon Bucks\n\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n\n    string public symbol;                 //An identifier: eg SBX\n\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n\n//\n\n// CHANGE THESE VALUES FOR YOUR TOKEN\n\n//\n\n\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\n\n\n    function tokemon20(\n\n        ) {\n\n        balances[msg.sender] = 100000000;               // Give the creator all initial tokens (100000 for example)\n\n        totalSupply = 100000000;                        // Update total supply (100000 for example)\n\n        name = \"tokemon20\";                                   // Set the name for display purposes\n\n        decimals = 0;                            // Amount of decimals for display purposes\n\n        symbol = \"tkm20\";                               // Set the symbol for display purposes\n\n    }\n\n\n    /* Approves and then calls the receiving contract */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n\n        return true;\n\n    }\n\n}",
  "bytecode": "60806040526040805190810160405280600481526020017f48312e3000000000000000000000000000000000000000000000000000000000815250600690805190602001906200005192919062000170565b503480156200005f57600080fd5b506305f5e1006000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506305f5e1006002819055506040805190810160405280600981526020017f746f6b656d6f6e3230000000000000000000000000000000000000000000000081525060039080519060200190620000ff92919062000170565b506000600460006101000a81548160ff021916908360ff1602179055506040805190810160405280600581526020017f746b6d3230000000000000000000000000000000000000000000000000000000815250600590805190602001906200016992919062000170565b506200021f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b357805160ff1916838001178555620001e4565b82800160010185558215620001e4579182015b82811115620001e3578251825591602001919060010190620001c6565b5b509050620001f39190620001f7565b5090565b6200021c91905b8082111562000218576000816000905550600101620001fe565b5090565b90565b610ff1806200022f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100c1578063095ea7b31461015157806318160ddd146101b657806323b872dd146101e1578063313ce5671461026657806354fd4d501461029757806370a082311461032757806395d89b411461037e578063a9059cbb1461040e578063cae9ca5114610473578063dd62ed3e1461051e575b3480156100bb57600080fd5b50600080fd5b3480156100cd57600080fd5b506100d6610595565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101165780820151818401526020810190506100fb565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015d57600080fd5b5061019c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610633565b604051808215151515815260200191505060405180910390f35b3480156101c257600080fd5b506101cb610725565b6040518082815260200191505060405180910390f35b3480156101ed57600080fd5b5061024c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061072b565b604051808215151515815260200191505060405180910390f35b34801561027257600080fd5b5061027b6109a4565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102a357600080fd5b506102ac6109b7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ec5780820151818401526020810190506102d1565b50505050905090810190601f1680156103195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033357600080fd5b50610368600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a55565b6040518082815260200191505060405180910390f35b34801561038a57600080fd5b50610393610a9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d35780820151818401526020810190506103b8565b50505050905090810190601f1680156104005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041a57600080fd5b50610459600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b3b565b604051808215151515815260200191505060405180910390f35b34801561047f57600080fd5b50610504600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ca1565b604051808215151515815260200191505060405180910390f35b34801561052a57600080fd5b5061057f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3e565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062b5780601f106106005761010080835404028352916020019161062b565b820191906000526020600020905b81548152906001019060200180831161060e57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107f7575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156108035750600082115b1561099857816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061099d565b600090505b9392505050565b600460009054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4d5780601f10610a2257610100808354040283529160200191610a4d565b820191906000526020600020905b815481529060010190602001808311610a3057829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b335780601f10610b0857610100808354040283529160200191610b33565b820191906000526020600020905b815481529060010190602001808311610b1657829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b8b5750600082115b15610c9657816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610c9b565b600090505b92915050565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015610ee2578082015181840152602081019050610ec7565b50505050905090810190601f168015610f0f5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515610f3357600080fd5b600190509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a723058209f26658ca3e059b545fd6f4e2da02fe699b85d682a8fcd54ee9f13b29f407e450029"
}