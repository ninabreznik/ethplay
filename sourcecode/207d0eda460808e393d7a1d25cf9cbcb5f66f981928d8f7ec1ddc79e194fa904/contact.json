{
  "address": "0xdf0456311751799f7036b373cdb6f6dfde04e3b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LMDA",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-30\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  \n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  \n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  \n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  \n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    \n  event Pause();\n  event Unpause();\n\n  bool public paused = true;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused\n   * or when the owner is invoking the function.\n   */\n  modifier whenNotPaused() {\n    require(!paused || msg.sender == owner);\n    _;\n  }\n  \n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n  \n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n  \n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n  \n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\n\n\ncontract LMDA is PausableToken {\n    \n    string public  name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n\n    /**\n     * Constructor initializes the name, symbol, decimals and total \n     * supply of the token. The owner of the contract which is initially \n     * the ICO contract will receive the entire total supply. \n     * */\n    function LMDA() public {\n        name = \"LaMonedaCoin\";\n        symbol = \"LMDA\";\n        decimals = 18;\n        totalSupply = 500000000e18;\n        \n        balances[owner] = totalSupply;\n        Transfer(address(this), owner, totalSupply);\n    }\n}\n\n\n\n\ncontract ICO is Ownable {\n    \n    using SafeMath for uint256;\n    \n    event AidropInvoked();\n    event MainSaleActivated();\n    event TokenPurchased(address recipient, uint256 tokens);\n    event DeadlineExtended(uint256 daysExtended);\n    event DeadlineShortened(uint256 daysShortenedBy);\n    event OffChainPurchaseMade(address recipient, uint256 tokensBought);\n    event TokenPriceChanged(string stage, uint256 newTokenPrice);\n    event ExchangeRateChanged(string stage, uint256 newRate);\n    event BonusChanged(string stage, uint256 newBonus);\n    event TokensWithdrawn(address to, uint256 LMDA); \n    event TokensUnpaused();\n    event ICOPaused(uint256 timeStamp);\n    event ICOUnpaused(uint256 timeStamp);  \n    \n    address public receiverOne;\n    address public receiverTwo;\n    address public receiverThree;\n    address public reserveAddress;\n    address public teamAddress;\n    \n    uint256 public endTime;\n    uint256 public tokenPriceForPreICO;\n    uint256 public rateForPreICO;\n    uint256 public tokenPriceForMainICO;\n    uint256 public rateForMainICO;\n    uint256 public tokenCapForPreICO;\n    uint256 public tokenCapForMainICO;\n    uint256 public bonusForPreICO;\n    uint256 public bonusForMainICO;\n    uint256 public tokensSold;\n    uint256 public timePaused;\n    bool public icoPaused;\n    \n    \n    enum StateOfICO {\n        PRE,\n        MAIN\n    }\n    \n    StateOfICO public stateOfICO;\n    \n    LMDA public lmda;\n\n    mapping (address => uint256) public investmentOf;\n    \n    \n    /**\n     * Functions with this modifier can only be called when the ICO \n     * is not paused.\n     * */\n    modifier whenNotPaused {\n        require(!icoPaused);\n        _;\n    }\n    \n    \n    /**\n     * Constructor functions creates a new instance of the LMDA token \n     * and automatically distributes tokens to the reserve and team \n     * addresses. The constructor also initializes all of the state \n     * variables of the ICO contract. \n     * */\n    function ICO() public {\n        lmda = new LMDA();\n        owner = 0x2488F34A2c2eBabbb44d5E8AD81E1D689fD76E50;\n        receiverOne = 0x43adebFC525FEcf9b2E91a4931E4a003a1F0d959;   //Pre ICO\n        receiverTwo = 0xB447292181296B8c7F421F1182be20640dc8Bb05;   //Pre ICO\n        receiverThree = 0x3f68b06E7C0E87828647Dbba0b5beAef3822b7Db; //Main ICO\n        reserveAddress = 0x7d05F660124B641b74b146E9aDA60D7D836dcCf5;\n        teamAddress = 0xAD942E5085Af6a7A4C31f17ac687F8d5d7C0225C;\n        lmda.transfer(reserveAddress, 90000000e18);\n        lmda.transfer(teamAddress, 35500000e18);\n        stateOfICO = StateOfICO.PRE;\n        endTime = now.add(21 days);\n        tokenPriceForPreICO = 0.00005 ether;\n        rateForPreICO = 20000;\n        tokenPriceForMainICO = 0.00007 ether;\n        rateForMainICO = 14285; // should be 14,285.7143 \n        tokenCapForPreICO = 144000000e18;\n        tokenCapForMainICO = 374500000e18; \n        bonusForPreICO = 20;\n        bonusForMainICO = 15;\n        tokensSold = 0;\n        icoPaused= false;\n    }\n    \n    \n    /**\n     * This function allows the owner of the contract to airdrop LMDA tokens \n     * to a list of addresses, so long as a list of values is also provided.\n     * \n     * @param _addrs The list of recipient addresses\n     * @param _values The number of tokens each address will receive \n     * */\n    function airdrop(address[] _addrs, uint256[] _values) public onlyOwner {\n        require(lmda.balanceOf(address(this)) >= getSumOfValues(_values));\n        require(_addrs.length <= 100 && _addrs.length == _values.length);\n        for(uint i = 0; i < _addrs.length; i++) {\n            lmda.transfer(_addrs[i], _values[i]);\n        }\n        AidropInvoked();\n    }\n    \n    \n    /**\n     * Function is called internally by the airdrop() function to ensure that \n     * there are enough tokens remaining to execute the airdrop. \n     * \n     * @param _values The list of values representing the tokens to be sent\n     * @return Returns the sum of all the values\n     * */\n    function getSumOfValues(uint256[] _values) internal pure returns(uint256 sum) {\n        sum = 0;\n        for(uint i = 0; i < _values.length; i++) {\n            sum = sum.add(_values[i]);\n        }\n    }\n    \n    \n    /**\n     * Function allows the owner to activate the main sale.\n     * */\n    function activateMainSale() public onlyOwner whenNotPaused {\n        require(now >= endTime || tokensSold >= tokenCapForPreICO);\n        stateOfICO = StateOfICO.MAIN;\n        endTime = now.add(49 days);\n        MainSaleActivated();\n    }\n\n\n    /**\n     * Fallback function invokes the buyToknes() method when ETH is recieved \n     * to enable the automatic distribution of tokens to investors.\n     * */\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n    \n    \n    /**\n     * Allows investors to buy tokens for themselves or others by explicitly \n     * invoking the function using the ABI / JSON Interface of the contract.\n     * \n     * @param _addr The address of the recipient\n     * */\n    function buyTokens(address _addr) public payable whenNotPaused {\n        require(now <= endTime && _addr != 0x0);\n        require(lmda.balanceOf(address(this)) > 0);\n        if(stateOfICO == StateOfICO.PRE && tokensSold >= tokenCapForPreICO) {\n            revert();\n        } else if(stateOfICO == StateOfICO.MAIN && tokensSold >= tokenCapForMainICO) {\n            revert();\n        }\n        uint256 toTransfer = msg.value.mul(getRate().mul(getBonus())).div(100).add(getRate());\n        lmda.transfer(_addr, toTransfer);\n        tokensSold = tokensSold.add(toTransfer);\n        investmentOf[msg.sender] = investmentOf[msg.sender].add(msg.value);\n        TokenPurchased(_addr, toTransfer);\n        forwardFunds();\n    }\n    \n    \n    /**\n     * Allows the owner to send tokens to investors who paid with other currencies.\n     * \n     * @param _recipient The address of the receiver \n     * @param _value The total amount of tokens to be sent\n     * */\n    function processOffChainPurchase(address _recipient, uint256 _value) public onlyOwner {\n        require(lmda.balanceOf(address(this)) >= _value);\n        require(_value > 0 && _recipient != 0x0);\n        lmda.transfer(_recipient, _value);\n        tokensSold = tokensSold.add(_value);\n        OffChainPurchaseMade(_recipient, _value);\n    }\n    \n    \n    /**\n     * Function is called internally by the buyTokens() function in order to send \n     * ETH to owners of the ICO automatically. \n     * */\n    function forwardFunds() internal {\n        if(stateOfICO == StateOfICO.PRE) {\n            receiverOne.transfer(msg.value.div(2));\n            receiverTwo.transfer(msg.value.div(2));\n        } else {\n            receiverThree.transfer(msg.value);\n        }\n    }\n    \n    \n    /**\n     * Allows the owner to extend the deadline of the current ICO phase.\n     * \n     * @param _daysToExtend The number of days to extend the deadline by.\n     * */\n    function extendDeadline(uint256 _daysToExtend) public onlyOwner {\n        endTime = endTime.add(_daysToExtend.mul(1 days));\n        DeadlineExtended(_daysToExtend);\n    }\n    \n    \n    /**\n     * Allows the owner to shorten the deadline of the current ICO phase.\n     * \n     * @param _daysToShortenBy The number of days to shorten the deadline by.\n     * */\n    function shortenDeadline(uint256 _daysToShortenBy) public onlyOwner {\n        if(now.sub(_daysToShortenBy.mul(1 days)) < endTime) {\n            endTime = now;\n        }\n        endTime = endTime.sub(_daysToShortenBy.mul(1 days));\n        DeadlineShortened(_daysToShortenBy);\n    }\n    \n    \n    /**\n     * Allows the owner to change the token price of the current phase. \n     * This function will automatically calculate the new exchange rate. \n     * \n     * @param _newTokenPrice The new price of the token.\n     * */\n    function changeTokenPrice(uint256 _newTokenPrice) public onlyOwner {\n        require(_newTokenPrice > 0);\n        if(stateOfICO == StateOfICO.PRE) {\n            if(tokenPriceForPreICO == _newTokenPrice) { revert(); } \n            tokenPriceForPreICO = _newTokenPrice;\n            rateForPreICO = uint256(1e18).div(tokenPriceForPreICO);\n            TokenPriceChanged(\"Pre ICO\", _newTokenPrice);\n        } else {\n            if(tokenPriceForMainICO == _newTokenPrice) { revert(); } \n            tokenPriceForMainICO = _newTokenPrice;\n            rateForMainICO = uint256(1e18).div(tokenPriceForMainICO);\n            TokenPriceChanged(\"Main ICO\", _newTokenPrice);\n        }\n    }\n    \n    \n    /**\n     * Allows the owner to change the exchange rate of the current phase.\n     * This function will automatically calculate the new token price. \n     * \n     * @param _newRate The new exchange rate.\n     * */\n    function changeRateOfToken(uint256 _newRate) public onlyOwner {\n        require(_newRate > 0);\n        if(stateOfICO == StateOfICO.PRE) {\n            if(rateForPreICO == _newRate) { revert(); }\n            rateForPreICO = _newRate;\n            tokenPriceForPreICO = uint256(1e18).div(rateForPreICO);\n            ExchangeRateChanged(\"Pre ICO\", _newRate);\n        } else {\n            if(rateForMainICO == _newRate) { revert(); }\n            rateForMainICO = _newRate;\n            rateForMainICO = uint256(1e18).div(rateForMainICO);\n            ExchangeRateChanged(\"Main ICO\", _newRate);\n        }\n    }\n    \n    \n    /**\n     * Allows the owner to change the bonus of the current phase.\n     * \n     * @param _newBonus The new bonus percentage.\n     * */\n    function changeBonus(uint256 _newBonus) public onlyOwner {\n        if(stateOfICO == StateOfICO.PRE) {\n            if(bonusForPreICO == _newBonus) { revert(); }\n            bonusForPreICO = _newBonus;\n            BonusChanged(\"Pre ICO\", _newBonus);\n        } else {\n            if(bonusForMainICO == _newBonus) { revert(); }\n            bonusForMainICO = _newBonus;\n            BonusChanged(\"Main ICO\", _newBonus);\n        }\n    }\n    \n    \n    /**\n     * Allows the owner to withdraw all unsold tokens to his wallet. \n     * */\n    function withdrawUnsoldTokens() public onlyOwner {\n        TokensWithdrawn(owner, lmda.balanceOf(address(this)));\n        lmda.transfer(owner, lmda.balanceOf(address(this)));\n    }\n    \n    \n    /**\n     * Allows the owner to unpause the LMDA token.\n     * */\n    function unpauseToken() public onlyOwner {\n        TokensUnpaused();\n        lmda.unpause();\n    }\n    \n    \n    /**\n     * Allows the owner to claim back ownership of the LMDA token contract.\n     * */\n    function transferTokenOwnership() public onlyOwner {\n        lmda.transferOwnership(owner);\n    }\n    \n    \n    /**\n     * Allows the owner to pause the ICO.\n     * */\n    function pauseICO() public onlyOwner whenNotPaused {\n        require(now < endTime);\n        timePaused = now;\n        icoPaused = true;\n        ICOPaused(now);\n    }\n    \n  \n    /**\n     * Allows the owner to unpause the ICO.\n     * */\n    function unpauseICO() public onlyOwner {\n        endTime = endTime.add(now.sub(timePaused));\n        timePaused = 0;\n        icoPaused = false;\n        ICOUnpaused(now);\n    }\n    \n    \n    /**\n     * @return The total amount of tokens that have been sold.\n     * */\n    function getTokensSold() public view returns(uint256 _tokensSold) {\n        _tokensSold = tokensSold;\n    }\n    \n    \n    /**\n     * @return The current bonuse percentage.\n     * */\n    function getBonus() public view returns(uint256 _bonus) {\n        if(stateOfICO == StateOfICO.PRE) { \n            _bonus = bonusForPreICO;\n        } else {\n            _bonus = bonusForMainICO;\n        }\n    }\n    \n    \n    /**\n     * @return The current exchange rate.\n     * */\n    function getRate() public view returns(uint256 _exchangeRate) {\n        if(stateOfICO == StateOfICO.PRE) {\n            _exchangeRate = rateForPreICO;\n        } else {\n            _exchangeRate = rateForMainICO;\n        }\n    }\n    \n    \n    /**\n     * @return The current token price. \n     * */\n    function getTokenPrice() public view returns(uint256 _tokenPrice) {\n        if(stateOfICO == StateOfICO.PRE) {\n            _tokenPrice = tokenPriceForPreICO;\n        } else {\n            _tokenPrice = tokenPriceForMainICO;\n        }\n    }\n}",
  "bytecode": "60606040526003805460a060020a60ff02191674010000000000000000000000000000000000000000179055341561003657600080fd5b60038054600160a060020a03191633600160a060020a031617905560408051908101604052600c81527f4c614d6f6e656461436f696e000000000000000000000000000000000000000060208201526004908051610098929160200190610163565b5060408051908101604052600481527f4c4d444100000000000000000000000000000000000000000000000000000000602082015260059080516100e0929160200190610163565b506006805460ff191660121790556b019d971e4fe8401e74000000600781905560038054600160a060020a0390811660009081526020819052604090819020849055915481169230909116917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a36101fe565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101a457805160ff19168380011785556101d1565b828001600101855582156101d1579182015b828111156101d15782518255916020019190600101906101b6565b506101dd9291506101e1565b5090565b6101fb91905b808211156101dd57600081556001016101e7565b90565b610cd48061020d6000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf578063313ce567146101f75780633f4ba83a146102205780635c975abb14610235578063661884631461024857806370a082311461026a5780638456cb59146102895780638da5cb5b1461029c57806395d89b41146102cb578063a9059cbb146102de578063d73dd62314610300578063dd62ed3e14610322578063f2fde38b14610347575b600080fd5b34156100f557600080fd5b6100fd610366565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610404565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd61044a565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a0360043581169060243516604435610450565b341561020257600080fd5b61020a610498565b60405160ff909116815260200160405180910390f35b341561022b57600080fd5b6102336104a1565b005b341561024057600080fd5b610196610520565b341561025357600080fd5b610196600160a060020a0360043516602435610530565b341561027557600080fd5b6101bd600160a060020a036004351661056f565b341561029457600080fd5b61023361058a565b34156102a757600080fd5b6102af610629565b604051600160a060020a03909116815260200160405180910390f35b34156102d657600080fd5b6100fd610638565b34156102e957600080fd5b610196600160a060020a03600435166024356106a3565b341561030b57600080fd5b610196600160a060020a03600435166024356106e2565b341561032d57600080fd5b6101bd600160a060020a0360043581169060243516610721565b341561035257600080fd5b610233600160a060020a036004351661074c565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b505050505081565b60035460009060a060020a900460ff16158061042e575060035433600160a060020a039081169116145b151561043957600080fd5b61044383836107e7565b9392505050565b60075481565b60035460009060a060020a900460ff16158061047a575060035433600160a060020a039081169116145b151561048557600080fd5b610490848484610853565b949350505050565b60065460ff1681565b60035433600160a060020a039081169116146104bc57600080fd5b60035460a060020a900460ff1615156104d457600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16158061055a575060035433600160a060020a039081169116145b151561056557600080fd5b61044383836109d3565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a039081169116146105a557600080fd5b60035460a060020a900460ff1615806105cc575060035433600160a060020a039081169116145b15156105d757600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103fc5780601f106103d1576101008083540402835291602001916103fc565b60035460009060a060020a900460ff1615806106cd575060035433600160a060020a039081169116145b15156106d857600080fd5b6104438383610acd565b60035460009060a060020a900460ff16158061070c575060035433600160a060020a039081169116145b151561071757600080fd5b6104438383610bdf565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461076757600080fd5b600160a060020a038116151561077c57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561086a57600080fd5b600160a060020a03841660009081526020819052604090205482111561088f57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156108c257600080fd5b600160a060020a0384166000908152602081905260409020546108eb908363ffffffff610c8316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610920908363ffffffff610c9516565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610966908363ffffffff610c8316565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a3057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610a67565b610a40818463ffffffff610c8316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515610ae457600080fd5b600160a060020a033316600090815260208190526040902054821115610b0957600080fd5b600160a060020a033316600090815260208190526040902054610b32908363ffffffff610c8316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610b67908363ffffffff610c9516565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c17908363ffffffff610c9516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600082821115610c8f57fe5b50900390565b81810182811015610ca257fe5b929150505600a165627a7a723058206a23d91d1cab698cf1c8c437d7a584a7385726d8b1d74f0579e176a8c02e95c70029"
}