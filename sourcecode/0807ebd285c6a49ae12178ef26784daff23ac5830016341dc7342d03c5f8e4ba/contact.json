{
  "address": "0xf96d54e490317c557a967abfa5d6e33006be69b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Controller",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-30\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract IController is Pausable {\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n    function updateController(bytes32 _id, address _controller) external;\n    function getContract(bytes32 _id) public view returns (address);\n}\n\ncontract IManager {\n    event SetController(address controller);\n    event ParameterUpdate(string param);\n\n    function setController(address _controller) external;\n}\n\ncontract Controller is Pausable, IController {\n    // Track information about a registered contract\n    struct ContractInfo {\n        address contractAddress;                 // Address of contract\n        bytes20 gitCommitHash;                   // SHA1 hash of head Git commit during registration of this contract\n    }\n\n    // Track contract ids and contract info\n    mapping (bytes32 => ContractInfo) private registry;\n\n    function Controller() public {\n        // Start system as paused\n        paused = true;\n    }\n\n    /*\n     * @dev Register contract id and mapped address\n     * @param _id Contract id (keccak256 hash of contract name)\n     * @param _contract Contract address\n     */\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external onlyOwner {\n        registry[_id].contractAddress = _contractAddress;\n        registry[_id].gitCommitHash = _gitCommitHash;\n\n        SetContractInfo(_id, _contractAddress, _gitCommitHash);\n    }\n\n    /*\n     * @dev Update contract's controller\n     * @param _id Contract id (keccak256 hash of contract name)\n     * @param _controller Controller address\n     */\n    function updateController(bytes32 _id, address _controller) external onlyOwner {\n        return IManager(registry[_id].contractAddress).setController(_controller);\n    }\n\n    /*\n     * @dev Return contract info for a given contract id\n     * @param _id Contract id (keccak256 hash of contract name)\n     */\n    function getContractInfo(bytes32 _id) public view returns (address, bytes20) {\n        return (registry[_id].contractAddress, registry[_id].gitCommitHash);\n    }\n\n    /*\n     * @dev Get contract address for an id\n     * @param _id Contract id\n     */\n    function getContract(bytes32 _id) public view returns (address) {\n        return registry[_id].contractAddress;\n    }\n}",
  "bytecode": "60606040526000805460a060020a60ff0219169055341561001f57600080fd5b6000805474010000000000000000000000000000000000000000600160a060020a031990911633600160a060020a03161760a060020a60ff0219161781556105a690819061006d90396000f3006060604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a811461009d5780635c975abb146100b2578063613e2de2146100d95780638456cb59146101205780638da5cb5b14610133578063d737c2b014610162578063e16c7d9814610196578063eb5dd94f146101ac578063f2fde38b146101ce575b600080fd5b34156100a857600080fd5b6100b06101ed565b005b34156100bd57600080fd5b6100c561026c565b604051901515815260200160405180910390f35b34156100e457600080fd5b6100ef60043561027c565b604051600160a060020a0390921682526bffffffffffffffffffffffff191660208201526040908101905180910390f35b341561012b57600080fd5b6100b06102b2565b341561013e57600080fd5b610146610336565b604051600160a060020a03909116815260200160405180910390f35b341561016d57600080fd5b6100b0600435600160a060020a03602435166bffffffffffffffffffffffff1960443516610345565b34156101a157600080fd5b610146600435610419565b34156101b757600080fd5b6100b0600435600160a060020a0360243516610434565b34156101d957600080fd5b6100b0600160a060020a03600435166104df565b60005433600160a060020a0390811691161461020857600080fd5b60005460a060020a900460ff16151561022057600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60005460a060020a900460ff1681565b60008181526001602081905260409091208054910154600160a060020a03909116906c0100000000000000000000000002915091565b60005433600160a060020a039081169116146102cd57600080fd5b60005460a060020a900460ff16156102e457600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b60005433600160a060020a0390811691161461036057600080fd5b600083815260016020819052604091829020805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038716178255910180549091166c0100000000000000000000000084041790557ff9a6cf519167d81bc5cb3d26c60c0c9a19704aa908c148e82a861b570f4cd2d79084908490849051928352600160a060020a0390911660208301526bffffffffffffffffffffffff19166040808301919091526060909101905180910390a1505050565b600090815260016020526040902054600160a060020a031690565b60005433600160a060020a0390811691161461044f57600080fd5b6000828152600160205260409081902054600160a060020a0316906392eefe9b908390517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156104c757600080fd5b6102c65a03f115156104d857600080fd5b5050505050565b60005433600160a060020a039081169116146104fa57600080fd5b600160a060020a038116151561050f57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058203c131446e6e308562e5bbb440e0c62040b62b5cdbf7dfc38539bd4a2ee1686cf0029"
}