{
  "address": "0xe554ee8f6fc36f6fddd40028d061bb8779437620",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Contributions",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/crowdsale/utils/Contributions.sol\n\ncontract Contributions is RBAC, Ownable {\n  using SafeMath for uint256;\n\n  uint256 private constant TIER_DELETED = 999;\n  string public constant ROLE_MINTER = \"minter\";\n  string public constant ROLE_OPERATOR = \"operator\";\n\n  uint256 public tierLimit;\n\n  modifier onlyMinter () {\n    checkRole(msg.sender, ROLE_MINTER);\n    _;\n  }\n\n  modifier onlyOperator () {\n    checkRole(msg.sender, ROLE_OPERATOR);\n    _;\n  }\n\n  uint256 public totalSoldTokens;\n  mapping(address => uint256) public tokenBalances;\n  mapping(address => uint256) public ethContributions;\n  mapping(address => uint256) private _whitelistTier;\n  address[] public tokenAddresses;\n  address[] public ethAddresses;\n  address[] private whitelistAddresses;\n\n  constructor(uint256 _tierLimit) public {\n    addRole(owner, ROLE_OPERATOR);\n    tierLimit = _tierLimit;\n  }\n\n  function addMinter(address minter) external onlyOwner {\n    addRole(minter, ROLE_MINTER);\n  }\n\n  function removeMinter(address minter) external onlyOwner {\n    removeRole(minter, ROLE_MINTER);\n  }\n\n  function addOperator(address _operator) external onlyOwner {\n    addRole(_operator, ROLE_OPERATOR);\n  }\n\n  function removeOperator(address _operator) external onlyOwner {\n    removeRole(_operator, ROLE_OPERATOR);\n  }\n\n  function addTokenBalance(\n    address _address,\n    uint256 _tokenAmount\n  )\n    external\n    onlyMinter\n  {\n    if (tokenBalances[_address] == 0) {\n      tokenAddresses.push(_address);\n    }\n    tokenBalances[_address] = tokenBalances[_address].add(_tokenAmount);\n    totalSoldTokens = totalSoldTokens.add(_tokenAmount);\n  }\n\n  function addEthContribution(\n    address _address,\n    uint256 _weiAmount\n  )\n    external\n    onlyMinter\n  {\n    if (ethContributions[_address] == 0) {\n      ethAddresses.push(_address);\n    }\n    ethContributions[_address] = ethContributions[_address].add(_weiAmount);\n  }\n\n  function setTierLimit(uint256 _newTierLimit) external onlyOperator {\n    require(_newTierLimit > 0, \"Tier must be greater than zero\");\n\n    tierLimit = _newTierLimit;\n  }\n\n  function addToWhitelist(\n    address _investor,\n    uint256 _tier\n  )\n    external\n    onlyOperator\n  {\n    require(_tier == 1 || _tier == 2, \"Only two tier level available\");\n    if (_whitelistTier[_investor] == 0) {\n      whitelistAddresses.push(_investor);\n    }\n    _whitelistTier[_investor] = _tier;\n  }\n\n  function removeFromWhitelist(address _investor) external onlyOperator {\n    _whitelistTier[_investor] = TIER_DELETED;\n  }\n\n  function whitelistTier(address _investor) external view returns (uint256) {\n    return _whitelistTier[_investor] <= 2 ? _whitelistTier[_investor] : 0;\n  }\n\n  function getWhitelistedAddresses(\n    uint256 _tier\n  )\n    external\n    view\n    returns (address[])\n  {\n    address[] memory tmp = new address[](whitelistAddresses.length);\n\n    uint y = 0;\n    if (_tier == 1 || _tier == 2) {\n      uint len = whitelistAddresses.length;\n      for (uint i = 0; i < len; i++) {\n        if (_whitelistTier[whitelistAddresses[i]] == _tier) {\n          tmp[y] = whitelistAddresses[i];\n          y++;\n        }\n      }\n    }\n\n    address[] memory toReturn = new address[](y);\n\n    for (uint k = 0; k < y; k++) {\n      toReturn[k] = tmp[k];\n    }\n\n    return toReturn;\n  }\n\n  function isAllowedPurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    external\n    view\n    returns (bool)\n  {\n    if (_whitelistTier[_beneficiary] == 2) {\n      return true;\n    } else if (_whitelistTier[_beneficiary] == 1 && ethContributions[_beneficiary].add(_weiAmount) <= tierLimit) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getTokenAddressesLength() external view returns (uint) {\n    return tokenAddresses.length;\n  }\n\n  function getEthAddressesLength() external view returns (uint) {\n    return ethAddresses.length;\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000015af1d78b58c40000"
}