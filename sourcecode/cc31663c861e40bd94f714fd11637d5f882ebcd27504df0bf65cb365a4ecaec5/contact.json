{
  "address": "0xecc9fc28786405260c74fbeeb372debc3e852dab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ViteCoinICO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-06\n*/\n\npragma solidity 0.4.25;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n/**\n * @title ViteCoinICO\n * @dev   ViteCoinICO accepting contributions only within a time frame.\n */\ncontract ViteCoinICO is ERC20Interface, Owned {\n  using SafeMath for uint256;\n  string  public symbol; \n  string  public name;\n  uint8   public decimals;\n  uint256 public fundsRaised;         \n  uint256 public privateSaleTokens;\n  uint256 public preSaleTokens;\n  uint256 public saleTokens;\n  uint256 public teamAdvTokens;\n  uint256 public reserveTokens;\n  uint256 public bountyTokens;\n  uint256 public hardCap;\n  string  internal minTxSize;\n  string  internal maxTxSize;\n  string  public TokenPrice;\n  uint    internal _totalSupply;\n  address public wallet;\n  uint256 internal privatesaleopeningTime;\n  uint256 internal privatesaleclosingTime;\n  uint256 internal presaleopeningTime;\n  uint256 internal presaleclosingTime;\n  uint256 internal saleopeningTime;\n  uint256 internal saleclosingTime;\n  bool    internal privatesaleOpen;\n  bool    internal presaleOpen;\n  bool    internal saleOpen;\n  bool    internal Open;\n  \n  mapping(address => uint) balances;\n  mapping(address => mapping(address => uint)) allowed;\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  event Burned(address burner, uint burnedAmount);\n\n    modifier onlyWhileOpen {\n        require(now >= privatesaleopeningTime && now <= (saleclosingTime + 30 days) && Open);\n        _;\n    }\n  \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor (address _owner, address _wallet) public {\n        _allocateTokens();\n        _setTimes();\n    \n        symbol = \"VT\";\n        name = \"Vitecoin\";\n        decimals = 18;\n        owner = _owner;\n        wallet = _wallet;\n        _totalSupply = 200000000;\n        Open = true;\n        balances[this] = totalSupply();\n        emit Transfer(address(0),this, totalSupply());\n    }\n    \n    function _setTimes() internal{\n        privatesaleopeningTime    = 1534723200; // 20th Aug 2018 00:00:00 GMT \n        privatesaleclosingTime    = 1541462399; // 05th Nov 2018 23:59:59 GMT   \n        presaleopeningTime        = 1541462400; // 06th Nov 2018 00:00:00 GMT \n        presaleclosingTime        = 1546214399; // 30th Dec 2018 23:59:59 GMT\n        saleopeningTime           = 1546214400; // 31st Dec 2018 00:00:00 GMT\n        saleclosingTime           = 1553990399; // 30th Mar 2019 23:59:59 GMT\n    }\n  \n    function _allocateTokens() internal{\n        privateSaleTokens     = 10000000;   // 5%\n        preSaleTokens         = 80000000;   // 40%\n        saleTokens            = 60000000;   // 30%\n        teamAdvTokens         = 24000000;   // 12%\n        reserveTokens         = 20000000;   // 10%\n        bountyTokens          = 6000000;    // 3%\n        hardCap               = 36825;      // 36825 eths or 36825*10^18 weis \n        minTxSize             = \"0,5 ETH\"; // (0,5 ETH)\n        maxTxSize             = \"1000 ETH\"; // (1000 ETH)\n        TokenPrice            = \"$0.05\";\n        privatesaleOpen       = true;\n    }\n\n    function totalSupply() public constant returns (uint){\n       return _totalSupply* 10**uint(decimals);\n    }\n    \n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        // prevent transfer to 0x0, use burn instead\n        require(to != 0x0);\n        require(balances[msg.sender] >= tokens );\n        require(balances[to] + tokens >= balances[to]);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender,to,tokens);\n        return true;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success){\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender,spender,tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n        require(tokens <= allowed[from][msg.sender]); //check allowance\n        require(balances[from] >= tokens);\n        balances[from] = balances[from].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        emit Transfer(from,to,tokens);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    function _checkOpenings() internal{\n        if(now >= privatesaleopeningTime && now <= privatesaleclosingTime){\n          privatesaleOpen = true;\n          presaleOpen = false;\n          saleOpen = false;\n        }\n        else if(now >= presaleopeningTime && now <= presaleclosingTime){\n          privatesaleOpen = false;\n          presaleOpen = true;\n          saleOpen = false;\n        }\n        else if(now >= saleopeningTime && now <= (saleclosingTime + 30 days)){\n            privatesaleOpen = false;\n            presaleOpen = false;\n            saleOpen = true;\n        }\n        else{\n          privatesaleOpen = false;\n          presaleOpen = false;\n          saleOpen = false;\n        }\n    }\n    \n        function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\n    \n        uint256 weiAmount = msg.value;\n    \n        _preValidatePurchase(_beneficiary, weiAmount);\n    \n        _checkOpenings();\n        \n        if(privatesaleOpen){\n            require(weiAmount >= 5e17  && weiAmount <= 1e21 ,\"FUNDS should be MIN 0,5 ETH and Max 1000 ETH\");\n        }\n        else {\n            require(weiAmount >= 1e17  && weiAmount <= 5e21 ,\"FUNDS should be MIN 0,1 ETH and Max 5000 ETH\");\n        }\n        \n        uint256 tokens = _getTokenAmount(weiAmount);\n        \n        if(weiAmount > 50e18){ // greater than 50 eths\n            // 10% extra discount\n            tokens = tokens.add((tokens.mul(10)).div(100));\n        }\n        \n        // update state\n        fundsRaised = fundsRaised.add(weiAmount);\n\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\n\n        _forwardFunds(msg.value);\n    }\n    \n        function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal{\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n        // require(_weiAmount >= 5e17  && _weiAmount <= 1e21 ,\"FUNDS should be MIN 0,5 ETH and Max 1000 ETH\");\n    }\n  \n    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n        uint256 rate;\n        if(privatesaleOpen){\n           rate = 10000; //per wei\n        }\n        else if(presaleOpen){\n            rate = 8000; //per wei\n        }\n        else if(saleOpen){\n            rate = 8000; //per wei\n        }\n        \n        return _weiAmount.mul(rate);\n    }\n    \n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        _transfer(_beneficiary, _tokenAmount);\n    }\n\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n    \n    function _forwardFunds(uint256 _amount) internal {\n        wallet.transfer(_amount);\n    }\n    \n    function _transfer(address to, uint tokens) internal returns (bool success) {\n        // prevent transfer to 0x0, use burn instead\n        require(to != 0x0);\n        require(balances[this] >= tokens );\n        require(balances[to] + tokens >= balances[to]);\n        balances[this] = balances[this].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(this,to,tokens);\n        return true;\n    }\n    \n    function freeTokens(address _beneficiary, uint256 _tokenAmount) public onlyOwner{\n       _transfer(_beneficiary, _tokenAmount);\n    }\n    \n    function stopICO() public onlyOwner{\n        Open = false;\n    }\n    \n    function multipleTokensSend (address[] _addresses, uint256[] _values) public onlyOwner{\n        for (uint i = 0; i < _addresses.length; i++){\n            _transfer(_addresses[i], _values[i]*10**uint(decimals));\n        }\n    }\n    \n    function burnRemainingTokens() public onlyOwner{\n        balances[this] = 0;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051604080620014388339810160405280516020909101516200003e640100000000620001a9810204565b62000051640100000000620002c2810204565b6040805180820190915260028082527f5654000000000000000000000000000000000000000000000000000000000000602090920191825262000095918162000307565b506040805180820190915260088082527f56697465636f696e0000000000000000000000000000000000000000000000006020909201918252620000dc9160039162000307565b506004805460ff1916601217905560008054600160a060020a03808516600160a060020a0319928316179092556011805492841692909116919091179055630bebc2006010556018805463ff0000001916630100000017905562000148640100000000620002f4810204565b30600081815260196020526040812092909255907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef62000190640100000000620002f4810204565b60408051918252519081900360200190a35050620003a9565b629896806006556304c4b4006007908155630393870060085563016e36006009556301312d00600a55625b8d80600b55618fd9600c55604080518082019091528181527f302c35204554480000000000000000000000000000000000000000000000000060209091019081526200022491600d919062000307565b506040805180820190915260088082527f313030302045544800000000000000000000000000000000000000000000000060209092019182526200026b91600e9162000307565b506040805180820190915260058082527f24302e30350000000000000000000000000000000000000000000000000000006020909201918252620002b291600f9162000307565b506018805460ff19166001179055565b635b7a0480601255635be0d97f601355635be0d980601455635c295bff601555635c295c00601655635ca002ff601755565b60045460105460ff909116600a0a025b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200034a57805160ff19168380011785556200037a565b828001600101855582156200037a579182015b828111156200037a5782518255916020019190600101906200035d565b50620003889291506200038c565b5090565b6200030491905b8082111562000388576000815560010162000393565b61107f80620003b96000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461015e578063095ea7b3146101e85780630fe83bb814610220578063141ddca71461024757806318160ddd1461025c5780631a9bf9cf1461027157806323b872dd1461028657806327ac36c4146102b0578063313ce567146102c5578063521eb273146102f05780636681b9fd1461032157806370a082311461033657806383408d73146103575780638da5cb5b1461036c57806395d89b4114610381578063a9059cbb14610396578063b0b9603b146103ba578063c4815c96146103cf578063c552e04b146103e4578063c8e569a8146103f9578063d4ee1d901461040e578063d7fe270e14610423578063dd62ed3e146104b1578063ec8ac4d8146104d8578063fb86a404146104ec578063fbcece8514610501575b61015c33610525565b005b34801561016a57600080fd5b506101736107b6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ad578181015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f457600080fd5b5061020c600160a060020a0360043516602435610844565b604080519115158252519081900360200190f35b34801561022c57600080fd5b506102356108ab565b60408051918252519081900360200190f35b34801561025357600080fd5b506101736108b1565b34801561026857600080fd5b5061023561090c565b34801561027d57600080fd5b5061023561091e565b34801561029257600080fd5b5061020c600160a060020a0360043581169060243516604435610924565b3480156102bc57600080fd5b50610235610a86565b3480156102d157600080fd5b506102da610a8c565b6040805160ff9092168252519081900360200190f35b3480156102fc57600080fd5b50610305610a95565b60408051600160a060020a039092168252519081900360200190f35b34801561032d57600080fd5b50610235610aa4565b34801561034257600080fd5b50610235600160a060020a0360043516610aaa565b34801561036357600080fd5b5061015c610ac5565b34801561037857600080fd5b50610305610aee565b34801561038d57600080fd5b50610173610afd565b3480156103a257600080fd5b5061020c600160a060020a0360043516602435610b55565b3480156103c657600080fd5b50610235610c5f565b3480156103db57600080fd5b50610235610c65565b3480156103f057600080fd5b50610235610c6b565b34801561040557600080fd5b5061015c610c71565b34801561041a57600080fd5b50610305610c97565b34801561042f57600080fd5b506040805160206004803580820135838102808601850190965280855261015c95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610ca69650505050505050565b3480156104bd57600080fd5b50610235600160a060020a0360043581169060243516610d19565b61015c600160a060020a0360043516610525565b3480156104f857600080fd5b50610235610d44565b34801561050d57600080fd5b5061015c600160a060020a0360043516602435610d4a565b6000806012544210158015610541575060175462278d00014211155b801561055657506018546301000000900460ff165b151561056157600080fd5b34915061056e8383610d6b565b610576610d90565b60185460ff161561063a576706f05b59d3b2000082101580156105a25750683635c9adc5dea000008211155b151561063557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46554e44532073686f756c64206265204d494e20302c352045544820616e642060448201527f4d61782031303030204554480000000000000000000000000000000000000000606482015290519081900360840190fd5b6106ef565b67016345785d8a0000821015801561065c575069010f0cf064dd592000008211155b15156106ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46554e44532073686f756c64206265204d494e20302c312045544820616e642060448201527f4d61782035303030204554480000000000000000000000000000000000000000606482015290519081900360840190fd5b6106f882610e3b565b90506802b5e3af16b18800008211156107405761073d610730606461072484600a63ffffffff610e9a16565b9063ffffffff610ebf16565b829063ffffffff610ee016565b90505b600554610753908363ffffffff610ee016565b6005556107608382610ef0565b60408051838152602081018390528151600160a060020a0386169230927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a36107b134610efa565b505050565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081565b336000818152601a60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60075481565b600f805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561083c5780601f106108115761010080835404028352916020019161083c565b60045460105460ff909116600a0a0290565b600b5481565b600160a060020a0383166000908152601a6020908152604080832033845290915281205482111561095457600080fd5b600160a060020a03841660009081526019602052604090205482111561097957600080fd5b600160a060020a0384166000908152601960205260409020546109a2908363ffffffff610f3416565b600160a060020a0380861660009081526019602052604080822093909355908516815220546109d7908363ffffffff610ee016565b600160a060020a038085166000908152601960209081526040808320949094559187168152601a82528281203382529091522054610a1b908363ffffffff610f3416565b600160a060020a038086166000818152601a6020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600a5481565b60045460ff1681565b601154600160a060020a031681565b60055481565b600160a060020a031660009081526019602052604090205490565b600054600160a060020a03163314610adc57600080fd5b30600090815260196020526040812055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561083c5780601f106108115761010080835404028352916020019161083c565b6000600160a060020a0383161515610b6c57600080fd5b33600090815260196020526040902054821115610b8857600080fd5b600160a060020a0383166000908152601960205260409020548281011015610baf57600080fd5b33600090815260196020526040902054610bcf908363ffffffff610f3416565b3360009081526019602052604080822092909255600160a060020a03851681522054610c01908363ffffffff610ee016565b600160a060020a0384166000818152601960209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60085481565b60095481565b60065481565b600054600160a060020a03163314610c8857600080fd5b6018805463ff00000019169055565b600154600160a060020a031681565b60008054600160a060020a03163314610cbe57600080fd5b5060005b82518110156107b157610d108382815181101515610cdc57fe5b60209081029091010151600454845160ff909116600a0a90859085908110610d0057fe5b9060200190602002015102610f49565b50600101610cc2565b600160a060020a039182166000908152601a6020908152604080832093909416825291909152205490565b600c5481565b600054600160a060020a03163314610d6157600080fd5b6107b18282610f49565b600160a060020a0382161515610d8057600080fd5b801515610d8c57600080fd5b5050565b6012544210158015610da457506013544211155b15610dc3576018805462ffff001960ff19909116600117169055610e39565b6014544210158015610dd757506015544211155b15610df8576018805462ff00001961ffff1990911661010017169055610e39565b6016544210158015610e11575060175462278d00014211155b15610e2c576018805462ffffff191662010000179055610e39565b6018805462ffffff191690555b565b601854600090819060ff1615610e545750612710610e83565b601854610100900460ff1615610e6d5750611f40610e83565b60185462010000900460ff1615610e835750611f405b610e93838263ffffffff610e9a16565b9392505050565b818102821580610eb45750818382811515610eb157fe5b04145b15156108a557600080fd5b6000808211610ecd57600080fd5b8183811515610ed857fe5b049392505050565b818101828110156108a557600080fd5b610d8c8282610d61565b601154604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610d8c573d6000803e3d6000fd5b600082821115610f4357600080fd5b50900390565b6000600160a060020a0383161515610f6057600080fd5b30600090815260196020526040902054821115610f7c57600080fd5b600160a060020a0383166000908152601960205260409020548281011015610fa357600080fd5b30600090815260196020526040902054610fc3908363ffffffff610f3416565b3060009081526019602052604080822092909255600160a060020a03851681522054610ff5908363ffffffff610ee016565b600160a060020a0384166000818152601960209081526040918290209390935580518581529051919230927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001929150505600a165627a7a72305820486486484d03cdb682eb93669e8483c8578eda069136d842130a4a9966d780a6002900000000000000000000000061939079a56e18ccc2ff01c963d06ef4b0f1343500000000000000000000000061939079a56e18ccc2ff01c963d06ef4b0f13435",
  "constructorArguments": "00000000000000000000000061939079a56e18ccc2ff01c963d06ef4b0f1343500000000000000000000000061939079a56e18ccc2ff01c963d06ef4b0f13435"
}