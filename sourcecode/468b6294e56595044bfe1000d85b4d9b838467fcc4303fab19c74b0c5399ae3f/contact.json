{
  "address": "0x6c0f03411ab250f0a080a4420190b821affd4602",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GizerItems",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-14\n*/\n\npragma solidity ^0.4.20;\n\n// ----------------------------------------------------------------------------\n//\n// Gizer Items - ERC721(ish) contract\n//\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n//\n// SafeMath\n//\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal pure returns (uint c) {\n    c = a * b;\n    require( a == 0 || c / a == b );\n  }\n\n  function add(uint a, uint b) internal pure returns (uint c) {\n    c = a + b;\n    require( c >= a );\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint c) {\n    require( b <= a );\n    c = a - b;\n  }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// Owned\n//\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n  address public owner;\n  address public newOwner;\n\n  mapping(address => bool) public isAdmin;\n\n  // Events ---------------------------\n\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n  event AdminChange(address indexed _admin, bool _status);\n\n  // Modifiers ------------------------\n\n  modifier onlyOwner { require( msg.sender == owner ); _; }\n  modifier onlyAdmin { require( isAdmin[msg.sender] ); _; }\n\n  // Functions ------------------------\n\n  function Owned() public {\n    owner = msg.sender;\n    isAdmin[owner] = true;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require( _newOwner != address(0x0) );\n    OwnershipTransferProposed(owner, _newOwner);\n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    require(msg.sender == newOwner);\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n  function addAdmin(address _a) public onlyOwner {\n    require( isAdmin[_a] == false );\n    isAdmin[_a] = true;\n    AdminChange(_a, true);\n  }\n\n  function removeAdmin(address _a) public onlyOwner {\n    require( isAdmin[_a] == true );\n    isAdmin[_a] = false;\n    AdminChange(_a, false);\n  }\n  \n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC721(ish) Token Interface \n//\n// ----------------------------------------------------------------------------\n\n\ninterface ERC721Interface /* is ERC165 */ {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _deedId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _deedId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function balanceOf(address _owner) external view returns (uint256 _balance);\n    function ownerOf(uint256 _deedId) external view returns (address _owner);\n    function transfer(address _to, uint256 _deedId) external;                    // removed payable\n    function transferFrom(address _from, address _to, uint256 _deedId) external; // removed payable\n    function approve(address _approved, uint256 _deedId) external;               // removed payable\n    // function setApprovalForAll(address _operateor, boolean _approved);        // removed payable\n    // function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ninterface ERC721Metadata /* is ERC721 */ {\n    function name() external pure returns (string _name);\n    function symbol() external pure returns (string _symbol);\n    function deedUri(uint256 _deedId) external view returns (string _deedUri);\n}\n\ninterface ERC721Enumerable /* is ERC721 */ {\n    function totalSupply() external view returns (uint256 _count);\n    function deedByIndex(uint256 _index) external view returns (uint256 _deedId);\n    function countOfOwners() external view returns (uint256 _count);\n    // function ownerByIndex(uint256 _index) external view returns (address _owner);\n    // function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC721 Token\n//\n// ----------------------------------------------------------------------------\n\ncontract ERC721Token is ERC721Interface, ERC721Metadata, ERC721Enumerable, Owned {\n  \n  using SafeMath for uint;\n\n  uint public ownerCount = 0;\n  uint public deedCount = 0;\n  \n  mapping(address => uint) public balances;\n  mapping(uint => address) public mIdOwner;\n  mapping(uint => address) public mIdApproved;\n\n  // Required Functions ------------------------\n\n  /* Get the number of tokens held by an address */\n\n  function balanceOf(address _owner) external view returns (uint balance) {\n    balance = balances[_owner];\n  }\n\n  /* Get the owner of a certain token */\n\n  function ownerOf(uint _id) external view returns (address owner) {\n    owner = mIdOwner[_id];\n    require( owner != address(0x0) );\n  }\n\n  /* Transfer token */\n  \n  function transfer(address _to, uint _id) external {\n    // check ownership and address\n    require( msg.sender == mIdOwner[_id] );\n    require( _to != address(0x0) );\n\n    // transfer ownership\n    mIdOwner[_id] = _to;\n    mIdApproved[_id] = address(0x0);\n\n    // update balances\n    updateBalances(msg.sender, _to);\n\n    // register event\n    Transfer(msg.sender, _to, _id);\n  }\n\n  /* Transfer from */\n  \n  function transferFrom(address _from, address _to, uint _id) external {\n    // check if the sender has the right to transfer\n    require( _from == mIdOwner[_id] && mIdApproved[_id] == msg.sender );\n\n    // transfer ownership and reset approval (if any)\n    mIdOwner[_id] = _to;\n    mIdApproved[_id] = address(0x0);\n\n    // update balances\n    updateBalances(_from, _to);\n\n    // register event\n    Transfer(_from, _to, _id);\n  }\n\n  /* Approve token transfer (we do not make it payable) */\n  \n   function approve(address _approved, uint _id) external {\n       require( msg.sender == mIdOwner[_id] );\n       require( msg.sender != _approved );\n       mIdApproved[_id] = _approved;\n       Approval(msg.sender, _approved, _id);\n   }\n\n  // Metadata Functions ---------------\n\n\n  // Enumeration Functions ------------\n  \n  function totalSupply() external view returns (uint count) {\n    count = deedCount;\n  }\n\n  function deedByIndex(uint _index) external view returns (uint id) {\n    id = _index;\n    require( id < deedCount );\n  }  \n  \n  function countOfOwners() external view returns (uint count) {\n    count = ownerCount;\n  }\n  \n  // Internal functions ---------------\n  \n  function updateBalances(address _from, address _to) internal {\n    // process from (skip if minted)\n    if (_from != address(0x0)) {\n      balances[_from]--;\n      if (balances[_from] == 0) { ownerCount--; }\n    }\n    // process to\n    balances[_to]++;\n    if (balances[_to] == 1) { ownerCount++; }\n  }\n      \n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC721 Token\n//\n// ----------------------------------------------------------------------------\n\ncontract GizerItems is ERC721Token {\n\n  /* Basic token data */\n  \n  string constant cName   = \"Gizer Item\";\n  string constant cSymbol = \"GZR721\";\n  \n  /* uuid information */\n\n  bytes32[] public code;\n  uint[] public weight;\n  uint public sumOfWeights;\n  \n  mapping(bytes32 => uint) public mCodeIndexPlus; // index + 1\n\n  /* Pseudo-randomisation variables */\n\n  uint public nonce = 0;\n  uint public lastRandom = 0;\n  \n  /* mapping from item index to uuid */\n  \n  mapping(uint => bytes32) public mIdxUuid;\n  \n  // Events ---------------------------\n  \n  event MintToken(address indexed minter, address indexed _owner, bytes32 indexed _code, uint _input);\n  \n  event CodeUpdate(uint8 indexed _type, bytes32 indexed _code, uint _weight, uint _sumOfWeights);\n  \n  // Basic Functions ------------------\n  \n  function GizerItems() public { }\n  \n  function () public payable { revert(); }\n  \n  // Information functions ------------\n\n  function name() external pure returns (string) {\n    return cName;\n  }\n  \n  function symbol() external pure returns (string) {\n    return cSymbol;\n  }\n  \n  function deedUri(uint _id) external view returns (string) {\n    return bytes32ToString(mIdxUuid[_id]);\n  }\n  \n  function getUuid(uint _id) external view returns (string) {\n    require( _id < code.length );\n    return bytes32ToString(code[_id]);  \n  }\n\n  // Token Minting --------------------\n  \n  function mint(address _to) public onlyAdmin returns (uint idx) {\n    \n    // initial checks\n    require( sumOfWeights > 0 );\n    require( _to != address(0x0) );\n    require( _to != address(this) );\n\n    // get random uuid\n    bytes32 uuid32 = getRandomUuid();\n\n    // mint token\n    deedCount++;\n    idx = deedCount;\n    mIdxUuid[idx] = uuid32;\n\n    // update balance and owner count\n    updateBalances(address(0x0), _to);\n    mIdOwner[idx] = _to;\n\n    // log event and return\n    MintToken(msg.sender, _to, uuid32, idx);\n  }\n  \n  // Random\n  \n  function getRandomUuid() internal returns (bytes32) {\n    // case where there is only one item type\n    if (code.length == 1) return code[0];\n\n    // more than one\n    updateRandom();\n    uint res = lastRandom % sumOfWeights;\n    uint cWeight = 0;\n    for (uint i = 0; i < code.length; i++) {\n      cWeight = cWeight + weight[i];\n      if (cWeight >= res) return code[i];\n    }\n\n    // we should never get here\n    revert();\n  }\n\n  function updateRandom() internal {\n    nonce++;\n    lastRandom = uint(keccak256(\n        nonce,\n        lastRandom,\n        block.blockhash(block.number - 1),\n        block.coinbase,\n        block.difficulty\n    ));\n  }\n  \n  // uuid functions -------------------\n  \n  /* add a new code + weight */\n  \n  function addCode(string _code, uint _weight) public onlyAdmin returns (bool success) {\n\n    bytes32 uuid32 = stringToBytes32(_code);\n\n    // weight posiitve & code not yet registered\n    require( _weight > 0 );\n    require( mCodeIndexPlus[uuid32] == 0 );\n\n    // add to end of array\n    uint idx = code.length;\n    code.push(uuid32);\n    weight.push(_weight);\n    mCodeIndexPlus[uuid32] = idx + 1;\n\n    // update sum of weights\n    sumOfWeights = sumOfWeights.add(_weight);\n\n    // register event and return\n    CodeUpdate(1, uuid32, _weight, sumOfWeights);\n    return true;\n  }\n  \n  /* update the weight of an existing code */\n  \n  function updateCodeWeight(string _code, uint _weight) public onlyAdmin returns (bool success) {\n\n    bytes32 uuid32 = stringToBytes32(_code);\n\n    // weight positive & code must be registered\n    require( _weight > 0 );\n    require( mCodeIndexPlus[uuid32] > 0 );\n\n    // update weight and sum of weights\n    uint idx = mCodeIndexPlus[uuid32] - 1;\n    uint oldWeight = weight[idx];\n    weight[idx] = _weight;\n    sumOfWeights = sumOfWeights.sub(oldWeight).add(_weight);\n\n    // register event and return\n    CodeUpdate(2, uuid32, _weight, sumOfWeights);\n    return true;\n  }\n  \n  /* remove an existing code */\n  \n  function removeCode(string _code) public onlyAdmin returns (bool success) {\n\n    bytes32 uuid32 = stringToBytes32(_code);\n\n    // code must be registered\n    require( mCodeIndexPlus[uuid32] > 0 );\n\n    // index of code to be deleted\n    uint idx = mCodeIndexPlus[uuid32] - 1;\n    uint idxLast = code.length - 1;\n\n    // update sum of weights and remove mapping\n    sumOfWeights = sumOfWeights.sub(weight[idx]);\n    mCodeIndexPlus[uuid32] = 0;\n\n    if (idx != idxLast) {\n      // if we are not deleting the last element:\n      // move last element to index of deleted element\n      code[idx] = code[idxLast];\n      weight[idx] = weight[idxLast];\n      mCodeIndexPlus[code[idxLast]] = idx;\n    }\n    // delete last element of arrays\n    delete code[idxLast];\n    code.length--;\n    delete weight[idxLast];\n    weight.length--;\n\n    // register event and return\n    CodeUpdate(3, uuid32, 0, sumOfWeights);\n    return true;\n  }\n\n  /* Transfer out any accidentally sent ERC20 tokens */\n\n  function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\n  }\n  \n  // Utility functions ----------------\n\n  /* https://ethereum.stackexchange.com/questions/9142/how-to-convert-a-string-to-bytes32 */\n  \n  function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n    bytes memory tempEmptyStringTest = bytes(source);\n    if (tempEmptyStringTest.length == 0) {\n        return 0x0;\n    }\n\n    assembly {\n        result := mload(add(source, 32))\n    }\n  }\n  \n  /* https://ethereum.stackexchange.com/questions/2519/how-to-convert-a-bytes32-to-string */\n\n  function bytes32ToString(bytes32 x) public pure returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint charCount = 0;\n    for (uint j = 0; j < 32; j++) {\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n      if (char != 0) {\n        bytesString[charCount] = char;\n        charCount++;\n      }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n      bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n  }\n  \n}\n\n// ----------------------------------------------------------------------------\n//\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n//\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n  function transfer(address _to, uint _value) public returns (bool success);\n}",
  "bytecode": "6060604052600060035560006004556000600c556000600d55341561002357600080fd5b60008054600160a060020a03338116600160a060020a031990921691909117808355168152600260205260409020805460ff191660011790556117ff8061006b6000396000f3006060604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101dc578063095ea7b3146102665780630db026221461028a578063139020d1146102af5780631785f53c146102c557806318160ddd146102e457806323b872dd146102f757806324d7806c1461031f57806327e235e3146103525780632bf34e601461037157806332e2fa421461038757806341163f7c1461039d57806357b45386146103b05780636352211e146104015780636a62784214610433578063704802751461045257806370a08231146104715780637428a1411461049057806379ba5097146104a65780638da5cb5b146104b95780639201de55146104cc57806395d89b41146104e2578063a856b9c2146104f5578063a9059cbb14610508578063affed0e01461052a578063b84c35b31461053d578063b95d2a5314610590578063c4c20eec146105a6578063cd9a1fa6146105bc578063cfb51928146105cf578063d2ce842014610620578063d4ee1d9014610636578063d534831c14610649578063dc39d06d1461065c578063ea19d99e1461067e578063eba74c0b14610694578063f2fde38b146106e7578063f8e27f9314610706575b600080fd5b34156101e757600080fd5b6101ef61071c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022b578082015183820152602001610213565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027157600080fd5b610288600160a060020a036004351660243561075e565b005b341561029557600080fd5b61029d610810565b60405190815260200160405180910390f35b34156102ba57600080fd5b61029d600435610816565b34156102d057600080fd5b610288600160a060020a036004351661082b565b34156102ef57600080fd5b61029d6108c8565b341561030257600080fd5b610288600160a060020a03600435811690602435166044356108ce565b341561032a57600080fd5b61033e600160a060020a03600435166109ae565b604051901515815260200160405180910390f35b341561035d57600080fd5b61029d600160a060020a03600435166109c3565b341561037c57600080fd5b6101ef6004356109d5565b341561039257600080fd5b61029d600435610a14565b34156103a857600080fd5b61029d610a33565b34156103bb57600080fd5b61033e60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a3995505050505050565b341561040c57600080fd5b610417600435610c39565b604051600160a060020a03909116815260200160405180910390f35b341561043e57600080fd5b61029d600160a060020a0360043516610c5d565b341561045d57600080fd5b610288600160a060020a0360043516610d6d565b341561047c57600080fd5b61029d600160a060020a0360043516610e0c565b341561049b57600080fd5b610417600435610e27565b34156104b157600080fd5b610288610e42565b34156104c457600080fd5b610417610ec0565b34156104d757600080fd5b6101ef600435610ecf565b34156104ed57600080fd5b6101ef61107f565b341561050057600080fd5b61029d6110c0565b341561051357600080fd5b610288600160a060020a03600435166024356110c6565b341561053557600080fd5b61029d611193565b341561054857600080fd5b61033e60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061119992505050565b341561059b57600080fd5b6101ef6004356112b1565b34156105b157600080fd5b61029d6004356112d1565b34156105c757600080fd5b61029d6112e3565b34156105da57600080fd5b61029d60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506112e995505050505050565b341561062b57600080fd5b610417600435611314565b341561064157600080fd5b61041761132f565b341561065457600080fd5b61029d61133e565b341561066757600080fd5b61033e600160a060020a0360043516602435611344565b341561068957600080fd5b61029d600435611400565b341561069f57600080fd5b61033e60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061141292505050565b34156106f257600080fd5b610288600160a060020a0360043516611536565b341561071157600080fd5b61029d6004356115c4565b61072461177a565b60408051908101604052600a81527f47697a6572204974656d00000000000000000000000000000000000000000000602082015290505b90565b60008181526006602052604090205433600160a060020a0390811691161461078557600080fd5b81600160a060020a031633600160a060020a0316141515156107a657600080fd5b600081815260076020526040908190208054600160a060020a031916600160a060020a038581169182179092559133909116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b60035481565b6004548190811061082657600080fd5b919050565b60005433600160a060020a0390811691161461084657600080fd5b600160a060020a03811660009081526002602052604090205460ff16151560011461087057600080fd5b600160a060020a038116600081815260026020526040808220805460ff191690557faff098f53523369cef878ae47c10d27a8a918f0da3221b889da1776ab58f553f919051901515815260200160405180910390a250565b60045490565b600081815260066020526040902054600160a060020a038481169116148015610911575060008181526007602052604090205433600160a060020a039081169116145b151561091c57600080fd5b60008181526006602090815260408083208054600160a060020a038716600160a060020a03199182161790915560079092529091208054909116905561096283836115d2565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b60026020526000908152604090205460ff1681565b60056020526000908152604090205481565b6109dd61177a565b60085482106109eb57600080fd5b610a0e6008838154811015156109fd57fe5b906000526020600020900154610ecf565b92915050565b6008805482908110610a2257fe5b600091825260209091200154905081565b60045481565b600160a060020a03331660009081526002602052604081205481908190819060ff161515610a6657600080fd5b610a6f856112e9565b6000818152600b60205260408120549194509011610a8c57600080fd5b50506000818152600b6020526040902054600854600980546000199384019390920191610ad9919084908110610abe57fe5b600091825260209091200154600a549063ffffffff61164b16565b600a556000838152600b6020526040812055818114610b90576008805482908110610b0057fe5b906000526020600020900154600883815481101515610b1b57fe5b6000918252602090912001556009805482908110610b3557fe5b906000526020600020900154600983815481101515610b5057fe5b90600052602060002090018190555081600b6000600884815481101515610b7357fe5b600091825260208083209091015483528201929092526040019020555b6008805482908110610b9e57fe5b60009182526020822001556008805490610bbc90600019830161178c565b506009805482908110610bcb57fe5b60009182526020822001556009805490610be990600019830161178c565b50826000191660037f52b5fdb8ad051796554f4abfd519b3fc640925d4f26a660a31211dda67c493486000600a5460405191825260208201526040908101905180910390a3506001949350505050565b600081815260066020526040902054600160a060020a031680151561082657600080fd5b600160a060020a033316600090815260026020526040812054819060ff161515610c8657600080fd5b600a5460009011610c9657600080fd5b600160a060020a0383161515610cab57600080fd5b30600160a060020a031683600160a060020a031614151515610ccc57600080fd5b610cd4611660565b60048054600101908190556000818152600e60205260408120839055909350909150610d0090846115d2565b600082815260066020526040908190208054600160a060020a031916600160a060020a03868116918217909255839290913316907fc014ce867fdfdb48c9ddb8b9570d2acec76fbdd22304f6c2dbb92f8245c004559086905190815260200160405180910390a450919050565b60005433600160a060020a03908116911614610d8857600080fd5b600160a060020a03811660009081526002602052604090205460ff1615610dae57600080fd5b600160a060020a03811660008181526002602052604090819020805460ff191660019081179091557faff098f53523369cef878ae47c10d27a8a918f0da3221b889da1776ab58f553f9151901515815260200160405180910390a250565b600160a060020a031660009081526005602052604090205490565b600760205260009081526040902054600160a060020a031681565b60015433600160a060020a03908116911614610e5d57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360015460008054600160a060020a031916600160a060020a03909216919091179055565b600054600160a060020a031681565b610ed761177a565b610edf61177a565b6000806000610eec61177a565b6020604051805910610efb5750595b818152601f19601f83011681016020016040529050945060009350600092505b6020831015610fa6576008830260020a870291507fff00000000000000000000000000000000000000000000000000000000000000821615610f9b5781858581518110610f6457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001909301925b600190920191610f1b565b83604051805910610fb45750595b818152601f19601f830116810160200160405290509050600092505b8383101561107557848381518110610fe457fe5b01602001517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000281848151811061103a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190920191610fd0565b9695505050505050565b61108761177a565b60408051908101604052600681527f475a5237323100000000000000000000000000000000000000000000000000006020820152905090565b600d5481565b60008181526006602052604090205433600160a060020a039081169116146110ed57600080fd5b600160a060020a038216151561110257600080fd5b60008181526006602090815260408083208054600160a060020a038716600160a060020a03199182161790915560079092529091208054909116905561114833836115d2565b81600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b600c5481565b600160a060020a0333166000908152600260205260408120548190819060ff1615156111c457600080fd5b6111cd856112e9565b9150600084116111dc57600080fd5b6000828152600b6020526040902054156111f557600080fd5b506008805490816001810161120a838261178c565b506000918252602090912001829055600980546001810161122b838261178c565b506000918252602080832091909101869055838252600b905260409020600182019055600a54611261908563ffffffff61170616565b600a81905582906001907f52b5fdb8ad051796554f4abfd519b3fc640925d4f26a660a31211dda67c4934890879060405191825260208201526040908101905180910390a3506001949350505050565b6112b961177a565b6000828152600e6020526040902054610a0e90610ecf565b600b6020526000908152604090205481565b60035490565b60006112f361177a565b508180511515611306576000915061130e565b602083015191505b50919050565b600660205260009081526040902054600160a060020a031681565b600154600160a060020a031681565b600a5481565b6000805433600160a060020a0390811691161461136057600080fd5b60008054600160a060020a038086169263a9059cbb92909116908590604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113df57600080fd5b6102c65a03f115156113f057600080fd5b5050506040518051949350505050565b600e6020526000908152604090205481565b600160a060020a03331660009081526002602052604081205481908190819060ff16151561143f57600080fd5b611448866112e9565b92506000851161145757600080fd5b6000838152600b60205260408120541161147057600080fd5b6000838152600b6020526040902054600980546000199092019350908390811061149657fe5b9060005260206000209001549050846009838154811015156114b457fe5b600091825260209091200155600a546114e59086906114d9908463ffffffff61164b16565b9063ffffffff61170616565b600a81905583906002907f52b5fdb8ad051796554f4abfd519b3fc640925d4f26a660a31211dda67c4934890889060405191825260208201526040908101905180910390a350600195945050505050565b60005433600160a060020a0390811691161461155157600080fd5b600160a060020a038116151561156657600080fd5b600054600160a060020a0380831691167ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c060405160405180910390a360018054600160a060020a031916600160a060020a0392909216919091179055565b6009805482908110610a2257fe5b600160a060020a0382161561161457600160a060020a038216600090815260056020526040902080546000190190819055151561161457600380546000190190555b600160a060020a038116600090815260056020526040902080546001908101918290551415611647576003805460010190555b5050565b60008282111561165a57600080fd5b50900390565b600080600080600880549050600114156116965760088054600090811061168357fe5b9060005260206000209001549350611700565b61169e611716565b600a54600d548115156116ad57fe5b06925060009150600090505b6008548110156101d75760098054829081106116d157fe5b9060005260206000209001548201915082821015156116f857600880548290811061168357fe5b6001016116b9565b50505090565b81810182811015610a0e57600080fd5b600c805460010190819055600d5460001943014041446040519485526020850193909352604080850192909252600160a060020a03166c01000000000000000000000000026060840152607483019190915260949091019051908190039020600d55565b60206040519081016040526000815290565b8154818355818115116117b0576000838152602090206117b09181019083016117b5565b505050565b61075b91905b808211156117cf57600081556001016117bb565b50905600a165627a7a72305820a8b00e5ef18b98344e011ce2ce338201f16cebbd39e2430903b34c626a9502c40029"
}