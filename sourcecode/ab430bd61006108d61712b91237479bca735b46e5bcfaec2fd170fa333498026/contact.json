{
  "address": "0x62712b94ef00e75614dc4f7a9f1d78e49e929a3a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EXLINKCOIN",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-30\n*/\n\npragma solidity ^0.4.21;\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\nlibrary IterableMapping\n{\n    struct itmap\n    {\n        mapping(address => IndexValue) data;\n        KeyFlag[] keys;\n        uint size;\n        \n    }\n    struct IndexValue { uint keyIndex; uint256 value; }\n    struct KeyFlag { address key; bool deleted; }\n    function insert(itmap storage self, address key, uint256 value) returns (bool replaced)\n    {\n        uint keyIndex = self.data[key].keyIndex;\n        self.data[key].value = value;\n        if (keyIndex > 0)\n            return true;\n        else\n        {\n            keyIndex = self.keys.length++;\n            self.data[key].keyIndex = keyIndex + 1;\n            self.keys[keyIndex].key = key;\n            self.size++;\n            return false;\n        }\n    }\n    \n    function remove(itmap storage self, address key) returns (bool success)\n    {\n        uint keyIndex = self.data[key].keyIndex;\n        if (keyIndex == 0)\n            return false;\n        delete self.data[key];\n        self.keys[keyIndex - 1].deleted = true;\n        self.size --;\n    }\n    \n    function contains(itmap storage self, address key) returns (bool)\n    {\n        return self.data[key].keyIndex > 0;\n    }\n    \n    function iterate_start(itmap storage self) returns (uint keyIndex)\n    {\n        return iterate_next(self, uint(-1));\n    }\n    \n    function iterate_valid(itmap storage self, uint keyIndex) returns (bool)\n    {\n        return keyIndex < self.keys.length;\n    }\n    \n    function iterate_next(itmap storage self, uint keyIndex) returns (uint r_keyIndex)\n    {\n        keyIndex++;\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)\n            keyIndex++;\n        return keyIndex;\n    }\n    function iterate_get(itmap storage self, uint keyIndex) returns (address key, uint256 value)\n    {\n        key = self.keys[keyIndex].key;\n        value = self.data[key].value;\n    }\n}\n\n\ncontract EXLINKCOIN is ERC20Interface {\n\t\n\n\tfunction totalSupply()public constant returns (uint) {\n\t\treturn totalEXLCSupply;\n\t}\n\t\n\tfunction balanceOf(address tokenOwner)public constant returns (uint balance) {\n\t\treturn balances[tokenOwner];\n\t}\n\n\tfunction transfer(address to, uint tokens)public returns (bool success) {\n\t\tif (balances[msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\n            if(lockedUsers[msg.sender].lockedTokens > 0){\n                TryUnLockBalance(msg.sender);\n                if(balances[msg.sender] - tokens < lockedUsers[msg.sender].lockedTokens)\n                {\n                    return false;\n                }\n            }\n            \n\t\t\tbalances[msg.sender] -= tokens;\n\t\t\tbalances[to] += tokens;\n\t\t\temit Transfer(msg.sender, to, tokens);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\n\tfunction transferFrom(address from, address to, uint tokens)public returns (bool success) {\n\t\tif (balances[from] >= tokens && allowed[from].data[to].value >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\n            if(lockedUsers[from].lockedTokens > 0)\n            {\n                TryUnLockBalance(from);\n                if(balances[from] - tokens < lockedUsers[from].lockedTokens)\n                {\n                    return false;\n                }\n            }\n            \n\t\t\tbalances[from] -= tokens;\n\t\t\tallowed[from].data[msg.sender].value -= tokens;\n\t\t\tbalances[to] += tokens;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t\n\tfunction approve(address spender, uint tokens)public returns (bool success) {\n\t    IterableMapping.insert(allowed[msg.sender], spender, tokens);\n\t\treturn true;\n\t}\n\t\n\tfunction allowance(address tokenOwner, address spender)public constant returns (uint remaining) {\n\t\treturn allowed[tokenOwner].data[spender].value;\n\t}\n\t\n\t\t\n    string public name = \"EXLINK COIN\";\n    string public symbol = \"EXLC\";\n    uint8 public decimals = 18;\n\tuint256 private totalEXLCSupply = 10000000000000000000000000000;\n\tuint256 private _totalBalance = totalEXLCSupply;\n\t\n\tstruct LockUser{\n\t    uint256 lockedTokens;\n\t    uint lockedTime;\n\t    uint lockedIdx;\n\t}\n\t\n\t\n\taddress public owner = 0x0;\n\taddress public auther_user = 0x0;\n\taddress public operater = 0x0;\n\t\n    mapping (address => uint256) balances;\n    mapping(address => IterableMapping.itmap) allowed;\n\n\tmapping(address => LockUser) lockedUsers;\n\t\n\t\n \tuint  constant    private ONE_DAY_TIME_LEN = 86400;\n \tuint  constant    private ONE_YEAR_TIME_LEN = 31536000;\n\tuint32 private constant MAX_UINT32 = 0xFFFFFFFF;\n\t\n\n\tuint256   public creatorsTotalBalance =    1130000000000000000000000000; \n\tuint256   public jiGouTotalBalance =       1000000000000000000000000000;\n\tuint256   public icoTotalBalance =         1000000000000000000000000000;\n\tuint256   public mineTotalBalance =        2000000000000000000000000000;\n\tuint256   public marketorsTotalBalance =   685000000000000000000000000;\n\tuint256   public businessersTotalBalance = 685000000000000000000000000;\n\tuint256   public taskTotalBalance =        3500000000000000000000000000;\n\n\tuint256   public mineBalance = 0;\n\t\n\tbool public isIcoStart = false;\t\n\tbool public isIcoFinished = false;\n\tuint256 public icoPrice = 500000000000000000000000;\n\n\t\n\t\n\tuint256[] public mineBalanceArry = new uint256[](30); \n\tuint      public lastUnlockMineBalanceTime = 0;\n\tuint public dayIdx = 0;\n\t\n\tevent SendTo(uint32 indexed _idx, uint8 indexed _type, address _from, address _to, uint256 _value);\n\t\n\tuint32 sendToIdx = 0;\n\t\n\tfunction safeToNextIdx() internal{\n        if (sendToIdx >= MAX_UINT32){\n\t\t\tsendToIdx = 1;\n\t\t}\n        else\n        {\n\t\t\tsendToIdx += 1;\n\t\t}\n    }\n\n    constructor() public {\n\t\towner = msg.sender;\n\t\tmineBalanceArry[0] = 1000000000000000000000000;\n\t\tfor(uint i=1; i<30; i++){\n\t\t\tmineBalanceArry[i] = mineBalanceArry[i-1] * 99 / 100;\n\t\t}\n\t\tmineBalance = taskTotalBalance;\n\t\tbalances[owner] = mineBalance;\n\t\tlastUnlockMineBalanceTime = block.timestamp;\n    }\n\t\n\t\n\tfunction StartIco() public {\n\t\tif ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoStart) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tisIcoStart = true;\n\t\tisIcoFinished = false;\t\t\n\t}\n\t\n\tfunction StopIco() public {\n\t\tif ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoFinished) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tbalances[owner] += icoTotalBalance;\n\t\ticoTotalBalance = 0;\n\t\t\n\t\tisIcoStart = false;\n\t\tisIcoFinished = true;\n\t}\n\t\n\tfunction () public payable\n    {\n\t\tuint256 coin;\n\t\t\n\t\t\tif(isIcoFinished || !isIcoStart)\n\t\t\t{\n\t\t\t\trevert();\n\t\t\t}\n\t\t\n\t\t\tcoin = msg.value * icoPrice / 1 ether;\n\t\t\tif(coin > icoTotalBalance)\n\t\t\t{\n\t\t\t\trevert();\n\t\t\t}\n\n\t\t\ticoTotalBalance -= coin;\n\t\t\t_totalBalance -= coin;\n\t\t\tbalances[msg.sender] += coin;\n\t\t\t\n\t\t\temit Transfer(operater, msg.sender, coin);\n\t\t\t\n\t\t\tsafeToNextIdx();\n\t\t\temit SendTo(sendToIdx, 2, 0x0, msg.sender, coin);\n\t\t\n    }\n\n\t\n\tfunction TryUnLockBalance(address target) public {\n\t    if(target == 0x0)\n\t    {\n\t        revert();\n\t    }\n\t    LockUser storage user = lockedUsers[target];\n\t    if(user.lockedIdx > 0 && user.lockedTokens > 0)\n\t    {\n\t        if(block.timestamp >= user.lockedTime)\n\t        {\n\t            if(user.lockedIdx == 1)\n\t            {\n\t                user.lockedIdx = 0;\n\t                user.lockedTokens = 0;\n\t            }\n\t            else\n\t            {\n\t                uint256 append = user.lockedTokens/user.lockedIdx;\n\t                user.lockedTokens -= append;\n        \t\t\tuser.lockedIdx--;\n        \t\t\tuser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\n        \t\t\tlockedUsers[target] = user;\n\t            }\n\t        }\n\t    }\n\t\t\n\t}\n\t\n\tfunction QueryUnlockTime(address target) public constant returns (uint time) {\n\t    if(target == 0x0)\n\t    {\n\t        revert();\n\t    }\n\t    LockUser storage user = lockedUsers[target];\n\t    if(user.lockedIdx > 0 && user.lockedTokens > 0)\n\t    {\n\t        return user.lockedTime;\n\t    }\n\t    return 0x0;\n\t}\n\t\n\n\tfunction miningEveryDay() public{\n\t\tif (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\tuint day = uint((block.timestamp - lastUnlockMineBalanceTime) / ONE_DAY_TIME_LEN);\n\t\tif(day > 0){\n\t\t\tint max_while = 30;\n\t\t\tuint256 val;\n\t\t\twhile(day > 0 && max_while > 0 && mineTotalBalance > 0){\n\t\t\t\tmax_while--;\n\t\t\t\tday -= 1;\n\t\t\t\tdayIdx += 1;\n\t\t\t\tval = mineBalanceArry[(dayIdx/365) % 30];\n\t\t\t\tif(mineTotalBalance >= val)\n\t\t\t\t{\n\t\t\t\t\tmineBalance += val;\n\t\t\t\t\tmineTotalBalance -= val;\n\t\t\t\t\tbalances[owner] += val;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmineBalance += mineTotalBalance;\n\t\t\t\t\tmineTotalBalance = 0;\n\t\t\t\t\tbalances[owner] += mineTotalBalance;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlastUnlockMineBalanceTime = block.timestamp;\n\t\t}\n\t}\n\n\t\n\tfunction sendMinerByOwner(address _to, uint256 _value) public {\n\t\n\t\tif (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tif(_value > mineBalance){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tmineBalance -= _value;\n\t\tbalances[owner] -= _value;\n\t\tbalances[_to] += _value;\n\t\t_totalBalance -= _value;\n\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 3, owner, _to, _value);\n\t}\n\n\tfunction sendICOByOwner(address _to, uint256 _value) public {\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\tif(!isIcoFinished && isIcoStart)\n\t\t{\n\t\t\trevert();\n\t\t}\t\t\n\n\t\tif(_value > icoTotalBalance){\n\t\t\trevert();\n\t\t}\n\n\t\ticoTotalBalance -= _value;\n\t\t_totalBalance -= _value;\n\t\tbalances[_to] += _value;\n\t\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 6, 0x0, _to, _value);\n\t\n\t}\n\t\n\tfunction sendCreatorByOwner(address _to, uint256 _value) public {\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\tif(_value > creatorsTotalBalance){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tcreatorsTotalBalance -= _value;\n\t\t_totalBalance -= _value;\n\t\tbalances[_to] += _value;\n\t\tLockUser storage lockUser = lockedUsers[_to];\n\t\tlockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\n\t\tlockUser.lockedTokens += _value;\n\t\tlockUser.lockedIdx = 2;\n\n        lockedUsers[_to] = lockUser;\n\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 4, 0x0, _to, _value);\n\t}\n\n\tfunction sendJigouByOwner(address _to, uint256 _value) public {\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\tif(_value > jiGouTotalBalance){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tjiGouTotalBalance -= _value;\n\t\t_totalBalance -= _value;\n\t\tbalances[_to] += _value;\n\t\tLockUser storage lockUser = lockedUsers[_to];\n\t\tlockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\n\t\tlockUser.lockedTokens += _value;\n\t\tlockUser.lockedIdx = 1;\n\n        lockedUsers[_to] = lockUser;\n\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 4, 0x0, _to, _value);\n\t}\n\t\n\tfunction sendMarketByOwner(address _to, uint256 _value) public {\n\t\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\tif(_value > marketorsTotalBalance){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tmarketorsTotalBalance -= _value;\n\t\t_totalBalance -= _value;\n\t\tbalances[_to] += _value;\n\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 7, 0x0, _to, _value);\n\t}\n\t\n\n\tfunction sendBussinessByOwner(address _to, uint256 _value) public {\n\t\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\t\n\t\tif(_to == 0x0){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\tif(_value > businessersTotalBalance){\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t\n\t\tbusinessersTotalBalance -= _value;\n\t\t_totalBalance -= _value;\n\t\tbalances[_to] += _value;\n\t\t\n\t\temit Transfer(msg.sender, _to, _value);\n\t\t\n\t\tsafeToNextIdx();\n\t\temit SendTo(sendToIdx, 5, 0x0, _to, _value);\n\t}\n\t\n\tfunction Save() public {\n\t\tif (msg.sender != owner) {\n\t\t    revert();\n\t\t}\n\t\towner.transfer(address(this).balance);\n    }\n\t\n\t\n\tfunction changeAutherOwner(address newOwner) public {\n\t\tif ((msg.sender != owner && msg.sender != auther_user) || newOwner == 0x0) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\telse\n\t\t{\n\t\t    if(msg.sender != owner)\n\t\t    {\n\t\t        balances[msg.sender] = balances[owner];\n\t\t        for (var i = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], i); i = IterableMapping.iterate_next(allowed[owner], i))\n                {\n                    var (key, value) = IterableMapping.iterate_get(allowed[owner], i);\n                    IterableMapping.insert(allowed[msg.sender], key, value);\n                }\n\t\t\t    balances[owner] = 0;\n\t\t\t    for (var j = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], j); j = IterableMapping.iterate_next(allowed[owner], j))\n                {\n                    var (key2, value2) = IterableMapping.iterate_get(allowed[owner], j);\n                    IterableMapping.remove(allowed[owner], key2);\n                }\n\t\t    }\n\t\t\t\n\t\t\tauther_user = newOwner;\n\t\t\towner = msg.sender;\n\t\t}\n    }\n\t\n\tfunction destruct() public {\n\t\tif (msg.sender != owner) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselfdestruct(owner);\n\t\t}\n    }\n\t\n\tfunction setOperater(address op) public {\n\t\tif ((msg.sender != owner && msg.sender != auther_user && msg.sender != operater) || op == 0x0) \n\t\t{\n\t\t    revert();\n\t\t}\n\t\telse\n\t\t{\n\t\t\toperater = op;\n\t\t}\n    }\n}",
  "bytecode": ""
}