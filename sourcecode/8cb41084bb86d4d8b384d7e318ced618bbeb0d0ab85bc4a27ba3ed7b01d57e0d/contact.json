{
  "address": "0x5adf43dd006c6c36506e2b2dfa352e60002d22dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FundForwarder",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-28\n*/\n\npragma solidity ^0.4.15;\n/*\n    Copyright 2017, Arthur Lunn\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title Owned\n/// @author Adrià Massanet <[email protected]>\n/// @notice The Owned contract has an owner address, and provides basic \n///  authorization control functions, this simplifies & the implementation of\n///  user permissions; this contract has three work flows for a change in\n///  ownership, the first requires the new owner to validate that they have the\n///  ability to accept ownership, the second allows the ownership to be\n///  directly transfered without requiring acceptance, and the third allows for\n///  the ownership to be removed to allow for decentralization \ncontract Owned {\n\n    address public owner;\n    address public newOwnerCandidate;\n\n    event OwnershipRequested(address indexed by, address indexed to);\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event OwnershipRemoved();\n\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\n    ///  called by the `newOwnerCandidate`\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\n    ///  new owner\n    /// @param _newOwnerCandidate The address being proposed as the new owner\n    function proposeOwnership(address _newOwnerCandidate) onlyOwner {\n        newOwnerCandidate = _newOwnerCandidate;\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n    }\n\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\n    ///  transfer of ownership\n    function acceptOwnership() {\n        require(msg.sender == newOwnerCandidate);\n\n        address oldOwner = owner;\n        owner = newOwnerCandidate;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\n    ///  be called and it will immediately assign ownership to the `newOwner`\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner\n    function changeOwnership(address _newOwner) onlyOwner {\n        require(_newOwner != 0x0);\n\n        address oldOwner = owner;\n        owner = _newOwner;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\n    ///  be called and it will immediately assign ownership to the 0x0 address;\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\n    /// @notice Decentralizes the contract, this operation cannot be undone \n    /// @param _dac `0xdac` has to be entered for this function to work\n    function removeOwnership(uint _dac) onlyOwner {\n        require(_dac == 0xdac);\n        owner = 0x0;\n        newOwnerCandidate = 0x0;\n        OwnershipRemoved();     \n    }\n} \n\n\n/// @dev `Escapable` is a base level contract built off of the `Owned`\n///  contract; it creates an escape hatch function that can be called in an\n///  emergency that will allow designated addresses to send any ether or tokens\n///  held in the contract to an `escapeHatchDestination` as long as they were\n///  not blacklisted\ncontract Escapable is Owned {\n    address public escapeHatchCaller;\n    address public escapeHatchDestination;\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) {\n        escapeHatchCaller = _escapeHatchCaller;\n        escapeHatchDestination = _escapeHatchDestination;\n    }\n\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\n    ///  are the only addresses that can call a function with this modifier\n    modifier onlyEscapeHatchCallerOrOwner {\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\n        _;\n    }\n\n    /// @notice Creates the blacklist of tokens that are not able to be taken\n    ///  out of the contract; can only be done at the deployment, and the logic\n    ///  to add to the blacklist will be in the constructor of a child contract\n    /// @param _token the token contract address that is to be blacklisted \n    function blacklistEscapeToken(address _token) internal {\n        escapeBlacklist[_token] = true;\n        EscapeHatchBlackistedToken(_token);\n    }\n\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\n    /// @param _token the token address being queried\n    /// @return False if `_token` is in the blacklist and can't be taken out of\n    ///  the contract via the `escapeHatch()`\n    function isTokenEscapable(address _token) constant public returns (bool) {\n        return !escapeBlacklist[_token];\n    }\n\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\n    /// security issue is uncovered or something unexpected happened\n    /// @param _token to transfer, use 0x0 for ether\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \n        require(escapeBlacklist[_token]==false);\n\n        uint256 balance;\n\n        /// @dev Logic for ether\n        if (_token == 0x0) {\n            balance = this.balance;\n            escapeHatchDestination.transfer(balance);\n            EscapeHatchCalled(_token, balance);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        balance = token.balanceOf(this);\n        token.transfer(escapeHatchDestination, balance);\n        EscapeHatchCalled(_token, balance);\n    }\n\n    /// @notice Changes the address assigned to call `escapeHatch()`\n    /// @param _newEscapeHatchCaller The address of a trusted account or\n    ///  contract to call `escapeHatch()` to send the value in this contract to\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) onlyEscapeHatchCallerOrOwner {\n        escapeHatchCaller = _newEscapeHatchCaller;\n    }\n\n    event EscapeHatchBlackistedToken(address token);\n    event EscapeHatchCalled(address token, uint amount);\n}\n\n/// @dev This is an empty contract declaring `proxyPayment()` to comply with\n///  Giveth Campaigns so that tokens will be generated when donations are sent\ncontract Campaign {\n\n    /// @notice `proxyPayment()` allows the caller to send ether to the Campaign\n    /// and have the tokens created in an address of their choosing\n    /// @param _owner The address that will hold the newly created tokens\n    function proxyPayment(address _owner) payable returns(bool);\n}\n\n/// @title Fund Forwarder\n/// @author Vojtech Simetka, Jordi Baylina, Dani Philia, Arthur Lunn\n/// @notice This contract is used to forward funds to a Giveth Campaign \n///  with an escapeHatch. The ether is sent directly to designated Campaign and\n///  the `escapeHatch()` allows removal of any tokens deposited by accident\ncontract FundForwarder is Escapable {\n    Campaign public beneficiary; // expected to be a Giveth campaign\n\n    /// @notice The Constructor assigns the `beneficiary`, the\n    ///  `escapeHatchDestination` and the `escapeHatchCaller` as well as deploys\n    ///  the contract to the blockchain (obviously)\n    /// @param _beneficiary The address of the CAMPAIGN CONTROLLER for the\n    ///  Campaign that is to receive donations\n    /// @param _escapeHatchDestination The address of a safe location (usually a\n    ///  Multisig) to send the ether held in this contract\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the \n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination` in a less centralized\n    ///  and more trustless set up\n    function FundForwarder(\n        Campaign _beneficiary, // address that receives ether\n        address _escapeHatchCaller,\n        address _escapeHatchDestination\n        )Escapable(_escapeHatchCaller, _escapeHatchDestination)\n    {\n        beneficiary = _beneficiary;\n    }\n\n    /// @dev The \"fallback function\" forwards ether to `beneficiary` and the \n    ///  `msg.sender` is rewarded with Campaign tokens; this contract may have a\n    ///  high gasLimit requirement dependent on beneficiary\n    function () payable {\n        // Send the ETH to the beneficiary so that they receive Campaign tokens\n        require (beneficiary.proxyPayment.value(msg.value)(msg.sender));\n        FundsSent(msg.sender, msg.value);\n    }\n    event FundsSent(address indexed sender, uint amount);\n}\n\n/**\n * @title ERC20\n * @dev A standard interface for tokens.\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20 {\n  \n    /// @dev Returns the total token supply\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @dev Returns the account balance of the account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @dev Transfers _value number of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Transfers _value number of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516060806108a383398101604052808051919060200180519190602001805160008054600160a060020a03338116600160a060020a0319928316179092556002805496831696821696909617909555600380549282169286169290921790915560058054959091169490931693909317909155505061080e806100956000396000f3006060604052600436106100a05763ffffffff60e060020a6000350416631f6eb6e7811461015f5780632af4c31e1461018e57806338af3eed146101af578063710bf322146101c257806379ba5097146101e1578063892db057146101f45780638da5cb5b14610227578063a142d6081461023a578063d091b55014610259578063d617e0d31461026c578063d836fbe814610282578063f5b61230146102a1575b600554600160a060020a031663f48c3054343360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156100f957600080fd5b6125ee5a03f1151561010a57600080fd5b5050505060405180519050151561012057600080fd5b33600160a060020a03167f8c8f77105ce8ee99e391fd4da140bc14a988eb4cf878b240bfed9b10ae7c67583460405190815260200160405180910390a2005b341561016a57600080fd5b6101726102b4565b604051600160a060020a03909116815260200160405180910390f35b341561019957600080fd5b6101ad600160a060020a03600435166102c3565b005b34156101ba57600080fd5b610172610364565b34156101cd57600080fd5b6101ad600160a060020a0360043516610373565b34156101ec57600080fd5b6101ad6103f1565b34156101ff57600080fd5b610213600160a060020a036004351661047e565b604051901515815260200160405180910390f35b341561023257600080fd5b61017261049d565b341561024557600080fd5b6101ad600160a060020a03600435166104ac565b341561026457600080fd5b6101726106de565b341561027757600080fd5b6101ad6004356106ed565b341561028d57600080fd5b6101ad600160a060020a036004351661076e565b34156102ac57600080fd5b6101726107d3565b600254600160a060020a031681565b6000805433600160a060020a039081169116146102df57600080fd5b600160a060020a03821615156102f457600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600554600160a060020a031681565b60005433600160a060020a0390811691161461038e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a0390811691161461040f57600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b600254600090819033600160a060020a03908116911614806104dc575060005433600160a060020a039081169116145b15156104e757600080fd5b600160a060020a03831660009081526004602052604090205460ff161561050d57600080fd5b600160a060020a038316151561059f57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f19350505050151561055657600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a16106d9565b5081600160a060020a0381166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105f857600080fd5b6102c65a03f1151561060957600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561067857600080fd5b6102c65a03f1151561068957600080fd5b50505060405180519050507fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b600154600160a060020a031681565b60005433600160a060020a0390811691161461070857600080fd5b610dac811461071657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60025433600160a060020a0390811691161480610799575060005433600160a060020a039081169116145b15156107a457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a0316815600a165627a7a72305820b1cd36367999fc58c83555c8daff8de87683bd693ac19655a0c9d7df1fc6512f00290000000000000000000000008702b8d7a1eefec7e54636e26a9323dc96a8dc25000000000000000000000000839395e20bbb182fa440d08f850e6c7a8f6f07800000000000000000000000008ff920020c8ad673661c8117f2855c384758c572",
  "constructorArguments": "0000000000000000000000008702b8d7a1eefec7e54636e26a9323dc96a8dc25000000000000000000000000839395e20bbb182fa440d08f850e6c7a8f6f07800000000000000000000000008ff920020c8ad673661c8117f2855c384758c572"
}