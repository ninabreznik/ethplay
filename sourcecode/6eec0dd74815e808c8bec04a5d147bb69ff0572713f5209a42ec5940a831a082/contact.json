{
  "address": "0x2cad3143f61f1ff3a9d684078b502eebac87ec0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OwnedUpgradeabilityProxy",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "20000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-08\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Proxy/OwnedUpgradeabilityProxy.sol\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedUpgradeabilityProxy {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Event to show ownership transfer is pending\n    * @param currentOwner representing the address of the current owner\n    * @param pendingOwner representing the address of the pending owner\n    */\n    event NewPendingOwner(address currentOwner, address pendingOwner);\n    \n    // Storage position of the owner and pendingOwner of the contract\n    bytes32 private constant proxyOwnerPosition = 0x6279e8199720cf3557ecd8b58d667c8edc486bd1cf3ad59ea9ebdfcae0d0dfac;//keccak256(\"trueUSD.proxy.owner\");\n    bytes32 private constant pendingProxyOwnerPosition = 0x8ddbac328deee8d986ec3a7b933a196f96986cb4ee030d86cc56431c728b83f4;//keccak256(\"trueUSD.pending.proxy.owner\");\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        _setUpgradeabilityOwner(msg.sender);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyProxyOwner() {\n        require(msg.sender == proxyOwner(), \"only Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the pending owner.\n    */\n    modifier onlyPendingProxyOwner() {\n        require(msg.sender == pendingProxyOwner(), \"only pending Proxy Owner\");\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function proxyOwner() public view returns (address owner) {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            owner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function pendingProxyOwner() public view returns (address pendingOwner) {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            pendingOwner := sload(position)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\n        bytes32 position = proxyOwnerPosition;\n        assembly {\n            sstore(position, newProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\n        bytes32 position = pendingProxyOwnerPosition;\n        assembly {\n            sstore(position, newPendingProxyOwner)\n        }\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    *changes the pending owner to newOwner. But doesn't actually transfer\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\n        require(newOwner != address(0));\n        _setPendingUpgradeabilityOwner(newOwner);\n        emit NewPendingOwner(proxyOwner(), newOwner);\n    }\n\n    /**\n    * @dev Allows the pendingOwner to claim ownership of the proxy\n    */\n    function claimProxyOwnership() external onlyPendingProxyOwner {\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\n        _setUpgradeabilityOwner(pendingProxyOwner());\n        _setPendingUpgradeabilityOwner(address(0));\n    }\n\n    /**\n    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n    * @param implementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(address implementation) external onlyProxyOwner {\n        address currentImplementation;\n        bytes32 position = implementationPosition;\n        assembly {\n            currentImplementation := sload(position)\n        }\n        require(currentImplementation != implementation);\n        assembly {\n          sstore(position, implementation)\n        }\n        emit Upgraded(implementation);\n    }\n    /**\n    * @dev This event will be emitted every time the implementation gets upgraded\n    * @param implementation representing the address of the upgraded implementation\n    */\n    event Upgraded(address indexed implementation);\n\n    // Storage position of the address of the current implementation\n    bytes32 private constant implementationPosition = 0x6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc7; //keccak256(\"trueUSD.proxy.implementation\");\n\n    function implementation() public view returns (address impl) {\n        bytes32 position = implementationPosition;\n        assembly {\n            impl := sload(position)\n        }\n    }\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function() external payable {\n        bytes32 position = implementationPosition;\n        \n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, returndatasize, calldatasize)\n            let result := delegatecall(gas, sload(position), ptr, calldatasize, returndatasize, returndatasize)\n            returndatacopy(ptr, 0, returndatasize)\n\n            switch result\n            case 0 { revert(ptr, returndatasize) }\n            default { return(ptr, returndatasize) }\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingProxyOwner\",\"outputs\":[{\"name\":\"pendingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61004c565b7f6279e8199720cf3557ecd8b58d667c8edc486bd1cf3ad59ea9ebdfcae0d0dfac55565b6106058061005b6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100bc5780630add8140146100fa5780633659cfe61461010f5780635c60da1b1461013f5780639965b3d614610154578063f1739cae14610169575b6040517f6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc790363d82373d3d368385545af43d6000833e8080156100b8573d83f35b3d83fd5b3480156100c857600080fd5b506100d1610197565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561010657600080fd5b506100d16101bc565b34801561011b57600080fd5b5061013d73ffffffffffffffffffffffffffffffffffffffff600435166101e1565b005b34801561014b57600080fd5b506100d161031c565b34801561016057600080fd5b5061013d610341565b34801561017557600080fd5b5061013d73ffffffffffffffffffffffffffffffffffffffff60043516610468565b7f6279e8199720cf3557ecd8b58d667c8edc486bd1cf3ad59ea9ebdfcae0d0dfac5490565b7f8ddbac328deee8d986ec3a7b933a196f96986cb4ee030d86cc56431c728b83f45490565b6000806101ec610197565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b50507f6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc780549073ffffffffffffffffffffffffffffffffffffffff80831690841614156102d357600080fd5b82815560405173ffffffffffffffffffffffffffffffffffffffff8416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2505050565b7f6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc75490565b6103496101bc565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b6103ec6101bc565b73ffffffffffffffffffffffffffffffffffffffff1661040a610197565b73ffffffffffffffffffffffffffffffffffffffff167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a361045c6104576101bc565b610591565b61046660006105b5565b565b610470610197565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561050b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116151561052d57600080fd5b610536816105b5565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b61055f610197565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301528051918290030190a150565b7f6279e8199720cf3557ecd8b58d667c8edc486bd1cf3ad59ea9ebdfcae0d0dfac55565b7f8ddbac328deee8d986ec3a7b933a196f96986cb4ee030d86cc56431c728b83f4555600a165627a7a723058208484b03ee3ba3bde76221bc8d5df592df8b8806f8f68b26405f0ecbc29a1a6590029"
}