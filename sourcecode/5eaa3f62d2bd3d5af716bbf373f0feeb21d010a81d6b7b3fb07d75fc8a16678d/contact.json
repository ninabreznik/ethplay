{
  "address": "0xc4e909299bd1e2c60e4386e5ee1c718a3db50ab9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.20;\n\ncontract Token {\n\n\n    /// @return total amount of tokens\n\n    function totalSupply() constant returns (uint256 supply) {}\n\n\n    /// @param _owner The address from which the balance will be retrieved\n\n    /// @return The balance\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n\n    /// @param _to The address of the recipient\n\n    /// @param _value The amount of token to be transferred\n\n    /// @return Whether the transfer was successful or not\n\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n\n    /// @param _from The address of the sender\n\n    /// @param _to The address of the recipient\n\n    /// @param _value The amount of token to be transferred\n\n    /// @return Whether the transfer was successful or not\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n\n    /// @param _spender The address of the account able to transfer the tokens\n\n    /// @param _value The amount of wei to be approved for transfer\n\n    /// @return Whether the approval was successful or not\n\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n\n    /// @param _owner The address of the account owning tokens\n\n    /// @param _spender The address of the account able to transfer the tokens\n\n    /// @return Amount of remaining tokens allowed to spent\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\n}\n\n\ncontract StandardToken is Token {\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n\n        //Replace the if with this one instead.\n\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n\n            balances[msg.sender] -= _value;\n\n            balances[_to] += _value;\n\n            Transfer(msg.sender, _to, _value);\n\n            return true;\n\n        } else { return false; }\n\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n\n            balances[_to] += _value;\n\n            balances[_from] -= _value;\n\n            allowed[_from][msg.sender] -= _value;\n\n            Transfer(_from, _to, _value);\n\n            return true;\n\n        } else { return false; }\n\n    }\n\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n\n        return balances[_owner];\n\n    }\n\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\n      return allowed[_owner][_spender];\n\n    }\n\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n}\n\n\n//name this contract whatever you'd like\n\ncontract ERC20Token is StandardToken {\n\n\n    function () {\n\n        //if ether is sent to this address, send it back.\n\n        throw;\n\n    }\n\n\n    /* Public variables of the token */\n\n\n    /*\n\n    NOTE:\n\n    The following variables are OPTIONAL vanities. One does not have to include them.\n\n    They allow one to customise the token contract & in no way influences the core functionality.\n\n    Some wallets/interfaces might not even bother to look at this information.\n\n    */\n\n    string public name;                   //fancy name: eg Simon Bucks\n\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n\n    string public symbol;                 //An identifier: eg SBX\n\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n\n//\n\n// CHANGE THESE VALUES FOR YOUR TOKEN\n\n//\n\n\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\n\n\n    function ERC20Token(\n\n        ) {\n\n        balances[msg.sender] = 10000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n\n        totalSupply = 10000000000000000000000000000;                        // Update total supply (100000 for example)\n\n        name = \"Crypt Exchange Token\";                                   // Set the name for display purposes\n\n        decimals = 18;                            // Amount of decimals for display purposes\n\n        symbol = \"CRYPT\";                               // Set the symbol for display purposes\n\n    }\n\n\n    /* Approves and then calls the receiving contract */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n\n        return true;\n\n    }\n\n}",
  "bytecode": "60c0604052600460808190527f48312e300000000000000000000000000000000000000000000000000000000060a090815261003e9160069190610108565b5034801561004b57600080fd5b5033600090815260208181526040918290206b204fce5e3e2502611000000090819055600255815180830190925260148083527f43727970742045786368616e676520546f6b656e000000000000000000000000929091019182526100b291600391610108565b506004805460ff191660121790556040805180820190915260058082527f435259505400000000000000000000000000000000000000000000000000000060209092019182526101029181610108565b506101a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014957805160ff1916838001178555610176565b82800160010185558215610176579182015b8281111561017657825182559160200191906001019061015b565b50610182929150610186565b5090565b6101a091905b80821115610182576000815560010161018c565b90565b61082d806101b26000396000f3006080604052600436106100955763ffffffff60e060020a60003504166306fdde0381146100a7578063095ea7b31461013157806318160ddd1461016957806323b872dd14610190578063313ce567146101ba57806354fd4d50146101e557806370a08231146101fa57806395d89b411461021b578063a9059cbb14610230578063cae9ca5114610254578063dd62ed3e146102bd575b3480156100a157600080fd5b50600080fd5b3480156100b357600080fd5b506100bc6102e4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f65781810151838201526020016100de565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013d57600080fd5b50610155600160a060020a0360043516602435610372565b604080519115158252519081900360200190f35b34801561017557600080fd5b5061017e6103d9565b60408051918252519081900360200190f35b34801561019c57600080fd5b50610155600160a060020a03600435811690602435166044356103df565b3480156101c657600080fd5b506101cf6104ca565b6040805160ff9092168252519081900360200190f35b3480156101f157600080fd5b506100bc6104d3565b34801561020657600080fd5b5061017e600160a060020a036004351661052e565b34801561022757600080fd5b506100bc610549565b34801561023c57600080fd5b50610155600160a060020a03600435166024356105a4565b34801561026057600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610155948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061063b9650505050505050565b3480156102c957600080fd5b5061017e600160a060020a03600435811690602435166107d6565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60025481565b600160a060020a038316600090815260208190526040812054821180159061042a5750600160a060020a03841660009081526001602090815260408083203384529091529020548211155b80156104365750600082115b156104bf57600160a060020a0380841660008181526020818152604080832080548801905593881680835284832080548890039055600182528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060016104c3565b5060005b9392505050565b60045460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561036a5780601f1061033f5761010080835404028352916020019161036a565b600160a060020a031660009081526020819052604090205490565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561036a5780601f1061033f5761010080835404028352916020019161036a565b3360009081526020819052604081205482118015906105c35750600082115b15610633573360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060016103d3565b5060006103d3565b336000818152600160209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b8381101561077b578181015183820152602001610763565b50505050905090810190601f1680156107a85780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af19250505015156107cc57600080fd5b5060019392505050565b600160a060020a039182166000908152600160209081526040808320939094168252919091522054905600a165627a7a72305820baf939157013c4d307b39447652c75df262bec8420962be9ea9d585709a2d4d40029"
}