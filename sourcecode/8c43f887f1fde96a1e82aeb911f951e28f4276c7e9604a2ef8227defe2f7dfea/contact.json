{
  "address": "0xea663d14bf15b201dc5e0c63f718cabe5d03a325",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AceDice",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\n// solium-disable linebreak-style\npragma solidity ^0.5.0;\n\ncontract CryptoTycoonsVIPLib{\n    \n    address payable public owner;\n\n    mapping (address => uint) userExpPool;\n    mapping (address => bool) public callerMap;\n    modifier onlyOwner {\n        require(msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    modifier onlyCaller {\n        bool isCaller = callerMap[msg.sender];\n        require(isCaller, \"onlyCaller methods called by non-caller.\");\n        _;\n    }\n\n    constructor() public{\n        owner = msg.sender;\n        callerMap[owner] = true;\n    }\n\n    function kill() external onlyOwner {\n        selfdestruct(owner);\n    }\n\n    function addCaller(address caller) public onlyOwner{\n        bool isCaller = callerMap[caller];\n        if (isCaller == false){\n            callerMap[caller] = true;\n        }\n    }\n\n    function deleteCaller(address caller) external onlyOwner {\n        bool isCaller = callerMap[caller];\n        if (isCaller == true) {\n            callerMap[caller] = false;\n        }\n    }\n\n    function addUserExp(address addr, uint256 amount) public onlyCaller{\n        uint exp = userExpPool[addr];\n        exp = exp + amount;\n        userExpPool[addr] = exp;\n    }\n\n    function getUserExp(address addr) public view returns(uint256 exp){\n        return userExpPool[addr];\n    }\n\n    function getVIPLevel(address user) public view returns (uint256 level) {\n        uint exp = userExpPool[user];\n\n        if(exp >= 30 ether && exp < 150 ether){\n            level = 1;\n        } else if(exp >= 150 ether && exp < 300 ether){\n            level = 2;\n        } else if(exp >= 300 ether && exp < 1500 ether){\n            level = 3;\n        } else if(exp >= 1500 ether && exp < 3000 ether){\n            level = 4;\n        } else if(exp >= 3000 ether && exp < 15000 ether){\n            level = 5;\n        } else if(exp >= 15000 ether && exp < 30000 ether){\n            level = 6;\n        } else if(exp >= 30000 ether && exp < 150000 ether){\n            level = 7;\n        } else if(exp >= 150000 ether){\n            level = 8;\n        } else{\n            level = 0;\n        }\n\n        return level;\n    }\n\n    function getVIPBounusRate(address user) public view returns (uint256 rate){\n        uint level = getVIPLevel(user);\n\n        if(level == 1){\n            rate = 1;\n        } else if(level == 2){\n            rate = 2;\n        } else if(level == 3){\n            rate = 3;\n        } else if(level == 4){\n            rate = 4;\n        } else if(level == 5){\n            rate = 5;\n        } else if(level == 6){\n            rate = 7;\n        } else if(level == 7){\n            rate = 9;\n        } else if(level == 8){\n            rate = 11;\n        } else if(level == 9){\n            rate = 13;\n        } else if(level == 10){\n            rate = 15;\n        } else{\n            rate = 0;\n        }\n    }\n}\n\ncontract AceDice {\n    /// *** Constants section\n\n    // Each bet is deducted 1% in favour of the house, but no less than some minimum.\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\n    // headroom for up to 10 Gwei prices.\n    uint constant HOUSE_EDGE_PERCENT = 1;\n    uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether;\n\n    // Bets lower than this amount do not participate in jackpot rolls (and are\n    // not deducted JACKPOT_FEE).\n    uint constant MIN_JACKPOT_BET = 0.1 ether;\n\n    // Chance to win jackpot (currently 0.1%) and fee deducted into jackpot fund.\n    uint constant JACKPOT_MODULO = 1000;\n    uint constant JACKPOT_FEE = 0.001 ether;\n\n    // There is minimum and maximum bets.\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_AMOUNT = 300000 ether;\n\n    // Modulo is a number of equiprobable outcomes in a game:\n    // - 2 for coin flip\n    // - 6 for dice\n    // - 6*6 = 36 for double dice\n    // - 100 for etheroll\n    // - 37 for roulette\n    // etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    // uint constant MAX_MODULO = 100;\n\n    // For modulos below this threshold rolls are checked against a bit mask,\n    // thus allowing betting on any combination of outcomes. For example, given\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\n    // limit is used, allowing betting on any outcome in [0, N) range.\n    //\n    // The specific value is dictated by the fact that 256-bit intermediate\n    // multiplication result allows implementing population count efficiently\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of\n    // eight below 42.\n    uint constant MAX_MASK_MODULO = 40;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\n    // past. Given that settleBet uses block hash of placeBet as one of\n    // complementary entropy sources, we cannot process bets older than this\n    // threshold. On rare occasions AceDice croupier may fail to invoke\n    // settleBet in this timespan due to technical issues or extreme Ethereum\n    // congestion; such bets can be refunded via invoking refundBet.\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    // Some deliberately invalid address to initialize the secret signer with.\n    // Forces maintainers to invoke setSecretSigner before processing any bets.\n    address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    // Standard contract ownership transfer.\n    address payable public owner;\n    address payable private nextOwner;\n\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\n    uint public maxProfit;\n\n    // The address corresponding to a private key used to sign placeBet commits.\n    address public secretSigner;\n\n    // Accumulated jackpot fund.\n    uint128 public jackpotSize;\n\n    uint public todaysRewardSize;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint128 public lockedInBets;\n\n    // A structure representing a single bet.\n    struct Bet {\n        // Wager amount in wei.\n        uint amount;\n        // Modulo of a game.\n        // uint8 modulo;\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 rollUnder;\n        // Block number of placeBet tx.\n        uint40 placeBlockNumber;\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint40 mask;\n        // Address of a gambler, used to pay out winning bets.\n        address payable gambler;\n        // Address of inviter\n        address payable inviter;\n    }\n\n    struct Profile{\n        // picture index of profile avatar\n        uint avatarIndex;\n        // nickname of user\n        bytes32 nickName;\n    }\n\n    // Mapping from commits to all currently active & processed bets.\n    mapping (uint => Bet) bets;\n\n    mapping (address => Profile) profiles;\n\n    // Croupier account.\n    mapping (address => bool ) croupierMap;\n\n    address public VIPLibraryAddress;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed beneficiary, uint amount);\n    event Payment(address indexed beneficiary, uint amount, uint dice, uint rollUnder, uint betAmount);\n    event JackpotPayment(address indexed beneficiary, uint amount, uint dice, uint rollUnder, uint betAmount);\n    event VIPPayback(address indexed beneficiary, uint amount);\n\n    // This event is emitted in placeBet to record commit in the logs.\n    event Commit(uint commit);\n\n    // 오늘의 랭킹 보상 지급 이벤트\n    event TodaysRankingPayment(address indexed beneficiary, uint amount);\n\n    // Constructor. Deliberately does not take any parameters.\n    constructor () public {\n        owner = msg.sender;\n        secretSigner = DUMMY_ADDRESS;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n    bool isCroupier = croupierMap[msg.sender];\n        require(isCroupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    // Standard contract ownership transfer implementation,\n    function approveNextOwner(address payable _nextOwner) external onlyOwner {\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\n        nextOwner = _nextOwner;\n    }\n\n    function acceptNextOwner() external {\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n        owner = nextOwner;\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function () external payable {\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    function getSecretSigner() external onlyOwner view returns(address){\n        return secretSigner;\n    }\n\n    function addCroupier(address newCroupier) external onlyOwner {\n        bool isCroupier = croupierMap[newCroupier];\n        if (isCroupier == false) {\n            croupierMap[newCroupier] = true;\n        }\n    }\n    \n    function deleteCroupier(address newCroupier) external onlyOwner {\n        bool isCroupier = croupierMap[newCroupier];\n        if (isCroupier == true) {\n            croupierMap[newCroupier] = false;\n        }\n    }\n\n    function setVIPLibraryAddress(address addr) external onlyOwner{\n        VIPLibraryAddress = addr;\n    }\n\n    // Change max bet reward. Setting this to zero effectively disables betting.\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\n        require (_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require (increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of AceDice operation.\n    function withdrawFunds(address payable beneficiary, uint withdrawAmount) external onlyOwner {\n        require (withdrawAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + withdrawAmount <= address(this).balance, \"Not enough funds.\");\n        sendFunds(beneficiary, withdrawAmount, withdrawAmount, 0, 0, 0);\n    }\n\n    function kill() external onlyOwner {\n        require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        selfdestruct(owner);\n    }\n\n    function encodePacketCommit(uint commitLastBlock, uint commit) private pure returns(bytes memory){\n        return abi.encodePacked(uint40(commitLastBlock), commit);\n    }\n\n    function verifyCommit(uint commitLastBlock, uint commit, uint8 v, bytes32 r, bytes32 s) private view {\n        // Check that commit is valid - it has not expired and its signature is valid.\n        require (block.number <= commitLastBlock, \"Commit has expired.\");\n        //bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes memory message = encodePacketCommit(commitLastBlock, commit);\n        bytes32 messageHash = keccak256(abi.encodePacked(prefix, keccak256(message)));\n        require (secretSigner == ecrecover(messageHash, v, r, s), \"ECDSA signature is not valid.\");\n    }\n\n    function placeBet(uint betMask, uint commitLastBlock, uint commit, uint8 v, bytes32 r, bytes32 s) external payable {\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require (bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        uint amount = msg.value;\n        //require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require (amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        verifyCommit(commitLastBlock, commit, v, r, s);\n\n        // uint rollUnder;\n        uint mask;\n\n        // if (modulo <= MAX_MASK_MODULO) {\n        //   // Small modulo games specify bet outcomes via bit mask.\n        //   // rollUnder is a number of 1 bits in this mask (population count).\n        //   // This magic looking formula is an efficient way to compute population\n        //   // count on EVM for numbers below 2**40. For detailed proof consult\n        //   // the AceDice whitepaper.\n        //   rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        //   mask = betMask;\n        //   } else {\n        // Larger modulos specify the right edge of half-open interval of\n        // winning bet outcomes.\n        require (betMask > 0 && betMask <= 100, \"High modulo range, betMask larger than modulo.\");\n        // rollUnder = betMask;\n        // }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(amount, betMask);\n\n        // Enforce max profit limit.\n        require (possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation. \");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require (jackpotSize + lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit);\n\n        // Store bet parameters on blockchain.\n        bet.amount = amount;\n        // bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(betMask);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint40(mask);\n        bet.gambler = msg.sender;\n\n        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);\n        vipLib.addUserExp(msg.sender, amount);\n    }\n\n    function applyVIPLevel(address payable gambler, uint amount) private {\n        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);\n        uint rate = vipLib.getVIPBounusRate(gambler);\n        // uint accuAmount = accuBetAmount[gambler];\n        // uint rate;\n        // if(accuAmount >= 30 ether && accuAmount < 150 ether){\n        //     rate = 1;\n        // } else if(accuAmount >= 150 ether && accuAmount < 300 ether){\n        //     rate = 2;\n        // } else if(accuAmount >= 300 ether && accuAmount < 1500 ether){\n        //     rate = 4;\n        // } else if(accuAmount >= 1500 ether && accuAmount < 3000 ether){\n        //     rate = 6;\n        // } else if(accuAmount >= 3000 ether && accuAmount < 15000 ether){\n        //     rate = 8;\n        // } else if(accuAmount >= 15000 ether && accuAmount < 30000 ether){\n        //     rate = 10;\n        // } else if(accuAmount >= 30000 ether && accuAmount < 150000 ether){\n        //     rate = 12;\n        // } else if(accuAmount >= 150000 ether){\n        //     rate = 15;\n        // } else{\n        //     return;\n        // }\n        if (rate <= 0)\n            return;\n\n        uint vipPayback = amount * rate / 10000;\n        if(gambler.send(vipPayback)){\n            emit VIPPayback(gambler, vipPayback);\n        }\n    }\n\n    function placeBetWithInviter(uint betMask, uint commitLastBlock, uint commit, uint8 v, bytes32 r, bytes32 s, address payable inviter) external payable {\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require (bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        uint amount = msg.value;\n        // require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require (amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n        require (address(this) != inviter && inviter != address(0), \"cannot invite mysql\");\n\n        verifyCommit(commitLastBlock, commit, v, r, s);\n\n        // uint rollUnder;\n        uint mask;\n\n        // if (modulo <= MAX_MASK_MODULO) {\n        //   // Small modulo games specify bet outcomes via bit mask.\n        //   // rollUnder is a number of 1 bits in this mask (population count).\n        //   // This magic looking formula is an efficient way to compute population\n        //   // count on EVM for numbers below 2**40. For detailed proof consult\n        //   // the AceDice whitepaper.\n        //   rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        //   mask = betMask;\n        // } else {\n        // Larger modulos specify the right edge of half-open interval of\n        // winning bet outcomes.\n        require (betMask > 0 && betMask <= 100, \"High modulo range, betMask larger than modulo.\");\n        // rollUnder = betMask;\n        // }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(amount, betMask);\n\n        // Enforce max profit limit.\n        require (possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation. \");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require (jackpotSize + lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit);\n\n        // Store bet parameters on blockchain.\n        bet.amount = amount;\n        // bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(betMask);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint40(mask);\n        bet.gambler = msg.sender;\n        bet.inviter = inviter;\n\n        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);\n        vipLib.addUserExp(msg.sender, amount);\n    }\n\n    function getMyAccuAmount() external view returns (uint){\n        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);\n        return vipLib.getUserExp(msg.sender);\n    }\n\n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require (block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require (blockhash(placeBlockNumber) == blockHash);\n\n        // Settle bet using reveal and blockHash as entropy sources.\n        settleBetCommon(bet, reveal, blockHash);\n    }\n\n        // Common settlement code for settleBet & settleBetUncleMerkleProof.\n    function settleBetCommon(Bet storage bet, uint reveal, bytes32 entropyBlockHash) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint amount = bet.amount;\n        // uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address payable gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        applyVIPLevel(gambler, amount);\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n\n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint modulo = 100;\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = getDiceWinAmount(amount, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if (modulo <= MAX_MASK_MODULO) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.mask != 0) {\n                diceWin = diceWinAmount;\n            }\n\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            // uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if ((uint(entropy) / modulo) % JACKPOT_MODULO == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin, dice, rollUnder, amount);\n        }\n\n        if(bet.inviter != address(0)){\n            // 친구 초대하면 친구한대 15% 때어줌\n            // uint inviterFee = amount * HOUSE_EDGE_PERCENT / 100 * 15 /100;\n            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);\n        }\n        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;\n        // Send the funds to gambler.\n        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin, dice, rollUnder, amount);\n    }\n\n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\n    // BET_EXPIRATION_BLOCKS comment above for details). In case you ever find yourself\n    // in a situation like this, just contact the AceDice support, however nothing\n    // precludes you from invoking this method yourself.\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require (block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.rollUnder);\n\n        lockedInBets -= uint128(diceWinAmount);\n        jackpotSize -= uint128(jackpotFee);\n\n        // Send the refund.\n        sendFunds(bet.gambler, amount, amount, 0, 0, 0);\n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function getDiceWinAmount(uint amount, uint rollUnder) private pure returns (uint winAmount, uint jackpotFee) {\n        require (0 < rollUnder && rollUnder <= 100, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_PERCENT / 100;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n        houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require (houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n        winAmount = (amount - houseEdge - jackpotFee) * 100 / rollUnder;\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(address payable beneficiary, uint amount, uint successLogAmount, uint dice, uint rollUnder, uint betAmount) private {\n        if (beneficiary.send(amount)) {\n            emit Payment(beneficiary, successLogAmount, dice, rollUnder, betAmount);\n        } else {\n            emit FailedPayment(beneficiary, amount);\n        }\n    }\n\n    function thisBalance() public view returns(uint) {\n        return address(this).balance;\n    }\n\n    function setAvatarIndex(uint index) external{\n        require (index >=0 && index <= 100, \"avatar index should be in range\");\n        Profile storage profile = profiles[msg.sender];\n        profile.avatarIndex = index;\n    }\n\n    function setNickName(bytes32 nickName) external{\n        Profile storage profile = profiles[msg.sender];\n        profile.nickName = nickName;\n    }\n\n    function getProfile() external view returns(uint, bytes32){\n        Profile storage profile = profiles[msg.sender];\n        return (profile.avatarIndex, profile.nickName);\n    }\n\n    function payTodayReward(address payable to) external onlyOwner {\n        uint prize = todaysRewardSize / 2;\n        todaysRewardSize = todaysRewardSize - prize;\n        if(to.send(prize)){\n            emit TodaysRankingPayment(to, prize);\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506140f9806100b56000396000f3fe60806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327f3a72a1461016c5780632d7243ef146101975780633afd716f146101e8578063412648bf1461023957806341c0e1b514610274578063442686551461028b5780634d61537f146102dc57806357246d231461033357806362246c41146103825780638da5cb5b146103bd5780639efedc9114610414578063a43796ce1461043f578063a9c1685b14610496578063b372f939146104ed578063b539cd5514610518578063bb5a4f4c14610543578063c1075329146105a6578063ca722cdc14610601578063d06c54fb14610646578063d3d199651461065d578063d579fd44146106ae578063d6afc9b1146106ff578063d6d30a5114610731578063d702087f1461076c578063df88126f146107bd578063dfea6ec21461080c578063e1fdb4b41461088f578063fbd668a9146108ca575b005b34801561017857600080fd5b50610181610905565b6040518082815260200191505060405180910390f35b3480156101a357600080fd5b506101e6600480360360208110156101ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610924565b005b3480156101f457600080fd5b506102376004803603602081101561020b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ab9565b005b34801561024557600080fd5b506102726004803603602081101561025c57600080fd5b8101908080359060200190929190505050610be7565b005b34801561028057600080fd5b50610289610cbd565b005b34801561029757600080fd5b506102da600480360360208110156102ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed5565b005b3480156102e857600080fd5b506102f161107a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033f57600080fd5b506103486110a0565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038e57600080fd5b506103bb600480360360208110156103a557600080fd5b81019080803590602001909291905050506110c2565b005b3480156103c957600080fd5b506103d2611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042057600080fd5b50610429611137565b6040518082815260200191505060405180910390f35b34801561044b57600080fd5b50610454611239565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a257600080fd5b506104ab61134d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f957600080fd5b50610502611373565b6040518082815260200191505060405180910390f35b34801561052457600080fd5b5061052d611379565b6040518082815260200191505060405180910390f35b6105a4600480360360c081101561055957600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061137f565b005b3480156105b257600080fd5b506105ff600480360360408110156105c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a5c565b005b34801561060d57600080fd5b506106446004803603604081101561062457600080fd5b810190808035906020019092919080359060200190929190505050611cf0565b005b34801561065257600080fd5b5061065b611fa3565b005b34801561066957600080fd5b506106ac6004803603602081101561068057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120f2565b005b3480156106ba57600080fd5b506106fd600480360360208110156106d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612297565b005b34801561070b57600080fd5b5061071461248a565b604051808381526020018281526020019250505060405180910390f35b34801561073d57600080fd5b5061076a6004803603602081101561075457600080fd5b81019080803590602001909291905050506124e3565b005b34801561077857600080fd5b506107bb6004803603602081101561078f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c0565b005b3480156107c957600080fd5b506107d26128ee565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61088d600480360360e081101561082257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612910565b005b34801561089b57600080fd5b506108c8600480360360208110156108b257600080fd5b810190808035906020019092919050505061310e565b005b3480156108d657600080fd5b50610903600480360360208110156108ed57600080fd5b81019080803590602001909291905050506133ab565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60006002600554811515610a1e57fe5b04905080600554036005819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015610ab5578173ffffffffffffffffffffffffffffffffffffffff167f875de2816b17269ce10ae748fd72a0243bad5ee5ed409961ac7aea9fc4db80af826040518082815260200191505060405180910390a25b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ba3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008110158015610bf9575060648111155b1515610c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f61766174617220696e6465782073686f756c6420626520696e2072616e67650081525060200191505060405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141515610e9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260488152602001807f416c6c20626574732073686f756c642062652070726f6365737365642028736581526020017f74746c6564206f7220726566756e64656429206265666f72652073656c662d6481526020017f657374727563742e00000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fbf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600015158115151415611076576001600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a90046fffffffffffffffffffffffffffffffff1681565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600101819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b98f5932336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156111f857600080fd5b505afa15801561120c573d6000803e3d6000fd5b505050506040513d602081101561122257600080fd5b810190808051906020019092919050505091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611325576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60025481565b6000600760008681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff1681600101600b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611484576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4265742073686f756c6420626520696e20612027636c65616e2720737461746581526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000349050662386f26fc1000081101580156114aa5750693f870857a3e0e38000008111155b151561151e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f416d6f756e742073686f756c642062652077697468696e2072616e67652e000081525060200191505060405180910390fd5b6000881180156115315750602860020a88105b15156115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4d61736b2073686f756c642062652077697468696e2072616e67652e0000000081525060200191505060405180910390fd5b6115b28787878787613546565b600080891180156115c4575060648911155b151561165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676581526020017f72207468616e206d6f64756c6f2e00000000000000000000000000000000000081525060400191505060405180910390fd5b60008061166b848c6137c2565b8092508193505050600254840182111515156116ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6d617850726f666974206c696d69742076696f6c6174696f6e2e20000000000081525060200191505060405180910390fd5b81600660008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1631600660009054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16016fffffffffffffffffffffffffffffffff1611151515611882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f74206166666f726420746f206c6f73652074686973206265742e0081525060200191505060405180910390fd5b7f5bdd2fc99022530157777690475b670d3872f32262eb1d47d9ba8000dad58f87896040518082815260200191505060405180910390a18385600001819055508a8560010160006101000a81548160ff021916908360ff160217905550438560010160016101000a81548164ffffffffff021916908364ffffffffff160217905550828560010160066101000a81548164ffffffffff021916908364ffffffffff1602179055503385600101600b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16639232fdb533876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611a3657600080fd5b505af1158015611a4a573d6000803e3d6000fd5b50505050505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16318111151515611bfb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6181526020017f6e63652e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163181600660009054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16016fffffffffffffffffffffffffffffffff160111151515611cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f7567682066756e64732e00000000000000000000000000000081525060200191505060405180910390fd5b611cec8282836000806000613957565b5050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050801515611ddc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e81526020017f6f6e2d63726f75706965722e000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000836040516020018082815260200191505060405160208183030381529060405280519060200120600190049050600060076000838152602001908152602001600020905060008160010160019054906101000a900464ffffffffff1664ffffffffff1690508043111515611ee0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f736574746c6542657420696e207468652073616d6520626c6f636b206173207081526020017f6c6163654265742c206f72206265666f72652e0000000000000000000000000081525060400191505060405180910390fd5b60fa81014311151515611f81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f426c6f636b686173682063616e2774206265207175657269656420627920455681526020017f4d2e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b848140141515611f9057600080fd5b611f9b828787613a53565b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561208e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f43616e206f6e6c792061636365707420707265617070726f766564206e65772081526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600115158115151415612293576000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612381576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616e6e6f7420617070726f76652063757272656e74206f776e65722e00000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154816001015492509250509091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16318111151515612682576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6181526020017f6e63652e0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163181600660009054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16016fffffffffffffffffffffffffffffffff160111151515612763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f7567682066756e64732e00000000000000000000000000000081525060200191505060405180910390fd5b80600460008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a90046fffffffffffffffffffffffffffffffff1681565b6000600760008781526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff1681600101600b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612a15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4265742073686f756c6420626520696e20612027636c65616e2720737461746581526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000349050662386f26fc100008110158015612a3b5750693f870857a3e0e38000008111155b1515612aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f416d6f756e742073686f756c642062652077697468696e2072616e67652e000081525060200191505060405180910390fd5b600089118015612ac25750602860020a89105b1515612b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4d61736b2073686f756c642062652077697468696e2072616e67652e0000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614158015612b9f5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515612c13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f63616e6e6f7420696e76697465206d7973716c0000000000000000000000000081525060200191505060405180910390fd5b612c208888888888613546565b6000808a118015612c32575060648a11155b1515612ccc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676581526020017f72207468616e206d6f64756c6f2e00000000000000000000000000000000000081525060400191505060405180910390fd5b600080612cd9848d6137c2565b809250819350505060025484018211151515612d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6d617850726f666974206c696d69742076696f6c6174696f6e2e20000000000081525060200191505060405180910390fd5b81600660008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460008282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1631600660009054906101000a90046fffffffffffffffffffffffffffffffff16600460009054906101000a90046fffffffffffffffffffffffffffffffff16016fffffffffffffffffffffffffffffffff1611151515612ef0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f74206166666f726420746f206c6f73652074686973206265742e0081525060200191505060405180910390fd5b7f5bdd2fc99022530157777690475b670d3872f32262eb1d47d9ba8000dad58f878a6040518082815260200191505060405180910390a18385600001819055508b8560010160006101000a81548160ff021916908360ff160217905550438560010160016101000a81548164ffffffffff021916908364ffffffffff160217905550828560010160066101000a81548164ffffffffff021916908364ffffffffff1602179055503385600101600b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858560020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16639232fdb533876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156130e757600080fd5b505af11580156130fb573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000600760008381526020019081526020016000209050600081600001549050600081141515156131cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4265742073686f756c6420626520696e20616e2027616374697665272073746181526020017f746500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60fa8260010160019054906101000a900464ffffffffff1664ffffffffff160143111515613289576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f426c6f636b686173682063616e2774206265207175657269656420627920455681526020017f4d2e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600082600001819055506000806132b4838560010160009054906101000a900460ff1660ff166137c2565b809250819350505081600660008282829054906101000a90046fffffffffffffffffffffffffffffffff160392506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460008282829054906101000a90046fffffffffffffffffffffffffffffffff160392506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506133a484600101600b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684856000806000613957565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613495576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2d81526020017f6f776e65722e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b693f870857a3e0e38000008110151561353c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f6d617850726f6669742073686f756c6420626520612073616e65206e756d626581526020017f722e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8060028190555050565b8443111515156135be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f6d6d69742068617320657870697265642e0000000000000000000000000081525060200191505060405180910390fd5b60606040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060606136048787613eba565b905060008282805190602001206040516020018083805190602001908083835b6020831015156136495780518252602082019150602081019050602083039250613624565b6001836020036101000a0380198251168184511680821785525050505050509050018281526020019250505060405160208183030381529060405280519060200120905060018187878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156136ea573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156137b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4543445341207369676e6174757265206973206e6f742076616c69642e00000081525060200191505060405180910390fd5b5050505050505050565b6000808260001080156137d6575060648311155b151561384a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f57696e2070726f626162696c697479206f7574206f662072616e67652e00000081525060200191505060405180910390fd5b67016345785d8a000084101561386157600061386a565b66038d7ea4c680005b9050600060646001860281151561387d57fe5b04905066016bcc41e9000081101561389a5766016bcc41e9000090505b848282011115151561393a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f42657420646f65736e2774206576656e20636f76657220686f7573652065646781526020017f652e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b83606483838803030281151561394c57fe5b049250509250929050565b8573ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050156139fc578573ffffffffffffffffffffffffffffffffffffffff167f9620cef3a3d39af2426e8362381d59ca9ea0f5ae59621986a897d764f66f953e858585856040518085815260200184815260200183815260200182815260200194505050505060405180910390a2613a4b565b8573ffffffffffffffffffffffffffffffffffffffff167fac464fe4d3a86b9121261ac0a01dd981bfe0777c7c9d9c8f4473d31a9c0f9d2d866040518082815260200191505060405180910390a25b505050505050565b60008360000154905060008460010160009054906101000a900460ff1660ff169050600085600101600b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008314151515613b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4265742073686f756c6420626520696e20616e2027616374697665272073746181526020017f746500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b613b478184613f18565b600086600001819055506000858560405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506000606490506000818360019004811515613b9b57fe5b069050600080613bab88886137c2565b809250819350505060008090506000809050602886111515613bfb5760008d60010160069054906101000a900464ffffffffff1664ffffffffff168660020a16141515613bf6578391505b613c08565b88851015613c07578391505b5b83600660008282829054906101000a90046fffffffffffffffffffffffffffffffff160392506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555067016345785d8a00008a101515613d075760006103e8878960019004811515613c8757fe5b04811515613c9157fe5b061415613d0657600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506000600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b5b6000811115613d77578773ffffffffffffffffffffffffffffffffffffffff167f1bb05166a98fd97ba6a9f1f04f57b119557528458c1378d421b97451e195fd2c82878c8e6040518085815260200184815260200183815260200182815260200194505050505060405180910390a25b600073ffffffffffffffffffffffffffffffffffffffff168d60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613e5b578c60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6064600a606460018f02811515613e2257fe5b0402811515613e2d57fe5b049081150290604051600060405180830381858888f19350505050158015613e59573d6000803e3d6000fd5b505b60646009606460018d02811515613e6e57fe5b0402811515613e7957fe5b04600560008282540192505081905550613eab88600083850114613e9f57828401613ea2565b60015b84888d8f613957565b50505050505050505050505050565b60608282604051602001808364ffffffffff1664ffffffffff167b0100000000000000000000000000000000000000000000000000000002815260050182815260200192505050604051602081830303815290604052905092915050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663772c658b856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613fda57600080fd5b505afa158015613fee573d6000803e3d6000fd5b505050506040513d602081101561400457600080fd5b810190808051906020019092919050505090506000811115156140285750506140c9565b600061271082850281151561403957fe5b0490508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050156140c5578473ffffffffffffffffffffffffffffffffffffffff167f63c4a815575db8089483aeea967a8e1205c076ec5ff1eefca70ddb8d93be7eff826040518082815260200191505060405180910390a25b5050505b505056fea165627a7a723058203806e5513fe5056ac17e887cac6c9c26154c52d781420035982c096416a3f8c30029"
}