{
  "address": "0x999967e2ec8a74b7c8e9db19e039d920b31d39d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TieToken",
  "contractName": "TieToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-18\n*/\n\n/*************************************************************************\n * This contract has been merged with solidify\n * https://github.com/tiesnetwork/solidify\n *************************************************************************/\n \n /*\n * Tie Token smart contract\n *\n * Supports ERC20, ERC223 stadards\n *\n * The TieToken is mintable during Token Sale. On Token Sale finalization it\n * will be minted up to the cap and minting will be finished forever\n *\n * @author Dmitry Kochin <[emailÂ protected]>\n */\n\n\npragma solidity ^0.4.14;\n\n\n/*************************************************************************\n * import \"./include/MintableToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"zeppelin/contracts/token/StandardToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./BasicToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/*************************************************************************\n * import \"./BasicToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n/*************************************************************************\n * import \"zeppelin/contracts/token/StandardToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n/*************************************************************************\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : end\n *************************************************************************/\n\n/**\n * Mintable token\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    uint public totalSupply = 0;\n    address private minter;\n\n    modifier onlyMinter(){\n        require(minter == msg.sender);\n        _;\n    }\n\n    function setMinter(address _minter) onlyOwner {\n        minter = _minter;\n    }\n\n    function mint(address _to, uint _amount) onlyMinter {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(address(0x0), _to, _amount);\n    }\n}\n/*************************************************************************\n * import \"./include/MintableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./include/ERC23PayableToken.sol\" : start\n *************************************************************************/\n\n\n\n/*************************************************************************\n * import \"./ERC23.sol\" : start\n *************************************************************************/\n\n\n\n\n/*\n * ERC23\n * ERC23 interface\n * see https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC23 is ERC20Basic {\n    function transfer(address to, uint value, bytes data);\n\n    event TransferData(address indexed from, address indexed to, uint value, bytes data);\n}\n/*************************************************************************\n * import \"./ERC23.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC23PayableReceiver.sol\" : start\n *************************************************************************/\n\n/*\n* Contract that is working with ERC223 tokens\n*/\n\ncontract ERC23PayableReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) payable;\n}/*************************************************************************\n * import \"./ERC23PayableReceiver.sol\" : end\n *************************************************************************/\n\n/**  https://github.com/Dexaran/ERC23-tokens/blob/master/token/ERC223/ERC223BasicToken.sol\n *\n */\ncontract ERC23PayableToken is BasicToken, ERC23{\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address to, uint value, bytes data){\n        transferAndPay(to, value, data);\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address to, uint value) returns (bool){\n        bytes memory empty;\n        transfer(to, value, empty);\n        return true;\n    }\n\n    function transferAndPay(address to, uint value, bytes data) payable {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n\n        if(codeLength>0) {\n            ERC23PayableReceiver receiver = ERC23PayableReceiver(to);\n            receiver.tokenFallback.value(msg.value)(msg.sender, value, data);\n        }else if(msg.value > 0){\n            to.transfer(msg.value);\n        }\n\n        Transfer(msg.sender, to, value);\n        if(data.length > 0)\n            TransferData(msg.sender, to, value, data);\n    }\n}/*************************************************************************\n * import \"./include/ERC23PayableToken.sol\" : end\n *************************************************************************/\n\n\ncontract TieToken is MintableToken, ERC23PayableToken {\n    string public constant name = \"TieToken\";\n    string public constant symbol = \"TIE\";\n    uint public constant decimals = 18;\n\n    bool public transferEnabled = false;\n\n    //The cap is 200 mln TIEs\n    uint private constant CAP = 200*(10**6)*(10**decimals);\n\n    function mint(address _to, uint _amount){\n        require(totalSupply.add(_amount) <= CAP);\n        super.mint(_to, _amount);\n    }\n\n    function TieToken(address multisigOwner) {\n        //Transfer ownership on the token to multisig on creation\n        transferOwnership(multisigOwner);\n    }\n\n    /**\n    * Overriding all transfers to check if transfers are enabled\n    */\n    function transferAndPay(address to, uint value, bytes data) payable{\n        require(transferEnabled);\n        super.transferAndPay(to, value, data);\n    }\n\n    function enableTransfer(bool enabled) onlyOwner{\n        transferEnabled = enabled;\n    }\n\n}",
  "bytecode": "606060405260006004556005805460a060020a60ff0219169055341561002457600080fd5b604051602080610e0f833981016040528080519150505b5b60038054600160a060020a03191633600160a060020a03161790555b61006e816401000000006108ac61007582021704565b5b506100c0565b60035433600160a060020a0390811691161461009057600080fd5b600160a060020a038116156100bb5760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b610d40806100cf6000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017e57806318160ddd146101b457806323b872dd146101d9578063313ce5671461021557806340c10f191461023a5780634cd412d51461025e57806370a08231146102855780638da5cb5b146102b657806395d89b41146102e5578063a9059cbb14610370578063be45fd62146103a6578063d8615e5b1461040d578063dd62ed3e14610469578063ef7ac0e5146104a0578063f2fde38b146104ba578063fca3b5aa146104db575b600080fd5b34156100fe57600080fd5b6101066104fc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101a0600160a060020a0360043516602435610533565b604051901515815260200160405180910390f35b34156101bf57600080fd5b6101c76105da565b60405190815260200160405180910390f35b34156101e457600080fd5b6101a0600160a060020a03600435811690602435166044356105e0565b604051901515815260200160405180910390f35b341561022057600080fd5b6101c76106f5565b60405190815260200160405180910390f35b341561024557600080fd5b61025c600160a060020a03600435166024356106fa565b005b341561026957600080fd5b6101a0610734565b604051901515815260200160405180910390f35b341561029057600080fd5b6101c7600160a060020a0360043516610755565b60405190815260200160405180910390f35b34156102c157600080fd5b6102c9610774565b604051600160a060020a03909116815260200160405180910390f35b34156102f057600080fd5b610106610783565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6101a0600160a060020a03600435166024356107ba565b604051901515815260200160405180910390f35b34156103b157600080fd5b61025c60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506107db95505050505050565b005b61025c60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506107ec95505050505050565b005b341561047457600080fd5b6101c7600160a060020a0360043581169060243516610826565b60405190815260200160405180910390f35b34156104ab57600080fd5b61025c6004351515610853565b005b34156104c557600080fd5b61025c600160a060020a03600435166108ac565b005b34156104e657600080fd5b61025c600160a060020a0360043516610904565b005b60408051908101604052600881527f546965546f6b656e000000000000000000000000000000000000000000000000602082015281565b60008115806105655750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561057057600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60045481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610627908463ffffffff61094c16565b600160a060020a03808616600090815260016020526040808220939093559087168152205461065c908463ffffffff61096616565b600160a060020a038616600090815260016020526040902055610685818463ffffffff61096616565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b601281565b6004546aa56fa5b99019a5c80000009061071a908363ffffffff61094c16565b111561072557600080fd5b61072f828261097d565b5b5050565b60055474010000000000000000000000000000000000000000900460ff1681565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600381527f5449450000000000000000000000000000000000000000000000000000000000602082015281565b60006107c4610d02565b6107cf8484836107db565b600191505b5092915050565b6107e68383836107ec565b5b505050565b60055474010000000000000000000000000000000000000000900460ff16151561081557600080fd5b6107e6838383610a2f565b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461086e57600080fd5b6005805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000831515021790555b5b50565b60035433600160a060020a039081169116146108c757600080fd5b600160a060020a038116156108a8576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b60035433600160a060020a0390811691161461091f57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60008282018381101561095b57fe5b8091505b5092915050565b60008282111561097257fe5b508082035b92915050565b60055433600160a060020a0390811691161461099857600080fd5b6004546109ab908263ffffffff61094c16565b600455600160a060020a0382166000908152600160205260409020546109d7908263ffffffff61094c16565b600160a060020a0383166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5b5050565b600160a060020a033316600090815260016020526040812054843b9190610a5c908563ffffffff61096616565b600160a060020a033381166000908152600160205260408082209390935590871681522054610a91908563ffffffff61094c16565b600160a060020a038616600090815260016020526040812091909155821115610bb6575083600160a060020a03811663c0ee0b8a343387876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b505780820151818401525b602001610b37565b50505050905090810190601f168015610b7d5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303818588803b1515610b9c57600080fd5b6125ee5a03f11515610bad57600080fd5b50505050610bf1565b6000341115610bf157600160a060020a0385163480156108fc0290604051600060405180830381858888f193505050501515610bf157600080fd5b5b5b84600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600083511115610cfa5784600160a060020a031633600160a060020a03167f9b6aa1faccbd47218eb2870ae6411b374a3cf25c4285a37ef90bcb3c1fdde9ac868660405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610cbe5780820151818401525b602001610ca5565b50505050905090810190601f168015610ceb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b5b5050505050565b602060405190810160405260008152905600a165627a7a72305820677a480ed7582c539f21dfca7d2acfc8ac2ee258c3f322239d148770f4636f33002900000000000000000000000000eadc3cf4f4791a9e64d6e7e476236b8db096ab",
  "constructorArguments": "00000000000000000000000000eadc3cf4f4791a9e64d6e7e476236b8db096ab"
}