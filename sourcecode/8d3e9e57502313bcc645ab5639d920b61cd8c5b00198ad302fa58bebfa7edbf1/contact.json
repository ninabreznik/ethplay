{
  "address": "0x98d454cd76f9d9e5c51ae90f7748618967b76392",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OKOToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-12\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a && c >= b);\n    return c;\n  }\n\n}\n\n/**\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is SafeMath {\n\n  uint256 public totalSupply;\n\n  /* Actual balances of token holders */\n  mapping(address => uint) balances;\n\n  /* approve() allowances */\n  mapping (address => mapping (address => uint)) allowed;\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  /**\n   *\n   * Fix for the ERC20 short address attack\n   *\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\n   */\n  modifier onlyPayloadSize(uint256 size) {\n     require(msg.data.length == size + 4);\n     _;\n  }\n\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n    require(_to != 0);\n    uint256 balanceFrom = balances[msg.sender];\n    require(_value <= balanceFrom);\n\n    // SafeMath safeSub will throw if there is not enough balance.\n    balances[msg.sender] = safeSub(balanceFrom, _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_to != 0);\n    uint256 allowToTrans = allowed[_from][msg.sender];\n    uint256 balanceFrom = balances[_from];\n    require(_value <= balanceFrom);\n    require(_value <= allowToTrans);\n\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balanceFrom, _value);\n    allowed[_from][msg.sender] = safeSub(allowToTrans, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n//    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    // require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * Atomic increment of approved spending\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   */\n  function addApproval(address _spender, uint256 _addedValue)\n  onlyPayloadSize(2 * 32)\n  public returns (bool success) {\n      uint256 oldValue = allowed[msg.sender][_spender];\n      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n  /**\n   * Atomic decrement of approved spending.\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   */\n  function subApproval(address _spender, uint256 _subtractedValue)\n  onlyPayloadSize(2 * 32)\n  public returns (bool success) {\n\n      uint256 oldVal = allowed[msg.sender][_spender];\n\n      if (_subtractedValue > oldVal) {\n          allowed[msg.sender][_spender] = 0;\n      } else {\n          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract MigrationAgent {\n  function migrateFrom(address _from, uint256 _value) public;\n}\n\ncontract UpgradeableToken is Ownable, StandardToken {\n  address public migrationAgent;\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n    // Migrate tokens to the new token contract\n    function migrate() public {\n        require(migrationAgent != 0);\n        uint value = balances[msg.sender];\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\n        totalSupply = safeSub(totalSupply, value);\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n        Upgrade(msg.sender, migrationAgent, value);\n    }\n\n    function () public payable {\n      require(migrationAgent != 0);\n      require(balances[msg.sender] > 0);\n      migrate();\n      msg.sender.transfer(msg.value);\n    }\n\n    function setMigrationAgent(address _agent) onlyOwner external {\n        migrationAgent = _agent;\n        UpgradeAgentSet(_agent);\n    }\n\n}\ncontract OKOToken is UpgradeableToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n\n  address public allTokenOwnerOnStart;\n  string public constant name = \"OKOIN\";\n  string public constant symbol = \"OKO\";\n  uint256 public constant decimals = 6;\n  \n\n  function OKOToken() public {\n    allTokenOwnerOnStart = msg.sender;\n    totalSupply = 240000000000000;\n    balances[allTokenOwnerOnStart] = totalSupply;\n    Mint(allTokenOwnerOnStart, totalSupply);\n    Transfer(0x0, allTokenOwnerOnStart ,totalSupply);\n    MintFinished();\n  }\n  \n\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03338116600160a060020a031992831681178455600580549093161780835565da475abf0000600181905590821684526002602052604093849020819055915416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591905190815260200160405180910390a2600554600154600160a060020a03909116906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a37fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1610bb1806101116000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610166578063095ea7b3146101f057806318160ddd1461022657806323b872dd1461024b578063313ce5671461027357806370a082311461028657806375e2ff65146102a55780638328dbcd146102c45780638da5cb5b146102f35780638fd3ab801461030657806395d89b4114610319578063a9059cbb1461032c578063ac3cb72c1461034e578063d9520c9a14610370578063dd62ed3e14610383578063e2301d02146103a8578063f2fde38b146103ca575b600454600160a060020a0316151561010757600080fd5b600160a060020a0333166000908152600260205260408120541161012a57600080fd5b6101326103e9565b600160a060020a0333163480156108fc0290604051600060405180830381858888f19350505050151561016457600080fd5b005b341561017157600080fd5b61017961051a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b557808201518382015260200161019d565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fb57600080fd5b610212600160a060020a0360043516602435610551565b604051901515815260200160405180910390f35b341561023157600080fd5b6102396105bd565b60405190815260200160405180910390f35b341561025657600080fd5b610212600160a060020a03600435811690602435166044356105c3565b341561027e57600080fd5b610239610705565b341561029157600080fd5b610239600160a060020a036004351661070a565b34156102b057600080fd5b610164600160a060020a0360043516610725565b34156102cf57600080fd5b6102d76107a8565b604051600160a060020a03909116815260200160405180910390f35b34156102fe57600080fd5b6102d76107b7565b341561031157600080fd5b6101646103e9565b341561032457600080fd5b6101796107c6565b341561033757600080fd5b610212600160a060020a03600435166024356107fd565b341561035957600080fd5b610212600160a060020a03600435166024356108e8565b341561037b57600080fd5b6102d761099a565b341561038e57600080fd5b610239600160a060020a03600435811690602435166109a9565b34156103b357600080fd5b610212600160a060020a03600435166024356109d4565b34156103d557600080fd5b610164600160a060020a0360043516610ab4565b600454600090600160a060020a0316151561040357600080fd5b50600160a060020a0333166000908152600260205260409020546104278180610b4f565b600160a060020a03331660009081526002602052604090205560015461044d9082610b4f565b600155600454600160a060020a0316637a3130e333836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156104bf57600080fd5b6102c65a03f115156104d057600080fd5b5050600454600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8360405190815260200160405180910390a350565b60408051908101604052600581527f4f4b4f494e000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b60008080600160a060020a03851615156105dc57600080fd5b5050600160a060020a038085166000818152600360209081526040808320339095168352938152838220549282526002905291909120548084111561062057600080fd5b8184111561062d57600080fd5b600160a060020a0385166000908152600260205260409020546106509085610b61565b600160a060020a0386166000908152600260205260409020556106738185610b4f565b600160a060020a0387166000908152600260205260409020556106968285610b4f565b600160a060020a03808816600081815260036020908152604080832033861684529091529081902093909355908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a350600195945050505050565b600681565b600160a060020a031660009081526002602052604090205490565b60005433600160a060020a0390811691161461074057600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc81604051600160a060020a03909116815260200160405180910390a150565b600454600160a060020a031681565b600054600160a060020a031681565b60408051908101604052600381527f4f4b4f0000000000000000000000000000000000000000000000000000000000602082015281565b60008060403660441461080f57600080fd5b600160a060020a038516151561082457600080fd5b600160a060020a03331660009081526002602052604090205491508184111561084c57600080fd5b6108568285610b4f565b600160a060020a0333811660009081526002602052604080822093909355908716815220546108859085610b61565b600160a060020a0380871660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3506001949350505050565b6000806040366044146108fa57600080fd5b600160a060020a03338116600090815260036020908152604080832093891683529290522054915061092c8285610b61565b600160a060020a033381166000818152600360209081526040808320948b168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3506001949350505050565b600554600160a060020a031681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6000806040366044146109e657600080fd5b600160a060020a03338116600090815260036020908152604080832093891683529290522054915081841115610a4357600160a060020a033381166000908152600360209081526040808320938916835292905290812055610a4d565b61092c8285610b4f565b600160a060020a033381166000818152600360209081526040808320948a168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3506001949350505050565b60005433600160a060020a03908116911614610acf57600080fd5b600160a060020a0381161515610ae457600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b5b57fe5b50900390565b6000828201838110801590610b765750828110155b1515610b7e57fe5b93925050505600a165627a7a72305820c14ad9ce60793f14ed9625e096a9c3ab96ef3aa3064c0e8ea6ad0ab5c15ddd5d0029"
}