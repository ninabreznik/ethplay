{
  "address": "0x3daf415d25829c07af9ce65c8e05817c3bc101ed",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Deposit",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-02\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\n/* Required code start */\ncontract MarketplaceProxy {\n    function calculatePlatformCommission(uint256 weiAmount) public view returns (uint256);\n    function payPlatformIncomingTransactionCommission(address clientAddress) public payable;\n    function payPlatformOutgoingTransactionCommission() public payable;\n    function isUserBlockedByContract(address contractAddress) public view returns (bool);\n}\n/* Required code end */\n\ncontract Deposit is Ownable {\n\n    using SafeMath for uint256;\n\n    struct ClientDeposit {\n        uint256 balance;\n        // We should reject incoming transactions on payable \n        // methods that not equals this variable\n        uint256 nextPaymentTotalAmount;\n        uint256 nextPaymentDepositCommission;   // deposit commission stored on contract\n        uint256 nextPaymentPlatformCommission;\n        bool exists;\n        bool isBlocked;\n    }\n    mapping(address => ClientDeposit) public depositsMap;\n\n    /* Required code start */\n    MarketplaceProxy public mp;\n    event PlatformIncomingTransactionCommission(uint256 amount, address indexed clientAddress);\n    event PlatformOutgoingTransactionCommission(uint256 amount);\n    event Blocked();\n    /* Required code end */\n    event MerchantIncomingTransactionCommission(uint256 amount, address indexed clientAddress);\n    event DepositCommission(uint256 amount, address clientAddress);\n\n    constructor () public {\n        /* Required code start */\n        // NOTE: CHANGE ADDRESS ON PRODUCTION\n        mp = MarketplaceProxy(0x17b38d3779dEBcF1079506522E10284D3c6b0FEf);\n        /* Required code end */\n    }\n\n    /**\n     * @dev Handles direct clients transactions\n     */\n    function () public payable {\n        handleIncomingPayment(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Handles payment gateway transactions\n     * @param clientAddress when payment method is fiat money\n     */\n    function fromPaymentGateway(address clientAddress) public payable {\n        handleIncomingPayment(clientAddress, msg.value);\n    }\n\n    /**\n     * @dev Send commission to marketplace and increases client balance\n     * @param clientAddress client wallet for deposit\n     * @param amount transaction value (msg.value)\n     */\n    function handleIncomingPayment(address clientAddress, uint256 amount) private {\n        ClientDeposit storage clientDeposit = depositsMap[clientAddress];\n\n        require(clientDeposit.exists);\n        require(clientDeposit.nextPaymentTotalAmount == amount);\n\n        /* Required code start */\n        // Send all incoming eth if user blocked\n        if (mp.isUserBlockedByContract(address(this))) {\n            mp.payPlatformIncomingTransactionCommission.value(amount)(clientAddress);\n            emit Blocked();\n        } else {\n            owner.transfer(clientDeposit.nextPaymentDepositCommission);\n            emit MerchantIncomingTransactionCommission(clientDeposit.nextPaymentDepositCommission, clientAddress);\n            mp.payPlatformIncomingTransactionCommission.value(clientDeposit.nextPaymentPlatformCommission)(clientAddress);\n            emit PlatformIncomingTransactionCommission(clientDeposit.nextPaymentPlatformCommission, clientAddress);\n        }\n        /* Required code end */\n\n        // Virtually add ETH to client deposit (sended ETH subtract platform and deposit commissions)\n        clientDeposit.balance += amount.sub(clientDeposit.nextPaymentPlatformCommission).sub(clientDeposit.nextPaymentDepositCommission);\n        emit DepositCommission(clientDeposit.nextPaymentDepositCommission, clientAddress);\n    }\n\n    /**\n     * @dev Owner can add ETH to contract without commission\n     */\n    function addEth() public payable onlyOwner {\n\n    }\n\n    /**\n     * @dev Send client's balance to some address on claim\n     * @param from client address\n     * @param to send ETH on this address\n     * @param amount 18 decimals (wei)\n     */\n    function claim(address from, address to, uint256 amount) public onlyOwner{\n        require(depositsMap[from].exists);\n\n        /* Required code start */\n        // Get commission amount from marketplace\n        uint256 commission = mp.calculatePlatformCommission(amount);\n\n        require(address(this).balance > amount.add(commission));\n        require(depositsMap[from].balance >= amount);\n\n        // Send commission to marketplace\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\n        emit PlatformOutgoingTransactionCommission(commission);\n        /* Required code end */\n\n        // Virtually subtract amount from client deposit\n        depositsMap[from].balance -= amount;\n\n        to.transfer(amount);\n    }\n\n    /**\n     * @return bool, client exist or not\n     */\n    function isClient(address clientAddress) public view onlyOwner returns(bool) {\n        return depositsMap[clientAddress].exists;\n    }\n\n    /**\n     * @dev Add new client to structure\n     * @param clientAddress wallet\n     * @param _nextPaymentTotalAmount reject next incoming payable transaction if it's amount not equal to this variable\n     * @param _nextPaymentDepositCommission deposit commission stored on contract\n     * @param _nextPaymentPlatformCommission marketplace commission to send\n     */\n    function addClient(address clientAddress, uint256 _nextPaymentTotalAmount, uint256 _nextPaymentDepositCommission, uint256 _nextPaymentPlatformCommission) public onlyOwner {\n        require( (clientAddress != address(0)));\n\n        // Can be called only once for address\n        require(!depositsMap[clientAddress].exists);\n\n        // Add new element to structure\n        depositsMap[clientAddress] = ClientDeposit(\n            0,                                  // balance\n            _nextPaymentTotalAmount,            // nextPaymentTotalAmount\n            _nextPaymentDepositCommission,      // nextPaymentDepositCommission\n            _nextPaymentPlatformCommission,     // nextPaymentPlatformCommission\n            true,                               // exists\n            false                               // isBlocked\n        );\n    }\n\n    /**\n     * @return uint256 client balance\n     */\n    function getClientBalance(address clientAddress) public view returns(uint256) {\n        return depositsMap[clientAddress].balance;\n    }\n\n    /**\n     * @dev Update client payment details\n     * @param clientAddress wallet\n     * @param _nextPaymentTotalAmount reject next incoming payable transaction if it's amount not equal to this variable\n     * @param _nextPaymentDepositCommission deposit commission stored on contract\n     * @param _nextPaymentPlatformCommission marketplace commission to send\n     */\n    function repeatedPayment(address clientAddress, uint256 _nextPaymentTotalAmount, uint256 _nextPaymentDepositCommission, uint256 _nextPaymentPlatformCommission) public onlyOwner {\n        ClientDeposit storage clientDeposit = depositsMap[clientAddress];\n\n        require(clientAddress != address(0));\n        require(clientDeposit.exists);\n\n        clientDeposit.nextPaymentTotalAmount = _nextPaymentTotalAmount;\n        clientDeposit.nextPaymentDepositCommission = _nextPaymentDepositCommission;\n        clientDeposit.nextPaymentPlatformCommission = _nextPaymentPlatformCommission;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"fromPaymentGateway\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"getClientBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"isClient\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"},{\"name\":\"_nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentPlatformCommission\",\"type\":\"uint256\"}],\"name\":\"addClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositsMap\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"nextPaymentPlatformCommission\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"isBlocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clientAddress\",\"type\":\"address\"},{\"name\":\"_nextPaymentTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentDepositCommission\",\"type\":\"uint256\"},{\"name\":\"_nextPaymentPlatformCommission\",\"type\":\"uint256\"}],\"name\":\"repeatedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"PlatformIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformOutgoingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"MerchantIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"DepositCommission\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03199081163317909155600280549091167317b38d3779debcf1079506522e10284d3c6b0fef179055610a3e806100546000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166333e335a081146100af5780633844e1c4146100c357806384b7964f146100f65780638da5cb5b1461012b578063996cba681461015c578063bf6d91be14610186578063c2ac3aff146101b0578063d9deacc7146101b8578063e863d8cc14610210578063f40027081461023a575b6100ad333461024f565b005b6100ad600160a060020a036004351661059a565b3480156100cf57600080fd5b506100e4600160a060020a03600435166105a7565b60408051918252519081900360200190f35b34801561010257600080fd5b50610117600160a060020a03600435166105c2565b604080519115158252519081900360200190f35b34801561013757600080fd5b506101406105fc565b60408051600160a060020a039092168252519081900360200190f35b34801561016857600080fd5b506100ad600160a060020a036004358116906024351660443561060b565b34801561019257600080fd5b506100ad600160a060020a0360043516602435604435606435610831565b6100ad610917565b3480156101c457600080fd5b506101d9600160a060020a0360043516610930565b60408051968752602087019590955285850193909352606085019190915215156080840152151560a0830152519081900360c00190f35b34801561021c57600080fd5b506100ad600160a060020a036004351660243560443560643561096a565b34801561024657600080fd5b506101406109d3565b600160a060020a0382166000908152600160205260409020600481015460ff16151561027a57600080fd5b6001810154821461028a57600080fd5b600254604080517f62f3febf0000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916362f3febf916024808201926020929091908290030181600087803b1580156102f057600080fd5b505af1158015610304573d6000803e3d6000fd5b505050506040513d602081101561031a57600080fd5b5051156103d357600254604080517f12ccb421000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152915191909216916312ccb42191859160248082019260009290919082900301818588803b15801561038b57600080fd5b505af115801561039f573d6000803e3d6000fd5b50506040517fa5baf151492801d3b7a89ece73c1ed0b6dde992d47a0e283ff7d352bba70e0f59350600092509050a161051e565b600080546002830154604051600160a060020a039092169281156108fc029290818181858888f19350505050158015610410573d6000803e3d6000fd5b5060028101546040805191825251600160a060020a038516917f48f94e7aa71ab19e57943432b8613281b860d6605dc76dbd31a4070b207da173919081900360200190a26002546003820154604080517f12ccb421000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915191909316926312ccb4219291602480830192600092919082900301818588803b1580156104c157600080fd5b505af11580156104d5573d6000803e3d6000fd5b50505060038301546040805191825251600160a060020a03871693507fa92371a244e464acaf7a84ec0a70952ea485c08d9775a4a8cad5ef2e2521995f92509081900360200190a25b610549816002015461053d8360030154856109e290919063ffffffff16565b9063ffffffff6109e216565b8154018155600281015460408051918252600160a060020a038516602083015280517f0b2d5158b176d305f6299ec251785502655377e08a45b70b70fc30b9399efd9e9281900390910190a1505050565b6105a4813461024f565b50565b600160a060020a031660009081526001602052604090205490565b60008054600160a060020a031633146105da57600080fd5b50600160a060020a031660009081526001602052604090206004015460ff1690565b600054600160a060020a031681565b60008054600160a060020a0316331461062357600080fd5b600160a060020a03841660009081526001602052604090206004015460ff16151561064d57600080fd5b600254604080517fa99fba7d000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163a99fba7d916024808201926020929091908290030181600087803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b505050506040513d60208110156106de57600080fd5b505190506106f2828263ffffffff6109f916565b3031116106fe57600080fd5b600160a060020a03841660009081526001602052604090205482111561072357600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a03166371bbefc7826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b50506040805185815290517f55b4b7663c1c13b3979c75e567e6b5167b2227c0f096f0d77d0639e61b20db7194509081900360200192509050a1600160a060020a0380851660009081526001602052604080822080548690039055519185169184156108fc0291859190818181858888f1935050505015801561082a573d6000803e3d6000fd5b5050505050565b600054600160a060020a0316331461084857600080fd5b600160a060020a038416151561085d57600080fd5b600160a060020a03841660009081526001602052604090206004015460ff161561088657600080fd5b6040805160c081018252600080825260208083019687528284019586526060830194855260016080840181815260a08501848152600160a060020a03909a16845291819052939091209151825594519181019190915591516002830155516003820155905160049091018054925115156101000261ff001992151560ff199094169390931791909116919091179055565b600054600160a060020a0316331461092e57600080fd5b565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909160ff8082169161010090041686565b60008054600160a060020a0316331461098257600080fd5b50600160a060020a03841660008181526001602052604090209015156109a757600080fd5b600481015460ff1615156109ba57600080fd5b6001810193909355600283019190915560039091015550565b600254600160a060020a031681565b600080838311156109f257600080fd5b5050900390565b600082820183811015610a0b57600080fd5b93925050505600a165627a7a72305820e20d68fc73dbbdde0c2e4ef157bc37dd0483e6cc0b33f55abe00f14d84ebd5680029"
}