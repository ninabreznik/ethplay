{
  "address": "0xba814ad9f57205c19351b09ae40c2b72458bb9bf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DanetonToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-26\n*/\n\npragma solidity ^0.4.11;\n\n// ----------------------------------------------------------------------------\n// DNE 'Daneton' token contract\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/issues/20\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    uint public totalSupply;\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value)\n        returns (bool success);\n    function approve(address _spender, uint _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant\n        returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender,\n        uint _value);\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n\n    // ------------------------------------------------------------------------\n    // Current owner, and proposed new owner\n    // ------------------------------------------------------------------------\n    address public owner;\n    address public newOwner;\n\n    // ------------------------------------------------------------------------\n    // Constructor - assign creator as the owner\n    // ------------------------------------------------------------------------\n    function Owned() {\n        owner = msg.sender;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Modifier to mark that a function can only be executed by the owner\n    // ------------------------------------------------------------------------\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can initiate transfer of contract to a new owner\n    // ------------------------------------------------------------------------\n    function transferOwnership(address _newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // New owner has to accept transfer of contract\n    // ------------------------------------------------------------------------\n    function acceptOwnership() {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n}\n\n\n// ----------------------------------------------------------------------------\n// Safe maths, borrowed from OpenZeppelin\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\n    // ------------------------------------------------------------------------\n    // Add a number to another number, checking for overflows\n    // ------------------------------------------------------------------------\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    // ------------------------------------------------------------------------\n    // Subtract a number from another number, checking for underflows\n    // ------------------------------------------------------------------------\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals\n// ----------------------------------------------------------------------------\ncontract DanetonToken is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    // ------------------------------------------------------------------------\n    // Token parameters\n    // ------------------------------------------------------------------------\n    string public constant symbol = \"DNE\";\n    string public constant name = \"Daneton\";\n    uint8 public constant decimals = 18;\n\n    uint public constant totalSupply = 10 * 10**9 * 10**18;\n\n    // ------------------------------------------------------------------------\n    // Balances for each account\n    // ------------------------------------------------------------------------\n    mapping(address => uint) balances;\n\n    // ------------------------------------------------------------------------\n    // Owner of account approves the transfer of an amount to another account\n    // ------------------------------------------------------------------------\n    mapping(address => mapping (address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function DanetonToken() Owned() {\n        balances[owner] = totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the account balance of another account with address _owner\n    // ------------------------------------------------------------------------\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount             // User has balance\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Allow _spender to withdraw from your account, multiple times, up to the\n    // _value amount. If this function is called again it overwrites the\n    // current allowance with _value.\n    // ------------------------------------------------------------------------\n    function approve(\n        address _spender,\n        uint _amount\n    ) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to another account. The owner of the tokens must already\n    // have approve(...)-d this transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount                  // From a/c has balance\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[_from] = balances[_from].sub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(\n        address _owner,\n        address _spender\n    ) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ethers - no payable modifier\n    // ------------------------------------------------------------------------\n    function () {\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint amount)\n      onlyOwner returns (bool success)\n    {\n        return ERC20Interface(tokenAddress).transfer(owner, amount);\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b5b5b60018054600160a060020a03191633600160a060020a03161790555b600154600160a060020a031660009081526003602052604090206b204fce5e3e2502611000000090555b5b610a12806100646000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100de578063095ea7b31461016e57806318160ddd146101a157806323b872dd146101c3578063313ce567146101fc57806370a082311461022257806379ba5097146102505780638da5cb5b1461026257806395d89b411461028e578063a9059cbb1461031e578063d4ee1d9014610351578063dc39d06d1461037d578063dd62ed3e146103b0578063f2fde38b146103e4575b34156100d557fe5b6100dc5b5b565b005b34156100e657fe5b6100ee610402565b604080516020808252835181830152835191928392908301918501908083838215610134575b80518252602083111561013457601f199092019160209182019101610114565b505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017657fe5b61018d600160a060020a0360043516602435610439565b604080519115158252519081900360200190f35b34156101a957fe5b6101b16104a4565b60408051918252519081900360200190f35b34156101cb57fe5b61018d600160a060020a03600435811690602435166044356104b4565b604080519115158252519081900360200190f35b341561020457fe5b61020c610657565b6040805160ff9092168252519081900360200190f35b341561022a57fe5b6101b1600160a060020a036004351661065c565b60408051918252519081900360200190f35b341561025857fe5b6100dc61067b565b005b341561026a57fe5b61027261070b565b60408051600160a060020a039092168252519081900360200190f35b341561029657fe5b6100ee61071a565b604080516020808252835181830152835191928392908301918501908083838215610134575b80518252602083111561013457601f199092019160209182019101610114565b505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032657fe5b61018d600160a060020a0360043516602435610751565b604080519115158252519081900360200190f35b341561035957fe5b610272610871565b60408051600160a060020a039092168252519081900360200190f35b341561038557fe5b61018d600160a060020a0360043516602435610880565b604080519115158252519081900360200190f35b34156103b857fe5b6101b1600160a060020a0360043581169060243516610931565b60408051918252519081900360200190f35b34156103ec57fe5b6100dc600160a060020a036004351661095e565b005b60408051808201909152600781527f44616e65746f6e00000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6b204fce5e3e2502611000000081565b600160a060020a0383166000908152600360205260408120548290108015906105045750600160a060020a0380851660009081526004602090815260408083203390941683529290522054829010155b80156105105750600082115b80156105355750600160a060020a038316600090815260036020526040902054828101115b1561064b57600160a060020a038416600090815260036020526040902054610563908363ffffffff6109a716565b600160a060020a03808616600090815260036020908152604080832094909455600481528382203390931682529190915220546105a6908363ffffffff6109a716565b600160a060020a03808616600090815260046020908152604080832033851684528252808320949094559186168152600390915220546105ec908363ffffffff6109be16565b600160a060020a0380851660008181526003602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600161064f565b5060005b5b9392505050565b601281565b600160a060020a0381166000908152600360205260409020545b919050565b60025433600160a060020a039081169116146106975760006000fd5b600254600154604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b565b600154600160a060020a031681565b60408051808201909152600381527f444e450000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526003602052604081205482901080159061077a5750600082115b801561079f5750600160a060020a038316600090815260036020526040902054828101115b1561086257600160a060020a0333166000908152600360205260409020546107cd908363ffffffff6109a716565b600160a060020a033381166000908152600360205260408082209390935590851681522054610802908363ffffffff6109be16565b600160a060020a038085166000818152600360209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600161049e565b50600061049e565b5b92915050565b600254600160a060020a031681565b60015460009033600160a060020a0390811691161461089f5760006000fd5b600154604080516000602091820181905282517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0394851660048201526024810187905292519387169363a9059cbb9360448082019493918390030190829087803b151561091257fe5b6102c65a03f1151561092057fe5b5050604051519150505b5b92915050565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b92915050565b60015433600160a060020a0390811691161461097a5760006000fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000828211156109b357fe5b508082035b92915050565b60008282018381108015906109d35750828110155b15156109db57fe5b8091505b50929150505600a165627a7a7230582036d056a46bc3dff98244d7227daff343975171b0fa6927f9e663510c32a401340029"
}