{
  "address": "0x1e5e66fd8c22dea99d8451ee8bb1e941b70b723f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SWAP",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-10\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assertCheck(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    assertCheck(b > 0);\n    uint256 c = a / b;\n    assertCheck(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assertCheck(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assertCheck(c>=a && c>=b);\n    return c;\n  }\n\n  function assertCheck(bool assertion) internal pure {\n    require(assertion == true);\n  }\n}\ncontract SWAP is SafeMath{\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalSupply;\n\taddress public owner;\n\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    function setName(string _name) onlyOwner public returns (string){\n         name = _name;\n         return name;\n    }\n    function setSymbol(string _symbol) onlyOwner public returns (string){\n         symbol = _symbol;\n         return symbol;\n     }\n    \n     function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\n         decimals = _decimals;\n         return decimals;\n     }\n    \n    \n     function getOwner() view public returns(address){\n        return owner;\n     }\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n    \n    event Withdraw(address to, uint amount);\n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor() public payable {\n        balanceOf[msg.sender] = 100000000000*10**18;\n        totalSupply = balanceOf[msg.sender];\n        name = 'SWAP'; \n        symbol = 'SWAP'; \n        decimals = 18; \n\t\towner = msg.sender;\n    }\n\n   \n    function _transfer(address _from, address _to, uint _value) internal{\n        require(_to != 0x0); \n\t\trequire(_value > 0); \n        require(balanceOf[_from] >= _value);   \n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    \n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);               \n        emit Transfer(_from, _to, _value);       \n    }\n\n\n    function transfer(address _to, uint256 _value) public payable returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool success) {\n\t\trequire(_value > 0); \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) \n    public\n    payable  {\n        require (_to != 0x0) ;             \n\t\trequire (_value > 0); \n        require (balanceOf[_from] >= _value) ;       \n        require (balanceOf[_to] + _value >= balanceOf[_to]) ;\n        require (_value <= allowance[_from][msg.sender]) ;   \n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);               \n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);  \n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n\t\trequire (_value > 0) ; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n        totalSupply = SafeMath.safeSub(totalSupply,_value); // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    function create(uint256 _value) public onlyOwner returns (bool success) {\n        require (_value > 0) ; \n        totalSupply = SafeMath.safeAdd(totalSupply,_value);\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        return true;\n    }\n    \n\t// transfer balance to owner\n\tfunction withdraw() external onlyOwner{\n\t\trequire(msg.sender == owner);\n\t\tmsg.sender.transfer(address(this).balance);\n        emit Withdraw(msg.sender,address(this).balance);\n\t}\n\t\n\t// can accept ether\n\tfunction() private payable {\n    }\n}",
  "bytecode": "60806040526c01431e0fae6d7217caa0000000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546003819055506040805190810160405280600481526020017f535741500000000000000000000000000000000000000000000000000000000081525060009080519060200190620000e892919062000186565b506040805190810160405280600481526020017f5357415000000000000000000000000000000000000000000000000000000000815250600190805190602001906200013692919062000186565b50601260028190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000235565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c957805160ff1916838001178555620001fa565b82800160010185558215620001fa579182015b82811115620001f9578251825591602001919060010190620001dc565b5b5090506200020991906200020d565b5090565b6200023291905b808211156200022e57600081600090555060010162000214565b5090565b90565b6118b180620002456000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f3578063095ea7b31461018357806318160ddd146101e857806323b872dd14610213578063313ce567146102735780633ccfd60b1461029e57806342966c68146102b557806370a08231146102fa578063780900dc14610351578063893d20e8146103965780638c8885c8146103ed5780638da5cb5b1461042e57806395d89b4114610485578063a9059cbb14610515578063b84c82461461056d578063c47f00271461064f578063dd62ed3e14610731575b005b3480156100ff57600080fd5b506101086107a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014857808201518184015260208101905061012d565b50505050905090810190601f1680156101755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018f57600080fd5b506101ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610846565b604051808215151515815260200191505060405180910390f35b3480156101f457600080fd5b506101fd6108e1565b6040518082815260200191505060405180910390f35b610271600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108e7565b005b34801561027f57600080fd5b50610288610d0c565b6040518082815260200191505060405180910390f35b3480156102aa57600080fd5b506102b3610d12565b005b3480156102c157600080fd5b506102e060048036038101908080359060200190929190505050610eac565b604051808215151515815260200191505060405180910390f35b34801561030657600080fd5b5061033b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611000565b6040518082815260200191505060405180910390f35b34801561035d57600080fd5b5061037c60048036038101908080359060200190929190505050611018565b604051808215151515815260200191505060405180910390f35b3480156103a257600080fd5b506103ab61112c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f957600080fd5b5061041860048036038101908080359060200190929190505050611156565b6040518082815260200191505060405180910390f35b34801561043a57600080fd5b506104436111c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049157600080fd5b5061049a6111eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104da5780820151818401526020810190506104bf565b50505050905090810190601f1680156105075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610553600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611289565b604051808215151515815260200191505060405180910390f35b34801561057957600080fd5b506105d4600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112a0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106145780820151818401526020810190506105f9565b50505050905090810190601f1680156106415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561065b57600080fd5b506106b6600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113b7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f65780820151818401526020810190506106db565b50505050905090810190601f1680156107235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561073d57600080fd5b50610792600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ce565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561083e5780601f106108135761010080835404028352916020019161083e565b820191906000526020600020905b81548152906001019060200180831161082157829003601f168201915b505050505081565b6000808211151561085657600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60035481565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561090d57600080fd5b60008111151561091c57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561096a57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156109f957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610a8457600080fd5b610acd600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114f3565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b59600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261150c565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c22600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114f3565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6e57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dca57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610e27573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364333073ffffffffffffffffffffffffffffffffffffffff1631604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610efc57600080fd5b600082111515610f0b57600080fd5b610f54600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836114f3565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fa3600354836114f3565b6003819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60056020528060005260406000206000915090505481565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107657600080fd5b60008211151561108557600080fd5b6110916003548361150c565b6003819055506110e0600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361150c565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b457600080fd5b816002819055506002549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b505050505081565b6000611296338484611536565b6001905092915050565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112fe57600080fd5b81600190805190602001906113149291906117e0565b5060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ab5780601f10611380576101008083540402835291602001916113ab565b820191906000526020600020905b81548152906001019060200180831161138e57829003601f168201915b50505050509050919050565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141557600080fd5b816000908051906020019061142b9291906117e0565b5060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114c25780601f10611497576101008083540402835291602001916114c2565b820191906000526020600020905b8154815290600101906020018083116114a557829003601f168201915b50505050509050919050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000611501838311156117ca565b818303905092915050565b600080828401905061152c8482101580156115275750838210155b6117ca565b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561155c57600080fd5b60008111151561156b57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115b957600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561164857600080fd5b611691600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114f3565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061171d600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261150c565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600115158115151415156117dd57600080fd5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061182157805160ff191683800117855561184f565b8280016001018555821561184f579182015b8281111561184e578251825591602001919060010190611833565b5b50905061185c9190611860565b5090565b61188291905b8082111561187e576000816000905550600101611866565b5090565b905600a165627a7a72305820b832d29afd31a00066fd9f35fe25c6789e83edc0001ea176c24be811d98fb1a90029"
}