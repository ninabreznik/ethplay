{
  "address": "0xa94c128a138504e1f81d727cc21bcb9ae6581015",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Freedom: FDM Token",
  "contractName": "FreedomStreaming",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-07\n*/\n\npragma solidity ^ 0.4.18;\n\ncontract ERC20 {\n  uint256 public totalsupply;\n  function totalSupply() public constant returns(uint256 _totalSupply);\n  function balanceOf(address who) public constant returns (uint256);\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n  function approve(address spender, uint256 value) public returns (bool ok);\n  function transfer(address to, uint256 value) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) pure internal returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) pure internal returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) pure internal returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) pure internal returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract FreedomStreaming is ERC20\n{\n    \n    using SafeMath\n    for uint256;\n    \n    string public constant name = \"Freedom Token\";\n\n    string public constant symbol = \"FDM\";\n\n    uint8 public constant decimals = 18;\n\n    uint256 public constant totalsupply = 1000000000000000000000000000;\n      \n    mapping(address => uint256) balances;\n\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    address owner = 0x963cb5e7190FA77435AFe61FBb8C2dDB073e42c2;\n    \n    event supply(uint256 bnumber);\n\n    event events(string _name);\n\n    uint256 _price_tokn;\n    \n    bool stopped = true;\n\n    uint256 no_of_tokens;\n    \n    enum Stages {\n        NOTSTARTED,\n        PREICO,\n        ICO,\n        PAUSED,\n        ENDED\n    }\n    \n    Stages public stage;\n    \n    bool ico_ended = false;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n   \n    function FreedomStreaming() public\n    {\n        balances[owner] = 350000000000000000000000000;      \n        balances[address(this)] = 650000000000000000000000000;\n        stage = Stages.NOTSTARTED;\n    }\n    \n    function () public payable\n    {\n        if(!ico_ended && !stopped && msg.value >= 0.01 ether)\n        {\n            no_of_tokens = SafeMath.mul(msg.value , _price_tokn); \n            if(balances[address(this)] >= no_of_tokens )\n            {\n        \n              balances[address(this)] =SafeMath.sub(balances[address(this)],no_of_tokens);\n              balances[msg.sender] = SafeMath.add(balances[msg.sender],no_of_tokens);\n              Transfer(address(this), msg.sender, no_of_tokens);\n              owner.transfer(this.balance); \n   \n            }\n            else\n            {\n                revert();\n            }\n        \n        }\n      else\n       {\n           revert();\n       }\n   }\n    \n    function totalSupply() public constant returns(uint256) {\n       return totalsupply;\n    }\n    \n     function balanceOf(address sender) public constant returns(uint256 balance) {\n        return balances[sender];\n    }\n\n    \n    function transfer(address _to, uint256 _amount) public returns(bool success) {\n        if (balances[msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n         \n            balances[msg.sender] = SafeMath.sub(balances[msg.sender],_amount);\n            balances[_to] = SafeMath.add(balances[_to],_amount);\n            Transfer(msg.sender, _to, _amount);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    \n    function pauseICOs() external onlyOwner {\n        stage = Stages.PAUSED;\n        stopped = true;\n    }\n\n    \n    function Start_Resume_ICO() external onlyOwner {\n        stage = Stages.ICO;\n        stopped = false;\n        _price_tokn = 10000;\n    }\n    \n    \n     function Start_Resume_PreICO() external onlyOwner\n     {\n         stage = Stages.PREICO;\n         stopped = false;\n         _price_tokn = 12000;\n     }\n     \n     function end_ICOs() external onlyOwner\n     {\n         ico_ended = true;\n         stage = Stages.ENDED;\n     }\n    \n   \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public returns(bool success) {\n\n            require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount);    \n                \n            balances[_from] = SafeMath.sub(balances[_from],_amount);\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amount);\n            balances[_to] = SafeMath.add(balances[_to], _amount);\n            Transfer(_from, _to, _amount);\n            \n            return true;\n       \n    }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function drain() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n\n    function drainToken() external onlyOwner\n    {\n        require(ico_ended);\n        \n        balances[owner] = SafeMath.add(balances[owner],balances[address(this)]);\n        Transfer(address(this), owner, balances[address(this)]);\n        balances[address(this)] = 0;\n    }\n    \n\n}",
  "bytecode": "606060405273963cb5e7190fa77435afe61fbb8c2ddb073e42c2600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560006101000a81548160ff0219169083151502179055506000600760016101000a81548160ff021916908315150217905550341561009a57600080fd5b6b0121836204bc2ce21e00000060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506b0219aada9b14535aca000000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760006101000a81548160ff0219169083600481111561017b57fe5b021790555061173c8061018f6000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146103a1578063095ea7b31461042f57806318160ddd1461048957806323b872dd146104b2578063313ce5671461052b57806333d64a6f1461055a5780635c13e2b51461056f57806370a082311461058457806370d66693146105d157806372dd529b146105e657806395d89b411461060f5780639890220b1461069d578063a9059cbb146106b2578063bcb7b0d41461070c578063c040e6b814610721578063d443f64a14610758578063dd62ed3e1461076d575b600760019054906101000a900460ff1615801561011b5750600560009054906101000a900460ff16155b801561012e5750662386f26fc100003410155b1561039a5761013f346004546107d9565b600681905550600654600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515610390576101da600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461080c565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610268600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600654610825565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561038b57600080fd5b610395565b600080fd5b61039f565b600080fd5b005b34156103ac57600080fd5b6103b4610843565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f45780820151818401526020810190506103d9565b50505050905090810190601f1680156104215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043a57600080fd5b61046f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061087c565b604051808215151515815260200191505060405180910390f35b341561049457600080fd5b61049c610a03565b6040518082815260200191505060405180910390f35b34156104bd57600080fd5b610511600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a17565b604051808215151515815260200191505060405180910390f35b341561053657600080fd5b61053e610d7d565b604051808260ff1660ff16815260200191505060405180910390f35b341561056557600080fd5b61056d610d82565b005b341561057a57600080fd5b610582610e28565b005b341561058f57600080fd5b6105bb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ec5565b6040518082815260200191505060405180910390f35b34156105dc57600080fd5b6105e4610f0e565b005b34156105f157600080fd5b6105f96111a1565b6040518082815260200191505060405180910390f35b341561061a57600080fd5b6106226111b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610662578082015181840152602081019050610647565b50505050905090810190601f16801561068f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106a857600080fd5b6106b06111ea565b005b34156106bd57600080fd5b6106f2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112c1565b604051808215151515815260200191505060405180910390f35b341561071757600080fd5b61071f611533565b005b341561072c57600080fd5b6107346115d0565b6040518082600481111561074457fe5b60ff16815260200191505060405180910390f35b341561076357600080fd5b61076b6115e3565b005b341561077857600080fd5b6107c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611689565b6040518082815260200191505060405180910390f35b600080828402905060008414806107fa57508284828115156107f757fe5b04145b151561080257fe5b8091505092915050565b600082821115151561081a57fe5b818303905092915050565b600080828401905083811015151561083957fe5b8091505092915050565b6040805190810160405280600d81526020017f46726565646f6d20546f6b656e0000000000000000000000000000000000000081525081565b60008082148061090857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561091357600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006b033b2e3c9fd0803ce8000000905090565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ae4575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515610aef57600080fd5b610b38600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361080c565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c01600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361080c565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cca600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610825565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dde57600080fd5b6002600760006101000a81548160ff02191690836004811115610dfd57fe5b02179055506000600560006101000a81548160ff021916908315150217905550612710600481905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8457600080fd5b6001600760016101000a81548160ff0219169083151502179055506004600760006101000a81548160ff02191690836004811115610ebe57fe5b0217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6a57600080fd5b600760019054906101000a900460ff161515610f8557600080fd5b61102f60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610825565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6b033b2e3c9fd0803ce800000081565b6040805190810160405280600381526020017f46444d000000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124657600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156112bf57600080fd5b565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156113125750600082115b801561139d5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611528576113eb600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361080c565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611477600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610825565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061152d565b600090505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561158f57600080fd5b6003600760006101000a81548160ff021916908360048111156115ae57fe5b02179055506001600560006101000a81548160ff021916908315150217905550565b600760009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163f57600080fd5b6001600760006101000a81548160ff0219169083600481111561165e57fe5b02179055506000600560006101000a81548160ff021916908315150217905550612ee0600481905550565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a723058205ee7ea503355f3fde92b5c7e1bbb618e01137b013a0322b59d0091a2d8d75c530029"
}