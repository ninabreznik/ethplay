{
  "address": "0xebb060f9d0029082a04f78d84b9fb9d3d26f9a93",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Referral",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-07\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract BlockchainToken is StandardToken, Ownable {\n\n    string public constant name = 'Blockchain Token 2.0';\n\n    string public constant symbol = 'BCT';\n\n    uint32 public constant decimals = 18;\n\n    /**\n     *  how many USD cents for 1 * 10^18 token\n     */\n    uint public price = 210;\n\n    function setPrice(uint _price) onlyOwner public {\n        price = _price;\n    }\n\n    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\n\n    /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 value);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n        public\n        hasMintPermission\n        canMint\n        returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _addr The address that will have _amount of tokens burned\n     * @param _value The amount of token to be burned.\n     */\n    function burn(\n        address _addr,\n        uint256 _value\n    )\n        public onlyOwner\n    {\n        _burn(_addr, _value);\n    }\n\n    function _burn(\n        address _who,\n        uint256 _value\n    )\n        internal\n    {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() public onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract WealthBuilderToken is MintableToken {\n\n    string public name = 'Wealth Builder Token';\n\n    string public symbol = 'WBT';\n\n    uint32 public decimals = 18;\n\n    /**\n     *  how many {tokens*10^(-18)} get per 1wei\n     */\n    uint public rate = 10 ** 7;\n    /**\n     *  multiplicator for rate\n     */\n    uint public mrate = 10 ** 7;\n\n    function setRate(uint _rate) onlyOwner public {\n        rate = _rate;\n    }\n\n}\n\ncontract Data is Ownable {\n\n    // node => its parent\n    mapping (address => address) private parent;\n\n    // node => its status\n    mapping (address => uint8) public statuses;\n\n    // node => sum of all his child deposits in USD cents\n    mapping (address => uint) public referralDeposits;\n\n    // client => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private balances;\n\n    // investor => balance in wei*10^(-6) available for withdrawal\n    mapping(address => uint256) private investorBalances;\n\n    function parentOf(address _addr) public constant returns (address) {\n        return parent[_addr];\n    }\n\n    function balanceOf(address _addr) public constant returns (uint256) {\n        return balances[_addr] / 1000000;\n    }\n\n    function investorBalanceOf(address _addr) public constant returns (uint256) {\n        return investorBalances[_addr] / 1000000;\n    }\n\n    /**\n     * @dev The Data constructor to set up the first depositer\n     */\n    constructor() public {\n        // DirectorOfRegion - 7\n        statuses[msg.sender] = 7;\n    }\n\n    function addBalance(address _addr, uint256 amount) onlyOwner public {\n        balances[_addr] += amount;\n    }\n\n    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n        require(balances[_addr] >= amount);\n        balances[_addr] -= amount;\n    }\n\n    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n        investorBalances[_addr] += amount;\n    }\n\n    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n        require(investorBalances[_addr] >= amount);\n        investorBalances[_addr] -= amount;\n    }\n\n    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n        referralDeposits[_addr] += amount;\n    }\n\n    function subtrReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n        referralDeposits[_addr] -= amount;\n    }\n\n    function setStatus(address _addr, uint8 _status) onlyOwner public {\n        statuses[_addr] = _status;\n    }\n\n    function setParent(address _addr, address _parent) onlyOwner public {\n        parent[_addr] = _parent;\n    }\n\n}\n\ncontract Declaration {\n\n    // threshold in USD => status\n    mapping (uint => uint8) statusThreshold;\n\n    // status => (depositsNumber => percentage / 10)\n    mapping (uint8 => mapping (uint16 => uint256)) feeDistribution;\n\n    // status thresholds in USD\n    uint[8] thresholds = [\n    0, 5000, 35000, 150000, 500000, 2500000, 5000000, 10000000\n    ];\n\n    uint[5] referralFees = [50, 30, 20, 10, 5];\n    uint[5] serviceFees = [25, 20, 15, 10, 5];\n\n\n    /**\n     * @dev The Declaration constructor to define some constants\n     */\n    constructor() public {\n        setFeeDistributionsAndStatusThresholds();\n    }\n\n\n    /**\n     * @dev Set up fee distribution & status thresholds\n     */\n    function setFeeDistributionsAndStatusThresholds() private {\n        // Agent - 0\n        setFeeDistributionAndStatusThreshold(0, [uint16(120), uint16(80), uint16(50), uint16(20), uint16(10)], thresholds[0]);\n        // SilverAgent - 1\n        setFeeDistributionAndStatusThreshold(1, [uint16(160), uint16(100), uint16(60), uint16(30), uint16(20)], thresholds[1]);\n        // Manager - 2\n        setFeeDistributionAndStatusThreshold(2, [uint16(200), uint16(120), uint16(80), uint16(40), uint16(25)], thresholds[2]);\n        // ManagerOfGroup - 3\n        setFeeDistributionAndStatusThreshold(3, [uint16(250), uint16(150), uint16(100), uint16(50), uint16(30)], thresholds[3]);\n        // ManagerOfRegion - 4\n        setFeeDistributionAndStatusThreshold(4, [300, 180, 120, 60, 35], thresholds[4]);\n        // Director - 5\n        setFeeDistributionAndStatusThreshold(5, [350, 210, 140, 70, 40], thresholds[5]);\n        // DirectorOfGroup - 6\n        setFeeDistributionAndStatusThreshold(6, [400, 240, 160, 80, 45], thresholds[6]);\n        // DirectorOfRegion - 7\n        setFeeDistributionAndStatusThreshold(7, [500, 300, 200, 100, 50], thresholds[7]);\n    }\n\n\n    /**\n     * @dev Set up specific fee and status threshold\n     * @param _st The status to set up for\n     * @param _percentages Array of pecentages, which should go to member\n     * @param _threshold The minimum amount of sum of children deposits to get\n     *                   the status _st\n     */\n    function setFeeDistributionAndStatusThreshold(\n        uint8 _st,\n        uint16[5] _percentages,\n        uint _threshold\n    )\n        private\n    {\n        statusThreshold[_threshold] = _st;\n        for (uint8 i = 0; i < _percentages.length; i++) {\n            feeDistribution[_st][i] = _percentages[i];\n        }\n    }\n\n}\n\ncontract Referral is Declaration, Ownable {\n\n    using SafeMath for uint;\n\n    // reference to WBT token contract\n    WealthBuilderToken private wbtToken;\n\n    // reference to BCT2.0 token contract\n    BlockchainToken private bctToken;\n\n    // reference to data contract\n    Data private data;\n\n    /**\n     *  how many USD cents get per ETH\n     */\n    uint public ethUsdRate;\n\n    /**\n     * @dev The Referral constructor to set up the first depositer,\n     * reference to system wbt token, bct token, data and set ethUsdRate\n     */\n    constructor(\n        uint _ethUsdRate,\n        address _wbtToken,\n        address _bctToken,\n        address _data\n    )\n        public\n    {\n        ethUsdRate = _ethUsdRate;\n\n        // instantiate wbtToken & data contracts\n        wbtToken = WealthBuilderToken(_wbtToken);\n        bctToken = BlockchainToken(_bctToken);\n        data = Data(_data);\n    }\n\n    /**\n     * @dev Callback function\n     */\n    function() payable public {\n    }\n\n    /**\n     * @dev invest wbt token function\n     * @param _client to transfer WBT token\n     * @param _depositsCount num of the deposit\n     */\n    function invest(\n        address _client,\n        uint8 _depositsCount\n    )\n        payable public\n    {\n        uint amount = msg.value;\n\n        // if less then 5 deposits\n        if (_depositsCount < 5) {\n\n            uint serviceFee;\n\n            serviceFee = amount * serviceFees[_depositsCount];\n\n            uint referralFee = amount * referralFees[_depositsCount];\n\n            // distribute deposit fee among users above on the branch & update users' statuses\n            distribute(data.parentOf(_client), 0, _depositsCount, amount);\n\n            // update balance & number of deposits of user\n            uint active = (amount * 100).sub(referralFee).sub(serviceFee);\n\n            wbtToken.mint(_client, active / 100 * wbtToken.rate() / wbtToken.mrate());\n\n            // update owner`s balance\n            data.addBalance(owner, serviceFee * 10000);\n        } else {\n            wbtToken.mint(_client, amount * wbtToken.rate() / wbtToken.mrate());\n        }\n    }\n\n    /**\n     * @dev invest bct token function\n     * @param _client to transfer BCT token\n     */\n    function investBct(\n        address _client\n    )\n        public payable\n    {\n        uint amount = msg.value;\n        // distribute deposit fee among users above on the branch & update users' statuses\n        distribute(data.parentOf(_client), 0, 0, amount);\n\n        bctToken.transfer(_client, amount * ethUsdRate / bctToken.price());\n    }\n\n\n    /**\n     * @dev Recursively distribute deposit fee between parents\n     * @param _node Parent address\n     * @param _prevPercentage The percentage for previous parent\n     * @param _depositsCount Count of depositer deposits\n     * @param _amount The amount of deposit\n     */\n    function distribute(\n        address _node,\n        uint _prevPercentage,\n        uint8 _depositsCount,\n        uint _amount\n    )\n        private\n    {\n        address node = _node;\n        uint prevPercentage = _prevPercentage;\n\n        // distribute deposit fee among users above on the branch & update users' statuses\n        while(node != address(0)) {\n            uint8 status = data.statuses(node);\n\n            // count fee percentage of current node\n            uint nodePercentage = feeDistribution[status][_depositsCount];\n            uint percentage = nodePercentage.sub(prevPercentage);\n            data.addBalance(node, _amount * percentage * 1000);\n\n            //update refferals sum amount\n            data.addReferralDeposit(node, _amount * ethUsdRate / 10**18);\n\n            //update status\n            updateStatus(node, status);\n\n            node = data.parentOf(node);\n            prevPercentage = nodePercentage;\n        }\n    }\n\n\n    /**\n     * @dev Update node status if children sum amount is enough\n     * @param _node Node address\n     * @param _status Node current status\n     */\n    function updateStatus(\n        address _node,\n        uint8 _status\n    )\n        private\n    {\n        uint refDep = data.referralDeposits(_node);\n\n        for (uint i = thresholds.length - 1; i > _status; i--) {\n            uint threshold = thresholds[i] * 100;\n\n            if (refDep >= threshold) {\n                data.setStatus(_node, statusThreshold[thresholds[i]]);\n                break;\n            }\n        }\n    }\n\n\n    /**\n     * @dev Set wbtToken exchange rate\n     * @param _rate wbt/eth rate\n     */\n    function setRate(\n        uint _rate\n    )\n        onlyOwner public\n    {\n        wbtToken.setRate(_rate);\n    }\n\n\n    /**\n     * @dev Set bctToken price\n     * @param _price bct/usd rate\n     */\n    function setPrice(\n        uint _price\n    )\n        onlyOwner public\n    {\n        bctToken.setPrice(_price);\n    }\n\n\n    /**\n     * @dev Set ETH exchange rate\n     * @param _ethUsdRate eth/usd rate\n     */\n    function setEthUsdRate(\n        uint _ethUsdRate\n    )\n        onlyOwner public\n    {\n        ethUsdRate = _ethUsdRate;\n    }\n\n\n    /**\n     * @dev Add new child\n     * @param _inviter parent\n     * @param _invitee child\n     */\n    function invite(\n        address _inviter,\n        address _invitee\n    )\n        public onlyOwner\n    {\n        data.setParent(_invitee, _inviter);\n        // Agent - 0\n        data.setStatus(_invitee, 0);\n    }\n\n\n    /**\n     * @dev Set _status for _addr\n     * @param _addr address\n     * @param _status ref. status\n     */\n    function setStatus(\n        address _addr,\n        uint8 _status\n    )\n        public onlyOwner\n    {\n        data.setStatus(_addr, _status);\n    }\n\n\n    /**\n     * @dev Withdraw _amount for _addr\n     * @param _addr withdrawal address\n     * @param _amount withdrawal amount\n     * @param investor is investor\n     */\n    function withdraw(\n        address _addr,\n        uint256 _amount,\n        bool investor\n    )\n        public onlyOwner\n    {\n        uint amount = investor ? data.investorBalanceOf(_addr) : data.balanceOf(_addr);\n        require(amount >= _amount && address(this).balance >= _amount);\n\n        if (investor) {\n            data.subtrInvestorBalance(_addr, _amount * 1000000);\n        } else {\n            data.subtrBalance(_addr, _amount * 1000000);\n        }\n\n        _addr.transfer(_amount);\n    }\n\n\n    /**\n     * @dev Withdraw contract balance to _addr\n     * @param _addr withdrawal address\n     */\n    function withdrawOwner(\n        address _addr,\n        uint256 _amount\n    )\n        public onlyOwner\n    {\n        require(address(this).balance >= _amount);\n        _addr.transfer(_amount);\n    }\n\n\n    /**\n     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n     * @param _addr buyer address\n     * @param _amount amount of tokens to buy\n     */\n    function transferBctToken(\n        address _addr,\n        uint _amount\n    )\n        onlyOwner public\n    {\n        require(bctToken.balanceOf(this) >= _amount);\n        bctToken.transfer(_addr, _amount);\n    }\n\n\n    /**\n     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n     * @param _addr withdrawal address\n     * @param _amount amount of tokens to sell\n     */\n    function withdrawWbtToken(\n        address _addr,\n        uint256 _amount\n    )\n        onlyOwner public\n    {\n        wbtToken.burn(_addr, _amount);\n        uint256 etherValue = _amount * wbtToken.mrate() / wbtToken.rate();\n        _addr.transfer(etherValue);\n    }\n\n\n    /**\n     * @dev Transfer ownership of wbtToken contract to _addr\n     * @param _addr address\n     */\n    function transferTokenOwnership(\n        address _addr\n    )\n        onlyOwner public\n    {\n        wbtToken.transferOwnership(_addr);\n    }\n\n\n    /**\n     * @dev Transfer ownership of data contract to _addr\n     * @param _addr address\n     */\n    function transferDataOwnership(\n        address _addr\n    )\n        onlyOwner public\n    {\n        data.transferOwnership(_addr);\n    }\n\n}",
  "bytecode": "6101806040526000608090815261138860a0526188b860c052620249f060e0526207a12061010052622625a061012052624c4b406101405262989680610160526200004f906002906008620003cf565b506040805160a08101825260328152601e6020820152601491810191909152600a606082018190526005608083018190526200008c929062000419565b506040805160a0810182526019815260146020820152600f918101829052600a6060820152600560808201819052620000c792919062000419565b50348015620000d557600080fd5b5060405160808062001d3f83398101604090815281516020830151918301516060909301519092906200011064010000000062000161810204565b6014805433600160a060020a031991821617909155601894909455601580548516600160a060020a03948516179055601680548516928416929092179091556017805490931691161790556200046f565b6040805160a081018252607881526050602082015260329181019190915260146060820152600a6080820152620001aa906000906002825b015464010000000062000359810204565b6040805160a08181018352815260646020820152603c91810191909152601e606082015260146080820152620001e69060019060028262000199565b6040805160a08101825260c881526078602082015260509181019190915260286060820152601960808201526200022290600290818062000199565b6040805160a08101825260fa81526096602082015260649181019190915260326060820152601e60808201526200025f9060039060028262000199565b6040805160a08101825261012c815260b46020820152607891810191909152603c6060820152602360808201526200029d9060049060028262000199565b6040805160a08101825261015e815260d26020820152608c918101919091526046606082015260286080820152620002db9060059060028262000199565b6040805160a08181018352610190825260f060208301529181019190915260506060820152602d6080820152620003189060069060028262000199565b6040805160a0810182526101f4815261012c602082015260c8918101919091526064606082015260326080820152620003579060079060028262000199565b565b6000818152602081905260408120805460ff191660ff86161790555b60058160ff161015620003c9578260ff8216600581106200039257fe5b6020908102919091015160ff8087166000908152600180855260408083209387168352929094522061ffff90911690550162000375565b50505050565b826008810192821562000407579160200282015b8281111562000407578251829062ffffff16905591602001919060010190620003e3565b50620004159291506200044f565b5090565b826005810192821562000407579160200282015b8281111562000407578251829060ff169055916020019190600101906200042d565b6200046c91905b8082111562000415576000815560010162000456565b90565b6118c0806200047f6000396000f3006080604052600436106100cc5763ffffffff60e060020a60003504166321e6b53d81146100ce578063278e07ce146100ef57806334fcf437146101165780633b478fc51461012e578063581c5ae6146101555780635cbb122c1461016f5780636f4c6443146101935780638da5cb5b146101ba57806391b7f5ed146101eb578063a388541314610203578063a671277814610227578063c307f6ba1461023b578063e4952ddb1461025f578063ead5d35914610280578063f2fde38b146102a9578063fb6f93a4146102ca575b005b3480156100da57600080fd5b506100cc600160a060020a03600435166102e2565b3480156100fb57600080fd5b506100cc600160a060020a036004351660ff6024351661037b565b34801561012257600080fd5b506100cc60043561041e565b34801561013a57600080fd5b5061014361049b565b60408051918252519081900360200190f35b6100cc600160a060020a036004351660ff602435166104a1565b34801561017b57600080fd5b506100cc600160a060020a0360043516602435610994565b34801561019f57600080fd5b506100cc600160a060020a0360043581169060243516610ae6565b3480156101c657600080fd5b506101cf610bee565b60408051600160a060020a039092168252519081900360200190f35b3480156101f757600080fd5b506100cc600435610bfd565b34801561020f57600080fd5b506100cc600160a060020a0360043516602435610c7a565b6100cc600160a060020a0360043516610cda565b34801561024757600080fd5b506100cc600160a060020a0360043516602435610e70565b34801561026b57600080fd5b506100cc600160a060020a0360043516611060565b34801561028c57600080fd5b506100cc600160a060020a036004351660243560443515156110de565b3480156102b557600080fd5b506100cc600160a060020a036004351661139f565b3480156102d657600080fd5b506100cc6004356113c2565b601454600160a060020a031633146102f957600080fd5b601554604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b5050505050565b601454600160a060020a0316331461039257600080fd5b601754604080517f278e07ce000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260ff851660248301529151919092169163278e07ce91604480830192600092919082900301818387803b15801561040257600080fd5b505af1158015610416573d6000803e3d6000fd5b505050505050565b601454600160a060020a0316331461043557600080fd5b601554604080517f34fcf437000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a03909216916334fcf4379160248082019260009290919082900301818387803b15801561036057600080fd5b60185481565b3460008080600560ff861610156107e357600f60ff8616600581106104c257fe5b015484029250600a60ff8616600581106104d857fe5b0154601754604080517fee08388e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301529151938802955061058093919092169163ee08388e9160248083019260209291908290030181600087803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b505050506040513d602081101561057557600080fd5b5051600087876113de565b6105a383610597606487028563ffffffff61169616565b9063ffffffff61169616565b601554604080517ef3e7170000000000000000000000000000000000000000000000000000000081529051929350600160a060020a03909116916340c10f19918991849162f3e7179160048083019260209291908290030181600087803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b505050506040513d602081101561063757600080fd5b5051601554604080517f2c4e722e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691632c4e722e916004808201926020929091908290030181600087803b15801561069957600080fd5b505af11580156106ad573d6000803e3d6000fd5b505050506040513d60208110156106c357600080fd5b505160648604028115156106d357fe5b046040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050506040513d602081101561075057600080fd5b5050601754601454604080517f21e5383a000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015261271087026024820152905191909216916321e5383a91604480830192600092919082900301818387803b1580156107c657600080fd5b505af11580156107da573d6000803e3d6000fd5b50505050610416565b601554604080517ef3e7170000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916340c10f19918991849162f3e7179160048083019260209291908290030181600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b505050506040513d602081101561087457600080fd5b5051601554604080517f2c4e722e0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691632c4e722e916004808201926020929091908290030181600087803b1580156108d657600080fd5b505af11580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051880281151561090d57fe5b046040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b505050506040513d602081101561098a57600080fd5b5050505050505050565b601454600160a060020a031633146109ab57600080fd5b601654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b505050506040513d6020811015610a3a57600080fd5b50511015610a4757600080fd5b601654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610ab657600080fd5b505af1158015610aca573d6000803e3d6000fd5b505050506040513d6020811015610ae057600080fd5b50505050565b601454600160a060020a03163314610afd57600080fd5b601754604080517fb3204b8b000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015285811660248301529151919092169163b3204b8b91604480830192600092919082900301818387803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b5050601754604080517f278e07ce000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260006024830181905292519316945063278e07ce93506044808201939182900301818387803b15801561040257600080fd5b601454600160a060020a031681565b601454600160a060020a03163314610c1457600080fd5b601654604080517f91b7f5ed000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a03909216916391b7f5ed9160248082019260009290919082900301818387803b15801561036057600080fd5b601454600160a060020a03163314610c9157600080fd5b3031811115610c9f57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610cd5573d6000803e3d6000fd5b505050565b601754604080517fee08388e000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291513493610d7a93169163ee08388e9160248083019260209291908290030181600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050506040513d6020811015610d6f57600080fd5b5051600080846113de565b601654604080517fa035b1fe0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163a9059cbb918591849163a035b1fe9160048083019260209291908290030181600087803b158015610de357600080fd5b505af1158015610df7573d6000803e3d6000fd5b505050506040513d6020811015610e0d57600080fd5b50516018548502811515610e1d57fe5b046040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610ab657600080fd5b601454600090600160a060020a03163314610e8a57600080fd5b601554604080517f9dc29fac000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820186905291519190921691639dc29fac91604480830192600092919082900301818387803b158015610ef857600080fd5b505af1158015610f0c573d6000803e3d6000fd5b50505050601560009054906101000a9004600160a060020a0316600160a060020a0316632c4e722e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f6357600080fd5b505af1158015610f77573d6000803e3d6000fd5b505050506040513d6020811015610f8d57600080fd5b5051601554604080517ef3e7170000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169162f3e717916004808201926020929091908290030181600087803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b505050506040513d602081101561101757600080fd5b5051830281151561102457fe5b04905082600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610ae0573d6000803e3d6000fd5b601454600160a060020a0316331461107757600080fd5b601754604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561036057600080fd5b601454600090600160a060020a031633146110f857600080fd5b8161119657601754604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915191909216916370a082319160248083019260209291908290030181600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b505050506040513d602081101561118f57600080fd5b505161122b565b601754604080517f61fba37d000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915191909216916361fba37d9160248083019260209291908290030181600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d602081101561122857600080fd5b50515b905082811015801561123e575030318311155b151561124957600080fd5b81156112de57601754604080517f0452396c000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152620f42408702602483015291519190921691630452396c91604480830192600092919082900301818387803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b50505050611369565b601754604080517f5a6af33b000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152620f42408702602483015291519190921691635a6af33b91604480830192600092919082900301818387803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050505b604051600160a060020a0385169084156108fc029085906000818181858888f19350505050158015610374573d6000803e3d6000fd5b601454600160a060020a031633146113b657600080fd5b6113bf816116a8565b50565b601454600160a060020a031633146113d957600080fd5b601855565b8383600080805b600160a060020a0385161561168b57601754604080517faf11c1f0000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301529151919092169163af11c1f09160248083019260209291908290030181600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b505050506040513d602081101561148657600080fd5b505160ff8082166000908152600160209081526040808320938c168352929052205490935091506114bd828563ffffffff61169616565b601754604080517f21e5383a000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526103e88b860202602483015291519394509116916321e5383a9160448082019260009290919082900301818387803b15801561153257600080fd5b505af1158015611546573d6000803e3d6000fd5b5050601754601854604080517fa7f1b77a000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152670de0b6b3a7640000938d02939093046024820152905191909216935063a7f1b77a9250604480830192600092919082900301818387803b1580156115c957600080fd5b505af11580156115dd573d6000803e3d6000fd5b505050506115eb8584611726565b601754604080517fee08388e000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301529151919092169163ee08388e9160248083019260209291908290030181600087803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050506040513d602081101561167d57600080fd5b5051945090925082906113e5565b505050505050505050565b6000828211156116a257fe5b50900390565b600160a060020a03811615156116bd57600080fd5b601454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36014805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601754604080517f6244cfa4000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915160009384938493911691636244cfa49160248082019260209290919082900301818787803b15801561179357600080fd5b505af11580156117a7573d6000803e3d6000fd5b505050506040513d60208110156117bd57600080fd5b50519250600791505b8360ff1682111561037457600282600881106117de57fe5b0154606402905080831061188857601754600160a060020a031663278e07ce866000806002876008811061180e57fe5b0154815260208101919091526040908101600090812054825160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff166024840152905160448084019382900301818387803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b50505050610374565b600019909101906117c65600a165627a7a72305820bba32abb07ae2cf88961ad327fb68ff2d9053bbcd8553390d7909bc9d007d0a500290000000000000000000000000000000000000000000000000000000000009e32000000000000000000000000a7cb7f55ece2d1df3379f303f33dd3e1ee593b8f0000000000000000000000005c523d6abe17e98eaa58c2df62a6ec9162f3b9a10000000000000000000000006c3699aeb742bb0a179c0ac1628dedf0b1db8554",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000009e32000000000000000000000000a7cb7f55ece2d1df3379f303f33dd3e1ee593b8f0000000000000000000000005c523d6abe17e98eaa58c2df62a6ec9162f3b9a10000000000000000000000006c3699aeb742bb0a179c0ac1628dedf0b1db8554"
}