{
  "address": "0xe9ae248830bac191298a71b629b0afb8ad83b553",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LuxuryGoodsCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// 'Luxury Goods Exchange' contract\n//\n// Deployed to : 0x219690C50d3489D6a279362a920dC67120545fac\n// Symbol      : LUX\n// Name        : Luxury Goods Coin\n// Total supply: 5000000000\n// Decimals    : 18\n//\n// Enjoy.\n//\n// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);   // Update total supply with the decimal amount -- wei\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n        name = tokenName;                                       // Set the name for display purposes\n        symbol = tokenSymbol;                                  // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n}\n\n/*************************************************/\n/**  Author   : HqAD07                          **/\n/**  Contents : LuxuryGoods Crypto Currency     **/\n/**  Date     : 2019. 05 ~                      **/\n/*************************************************/\n\ncontract LuxuryGoodsCoin is owned, TokenERC20 {\n\n    uint256 public sellPrice = 20180418134311;        // Initialization with default value\n    uint256 public buyPrice = 1000000000000000000;    // Initialization with default value\n\tuint256 public limitAMT = 0;\n\tbool public isPreSales = false;\n\n\n     mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function LuxuryGoodsCoin(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n\t/// @notice Start presales with initializing presales amount\n\t/// @param amtPreSales The amount of presales\n    function startPreSales(uint256 amtPreSales) onlyOwner public returns (uint256) {\n\t    require (balanceOf[owner] - amtPreSales > 0);\n        limitAMT = balanceOf[owner] - amtPreSales;\n\t\tisPreSales = true;\n\t\treturn limitAMT;\n\t}\n\n\t/// @notice Stop presales with setting state variable\n    function stopPreSales() onlyOwner public {\n\t    isPreSales = false;\n\t}\n\n    /// @notice Buy tokens from contract by sending ether\n/*************************************************************\n//////////////////////////////////////////////////////////////\n///    function buy() payable public {\n///        uint amount = msg.value / buyPrice;               // calculates the amount\n///        _transfer(this, msg.sender, amount);              // makes the transfers\n///    }\n//////////////////////////////////////////////////////////////\n*************************************************************/\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n/*************************************************************\n//////////////////////////////////////////////////////////////\n///    function sell(uint256 amount) public {\n///        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n///        _transfer(msg.sender, this, amount);              // makes the transfers\n///        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n///    }\n//////////////////////////////////////////////////////////////\n*************************************************************/\n\n    /// @notice Get LuxuryGoodsCoin transaction amount\n\t/// @param amtETH The amount of ether to convert with LuxuryGoodsCoin\n\tfunction getLuxAMT(uint256 amtETH) public constant returns (uint256) {\n        uint256 amount = amtETH / buyPrice;                    \n        amount = amount * 10 ** uint256(decimals);             \n\t\treturn amount;\n\t}\n\n\t/// @notice Get the balance of LuxuryGoodsCoin\n\tfunction getBalanceLux() public constant returns (uint256) {\n\t    uint256 balLUX;\n\t\tbalLUX = balanceOf[msg.sender];\n\t\treturn balLUX;\n\t}\n\n\tfunction getSalesPrice() public constant returns (uint256) {\n\t\treturn buyPrice;\n\t}\n\n\tfunction getLeftPreSalesAMT() public constant returns (uint256) {\n\t    uint256 leftPSAMT;\n\t\tleftPSAMT = balanceOf[owner] - limitAMT;\n\t\treturn leftPSAMT;\n\t}\n\n    /// @notice Process presales transactions\n    function procPreSales() payable public returns (uint256) {\n        require (isPreSales == true);\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n\t    if ( balanceOf[owner] - amount <= limitAMT ){\n\t\t    isPreSales = false;\n\t\t}\n        _transfer(owner, msg.sender, amount);\n\t\towner.transfer(msg.value);\n\t\treturn amount;\n    }\n\n\t/// @notice Process normal sales transactions\n    function procNormalSales() payable public returns (uint256) {\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n        _transfer(owner, msg.sender, amount);\n\t\towner.transfer(msg.value);\n\t\treturn amount;\n    }\n\n\t/// @notice Process owner's buyback\n\t/// @param seller Seller's EOA account address\n    function procNormalBuyBack(address seller) onlyOwner payable public returns (uint256) {\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n        _transfer(seller, msg.sender, amount);\n\t\tseller.transfer(msg.value);\n\t\treturn amount;\n    }\n\n}",
  "bytecode": "60806040526012600360006101000a81548160ff021916908360ff16021790555065125a9ea78127600755670de0b6b3a764000060085560006009556000600a60006101000a81548160ff0219169083151502179055503480156200006357600080fd5b5060405162001dba38038062001dba833981018060405281019080805190602001909291908051820192919060200180518201929190505050828282336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff1660ff16600a0a8302600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600190805190602001906200015b92919062000181565b5080600290805190602001906200017492919062000181565b5050505050505062000230565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c457805160ff1916838001178555620001f5565b82800160010185558215620001f5579182015b82811115620001f4578251825591602001919060010190620001d7565b5b50905062000204919062000208565b5090565b6200022d91905b80821115620002295760008160009055506001016200020f565b5090565b90565b611b7a80620002406000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305fefda71461017a57806306fdde03146101b1578063095ea7b3146102415780630a8b5d08146102a657806318160ddd146102e7578063190fea6c1461031257806323b872dd146103415780632853b760146103c6578063313ce567146103dd5780634b7503341461040e57806351389626146104395780635ba845a21461048357806370a08231146104ae57806379c65068146105055780638620410b146105525780638da5cb5b1461057d5780638dc61dbe146105d45780638f98e0bd146105ff57806395d89b4114610640578063a9059cbb146106d0578063b414d4b61461071d578063c0c566f014610778578063c2b848e8146107a3578063c4f25f10146107c1578063cae9ca51146107df578063dd62ed3e1461088a578063e724529c14610901578063f2fde38b14610950578063f80ed85b14610993575b600080fd5b34801561018657600080fd5b506101af60048036038101908080359060200190929190803590602001909291905050506109be565b005b3480156101bd57600080fd5b506101c6610a2b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ac9565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102d160048036038101908080359060200190929190505050610b56565b6040518082815260200191505060405180910390f35b3480156102f357600080fd5b506102fc610cb2565b6040518082815260200191505060405180910390f35b34801561031e57600080fd5b50610327610cb8565b604051808215151515815260200191505060405180910390f35b34801561034d57600080fd5b506103ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ccb565b604051808215151515815260200191505060405180910390f35b3480156103d257600080fd5b506103db610df8565b005b3480156103e957600080fd5b506103f2610e70565b604051808260ff1660ff16815260200191505060405180910390f35b34801561041a57600080fd5b50610423610e83565b6040518082815260200191505060405180910390f35b61046d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e89565b6040518082815260200191505060405180910390f35b34801561048f57600080fd5b50610498610f6c565b6040518082815260200191505060405180910390f35b3480156104ba57600080fd5b506104ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f72565b6040518082815260200191505060405180910390f35b34801561051157600080fd5b50610550600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f8a565b005b34801561055e57600080fd5b506105676110fb565b6040518082815260200191505060405180910390f35b34801561058957600080fd5b50610592611101565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105e057600080fd5b506105e9611126565b6040518082815260200191505060405180910390f35b34801561060b57600080fd5b5061062a60048036038101908080359060200190929190505050611197565b6040518082815260200191505060405180910390f35b34801561064c57600080fd5b506106556111cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561069557808201518184015260208101905061067a565b50505050905090810190601f1680156106c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106dc57600080fd5b5061071b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061126b565b005b34801561072957600080fd5b5061075e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061127a565b604051808215151515815260200191505060405180910390f35b34801561078457600080fd5b5061078d61129a565b6040518082815260200191505060405180910390f35b6107ab6112a4565b6040518082815260200191505060405180910390f35b6107c9611417565b6040518082815260200191505060405180910390f35b3480156107eb57600080fd5b50610870600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114df565b604051808215151515815260200191505060405180910390f35b34801561089657600080fd5b506108eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611662565b6040518082815260200191505060405180910390f35b34801561090d57600080fd5b5061094e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611687565b005b34801561095c57600080fd5b50610991600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ac565b005b34801561099f57600080fd5b506109a861184a565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1957600080fd5b81600781905550806008819055505050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb357600080fd5b600082600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403111515610c2457600080fd5b81600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036009819055506001600a60006101000a81548160ff0219169083151502179055506009549050919050565b60045481565b600a60009054906101000a900460ff1681565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d5857600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610ded848484611896565b600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5357600080fd5b6000600a60006101000a81548160ff021916908315150217905550565b600360009054906101000a900460ff1681565b60075481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ee757600080fd5b60085434811515610ef457fe5b049050600360009054906101000a900460ff1660ff16600a0a81029050610f1c833383611896565b8273ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610f62573d6000803e3d6000fd5b5080915050919050565b60095481565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe557600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600954600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540390508091505090565b600080600854838115156111a757fe5b049050600360009054906101000a900460ff1660ff16600a0a8102905080915050919050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b505050505081565b611276338383611896565b5050565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000600854905090565b60008060011515600a60009054906101000a900460ff1615151415156112c957600080fd5b600854348115156112d657fe5b049050600360009054906101000a900460ff1660ff16600a0a8102905060095481600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540311151561137c576000600a60006101000a81548160ff0219169083151502179055505b6113a86000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383611896565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561140f573d6000803e3d6000fd5b508091505090565b6000806008543481151561142757fe5b049050600360009054906101000a900460ff1660ff16600a0a810290506114706000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383611896565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156114d7573d6000803e3d6000fd5b508091505090565b6000808490506114ef8585610ac9565b15611659578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115e95780820151818401526020810190506115ce565b50505050905090810190601f1680156116165780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561163857600080fd5b505af115801561164c573d6000803e3d6000fd5b505050506001915061165a565b5b509392505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e257600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180757600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508091505090565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156118bc57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561190a57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561199857600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156119f157600080fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611a4a57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820f040109e64dcb8d4cb7fe916aadd3d44f319db7b71352983160222f051ac7a6f00290000000000000000000000000000000000000000000000000000000ba43b7400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000114c757875727920476f6f647320436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c55580000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000ba43b7400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000114c757875727920476f6f647320436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c55580000000000000000000000000000000000000000000000000000000000"
}