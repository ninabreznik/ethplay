{
  "address": "0xec193241dc1ca3bbe3165de6d37a793585b4504e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyAdvancedToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-11\n*/\n\npragma solidity ^0.4.24;\n\n \n\ncontract owned {\n\n    address public owner;\n\n    function owned() public {\n\n        owner = msg.sender;\n\n    }\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n \n\n    function transferOwnership(address newOwner) onlyOwner public {\n\n        owner = newOwner;\n\n    }\n\n}\n\n \n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\n \n\ncontract TokenERC20 {\n\n    // Public variables of the token\n\n    string public name = 'Every Media Coin';\n\n    string public symbol = 'EVE';\n\n    uint256 public decimals = 18;\n\n\n    uint256 public totalSupply = 100000000 * (10 ** decimals);\n\n \n\n    // This creates an array with all balances\n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n \n\n    // This generates a public event on the blockchain that will notify clients\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n \n\n    // This notifies clients about the amount burnt\n\n    event Burn(address indexed from, uint256 value);\n\n \n\n    /**\n\n     * Constrctor function\n\n     *\n\n     * Initializes contract with initial supply tokens to the creator of the contract\n\n     */\n\n    // function TokenERC20(\n\n    //     uint256 initialSupply,\n\n    //     string tokenName,\n\n    //     string tokenSymbol\n\n    // ) public {\n\n    //     totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\n    //     balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\n    //     name = tokenName;                                   // Set the name for display purposes\n\n    //     symbol = tokenSymbol;                               // Set the symbol for display purposes\n\n    // }\n\n \n\n    /**\n\n     * Internal transfer, only can be called by this contract\n\n     */\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n        // Prevent transfer to 0x0 address. Use burn() instead\n\n        require(_to != 0x0);\n\n        // Check if the sender has enough\n\n        require(balanceOf[_from] >= _value);\n\n        // Check for overflows\n\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\n        // Save this for an assertion in the future\n\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n        // Subtract from the sender\n\n        balanceOf[_from] -= _value;\n\n        // Add the same to the recipient\n\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n    }\n\n \n\n    /**\n\n     * Transfer tokens\n\n     *\n\n     * Send `_value` tokens to `_to` from your account\n\n     *\n\n     * @param _to The address of the recipient\n\n     * @param _value the amount to send\n\n     */\n\n    function transfer(address _to, uint256 _value) public {\n\n        _transfer(msg.sender, _to, _value);\n\n    }\n\n \n\n    /**\n\n     * Transfer tokens from other address\n\n     *\n\n     * Send `_value` tokens to `_to` in behalf of `_from`\n\n     *\n\n     * @param _from The address of the sender\n\n     * @param _to The address of the recipient\n\n     * @param _value the amount to send\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\n        allowance[_from][msg.sender] -= _value;\n\n        _transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Set allowance for other address\n\n     *\n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\n     *\n\n     * @param _spender The address authorized to spend\n\n     * @param _value the max amount they can spend\n\n     */\n\n    function approve(address _spender, uint256 _value) public\n\n        returns (bool success) {\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Set allowance for other address and notify\n\n     *\n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\n     *\n\n     * @param _spender The address authorized to spend\n\n     * @param _value the max amount they can spend\n\n     * @param _extraData some extra information to send to the approved contract\n\n     */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n        public\n\n        returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Destroy tokens\n\n     *\n\n     * Remove `_value` tokens from the system irreversibly\n\n     *\n\n     * @param _value the amount of money to burn\n\n     */\n\n    function burn(uint256 _value) public returns (bool success) {\n\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n\n        totalSupply -= _value;                      // Updates totalSupply\n\n        Burn(msg.sender, _value);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Destroy tokens from other account\n\n     *\n\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\n     *\n\n     * @param _from the address of the sender\n\n     * @param _value the amount of money to burn\n\n     */\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\n        totalSupply -= _value;                              // Update totalSupply\n\n        Burn(_from, _value);\n\n        return true;\n\n    }\n\n}\n\n \n\n/******************************************/\n\n/*       ADVANCED TOKEN STARTS HERE       */\n\n/******************************************/\n\n \n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n \n\n    mapping (address => bool) public frozenAccount;\n\n \n\n    /* This generates a public event on the blockchain that will notify clients */\n\n    event FrozenFunds(address target, bool frozen);\n    \n    constructor() public {\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n \n    /* Internal transfer, only can be called by this contract */\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n\n        Transfer(_from, _to, _value);\n\n    }\n\n \n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n\n    /// @param target Address to receive the tokens\n\n    /// @param mintedAmount the amount of tokens it will receive\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n\n        balanceOf[target] += mintedAmount;\n\n        totalSupply += mintedAmount;\n\n        Transfer(0, this, mintedAmount);\n\n        Transfer(this, target, mintedAmount);\n\n    }\n\n \n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n\n    /// @param target Address to be frozen\n\n    /// @param freeze either to freeze it or not\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n\n        frozenAccount[target] = freeze;\n\n        FrozenFunds(target, freeze);\n\n    }\n\n \n \n\n}",
  "bytecode": "60c0604052601060808190527f4576657279204d6564696120436f696e0000000000000000000000000000000060a090815261003e91600191906100cf565b506040805180820190915260038082527f45564500000000000000000000000000000000000000000000000000000000006020909201918252610083916002916100cf565b5060126003556a52b7d2dcc80cd2e40000006004553480156100a457600080fd5b5060008054600160a060020a031916339081178255600454908252600560205260409091205561016a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011057805160ff191683800117855561013d565b8280016001018555821561013d579182015b8281111561013d578251825591602001919060010190610122565b5061014992915061014d565b5090565b61016791905b808211156101495760008155600101610153565b90565b610b0e806101796000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806342966c681461021d57806370a082311461023557806379c650681461025657806379cc67901461027c5780638da5cb5b146102a057806395d89b41146102d1578063a9059cbb146102e6578063b414d4b61461030a578063cae9ca511461032b578063dd62ed3e14610394578063e724529c146103bb578063f2fde38b146103e1575b600080fd5b34801561010157600080fd5b5061010a610402565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561048f565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104bc565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104c2565b34801561021457600080fd5b506101cc610531565b34801561022957600080fd5b506101a3600435610537565b34801561024157600080fd5b506101cc600160a060020a03600435166105af565b34801561026257600080fd5b5061027a600160a060020a03600435166024356105c1565b005b34801561028857600080fd5b506101a3600160a060020a0360043516602435610677565b3480156102ac57600080fd5b506102b5610748565b60408051600160a060020a039092168252519081900360200190f35b3480156102dd57600080fd5b5061010a610757565b3480156102f257600080fd5b5061027a600160a060020a03600435166024356107af565b34801561031657600080fd5b506101a3600160a060020a03600435166107be565b34801561033757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107d39650505050505050565b3480156103a057600080fd5b506101cc600160a060020a03600435811690602435166108ec565b3480156103c757600080fd5b5061027a600160a060020a03600435166024351515610909565b3480156103ed57600080fd5b5061027a600160a060020a0360043516610984565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104875780601f1061045c57610100808354040283529160200191610487565b820191906000526020600020905b81548152906001019060200180831161046a57829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600160a060020a03831660009081526006602090815260408083203384529091528120548211156104f257600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020805483900390556105278484846109ca565b5060019392505050565b60035481565b3360009081526005602052604081205482111561055357600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60056020526000908152604090205481565b600054600160a060020a031633146105d857600080fd5b600160a060020a03821660009081526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a03821660009081526005602052604081205482111561069c57600080fd5b600160a060020a03831660009081526006602090815260408083203384529091529020548211156106cc57600080fd5b600160a060020a0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104875780601f1061045c57610100808354040283529160200191610487565b6107ba3383836109ca565b5050565b60076020526000908152604090205460ff1681565b6000836107e0818561048f565b156108e4576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610878578181015183820152602001610860565b50505050905090810190601f1680156108a55780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461092057600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331461099b57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03821615156109df57600080fd5b600160a060020a038316600090815260056020526040902054811115610a0457600080fd5b600160a060020a03821660009081526005602052604090205481810111610a2a57600080fd5b600160a060020a03831660009081526007602052604090205460ff1615610a5057600080fd5b600160a060020a03821660009081526007602052604090205460ff1615610a7657600080fd5b600160a060020a03808416600081815260056020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a723058208819b8d81384a4aeed3060a56bf35a23025a2ea316a6151cc0a42dad04d7795c0029"
}