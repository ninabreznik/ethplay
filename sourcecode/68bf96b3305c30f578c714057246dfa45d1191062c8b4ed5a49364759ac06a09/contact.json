{
  "address": "0x1a9b18cb4891046a1211eb61c6f3f2694b26f427",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DesToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-24\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value);\n  function approve(address spender, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n  function unown() onlyOwner {\n    owner = address(0);\n  }\n\n}\n\ncontract Transferable is Ownable {\n\n  bool public transfersAllowed = false;\n  mapping(address => bool) allowedTransfersTo;\n\n  function Transferable() {\n    allowedTransfersTo[msg.sender] = true;\n  }\n\n  modifier onlyIfTransfersAllowed() {\n    require(transfersAllowed == true || allowedTransfersTo[msg.sender] == true);\n    _;\n  }\n\n  function allowTransfers() onlyOwner {\n    transfersAllowed = true;\n  }\n\n  function disallowTransfers() onlyOwner {\n    transfersAllowed = false;\n  }\n\n  function allowTransfersTo(address _owner) onlyOwner {\n    allowedTransfersTo[_owner] = true;\n  }\n\n  function disallowTransfersTo(address _owner) onlyOwner {\n    allowedTransfersTo[_owner] = false;\n  }\n\n  function transfersAllowedTo(address _owner) constant returns (bool) {\n    return (transfersAllowed == true || allowedTransfersTo[_owner] == true);\n  }\n\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic, Transferable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint256 size) {\n     require(msg.data.length >= size + 4);\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyIfTransfersAllowed {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) onlyIfTransfersAllowed {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract DesToken is StandardToken {\n\n  string public name = \"DES Token\";\n  string public symbol = \"DES\";\n  uint256 public decimals = 18;\n  uint256 public INITIAL_SUPPLY = 35000000 * 1 ether;\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens. \n   */\n  function DesToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}",
  "bytecode": "606060409081526001805460a060020a60ff02191690558051908101604052600981527f44455320546f6b656e00000000000000000000000000000000000000000000006020820152600590805161005b92916020019061012a565b5060408051908101604052600381527f4445530000000000000000000000000000000000000000000000000000000000602082015260069080516100a392916020019061012a565b5060126007556a1cf389cd46047d0300000060085534156100c357600080fd5b5b5b5b60018054600160a060020a03191633600160a060020a03161790555b600160a060020a0333166000908152600260205260409020805460ff191660011790555b6008546000818155600160a060020a0333168152600360205260409020555b6101ca565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016b57805160ff1916838001178555610198565b82800160010185558215610198579182015b8281111561019857825182559160200191906001019061017d565b5b506101a59291506101a9565b5090565b6101c791905b808211156101a557600081556001016101af565b5090565b90565b610b9f806101d96000396000f300606060405236156101045763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630202f3ea811461010957806306fdde031461012a578063095ea7b3146101b557806318160ddd146101d95780631f15bc1b146101fe578063212c81571461021f5780632185810b1461023457806323b872dd146102495780632ff2e9dc14610273578063313ce567146102985780633ffa274a146102bd57806370a08231146102f05780638da5cb5b1461032157806395d89b4114610350578063a9059cbb146103db578063adadc77f146103ff578063b0660c3d14610414578063dd62ed3e1461043b578063f2fde38b14610472575b600080fd5b341561011457600080fd5b610128600160a060020a0360043516610493565b005b341561013557600080fd5b61013d6104d6565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017a5780820151818401525b602001610161565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c057600080fd5b610128600160a060020a0360043516602435610574565b005b34156101e457600080fd5b6101ec610614565b60405190815260200160405180910390f35b341561020957600080fd5b610128600160a060020a036004351661061a565b005b341561022a57600080fd5b61012861065a565b005b341561023f57600080fd5b610128610697565b005b341561025457600080fd5b610128600160a060020a03600435811690602435166044356106da565b005b341561027e57600080fd5b6101ec610842565b60405190815260200160405180910390f35b34156102a357600080fd5b6101ec610848565b60405190815260200160405180910390f35b34156102c857600080fd5b6102dc600160a060020a036004351661084e565b604051901515815260200160405180910390f35b34156102fb57600080fd5b6101ec600160a060020a0360043516610893565b60405190815260200160405180910390f35b341561032c57600080fd5b6103346108b2565b604051600160a060020a03909116815260200160405180910390f35b341561035b57600080fd5b61013d6108c1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017a5780820151818401525b602001610161565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e657600080fd5b610128600160a060020a036004351660243561095f565b005b341561040a57600080fd5b610128610a71565b005b341561041f57600080fd5b6102dc610aad565b604051901515815260200160405180910390f35b341561044657600080fd5b6101ec600160a060020a0360043581169060243516610abd565b60405190815260200160405180910390f35b341561047d57600080fd5b610128600160a060020a0360043516610aea565b005b60015433600160a060020a039081169116146104ae57600080fd5b600160a060020a0381166000908152600260205260409020805460ff191660011790555b5b50565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b505050505081565b8015806105a45750600160a060020a03338116600090815260046020908152604080832093861683529290522054155b15156105af57600080fd5b600160a060020a03338116600081815260046020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60005481565b60015433600160a060020a0390811691161461063557600080fd5b600160a060020a0381166000908152600260205260409020805460ff191690555b5b50565b60015433600160a060020a0390811691161461067557600080fd5b6001805474ff0000000000000000000000000000000000000000191690555b5b565b60015433600160a060020a039081169116146106b257600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b565b6000606060643610156106ec57600080fd5b6001805460a060020a900460ff16151514806107255750600160a060020a03331660009081526002602052604090205460ff1615156001145b151561073057600080fd5b600160a060020a038086166000908152600460209081526040808320338516845282528083205493881683526003909152902054909250610777908463ffffffff610b4216565b600160a060020a0380861660009081526003602052604080822093909355908716815220546107ac908463ffffffff610b5c16565b600160a060020a0386166000908152600360205260409020556107d5828463ffffffff610b5c16565b600160a060020a03808716600081815260046020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b5b5050505050565b60085481565b60075481565b6001805460009160a060020a90910460ff161515148061088b5750600160a060020a03821660009081526002602052604090205460ff1615156001145b90505b919050565b600160a060020a0381166000908152600360205260409020545b919050565b600154600160a060020a031681565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b505050505081565b6040604436101561096f57600080fd5b6001805460a060020a900460ff16151514806109a85750600160a060020a03331660009081526002602052604090205460ff1615156001145b15156109b357600080fd5b600160a060020a0333166000908152600360205260409020546109dc908363ffffffff610b5c16565b600160a060020a033381166000908152600360205260408082209390935590851681522054610a11908363ffffffff610b4216565b600160a060020a0380851660008181526003602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b5b5b505050565b60015433600160a060020a03908116911614610a8c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff191690555b5b565b60015460a060020a900460ff1681565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b92915050565b60015433600160a060020a03908116911614610b0557600080fd5b600160a060020a038116156104d2576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600082820183811015610b5157fe5b8091505b5092915050565b600082821115610b6857fe5b508082035b929150505600a165627a7a72305820862d5fe0654ac356f948c86300ea99f9134b1cf8b3840b08aa30fd6ade2308fb0029"
}