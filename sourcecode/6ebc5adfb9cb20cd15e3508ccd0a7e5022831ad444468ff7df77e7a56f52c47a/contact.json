{
  "address": "0xd6e33c11cff866162787b7198030aac101a61f29",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Stake",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity 0.4.24;\npragma experimental \"v0.5.0\";\n\ninterface RTCoinInterface {\n    \n\n    /** Functions - ERC20 */\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\n\n    function transferFrom(address _owner, address _recipient, uint256 _amount) external returns (bool);\n\n    function approve(address _spender, uint256 _amount) external returns (bool approved);\n\n    /** Getters - ERC20 */\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _holder) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    /** Getters - Custom */\n    function mint(address _recipient, uint256 _amount) external returns (bool);\n\n    function stakeContractAddress() external view returns (address);\n\n    function mergedMinerValidatorAddress() external view returns (address);\n    \n    /** Functions - Custom */\n    function freezeTransfers() external returns (bool);\n\n    function thawTransfers() external returns (bool);\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface ERC20Interface {\n    function owner() external view returns (address);\n    function decimals() external view returns (uint8);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n\nlibrary SafeMath {\n\n  // We use `pure` bbecause it promises that the value for the function depends ONLY\n  // on the function arguments\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n\n/// @title This contract is used to handle staking, and subsequently can increase RTC token supply\n/// @author Postables, RTrade Technologies Ltd\n/// @dev We able V5 for safety features, see https://solidity.readthedocs.io/en/v0.4.24/security-considerations.html#take-warnings-seriously\ncontract Stake {\n\n    using SafeMath for uint256;\n\n    // we mark as constant private to reduce gas costs\n    // Minimum stake of 1RTC\n    uint256 constant private MINSTAKE = 1000000000000000000;\n    // NOTE ON MULTIPLIER: this is right now set to 10% this may however change before token is released\n    uint256 constant private MULTIPLIER = 100000000000000000;\n    // BLOCKHOLDPERIOD is used to determine how many blocks a stake is held for, and how many blocks will mint tokens\n    uint256 constant private BLOCKHOLDPERIOD = 2103840;\n    // BLOCKSEC uses 15 seconds as an average block time. Ultimately the only thing this \"restricts\" is the time at which a stake is withdrawn\n    // Yes, we use block timestamps which can be influenced to some degree by miners, however since this only determines the time at which an initial stake can be withdrawn at\n    // due to the fact that this is also limited by block height, it is an acceptable risk\n    uint256 constant private BLOCKSEC = 15;\n    string  constant public VERSION = \"production\";\n    // this is the address of the RTC token contract\n    address  constant public TOKENADDRESS = 0xecc043b92834c1ebDE65F2181B59597a6588D616;\n    // this is the interface used to interact with the RTC Token\n    RTCoinInterface   constant public RTI = RTCoinInterface(TOKENADDRESS);\n\n    // keeps track of the number of active stakes\n    uint256 public activeStakes;\n    // keeps track of the admin address. For security purposes this can't be changed once set\n    address public admin;\n    // keeps track of whether or not new stakes can be made\n    bool public newStakesAllowed;\n\n    // tracks the state of a stake\n    enum StakeStateEnum { nil, staking, staked }\n\n    struct StakeStruct {\n        // how many tokens were initially staked\n        uint256 initialStake;\n        // the block that the stake was made\n        uint256 blockLocked;\n        // the block at which the initial stake can be withdrawn\n        uint256 blockUnlocked;\n        // the time at which the initial stake can be withdrawn\n        uint256 releaseDate;\n        // the total number of coins to mint\n        uint256 totalCoinsToMint;\n        // the current number of coins that have been minted\n        uint256 coinsMinted;\n        // the amount of coins generated per block\n        uint256 rewardPerBlock;\n        // the block at which a stake was last withdrawn at \n        uint256 lastBlockWithdrawn;\n        // the current state of this stake\n        StakeStateEnum    state;\n    }\n\n    event StakesDisabled();\n    event StakesEnabled();\n    event StakeDeposited(address indexed _staker, uint256 indexed _stakeNum, uint256 _coinsToMint, uint256 _releaseDate, uint256 _releaseBlock);\n    event StakeRewardWithdrawn(address indexed _staker, uint256 indexed _stakeNum, uint256 _reward);\n    event InitialStakeWithdrawn(address indexed _staker, uint256 indexed _stakeNumber, uint256 _amount);\n    event ForeignTokenTransfer(address indexed _sender, address indexed _recipient, uint256 _amount);\n\n    // keeps track of the stakes a user has\n    mapping (address => mapping (uint256 => StakeStruct)) public stakes;\n    // keeps track of the total number of stakes a user has\n    mapping (address => uint256) public numberOfStakes;\n    // keeps track of the user's current RTC balance\n    mapping (address => uint256) public internalRTCBalances;\n\n    modifier validInitialStakeRelease(uint256 _stakeNum) {\n        // make sure that the stake is active\n        require(stakes[msg.sender][_stakeNum].state == StakeStateEnum.staking, \"stake is not active\");\n        require(\n            // please see comment at top of contract about why we consider it safe to use block times\n            // linter warnings are left enabled on purpose\n            now >= stakes[msg.sender][_stakeNum].releaseDate && block.number >= stakes[msg.sender][_stakeNum].blockUnlocked, \n            \"attempting to withdraw initial stake before unlock block and date\"\n        );\n        require(internalRTCBalances[msg.sender] >= stakes[msg.sender][_stakeNum].initialStake, \"invalid internal rtc balance\");\n        _;\n    }\n\n    modifier validMint(uint256 _stakeNumber) {\n        // allow people to withdraw their rewards even if the staking period is over\n        require(\n            stakes[msg.sender][_stakeNumber].state == StakeStateEnum.staking || stakes[msg.sender][_stakeNumber].state == StakeStateEnum.staked, \n            \"stake must be active or inactive in order to mint tokens\"\n        );\n        // make sure that the current coins minted are less than the total coins minted\n        require(\n            stakes[msg.sender][_stakeNumber].coinsMinted < stakes[msg.sender][_stakeNumber].totalCoinsToMint, \n            \"current coins minted must be less than total\"\n        );\n        uint256 currentBlock = block.number;\n        uint256 lastBlockWithdrawn = stakes[msg.sender][_stakeNumber].lastBlockWithdrawn;\n        // verify that the current block is one higher than the last block a withdrawal was made\n        require(currentBlock > lastBlockWithdrawn, \"current block must be one higher than last withdrawal\");\n        _;\n    }\n\n    modifier stakingEnabled(uint256 _numRTC) {\n        // make sure this contract can mint coins on the RTC token contract\n        require(canMint(), \"staking contract is unable to mint tokens\");\n        // make sure new stakes are allowed\n        require(newStakesAllowed, \"new stakes are not allowed\");\n        // make sure they are staking at least one RTC\n        require(_numRTC >= MINSTAKE, \"specified stake is lower than minimum amount\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"sender is not admin\");\n        _;\n    }\n\n    constructor(address _admin) public {\n        require(TOKENADDRESS != address(0), \"token address not set\");\n        admin = _admin;\n    }\n\n    /** @notice Used to disable new stakes from being made\n        * Only usable by contract admin\n     */\n    function disableNewStakes() public onlyAdmin returns (bool) {\n        newStakesAllowed = false;\n        return true;\n    }\n\n    /** @notice Used to allow new stakes to be made\n        * @dev For this to be enabled, the RTC token contract must be configured properly\n     */\n    function allowNewStakes() public onlyAdmin returns (bool) {\n        newStakesAllowed = true;\n        require(RTI.stakeContractAddress() == address(this), \"rtc token contract is not set to use this contract as the staking contract\");\n        return true;\n    }\n\n    /** @notice Used by a staker to claim currently staked coins\n        * @dev Can only be executed when at least one block has passed from the last execution\n        * @param _stakeNumber This is the particular stake to withdraw from\n     */\n    function mint(uint256 _stakeNumber) public validMint(_stakeNumber) returns (bool) {\n        // determine the amount of coins to be minted in this withdrawal\n        uint256 mintAmount = calculateMint(_stakeNumber);\n        // update current coins minted\n        stakes[msg.sender][_stakeNumber].coinsMinted = stakes[msg.sender][_stakeNumber].coinsMinted.add(mintAmount);\n        // update the last block a withdrawal was made at\n        stakes[msg.sender][_stakeNumber].lastBlockWithdrawn = block.number;\n        // emit an event\n        emit StakeRewardWithdrawn(msg.sender, _stakeNumber, mintAmount);\n        // mint the tokenz\n        require(RTI.mint(msg.sender, mintAmount), \"token minting failed\");\n        return true;\n    }\n\n    /** @notice Used by a staker to withdraw their initial stake\n        * @dev Can only be executed after the specified block number, and unix timestamp has been passed\n        * @param _stakeNumber This is the particular stake to withdraw from\n     */\n    function withdrawInitialStake(uint256 _stakeNumber) public validInitialStakeRelease(_stakeNumber) returns (bool) {\n        // get the initial stake amount\n        uint256 initialStake = stakes[msg.sender][_stakeNumber].initialStake;\n        // de-activate the stake\n        stakes[msg.sender][_stakeNumber].state = StakeStateEnum.staked;\n        // decrease the total number of stakes\n        activeStakes = activeStakes.sub(1);\n        // reduce their internal RTC balance\n        internalRTCBalances[msg.sender] = internalRTCBalances[msg.sender].sub(initialStake);\n        // emit an event\n        emit InitialStakeWithdrawn(msg.sender, _stakeNumber, initialStake);\n        // transfer the tokenz\n        require(RTI.transfer(msg.sender, initialStake), \"unable to transfer tokens likely due to incorrect balance\");\n        return true;\n    }\n\n    /** @notice This is used to deposit coins and start staking with at least one RTC\n        * @dev Staking must be enabled or this function will not execute\n        * @param _numRTC This is the number of RTC tokens to stake\n     */\n    function depositStake(uint256 _numRTC) public stakingEnabled(_numRTC) returns (bool) {\n        uint256 stakeCount = getStakeCount(msg.sender);\n\n        // calculate the various stake parameters\n        (uint256 blockLocked, \n        uint256 blockReleased, \n        uint256 releaseDate, \n        uint256 totalCoinsMinted,\n        uint256 rewardPerBlock) = calculateStake(_numRTC);\n\n        // initialize this struct in memory\n        StakeStruct memory ss = StakeStruct({\n            initialStake: _numRTC,\n            blockLocked: blockLocked,\n            blockUnlocked: blockReleased,\n            releaseDate: releaseDate,\n            totalCoinsToMint: totalCoinsMinted,\n            coinsMinted: 0,\n            rewardPerBlock: rewardPerBlock,\n            lastBlockWithdrawn: blockLocked,\n            state: StakeStateEnum.staking\n        });\n\n        // update the users list of stakes\n        stakes[msg.sender][stakeCount] = ss;\n        // update the users total stakes\n        numberOfStakes[msg.sender] = numberOfStakes[msg.sender].add(1);\n        // update their internal RTC balance\n        internalRTCBalances[msg.sender] = internalRTCBalances[msg.sender].add(_numRTC);\n        // increase the number of active stakes\n        activeStakes = activeStakes.add(1);\n        // emit an event\n        emit StakeDeposited(msg.sender, stakeCount, totalCoinsMinted, releaseDate, blockReleased);\n        // transfer tokens\n        require(RTI.transferFrom(msg.sender, address(this), _numRTC), \"transfer from failed, likely needs approval\");\n        return true;\n    }\n\n\n    // UTILITY FUNCTIONS //\n\n    /** @notice This is a helper function used to calculate the parameters of a stake\n        * Will determine the block that the initial stake can be withdraw at\n        * Will determine the time that the initial stake can be withdrawn at\n        * Will determine the total number of RTC to be minted throughout hte stake\n        * Will determine how many RTC the stakee will be awarded per block\n        * @param _numRTC This is the number of RTC to be staked\n     */\n    function calculateStake(uint256 _numRTC) \n        internal\n        view\n        returns (\n            uint256 blockLocked, \n            uint256 blockReleased, \n            uint256 releaseDate, \n            uint256 totalCoinsMinted,\n            uint256 rewardPerBlock\n        ) \n    {\n        // the block that the stake is being made at\n        blockLocked = block.number;\n        // the block at which the initial stake will be released\n        blockReleased = blockLocked.add(BLOCKHOLDPERIOD);\n        // the time at which the initial stake will be released\n        // please see comment at top of contract about why we consider it safe to use block times\n        // linter warnings are left enabled on purpose\n        releaseDate = now.add(BLOCKHOLDPERIOD.mul(BLOCKSEC));\n        // total coins that will be minted\n        totalCoinsMinted = _numRTC.mul(MULTIPLIER);\n        // make sure to scale down\n        totalCoinsMinted = totalCoinsMinted.div(1 ether);\n        // calculate the coins minted per block\n        rewardPerBlock = totalCoinsMinted.div(BLOCKHOLDPERIOD);\n    }\n\n    /** @notice This is a helper function used to calculate how many coins will be awarded in a given internal\n        * @param _stakeNumber This is the particular stake to calculate from\n     */\n    function calculateMint(uint256 _stakeNumber)\n        internal\n        view\n        returns (uint256 reward)\n    {\n        // calculate how many blocks they can claim a stake for\n        uint256 currentBlock = calculateCurrentBlock(_stakeNumber);\n        //get the last block a withdrawal was made at\n        uint256 lastBlockWithdrawn = stakes[msg.sender][_stakeNumber].lastBlockWithdrawn;\n        // determine the number of blocks to generate a reward for\n        uint256 blocksToReward = currentBlock.sub(lastBlockWithdrawn);\n        // calculate the reward\n        reward = blocksToReward.mul(stakes[msg.sender][_stakeNumber].rewardPerBlock);\n        // get total number of coins to be minted\n        uint256 totalToMint = stakes[msg.sender][_stakeNumber].totalCoinsToMint;\n        // get current number of coins minted\n        uint256 currentCoinsMinted = stakes[msg.sender][_stakeNumber].coinsMinted;\n        // get the new numberof total coins to be minted\n        uint256 newCoinsMinted = currentCoinsMinted.add(reward);\n        // if for some reason more would be generated, prevent that from happening\n        if (newCoinsMinted > totalToMint) {\n            reward = newCoinsMinted.sub(totalToMint);\n        }\n    }\n\n    /** @notice Allow us to transfer tokens that someone might've accidentally sent to this contract\n        @param _tokenAddress this is the address of the token contract\n        @param _recipient This is the address of the person receiving the tokens\n        @param _amount This is the amount of tokens to send\n     */\n    function transferForeignToken(\n        address _tokenAddress,\n        address _recipient,\n        uint256 _amount)\n        public\n        onlyAdmin\n        returns (bool)\n    {\n        require(_recipient != address(0), \"recipient address can't be empty\");\n        // don't allow us to transfer RTC tokens stored in this contract\n        require(_tokenAddress != TOKENADDRESS, \"token can't be RTC\");\n        ERC20Interface eI = ERC20Interface(_tokenAddress);\n        require(eI.transfer(_recipient, _amount), \"token transfer failed\");\n        emit ForeignTokenTransfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    /** @notice This is a helper function used to calculate how many blocks to mint coins for\n        * @param _stakeNumber This is the stake to be used for calculations\n     */\n    function calculateCurrentBlock(uint256 _stakeNumber) internal view returns (uint256 currentBlock) {\n        currentBlock = block.number;\n        // if the current block is greater than the block at which coins can be unlocked at, \n        // prevent them from generating more coins that allowed\n        if (currentBlock >= stakes[msg.sender][_stakeNumber].blockUnlocked) {\n            currentBlock = stakes[msg.sender][_stakeNumber].blockUnlocked;\n        }\n    }\n    \n    /** @notice This is a helper function used to get the total number of stakes a \n        * @param _staker This is the address of the stakee\n     */\n    function getStakeCount(address _staker) internal view returns (uint256) {\n        return numberOfStakes[_staker];\n    }\n\n    /** @notice This is a helper function that checks whether or not this contract can mint tokens\n        * @dev This should only ever be false under extreme circumstances such as a potential vulnerability\n     */\n    function canMint() public view returns (bool) {\n        require(RTI.stakeContractAddress() == address(this), \"rtc token contract is not set to use this contract as the staking contract\");\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806118cd833981016040525160018054600160a060020a031916600160a060020a039290921691909117905561187c806100516000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304b5723d81146100ea578063211db50d1461011357806329830ccc14610128578063516f898614610140578063584b62a11461017157806358e1c17414610140578063594548d5146101f15780639e5fea8a14610206578063a0712d6814610230578063beb9716d14610248578063cb82cc8f1461025d578063dfef667914610275578063ed2f2369146102a8578063f1610821146102bd578063f851a440146102de578063ffa1ad74146102f3575b600080fd5b3480156100f657600080fd5b506100ff61037d565b604080519115158252519081900360200190f35b34801561011f57600080fd5b506100ff610404565b34801561013457600080fd5b506100ff6004356105e1565b34801561014c57600080fd5b5061015561099b565b60408051600160a060020a039092168252519081900360200190f35b34801561017d57600080fd5b50610195600160a060020a03600435166024356109b3565b604051808a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018260028111156101d557fe5b60ff168152602001995050505050505050505060405180910390f35b3480156101fd57600080fd5b506100ff610a09565b34801561021257600080fd5b506100ff600160a060020a0360043581169060243516604435610a2a565b34801561023c57600080fd5b506100ff600435610ca0565b34801561025457600080fd5b506100ff61105d565b34801561026957600080fd5b506100ff6004356110d2565b34801561028157600080fd5b50610296600160a060020a036004351661154e565b60408051918252519081900360200190f35b3480156102b457600080fd5b50610296611560565b3480156102c957600080fd5b50610296600160a060020a0360043516611566565b3480156102ea57600080fd5b50610155611578565b3480156102ff57600080fd5b50610308611587565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034257818101518382015260200161032a565b50505050905090810190601f16801561036f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600154600090600160a060020a031633146103e2576040805160e560020a62461bcd02815260206004820152601360248201527f73656e646572206973206e6f742061646d696e00000000000000000000000000604482015290519081900360640190fd5b506001805474ff00000000000000000000000000000000000000001916815590565b600154600090600160a060020a03163314610469576040805160e560020a62461bcd02815260206004820152601360248201527f73656e646572206973206e6f742061646d696e00000000000000000000000000604482015290519081900360640190fd5b6001805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055604080517f272caf690000000000000000000000000000000000000000000000000000000081529051309173ecc043b92834c1ebde65f2181b59597a6588d6169163272caf6991600480820192602092909190829003018186803b15801561050557600080fd5b505afa158015610519573d6000803e3d6000fd5b505050506040513d602081101561052f57600080fd5b5051600160a060020a0316146105db576040805160e560020a62461bcd02815260206004820152604a60248201527f72746320746f6b656e20636f6e7472616374206973206e6f742073657420746f60448201527f20757365207468697320636f6e747261637420617320746865207374616b696e60648201527f6720636f6e747261637400000000000000000000000000000000000000000000608482015290519081900360a40190fd5b50600190565b6000808260013360009081526002602081815260408084208685529091529091206008015460ff169081111561061357fe5b14610668576040805160e560020a62461bcd02815260206004820152601360248201527f7374616b65206973206e6f742061637469766500000000000000000000000000604482015290519081900360640190fd5b33600090815260026020908152604080832084845290915290206003015442108015906106b1575033600090815260026020818152604080842085855290915290912001544310155b1515610753576040805160e560020a62461bcd02815260206004820152604160248201527f617474656d7074696e6720746f20776974686472617720696e697469616c207360448201527f74616b65206265666f726520756e6c6f636b20626c6f636b20616e642064617460648201527f6500000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b336000818152600260209081526040808320858452825280832054938352600490915290205410156107cf576040805160e560020a62461bcd02815260206004820152601c60248201527f696e76616c696420696e7465726e616c207274632062616c616e636500000000604482015290519081900360640190fd5b336000908152600260208181526040808420888552909152822080546008909101805460ff1916909217909155905490925061080c9060016115be565b60009081553381526004602052604090205461082e908363ffffffff6115be16565b33600081815260046020908152604091829020939093558051858152905187937f7d252c33d474583922a2f7a0c2f4d04631095dbd4e35b09adc7f801ec3e743f7928290030190a3604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101849052905173ecc043b92834c1ebde65f2181b59597a6588d6169163a9059cbb9160448083019260209291908290030181600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050506040513d602081101561091357600080fd5b50511515610991576040805160e560020a62461bcd02815260206004820152603960248201527f756e61626c6520746f207472616e7366657220746f6b656e73206c696b656c7960448201527f2064756520746f20696e636f72726563742062616c616e636500000000000000606482015290519081900360840190fd5b5060019392505050565b73ecc043b92834c1ebde65f2181b59597a6588d61681565b600260208181526000938452604080852090915291835291208054600182015492820154600383015460048401546005850154600686015460078701546008909701549597969495939492939192909160ff1689565b60015474010000000000000000000000000000000000000000900460ff1681565b6001546000908190600160a060020a03163314610a91576040805160e560020a62461bcd02815260206004820152601360248201527f73656e646572206973206e6f742061646d696e00000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384161515610af1576040805160e560020a62461bcd02815260206004820181905260248201527f726563697069656e7420616464726573732063616e277420626520656d707479604482015290519081900360640190fd5b600160a060020a03851673ecc043b92834c1ebde65f2181b59597a6588d6161415610b66576040805160e560020a62461bcd02815260206004820152601260248201527f746f6b656e2063616e2774206265205254430000000000000000000000000000604482015290519081900360640190fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151869283169163a9059cbb9160448083019260209291908290030181600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040513d6020811015610bfd57600080fd5b50511515610c55576040805160e560020a62461bcd02815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b604080518481529051600160a060020a0386169133917f10a46ed575affad8e954ae27853b1f89c6da90d8c35f619fc640f8a21bcb78579181900360200190a3506001949350505050565b60008082818060013360009081526002602081815260408084208885529091529091206008015460ff1690811115610cd457fe5b1480610d0957503360009081526002602081815260408084208785529091529091206008015460ff1681811115610d0757fe5b145b1515610d85576040805160e560020a62461bcd02815260206004820152603860248201527f7374616b65206d75737420626520616374697665206f7220696e61637469766560448201527f20696e206f7264657220746f206d696e7420746f6b656e730000000000000000606482015290519081900360840190fd5b3360009081526002602090815260408083208684529091529020600481015460059091015410610e25576040805160e560020a62461bcd02815260206004820152602c60248201527f63757272656e7420636f696e73206d696e746564206d757374206265206c657360448201527f73207468616e20746f74616c0000000000000000000000000000000000000000606482015290519081900360840190fd5b50503360009081526002602090815260408083208484529091529020600701544390808211610ec4576040805160e560020a62461bcd02815260206004820152603560248201527f63757272656e7420626c6f636b206d757374206265206f6e652068696768657260448201527f207468616e206c617374207769746864726177616c0000000000000000000000606482015290519081900360840190fd5b610ecd866115d3565b3360009081526002602090815260408083208a8452909152902060050154909450610efe908563ffffffff6116aa16565b3360008181526002602090815260408083208b84528252918290206005810194909455436007909401939093558051878152905189937f275541ddbc93a3fb1e5e94000231500252d2ba460de93bd1cf285e68563c1a64928290030190a3604080517f40c10f1900000000000000000000000000000000000000000000000000000000815233600482015260248101869052905173ecc043b92834c1ebde65f2181b59597a6588d616916340c10f199160448083019260209291908290030181600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b50511515611051576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e206d696e74696e67206661696c6564000000000000000000000000604482015290519081900360640190fd5b50600195945050505050565b600030600160a060020a031673ecc043b92834c1ebde65f2181b59597a6588d616600160a060020a031663272caf696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561050557600080fd5b60008060008060008060006110e56117f9565b886110ee61105d565b151561116a576040805160e560020a62461bcd02815260206004820152602960248201527f7374616b696e6720636f6e747261637420697320756e61626c6520746f206d6960448201527f6e7420746f6b656e730000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60015474010000000000000000000000000000000000000000900460ff1615156111de576040805160e560020a62461bcd02815260206004820152601a60248201527f6e6577207374616b657320617265206e6f7420616c6c6f776564000000000000604482015290519081900360640190fd5b670de0b6b3a7640000811015611264576040805160e560020a62461bcd02815260206004820152602c60248201527f737065636966696564207374616b65206973206c6f776572207468616e206d6960448201527f6e696d756d20616d6f756e740000000000000000000000000000000000000000606482015290519081900360840190fd5b61126d336116c3565b97506112788a6116e2565b96509650965096509650610120604051908101604052808b815260200188815260200187815260200186815260200185815260200160008152602001848152602001888152602001600160028111156112cd57fe5b90523360009081526002602081815260408084208d855282529283902084518155908401516001808301919091559284015181830155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e08401516007820155610100840151600882018054959750879592949193909260ff19169190849081111561135d57fe5b021790555050336000908152600360205260409020546113859150600163ffffffff6116aa16565b336000908152600360209081526040808320939093556004905220546113b1908b63ffffffff6116aa16565b33600090815260046020526040812091909155546113d690600163ffffffff6116aa16565b60005560408051858152602081018790528082018890529051899133917f1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f9181900360600190a3604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018c9052905173ecc043b92834c1ebde65f2181b59597a6588d616916323b872dd9160648083019260209291908290030181600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b505050506040513d60208110156114c057600080fd5b5051151561153e576040805160e560020a62461bcd02815260206004820152602b60248201527f7472616e736665722066726f6d206661696c65642c206c696b656c79206e656560448201527f647320617070726f76616c000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060019998505050505050505050565b60036020526000908152604090205481565b60005481565b60046020526000908152604090205481565b600154600160a060020a031681565b60408051808201909152600a81527f70726f64756374696f6e00000000000000000000000000000000000000000000602082015281565b6000828211156115cd57600080fd5b50900390565b60008060008060008060006115e788611775565b3360009081526002602090815260408083208c8452909152902060070154909650945061161a868663ffffffff6115be16565b3360009081526002602090815260408083208c845290915290206006015490945061164c90859063ffffffff6117bb16565b3360009081526002602090815260408083208c8452909152902060048101546005909101549198509350915061168282886116aa565b90508281111561169f5761169c818463ffffffff6115be16565b96505b505050505050919050565b6000828201838110156116bc57600080fd5b9392505050565b600160a060020a0381166000908152600360205260409020545b919050565b4360008080806116fb8562201a2063ffffffff6116aa16565b935061172161171462201a20600f63ffffffff6117bb16565b429063ffffffff6116aa16565b925061173b8667016345785d8a000063ffffffff6117bb16565b915061175582670de0b6b3a764000063ffffffff6117e216565b915061176a8262201a2063ffffffff6117e216565b905091939590929450565b3360009081526002602081815260408084208585529091529091200154439081106116dd5750336000908152600260208181526040808420948452939052919020015490565b60008282028315806117d757508284828115156117d457fe5b04145b15156116bc57600080fd5b60008082848115156117f057fe5b04949350505050565b6101206040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600281111561184b57fe5b9052905600a165627a7a72305820fc5228638a7dc266e5b363c2b71e378399a8cd50ad1fe69209b2d27d7cdb201d002900000000000000000000000041fb0e5bd1dfe3b61e9a09ebd4105c2e35b0bcbd",
  "constructorArguments": "00000000000000000000000041fb0e5bd1dfe3b61e9a09ebd4105c2e35b0bcbd"
}