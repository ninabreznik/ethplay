{
  "address": "0xaf47ebbd460f21c2b3262726572ca8812d7143b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Promodl Token",
  "contractName": "ModulePromoToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-24\n*/\n\n/*\n * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.20;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  pure internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n}\n/*\n * EIP-20 Standard Token Smart Contract Interface.\n * Copyright © 2016–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\n */\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}/*\n * Address Set Smart Contract Interface.\n * Copyright © 2017–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Address Set smart contract interface.\n */\ncontract AddressSet {\n  /**\n   * Check whether address set contains given address.\n   *\n   * @param _address address to check\n   * @return true if address set contains given address, false otherwise\n   */\n  function contains (address _address) public view returns (bool);\n}\n/*\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () public {\n    // Do nothing\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (fromBalance, _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) internal accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) internal allowances;\n}\n/*\n * Abstract Virtual Token Smart Contract.\n * Copyright © 2017–2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts supporting virtual balance.\n */\ncontract AbstractVirtualToken is AbstractToken {\n  /**\n   * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\n   */\n  uint256 constant MAXIMUM_TOKENS_COUNT =\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Mask used to extract real balance of an account (2^255-1).\n   */\n  uint256 constant BALANCE_MASK =\n    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Mask used to extract \"materialized\" flag of an account (2^255).\n   */\n  uint256 constant MATERIALIZED_FLAG_MASK =\n    0x8000000000000000000000000000000000000000000000000000000000000000;\n\n  /**\n   * Create new Abstract Virtual Token contract.\n   */\n  function AbstractVirtualToken () public AbstractToken () {\n    // Do nothing\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply) {\n    return tokensCount;\n  }\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance) {\n    return safeAdd (\n      accounts [_owner] & BALANCE_MASK, getVirtualBalance (_owner));\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success) {\n    if (_value > balanceOf (msg.sender)) return false;\n    else {\n      materializeBalanceIfNeeded (msg.sender, _value);\n      return AbstractToken.transfer (_to, _value);\n    }\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success) {\n    if (_value > allowance (_from, msg.sender)) return false;\n    if (_value > balanceOf (_from)) return false;\n    else {\n      materializeBalanceIfNeeded (_from, _value);\n      return AbstractToken.transferFrom (_from, _to, _value);\n    }\n  }\n\n  /**\n   * Get virtual balance of the owner of given address.\n   *\n   * @param _owner address to get virtual balance for the owner of\n   * @return virtual balance of the owner of given address\n   */\n  function virtualBalanceOf (address _owner)\n  internal view returns (uint256 _virtualBalance);\n\n  /**\n   * Calculate virtual balance of the owner of given address taking into account\n   * materialized flag and total number of real tokens already in circulation.\n   */\n  function getVirtualBalance (address _owner)\n  private view returns (uint256 _virtualBalance) {\n    if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\n    else {\n      _virtualBalance = virtualBalanceOf (_owner);\n      uint256 maxVirtualBalance = safeSub (MAXIMUM_TOKENS_COUNT, tokensCount);\n      if (_virtualBalance > maxVirtualBalance)\n        _virtualBalance = maxVirtualBalance;\n    }\n  }\n\n  /**\n   * Materialize virtual balance of the owner of given address if this will help\n   * to transfer given number of tokens from it.\n   *\n   * @param _owner address to materialize virtual balance of\n   * @param _value number of tokens to be transferred\n   */\n  function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\n    uint256 storedBalance = accounts [_owner];\n    if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\n      // Virtual balance is not materialized yet\n      if (_value > storedBalance) {\n        // Real balance is not enough\n        uint256 virtualBalance = getVirtualBalance (_owner);\n        require (safeSub (_value, storedBalance) <= virtualBalance);\n        accounts [_owner] = MATERIALIZED_FLAG_MASK |\n          safeAdd (storedBalance, virtualBalance);\n        tokensCount = safeAdd (tokensCount, virtualBalance);\n      }\n    }\n  }\n\n  /**\n   * Number of real (i.e. non-virtual) tokens in circulation.\n   */\n  uint256 internal tokensCount;\n}\n/*\n * Module Promo Token Smart Contract.  Copyright © 2018 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Module Promo Tokem Smart Contract.\n */\ncontract ModulePromoToken is AbstractVirtualToken {\n  /**\n   * Number of virtual tokens to assign to the owners of addresses from given\n   * address set.\n   */\n  uint256 private constant VIRTUAL_COUNT = 5;\n  \n  /**\n   * Number of tokens to give to the contract deployer for future distribution.\n   */\n  uint256 private constant INITIAL_TOKENS = 10e6;\n\n  /**\n   * Create ModulePromoToken smart contract with given address set.\n   *\n   * @param _addressSet address set to use\n   */\n  function ModulePromoToken (AddressSet _addressSet)\n  public AbstractVirtualToken () {\n    owner = msg.sender;\n\taccounts[owner] = INITIAL_TOKENS;\n    addressSet = _addressSet;\n  }\n\n  /**\n   * Get name of this token.\n   *\n   * @return name of this token\n   */\n  function name () public pure returns (string) {\n    return \"Promodl\";\n  }\n\n  /**\n   * Get symbol of this token.\n   *\n   * @return symbol of this token\n   */\n  function symbol () public pure returns (string) {\n    return \"PMOD\";\n  }\n\n  /**\n   * Get number of decimals for this token.\n   *\n   * @return number of decimals for this token\n   */\n  function decimals () public pure returns (uint8) {\n    return 0;\n  }\n\n  /**\n   * Notify owners about their virtual balances.\n   *\n   * @param _owners addresses of the owners to be notified\n   */\n  function massNotify (address [] _owners) public {\n    require (msg.sender == owner);\n    uint256 count = _owners.length;\n    for (uint256 i = 0; i < count; i++)\n      Transfer (address (0), _owners [i], VIRTUAL_COUNT);\n  }\n\n  /**\n   * Kill this smart contract.\n   */\n  function kill () public {\n    require (msg.sender == owner);\n    selfdestruct (owner);\n  }\n\n  /**\n   * Change owner of the smart contract.\n   *\n   * @param _owner address of a new owner of the smart contract\n   */\n  function changeOwner (address _owner) public {\n    require (msg.sender == owner);\n\n    owner = _owner;\n  }\n\n  /**\n   * Get virtual balance of the owner of given address.\n   *\n   * @param _owner address to get virtual balance for the owner of\n   * @return virtual balance of the owner of given address\n   */\n  function virtualBalanceOf (address _owner)\n  internal view returns (uint256 _virtualBalance) {\n    return addressSet.contains (_owner) ? VIRTUAL_COUNT : 0;\n  }\n\n  /**\n   * Address of the owner of this smart contract.\n   */\n  address internal owner;\n\n  /**\n   * Address set of addresses that are eligible for initial balance.\n   */\n  AddressSet internal addressSet;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressSet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061137e8339810160405280805190602001909190505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062989680600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611259806101256000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d5780630e6848cc146101a757806318160ddd1461020157806323b872dd1461022a578063313ce567146102a357806341c0e1b5146102d257806370a08231146102e757806395d89b4114610334578063a6f9dae1146103c2578063a9059cbb146103fb578063dd62ed3e14610455575b600080fd5b34156100ca57600080fd5b6100d26104c1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610504565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ff6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506105f6565b005b341561020c57600080fd5b6102146106f6565b6040518082815260200191505060405180910390f35b341561023557600080fd5b610289600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610700565b604051808215151515815260200191505060405180910390f35b34156102ae57600080fd5b6102b6610754565b604051808260ff1660ff16815260200191505060405180910390f35b34156102dd57600080fd5b6102e561075c565b005b34156102f257600080fd5b61031e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107f3565b6040518082815260200191505060405180910390f35b341561033f57600080fd5b61034761086e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038757808201518184015260208101905061036c565b50505050905090810190601f1680156103b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103cd57600080fd5b6103f9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108b1565b005b341561040657600080fd5b61043b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610951565b604051808215151515815260200191505060405180910390f35b341561046057600080fd5b6104ab600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610989565b6040518082815260200191505060405180910390f35b6104c9611219565b6040805190810160405280600781526020017f50726f6d6f646c00000000000000000000000000000000000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561065557600080fd5b82519150600090505b818110156106f157828181518110151561067457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60056040518082815260200191505060405180910390a3808060010191505061065e565b505050565b6000600254905090565b600061070c8433610989565b82111561071c576000905061074d565b610725846107f3565b821115610735576000905061074d565b61073f8483610a10565b61074a848484610b32565b90505b9392505050565b600080905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107b857600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60006108677f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541661086284610e2e565b610ef0565b9050919050565b610876611219565b6040805190810160405280600481526020017f504d4f4400000000000000000000000000000000000000000000000000000000815250905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561090d57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061095c336107f3565b82111561096c5760009050610983565b6109763383610a10565b6109808383610f2b565b90505b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060007f800000000000000000000000000000000000000000000000000000000000000083161415610b2c5781831115610b2b57610a9084610e2e565b905080610a9d8484611109565b11151515610aaa57600080fd5b610ab48282610ef0565b7f8000000000000000000000000000000000000000000000000000000000000000176000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b2460025482610ef0565b6002819055505b5b50505050565b6000806000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915083821015610bc75760009250610e25565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610c195760009250610e25565b610c238285611109565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600084118015610cdf57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b15610dbb57610cee8185611109565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d786000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610ef0565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60008060007f80000000000000000000000000000000000000000000000000000000000000006000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205416141515610ea45760009150610eea565b610ead83611122565b9150610edb7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600254611109565b905080821115610ee9578091505b5b50919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311151515610f2057fe5b818301905092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f805760009150611102565b600083118015610fbc57508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561109857610fcb8184611109565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110556000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610ef0565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5092915050565b600081831015151561111757fe5b818303905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635dbe47e8836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156111e957600080fd5b6102c65a03f115156111fa57600080fd5b5050506040518051905061120f576000611212565b60055b9050919050565b6020604051908101604052806000815250905600a165627a7a723058202a0426c6c3cf4e625a3c5b9745a666499d20b3e5316724fd524a0bf30cc34c7c0029000000000000000000000000c78e210c0ee87e78b01759c3edd4c8aeab3a44a9",
  "constructorArguments": "000000000000000000000000c78e210c0ee87e78b01759c3edd4c8aeab3a44a9"
}