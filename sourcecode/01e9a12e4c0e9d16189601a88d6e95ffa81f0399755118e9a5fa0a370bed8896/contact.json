{
  "address": "0xd7657bdf782f43ba7f5f5e8456b481616e636ae9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Citizen",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*   gibmireinbier\n*   0xA4a799086aE18D7db6C4b57f496B081b44888888\n*   [emailÂ protected]\n*/\n\nlibrary Helper {\n    using SafeMath for uint256;\n\n    uint256 constant public ZOOM = 1000;\n    uint256 constant public SDIVIDER = 3450000;\n    uint256 constant public PDIVIDER = 3450000;\n    uint256 constant public RDIVIDER = 1580000;\n    // Starting LS price (SLP)\n    uint256 constant public SLP = 0.002 ether;\n    // Starting Added Time (SAT)\n    uint256 constant public SAT = 30; // seconds\n    // Price normalization (PN)\n    uint256 constant public PN = 777;\n    // EarlyIncome base\n    uint256 constant public PBASE = 13;\n    uint256 constant public PMULTI = 26;\n    uint256 constant public LBase = 15;\n\n    uint256 constant public ONE_HOUR = 3600;\n    uint256 constant public ONE_DAY = 24 * ONE_HOUR;\n    //uint256 constant public TIMEOUT0 = 3 * ONE_HOUR;\n    uint256 constant public TIMEOUT1 = 12 * ONE_HOUR;\n    \n    function bytes32ToString (bytes32 data)\n        public\n        pure\n        returns (string) \n    {\n        bytes memory bytesString = new bytes(32);\n        for (uint j=0; j<32; j++) {\n            byte char = byte(bytes32(uint(data) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[j] = char;\n            }\n        }\n        return string(bytesString);\n    }\n    \n    function uintToBytes32(uint256 n)\n        public\n        pure\n        returns (bytes32) \n    {\n        return bytes32(n);\n    }\n    \n    function bytes32ToUint(bytes32 n) \n        public\n        pure\n        returns (uint256) \n    {\n        return uint256(n);\n    }\n    \n    function stringToBytes32(string memory source) \n        public\n        pure\n        returns (bytes32 result) \n    {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function stringToUint(string memory source) \n        public\n        pure\n        returns (uint256)\n    {\n        return bytes32ToUint(stringToBytes32(source));\n    }\n    \n    function uintToString(uint256 _uint) \n        public\n        pure\n        returns (string)\n    {\n        return bytes32ToString(uintToBytes32(_uint));\n    }\n\n/*     \n    function getSlice(uint256 begin, uint256 end, string text) public pure returns (string) {\n        bytes memory a = new bytes(end-begin+1);\n        for(uint i = 0; i <= end - begin; i++){\n            a[i] = bytes(text)[i + begin - 1];\n        }\n        return string(a);    \n    }\n */\n    function validUsername(string _username)\n        public\n        pure\n        returns(bool)\n    {\n        uint256 len = bytes(_username).length;\n        // Im Raum [4, 18]\n        if ((len < 4) || (len > 18)) return false;\n        // Letzte Char != ' '\n        if (bytes(_username)[len-1] == 32) return false;\n        // Erste Char != '0'\n        return uint256(bytes(_username)[0]) != 48;\n    }\n\n    // Lottery Helper\n\n    // Seconds added per LT = SAT - ((Current no. of LT + 1) / SDIVIDER)^6\n    function getAddedTime(uint256 _rTicketSum, uint256 _tAmount)\n        public\n        pure\n        returns (uint256)\n    {\n        //Luppe = 10000 = 10^4\n        uint256 base = (_rTicketSum + 1).mul(10000) / SDIVIDER;\n        uint256 expo = base;\n        expo = expo.mul(expo).mul(expo); // ^3\n        expo = expo.mul(expo); // ^6\n        // div 10000^6\n        expo = expo / (10**24);\n\n        if (expo > SAT) return 0;\n        return (SAT - expo).mul(_tAmount);\n    }\n\n    function getNewEndTime(uint256 toAddTime, uint256 slideEndTime, uint256 fixedEndTime)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _slideEndTime = (slideEndTime).add(toAddTime);\n        uint256 timeout = _slideEndTime.sub(block.timestamp);\n        // timeout capped at TIMEOUT1\n        if (timeout > TIMEOUT1) timeout = TIMEOUT1;\n        _slideEndTime = (block.timestamp).add(timeout);\n        // Capped at fixedEndTime\n        if (_slideEndTime > fixedEndTime)  return fixedEndTime;\n        return _slideEndTime;\n    }\n\n    // get random in range [1, _range] with _seed\n    function getRandom(uint256 _seed, uint256 _range)\n        public\n        pure\n        returns(uint256)\n    {\n        if (_range == 0) return _seed;\n        return (_seed % _range) + 1;\n    }\n\n\n    function getEarlyIncomeMul(uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        // Early-Multiplier = 1 + PBASE / (1 + PMULTI * ((Current No. of LT)/RDIVIDER)^6)\n        uint256 base = _ticketSum * ZOOM / RDIVIDER;\n        uint256 expo = base.mul(base).mul(base); //^3\n        expo = expo.mul(expo) / (ZOOM**6); //^6\n        return (1 + PBASE / (1 + expo.mul(PMULTI)));\n    }\n\n    // get reveiced Tickets, based on current round ticketSum\n    function getTAmount(uint256 _ethAmount, uint256 _ticketSum) \n        public\n        pure\n        returns(uint256)\n    {\n        uint256 _tPrice = getTPrice(_ticketSum);\n        return _ethAmount.div(_tPrice);\n    }\n\n    // Lotto-Multiplier = 1 + LBase * (Current No. of Tickets / PDivider)^6\n    function getTMul(uint256 _ticketSum) // Unit Wei\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 base = _ticketSum * ZOOM / PDIVIDER;\n        uint256 expo = base.mul(base).mul(base);\n        expo = expo.mul(expo); // ^6\n        return 1 + expo.mul(LBase) / (10**18);\n    }\n\n    // get ticket price, based on current round ticketSum\n    //unit in ETH, no need / zoom^6\n    function getTPrice(uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 base = (_ticketSum + 1).mul(ZOOM) / PDIVIDER;\n        uint256 expo = base;\n        expo = expo.mul(expo).mul(expo); // ^3\n        expo = expo.mul(expo); // ^6\n        uint256 tPrice = SLP + expo / PN;\n        return tPrice;\n    }\n\n    // get weight of slot, chance to win grandPot\n    function getSlotWeight(uint256 _ethAmount, uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 _tAmount = getTAmount(_ethAmount, _ticketSum);\n        uint256 _tMul = getTMul(_ticketSum);\n        return (_tAmount).mul(_tMul);\n    }\n\n    // used to draw grandpot results\n    // weightRange = roundWeight * grandpot / (grandpot - initGrandPot)\n    // grandPot = initGrandPot + round investedSum(for grandPot)\n    function getWeightRange(uint256 grandPot, uint256 initGrandPot, uint256 curRWeight)\n        public\n        pure\n        returns(uint256)\n    {\n        //calculate round grandPot-investedSum\n        uint256 grandPotInvest = grandPot - initGrandPot;\n        if (grandPotInvest == 0) return 8;\n        uint256 zoomMul = grandPot * ZOOM / grandPotInvest;\n        uint256 weightRange = zoomMul * curRWeight / ZOOM;\n        if (weightRange < curRWeight) weightRange = curRWeight;\n        return weightRange;\n    }\n}\n\ninterface F2mInterface {\n    function joinNetwork(address[6] _contract) public;\n    // one time called\n    function disableRound0() public;\n    function activeBuy() public;\n    // Dividends from all sources (DApps, Donate ...)\n    function pushDividends() public payable;\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    //function reinvest() public;\n    //function buy() public payable;\n    function buyFor(address _buyer) public payable;\n    function sell(uint256 _tokenAmount) public;\n    function exit() public;\n    function devTeamWithdraw() public returns(uint256);\n    function withdrawFor(address sender) public returns(uint256);\n    function transfer(address _to, uint256 _tokenAmount) public returns(bool);\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    function setAutoBuy() public;\n    /*==========================================\n    =            public FUNCTIONS            =\n    ==========================================*/\n    // function totalEthBalance() public view returns(uint256);\n    function ethBalance(address _address) public view returns(uint256);\n    function myBalance() public view returns(uint256);\n    function myEthBalance() public view returns(uint256);\n\n    function swapToken() public;\n    function setNewToken(address _newTokenAddress) public;\n}\n\ninterface BankInterface {\n    function joinNetwork(address[6] _contract) public;\n    // Core functions\n    function pushToBank(address _player) public payable;\n}\n\n\ninterface DevTeamInterface {\n    function setF2mAddress(address _address) public;\n    function setLotteryAddress(address _address) public;\n    function setCitizenAddress(address _address) public;\n    function setBankAddress(address _address) public;\n    function setRewardAddress(address _address) public;\n    function setWhitelistAddress(address _address) public;\n\n    function setupNetwork() public;\n}\n\ninterface LotteryInterface {\n    function joinNetwork(address[6] _contract) public;\n    // call one time\n    function activeFirstRound() public;\n    // Core Functions\n    function pushToPot() public payable;\n    function finalizeable() public view returns(bool);\n    // bounty\n    function finalize() public;\n    function buy(string _sSalt) public payable;\n    function buyFor(string _sSalt, address _sender) public payable;\n    //function withdraw() public;\n    function withdrawFor(address _sender) public returns(uint256);\n\n    function getRewardBalance(address _buyer) public view returns(uint256);\n    function getTotalPot() public view returns(uint256);\n    // EarlyIncome\n    function getEarlyIncomeByAddress(address _buyer) public view returns(uint256);\n    // included claimed amount\n    // function getEarlyIncomeByAddressRound(address _buyer, uint256 _rId) public view returns(uint256);\n    function getCurEarlyIncomeByAddress(address _buyer) public view returns(uint256);\n    // function getCurEarlyIncomeByAddressRound(address _buyer, uint256 _rId) public view returns(uint256);\n    function getCurRoundId() public view returns(uint256);\n    // set endRound, prepare to upgrade new version\n    function setLastRound(uint256 _lastRoundId) public;\n    function getPInvestedSumByRound(uint256 _rId, address _buyer) public view returns(uint256);\n    function cashoutable(address _address) public view returns(bool);\n    function isLastRound() public view returns(bool);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Citizen {\n    using SafeMath for uint256;\n\n    event Register(address indexed _member, address indexed _ref);\n\n    modifier withdrawRight(){\n        require((msg.sender == address(bankContract)), \"Bank only\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == devTeam, \"admin required\");\n        _;\n    }\n\n    modifier notRegistered(){\n        require(!isCitizen[msg.sender], \"already exist\");\n        _;\n    }\n\n    modifier registered(){\n        require(isCitizen[msg.sender], \"must be a citizen\");\n        _;\n    }\n\n    struct Profile{\n        uint256 id;\n        uint256 username;\n        uint256 refWallet;\n        address ref;\n        address[] refTo;\n        uint256 totalChild;\n        uint256 donated;\n        uint256 treeLevel;\n        // logs\n        uint256 totalSale;\n        uint256 allRoundRefIncome;\n        mapping(uint256 => uint256) roundRefIncome;\n        mapping(uint256 => uint256) roundRefWallet;\n    }\n\n    //bool public oneWayTicket = true;\n    mapping (address => Profile) public citizen;\n    mapping (address => bool) public isCitizen;\n    mapping (uint256 => address) public idAddress;\n    mapping (uint256 => address) public usernameAddress;\n\n    mapping (uint256 => address[]) levelCitizen;\n\n    BankInterface bankContract;\n    LotteryInterface lotteryContract;\n    F2mInterface f2mContract;\n    address devTeam;\n\n    uint256 citizenNr;\n    uint256 lastLevel;\n\n    // logs\n    mapping(uint256 => uint256) public totalRefByRound;\n    uint256 public totalRefAllround;\n\n    constructor (address _devTeam)\n        public\n    {\n        DevTeamInterface(_devTeam).setCitizenAddress(address(this));\n        devTeam = _devTeam;\n\n        // first citizen is the development team\n        citizenNr = 1;\n        idAddress[1] = devTeam;\n        isCitizen[devTeam] = true;\n        //root => self ref\n        citizen[devTeam].ref = devTeam;\n        // username rules bypass\n        uint256 _username = Helper.stringToUint(\"f2m\");\n        citizen[devTeam].username = _username;\n        usernameAddress[_username] = devTeam; \n        citizen[devTeam].id = 1;\n        citizen[devTeam].treeLevel = 1;\n        levelCitizen[1].push(devTeam);\n        lastLevel = 1;\n    }\n\n    // _contract = [f2mAddress, bankAddress, citizenAddress, lotteryAddress, rewardAddress, whitelistAddress];\n    function joinNetwork(address[6] _contract)\n        public\n    {\n        require(address(lotteryContract) == 0,\"already setup\");\n        f2mContract = F2mInterface(_contract[0]);\n        bankContract = BankInterface(_contract[1]);\n        lotteryContract = LotteryInterface(_contract[3]);\n    }\n\n    /*----------  WRITE FUNCTIONS  ----------*/\n    function updateTotalChild(address _address)\n        private\n    {\n        address _member = _address;\n        while(_member != devTeam) {\n            _member = getRef(_member);\n            citizen[_member].totalChild ++;\n        }\n    }\n\n    function register(string _sUsername, address _ref)\n        public\n        notRegistered()\n    {\n        require(Helper.validUsername(_sUsername), \"invalid username\");\n        address sender = msg.sender;\n        uint256 _username = Helper.stringToUint(_sUsername);\n        require(usernameAddress[_username] == 0x0, \"username already exist\");\n        usernameAddress[_username] = sender;\n        //ref must be a citizen, else ref = devTeam\n        address validRef = isCitizen[_ref] ? _ref : devTeam;\n\n        //Welcome new Citizen\n        isCitizen[sender] = true;\n        citizen[sender].username = _username;\n        citizen[sender].ref = validRef;\n        citizenNr++;\n\n        idAddress[citizenNr] = sender;\n        citizen[sender].id = citizenNr;\n        \n        uint256 refLevel = citizen[validRef].treeLevel;\n        if (refLevel == lastLevel) lastLevel++;\n        citizen[sender].treeLevel = refLevel + 1;\n        levelCitizen[refLevel + 1].push(sender);\n        //add child\n        citizen[validRef].refTo.push(sender);\n        updateTotalChild(sender);\n        emit Register(sender, validRef);\n    }\n\n    function updateUsername(string _sNewUsername)\n        public\n        registered()\n    {\n        require(Helper.validUsername(_sNewUsername), \"invalid username\");\n        address sender = msg.sender;\n        uint256 _newUsername = Helper.stringToUint(_sNewUsername);\n        require(usernameAddress[_newUsername] == 0x0, \"username already exist\");\n        uint256 _oldUsername = citizen[sender].username;\n        citizen[sender].username = _newUsername;\n        usernameAddress[_oldUsername] = 0x0;\n        usernameAddress[_newUsername] = sender;\n    }\n\n    //Sources: Token contract, DApps\n    function pushRefIncome(address _sender)\n        public\n        payable\n    {\n        uint256 curRoundId = lotteryContract.getCurRoundId();\n        uint256 _amount = msg.value;\n        address sender = _sender;\n        address ref = getRef(sender);\n        // logs\n        citizen[sender].totalSale += _amount;\n        totalRefAllround += _amount;\n        totalRefByRound[curRoundId] += _amount;\n        // push to root\n        // lower level cost less gas\n        while (sender != devTeam) {\n            _amount = _amount / 2;\n            citizen[ref].refWallet = _amount.add(citizen[ref].refWallet);\n            citizen[ref].roundRefIncome[curRoundId] += _amount;\n            citizen[ref].allRoundRefIncome += _amount;\n            sender = ref;\n            ref = getRef(sender);\n        }\n        citizen[sender].refWallet = _amount.add(citizen[ref].refWallet);\n        // devTeam Logs\n        citizen[sender].roundRefIncome[curRoundId] += _amount;\n        citizen[sender].allRoundRefIncome += _amount;\n    }\n\n    function withdrawFor(address sender) \n        public\n        withdrawRight()\n        returns(uint256)\n    {\n        uint256 amount = citizen[sender].refWallet;\n        if (amount == 0) return 0;\n        citizen[sender].refWallet = 0;\n        bankContract.pushToBank.value(amount)(sender);\n        return amount;\n    }\n\n    function devTeamWithdraw()\n        public\n        onlyAdmin()\n    {\n        uint256 _amount = citizen[devTeam].refWallet;\n        if (_amount == 0) return;\n        devTeam.transfer(_amount);\n        citizen[devTeam].refWallet = 0;\n    }\n\n    function devTeamReinvest()\n        public\n        returns(uint256)\n    {\n        address sender = msg.sender;\n        require(sender == address(f2mContract), \"only f2m contract\");\n        uint256 _amount = citizen[devTeam].refWallet;\n        citizen[devTeam].refWallet = 0;\n        address(f2mContract).transfer(_amount);\n        return _amount;\n    }\n\n    /*----------  READ FUNCTIONS  ----------*/\n\n    function getTotalChild(address _address)\n        public\n        view\n        returns(uint256)\n    {\n        return citizen[_address].totalChild;\n    }\n\n    function getAllRoundRefIncome(address _address)\n        public\n        view\n        returns(uint256)\n    {\n        return citizen[_address].allRoundRefIncome;\n    }\n\n    function getRoundRefIncome(address _address, uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return citizen[_address].roundRefIncome[_rId];\n    }\n\n    function getRefWallet(address _address)\n        public\n        view\n        returns(uint256)\n    {\n        return citizen[_address].refWallet;\n    }\n\n    function getAddressById(uint256 _id)\n        public\n        view\n        returns (address)\n    {\n        return idAddress[_id];\n    }\n\n    function getAddressByUserName(string _username)\n        public\n        view\n        returns (address)\n    {\n        return usernameAddress[Helper.stringToUint(_username)];\n    }\n\n    function exist(string _username)\n        public\n        view\n        returns (bool)\n    {\n        return usernameAddress[Helper.stringToUint(_username)] != 0x0;\n    }\n\n    function getId(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return citizen[_address].id;\n    }\n\n    function getUsername(address _address)\n        public\n        view\n        returns (string)\n    {\n        if (!isCitizen[_address]) return \"\";\n        return Helper.uintToString(citizen[_address].username);\n    }\n\n    function getUintUsername(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return citizen[_address].username;\n    }\n\n    function getRef(address _address)\n        public\n        view\n        returns (address)\n    {\n        return citizen[_address].ref == 0x0 ? devTeam : citizen[_address].ref;\n    }\n\n    function getRefTo(address _address)\n        public\n        view\n        returns (address[])\n    {\n        return citizen[_address].refTo;\n    }\n\n    function getRefToById(address _address, uint256 _id)\n        public\n        view\n        returns (address, string, uint256, uint256, uint256, uint256)\n    {\n        address _refTo = citizen[_address].refTo[_id];\n        return (\n            _refTo,\n            Helper.uintToString(citizen[_refTo].username),\n            citizen[_refTo].treeLevel,\n            citizen[_refTo].refTo.length,\n            citizen[_refTo].refWallet,\n            citizen[_refTo].totalSale\n            );\n    }\n\n    function getRefToLength(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return citizen[_address].refTo.length;\n    }\n\n    function getLevelCitizenLength(uint256 _level)\n        public\n        view\n        returns (uint256)\n    {\n        return levelCitizen[_level].length;\n    }\n\n    function getLevelCitizenById(uint256 _level, uint256 _id)\n        public\n        view\n        returns (address)\n    {\n        return levelCitizen[_level][_id];\n    }\n\n    function getCitizenLevel(address _address)\n        public\n        view\n        returns (uint256)\n    {\n        return citizen[_address].treeLevel;\n    }\n\n    function getLastLevel()\n        public\n        view\n        returns(uint256)\n    {\n        return lastLevel;\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000096504e1f83e380984b1d4eccc0e8b9f0559b2ad2",
  "libraries": [
    {
      "name": "Helper",
      "address": "0x7d04e6ef521ac2de68ed92318cde4f7332b2c2a7"
    }
  ]
}