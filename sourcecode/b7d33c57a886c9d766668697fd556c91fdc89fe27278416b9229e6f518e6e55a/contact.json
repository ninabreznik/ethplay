{
  "address": "0xdbf780f836d8a22b56acf9fd266171faff31f521",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PassportFactory",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-19\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC223 compatible tokens\n  * @param _from address The address that is transferring the tokens\n  * @param _value uint256 the amount of the specified token\n  * @param _data Bytes The data passed from the caller.\n  */\n  function tokenFallback(\n    address _from,\n    uint256 _value,\n    bytes _data\n  )\n    external\n    pure\n  {\n    _from;\n    _value;\n    _data;\n    revert();\n  }\n\n}\n\n// File: contracts/ownership/OwnableProxy.sol\n\n/**\n * @title OwnableProxy\n */\ncontract OwnableProxy {\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Storage slot with the owner of the contract.\n     * This is the keccak-256 hash of \"org.monetha.proxy.owner\", and is\n     * validated in the constructor.\n     */\n    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;\n\n    /**\n     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        assert(OWNER_SLOT == keccak256(\"org.monetha.proxy.owner\"));\n\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _getOwner());\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(_getOwner());\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(_getOwner(), _newOwner);\n        _setOwner(_newOwner);\n    }\n\n    /**\n     * @return The owner address.\n     */\n    function owner() public view returns (address) {\n        return _getOwner();\n    }\n\n    /**\n     * @return The owner address.\n     */\n    function _getOwner() internal view returns (address own) {\n        bytes32 slot = OWNER_SLOT;\n        assembly {\n            own := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Sets the address of the proxy owner.\n     * @param _newOwner Address of the new proxy owner.\n     */\n    function _setOwner(address _newOwner) internal {\n        bytes32 slot = OWNER_SLOT;\n\n        assembly {\n            sstore(slot, _newOwner)\n        }\n    }\n}\n\n// File: contracts/ownership/ClaimableProxy.sol\n\n/**\n * @title ClaimableProxy\n * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract ClaimableProxy is OwnableProxy {\n    /**\n     * @dev Storage slot with the pending owner of the contract.\n     * This is the keccak-256 hash of \"org.monetha.proxy.pendingOwner\", and is\n     * validated in the constructor.\n     */\n    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;\n\n    /**\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\n     */\n    constructor() public {\n        assert(PENDING_OWNER_SLOT == keccak256(\"org.monetha.proxy.pendingOwner\"));\n    }\n\n    function pendingOwner() public view returns (address) {\n        return _getPendingOwner();\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _getPendingOwner());\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _setPendingOwner(newOwner);\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(_getOwner(), _getPendingOwner());\n        _setOwner(_getPendingOwner());\n        _setPendingOwner(address(0));\n    }\n\n    /**\n     * @return The pending owner address.\n     */\n    function _getPendingOwner() internal view returns (address penOwn) {\n        bytes32 slot = PENDING_OWNER_SLOT;\n        assembly {\n            penOwn := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Sets the address of the pending owner.\n     * @param _newPendingOwner Address of the new pending owner.\n     */\n    function _setPendingOwner(address _newPendingOwner) internal {\n        bytes32 slot = PENDING_OWNER_SLOT;\n\n        assembly {\n            sstore(slot, _newPendingOwner)\n        }\n    }\n}\n\n// File: contracts/lifecycle/DestructibleProxy.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract DestructibleProxy is OwnableProxy {\n    /**\n     * @dev Transfers the current balance to the owner and terminates the contract.\n     */\n    function destroy() public onlyOwner {\n        selfdestruct(_getOwner());\n    }\n\n    function destroyAndSend(address _recipient) public onlyOwner {\n        selfdestruct(_recipient);\n    }\n}\n\n// File: contracts/IPassportLogicRegistry.sol\n\ninterface IPassportLogicRegistry {\n    /**\n     * @dev This event will be emitted every time a new passport logic implementation is registered\n     * @param version representing the version name of the registered passport logic implementation\n     * @param implementation representing the address of the registered passport logic implementation\n     */\n    event PassportLogicAdded(string version, address implementation);\n\n    /**\n     * @dev This event will be emitted every time a new passport logic implementation is set as current one\n     * @param version representing the version name of the current passport logic implementation\n     * @param implementation representing the address of the current passport logic implementation\n     */\n    event CurrentPassportLogicSet(string version, address implementation);\n\n    /**\n     * @dev Tells the address of the passport logic implementation for a given version\n     * @param _version to query the implementation of\n     * @return address of the passport logic implementation registered for the given version\n     */\n    function getPassportLogic(string _version) external view returns (address);\n\n    /**\n     * @dev Tells the version of the current passport logic implementation\n     * @return version of the current passport logic implementation\n     */\n    function getCurrentPassportLogicVersion() external view returns (string);\n\n    /**\n     * @dev Tells the address of the current passport logic implementation\n     * @return address of the current passport logic implementation\n     */\n    function getCurrentPassportLogic() external view returns (address);\n}\n\n// File: contracts/upgradeability/Proxy.sol\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\ncontract Proxy {\n    /**\n     * @dev Fallback function.\n     * Implemented entirely in `_fallback`.\n     */\n    function () payable external {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @return The Address of the implementation.\n     */\n    function _implementation() internal view returns (address);\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * This is a low level function that doesn't return to its internal call site.\n     * It will return to the external caller whatever the implementation returns.\n     * @param implementation Address to delegate.\n     */\n    function _delegate(address implementation) internal {\n        assembly {\n        // Copy msg.data. We take full control of memory in this inline assembly\n        // block because it will not return to Solidity code. We overwrite the\n        // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize)\n\n        // Call the implementation.\n        // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n        // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize) }\n            default { return(0, returndatasize) }\n        }\n    }\n}\n\n// File: contracts/Passport.sol\n\n/**\n * @title Passport\n */\ncontract Passport is Proxy, ClaimableProxy, DestructibleProxy {\n\n    event PassportLogicRegistryChanged(\n        address indexed previousRegistry,\n        address indexed newRegistry\n    );\n\n    /**\n     * @dev Storage slot with the address of the current registry of the passport implementations.\n     * This is the keccak-256 hash of \"org.monetha.passport.proxy.registry\", and is\n     * validated in the constructor.\n     */\n    bytes32 private constant REGISTRY_SLOT = 0xa04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4a;\n\n    /**\n     * @dev Contract constructor.\n     * @param _registry Address of the passport implementations registry.\n     */\n    constructor(IPassportLogicRegistry _registry) public {\n        assert(REGISTRY_SLOT == keccak256(\"org.monetha.passport.proxy.registry\"));\n\n        _setRegistry(_registry);\n    }\n\n    /**\n     * @return the address of passport logic registry.\n     */\n    function getPassportLogicRegistry() public view returns (address) {\n        return _getRegistry();\n    }\n\n    /**\n     * @dev Returns the current passport logic implementation (used in Proxy fallback function to delegate call\n     * to passport logic implementation).\n     * @return Address of the current passport implementation\n     */\n    function _implementation() internal view returns (address) {\n        return _getRegistry().getCurrentPassportLogic();\n    }\n\n    /**\n     * @dev Returns the current passport implementations registry.\n     * @return Address of the current implementation\n     */\n    function _getRegistry() internal view returns (IPassportLogicRegistry reg) {\n        bytes32 slot = REGISTRY_SLOT;\n        assembly {\n            reg := sload(slot)\n        }\n    }\n\n    function _setRegistry(IPassportLogicRegistry _registry) internal {\n        require(address(_registry) != 0x0, \"Cannot set registry to a zero address\");\n\n        bytes32 slot = REGISTRY_SLOT;\n        assembly {\n            sstore(slot, _registry)\n        }\n    }\n}\n\n// File: contracts/PassportFactory.sol\n\n/**\n * @title PassportFactory\n * @dev This contract works as a passport factory.\n */\ncontract PassportFactory is Ownable, HasNoEther, HasNoTokens {\n    IPassportLogicRegistry private registry;\n\n    /**\n    * @dev This event will be emitted every time a new passport is created\n    * @param passport representing the address of the passport created\n    * @param owner representing the address of the passport owner\n    */\n    event PassportCreated(address indexed passport, address indexed owner);\n\n    /**\n    * @dev This event will be emitted every time a passport logic registry is changed\n    * @param oldRegistry representing the address of the old passport logic registry\n    * @param newRegistry representing the address of the new passport logic registry\n    */\n    event PassportLogicRegistryChanged(address indexed oldRegistry, address indexed newRegistry);\n\n    constructor(IPassportLogicRegistry _registry) public {\n        _setRegistry(_registry);\n    }\n\n    function setRegistry(IPassportLogicRegistry _registry) public onlyOwner {\n        emit PassportLogicRegistryChanged(registry, _registry);\n        _setRegistry(_registry);\n    }\n\n    function getRegistry() external view returns (address) {\n        return registry;\n    }\n\n    /**\n    * @dev Creates new passport. The method should be called by the owner of the created passport.\n    * After the passport is created, the owner must call the claimOwnership() passport method to become a full owner.\n    * @return address of the created passport\n    */\n    function createPassport() public returns (Passport) {\n        Passport pass = new Passport(registry);\n        pass.transferOwnership(msg.sender); // owner needs to call claimOwnership()\n        emit PassportCreated(pass, msg.sender);\n        return pass;\n    }\n\n    function _setRegistry(IPassportLogicRegistry _registry) internal {\n        require(address(_registry) != 0x0);\n        registry = _registry;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPassport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"passport\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PassportCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"PassportLogicRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610e48833981016040525160008054600160a060020a03191633179055341561003f57600080fd5b61005181640100000000610057810204565b5061008e565b600160a060020a038116151561006c57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b610dab8061009d6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317ffc32081146100a75780632ec0faad146100ca5780635ab1bd53146100fb578063715018a6146101105780638da5cb5b146101255780639f727c271461013a578063a91ee0dc1461014f578063c0ee0b8a14610170578063f2fde38b146101a1575b3480156100a457600080fd5b50005b3480156100b357600080fd5b506100c8600160a060020a03600435166101c2565b005b3480156100d657600080fd5b506100df61028e565b60408051600160a060020a039092168252519081900360200190f35b34801561010757600080fd5b506100df61038c565b34801561011c57600080fd5b506100c861039b565b34801561013157600080fd5b506100df610407565b34801561014657600080fd5b506100c8610416565b34801561015b57600080fd5b506100c8600160a060020a036004351661046b565b34801561017c57600080fd5b506100c860048035600160a060020a03169060248035916044359182019101356104c5565b3480156101ad57600080fd5b506100c8600160a060020a03600435166104ca565b60008054600160a060020a031633146101da57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561023b57600080fd5b505af115801561024f573d6000803e3d6000fd5b505050506040513d602081101561026557600080fd5b505160005490915061028a90600160a060020a0384811691168363ffffffff6104ea16565b5050565b6001546000908190600160a060020a03166102a7610663565b600160a060020a03909116815260405190819003602001906000f0801580156102d4573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529051919250600160a060020a0383169163f2fde38b9160248082019260009290919082900301818387803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b5050604051339250600160a060020a03841691507f03f096f07a4d27c54645fa682640d44179c821150e16c48b27130ca928fa937c90600090a3919050565b600154600160a060020a031690565b600054600160a060020a031633146103b257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a0316331461042d57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610468573d6000803e3d6000fd5b50565b600054600160a060020a0316331461048257600080fd5b600154604051600160a060020a038084169216907f5c2abfd67230c0e47d6de28402bfe206c7a57283cba891416ed657fd70a714c290600090a3610468816105a2565b600080fd5b600054600160a060020a031633146104e157600080fd5b610468816105e6565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b5051151561059d57600080fd5b505050565b600160a060020a03811615156105b757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03811615156105fb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60405161070c80610674833901905600608060405234801561001057600080fd5b5060405160208061070c83398101604081815291517f6f72672e6d6f6e657468612e70726f78792e6f776e6572000000000000000000825291519081900360170190206000805160206106cc8339815191521461006957fe5b61007b3364010000000061015b810204565b604080517f6f72672e6d6f6e657468612e70726f78792e70656e64696e674f776e657200008152905190819003601e0190207fcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52146100d557fe5b604080517f6f72672e6d6f6e657468612e70617373706f72742e70726f78792e726567697381527f7472790000000000000000000000000000000000000000000000000000000000602082015290519081900360230190206000805160206106ec8339815191521461014357fe5b6101558164010000000061016d810204565b5061021f565b6000805160206106cc83398151915255565b6000600160a060020a038216151561020c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f43616e6e6f742073657420726567697374727920746f2061207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b506000805160206106ec83398151915255565b61049e8061022e6000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634e71e0c8811461009f578063715018a6146100b457806383197ef0146100c957806386d5c5f9146100de5780638da5cb5b1461010f578063e30c397814610124578063f2fde38b14610139578063f5074f411461015a575b61009d61009861017b565b61020c565b005b3480156100ab57600080fd5b5061009d610230565b3480156100c057600080fd5b5061009d6102b6565b3480156100d557600080fd5b5061009d610319565b3480156100ea57600080fd5b506100f3610348565b60408051600160a060020a039092168252519081900360200190f35b34801561011b57600080fd5b506100f3610357565b34801561013057600080fd5b506100f3610361565b34801561014557600080fd5b5061009d600160a060020a036004351661036b565b34801561016657600080fd5b5061009d600160a060020a0360043516610393565b60006101856103bb565b600160a060020a031663609725ef6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101db57600080fd5b505af11580156101ef573d6000803e3d6000fd5b505050506040513d602081101561020557600080fd5b5051905090565b3660008037600080366000845af43d6000803e80801561022b573d6000f35b3d6000fd5b6102386103e0565b600160a060020a0316331461024c57600080fd5b6102546103e0565b600160a060020a0316610265610405565b600160a060020a03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36102aa6102a56103e0565b61042a565b6102b4600061044e565b565b6102be610405565b600160a060020a031633146102d257600080fd5b6102da610405565b600160a060020a03167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26102b4600061042a565b610321610405565b600160a060020a0316331461033557600080fd5b61033d610405565b600160a060020a0316ff5b60006103526103bb565b905090565b6000610352610405565b60006103526103e0565b610373610405565b600160a060020a0316331461038757600080fd5b6103908161044e565b50565b61039b610405565b600160a060020a031633146103af57600080fd5b80600160a060020a0316ff5b7fa04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4a5490565b7fcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb525490565b7f3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d225490565b7f3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d2255565b7fcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52555600a165627a7a723058202724da065fd894729415db8f3b6c154e024f0d85fb7ba77d55a1f929fa633a1300293ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22a04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4aa165627a7a723058205953a416758f83afc9cfcc97c88e1bc2904703cd3b8437e76c64f54b82c7baf8002900000000000000000000000041c32a8387ff178659ed9b04190613623f545657",
  "constructorArguments": "00000000000000000000000041c32a8387ff178659ed9b04190613623f545657"
}