{
  "address": "0x9766a5a384c1efb9f58aaf687bef00ea96442575",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartMMM",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\n/**\n* start 21.11.18\n*\n* ███─█───█─████─████─███─█───█─█───█─█───█───████─████─█───█\n* █───██─██─█──█─█──█──█──██─██─██─██─██─██───█──█─█──█─██─██\n* ███─█─█─█─████─████──█──█─█─█─█─█─█─█─█─█───█────█──█─█─█─█\n* ──█─█───█─█──█─█─█───█──█───█─█───█─█───█───█──█─█──█─█───█\n* ███─█───█─█──█─█─█───█──█───█─█───█─█───█─█─████─████─█───█\n*\n*\n* - Contacts:\n*     -- t.me/Smart_MMM\n*     -- https://SmartMMM.com\n*\n* - GAIN PER 24 HOURS:\n*     -- Contract balance <   25 Ether:          1.0%\n*     -- Contract balance >= 25 Ether:              1.5%\n*     -- Contract balance >= 250 Ether:                2.0%\n*     -- Contract balance >= 2500 Ether:                  2.5% max!\n*     -- Contract balance >= 10000 Ether:              2.0%\n*     -- Contract balance >= 20000 Ether:           1.5%\n*     -- Contract balance >= 30000 Ether:       1.0%\n*     -- Contract balance >= 40000 Ether:      0.8%\n*     -- Contract balance >= 50000 Ether:     0.6%\n*     -- Contract balance >= 60000 Ether:    0.4%\n*     -- Contract balance >= 70000 Ether:   0.2%\n*     -- Contract balance >= 100000 Ether:  0.1%\n*\n*     -- Contract balance < 30% max Balance: \"soft restart\"\n*\n* - Minimal contribution 0.01 eth\n*\n* - Contribution allocation schemes:\n*    -- 90-95% payments to depositors and partners\n*    -- 1-3% technical support team\n*    -- 3-7% promotion\n*   depends on the contract balance. more on the website SmartMMM.com\n*\n* - How to use:\n*  1. Send from your personal ETH wallet to the smart-contract address any amount more than or equal to 0.01 ETH\n*  2. Add your refferer's wallet to a HEX data in your transaction to\n*      get a bonus amount back to your wallet\n*      if there is no referrer, you will not get any bonuses\n*  3. Use etherscan.io to verify your transaction\n*  4. Claim your dividents by sending 0 ether transaction (available anytime)\n*  5. You can reinvest anytime you want\n*\n* Smart contract has a \"soft restart\" function, details on smartMMM.com\n*\n* If you want to check your dividends, you can use etherscan.io site I / o by following the\" internal Txns \" tab of your wallet\n* Attention: do not use wallets exchanges - you will lose your money. Use your personal wallet only for transactions\n*\n* RECOMMENDED GAS LIMIT: 300000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract SmartMMM is Ownable\n{\n    struct DepositItem {\n        uint time;\n        uint sum;\n        uint withdrawalTime;\n        uint restartIndex;\n        uint invested;\n        uint payments;\n        uint referralPayments;\n        uint cashback;\n        uint referalsLevelOneCount;\n        uint referalsLevelTwoCount;\n        address referrerLevelOne;\n        address referrerLevelTwo;\n    }\n\n    address public techSupport = 0x799358af628240603A1ce05b7D9ea211b9D64304;\n    address public adsSupport = 0x8Fa6E56c844be9B96C30B72cC2a8ccF6465a99F9;\n\n    mapping(address => DepositItem) public deposits;\n    mapping(address => bool) public referrers;\n    mapping(address => uint) public waitingReferrers;\n\n    uint public referrerPrice = 70700000000000000; // 0.0707 ether\n    uint public referrerBeforeEndTime = 0;\n    uint public maxBalance = 0;\n    uint public invested;\n    uint public payments;\n    uint public referralPayments;\n    uint public investorsCount;\n    uint[] public historyOfRestarts;\n\n    event Deposit(address indexed from, uint256 value);\n    event Withdraw(address indexed to, uint256 value);\n    event PayBonus(address indexed to, uint256 value);\n\n    constructor () public\n    {\n        historyOfRestarts.push(now);\n    }\n\n\n    function bytesToAddress(bytes source) private pure returns(address parsedAddress)\n    {\n        assembly {\n            parsedAddress := mload(add(source,0x14))\n        }\n        return parsedAddress;\n    }\n\n    function getPercents(uint balance) public pure returns(uint depositPercent, uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent, uint techSupportPercent, uint adsSupportPercent)\n    {\n        if(balance < 25 ether) return (69444444444, 90, 10, 20, 30, 60);\n        else if(balance >= 25 ether && balance < 250 ether) return (104166666667, 80, 10, 20, 30, 60);\n        else if(balance >= 250 ether && balance < 2500 ether ) return (138888888889, 70, 10, 20, 30, 60);\n        else if(balance >= 2500 ether && balance < 10000 ether) return (173611111111, 60, 10, 20, 30, 60);\n        else if(balance >= 10000 ether && balance < 20000 ether) return (138888888889, 50, 10, 15, 25, 50);\n        else if(balance >= 20000 ether && balance < 30000 ether) return (104166666667, 40, 5, 15, 25, 50);\n        else if(balance >= 30000 ether && balance < 40000 ether) return (69444444444, 30, 5, 10, 20, 40);\n        else if(balance >= 40000 ether && balance < 50000 ether) return (55555555555, 20, 5, 5, 20, 40);\n        else if(balance >= 50000 ether && balance < 60000 ether) return (416666666667, 10, 5, 5, 15, 30);\n        else if(balance >= 60000 ether && balance < 70000 ether) return (277777777778, 8, 3, 3, 10, 20);\n        else if(balance >= 70000 ether && balance < 100000 ether) return (138888888889, 5, 2, 2, 10, 20);\n        else return (6944444444, 0, 0, 0, 10, 10);\n    }\n\n    function () public payable\n    {\n        uint balance = address(this).balance;\n        (uint depositPercent, uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent, uint techSupportPercent, uint adsSupportPercent) = getPercents(balance);\n\n        if(msg.value == 0)\n        {\n            payWithdraw(msg.sender, balance, depositPercent);\n            return;\n        }\n\n        if(msg.value == referrerPrice && !referrers[msg.sender] && waitingReferrers[msg.sender] == 0 && deposits[msg.sender].sum != 0)\n        {\n            waitingReferrers[msg.sender] = now;\n        }\n        else\n        {\n            addDeposit(msg.sender, msg.value, balance, referrerLevelOnePercent, referrerLevelTwoPercent, cashBackPercent, depositPercent, techSupportPercent, adsSupportPercent);\n        }\n    }\n\n    function isNeedRestart(uint balance) public returns (bool)\n    {\n        if(balance < maxBalance / 100 * 30) {\n            maxBalance = 0;\n            return true;\n        }\n        return false;\n    }\n\n    function calculateNewTime(uint oldTime, uint oldSum, uint newSum, uint currentTime) public pure returns (uint)\n    {\n        return oldTime + newSum / (newSum + oldSum) * (currentTime - oldTime);\n    }\n\n    function calculateNewDepositSum(uint minutesBetweenRestart, uint minutesWork, uint depositSum) public pure returns (uint)\n    {\n        if(minutesWork > minutesBetweenRestart) minutesWork = minutesBetweenRestart;\n        return (depositSum *(100-(uint(minutesWork) * 100 / minutesBetweenRestart)+7)/100);\n    }\n\n    function addDeposit(address investorAddress, uint weiAmount, uint balance, uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent, uint depositPercent, uint techSupportPercent, uint adsSupportPercent) private\n    {\n        checkReferrer(investorAddress, weiAmount, referrerLevelOnePercent, referrerLevelTwoPercent, cashBackPercent);\n        DepositItem memory deposit = deposits[investorAddress];\n        if(deposit.sum == 0)\n        {\n            deposit.time = now;\n            investorsCount++;\n        }\n        else\n        {\n            uint sum = getWithdrawSum(investorAddress, depositPercent);\n            deposit.sum += sum;\n            deposit.time = calculateNewTime(deposit.time, deposit.sum, weiAmount, now);\n        }\n        deposit.withdrawalTime = now;\n        deposit.sum += weiAmount;\n        deposit.restartIndex = historyOfRestarts.length - 1;\n        deposit.invested += weiAmount;\n        deposits[investorAddress] = deposit;\n\n        emit Deposit(investorAddress, weiAmount);\n\n        payToSupport(weiAmount, techSupportPercent, adsSupportPercent);\n\n        if (maxBalance < balance) {\n            maxBalance = balance;\n        }\n        invested += weiAmount;\n    }\n\n    function payToSupport(uint weiAmount, uint techSupportPercent, uint adsSupportPercent) private {\n        techSupport.transfer(weiAmount * techSupportPercent / 1000);\n        adsSupport.transfer(weiAmount * adsSupportPercent / 1000);\n    }\n\n    function checkReferrer(address investorAddress, uint weiAmount, uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent) private\n    {\n        address referrerLevelOneAddress = deposits[investorAddress].referrerLevelOne;\n        address referrerLevelTwoAddress = deposits[investorAddress].referrerLevelTwo;\n        if (deposits[investorAddress].sum == 0 && msg.data.length == 20) {\n            referrerLevelOneAddress = bytesToAddress(bytes(msg.data));\n            if (referrerLevelOneAddress != investorAddress && referrerLevelOneAddress != address(0)) {\n                if (referrers[referrerLevelOneAddress] || waitingReferrers[referrerLevelOneAddress] != 0 && (now - waitingReferrers[referrerLevelOneAddress]) >= 7 days || now <= referrerBeforeEndTime) {\n                    deposits[investorAddress].referrerLevelOne = referrerLevelOneAddress;\n                    deposits[referrerLevelOneAddress].referalsLevelOneCount++;\n                    referrerLevelTwoAddress = deposits[referrerLevelOneAddress].referrerLevelOne;\n                    if (referrerLevelTwoAddress != investorAddress && referrerLevelTwoAddress != address(0)) {\n                        deposits[investorAddress].referrerLevelTwo = referrerLevelTwoAddress;\n                        deposits[referrerLevelTwoAddress].referalsLevelTwoCount++;\n                    }\n                }\n            }\n        }\n        if (referrerLevelOneAddress != address(0)) {\n            uint cashBackBonus = weiAmount * cashBackPercent / 1000;\n            uint referrerLevelOneBonus = weiAmount * referrerLevelOnePercent / 1000;\n\n            emit PayBonus(investorAddress, cashBackBonus);\n            emit PayBonus(referrerLevelOneAddress, referrerLevelOneBonus);\n\n            referralPayments += referrerLevelOneBonus;\n            deposits[referrerLevelOneAddress].referralPayments += referrerLevelOneBonus;\n            referrerLevelOneAddress.transfer(referrerLevelOneBonus);\n\n            deposits[investorAddress].cashback += cashBackBonus;\n            investorAddress.transfer(cashBackBonus);\n\n            if (referrerLevelTwoAddress != address(0)) {\n                uint referrerLevelTwoBonus = weiAmount * referrerLevelTwoPercent / 1000;\n                emit PayBonus(referrerLevelTwoAddress, referrerLevelTwoBonus);\n                referralPayments += referrerLevelTwoBonus;\n                deposits[referrerLevelTwoAddress].referralPayments += referrerLevelTwoBonus;\n                referrerLevelTwoAddress.transfer(referrerLevelTwoBonus);\n            }\n        }\n    }\n\n    function payWithdraw(address to, uint balance, uint percent) private\n    {\n        require(deposits[to].sum > 0);\n\n        if(isNeedRestart(balance))\n        {\n            historyOfRestarts.push(now);\n        }\n\n        uint lastRestartIndex = historyOfRestarts.length - 1;\n\n        if(lastRestartIndex - deposits[to].restartIndex >= 1)\n        {\n            uint minutesBetweenRestart = (historyOfRestarts[lastRestartIndex] - historyOfRestarts[deposits[to].restartIndex]) / 1 minutes;\n            uint minutesWork = (historyOfRestarts[lastRestartIndex] - deposits[to].time) / 1 minutes;\n            deposits[to].sum = calculateNewDepositSum(minutesBetweenRestart, minutesWork, deposits[to].sum);\n            deposits[to].restartIndex = lastRestartIndex;\n            deposits[to].time = now;\n        }\n\n        uint sum = getWithdrawSum(to, percent);\n        require(sum > 0);\n\n        deposits[to].withdrawalTime = now;\n        deposits[to].payments += sum;\n        payments += sum;\n        to.transfer(sum);\n\n        emit Withdraw(to, sum);\n    }\n\n    function getWithdrawSum(address investorAddress, uint percent) private view returns(uint sum) {\n        uint minutesCount = (now - deposits[investorAddress].withdrawalTime) / 1 minutes;\n        sum = deposits[investorAddress].sum * percent / 10000000000000000 * minutesCount;\n    }\n\n    function addReferrer(address referrerAddress) onlyOwner public\n    {\n        referrers[referrerAddress] = true;\n    }\n\n    function setReferrerPrice(uint newPrice) onlyOwner public\n    {\n        referrerPrice = newPrice;\n    }\n\n    function setReferrerBeforeEndTime(uint newTime) onlyOwner public\n    {\n        referrerBeforeEndTime = newTime;\n    }\n\n    function getDaysAfterStart() public constant returns(uint daysAfterStart) {\n        daysAfterStart = (now - historyOfRestarts[0]) / 1 days;\n    }\n\n    function getDaysAfterLastRestart() public constant returns(uint daysAfeterLastRestart) {\n        daysAfeterLastRestart = (now - historyOfRestarts[historyOfRestarts.length - 1]) / 1 days;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setReferrerBeforeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adsSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysAfterLastRestart\",\"outputs\":[{\"name\":\"daysAfeterLastRestart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getPercents\",\"outputs\":[{\"name\":\"depositPercent\",\"type\":\"uint256\"},{\"name\":\"referrerLevelOnePercent\",\"type\":\"uint256\"},{\"name\":\"referrerLevelTwoPercent\",\"type\":\"uint256\"},{\"name\":\"cashBackPercent\",\"type\":\"uint256\"},{\"name\":\"techSupportPercent\",\"type\":\"uint256\"},{\"name\":\"adsSupportPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerBeforeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"oldTime\",\"type\":\"uint256\"},{\"name\":\"oldSum\",\"type\":\"uint256\"},{\"name\":\"newSum\",\"type\":\"uint256\"},{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"calculateNewTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitingReferrers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyOfRestarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysAfterStart\",\"outputs\":[{\"name\":\"daysAfterStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"isNeedRestart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setReferrerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minutesBetweenRestart\",\"type\":\"uint256\"},{\"name\":\"minutesWork\",\"type\":\"uint256\"},{\"name\":\"depositSum\",\"type\":\"uint256\"}],\"name\":\"calculateNewDepositSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"name\":\"restartIndex\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"payments\",\"type\":\"uint256\"},{\"name\":\"referralPayments\",\"type\":\"uint256\"},{\"name\":\"cashback\",\"type\":\"uint256\"},{\"name\":\"referalsLevelOneCount\",\"type\":\"uint256\"},{\"name\":\"referalsLevelTwoCount\",\"type\":\"uint256\"},{\"name\":\"referrerLevelOne\",\"type\":\"address\"},{\"name\":\"referrerLevelTwo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260018054600160a060020a031990811673799358af628240603a1ce05b7d9ea211b9d643041790915560028054909116738fa6e56c844be9b96c30b72cc2a8ccf6465a99f917905566fb2d46819ec0006006556000600781905560085534801561006d57600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600d8054600181018255600091909152427fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910155611643806100fc6000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302b46399811461021757806309a506d7146102315780632469192b146102585780632b71105114610289578063435deeab1461029e5780634a3b68cc146102b35780635050dfd1146102e857806353e229f3146102fd5780636f8d285e14610348578063715018a61461035d57806373ad468a146103725780637ad55f6f14610387578063837ba619146103a85780638da5cb5b146103c95780638f32d59b146103de5780639e94f6e5146103f3578063a612ad1b1461040b578063a6d23e1014610420578063b891d4d814610435578063cafb22021461044d578063d459654a14610462578063dea0701314610477578063e846c42a1461048f578063f2fde38b146104ad578063fc7e286d146104ce578063fefa9bb11461055a575b3031600080808080806101658761057b565b955095509550955095509550346000141561018a5761018533888861089b565b61020e565b600654341480156101ab57503360009081526004602052604090205460ff16155b80156101c4575033600090815260056020526040902054155b80156101e157503360009081526003602052604090206001015415155b156101fd5733600090815260056020526040902042905561020e565b61020e3334898888888c8989610b03565b50505050505050005b34801561022357600080fd5b5061022f600435610d9a565b005b34801561023d57600080fd5b50610246610db2565b60408051918252519081900360200190f35b34801561026457600080fd5b5061026d610db8565b60408051600160a060020a039092168252519081900360200190f35b34801561029557600080fd5b50610246610dc7565b3480156102aa57600080fd5b50610246610dcd565b3480156102bf57600080fd5b506102d4600160a060020a0360043516610dd3565b604080519115158252519081900360200190f35b3480156102f457600080fd5b50610246610de8565b34801561030957600080fd5b5061031560043561057b565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b34801561035457600080fd5b50610246610e1e565b34801561036957600080fd5b5061022f610e24565b34801561037e57600080fd5b50610246610e8e565b34801561039357600080fd5b50610246600435602435604435606435610e94565b3480156103b457600080fd5b50610246600160a060020a0360043516610eb4565b3480156103d557600080fd5b5061026d610ec6565b3480156103ea57600080fd5b506102d4610ed5565b3480156103ff57600080fd5b50610246600435610ee6565b34801561041757600080fd5b50610246610f05565b34801561042c57600080fd5b50610246610f1b565b34801561044157600080fd5b506102d4600435610f21565b34801561045957600080fd5b50610246610f4b565b34801561046e57600080fd5b5061026d610f51565b34801561048357600080fd5b5061022f600435610f60565b34801561049b57600080fd5b50610246600435602435604435610f78565b3480156104b957600080fd5b5061022f600160a060020a0360043516610fb1565b3480156104da57600080fd5b506104ef600160a060020a0360043516610fd0565b604080519c8d5260208d019b909b528b8b019990995260608b019790975260808a019590955260a089019390935260c088019190915260e0870152610100860152610120850152600160a060020a039081166101408501521661016083015251908190036101800190f35b34801561056657600080fd5b5061022f600160a060020a036004351661103e565b60008060008060008068015af1d78b58c400008710156105b5575064102b36211c9450605a9350600a925060149150601e9050603c610892565b68015af1d78b58c4000087101580156105d65750680d8d726b7177a8000087105b156105fb5750641840d131ab945060509350600a925060149150601e9050603c610892565b680d8d726b7177a80000871015801561061c575068878678326eac90000087105b1561064157506420566c4239945060469350600a925060149150601e9050603c610892565b68878678326eac9000008710158015610663575069021e19e0c9bab240000087105b15610687575064286c0752c79450603c9350600a925060149150601e905083610892565b69021e19e0c9bab240000087101580156106aa575069043c33c193756480000087105b156106ce57506420566c4239945060329350600a9250600f91506019905083610892565b69043c33c193756480000087101580156106f1575069065a4da25d3016c0000087105b156107165750641840d131ab94506028935060059250600f9150601990506032610892565b69065a4da25d3016c0000087101580156107395750690878678326eac900000087105b1561075e575064102b36211c9450601e935060059250600a9150601490506028610892565b690878678326eac900000087101580156107815750690a968163f0a57b40000087105b156107a45750640cef5e80e3945060149350600592508291508390506028610892565b690a968163f0a57b40000087101580156107c75750690cb49b44ba602d80000087105b156107eb575064610344c6ab9450600a935060059250829150600f9050601e610892565b690cb49b44ba602d800000871015801561080e5750690ed2b525841adfc0000087105b1561083257506440acd8847294506008935060039250829150600a90506014610892565b690ed2b525841adfc000008710158015610855575069152d02c7e14af680000087105b1561087957506420566c423994506005935060029250829150600a90506014610892565b5064019debd01c945060009350839250829150600a9050805b91939550919395565b600160a060020a03831660009081526003602052604081206001015481908190819081106108c857600080fd5b6108d186610f21565b1561090d57600d8054600181018255600091909152427fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101555b600d54600160a060020a03881660009081526003602081905260409091200154600019808301965060019190920390910110610a4957600160a060020a03871660009081526003602081905260409091200154600d8054603c9290811061097057fe5b9060005260206000200154600d8681548110151561098a57fe5b90600052602060002001540381151561099f57fe5b600160a060020a038916600090815260036020526040902054600d8054939092049550603c92909190879081106109d257fe5b9060005260206000200154038115156109e757fe5b049150610a1d8383600360008b600160a060020a0316600160a060020a0316815260200190815260200160002060010154610f78565b600160a060020a0388166000908152600360208190526040909120600181019290925581018590554290555b610a538786611075565b905060008111610a6257600080fd5b600160a060020a038716600081815260036020526040808220426002820155600501805485019055600a8054850190555183156108fc0291849190818181858888f19350505050158015610aba573d6000803e3d6000fd5b50604080518281529051600160a060020a038916917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a250505050505050565b610b0b6115a3565b6000610b1a8b8b8a8a8a6110b6565b600160a060020a03808c1660009081526003602081815260409283902083516101808101855281548152600182015492810183905260028201549481019490945291820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548416610140840152600b9091015490921661016082015292501515610bd757428252600c80546001019055610c01565b610be18b86611075565b6020830180518201908190528351919250610bfe91908c42610e94565b82525b42826040018181525050898260200181815101915081815250506001600d80549050038260600181815250508982608001818151019150818152505081600360008d600160a060020a0316600160a060020a03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a815481600160a060020a030219169083600160a060020a0316021790555061016082015181600b0160006101000a815481600160a060020a030219169083600160a060020a031602179055509050508a600160a060020a03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8b6040518082815260200191505060405180910390a2610d748a858561149a565b886008541015610d845760088990555b5050600980549098019097555050505050505050565b610da2610ed5565b1515610dad57600080fd5b600755565b60065481565b600254600160a060020a031681565b600c5481565b600b5481565b60046020526000908152604090205460ff1681565b600d805460009162015180916000198101908110610e0257fe5b90600052602060002001544203811515610e1857fe5b04905090565b60075481565b610e2c610ed5565b1515610e3757600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60085481565b600084820384840184811515610ea657fe5b040285019050949350505050565b60056020526000908152604090205481565b600054600160a060020a031690565b600054600160a060020a0316331490565b600d805482908110610ef457fe5b600091825260209091200154905081565b600062015180600d6000815481101515610e0257fe5b600a5481565b60085460009060649004601e02821015610f42575060006008556001610f46565b5060005b919050565b60095481565b600154600160a060020a031681565b610f68610ed5565b1515610f7357600080fd5b600655565b600083831115610f86578392505b60648484606402811515610f9657fe5b046064036007018302811515610fa857fe5b04949350505050565b610fb9610ed5565b1515610fc457600080fd5b610fcd8161151f565b50565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460088801546009890154600a8a0154600b909a0154989a979997989697959694959394929391929091600160a060020a0390811691168c565b611046610ed5565b151561105157600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b600160a060020a039190911660009081526003602052604090206002810154600190910154603c429290920391909104662386f26fc1000091909202040290565b600160a060020a038086166000908152600360205260408120600a810154600b82015460019092015490841693919091169190819081901580156110fa5750601436145b156112a5576111396000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061159c945050505050565b945089600160a060020a031685600160a060020a0316141580156111655750600160a060020a03851615155b156112a557600160a060020a03851660009081526004602052604090205460ff16806111d35750600160a060020a038516600090815260056020526040902054158015906111d35750600160a060020a03851660009081526005602052604090205462093a80429190910310155b806111e057506007544211155b156112a557600160a060020a038a8116600081815260036020526040808220600a908101805473ffffffffffffffffffffffffffffffffffffffff19168b87169081179091558352912060088101805460010190550154909116945084148015906112535750600160a060020a03841615155b156112a557600160a060020a038a8116600090815260036020526040808220600b01805473ffffffffffffffffffffffffffffffffffffffff1916938816938417905591815220600901805460010190555b600160a060020a0385161561148e576103e88987020492506103e889890204915089600160a060020a03167f53b55e90aa175cc1aa7ede6d6e0ad8969802720232901850b35795d8a3f4a0bd846040518082815260200191505060405180910390a2604080518381529051600160a060020a038716917f53b55e90aa175cc1aa7ede6d6e0ad8969802720232901850b35795d8a3f4a0bd919081900360200190a2600b805483019055600160a060020a0385166000818152600360205260408082206006018054860190555184156108fc0291859190818181858888f19350505050158015611398573d6000803e3d6000fd5b50600160a060020a038a166000818152600360205260408082206007018054870190555185156108fc0291869190818181858888f193505050501580156113e3573d6000803e3d6000fd5b50600160a060020a0384161561148e5750604080516103e8888b02048082529151600160a060020a038616917f53b55e90aa175cc1aa7ede6d6e0ad8969802720232901850b35795d8a3f4a0bd919081900360200190a2600b805482019055600160a060020a0384166000818152600360205260408082206006018054850190555183156108fc0291849190818181858888f1935050505015801561148c573d6000803e3d6000fd5b505b50505050505050505050565b600154604051600160a060020a03909116906103e88486020480156108fc02916000818181858888f193505050501580156114d9573d6000803e3d6000fd5b50600254604051600160a060020a03909116906103e88386020480156108fc02916000818181858888f19350505050158015611519573d6000803e3d6000fd5b50505050565b600160a060020a038116151561153457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6014015190565b61018060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600160a060020a031681526020016000600160a060020a0316815250905600a165627a7a723058202cfaa7097dc8d4591ffd461c0cbb4014d2ea5102e85f51be5d64feab2f00131e0029"
}