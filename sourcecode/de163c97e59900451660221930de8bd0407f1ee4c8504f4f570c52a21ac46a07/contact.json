{
  "address": "0xb66a2131a6b840dd020151f80723caed603efb51",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NNBToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n  \n}\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() public view returns (uint256);\n\n    /// @param owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address owner) public view returns (uint256);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address to, uint256 value) public returns (bool);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address spender, uint256 value) public returns (bool);\n\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n}\n\ncontract StandardToken is Token {\n    using SafeMath for uint256;\n    \n    mapping (address => uint256) balances;\n    \n    mapping (address => mapping (address => uint256)) allowed;\n    \n    uint256 public totalSupply;\n    \n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= balances[msg.sender]);\n        require(to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= balances[from]);\n        require(value <= allowed[from][msg.sender]);\n        require(to != address(0));\n        \n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n    \n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return balances[owner];\n    }\n    \n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n      return allowed[owner][spender];\n    }\n    \n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n    function approve(address spender, uint256 value) public returns (bool success) {\n        require(spender != address(0));\n        \n        allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n}\n\ncontract Ownable {\n    address public owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        \n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n    \n}\n\ncontract NNBToken is StandardToken, Ownable {\n    string public constant name = \"NNB Token\";    //fancy name: eg Simon Bucks\n    string public constant symbol = \"NNB\";           //An identifier: eg SBX\n    uint8 public constant decimals = 18;            //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public constant version = \"H1.0\";        //human 0.1 standard. Just an arbitrary versioning scheme.\n    \n    mapping (address => uint256) lockedBalance;\n    mapping (address => uint256) releasedBalance;\n    mapping (address => TimeLock[]) public allocations;\n    \n    struct TimeLock {\n        uint time;\n        uint256 balance;\n    }\n    \n    uint256 public constant BASE_SUPPLY = 10 ** uint256(decimals);\n    uint256 public constant INITIAL_SUPPLY = 6 * (10 ** 9) * BASE_SUPPLY;    //initial total supply for six billion\n    \n    uint256 public constant noLockedOperatorSupply = INITIAL_SUPPLY / 100 * 2;  // no locked operator 2%\n    \n    uint256 public constant lockedOperatorSupply = INITIAL_SUPPLY / 100 * 18;  // locked operator 18%\n    uint256 public constant lockedInvestorSupply = INITIAL_SUPPLY / 100 * 10;  // locked investor 10%\n    uint256 public constant lockedTeamSupply = INITIAL_SUPPLY / 100 * 10;  // locked team 10%\n\n    uint256 public constant lockedPrivatorForBaseSupply = INITIAL_SUPPLY / 100 * 11;  // locked privator base 11%\n    uint256 public constant lockedPrivatorForEcologyPartOneSupply = INITIAL_SUPPLY / 100 * 8;  // locked privator ecology part one for 8%\n    uint256 public constant lockedPrivatorForEcologyPartTwoSupply = INITIAL_SUPPLY / 100 * 4;  // locked privator ecology part one for 4%\n    \n    uint256 public constant lockedPrivatorForFaithSupply = INITIAL_SUPPLY / 1000 * 11;  // locked privator faith 1.1%\n    uint256 public constant lockedPrivatorForDevelopSupply = INITIAL_SUPPLY / 1000 * 19;  // locked privator develop 1.9%\n    \n    uint256 public constant lockedLabSupply = INITIAL_SUPPLY / 100 * 10;  // locked lab 10%\n    \n    uint public constant operatorUnlockTimes = 24;  // operator unlock times\n    uint public constant investorUnlockTimes = 3;   // investor unlock times\n    uint public constant teamUnlockTimes = 24;      // team unlock times\n    uint public constant privatorForBaseUnlockTimes = 6;   // privator base unlock times\n    uint public constant privatorForEcologyUnlockTimes = 9;  // privator ecology unlock times\n    uint public constant privatorForFaithUnlockTimes = 6;   // privator faith unlock times\n    uint public constant privatorForDevelopUnlockTimes = 3;  // privator develop unlock times\n    uint public constant labUnlockTimes = 12;       // lab unlock times\n    \n    event Lock(address indexed locker, uint256 value, uint releaseTime);\n    event UnLock(address indexed unlocker, uint256 value);\n    \n    constructor(address operator, address investor, address team, address privatorBase,\n                address privatorEcology, address privatorFaith, address privatorDevelop, address lab) public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n        \n        initialLockedValues(operator, investor, team, privatorBase, privatorEcology, privatorFaith, privatorDevelop, lab);\n    }\n    \n    /**\n     * init the locked total value, and the first release time\n     */ \n    function initialLockedValues(address operator, address investor, address team, address privatorBase,\n                                 address privatorEcology, address privatorFaith, address privatorDevelop, address lab) internal onlyOwner returns (bool success) {\n        \n        // init operator address value and locked value. every month can unlock operator value for 1/24 since next month\n        uint unlockTime = now + 30 days;\n        lockedValuesAndTime(operator, lockedOperatorSupply, operatorUnlockTimes, unlockTime);\n        \n        //init investor address value and locked value. unlocked investor value, at six month for 30%, nine month for 30%, twelve month for the others ,40%\n        require(0x0 != investor);\n        lockedBalance[investor] = lockedInvestorSupply;\n        releasedBalance[investor] = 0;\n        \n        unlockTime = now;\n        allocations[investor].push(TimeLock(unlockTime + 180 days, lockedInvestorSupply.div(10).mul(3)));\n        allocations[investor].push(TimeLock(unlockTime + 270 days, lockedInvestorSupply.div(10).mul(3)));\n        allocations[investor].push(TimeLock(unlockTime + 360 days, lockedInvestorSupply.div(10).mul(4)));\n        \n        //init team address value and locked value. every month can unlock team value for 1/24 since next 6 months\n        unlockTime = now + 180 days;\n        lockedValuesAndTime(team, lockedTeamSupply, teamUnlockTimes, unlockTime);\n        \n        //init privator base address value and locked value\n        unlockTime = now;\n        lockedValuesAndTime(privatorBase, lockedPrivatorForBaseSupply, privatorForBaseUnlockTimes, unlockTime);\n        \n        //init privator ecology address value and locked value\n        //this values will divide into two parts, part one for 8% of all inital supply, part two for 4% of all inital supply\n        //the part one will unlock for 9 times, part two will unlock for 6 times\n        //so, from 1 to 6 unlock times, the unlock values = part one / 9 + part two / 6,  from 7 to 9, the unlock values = part one / 9\n        require(0x0 != privatorEcology);\n        releasedBalance[privatorEcology] = 0;\n        lockedBalance[privatorEcology] = lockedPrivatorForEcologyPartOneSupply.add(lockedPrivatorForEcologyPartTwoSupply);\n\n        unlockTime = now;\n        for (uint i = 0; i < privatorForEcologyUnlockTimes; i++) {\n            if (i > 0) {\n                unlockTime = unlockTime + 30 days;\n            }\n            \n            uint256 lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes);\n            if (i == privatorForEcologyUnlockTimes - 1) {  // the last unlock time\n                lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes).add(lockedPrivatorForEcologyPartOneSupply.mod(privatorForEcologyUnlockTimes));\n            }\n            if (i < 6) {\n                uint256 partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6);\n                if (i == 5) {  //the last unlock time\n                    partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6).add(lockedPrivatorForEcologyPartTwoSupply.mod(6));\n                }\n                lockedValue = lockedValue.add(partTwoValue);\n            }\n            \n            allocations[privatorEcology].push(TimeLock(unlockTime, lockedValue));\n        }\n        \n        //init privator faith address value and locked value\n        unlockTime = now;\n        lockedValuesAndTime(privatorFaith, lockedPrivatorForFaithSupply, privatorForFaithUnlockTimes, unlockTime);\n        \n        //init privator develop address value and locked value\n        unlockTime = now;\n        lockedValuesAndTime(privatorDevelop, lockedPrivatorForDevelopSupply, privatorForDevelopUnlockTimes, unlockTime);\n        \n        //init lab address value and locked value. every month can unlock lab value for 1/12 since next year\n        unlockTime = now + 365 days;\n        lockedValuesAndTime(lab, lockedLabSupply, labUnlockTimes, unlockTime);\n        \n        return true;\n    }\n    \n    /**\n     * lock the address value, set the unlock time\n     */ \n    function lockedValuesAndTime(address target, uint256 lockedSupply, uint lockedTimes, uint unlockTime) internal onlyOwner returns (bool success) {\n        require(0x0 != target);\n        releasedBalance[target] = 0;\n        lockedBalance[target] = lockedSupply;\n        \n        for (uint i = 0; i < lockedTimes; i++) {\n            if (i > 0) {\n                unlockTime = unlockTime + 30 days;\n            }\n            uint256 lockedValue = lockedSupply.div(lockedTimes);\n            if (i == lockedTimes - 1) {  //the last unlock time\n                lockedValue = lockedSupply.div(lockedTimes).add(lockedSupply.mod(lockedTimes));\n            }\n            allocations[target].push(TimeLock(unlockTime, lockedValue));\n        }\n        \n        return true;\n    }\n    \n    /**\n     * unlock the address values\n     */ \n    function unlock(address target) public onlyOwner returns(bool success) {\n        require(0x0 != target);\n        \n        uint256 value = 0;\n        for(uint i = 0; i < allocations[target].length; i++) {\n            if(now >= allocations[target][i].time) {\n                value = value.add(allocations[target][i].balance);\n                allocations[target][i].balance = 0;\n            }\n        }\n        lockedBalance[target] = lockedBalance[target].sub(value);\n        releasedBalance[target] = releasedBalance[target].add(value);\n        \n        transfer(target, value);\n        emit UnLock(target, value);\n        \n        return true;\n    }\n    \n    /**\n     * operator address has 2% for no locked.\n     */ \n    function initialOperatorValue(address operator) public onlyOwner {\n        transfer(operator, noLockedOperatorSupply);\n    }\n    \n    /**\n     * this function can get the locked value\n     */\n    function lockedOf(address owner) public constant returns (uint256 balance) {\n        return lockedBalance[owner];\n    }\n    \n    /**\n     * get the next unlock time\n     */ \n    function unlockTimeOf(address owner) public constant returns (uint time) {\n        for(uint i = 0; i < allocations[owner].length; i++) {\n            if(allocations[owner][i].time >= now) {\n                return allocations[owner][i].time;\n            }\n        }\n    }\n    \n    /**\n     * get the next unlock value\n     */ \n    function unlockValueOf(address owner) public constant returns (uint256 balance) {\n        for(uint i = 0; i < allocations[owner].length; i++) {\n            if(allocations[owner][i].time >= now) {\n                return allocations[owner][i].balance;\n            }\n        }\n    }\n    \n    /**\n     * this function can get the released value\n     */\n    function releasedOf(address owner) public constant returns (uint256 balance) {\n        return releasedBalance[owner];\n    }\n    \n    /**\n     * this function can be used when you want to send same number of tokens to all the recipients\n     */\n    function batchTransferForSingleValue(address[] dests, uint256 value) public onlyOwner {\n        uint256 i = 0;\n        uint256 sendValue = value * BASE_SUPPLY;\n        while (i < dests.length) {\n            transfer(dests[i], sendValue);\n            i++;\n        }\n    }\n    \n    /**\n     * this function can be used when you want to send every recipeint with different number of tokens\n     */\n    function batchTransferForDifferentValues(address[] dests, uint256[] values) public onlyOwner {\n        if(dests.length != values.length) return;\n        uint256 i = 0;\n        while (i < dests.length) {\n            uint256 sendValue = values[i] * BASE_SUPPLY;\n            transfer(dests[i], sendValue);\n            i++;\n        }\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"labUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferForDifferentValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInvestorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"initialOperatorValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForEcologyUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForFaithSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unlockTimeOf\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForBaseUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unlockValueOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noLockedOperatorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForEcologyPartOneSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedOperatorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"batchTransferForSingleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForEcologyPartTwoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedLabSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForDevelopSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForBaseSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForFaithUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"releasedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForDevelopUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"address\"},{\"name\":\"privatorBase\",\"type\":\"address\"},{\"name\":\"privatorEcology\",\"type\":\"address\"},{\"name\":\"privatorFaith\",\"type\":\"address\"},{\"name\":\"privatorDevelop\",\"type\":\"address\"},{\"name\":\"lab\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516101008062001a1f8339810160408181528251602080850151838601516060870151608088015160a089015160c08a015160e0909a015160038054600160a060020a031916339081179091556b1363156bbee3016d7000000060028190556000828152808a528b8120829055908c529951989b969a9599949893979296959194909390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3620000dc8888888888888888640100000000620000eb810204565b50505050505050505062000801565b6003546000908190819081908190600160a060020a031633146200010e57600080fd5b4262278d000193506200013a8d6b037d5ae550708a7f3800000060188764010000000062000622810204565b50600160a060020a038c1615156200015157600080fd5b600160a060020a038c1660009081526004602090815260408083206b01f04ef12cb04cf158000000905560058252808320839055600682529182902082518084019093524262ed4e0081018452965091908101620001ee6003620001d9600a60646b1363156bbee3016d700000005b04600a0290640100000000620007688102620011701704565b90640100000000620011936200079282021704565b905281546001818101845560009384526020808520845160029094020192835592830151910155600160a060020a038e168252600681526040918290208251808401909352630163f5008701835291908101620002616003620001d9600a60646b1363156bbee3016d70000000620001c0565b905281546001818101845560009384526020808520845160029094020192835592830151910155600160a060020a038e1682526006815260409182902082518084019093526301da9c008701835291908101620002d46004620001d9600a60646b1363156bbee3016d70000000620001c0565b90528154600180820184556000938452602093849020835160029093020191825591909201519101554262ed4e00019350620003298b6b01f04ef12cb04cf15800000060188764010000000062000622810204565b504293506200035e8a60646b1363156bbee3016d700000005b04600b0260068762000622640100000000026401000000009004565b50600160a060020a03891615156200037557600080fd5b600160a060020a038916600090815260056020526040812055620003bf6b018d0bf423c03d8de00000006ac685fa11e01ec6f000000064010000000062001157620007cb82021704565b600160a060020a038a1660009081526004602052604081209190915542945092505b60098310156200059b576000831115620003fe578362278d000193505b6200042d600960646b1363156bbee3016d700000005b0460080290640100000000620007688102620011701704565b91506008831415620004975762000494620004646b018d0bf423c03d8de00000006009640100000000620011c1620007de82021704565b6200047f600960646b1363156bbee3016d7000000062000414565b9064010000000062001157620007cb82021704565b91505b60068310156200054157620004d0600660646b1363156bbee3016d700000005b0460040290640100000000620007688102620011701704565b90508260051415620005245762000521620005066ac685fa11e01ec6f00000006006640100000000620011c1620007de82021704565b6200047f600660646b1363156bbee3016d70000000620004b7565b90505b6200053e828264010000000062001157620007cb82021704565b91505b600160a060020a0389166000908152600660209081526040808320815180830190925287825281830186815281546001818101845592865293909420915160029093029091019182559151908201559290920191620003e1565b429350620005b9886103e86b1363156bbee3016d7000000062000342565b50429350620005e0876a5e4c70621741d1b200000060038764010000000062000622810204565b50426301e133800193506200060e866b01f04ef12cb04cf158000000600c8764010000000062000622810204565b5060019d9c50505050505050505050505050565b60035460009081908190600160a060020a031633146200064157600080fd5b600160a060020a03871615156200065757600080fd5b600160a060020a03871660009081526005602090815260408083208390556004909152812087905591505b848210156200075b5760008211156200069e578362278d000193505b620006b88686640100000000620011706200076882021704565b9050600185038214156200070157620006fe620006e48787640100000000620011c1620007de82021704565b6200047f8888640100000000620011706200076882021704565b90505b600160a060020a038716600090815260066020908152604080832081518083019092528782528183018581528154600181810184559286529390942091516002909302909101918255915190820155919091019062000682565b5060019695505050505050565b6000808083116200077857600080fd5b82848115156200078457fe5b0490508091505b5092915050565b600080831515620007a757600091506200078b565b50828202828482811515620007b857fe5b0414620007c457600080fd5b9392505050565b600082820183811015620007c457600080fd5b6000811515620007ed57600080fd5b8183811515620007f957fe5b069392505050565b61120e80620008116000396000f3006080604052600436106101f85763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663010bc33c81146101fd57806306fdde031461023a578063095ea7b3146102c45780631617a485146102fc578063173c9d271461032357806318160ddd146103b35780631924cad3146103c85780631bf831cf146103dd57806323b872dd146103fe5780632ec09483146104285780632f6c493c1461043d5780632ff2e9dc1461045e57806330dc9f9814610473578063313ce56714610488578063469a6947146104b357806347a0d032146104d457806354fd4d50146104e957806370a08231146104fe57806372a22d511461051f57806372a49dca146105405780637a383ebd146105555780638c5d8a87146103c85780638da5cb5b1461056a57806392551cda1461059b57806395d89b41146105b0578063977acb93146105c55780639ab567ba146105da578063a5f1e28214610631578063a9059cbb14610652578063baf13a0a14610676578063c6dfe0571461068b578063cd4651ba146106a0578063d237b144146103c8578063d300d010146106b5578063d8d618fa146106ca578063dd62ed3e146106df578063de57518f14610555578063eaa15fdb146104d4578063ed0ad32114610706578063f19296bc146106a0578063f2fde38b14610727575b600080fd5b34801561020957600080fd5b50610221600160a060020a0360043516602435610748565b6040805192835260208301919091528051918290030190f35b34801561024657600080fd5b5061024f610783565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610289578181015183820152602001610271565b50505050905090810190601f1680156102b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d057600080fd5b506102e8600160a060020a03600435166024356107ba565b604080519115158252519081900360200190f35b34801561030857600080fd5b50610311610838565b60408051918252519081900360200190f35b34801561032f57600080fd5b50604080516020600480358082013583810280860185019096528085526103b195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061083d9650505050505050565b005b3480156103bf57600080fd5b506103116108cd565b3480156103d457600080fd5b506103116108d3565b3480156103e957600080fd5b506103b1600160a060020a03600435166108e3565b34801561040a57600080fd5b506102e8600160a060020a0360043581169060243516604435610913565b34801561043457600080fd5b50610311610a88565b34801561044957600080fd5b506102e8600160a060020a0360043516610a8d565b34801561046a57600080fd5b50610311610c7e565b34801561047f57600080fd5b50610311610c8e565b34801561049457600080fd5b5061049d610ca6565b6040805160ff9092168252519081900360200190f35b3480156104bf57600080fd5b50610311600160a060020a0360043516610cab565b3480156104e057600080fd5b50610311610d57565b3480156104f557600080fd5b5061024f610d5c565b34801561050a57600080fd5b50610311600160a060020a0360043516610d93565b34801561052b57600080fd5b50610311600160a060020a0360043516610dae565b34801561054c57600080fd5b50610311610e54565b34801561056157600080fd5b50610311610e63565b34801561057657600080fd5b5061057f610e68565b60408051600160a060020a039092168252519081900360200190f35b3480156105a757600080fd5b50610311610e77565b3480156105bc57600080fd5b5061024f610e87565b3480156105d157600080fd5b50610311610ebe565b3480156105e657600080fd5b50604080516020600480358082013583810280860185019096528085526103b1953695939460249493850192918291850190849080828437509497505093359450610ece9350505050565b34801561063d57600080fd5b50610311600160a060020a0360043516610f21565b34801561065e57600080fd5b506102e8600160a060020a0360043516602435610f3c565b34801561068257600080fd5b5061031161101b565b34801561069757600080fd5b50610311611027565b3480156106ac57600080fd5b50610311611036565b3480156106c157600080fd5b5061031161103b565b3480156106d657600080fd5b5061031161104a565b3480156106eb57600080fd5b50610311600160a060020a036004358116906024351661105e565b34801561071257600080fd5b50610311600160a060020a0360043516611089565b34801561073357600080fd5b506103b1600160a060020a03600435166110a4565b60066020528160005260406000208181548110151561076357fe5b600091825260209091206002909102018054600190910154909250905082565b60408051808201909152600981527f4e4e4220546f6b656e0000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156107d157600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600c81565b6003546000908190600160a060020a0316331461085957600080fd5b8251845114610867576108c7565b600091505b83518210156108c7578251670de0b6b3a76400009084908490811061088d57fe5b906020019060200201510290506108bb84838151811015156108ab57fe5b9060200190602002015182610f3c565b5060019091019061086c565b50505050565b60025490565b6b01f04ef12cb04cf15800000081565b600354600160a060020a031633146108fa57600080fd5b61090f816a6342fd08f00f6378000000610f3c565b5050565b600160a060020a03831660009081526020819052604081205482111561093857600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561096857600080fd5b600160a060020a038316151561097d57600080fd5b600160a060020a0384166000908152602081905260409020546109a6908363ffffffff61113916565b600160a060020a0380861660009081526020819052604080822093909355908516815220546109db908363ffffffff61115716565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610a1d908363ffffffff61113916565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600981565b60035460009081908190600160a060020a03163314610aab57600080fd5b600160a060020a0384161515610ac057600080fd5b5060009050805b600160a060020a038416600090815260066020526040902054811015610bb357600160a060020a0384166000908152600660205260409020805482908110610b0b57fe5b60009182526020909120600290910201544210610bab57600160a060020a03841660009081526006602052604090208054610b6c919083908110610b4b57fe5b9060005260206000209060020201600101548361115790919063ffffffff16565b600160a060020a03851660009081526006602052604081208054929450909183908110610b9557fe5b9060005260206000209060020201600101819055505b600101610ac7565b600160a060020a038416600090815260046020526040902054610bdc908363ffffffff61113916565b600160a060020a038516600090815260046020908152604080832093909355600590522054610c11908363ffffffff61115716565b600160a060020a038516600090815260056020526040902055610c348483610f3c565b50604080518381529051600160a060020a038616917fb371d42b3715509a27f3109f6ac1ef6b7d7e7f8e9232b738ed17338be6cf9580919081900360200190a25060019392505050565b6b1363156bbee3016d7000000081565b6103e86b1363156bbee3016d700000005b04600b0281565b601281565b6000805b600160a060020a038316600090815260066020526040902054811015610d5157600160a060020a0383166000908152600660205260409020805442919083908110610cf657fe5b600091825260209091206002909102015410610d4957600160a060020a0383166000908152600660205260409020805482908110610d3057fe5b9060005260206000209060020201600001549150610d51565b600101610caf565b50919050565b600681565b60408051808201909152600481527f48312e3000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526020819052604090205490565b6000805b600160a060020a038316600090815260066020526040902054811015610d5157600160a060020a0383166000908152600660205260409020805442919083908110610df957fe5b600091825260209091206002909102015410610e4c57600160a060020a0383166000908152600660205260409020805482908110610e3357fe5b9060005260206000209060020201600101549150610d51565b600101610db2565b6a6342fd08f00f637800000081565b601881565b600354600160a060020a031681565b6b018d0bf423c03d8de000000081565b60408051808201909152600381527f4e4e420000000000000000000000000000000000000000000000000000000000602082015281565b6b037d5ae550708a7f3800000081565b6003546000908190600160a060020a03163314610eea57600080fd5b5060009050670de0b6b3a764000082025b83518210156108c757610f1584838151811015156108ab57fe5b50600190910190610efb565b600160a060020a031660009081526004602052604090205490565b33600090815260208190526040812054821115610f5857600080fd5b600160a060020a0383161515610f6d57600080fd5b33600090815260208190526040902054610f8d908363ffffffff61113916565b3360009081526020819052604080822092909255600160a060020a03851681522054610fbf908363ffffffff61115716565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b670de0b6b3a764000081565b6ac685fa11e01ec6f000000081565b600381565b6a5e4c70621741d1b200000081565b60646b1363156bbee3016d70000000610c9f565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a031660009081526005602052604090205490565b600354600160a060020a031633146110bb57600080fd5b600160a060020a03811615156110d057600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808383111561114957600080fd5b5050808203805b5092915050565b60008282018381101561116957600080fd5b9392505050565b60008080831161117f57600080fd5b828481151561118a57fe5b04949350505050565b6000808315156111a65760009150611150565b508282028284828115156111b657fe5b041461116957600080fd5b60008115156111cf57600080fd5b81838115156111da57fe5b0693925050505600a165627a7a723058201ceaf954813b4a1e8987c50fc3ccf33d3f22a6fe47162a476986c0e4e08450f800290000000000000000000000009ba93e739c73267b24ce302d19868d38b392abe700000000000000000000000003ba5f9915e00bef45c67a2651a3b962bda84a5c000000000000000000000000a9e9dea841cf8adb9e7785f02c4317246740cf230000000000000000000000007aa3091eec0f54a403c74c8ca6011e200b20049700000000000000000000000002253927c5bec2386d63e0f2da8ca71ec052a845000000000000000000000000eae638e0ded5039edef09e1368e863a89f13588600000000000000000000000011d396cdccdc84ebce8eb05da25038cf29306d7d000000000000000000000000efee7eb66ae2f4ce5f054827319a4a77e3324858",
  "constructorArguments": "0000000000000000000000009ba93e739c73267b24ce302d19868d38b392abe700000000000000000000000003ba5f9915e00bef45c67a2651a3b962bda84a5c000000000000000000000000a9e9dea841cf8adb9e7785f02c4317246740cf230000000000000000000000007aa3091eec0f54a403c74c8ca6011e200b20049700000000000000000000000002253927c5bec2386d63e0f2da8ca71ec052a845000000000000000000000000eae638e0ded5039edef09e1368e863a89f13588600000000000000000000000011d396cdccdc84ebce8eb05da25038cf29306d7d000000000000000000000000efee7eb66ae2f4ce5f054827319a4a77e3324858"
}