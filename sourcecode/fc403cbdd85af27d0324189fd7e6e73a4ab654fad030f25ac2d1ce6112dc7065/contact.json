{
  "address": "0xBEd367c7dcb453d471aC2d511d138163B3D6d626",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ET",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.4.21;\n\ncontract ET {\n    string public name;\n    string public symbol;\n    uint8  public decimals;\n    uint256 public totalSupply;\n\n    // Balances\n    mapping (address => uint256) balances;\n    // Allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n    // ----- Events -----\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n    /**\n     * Constructor function\n     */\n    function ET(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public {\n        name = _tokenName;                                   // Set the name for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        decimals = _decimals;\n\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal returns(bool) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from] + balances[_to];\n        // Subtract from the sender\n        balances[_from] -= _value;\n        // Add the same to the recipient\n        balances[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n\n        return true;\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_value <= allowances[_from][msg.sender]);     // Check allowance\n        allowances[_from][msg.sender] -= _value;\n        return _transfer(_from, _to, _value);\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Check for overflows\n        require(allowances[msg.sender][_spender] + _addedValue > allowances[msg.sender][_spender]);\n\n        allowances[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowances[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowances[msg.sender][_spender] = 0;\n        } else {\n            allowances[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405161091438038061091483398101604052808051919060200180518201919060200180518201919060200180519150600090508380516100559291602001906100aa565b5060018280516100699291602001906100aa565b506002805460ff191660ff928316179081905516600a0a92909202600381905533600160a060020a0316600090815260046020526040902055506101459050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100eb57805160ff1916838001178555610118565b82800160010185558215610118579182015b828111156101185782518255916020019190600101906100fd565b50610124929150610128565b5090565b61014291905b80821115610124576000815560010161012e565b90565b6107c0806101546000396000f3006060604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017357806323b872dd14610198578063313ce567146101c057806366188463146101e957806370a082311461020b57806395d89b411461022a578063a9059cbb1461023d578063d73dd6231461025f578063dd62ed3e14610281575b600080fd5b34156100be57600080fd5b6100c66102a6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101025780820151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014857600080fd5b61015f600160a060020a0360043516602435610344565b604051901515815260200160405180910390f35b341561017e57600080fd5b6101866103b0565b60405190815260200160405180910390f35b34156101a357600080fd5b61015f600160a060020a03600435811690602435166044356103b6565b34156101cb57600080fd5b6101d361042b565b60405160ff909116815260200160405180910390f35b34156101f457600080fd5b61015f600160a060020a0360043516602435610434565b341561021657600080fd5b610186600160a060020a0360043516610522565b341561023557600080fd5b6100c661053d565b341561024857600080fd5b61015f600160a060020a03600435166024356105a8565b341561026a57600080fd5b61015f600160a060020a03600435166024356105bc565b341561028c57600080fd5b610186600160a060020a036004358116906024351661065d565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561033c5780601f106103115761010080835404028352916020019161033c565b820191906000526020600020905b81548152906001019060200180831161031f57829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600160a060020a038084166000908152600560209081526040808320339094168352929052908120548211156103eb57600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522080548390039055610423848484610688565b949350505050565b60025460ff1681565b600160a060020a0333811660009081526005602090815260408083209386168352929052908120548083111561049157600160a060020a0333811660009081526005602090815260408083209388168352929052908120556104bc565b600160a060020a03338116600090815260056020908152604080832093881683529290522083820390555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526004602052604090205490565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561033c5780601f106103115761010080835404028352916020019161033c565b60006105b5338484610688565b9392505050565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054828101116105f157600080fd5b600160a060020a033381166000818152600560209081526040808320948816808452949091529081902080548601908190557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600080600160a060020a03841615156106a057600080fd5b600160a060020a038516600090815260046020526040902054839010156106c657600080fd5b600160a060020a038416600090815260046020526040902054838101116106ec57600080fd5b50600160a060020a0380841660008181526004602052604080822080549489168084528284208054898103909155938590528154880190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600160a060020a0380851660009081526004602052604080822054928816825290205401811461078957fe5b5060019493505050505600a165627a7a72305820d5e4589402a0b70ff72a69af88a62ff84a6ccf0cbf5ef3d2705c26777107a88f0029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b452d50415920546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024554000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b452d50415920546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024554000000000000000000000000000000000000000000000000000000000000"
}