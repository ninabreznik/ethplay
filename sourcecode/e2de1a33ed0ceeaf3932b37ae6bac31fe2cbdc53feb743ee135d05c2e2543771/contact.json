{
  "address": "0xd4cc0cda97ec567235b7019c655ec75cd361f712",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SEEDDEX",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-18\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n    external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n    external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title SEEDDEX\n * @dev This is the main contract for the SEEDDEX exchange.\n */\ncontract SEEDDEX {\n\n    /// Variables\n    address public admin; // the admin address\n    address constant public FicAddress = 0x0DD83B5013b2ad7094b1A7783d96ae0168f82621;  // FloraFIC token address\n    address public manager; // the manager address\n    address public feeAccount; // the account that will receive fees\n    uint public feeTakeMaker; // For Maker fee x% *10^18\n    uint public feeTakeSender; // For Sender fee x% *10^18\n    uint public feeTakeMakerFic;\n    uint public feeTakeSenderFic;\n    bool private depositingTokenFlag; // True when Token.transferFrom is being called from depositToken\n    mapping(address => mapping(address => uint)) public tokens; // mapping of token addresses to mapping of account balances (token=0 means Ether)\n    mapping(address => mapping(bytes32 => bool)) public orders; // mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n    mapping(address => mapping(bytes32 => uint)) public orderFills; // mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n    address public predecessor; // Address of the previous version of this contract. If address(0), this is the first version\n    address public successor; // Address of the next version of this contract. If address(0), this is the most up to date version.\n    uint16 public version; // This is the version # of the contract\n\n    /// Logging Events\n    event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address indexed user, bytes32 hash, uint amount);\n    event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address indexed user, uint8 v, bytes32 r, bytes32 s);\n    event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 timestamp);\n    event Deposit(address token, address indexed user, uint amount, uint balance);\n    event Withdraw(address token, address indexed user, uint amount, uint balance);\n    event FundsMigrated(address indexed user, address newContract);\n\n    /// This is a modifier for functions to check if the sending user address is the same as the admin user address.\n    modifier isAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    /// this is manager can only change feeTakeMaker feeTakeMaker and change manager address (accept only Ethereum address)\n    modifier isManager() {\n        require(msg.sender == manager || msg.sender == admin);\n        _;\n    }\n\n    /// Constructor function. This is only called on contract creation.\n    function SEEDDEX(address admin_, address manager_, address feeAccount_, uint feeTakeMaker_, uint feeTakeSender_, uint feeTakeMakerFic_, uint feeTakeSenderFic_, address predecessor_) public {\n        admin = admin_;\n        manager = manager_;\n        feeAccount = feeAccount_;\n        feeTakeMaker = feeTakeMaker_;\n        feeTakeSender = feeTakeSender_;\n        feeTakeMakerFic = feeTakeMakerFic_;\n        feeTakeSenderFic = feeTakeSenderFic_;\n        depositingTokenFlag = false;\n        predecessor = predecessor_;\n\n        if (predecessor != address(0)) {\n            version = SEEDDEX(predecessor).version() + 1;\n        } else {\n            version = 1;\n        }\n    }\n\n    /// The fallback function. Ether transfered into the contract is not accepted.\n    function() public {\n        revert();\n    }\n\n    /// Changes the official admin user address. Accepts Ethereum address.\n    function changeAdmin(address admin_) public isAdmin {\n        require(admin_ != address(0));\n        admin = admin_;\n    }\n\n    /// Changes the manager user address. Accepts Ethereum address.\n    function changeManager(address manager_) public isManager {\n        require(manager_ != address(0));\n        manager = manager_;\n    }\n\n    /// Changes the account address that receives trading fees. Accepts Ethereum address.\n    function changeFeeAccount(address feeAccount_) public isAdmin {\n        feeAccount = feeAccount_;\n    }\n\n    /// Changes the fee on takes. Can only be changed to a value less than it is currently set at.\n    function changeFeeTakeMaker(uint feeTakeMaker_) public isManager {\n        feeTakeMaker = feeTakeMaker_;\n    }\n\n    function changeFeeTakeSender(uint feeTakeSender_) public isManager {\n        feeTakeSender = feeTakeSender_;\n    }\n\n    function changeFeeTakeMakerFic(uint feeTakeMakerFic_) public isManager {\n        feeTakeMakerFic = feeTakeMakerFic_;\n    }\n\n    function changeFeeTakeSenderFic(uint feeTakeSenderFic_) public isManager {\n        feeTakeSenderFic = feeTakeSenderFic_;\n    }\n\n    /// Changes the successor. Used in updating the contract.\n    function setSuccessor(address successor_) public isAdmin {\n        require(successor_ != address(0));\n        successor = successor_;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // Deposits, Withdrawals, Balances\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n    * This function handles deposits of Ether into the contract.\n    * Emits a Deposit event.\n    * Note: With the payable modifier, this function accepts Ether.\n    */\n    function deposit() public payable {\n        tokens[0][msg.sender] = SafeMath.add(tokens[0][msg.sender], msg.value);\n        Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n    }\n\n    /**\n    * This function handles withdrawals of Ether from the contract.\n    * Verifies that the user has enough funds to cover the withdrawal.\n    * Emits a Withdraw event.\n    * @param amount uint of the amount of Ether the user wishes to withdraw\n    */\n    function withdraw(uint amount) {\n        if (tokens[0][msg.sender] < amount) throw;\n        tokens[0][msg.sender] = SafeMath.sub(tokens[0][msg.sender], amount);\n        if (!msg.sender.call.value(amount)()) throw;\n        Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\n    }\n\n    /**\n    * This function handles deposits of Ethereum based tokens to the contract.\n    * Does not allow Ether.\n    * If token transfer fails, transaction is reverted and remaining gas is refunded.\n    * Emits a Deposit event.\n    * Note: Remember to call IERC20(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n    * @param token Ethereum contract address of the token or 0 for Ether\n    * @param amount uint of the amount of the token the user wishes to deposit\n    */\n    function depositToken(address token, uint amount) {\n        //remember to call IERC20(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n        if (token == 0) throw;\n        if (!IERC20(token).transferFrom(msg.sender, this, amount)) throw;\n        tokens[token][msg.sender] = SafeMath.add(tokens[token][msg.sender], amount);\n        Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n    }\n\n    /**\n    * This function provides a fallback solution as outlined in ERC223.\n    * If tokens are deposited through depositToken(), the transaction will continue.\n    * If tokens are sent directly to this contract, the transaction is reverted.\n    * @param sender Ethereum address of the sender of the token\n    * @param amount amount of the incoming tokens\n    * @param data attached data similar to msg.data of Ether transactions\n    */\n    function tokenFallback(address sender, uint amount, bytes data) public returns (bool ok) {\n        if (depositingTokenFlag) {\n            // Transfer was initiated from depositToken(). User token balance will be updated there.\n            return true;\n        } else {\n            // Direct ECR223 Token.transfer into this contract not allowed, to keep it consistent\n            // with direct transfers of ECR20 and ETH.\n            revert();\n        }\n    }\n\n    /**\n    * This function handles withdrawals of Ethereum based tokens from the contract.\n    * Does not allow Ether.\n    * If token transfer fails, transaction is reverted and remaining gas is refunded.\n    * Emits a Withdraw event.\n    * @param token Ethereum contract address of the token or 0 for Ether\n    * @param amount uint of the amount of the token the user wishes to withdraw\n    */\n    function withdrawToken(address token, uint amount) {\n        if (token == 0) throw;\n        if (tokens[token][msg.sender] < amount) throw;\n        tokens[token][msg.sender] = SafeMath.sub(tokens[token][msg.sender], amount);\n        if (!IERC20(token).transfer(msg.sender, amount)) throw;\n        Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n    }\n\n    /**\n    * Retrieves the balance of a token based on a user address and token address.\n    * @param token Ethereum contract address of the token or 0 for Ether\n    * @param user Ethereum address of the user\n    * @return the amount of tokens on the exchange for a given user address\n    */\n    function balanceOf(address token, address user) public constant returns (uint) {\n        return tokens[token][user];\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // Trading\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n    * Stores the active order inside of the contract.\n    * Emits an Order event.\n    *\n    *\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    */\n    function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n        bytes32 hash = keccak256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n        uint amount;\n        orders[msg.sender][hash] = true;\n        Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, hash, amount);\n    }\n\n    /**\n    * Facilitates a trade from one user to another.\n    * Requires that the transaction is signed properly, the trade isn't past its expiration, and all funds are present to fill the trade.\n    * Calls tradeBalances().\n    * Updates orderFills with the amount traded.\n    * Emits a Trade event.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * Note: amount is in amountGet / tokenGet terms.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    * @param user Ethereum address of the user who placed the order\n    * @param v part of signature for the order hash as signed by user\n    * @param r part of signature for the order hash as signed by user\n    * @param s part of signature for the order hash as signed by user\n    * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n    */\n    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n        bytes32 hash = keccak256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n        require((\n            (orders[user][hash] || ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user) &&\n            block.number <= expires &&\n            SafeMath.add(orderFills[user][hash], amount) <= amountGet\n            ));\n        tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n        orderFills[user][hash] = SafeMath.add(orderFills[user][hash], amount);\n        Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender, now);\n    }\n\n    /**\n    * This is a private function and is only being called from trade().\n    * Handles the movement of funds when a trade occurs.\n    * Takes fees.\n    * Updates token balances for both buyer and seller.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * Note: amount is in amountGet / tokenGet terms.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param user Ethereum address of the user who placed the order\n    * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n    */\n    function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\n        if (tokenGet == FicAddress || tokenGive == FicAddress) {\n            tokens[tokenGet][msg.sender] = SafeMath.sub(tokens[tokenGet][msg.sender], amount);\n            tokens[tokenGet][user] = SafeMath.add(tokens[tokenGet][user], SafeMath.mul(amount, ((1 ether) - feeTakeMakerFic)) / (1 ether));\n            tokens[tokenGet][feeAccount] = SafeMath.add(tokens[tokenGet][feeAccount], SafeMath.mul(amount, feeTakeMakerFic) / (1 ether));\n            tokens[tokenGive][user] = SafeMath.sub(tokens[tokenGive][user], SafeMath.mul(amountGive, amount) / amountGet);\n            tokens[tokenGive][msg.sender] = SafeMath.add(tokens[tokenGive][msg.sender], SafeMath.mul(SafeMath.mul(((1 ether) - feeTakeSenderFic), amountGive), amount) / amountGet / (1 ether));\n            tokens[tokenGive][feeAccount] = SafeMath.add(tokens[tokenGive][feeAccount], SafeMath.mul(SafeMath.mul(feeTakeSenderFic, amountGive), amount) / amountGet / (1 ether));\n        }\n        else {\n            tokens[tokenGet][msg.sender] = SafeMath.sub(tokens[tokenGet][msg.sender], amount);\n            tokens[tokenGet][user] = SafeMath.add(tokens[tokenGet][user], SafeMath.mul(amount, ((1 ether) - feeTakeMaker)) / (1 ether));\n            tokens[tokenGet][feeAccount] = SafeMath.add(tokens[tokenGet][feeAccount], SafeMath.mul(amount, feeTakeMaker) / (1 ether));\n            tokens[tokenGive][user] = SafeMath.sub(tokens[tokenGive][user], SafeMath.mul(amountGive, amount) / amountGet);\n            tokens[tokenGive][msg.sender] = SafeMath.add(tokens[tokenGive][msg.sender], SafeMath.mul(SafeMath.mul(((1 ether) - feeTakeSender), amountGive), amount) / amountGet / (1 ether));\n            tokens[tokenGive][feeAccount] = SafeMath.add(tokens[tokenGive][feeAccount], SafeMath.mul(SafeMath.mul(feeTakeSender, amountGive), amount) / amountGet / (1 ether));\n        }\n    }\n\n    /**\n    * This function is to test if a trade would go through.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * Note: amount is in amountGet / tokenGet terms.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    * @param user Ethereum address of the user who placed the order\n    * @param v part of signature for the order hash as signed by user\n    * @param r part of signature for the order hash as signed by user\n    * @param s part of signature for the order hash as signed by user\n    * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n    * @param sender Ethereum address of the user taking the order\n    * @return bool: true if the trade would be successful, false otherwise\n    */\n    function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public constant returns (bool) {\n        if (!(\n        tokens[tokenGet][sender] >= amount &&\n        availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n        )) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n    * This function checks the available volume for a given order.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    * @param user Ethereum address of the user who placed the order\n    * @param v part of signature for the order hash as signed by user\n    * @param r part of signature for the order hash as signed by user\n    * @param s part of signature for the order hash as signed by user\n    * @return uint: amount of volume available for the given order in terms of amountGet / tokenGet\n    */\n    function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public constant returns (uint) {\n        bytes32 hash = keccak256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n        if (!(\n        (orders[user][hash] || ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user) &&\n        block.number <= expires\n        )) {\n            return 0;\n        }\n        uint[2] memory available;\n        available[0] = SafeMath.sub(amountGet, orderFills[user][hash]);\n        available[1] = SafeMath.mul(tokens[tokenGive][user], amountGet) / amountGive;\n        if (available[0] < available[1]) {\n            return available[0];\n        } else {\n            return available[1];\n        }\n    }\n\n    /**\n    * This function checks the amount of an order that has already been filled.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    * @param user Ethereum address of the user who placed the order\n    * @param v part of signature for the order hash as signed by user\n    * @param r part of signature for the order hash as signed by user\n    * @param s part of signature for the order hash as signed by user\n    * @return uint: amount of the given order that has already been filled in terms of amountGet / tokenGet\n    */\n    function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public constant returns (uint) {\n        bytes32 hash = keccak256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n        return orderFills[user][hash];\n    }\n\n    /**\n    * This function cancels a given order by editing its fill data to the full amount.\n    * Requires that the transaction is signed properly.\n    * Updates orderFills to the full amountGet\n    * Emits a Cancel event.\n    * Note: tokenGet & tokenGive can be the Ethereum contract address.\n    * @param tokenGet Ethereum contract address of the token to receive\n    * @param amountGet uint amount of tokens being received\n    * @param tokenGive Ethereum contract address of the token to give\n    * @param amountGive uint amount of tokens being given\n    * @param expires uint of block number when this order should expire\n    * @param nonce arbitrary random number\n    * @param v part of signature for the order hash as signed by user\n    * @param r part of signature for the order hash as signed by user\n    * @param s part of signature for the order hash as signed by user\n    * @return uint: amount of the given order that has already been filled in terms of amountGet / tokenGet\n    */\n    function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 hash = keccak256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n        require((orders[msg.sender][hash] || ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == msg.sender));\n        orderFills[msg.sender][hash] = amountGet;\n        Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n    }\n\n\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // Contract Versioning / Migration\n    ////////////////////////////////////////////////////////////////////////////////\n\n    /**\n    * User triggered function to migrate funds into a new contract to ease updates.\n    * Emits a FundsMigrated event.\n    * @param newContract Contract address of the new contract we are migrating funds to\n    * @param tokens_ Array of token addresses that we will be migrating to the new contract\n    */\n    function migrateFunds(address newContract, address[] tokens_) public {\n\n        require(newContract != address(0));\n\n        SEEDDEX newExchange = SEEDDEX(newContract);\n\n        // Move Ether into new exchange.\n        uint etherAmount = tokens[0][msg.sender];\n        if (etherAmount > 0) {\n            tokens[0][msg.sender] = 0;\n            newExchange.depositForUser.value(etherAmount)(msg.sender);\n        }\n\n        // Move Tokens into new exchange.\n        for (uint16 n = 0; n < tokens_.length; n++) {\n            address token = tokens_[n];\n            require(token != address(0));\n            // Ether is handled above.\n            uint tokenAmount = tokens[token][msg.sender];\n\n            if (tokenAmount != 0) {\n                if (!IERC20(token).approve(newExchange, tokenAmount)) throw;\n                tokens[token][msg.sender] = 0;\n                newExchange.depositTokenForUser(token, tokenAmount, msg.sender);\n            }\n        }\n\n        FundsMigrated(msg.sender, newContract);\n    }\n\n\n    /**\n    * This function handles deposits of Ether into the contract, but allows specification of a user.\n    * Note: This is generally used in migration of funds.\n    * Note: With the payable modifier, this function accepts Ether.\n    */\n    function depositForUser(address user) public payable {\n        require(user != address(0));\n        require(msg.value > 0);\n        tokens[0][user] = SafeMath.add(tokens[0][user], (msg.value));\n    }\n\n    /**\n    * This function handles deposits of Ethereum based tokens into the contract, but allows specification of a user.\n    * Does not allow Ether.\n    * If token transfer fails, transaction is reverted and remaining gas is refunded.\n    * Note: This is generally used in migration of funds.\n    * Note: Remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n    * @param token Ethereum contract address of the token\n    * @param amount uint of the amount of the token the user wishes to deposit\n    */\n    function depositTokenForUser(address token, uint amount, address user) public {\n        require(token != address(0));\n        require(user != address(0));\n        require(amount > 0);\n        depositingTokenFlag = true;\n        if (!IERC20(token).transferFrom(msg.sender, this, amount)) throw;\n        depositingTokenFlag = false;\n        tokens[token][user] = SafeMath.add(tokens[token][user], (amount));\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405161010080620023fd83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e09097015160008054600160a060020a0319908116600160a060020a03808a1691909117909255600180548216838b1617905560028054821683891617905560038690556004859055600584905560068a90556007805460ff19169055600b805490911682841617908190559698959694959394929392161561019757600b60009054906101000a9004600160a060020a0316600160a060020a03166354fd4d506040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561012e57600080fd5b505af1158015610142573d6000803e3d6000fd5b505050506040513d602081101561015857600080fd5b5051600c805460a060020a61ffff02191674010000000000000000000000000000000000000000600190930161ffff16929092029190911790556101c0565b600c805460a060020a61ffff021916740100000000000000000000000000000000000000001790555b505050505050505061222580620001d86000396000f3006080604052600436106101cb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416626be1f881146101dd5780630a19b14a146102045780630b9276661461025557806310e5bff814610289578063187dc587146102aa57806319774d43146102c2578063272396cb146102e6578063278b8c0e146102fb5780632e1a7d4d1461033c578063338b5dea146103545780633c2e2a751461037857806346be96c3146103a3578063481c6a75146103ee578063508493bc1461041f578063515fdde31461044657806354fd4d50146104a957806365e17c9d146104d55780636a523c5e146104ea5780636c86888b146104fe5780636ff968c31461056c57806371ffcb1614610581578063776e2525146105a25780638146dbb7146105ba5780638f283970146105cf57806393ab48ed146105f05780639e281a9814610605578063a3fbbaae14610629578063b2207ec31461064a578063b2ab553a14610662578063b719d0321461067a578063bb5f46291461068f578063c0ee0b8a146106b3578063d0e30db01461071c578063e432610814610724578063f7888aec14610739578063f851a44014610760578063fb6e155f14610775575b3480156101d757600080fd5b50600080fd5b3480156101e957600080fd5b506101f26107c0565b60408051918252519081900360200190f35b34801561021057600080fd5b50610253600160a060020a0360043581169060243590604435811690606435906084359060a4359060c4351660ff60e435166101043561012435610144356107c6565b005b34801561026157600080fd5b50610253600160a060020a03600435811690602435906044351660643560843560a435610a2a565b34801561029557600080fd5b50610253600160a060020a0360043516610b16565b3480156102b657600080fd5b50610253600435610b71565b3480156102ce57600080fd5b506101f2600160a060020a0360043516602435610ba4565b3480156102f257600080fd5b506101f2610bc1565b34801561030757600080fd5b50610253600160a060020a03600435811690602435906044351660643560843560a43560ff60c4351660e43561010435610bc7565b34801561034857600080fd5b50610253600435610d92565b34801561036057600080fd5b50610253600160a060020a0360043516602435610e80565b34801561038457600080fd5b50610253600160a060020a036004358116906024359060443516610fd3565b3480156103af57600080fd5b506101f2600160a060020a0360043581169060243590604435811690606435906084359060a4359060c4351660ff60e435166101043561012435611126565b3480156103fa57600080fd5b506104036111a4565b60408051600160a060020a039092168252519081900360200190f35b34801561042b57600080fd5b506101f2600160a060020a03600435811690602435166111b3565b34801561045257600080fd5b50604080516020600460248035828101358481028087018601909752808652610253968435600160a060020a0316963696604495919490910192918291850190849080828437509497506111d09650505050505050565b3480156104b557600080fd5b506104be6114c5565b6040805161ffff9092168252519081900360200190f35b3480156104e157600080fd5b506104036114e7565b610253600160a060020a03600435166114f6565b34801561050a57600080fd5b50610558600160a060020a0360043581169060243590604435811690606435906084359060a4359060c43581169060ff60e43516906101043590610124359061014435906101643516611572565b604080519115158252519081900360200190f35b34801561057857600080fd5b506104036115dc565b34801561058d57600080fd5b50610253600160a060020a03600435166115eb565b3480156105ae57600080fd5b50610253600435611631565b3480156105c657600080fd5b506101f2611664565b3480156105db57600080fd5b50610253600160a060020a036004351661166a565b3480156105fc57600080fd5b506101f26116c5565b34801561061157600080fd5b50610253600160a060020a03600435166024356116cb565b34801561063557600080fd5b50610253600160a060020a0360043516611864565b34801561065657600080fd5b506102536004356118d6565b34801561066e57600080fd5b50610253600435611909565b34801561068657600080fd5b5061040361193c565b34801561069b57600080fd5b50610558600160a060020a036004351660243561194b565b3480156106bf57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610558948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061196b9650505050505050565b61025361198d565b34801561073057600080fd5b50610403611a1e565b34801561074557600080fd5b506101f2600160a060020a0360043581169060243516611a36565b34801561076c57600080fd5b50610403611a61565b34801561078157600080fd5b506101f2600160a060020a0360043581169060243590604435811690606435906084359060a4359060c4351660ff60e435166101043561012435611a70565b60045481565b604080516c010000000000000000000000003081028252600160a060020a03808f1682026014840152602883018e9052808d169091026048830152605c82018b9052607c82018a9052609c820189905282519182900360bc019091209087166000908152600960209081528382208383529052919091205460ff16806108f55750604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101839052815190819003603c018120600080835260208381018086529290925260ff89168385015260608301889052608083018790529251600160a060020a038a169360019360a08082019493601f198101939281900390910191865af11580156108e0573d6000803e3d6000fd5b50505060206040510351600160a060020a0316145b80156109015750874311155b801561093b5750600160a060020a0386166000908152600a602090815260408083208484529091529020548b906109389084611ce5565b11155b151561094657600080fd5b6109548c8c8c8c8a87611d02565b600160a060020a0386166000908152600a602090815260408083208484529091529020546109829083611ce5565b600160a060020a0387166000908152600a602090815260408083208584529091529020557f3314c351c2a2a45771640a1442b843167a4da29bd543612311c031bbfb4ffa988c838c8e8d83028115156109d757fe5b60408051600160a060020a03968716815260208101959095529285168484015204606083015291891660808201523360a08201524260c082015290519081900360e00190a1505050505050505050505050565b604080516c010000000000000000000000003081028252600160a060020a03808a168083026014850152602884018a90529088169182026048840152605c8301879052607c8301869052609c830185905283519283900360bc018320336000818152600960209081528782208483528152878220805460ff191660011790559386529285018b905284860193909352606084018890526080840187905260a0840186905260c0840181905260e08401829052935190927fa93976f6b21519d0fbaa09d82403b467d7ebe18bca79db6e9bd0f72b72b7788d91908190036101000190a25050505050505050565b600054600160a060020a03163314610b2d57600080fd5b600160a060020a0381161515610b4257600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a0316331480610b945750600054600160a060020a031633145b1515610b9f57600080fd5b600355565b600a60209081526000928352604080842090915290825290205481565b60035481565b604080516c010000000000000000000000003081028252600160a060020a03808d1682026014840152602883018c90528a16026048820152605c8101889052607c8101879052609c810186905281519081900360bc019020336000908152600960209081528382208383529052919091205460ff1680610ce75750604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101839052815190819003603c018120600080835260208381018086529290925260ff88168385015260608301879052608083018690529251339360019360a08082019493601f198101939281900390910191865af1158015610cd2573d6000803e3d6000fd5b50505060206040510351600160a060020a0316145b1515610cf257600080fd5b336000818152600a602090815260408083208584528252918290208c90558151600160a060020a038e811682529181018d9052908b1681830152606081018a90526080810189905260a0810188905260ff871660c082015260e08101869052610100810185905290517f1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0918190036101200190a250505050505050505050565b3360009081526000805160206121da8339815191526020526040902054811115610dbb57600080fd5b3360009081526000805160206121da8339815191526020526040902054610de29082612179565b3360008181526000805160206121da8339815191526020526040808220939093559151909183919081818185875af1925050501515610e2057600080fd5b3360008181526000805160206121da8339815191526020908152604080832054815193845291830185905282810191909152517ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679181900360600190a250565b600160a060020a0382161515610e9557600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529051600160a060020a038416916323b872dd9160648083019260209291908290030181600087803b158015610f0357600080fd5b505af1158015610f17573d6000803e3d6000fd5b505050506040513d6020811015610f2d57600080fd5b50511515610f3a57600080fd5b600160a060020a0382166000908152600860209081526040808320338452909152902054610f689082611ce5565b600160a060020a0383166000818152600860209081526040808320338085529083529281902085905580519384529083018590528281019390935291517fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79181900360600190a25050565b600160a060020a0383161515610fe857600080fd5b600160a060020a0381161515610ffd57600080fd5b6000821161100a57600080fd5b6007805460ff19166001179055604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a038516916323b872dd9160648083019260209291908290030181600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050506040513d60208110156110af57600080fd5b505115156110bc57600080fd5b6007805460ff19169055600160a060020a038084166000908152600860209081526040808320938516835292905220546110f69083611ce5565b600160a060020a039384166000908152600860209081526040808320949096168252929092529290209190915550565b5050604080516c010000000000000000000000003081028252600160a060020a039a8b16810260148301526028820199909952968916909702604887015250605c850193909352607c840191909152609c83015282519182900360bc0190912092166000908152600a60209081528282209382529290925290205490565b600154600160a060020a031681565b600860209081526000928352604080842090915290825290205481565b600080808080600160a060020a03871615156111eb57600080fd5b3360009081526000805160206121da833981519152602052604081205488965094508411156112aa573360008181526000805160206121da833981519152602052604080822082905580517f6a523c5e000000000000000000000000000000000000000000000000000000008152600481019390935251600160a060020a03881692636a523c5e92889260248084019382900301818588803b15801561129057600080fd5b505af11580156112a4573d6000803e3d6000fd5b50505050505b600092505b85518361ffff16101561147d57858361ffff168151811015156112ce57fe5b602090810290910101519150600160a060020a03821615156112ef57600080fd5b50600160a060020a038116600090815260086020908152604080832033845290915290205480156114725781600160a060020a031663095ea7b386836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561139657600080fd5b505af11580156113aa573d6000803e3d6000fd5b505050506040513d60208110156113c057600080fd5b505115156113cd57600080fd5b600160a060020a03808316600081815260086020908152604080832033808552925280832083905580517f3c2e2a7500000000000000000000000000000000000000000000000000000000815260048101949094526024840186905260448401919091525192881692633c2e2a7592606480820193929182900301818387803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b505050505b6001909201916112af565b60408051600160a060020a0389168152905133917f0cd41587e1fdc62ecf8d0627f78a2e52dfb0ac9116b3c84027ce99ba7c2a198a919081900360200190a250505050505050565b600c5474010000000000000000000000000000000000000000900461ffff1681565b600254600160a060020a031681565b600160a060020a038116151561150b57600080fd5b6000341161151857600080fd5b600160a060020a03811660009081526000805160206121da83398151915260205260409020546115489034611ce5565b600160a060020a039190911660009081526000805160206121da8339815191526020526040902055565b600160a060020a03808d16600090815260086020908152604080832093851683529290529081205483118015906115ba5750826115b78e8e8e8e8e8e8e8e8e8e611a70565b10155b15156115c8575060006115cc565b5060015b9c9b505050505050505050505050565b600c54600160a060020a031681565b600054600160a060020a0316331461160257600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314806116545750600054600160a060020a031633145b151561165f57600080fd5b600655565b60065481565b600054600160a060020a0316331461168157600080fd5b600160a060020a038116151561169657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055481565b600160a060020a03821615156116e057600080fd5b600160a060020a038216600090815260086020908152604080832033845290915290205481111561171057600080fd5b600160a060020a038216600090815260086020908152604080832033845290915290205461173e9082612179565b600160a060020a0383166000818152600860209081526040808320338085529083528184209590955580517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101959095526024850186905251929363a9059cbb9360448083019491928390030190829087803b1580156117c257600080fd5b505af11580156117d6573d6000803e3d6000fd5b505050506040513d60208110156117ec57600080fd5b505115156117f957600080fd5b600160a060020a03821660008181526008602090815260408083203380855290835292819020548151948552918401859052838101919091525190917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567919081900360600190a25050565b600154600160a060020a03163314806118875750600054600160a060020a031633145b151561189257600080fd5b600160a060020a03811615156118a757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314806118f95750600054600160a060020a031633145b151561190457600080fd5b600555565b600154600160a060020a031633148061192c5750600054600160a060020a031633145b151561193757600080fd5b600455565b600b54600160a060020a031681565b600960209081526000928352604080842090915290825290205460ff1681565b60075460009060ff161561198157506001611986565b600080fd5b9392505050565b3360009081526000805160206121da83398151915260205260409020546119b49034611ce5565b3360008181526000805160206121da833981519152602081815260408084208690558484529181528151928352349083015281810193909352915190917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7919081900360600190a2565b730dd83b5013b2ad7094b1a7783d96ae0168f8262181565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b600054600160a060020a031681565b600080611a7b6121be565b308d8d8d8d8d8d6040518088600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140186815260200185600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401848152602001838152602001828152602001975050505050505050604051809103902091506009600088600160a060020a0316600160a060020a031681526020019081526020016000206000836000191660001916815260200190815260200160002060009054906101000a900460ff1680611c265750604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101849052815190819003603c018120600080835260208381018086529290925260ff8a168385015260608301899052608083018890529251600160a060020a038b169360019360a08082019493601f198101939281900390910191865af1158015611c11573d6000803e3d6000fd5b50505060206040510351600160a060020a0316145b8015611c325750884311155b1515611c415760009250611cd5565b600160a060020a0387166000908152600a60209081526040808320858452909152902054611c70908d90612179565b8152600160a060020a038b81166000908152600860209081526040808320938b16835292905220548a90611ca4908e612190565b811515611cad57fe5b046020820181905281511015611ccd578060005b60200201519250611cd5565b806001611cc1565b50509a9950505050505050505050565b600082820183811015611cf757600080fd5b8091505b5092915050565b600160a060020a038616730dd83b5013b2ad7094b1a7783d96ae0168f826211480611d495750600160a060020a038416730dd83b5013b2ad7094b1a7783d96ae0168f82621145b15611f7d57600160a060020a0386166000908152600860209081526040808320338452909152902054611d7c9082612179565b600160a060020a0387811660009081526008602090815260408083203384529091528082209390935590841681522054600554611dda9190670de0b6b3a764000090611dcb9085908303612190565b811515611dd457fe5b04611ce5565b600160a060020a03878116600090815260086020908152604080832087851684529091528082209390935560025490911681522054600554611e2c9190670de0b6b3a764000090611dcb908590612190565b600160a060020a0380881660009081526008602081815260408084206002548616855282528084209590955588841683529081528382209286168252919091522054611e8c9086611e7d8685612190565b811515611e8657fe5b04612179565b600160a060020a038581166000908152600860209081526040808320938716835292905281812092909255338252902054600654611efa9190670de0b6b3a7640000908890611ee790611ee190840389612190565b86612190565b811515611ef057fe5b04811515611dd457fe5b600160a060020a0385811660009081526008602090815260408083203384529091528082209390935560025490911681522054600654611f4f9190670de0b6b3a7640000908890611ee790611ee19089612190565b600160a060020a03808616600090815260086020908152604080832060025490941683529290522055612171565b600160a060020a0386166000908152600860209081526040808320338452909152902054611fab9082612179565b600160a060020a0387811660009081526008602090815260408083203384529091528082209390935590841681522054600354611ffa9190670de0b6b3a764000090611dcb9085908303612190565b600160a060020a0387811660009081526008602090815260408083208785168452909152808220939093556002549091168152205460035461204c9190670de0b6b3a764000090611dcb908590612190565b600160a060020a038088166000908152600860208181526040808420600254861685528252808420959095558884168352908152838220928616825291909152205461209d9086611e7d8685612190565b600160a060020a0385811660009081526008602090815260408083209387168352929052818120929092553382529020546004546120f29190670de0b6b3a7640000908890611ee790611ee190840389612190565b600160a060020a03858116600090815260086020908152604080832033845290915280822093909355600254909116815220546004546121479190670de0b6b3a7640000908890611ee790611ee19089612190565b600160a060020a038086166000908152600860209081526040808320600254909416835292905220555b505050505050565b6000808383111561218957600080fd5b5050900390565b6000808315156121a35760009150611cfb565b508282028284828115156121b357fe5b0414611cf757600080fd5b6040805180820182529060029082908038833950919291505056005eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7a165627a7a72305820469bfb5d27266bdeacadff166d98beae919f0558f7f13a798cb843dab207aaeb0029000000000000000000000000aa7f848d8dfd733d23e610cb2c84d1f1d1747c95000000000000000000000000a1129df7cbecb9ef71fc29aff2995d6af004d5510000000000000000000000009dbf9b49104f428bfa2d13985f3beec49ac2eec60000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000110d9316ec000000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000007e21c13cac00528f5217f8c0c06706a91afe4a48",
  "constructorArguments": "000000000000000000000000aa7f848d8dfd733d23e610cb2c84d1f1d1747c95000000000000000000000000a1129df7cbecb9ef71fc29aff2995d6af004d5510000000000000000000000009dbf9b49104f428bfa2d13985f3beec49ac2eec60000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000110d9316ec000000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000007e21c13cac00528f5217f8c0c06706a91afe4a48"
}