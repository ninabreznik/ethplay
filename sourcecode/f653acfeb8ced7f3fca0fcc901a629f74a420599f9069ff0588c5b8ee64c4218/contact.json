{
  "address": "0x453939ddbb64a8ce1da8b0648281ca281dfaa2ef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpinWin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SpinWinInterface\n */\ninterface SpinWinInterface {\n\tfunction refundPendingBets() external returns (bool);\n}\n\n\n/**\n * @title AdvertisingInterface\n */\ninterface AdvertisingInterface {\n\tfunction incrementBetCounter() external returns (bool);\n}\n\n\ncontract SpinWinLibraryInterface {\n\tfunction calculateWinningReward(uint256 betValue, uint256 playerNumber, uint256 houseEdge) external pure returns (uint256);\n\tfunction calculateTokenReward(address settingAddress, uint256 betValue, uint256 playerNumber, uint256 houseEdge) external constant returns (uint256);\n\tfunction generateRandomNumber(address settingAddress, uint256 betBlockNumber, uint256 extraData, uint256 divisor) external constant returns (uint256);\n\tfunction calculateClearBetBlocksReward(address settingAddress, address lotteryAddress) external constant returns (uint256);\n\tfunction calculateLotteryContribution(address settingAddress, address lotteryAddress, uint256 betValue) external constant returns (uint256);\n\tfunction calculateExchangeTokenValue(address settingAddress, uint256 tokenAmount) external constant returns (uint256, uint256, uint256, uint256);\n}\n\n\n/**\n * @title LotteryInterface\n */\ninterface LotteryInterface {\n\tfunction claimReward(address playerAddress, uint256 tokenAmount) external returns (bool);\n\tfunction calculateLotteryContributionPercentage() external constant returns (uint256);\n\tfunction getNumLottery() external constant returns (uint256);\n\tfunction isActive() external constant returns (bool);\n\tfunction getCurrentTicketMultiplierHonor() external constant returns (uint256);\n\tfunction getCurrentLotteryTargetBalance() external constant returns (uint256, uint256);\n}\n\n\n/**\n * @title SettingInterface\n */\ninterface SettingInterface {\n\tfunction uintSettings(bytes32 name) external constant returns (uint256);\n\tfunction boolSettings(bytes32 name) external constant returns (bool);\n\tfunction isActive() external constant returns (bool);\n\tfunction canBet(uint256 rewardValue, uint256 betValue, uint256 playerNumber, uint256 houseEdge) external constant returns (bool);\n\tfunction isExchangeAllowed(address playerAddress, uint256 tokenAmount) external constant returns (bool);\n\n\t/******************************************/\n\t/*          SPINWIN ONLY METHODS          */\n\t/******************************************/\n\tfunction spinwinSetUintSetting(bytes32 name, uint256 value) external;\n\tfunction spinwinIncrementUintSetting(bytes32 name) external;\n\tfunction spinwinSetBoolSetting(bytes32 name, bool value) external;\n\tfunction spinwinAddFunds(uint256 amount) external;\n\tfunction spinwinUpdateTokenToWeiExchangeRate() external;\n\tfunction spinwinRollDice(uint256 betValue) external;\n\tfunction spinwinUpdateWinMetric(uint256 playerProfit) external;\n\tfunction spinwinUpdateLoseMetric(uint256 betValue, uint256 tokenRewardValue) external;\n\tfunction spinwinUpdateLotteryContributionMetric(uint256 lotteryContribution) external;\n\tfunction spinwinUpdateExchangeMetric(uint256 exchangeAmount) external;\n\n\t/******************************************/\n\t/*      SPINLOTTERY ONLY METHODS          */\n\t/******************************************/\n\tfunction spinlotterySetUintSetting(bytes32 name, uint256 value) external;\n\tfunction spinlotteryIncrementUintSetting(bytes32 name) external;\n\tfunction spinlotterySetBoolSetting(bytes32 name, bool value) external;\n\tfunction spinlotteryUpdateTokenToWeiExchangeRate() external;\n\tfunction spinlotterySetMinBankroll(uint256 _minBankroll) external returns (bool);\n}\n\n\n/**\n * @title TokenInterface\n */\ninterface TokenInterface {\n\tfunction getTotalSupply() external constant returns (uint256);\n\tfunction getBalanceOf(address account) external constant returns (uint256);\n\tfunction transfer(address _to, uint256 _value) external returns (bool);\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\tfunction approve(address _spender, uint256 _value) external returns (bool success);\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool success);\n\tfunction burn(uint256 _value) external returns (bool success);\n\tfunction burnFrom(address _from, uint256 _value) external returns (bool success);\n\tfunction mintTransfer(address _to, uint _value) external returns (bool);\n\tfunction burnAt(address _at, uint _value) external returns (bool);\n}\n\n\n\n\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tpublic\n\t\treturns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\ncontract developed {\n\taddress public developer;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tdeveloper = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks only developer address is calling\n\t */\n\tmodifier onlyDeveloper {\n\t\trequire(msg.sender == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows developer to switch developer address\n\t * @param _developer The new developer address to be set\n\t */\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\n\t\tdeveloper = _developer;\n\t}\n\n\t/**\n\t * @dev Allows developer to withdraw ERC20 Token\n\t */\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\n\t\tif (_token.balanceOf(this) > 0) {\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n/**\n * @title SpinWin\n */\ncontract SpinWin is developed, SpinWinInterface {\n\tusing SafeMath for uint256;\n\n\taddress public tokenAddress;\n\taddress public settingAddress;\n\taddress public lotteryAddress;\n\n\tTokenInterface internal _spintoken;\n\tSettingInterface internal _setting;\n\tLotteryInterface internal _lottery;\n\tSpinWinLibraryInterface internal _lib;\n\tAdvertisingInterface internal _advertising;\n\n\t/**\n\t * @dev Player variables\n\t */\n\tstruct Bet {\n\t\taddress playerAddress;\n\t\tbytes32 betId;\n\t\tuint256 betValue;\n\t\tuint256 diceResult;\n\t\tuint256 playerNumber;\n\t\tuint256 houseEdge;\n\t\tuint256 rewardValue;\n\t\tuint256 tokenRewardValue;\n\t\tuint256 blockNumber;\n\t\tbool processed;\n\t}\n\tstruct TokenExchange {\n\t\taddress playerAddress;\n\t\tbytes32 exchangeId;\n\t\tbool processed;\n\t}\n\n\tmapping (uint256 => Bet) internal bets;\n\tmapping (bytes32 => uint256) internal betIdLookup;\n\tmapping (address => uint256) public playerPendingWithdrawals;\n\tmapping (address => uint256) public playerPendingTokenWithdrawals;\n\tmapping (address => address) public referees;\n\tmapping (bytes32 => TokenExchange) public tokenExchanges;\n\tmapping (address => uint256) public lotteryBlocksAmount;\n\n\tuint256 constant public TWO_DECIMALS = 100;\n\tuint256 constant public PERCENTAGE_DIVISOR = 10 ** 6;   // 1000000 = 100%\n\tuint256 constant public CURRENCY_DIVISOR = 10**18;\n\n\tuint256 public totalPendingBets;\n\n\t/**\n\t * @dev Log when bet is placed\n\t */\n\tevent LogBet(bytes32 indexed betId, address indexed playerAddress, uint256 playerNumber, uint256 betValue, uint256 houseEdge, uint256 rewardValue, uint256 tokenRewardValue);\n\n\t/**\n\t * @dev Log when bet is cleared\n\t *\n\t * Status:\n\t * -2 = lose + failed mint and transfer\n\t * -1 = lose + failed send\n\t * 0 = lose\n\t * 1 = win\n\t * 2 = win + failed send\n\t * 3 = refund\n\t * 4 = refund + failed send\n\t * 5 = owner cancel + refund\n\t * 6 = owner cancel + refund + failed send\n\t */\n\tevent LogResult(bytes32 indexed betId, address indexed playerAddress, uint256 playerNumber, uint256 diceResult, uint256 betValue, uint256 houseEdge, uint256 rewardValue, uint256 tokenRewardValue, int256 status);\n\n\t/**\n\t * @dev Log when spinwin contributes some ETH to the lottery contract address\n\t */\n\tevent LogLotteryContribution(bytes32 indexed betId, address indexed playerAddress, uint256 weiValue);\n\n\t/**\n\t * @dev Log when spinwin rewards the referee of a bet or the person clears bet\n\t * rewardType\n\t * 1 = referral\n\t * 2 = clearBet\n\t */\n\tevent LogRewardLotteryBlocks(address indexed receiver, bytes32 indexed betId, uint256 lottoBlocksAmount, uint256 rewardType, uint256 status);\n\n\t/**\n\t * @dev Log when player clears bets\n\t */\n\tevent LogClearBets(address indexed playerAddress);\n\n\t/**\n\t * @dev Log when player claims the lottery blocks reward\n\t *\n\t * Status:\n\t * 0 = failed\n\t * 1 = success\n\t */\n\tevent LogClaimLotteryBlocks(address indexed playerAddress, uint256 numLottery, uint256 claimAmount, uint256 claimStatus);\n\n\t/**\n\t * @dev Log when player exchanges token to Wei\n\t *\n\t * Status:\n\t * 0 = failed send\n\t * 1 = success\n\t * 2 = failed destroy token\n\t */\n\tevent LogTokenExchange(bytes32 indexed exchangeId, address indexed playerAddress, uint256 tokenValue, uint256 tokenToWeiExchangeRate, uint256 weiValue, uint256 receivedWeiValue, uint256 remainderTokenValue, uint256 status);\n\n\t/**\n\t * @dev Log when player withdraws balance from failed transfer\n\t *\n\t * Status:\n\t * 0 = failed\n\t * 1 = success\n\t */\n\tevent LogPlayerWithdrawBalance(address indexed playerAddress, uint256 withdrawAmount, uint256 status);\n\n\t/**\n\t * @dev Log when player withdraw token balance from failed token transfer\n\t *\n\t * Status:\n\t * 0 = failed\n\t * 1 = success\n\t */\n\tevent LogPlayerWithdrawTokenBalance(address indexed playerAddress, uint256 withdrawAmount, uint256 status);\n\n\t/**\n\t * @dev Log when a bet ID is not found during clear bet\n\t */\n\tevent LogBetNotFound(bytes32 indexed betId);\n\n\t/**\n\t * @dev Log when developer cancel existing active bet\n\t */\n\tevent LogDeveloperCancelBet(bytes32 indexed betId, address indexed playerAddress);\n\n\t/**\n\t * Constructor\n\t * @param _tokenAddress SpinToken contract address\n\t * @param _settingAddress GameSetting contract address\n\t * @param _libraryAddress SpinWinLibrary contract address\n\t */\n\tconstructor(address _tokenAddress, address _settingAddress, address _libraryAddress) public {\n\t\ttokenAddress = _tokenAddress;\n\t\tsettingAddress = _settingAddress;\n\t\t_spintoken = TokenInterface(_tokenAddress);\n\t\t_setting = SettingInterface(_settingAddress);\n\t\t_lib = SpinWinLibraryInterface(_libraryAddress);\n\t}\n\n\t/**\n\t * @dev Checks if contract is active\n\t */\n\tmodifier isActive {\n\t\trequire(_setting.isActive() == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks whether a bet is allowed, and player profit, bet value, house edge and player number are within range\n\t */\n\tmodifier canBet(uint256 _betValue, uint256 _playerNumber, uint256 _houseEdge) {\n\t\trequire(_setting.canBet(_lib.calculateWinningReward(_betValue, _playerNumber, _houseEdge), _betValue, _playerNumber, _houseEdge) == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if bet exist\n\t */\n\tmodifier betExist(bytes32 betId, address playerAddress) {\n\t\trequire(betIdLookup[betId] > 0 && bets[betIdLookup[betId]].betId == betId && bets[betIdLookup[betId]].playerAddress == playerAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if token exchange is allowed\n\t */\n\tmodifier isExchangeAllowed(address playerAddress, uint256 tokenAmount) {\n\t\trequire(_setting.isExchangeAllowed(playerAddress, tokenAmount) == true);\n\t\t_;\n\t}\n\n\t/******************************************/\n\t/*       DEVELOPER ONLY METHODS           */\n\t/******************************************/\n\t/**\n\t * @dev Allows developer to set lottery contract address\n\t * @param _lotteryAddress The new lottery contract address to be set\n\t */\n\tfunction devSetLotteryAddress(address _lotteryAddress) public onlyDeveloper {\n\t\trequire (_lotteryAddress != address(0));\n\t\tlotteryAddress = _lotteryAddress;\n\t\t_lottery = LotteryInterface(_lotteryAddress);\n\t}\n\n\t/**\n\t * @dev Allows developer to set advertising contract address\n\t * @param _advertisingAddress The new advertising contract address to be set\n\t */\n\tfunction devSetAdvertisingAddress(address _advertisingAddress) public onlyDeveloper {\n\t\trequire (_advertisingAddress != address(0));\n\t\t_advertising = AdvertisingInterface(_advertisingAddress);\n\t}\n\n\t/**\n\t * @dev Allows developer to get bet internal ID based on public betId\n\t * @param betId The public betId\n\t * @return The bet internal ID\n\t */\n\tfunction devGetBetInternalId(bytes32 betId) public onlyDeveloper constant returns (uint256) {\n\t\treturn (betIdLookup[betId]);\n\t}\n\n\t/**\n\t * @dev Allows developer to get bet info based on `betInternalId`\n\t * @param betInternalId The bet internal ID to be queried\n\t * @return The bet information\n\t */\n\tfunction devGetBet(uint256 betInternalId) public\n\t\tonlyDeveloper\n\t\tconstant returns (address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\n\t\tBet memory _bet = bets[betInternalId];\n\t\treturn (_bet.playerAddress, _bet.betValue, _bet.diceResult, _bet.playerNumber, _bet.houseEdge, _bet.rewardValue, _bet.tokenRewardValue, _bet.blockNumber, _bet.processed);\n\t}\n\n\t/**\n\t * @dev Allows developer to manually refund existing active bet.\n\t * @param betId The ID of the bet to be cancelled\n\t * @return Return true if success\n\t */\n\tfunction devRefundBet(bytes32 betId) public onlyDeveloper returns (bool) {\n\t\trequire (betIdLookup[betId] > 0);\n\n\t\tBet storage _bet = bets[betIdLookup[betId]];\n\n\t\trequire(_bet.processed == false);\n\n\t\t_bet.processed = true;\n\t\tuint256 betValue = _bet.betValue;\n\t\t_bet.betValue = 0;\n\t\t_bet.rewardValue = 0;\n\t\t_bet.tokenRewardValue = 0;\n\n\t\t_refundPlayer(betIdLookup[betId], betValue);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add funds to the contract\n\t */\n\tfunction () public payable isActive {\n\t\t_setting.spinwinAddFunds(msg.value);\n\t}\n\n\t/******************************************/\n\t/*           SETTING METHODS              */\n\t/******************************************/\n\t/**\n\t * @dev Triggered during escape hatch. Go through each pending bets\n\t * and move the bet value to playerPendingWithdrawals so that player\n\t * can withdraw later\n\t */\n\tfunction refundPendingBets() public returns (bool) {\n\t\trequire (msg.sender == settingAddress);\n\t\tuint256 totalBets = _setting.uintSettings('totalBets');\n\t\tif (totalBets > 0) {\n\t\t\tfor (uint256 i = 1; i <= totalBets; i++) {\n\t\t\t\tBet storage _bet = bets[i];\n\t\t\t\tif (_bet.processed == false) {\n\t\t\t\t\tuint256 _betValue = _bet.betValue;\n\t\t\t\t\t_bet.processed = true;\n\t\t\t\t\t_bet.betValue = 0;\n\t\t\t\t\tplayerPendingWithdrawals[_bet.playerAddress] = playerPendingWithdrawals[_bet.playerAddress].add(_betValue);\n\t\t\t\t\temit LogResult(_bet.betId, _bet.playerAddress, _bet.playerNumber, 0, _betValue, _bet.houseEdge, 0, 0, 4);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/******************************************/\n\t/*            PUBLIC METHODS              */\n\t/******************************************/\n\t/**\n\t * @dev Player places a bet. If it has a `referrerAddress`, we want to give reward to the referrer accordingly.\n\t * @dev If there is a bet that needs to be cleared, we will do it here too.\n\t * @param playerNumber The number that the player chose\n\t * @param houseEdge The house edge percentage that the player chose\n\t * @param clearBetId The bet ID to be cleared\n\t * @param referreeAddress The referree address if exist\n\t * @return Return true if success\n\t */\n\tfunction rollDice(uint256 playerNumber, uint256 houseEdge, bytes32 clearBetId, address referreeAddress) public\n\t\tpayable\n\t\tcanBet(msg.value, playerNumber, houseEdge)\n\t\treturns (bool) {\n\t\tuint256 betInternalId = _storeBet(msg.value, msg.sender, playerNumber, houseEdge);\n\n\t\t// Check if we need to clear a pending bet\n\t\tif (clearBetId != '') {\n\t\t\t_clearSingleBet(msg.sender, clearBetId, _setting.uintSettings('blockSecurityCount'));\n\t\t}\n\n\t\t// Check if we need to reward the referree\n\t\t_rewardReferree(referreeAddress, betInternalId);\n\n\t\t_advertising.incrementBetCounter();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Player can clear multiple bets\n\t * @param betIds The bet ids to be cleared\n\t */\n\tfunction clearBets(bytes32[] betIds) public isActive {\n\t\trequire (betIds.length > 0 && betIds.length <= _setting.uintSettings('maxNumClearBets'));\n\t\tbool canClear = false;\n\t\tuint256 blockSecurityCount = _setting.uintSettings('blockSecurityCount');\n\t\tfor (uint256 i = 0; i < betIds.length; i++) {\n\t\t\tBet memory _bet = bets[betIdLookup[betIds[i]]];\n\t\t\tif (_bet.processed == false && _setting.uintSettings('contractBalance') >= _bet.rewardValue && (block.number.sub(_bet.blockNumber)) >= blockSecurityCount) {\n\t\t\t\tcanClear = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\trequire(canClear == true);\n\n\t\t// Loop through each bets and clear it if possible\n\t\tfor (i = 0; i < betIds.length; i++) {\n\t\t\t_clearSingleBet(msg.sender, betIds[i], blockSecurityCount);\n\t\t}\n\t\temit LogClearBets(msg.sender);\n\t}\n\n\t/**\n\t * @dev Allow player to claim lottery blocks reward\n\t * and spend it on lottery blocks\n\t */\n\tfunction claimLotteryBlocks() public isActive {\n\t\trequire (_lottery.isActive() == true);\n\t\trequire (lotteryBlocksAmount[msg.sender] > 0);\n\t\tuint256 claimAmount = lotteryBlocksAmount[msg.sender];\n\t\tlotteryBlocksAmount[msg.sender] = 0;\n\t\tuint256 claimStatus = 1;\n\t\tif (!_lottery.claimReward(msg.sender, claimAmount)) {\n\t\t\tclaimStatus = 0;\n\t\t\tlotteryBlocksAmount[msg.sender] = claimAmount;\n\t\t}\n\t\temit LogClaimLotteryBlocks(msg.sender, _lottery.getNumLottery(), claimAmount, claimStatus);\n\t}\n\n\t/**\n\t * @dev Player exchanges token for Wei\n\t * @param tokenAmount The amount of token to be exchanged\n\t * @return Return true if success\n\t */\n\tfunction exchangeToken(uint256 tokenAmount) public\n\t\tisExchangeAllowed(msg.sender, tokenAmount) {\n\t\t(uint256 weiValue, uint256 sendWei, uint256 tokenRemainder, uint256 burnToken) = _lib.calculateExchangeTokenValue(settingAddress, tokenAmount);\n\n\t\t_setting.spinwinIncrementUintSetting('totalTokenExchanges');\n\n\t\t// Generate exchangeId\n\t\tbytes32 _exchangeId = keccak256(abi.encodePacked(this, msg.sender, _setting.uintSettings('totalTokenExchanges')));\n\t\tTokenExchange storage _tokenExchange = tokenExchanges[_exchangeId];\n\n\t\t// Make sure we don't process the exchange bet twice\n\t\trequire (_tokenExchange.processed == false);\n\n\t\t// Update exchange metric\n\t\t_setting.spinwinUpdateExchangeMetric(sendWei);\n\n\t\t/*\n\t\t * Store the info about this exchange\n\t\t */\n\t\t_tokenExchange.playerAddress = msg.sender;\n\t\t_tokenExchange.exchangeId = _exchangeId;\n\t\t_tokenExchange.processed = true;\n\n\t\t/*\n\t\t * Burn token at this address\n\t\t */\n\t\tif (!_spintoken.burnAt(_tokenExchange.playerAddress, burnToken)) {\n\t\t\tuint256 exchangeStatus = 2; // status = failed destroy token\n\n\t\t} else {\n\t\t\tif (!_tokenExchange.playerAddress.send(sendWei)) {\n\t\t\t\texchangeStatus = 0; // status = failed send\n\n\t\t\t\t// If send failed, let player withdraw via playerWithdrawPendingTransactions\n\t\t\t\tplayerPendingWithdrawals[_tokenExchange.playerAddress] = playerPendingWithdrawals[_tokenExchange.playerAddress].add(sendWei);\n\t\t\t} else {\n\t\t\t\texchangeStatus = 1; // status = success\n\t\t\t}\n\t\t}\n\t\t// Update the token to wei exchange rate\n\t\t_setting.spinwinUpdateTokenToWeiExchangeRate();\n\n\t\temit LogTokenExchange(_tokenExchange.exchangeId, _tokenExchange.playerAddress, tokenAmount, _setting.uintSettings('tokenToWeiExchangeRateHonor'), weiValue, sendWei, tokenRemainder, exchangeStatus);\n\t}\n\n\t/**\n\t * @dev Calculate winning ETH when player wins\n\t * @param betValue The amount of ETH for this bet\n\t * @param playerNumber The number that player chose\n\t * @param houseEdge The house edge for this bet\n\t * @return The amount of ETH to be sent to player if he/she wins\n\t */\n\tfunction calculateWinningReward(uint256 betValue, uint256 playerNumber, uint256 houseEdge) public view returns (uint256) {\n\t\treturn _lib.calculateWinningReward(betValue, playerNumber, houseEdge);\n\t}\n\n\t/**\n\t * @dev Calculates token reward amount when player loses\n\t * @param betValue The amount of ETH for this bet\n\t * @param playerNumber The number that player chose\n\t * @param houseEdge The house edge for this bet\n\t * @return The amount of token to be sent to player if he/she loses\n\t */\n\tfunction calculateTokenReward(uint256 betValue, uint256 playerNumber, uint256 houseEdge) public constant returns (uint256) {\n\t\treturn _lib.calculateTokenReward(settingAddress, betValue, playerNumber, houseEdge);\n\t}\n\n\t/**\n\t * @dev Player withdraws balance in case of a failed refund or failed win send\n\t */\n\tfunction playerWithdrawPendingTransactions() public {\n\t\trequire(playerPendingWithdrawals[msg.sender] > 0);\n\t\tuint256 withdrawAmount = playerPendingWithdrawals[msg.sender];\n\t\tplayerPendingWithdrawals[msg.sender] = 0;\n\n\t\t// External call to untrusted contract\n\t\tuint256 status = 1; // status = success\n\t\tif (!msg.sender.send(withdrawAmount)) {\n\t\t\tstatus = 0; // status = failed\n\n\t\t\t/*\n\t\t\t * If send failed, revert playerPendingWithdrawals[msg.sender] = 0\n\t\t\t * so that player can try to withdraw again later\n\t\t\t */\n\t\t\tplayerPendingWithdrawals[msg.sender] = withdrawAmount;\n\t\t}\n\t\temit LogPlayerWithdrawBalance(msg.sender, withdrawAmount, status);\n\t}\n\n\t/**\n\t * @dev Players withdraws SPIN token balance in case of a failed token transfer\n\t */\n\tfunction playerWithdrawPendingTokenTransactions() public {\n\t\trequire(playerPendingTokenWithdrawals[msg.sender] > 0);\n\t\tuint256 withdrawAmount = playerPendingTokenWithdrawals[msg.sender];\n\t\tplayerPendingTokenWithdrawals[msg.sender] = 0;\n\n\t\t// Mint and transfer token to msg.sender\n\t\tuint256 status = 1; // status = success\n\t\tif (!_spintoken.mintTransfer(msg.sender, withdrawAmount)) {\n\t\t\tstatus = 0; // status = failed\n\t\t\t/*\n\t\t\t * If transfer failed, revert playerPendingTokenWithdrawals[msg.sender] = 0\n\t\t\t * so that player can try to withdraw again later\n\t\t\t */\n\t\t\tplayerPendingTokenWithdrawals[msg.sender] = withdrawAmount;\n\t\t}\n\t\temit LogPlayerWithdrawTokenBalance(msg.sender, withdrawAmount, status);\n\t}\n\n\t/**\n\t * @dev Player gets bet information based on betId\n\t * @return The bet information\n\t */\n\tfunction playerGetBet(bytes32 betId) public\n\t\tconstant returns (uint256, uint256, uint256, uint256, uint256, uint256, bool) {\n\t\trequire(betIdLookup[betId] > 0 && bets[betIdLookup[betId]].betId == betId);\n\t\tBet memory _bet = bets[betIdLookup[betId]];\n\t\treturn (_bet.betValue, _bet.diceResult, _bet.playerNumber, _bet.houseEdge, _bet.rewardValue, _bet.tokenRewardValue, _bet.processed);\n\t}\n\n\t/**\n\t * @dev Player gets pending bet IDs\n\t * @return The pending bet IDs\n\t */\n\tfunction playerGetPendingBetIds() public constant returns (bytes32[]) {\n\t\tbytes32[] memory pendingBetIds = new bytes32[](totalPendingBets);\n\t\tif (totalPendingBets > 0) {\n\t\t\tuint256 counter = 0;\n\t\t\tfor (uint256 i = 1; i <= _setting.uintSettings('totalBets'); i++) {\n\t\t\t\tBet memory _bet = bets[i];\n\t\t\t\tif (_bet.processed == false) {\n\t\t\t\t\tpendingBetIds[counter] = _bet.betId;\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t\tif (counter == totalPendingBets) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn pendingBetIds;\n\t}\n\n\t/**\n\t * @dev Player gets pending bet information based on betId\n\t * @return The bet information\n\t */\n\tfunction playerGetPendingBet(bytes32 betId) public\n\t\tconstant returns (address, uint256, uint256, uint256, uint256) {\n\t\trequire(betIdLookup[betId] > 0 && bets[betIdLookup[betId]].betId == betId);\n\t\tBet memory _bet = bets[betIdLookup[betId]];\n\t\treturn (_bet.playerAddress, _bet.playerNumber, _bet.betValue, _bet.houseEdge, _bet.blockNumber);\n\t}\n\n\t/**\n\t * @dev Calculates lottery block rewards when player clears a bet\n\t * @return The amount of lottery blocks to be rewarded when player clears bet\n\t */\n\tfunction calculateClearBetBlocksReward() public constant returns (uint256) {\n\t\treturn _lib.calculateClearBetBlocksReward(settingAddress, lotteryAddress);\n\t}\n\n\n\t/******************************************/\n\t/*           INTERNAL METHODS             */\n\t/******************************************/\n\n\t/**\n\t * @dev Stores bet information.\n\t * @param betValue The value of the bet\n\t * @param playerAddress The player address\n\t * @param playerNumber The number that player chose\n\t * @param houseEdge The house edge for this bet\n\t * @return The internal  bet ID of this bet\n\t */\n\tfunction _storeBet (uint256 betValue, address playerAddress, uint256 playerNumber, uint256 houseEdge) internal returns (uint256) {\n\t\t// Update the setting metric\n\t\t_setting.spinwinRollDice(betValue);\n\n\t\tuint256 betInternalId = _setting.uintSettings('totalBets');\n\n\t\t// Generate betId\n\t\tbytes32 betId = keccak256(abi.encodePacked(this, playerAddress, betInternalId));\n\n\t\tBet storage _bet = bets[betInternalId];\n\n\t\t// Make sure we don't process the same bet twice\n\t\trequire (_bet.processed == false);\n\n\t\t// Store the info about this bet\n\t\tbetIdLookup[betId] = betInternalId;\n\t\t_bet.playerAddress = playerAddress;\n\t\t_bet.betId = betId;\n\t\t_bet.betValue = betValue;\n\t\t_bet.playerNumber = playerNumber;\n\t\t_bet.houseEdge = houseEdge;\n\n\t\t// Safely calculate winning reward\n\t\t_bet.rewardValue = calculateWinningReward(betValue, playerNumber, houseEdge);\n\n\t\t// Safely calculate token payout\n\t\t_bet.tokenRewardValue = calculateTokenReward(betValue, playerNumber, houseEdge);\n\t\t_bet.blockNumber = block.number;\n\n\t\t// Update the pendingBets counter\n\t\ttotalPendingBets++;\n\n\t\temit LogBet(_bet.betId, _bet.playerAddress, _bet.playerNumber, _bet.betValue, _bet.houseEdge, _bet.rewardValue, _bet.tokenRewardValue);\n\t\treturn betInternalId;\n\t}\n\n\t/**\n\t * @dev Internal function to clear single bet\n\t * @param playerAddress The player who clears this bet\n\t * @param betId The bet ID to be cleared\n\t * @param blockSecurityCount The block security count to be checked\n\t * @return true if success, false otherwise\n\t */\n\tfunction _clearSingleBet(address playerAddress, bytes32 betId, uint256 blockSecurityCount) internal returns (bool) {\n\t\tif (betIdLookup[betId] > 0) {\n\t\t\tBet memory _bet = bets[betIdLookup[betId]];\n\n\t\t\t/* Check if we can clear this bet\n\t\t\t * - Make sure we don't process the same bet twice\n\t\t\t * - Check if contract can payout on win\n\t\t\t * - block number difference >= blockSecurityCount\n\t\t\t */\n\t\t\tif (_bet.processed == false && _setting.uintSettings('contractBalance') >= _bet.rewardValue && (block.number.sub(_bet.blockNumber)) >= blockSecurityCount) {\n\t\t\t\t_processBet(playerAddress, betIdLookup[betId], true);\n\t\t\t} else {\n\t\t\t\temit LogRewardLotteryBlocks(playerAddress, _bet.betId, 0, 2, 0);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\temit LogBetNotFound(betId);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Internal function to process existing bet.\n\t * If no dice result, then we initiate a refund.\n\t * If player wins (dice result < player number), we send player winning ETH.\n\t * If player loses (dice result >= player number), we send player some SPIN token.\n\t * If player loses and bankroll goal is reached, spinwin will contribute some ETH to lottery contract address.\n\t *\n\t * @param triggerAddress The player who clears this bet\n\t * @param betInternalId The bet internal ID to be processed\n\t * @param isClearMultiple Whether or not this is part of clear multiple bets transaction\n\t * @return Return true if success\n\t */\n\tfunction _processBet(address triggerAddress, uint256 betInternalId, bool isClearMultiple) internal returns (bool) {\n\t\tBet storage _bet =  bets[betInternalId];\n\t\tuint256 _betValue = _bet.betValue;\n\t\tuint256 _rewardValue = _bet.rewardValue;\n\t\tuint256 _tokenRewardValue = _bet.tokenRewardValue;\n\n\t\t// Prevent re-entrancy\n\t\t_bet.processed = true;\n\t\t_bet.betValue = 0;\n\t\t_bet.rewardValue = 0;\n\t\t_bet.tokenRewardValue = 0;\n\n\t\t// Generate the result\n\t\t_bet.diceResult = _lib.generateRandomNumber(settingAddress, _bet.blockNumber, _setting.uintSettings('totalBets').add(_setting.uintSettings('totalWeiWagered')), 100);\n\n\t\tif (_bet.diceResult == 0) {\n\t\t\t/*\n\t\t\t * Invalid random number. Refund the player\n\t\t\t */\n\t\t\t_refundPlayer(betInternalId, _betValue);\n\t\t} else if (_bet.diceResult < _bet.playerNumber) {\n\t\t\t/*\n\t\t\t * Player wins. Send the player the winning eth amount\n\t\t\t */\n\t\t\t_payWinner(betInternalId, _betValue, _rewardValue);\n\t\t} else {\n\t\t\t/*\n\t\t\t * Player loses. Send the player 1 wei and the spintoken amount\n\t\t\t */\n\t\t\t_payLoser(betInternalId, _betValue, _tokenRewardValue);\n\t\t}\n\t\t// Update the pendingBets counter\n\t\ttotalPendingBets--;\n\n\t\t// Update the token to wei exchange rate\n\t\t_setting.spinwinUpdateTokenToWeiExchangeRate();\n\n\t\t// Calculate the lottery blocks reward for this transaction\n\t\tuint256 lotteryBlocksReward = calculateClearBetBlocksReward();\n\n\t\t// If this is a single clear (from placing bet), we want to multiply this with clearSingleBetMultiplier\n\t\tif (isClearMultiple == false) {\n\t\t\tuint256 multiplier = _setting.uintSettings('clearSingleBetMultiplier');\n\t\t} else {\n\t\t\tmultiplier = _setting.uintSettings('clearMultipleBetsMultiplier');\n\t\t}\n\t\tlotteryBlocksReward = (lotteryBlocksReward.mul(multiplier)).div(TWO_DECIMALS);\n\n\t\tlotteryBlocksAmount[triggerAddress] = lotteryBlocksAmount[triggerAddress].add(lotteryBlocksReward);\n\t\temit LogRewardLotteryBlocks(triggerAddress, _bet.betId, lotteryBlocksReward, 2, 1);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Refund the player when we are unable to determine the dice result\n\t * @param betInternalId The bet internal ID\n\t * @param refundAmount The amount to be refunded\n\t */\n\tfunction _refundPlayer(uint256 betInternalId, uint256 refundAmount) internal {\n\t\tBet memory _bet =  bets[betInternalId];\n\t\t/*\n\t\t * Send refund - external call to an untrusted contract\n\t\t * If send fails, map refund value to playerPendingWithdrawals[address]\n\t\t * for withdrawal later via playerWithdrawPendingTransactions\n\t\t */\n\t\tint256 betStatus = 3; // status = refund\n\t\tif (!_bet.playerAddress.send(refundAmount)) {\n\t\t\tbetStatus = 4; // status = refund + failed send\n\n\t\t\t// If send failed, let player withdraw via playerWithdrawPendingTransactions\n\t\t\tplayerPendingWithdrawals[_bet.playerAddress] = playerPendingWithdrawals[_bet.playerAddress].add(refundAmount);\n\t\t}\n\t\temit LogResult(_bet.betId, _bet.playerAddress, _bet.playerNumber, _bet.diceResult, refundAmount, _bet.houseEdge, 0, 0, betStatus);\n\t}\n\n\t/**\n\t * @dev Pays the player the winning eth amount\n\t * @param betInternalId The bet internal ID\n\t * @param betValue The original wager\n\t * @param playerProfit The player profit\n\t */\n\tfunction _payWinner(uint256 betInternalId, uint256 betValue, uint256 playerProfit) internal {\n\t\tBet memory _bet =  bets[betInternalId];\n\t\t// Update setting's contract balance and total wei won\n\t\t_setting.spinwinUpdateWinMetric(playerProfit);\n\n\t\t// Safely calculate payout via profit plus original wager\n\t\tplayerProfit = playerProfit.add(betValue);\n\n\t\t/*\n\t\t * Send win - external call to an untrusted contract\n\t\t * If send fails, map reward value to playerPendingWithdrawals[address]\n\t\t * for withdrawal later via playerWithdrawPendingTransactions\n\t\t */\n\t\tint256 betStatus = 1; // status = win\n\t\tif (!_bet.playerAddress.send(playerProfit)) {\n\t\t\tbetStatus = 2; // status = win + failed send\n\n\t\t\t// If send failed, let player withdraw via playerWithdrawPendingTransactions\n\t\t\tplayerPendingWithdrawals[_bet.playerAddress] = playerPendingWithdrawals[_bet.playerAddress].add(playerProfit);\n\t\t}\n\t\temit LogResult(_bet.betId, _bet.playerAddress, _bet.playerNumber, _bet.diceResult, betValue, _bet.houseEdge, playerProfit, 0, betStatus);\n\t}\n\n\t/**\n\t * @dev Pays the player 1 wei and the spintoken amount\n\t * @param betInternalId The bet internal ID\n\t * @param betValue The original wager\n\t * @param tokenRewardValue The token reward for this bet\n\t */\n\tfunction _payLoser(uint256 betInternalId, uint256 betValue, uint256 tokenRewardValue) internal {\n\t\tBet memory _bet =  bets[betInternalId];\n\t\t/*\n\t\t * Update the game setting metric when player loses\n\t\t */\n\t\t_setting.spinwinUpdateLoseMetric(betValue, tokenRewardValue);\n\n\t\tint256 betStatus; // status = lose\n\n\t\t/*\n\t\t * Send 1 Wei to losing bet - external call to an untrusted contract\n\t\t */\n\t\tif (!_bet.playerAddress.send(1)) {\n\t\t\tbetStatus = -1; // status = lose + failed send\n\n\t\t\t// If send failed, let player withdraw via playerWithdrawPendingTransactions\n\t\t\tplayerPendingWithdrawals[_bet.playerAddress] = playerPendingWithdrawals[_bet.playerAddress].add(1);\n\t\t}\n\n\t\t/*\n\t\t * Mint and transfer token reward to this player\n\t\t */\n\t\tif (tokenRewardValue > 0) {\n\t\t\tif (!_spintoken.mintTransfer(_bet.playerAddress, tokenRewardValue)) {\n\t\t\t\tbetStatus = -2; // status = lose + failed mint and transfer\n\n\t\t\t\t// If transfer token failed, let player withdraw via playerWithdrawPendingTokenTransactions\n\t\t\t\tplayerPendingTokenWithdrawals[_bet.playerAddress] = playerPendingTokenWithdrawals[_bet.playerAddress].add(tokenRewardValue);\n\t\t\t}\n\t\t}\n\t\temit LogResult(_bet.betId, _bet.playerAddress, _bet.playerNumber, _bet.diceResult, betValue, _bet.houseEdge, 1, tokenRewardValue, betStatus);\n\t\t_sendLotteryContribution(betInternalId, betValue);\n\t}\n\n\t/**\n\t * @dev Contribute the house win to lottery address\n\t * @param betInternalId The bet internal ID\n\t * @param betValue The original wager\n\t * @return Return true if success\n\t */\n\tfunction _sendLotteryContribution(uint256 betInternalId, uint256 betValue) internal returns (bool) {\n\t\t/*\n\t\t * If contractBalance >= minBankroll, contribute the a percentage of the winning to lottery\n\t\t */\n\t\tuint256 contractBalance = _setting.uintSettings('contractBalance');\n\t\tif (contractBalance >= _setting.uintSettings('minBankroll')) {\n\t\t\tBet memory _bet =  bets[betInternalId];\n\t\t\tuint256 lotteryContribution = _lib.calculateLotteryContribution(settingAddress, lotteryAddress, betValue);\n\n\t\t\tif (lotteryContribution > 0 && contractBalance >= lotteryContribution) {\n\t\t\t\t// Safely adjust contractBalance\n\t\t\t\t_setting.spinwinUpdateLotteryContributionMetric(lotteryContribution);\n\n\t\t\t\temit LogLotteryContribution(_bet.betId, _bet.playerAddress, lotteryContribution);\n\n\t\t\t\t// Contribute to the lottery\n\t\t\t\tif (!lotteryAddress.call.gas(_setting.uintSettings('gasForLottery')).value(lotteryContribution)()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Reward the referree if necessary.\n\t * @param referreeAddress The address of the referree\n\t * @param betInternalId The internal bet ID\n\t */\n\tfunction _rewardReferree(address referreeAddress, uint256 betInternalId) internal {\n\t\tBet memory _bet = bets[betInternalId];\n\n\t\t// If the player already has a referee, use that address\n\t\tif (referees[_bet.playerAddress] != address(0)) {\n\t\t\treferreeAddress = referees[_bet.playerAddress];\n\t\t}\n\t\tif (referreeAddress != address(0) && referreeAddress != _bet.playerAddress) {\n\t\t\treferees[_bet.playerAddress] = referreeAddress;\n\t\t\tuint256 _tokenForLotto = _bet.tokenRewardValue.mul(_setting.uintSettings('referralPercent')).div(PERCENTAGE_DIVISOR);\n\t\t\tlotteryBlocksAmount[referreeAddress] = lotteryBlocksAmount[referreeAddress].add(_tokenForLotto);\n\t\t\temit LogRewardLotteryBlocks(referreeAddress, _bet.betId, _tokenForLotto, 1, 1);\n\t\t}\n\t}\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b42f5366792ed7c08995451c1a93780b7554762b000000000000000000000000b654457bab03011531ef939cb31f76eb36e2ddf3000000000000000000000000ea1853f9162ba2b6594fc18d60c66bf4b6211e0d"
}