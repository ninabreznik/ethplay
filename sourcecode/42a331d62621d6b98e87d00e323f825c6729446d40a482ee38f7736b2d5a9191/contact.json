{
  "address": "0x37256d58e298cacaa82aa0527d56521f1b19e1f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthereumAlpes",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-27\n*/\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a / b;\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n}\n\ncontract Owned {\n  address public owner;\n  function Owned() {\n    owner = msg.sender;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n    function allowance(address owner, address spender) constant returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract StandardToken is ERC20 {\n    \n    using SafeMath for uint256;\n    \n    mapping(address => uint256) balances;\n    \n    mapping (address => mapping (address => uint256)) allowed;\n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n      var _allowance = allowed[_from][msg.sender];\n      balances[_to] = balances[_to].add(_value);\n      balances[_from] = balances[_from].sub(_value);\n      allowed[_from][msg.sender] = _allowance.sub(_value);\n      Transfer(_from, _to, _value);\n      return true;\n    }\n\n   function approve(address _spender, uint256 _value) returns (bool) {\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n   }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n  \ncontract EthereumAlpes is StandardToken, Owned {\n  string public constant name = \"Ethereum Alpes\";\n  string public constant symbol = \"EALP\";\n  uint public constant decimals = 18;\n  uint256 public initialSupply;\n\n  function EthereumAlpes () {\n   totalSupply = 3000000 * 10 ** decimals;\n   balances[msg.sender] = totalSupply;\n   initialSupply = totalSupply; \n   Transfer(0, this, totalSupply);\n   Transfer(this, msg.sender, totalSupply);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b6a027b46536c66c8e30000006000818155600160a060020a033381168252600160205260408083208490556004849055309091169260008051602061087a833981519152915190815260200160405180910390a333600160a060020a031630600160a060020a031660008051602061087a83398151915260005460405190815260200160405180910390a35b5b6107b1806100c96000396000f300606060405236156100b75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100bc578063095ea7b31461014757806318160ddd1461017d57806323b872dd146101a2578063313ce567146101de578063378dc3dc1461020357806370a08231146102285780638da5cb5b1461025957806395d89b4114610288578063a9059cbb14610313578063dd62ed3e14610349578063f2fde38b14610380575b600080fd5b34156100c757600080fd5b6100cf6103a1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610169600160a060020a03600435166024356103d8565b604051901515815260200160405180910390f35b341561018857600080fd5b61019061047f565b60405190815260200160405180910390f35b34156101ad57600080fd5b610169600160a060020a0360043581169060243516604435610485565b604051901515815260200160405180910390f35b34156101e957600080fd5b61019061059a565b60405190815260200160405180910390f35b341561020e57600080fd5b61019061059f565b60405190815260200160405180910390f35b341561023357600080fd5b610190600160a060020a03600435166105a5565b60405190815260200160405180910390f35b341561026457600080fd5b61026c6105c4565b604051600160a060020a03909116815260200160405180910390f35b341561029357600080fd5b6100cf6105d3565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031e57600080fd5b610169600160a060020a036004351660243561060a565b604051901515815260200160405180910390f35b341561035457600080fd5b610190600160a060020a03600435811690602435166106ca565b60405190815260200160405180910390f35b341561038b57600080fd5b61039f600160a060020a03600435166106f7565b005b60408051908101604052600e81527f457468657265756d20416c706573000000000000000000000000000000000000602082015281565b600081158061040a5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561041557600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906104cc908463ffffffff61075416565b600160a060020a038086166000908152600160205260408082209390935590871681522054610501908463ffffffff61076e16565b600160a060020a03861660009081526001602052604090205561052a818463ffffffff61076e16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b601281565b60045481565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600481527f45414c5000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610633908363ffffffff61076e16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610668908363ffffffff61075416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461071257600080fd5b600160a060020a038116151561072757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60008282018381101561076357fe5b8091505b5092915050565b60008282111561077a57fe5b508082035b929150505600a165627a7a72305820f74681ed654d62654d14d8f890e8350897c612f4920ec254dc313d99aa51f18f0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}