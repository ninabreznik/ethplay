{
  "address": "0x33d9eb04442b7711cec632384df6bba45b141d3a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SparkleAirDrop",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity 0.4.25;\n\n/*\n▒ █ ▀ ▀ ▀ █ 　▒ █ ▀ ▀ █ 　░ █ ▀ ▀ █ 　▒ █ ▀ ▀ █ 　▒ █ ░ ▄ ▀ 　▒ █ ░ ░ ░ 　▒ █ ▀ ▀ ▀ 　\n░ ▀ ▀ ▀ ▄ ▄ 　▒ █ ▄ ▄ █ 　▒ █ ▄ ▄ █ 　▒ █ ▄ ▄ ▀ 　▒ █ ▀ ▄ ░ 　▒ █ ░ ░ ░ 　▒ █ ▀ ▀ ▀ 　\n▒ █ ▄ ▄ ▄ █ 　▒ █ ░ ░ ░ 　▒ █ ░ ▒ █ 　▒ █ ░ ▒ █ 　▒ █ ░ ▒ █ 　▒ █ ▄ ▄ █ 　▒ █ ▄ ▄ ▄ 　\n\n\n░ █ ▀ ▀ █ 　▀ █ ▀ 　▒ █ ▀ ▀ █ 　▒ █ ▀ ▀ ▄ 　▒ █ ▀ ▀ █ 　▒ █ ▀ ▀ ▀ █ 　▒ █ ▀ ▀ █ 　\n▒ █ ▄ ▄ █ 　▒ █ ░ 　▒ █ ▄ ▄ ▀ 　▒ █ ░ ▒ █ 　▒ █ ▄ ▄ ▀ 　▒ █ ░ ░ ▒ █ 　▒ █ ▄ ▄ █ 　\n▒ █ ░ ▒ █ 　▄ █ ▄ 　▒ █ ░ ▒ █ 　▒ █ ▄ ▄ ▀ 　▒ █ ░ ▒ █ 　▒ █ ▄ ▄ ▄ █ 　▒ █ ░ ░ ░ 　\n\nhttps://sparklemobile.io/  \n\nContract can be paused and resumed, but that could also load/reload for later dates*\n\n\nNOTES: \n ,_, _ In order to \"claim tokens\" you must first add our token contract address \"0x4b7aD3a56810032782Afce12d7d27122bDb96efF\"\n[0,0] \n|)__)       \n-”-”-\n\n  ,_, _ Did you hear FREE Sparkle!\n[0,0] \n|)__)       \n-”-”- 1) Opposed to setting max number of airdrop winners I changed it to just give out the default airdrod reward to any\nadded address to the airdrop list(see note 3 below). When the tokens run out then the contract will not honor any\nairdrop awards but can still be run and tokens added to continue using the contract for other giveaways.\n\n\n  ,_,  _ Follow us on Twitter!\n[0,0] \n|)__)       \n-”-”- 2) Added functions to allow adding address(es) with a different token reward than the standard 30 for those cases \nwhere some addresses we may want them to have more of an airdrop than the default\n\n\n  ,_,  _ Like us on Facebook \n[0,0] \n|)__)       \n-”-”- 3) I tried to make sure that the general cases of people senting eth to the contract is reverted and not accepted\nhowever I am not positive this can stop someone that is determined. With that said I did not add anything to withdraw\nthat potential eth so it would be stuck in this contract if someone happens to send the contract ETH...\n\n\n  ,_,  _ Join our Telegram and Discord!\n[0,0] \n|)__)       \n-”-”- 4)Contract was built with the intention of security in mind, all contracts are built with OpenZeppelin 2.0 latest release \nhttps://github.com/OpenZeppelin/openzeppelin-solidity/releases  \n*/\n\ncontract Ownable {\n\n    address public ownerField;\n\n    constructor() public {\n        ownerField = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == ownerField, \"Calling address not an owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        ownerField = newOwner;\n    }\n\n    function owner() public view returns(address) {\n        return ownerField;\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n\n}\n\ninterface IERC20 {\n\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n\n    return true;\n\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from], \"Insignificant balance in from address\");\n    require(to != address(0), \"Invalid to address specified [0x0]\");\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n  }\n\n\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n\n  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n\n}\n\ncontract Pausable is Ownable {\n    bool public paused;\n\n    modifier ifNotPaused {\n        require(!paused, \"Contract is paused\");\n        _;\n    }\n\n    modifier ifPaused {\n        require(paused, \"Contract is not paused\");\n        _;\n    }\n\n    // Called by the owner on emergency, triggers paused state\n    function pause() external onlyOwner {\n        paused = true;\n    }\n\n    // Called by the owner on end of emergency, returns to normal state\n    function resume() external onlyOwner ifPaused {\n        paused = false;\n    }\n}\n\ncontract AirDropWinners is Ownable, Pausable {\nusing SafeMath for uint256;\n\n  struct Contribution {  \n    uint256 tokenAmount;\n    bool    wasClaimed;\n    bool    isValid;\n  }\n\n\n  address public tokenAddress;       //Smartcontract Address  \n  uint256 public totalTokensClaimed; // Totaltokens claimed by winners (you do not set this the contract does as tokens are claimed)\n  uint256 public startTime;          // airDrop Start time \n   \n\n  mapping (address => Contribution) contributions;\n\n  constructor (address _token) \n  Ownable() \n  public {\n    tokenAddress = _token;\n    startTime = now;\n  }\n\n  /**\n   * @dev getTotalTokensRemaining() provides the function of returning the number of\n   * tokens currently left in the airdrop balance\n   */\n  function getTotalTokensRemaining()\n  ifNotPaused\n  public\n  view\n  returns (uint256)\n  {\n    return ERC20(tokenAddress).balanceOf(this);\n  }\n\n  /**\n   * @dev isAddressInAirdropList() provides the function of testing if the \n   * specified address is in fact valid in the airdrop list\n   */\n  function isAddressInAirdropList(address _addressToLookUp)\n  ifNotPaused\n  public\n  view\n  returns (bool)\n  {\n    Contribution storage contrib = contributions[_addressToLookUp];\n    return contrib.isValid;\n  }\n\n  /**\n   * @dev _bulkAddAddressesToAirdrop provides the function of adding addresses \n   * to the airdrop list with the default of 30 sparkle\n   */\n  function bulkAddAddressesToAirDrop(address[] _addressesToAdd)\n  ifNotPaused\n  public\n  {\n    require(_addressesToAdd.length > 0);\n    for (uint i = 0; i < _addressesToAdd.length; i++) {\n      _addAddressToAirDrop(_addressesToAdd[i]);\n    }\n    \n  }\n\n  /**\n   * @dev _bulkAddAddressesToAirdropWithAward provides the function of adding addresses \n   * to the airdrop list with a specific number of tokens\n   */\n  function bulkAddAddressesToAirDropWithAward(address[] _addressesToAdd, uint256 _tokenAward)\n  ifNotPaused\n  public\n  {\n    require(_addressesToAdd.length > 0);\n    require(_tokenAward > 0);\n    for (uint i = 0; i < _addressesToAdd.length; i++) {\n      _addAddressToAirdropWithAward(_addressesToAdd[i], _tokenAward);\n    }\n    \n  }\n\n  /**\n   * @dev _addAddressToAirdropWithAward provides the function of adding an address to the\n   * airdrop list with a specific number of tokens opposed to the default of  \n   * 30 Sparkle\n   * @dev NOTE: _tokenAward will be converted so value only needs to be whole number\n   * Ex: 30 opposed to 30 * (10e7)\n   */\n  function _addAddressToAirdropWithAward(address _addressToAdd, uint256 _tokenAward)\n  onlyOwner\n  internal\n  {\n      require(_addressToAdd != 0);\n      require(!isAddressInAirdropList(_addressToAdd));\n      require(_tokenAward > 0);\n      Contribution storage contrib = contributions[_addressToAdd];\n      contrib.tokenAmount = _tokenAward.mul(10e7);\n      contrib.wasClaimed = false;\n      contrib.isValid = true;\n  }\n\n  /**\n   * @dev _addAddressToAirdrop provides the function of adding an address to the\n   * airdrop list with the default of 30 sparkle\n   */\n  function _addAddressToAirDrop(address _addressToAdd)\n  onlyOwner\n  internal\n  {\n      require(_addressToAdd != 0);\n      require(!isAddressInAirdropList(_addressToAdd));\n      Contribution storage contrib = contributions[_addressToAdd];\n      contrib.tokenAmount = 30 * 10e7;\n      contrib.wasClaimed = false;\n      contrib.isValid = true;\n  }\n\n  /**\n   * @dev bulkRemoveAddressesFromAirDrop provides the function of removing airdrop \n   * addresses from the airdrop list\n   */\n  function bulkRemoveAddressesFromAirDrop(address[] _addressesToRemove)\n  ifNotPaused\n  public\n  {\n    require(_addressesToRemove.length > 0);\n    for (uint i = 0; i < _addressesToRemove.length; i++) {\n      _removeAddressFromAirDrop(_addressesToRemove[i]);\n    }\n\n  }\n\n  /**\n   * @dev _removeAddressFromAirDrop provides the function of removing an address from \n   * the airdrop\n   */\n  function _removeAddressFromAirDrop(address _addressToRemove)\n  onlyOwner\n  internal\n  {\n      require(_addressToRemove != 0);\n      require(isAddressInAirdropList(_addressToRemove));\n      Contribution storage contrib = contributions[_addressToRemove];\n      contrib.tokenAmount = 0;\n      contrib.wasClaimed = false;\n      contrib.isValid = false;\n  }\n\nfunction setAirdropAddressWasClaimed(address _addressToChange, bool _newWasClaimedValue)\n  ifNotPaused\n  onlyOwner\n  public\n  {\n    require(_addressToChange != 0);\n    require(isAddressInAirdropList(_addressToChange));\n    Contribution storage contrib = contributions[ _addressToChange];\n    require(contrib.isValid);\n    contrib.wasClaimed = _newWasClaimedValue;\n  }\n\n  /**\n   * @dev claimTokens() provides airdrop winners the function of collecting their tokens\n   */\n  function claimTokens() \n  ifNotPaused\n  public {\n    Contribution storage contrib = contributions[msg.sender];\n    require(contrib.isValid, \"Address not found in airdrop list\");\n    require(contrib.tokenAmount > 0, \"There are currently no tokens to claim.\");\n    uint256 tempPendingTokens = contrib.tokenAmount;\n    contrib.tokenAmount = 0;\n    totalTokensClaimed = totalTokensClaimed.add(tempPendingTokens);\n    contrib.wasClaimed = true;\n    ERC20(tokenAddress).transfer(msg.sender, tempPendingTokens);\n  }\n\n  /**\n   * @dev () is the default payable function. Since this contract should not accept\n   * revert the transaction best as possible.\n   */\n  function() payable public {\n    revert(\"ETH not accepted\");\n  }\n\n}\n\ncontract SparkleAirDrop is AirDropWinners {\n  using SafeMath for uint256;\n\n  address initTokenContractAddress = 0x4b7aD3a56810032782Afce12d7d27122bDb96efF;\n  \n  constructor()\n  AirDropWinners(initTokenContractAddress)\n  public  \n  {}\n\n}",
  "bytecode": "608060405260058054600160a060020a031916734b7ad3a56810032782afce12d7d27122bdb96eff17905534801561003657600080fd5b5060055460008054600160a060020a0319908116331790915560018054909116600160a060020a0390921691909117905542600355610f0c8061007a6000396000f3006080604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663046f7da281146101355780630e2379f71461014c57806343672fb81461017357806348c54b9d146101a457806356bbac14146101b95780635912c046146101ee5780635c975abb146102035780636f5285921461021857806378e979251461026d5780637d9a4bac146102825780638456cb59146102d95780638729f7ac146102ee5780638da5cb5b146103435780639d76ea5814610358578063aa847dcf1461036d578063f2fde38b14610393575b6040805160e560020a62461bcd02815260206004820152601060248201527f455448206e6f7420616363657074656400000000000000000000000000000000604482015290519081900360640190fd5b34801561014157600080fd5b5061014a6103b4565b005b34801561015857600080fd5b50610161610487565b60408051918252519081900360200190f35b34801561017f57600080fd5b5061018861056f565b60408051600160a060020a039092168252519081900360200190f35b3480156101b057600080fd5b5061014a61057e565b3480156101c557600080fd5b506101da600160a060020a03600435166107b2565b604080519115158252519081900360200190f35b3480156101fa57600080fd5b5061016161082d565b34801561020f57600080fd5b506101da610833565b34801561022457600080fd5b506040805160206004803580820135838102808601850190965280855261014a953695939460249493850192918291850190849080828437509497506108439650505050505050565b34801561027957600080fd5b506101616108db565b34801561028e57600080fd5b506040805160206004803580820135838102808601850190965280855261014a9536959394602494938501929182918501908490808284375094975050933594506108e19350505050565b3480156102e557600080fd5b5061014a610988565b3480156102fa57600080fd5b506040805160206004803580820135838102808601850190965280855261014a953695939460249493850192918291850190849080828437509497506109fe9650505050505050565b34801561034f57600080fd5b50610188610a92565b34801561036457600080fd5b50610188610aa1565b34801561037957600080fd5b5061014a600160a060020a03600435166024351515610ab0565b34801561039f57600080fd5b5061014a600160a060020a0360043516610bc0565b600054600160a060020a03163314610404576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b60005460a060020a900460ff161515610467576040805160e560020a62461bcd02815260206004820152601660248201527f436f6e7472616374206973206e6f742070617573656400000000000000000000604482015290519081900360640190fd5b6000805474ff000000000000000000000000000000000000000019169055565b6000805460a060020a900460ff16156104d8576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561053e57600080fd5b505af1158015610552573d6000803e3d6000fd5b505050506040513d602081101561056857600080fd5b5051905090565b600054600160a060020a031681565b60008054819060a060020a900460ff16156105d1576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b3360009081526004602052604090206001810154909250610100900460ff16151561066c576040805160e560020a62461bcd02815260206004820152602160248201527f41646472657373206e6f7420666f756e6420696e2061697264726f70206c697360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b81546000106106eb576040805160e560020a62461bcd02815260206004820152602760248201527f5468657265206172652063757272656e746c79206e6f20746f6b656e7320746f60448201527f20636c61696d2e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50805460008255600254610705908263ffffffff610c3f16565b6002556001828101805460ff19168217905554604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506040513d60208110156107ac57600080fd5b50505050565b60008054819060a060020a900460ff1615610805576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b5050600160a060020a0316600090815260046020526040902060010154610100900460ff1690565b60025481565b60005460a060020a900460ff1681565b6000805460a060020a900460ff1615610894576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b81516000106108a257600080fd5b5060005b81518110156108d7576108cf82828151811015156108c057fe5b90602001906020020151610c5c565b6001016108a6565b5050565b60035481565b6000805460a060020a900460ff1615610932576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b825160001061094057600080fd5b6000821161094d57600080fd5b5060005b82518110156109835761097b838281518110151561096b57fe5b9060200190602002015183610cff565b600101610951565b505050565b600054600160a060020a031633146109d8576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b6000805460a060020a900460ff1615610a4f576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b8151600010610a5d57600080fd5b5060005b81518110156108d757610a8a8282815181101515610a7b57fe5b90602001906020020151610dc8565b600101610a61565b600054600160a060020a031690565b600154600160a060020a031681565b6000805460a060020a900460ff1615610b01576040805160e560020a62461bcd0281526020600482015260126024820152600080516020610ec1833981519152604482015290519081900360640190fd5b600054600160a060020a03163314610b51576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b600160a060020a0383161515610b6657600080fd5b610b6f836107b2565b1515610b7a57600080fd5b50600160a060020a03821660009081526004602052604090206001810154610100900460ff161515610bab57600080fd5b600101805460ff191691151591909117905550565b600054600160a060020a03163314610c10576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610c5157600080fd5b8091505b5092915050565b60008054600160a060020a03163314610cad576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b600160a060020a0382161515610cc257600080fd5b610ccb826107b2565b1515610cd657600080fd5b50600160a060020a03166000908152600460205260408120908155600101805461ffff19169055565b60008054600160a060020a03163314610d50576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b600160a060020a0383161515610d6557600080fd5b610d6e836107b2565b15610d7857600080fd5b60008211610d8557600080fd5b50600160a060020a0382166000908152600460205260409020610db2826305f5e10063ffffffff610e7216565b8155600101805461ffff19166101001790555050565b60008054600160a060020a03163314610e19576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020610ea1833981519152604482015290519081900360640190fd5b600160a060020a0382161515610e2e57600080fd5b610e37826107b2565b15610e4157600080fd5b50600160a060020a0316600090815260046020526040902063b2d05e008155600101805461ffff1916610100179055565b600080831515610e855760009150610c55565b50828202828482811515610e9557fe5b0414610c5157600080fd0043616c6c696e672061646472657373206e6f7420616e206f776e657200000000436f6e7472616374206973207061757365640000000000000000000000000000a165627a7a72305820a3ad412f8d55113db356bb9eeeb4e6c94debf29d915de7e12ab920f863c180390029"
}