{
  "address": "0x4afea0f1252335e5e6be870139de87725e16560b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Natmin: Old Token",
  "contractName": "NatminToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-07\n*/\n\npragma solidity ^0.4.22;\n\n//Math operations with safety checks that throw on error\n\nlibrary SafeMath {\n\n    //multiply\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    //divide\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    //subtract\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    //addition\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public contractOwner;\n\n    event TransferredOwnership(address indexed _previousOwner, address indexed _newOwner);\n\n    constructor() public {        \n        contractOwner = msg.sender;\n    }\n\n    modifier ownerOnly() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) internal ownerOnly {\n        require(_newOwner != address(0));\n        contractOwner = _newOwner;\n\n        emit TransferredOwnership(contractOwner, _newOwner);\n    }\n\n}\n\n// Natmin vesting contract for team members\ncontract NatminVesting is Ownable {\n    struct Vesting {        \n        uint256 amount;\n        uint256 endTime;\n    }\n    mapping(address => Vesting) internal vestings;\n\n    function addVesting(address _user, uint256 _amount) public ;\n    function getVestedAmount(address _user) public view returns (uint256 _amount);\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime);\n    function vestingEnded(address _user) public view returns (bool) ;\n    function endVesting(address _user) public ;\n}\n\n//ERC20 Standard interface specification\ncontract ERC20Standard {\n    function balanceOf(address _user) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n//ERC223 Standard interface specification\ncontract ERC223Standard {\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n}\n\n//ERC223 function to handle incoming token transfers\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n        _from;\n        _value;\n        _data;\n    }\n}\n\ncontract BurnToken is Ownable {\n    using SafeMath for uint256;\n    \n    function burn(uint256 _value) public;\n    function _burn(address _user, uint256 _value) internal;\n    event Burn(address indexed _user, uint256 _value);\n}\n\n//NatminToken implements the ERC20, ERC223 standard methods\ncontract NatminToken is ERC20Standard, ERC223Standard, Ownable, NatminVesting, BurnToken {\n    using SafeMath for uint256;\n\n    string _name = \"Natmin\";\n    string _symbol = \"NAT\";\n    string _standard = \"ERC20 / ERC223\";\n    uint256 _decimals = 18; // same value as wei\n    uint256 _totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor(uint256 _supply) public {\n        require(_supply != 0);\n        _totalSupply = _supply * (10 ** 18);\n        balances[contractOwner] = _totalSupply;\n    }\n\n    // Returns the _name of the token\n    function name() public view returns (string) {\n        return _name;        \n    }\n\n    // Returns the _symbol of the token\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    // Returns the _standard of the token\n    function standard() public view returns (string) {\n        return _standard;\n    }\n\n    // Returns the _decimals of the token\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    // Function to return the total supply of the token\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // Function to return the balance of a specified address\n    function balanceOf(address _user) public view returns (uint256 balance){\n        return balances[_user];\n    }   \n\n    // Transfer function to be compatable with ERC20 Standard\n    function transfer(address _to, uint256 _value) public returns (bool success){\n        bytes memory _empty;\n        if(isContract(_to)){\n            return transferToContract(_to, _value, _empty);\n        }else{\n            return transferToAddress(_to, _value, _empty);\n        }\n    }\n\n    // Transfer function to be compatable with ERC223 Standard\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        if(isContract(_to)){\n            return transferToContract(_to, _value, _data);\n        }else{\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // This function checks if the address is a contract or wallet\n    // If the codeLength is greater than 0, it is a contract\n    function isContract(address _to) internal view returns (bool) {\n        uint256 _codeLength;\n\n        assembly {\n            _codeLength := extcodesize(_to)\n        }\n\n        return _codeLength > 0;\n    }\n\n    // This function to be used if the target is a contract address\n    function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool) {\n        require(balances[msg.sender] >= _value);\n        require(vestingEnded(msg.sender));\n        \n        // This will override settings and allow contract owner to send to contract\n        if(msg.sender != contractOwner){\n            ERC223ReceivingContract _tokenReceiver = ERC223ReceivingContract(_to);\n            _tokenReceiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // This function to be used if the target is a normal eth/wallet address \n    function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool) {\n        require(balances[msg.sender] >= _value);\n        require(vestingEnded(msg.sender));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // ERC20 standard function\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n        require(_value <= allowed[_from][msg.sender]);\n        require(_value <= balances[_from]);\n        require(vestingEnded(_from));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    // ERC20 standard function\n    function approve(address _spender, uint256 _value) public returns (bool success){\n        allowed[msg.sender][_spender] = 0;\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    // ERC20 standard function\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\n        return allowed[_owner][_spender];\n    }\n\n    // Stops any attempt from sending Ether to this contract\n    function () public {\n        revert();\n    }\n\n    // public function to call the _burn function \n    function burn(uint256 _value) public ownerOnly {\n        _burn(msg.sender, _value);\n    }\n\n    // Burn the specified amount of tokens by the owner\n    function _burn(address _user, uint256 _value) internal ownerOnly {\n        require(balances[_user] >= _value);\n\n        balances[_user] = balances[_user].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        \n        emit Burn(_user, _value);\n        emit Transfer(_user, address(0), _value);\n\n        bytes memory _empty;\n        emit Transfer(_user, address(0), _value, _empty);\n    }\n\n    // Create a vesting entry for the specified user\n    function addVesting(address _user, uint256 _amount) public ownerOnly {\n        vestings[_user].amount = _amount;\n        vestings[_user].endTime = now + 180 days;\n    }\n\n    // Returns the vested amount for a specified user\n    function getVestedAmount(address _user) public view returns (uint256 _amount) {\n        _amount = vestings[_user].amount;\n        return _amount;\n    }\n\n    // Returns the vested end time for a specified user\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime) {\n        _endTime = vestings[_user].endTime;\n        return _endTime;\n    }\n\n    // Checks if the venting period is over for a specified user\n    function vestingEnded(address _user) public view returns (bool) {\n        if(vestings[_user].endTime <= now) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Manual end vested time \n    function endVesting(address _user) public ownerOnly {\n        vestings[_user].endTime = now;\n    }\n}",
  "bytecode": "60806040526040805190810160405280600681526020017f4e61746d696e00000000000000000000000000000000000000000000000000008152506002908051906020019062000051929190620001f4565b506040805190810160405280600381526020017f4e41540000000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f929190620001f4565b506040805190810160405280600e81526020017f4552433230202f2045524332323300000000000000000000000000000000000081525060049080519060200190620000ed929190620001f4565b5060126005553480156200010057600080fd5b506040516020806200209483398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600081141515156200017557600080fd5b670de0b6b3a76400008102600681905550600654600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050620002a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023757805160ff191683800117855562000268565b8280016001018555821562000268579182015b82811115620002675782518255916020019190600101906200024a565b5b5090506200027791906200027b565b5090565b620002a091905b808211156200029c57600081600090555060010162000282565b5090565b90565b611de180620002b36000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010e578063095ea7b31461019e57806315875f541461020357806318160ddd1461025a57806323b872dd14610285578063313ce5671461030a57806342966c68146103355780635a3b7e421461036257806370a08231146103f257806395d89b411461044957806395fcb00d146104d9578063a9059cbb14610526578063be45fd621461058b578063bf05d65314610636578063ce606ee014610679578063d5a73fdd146106d0578063dd62ed3e14610727578063fe0c40851461079e575b34801561010857600080fd5b50600080fd5b34801561011a57600080fd5b506101236107f9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610163578082015181840152602081019050610148565b50505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101aa57600080fd5b506101e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061089b565b604051808215151515815260200191505060405180910390f35b34801561020f57600080fd5b50610244600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a0e565b6040518082815260200191505060405180910390f35b34801561026657600080fd5b5061026f610a5d565b6040518082815260200191505060405180910390f35b34801561029157600080fd5b506102f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b604051808215151515815260200191505060405180910390f35b34801561031657600080fd5b5061031f610dff565b6040518082815260200191505060405180910390f35b34801561034157600080fd5b5061036060048036038101908080359060200190929190505050610e09565b005b34801561036e57600080fd5b50610377610e71565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b757808201518184015260208101905061039c565b50505050905090810190601f1680156103e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103fe57600080fd5b50610433600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f13565b6040518082815260200191505060405180910390f35b34801561045557600080fd5b5061045e610f5c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049e578082015181840152602081019050610483565b50505050905090810190601f1680156104cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e557600080fd5b50610524600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ffe565b005b34801561053257600080fd5b50610571600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110f0565b604051808215151515815260200191505060405180910390f35b34801561059757600080fd5b5061061c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611129565b604051808215151515815260200191505060405180910390f35b34801561064257600080fd5b50610677600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611160565b005b34801561068557600080fd5b5061068e611205565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106dc57600080fd5b50610711600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061122a565b6040518082815260200191505060405180910390f35b34801561073357600080fd5b50610788600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611279565b6040518082815260200191505060405180910390f35b3480156107aa57600080fd5b506107df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611300565b604051808215151515815260200191505060405180910390f35b606060028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b5050505050905090565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050809050919050565b6000600654905090565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610af457600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b4257600080fd5b610b4b84611300565b1515610b5657600080fd5b610ba882600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136090919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c3d82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137990919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d0f82600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136090919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600554905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6457600080fd5b610e6e3382611397565b50565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f095780601f10610ede57610100808354040283529160200191610f09565b820191906000526020600020905b815481529060010190602001808311610eec57829003601f168201915b5050505050905090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ff45780601f10610fc957610100808354040283529160200191610ff4565b820191906000526020600020905b815481529060010190602001808311610fd757829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105957600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555062ed4e004201600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b600060606110fd8461167e565b156111145761110d848483611691565b9150611122565b61111f848483611ae5565b91505b5092915050565b60006111348461167e565b1561114b57611144848484611691565b9050611159565b611156848484611ae5565b90505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111bb57600080fd5b42600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050809050919050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154111515611356576001905061135b565b600090505b919050565b600082821115151561136e57fe5b818303905092915050565b600080828401905083811015151561138d57fe5b8091505092915050565b60606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113f457600080fd5b81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561144257600080fd5b61149482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136090919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114ec8260065461136090919063ffffffff16565b6006819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1684846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561163e578082015181840152602081019050611623565b50505050905090810190601f16801561166b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3505050565b600080823b905060008111915050919050565b60008083600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156116e257600080fd5b6116eb33611300565b15156116f657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611878578490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118115780820151818401526020810190506117f6565b50505050905090810190601f16801561183e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561185f57600080fd5b505af1158015611873573d6000803e3d6000fd5b505050505b6118ca84600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136090919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061195f84600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137990919063ffffffff16565b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a9e578082015181840152602081019050611a83565b50505050905090810190601f168015611acb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b600082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611b3557600080fd5b611b3e33611300565b1515611b4957600080fd5b611b9b83600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136090919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c3083600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137990919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d6f578082015181840152602081019050611d54565b50505050905090810190601f168015611d9c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36001905093925050505600a165627a7a72305820d3b6d4fbdfe9a9e2b9830828b19ebc9c394b1189b9577697fa8cf5e8a6808b3e00290000000000000000000000000000000000000000000000000000000017d78400",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000017d78400"
}