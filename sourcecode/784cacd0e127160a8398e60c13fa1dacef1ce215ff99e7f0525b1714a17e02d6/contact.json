{
  "address": "0x8db3ae7ad65b18282947ada2a6156a47b04cac93",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOContent",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\ninterface IAOContent {\n\tfunction create(address _creator, string calldata _baseChallenge, uint256 _fileSize, bytes32 _contentUsageType, address _taoId) external returns (bytes32);\n\n\tfunction isAOContentUsageType(bytes32 _contentId) external view returns (bool);\n\n\tfunction getById(bytes32 _contentId) external view returns (address, uint256, bytes32, address, bytes32, uint8, bytes32, bytes32, string memory);\n\n\tfunction getBaseChallenge(bytes32 _contentId) external view returns (string memory);\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n/**\n * @title AOContent\n */\ncontract AOContent is TheAO, IAOContent {\n\tuint256 public totalContents;\n\taddress public settingTAOId;\n\taddress public aoSettingAddress;\n\taddress public nameFactoryAddress;\n\n\tIAOSetting internal _aoSetting;\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\n\tstruct Content {\n\t\tbytes32 contentId;\n\t\taddress creator;\n\t\t/**\n\t\t * baseChallenge is the content's PUBLIC KEY\n\t\t * When a request node wants to be a host, it is required to send a signed base challenge (its content's PUBLIC KEY)\n\t\t * so that the contract can verify the authenticity of the content by comparing what the contract has and what the request node\n\t\t * submit\n\t\t */\n\t\tstring baseChallenge;\n\t\tuint256 fileSize;\n\t\tbytes32 contentUsageType; // i.e AO Content, Creative Commons, or T(AO) Content\n\t\taddress taoId;\n\t\tbytes32 taoContentState; // i.e Submitted, Pending Review, Accepted to TAO\n\t\tuint8 updateTAOContentStateV;\n\t\tbytes32 updateTAOContentStateR;\n\t\tbytes32 updateTAOContentStateS;\n\t\tstring extraData;\n\t}\n\n\t// Mapping from Content index to the Content object\n\tmapping (uint256 => Content) internal contents;\n\n\t// Mapping from content ID to index of the contents list\n\tmapping (bytes32 => uint256) internal contentIndex;\n\n\t// Event to be broadcasted to public when `content` is stored\n\tevent StoreContent(address indexed creator, bytes32 indexed contentId, uint256 fileSize, bytes32 contentUsageType);\n\n\t// Event to be broadcasted to public when Advocate/Listener/Speaker wants to update the TAO Content's State\n\tevent UpdateTAOContentState(bytes32 indexed contentId, address indexed taoId, address signer, bytes32 taoContentState);\n\n\t// Event to be broadcasted to public when content creator updates the content's extra data\n\tevent SetExtraData(address indexed creator, bytes32 indexed contentId, string newExtraData);\n\n\t/**\n\t * @dev Constructor function\n\t * @param _settingTAOId The TAO ID that controls the setting\n\t * @param _aoSettingAddress The address of AOSetting\n\t * @param _nameFactoryAddress The address of NameFactory\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tconstructor(address _settingTAOId, address _aoSettingAddress, address _nameFactoryAddress, address _nameTAOPositionAddress) public {\n\t\tsetSettingTAOId(_settingTAOId);\n\t\tsetAOSettingAddress(_aoSettingAddress);\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Store the content information (content creation during staking)\n\t * @param _creator the address of the content creator\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _fileSize The size of the file\n\t * @param _contentUsageType The content usage type, i.e AO Content, Creative Commons, or T(AO) Content\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\n\t * @return the ID of the content\n\t */\n\tfunction create(address _creator,\n\t\tstring calldata _baseChallenge,\n\t\tuint256 _fileSize,\n\t\tbytes32 _contentUsageType,\n\t\taddress _taoId\n\t\t) external inWhitelist returns (bytes32) {\n\t\trequire (_canCreate(_creator, _baseChallenge, _fileSize, _contentUsageType, _taoId));\n\n\t\t// Increment totalContents\n\t\ttotalContents++;\n\n\t\t// Generate contentId\n\t\tbytes32 _contentId = keccak256(abi.encodePacked(this, _creator, totalContents));\n\t\tContent storage _content = contents[totalContents];\n\n\t\t// Make sure the node does't store the same content twice\n\t\trequire (_content.creator == address(0));\n\n\t\t(,,bytes32 contentUsageType_taoContent, bytes32 taoContentState_submitted,,) = _getSettingVariables();\n\n\t\t_content.contentId = _contentId;\n\t\t_content.creator = _creator;\n\t\t_content.baseChallenge = _baseChallenge;\n\t\t_content.fileSize = _fileSize;\n\t\t_content.contentUsageType = _contentUsageType;\n\n\t\t// If this is a TAO Content\n\t\tif (_contentUsageType == contentUsageType_taoContent) {\n\t\t\t_content.taoContentState = taoContentState_submitted;\n\t\t\t_content.taoId = _taoId;\n\t\t}\n\n\t\tcontentIndex[_contentId] = totalContents;\n\n\t\temit StoreContent(_content.creator, _content.contentId, _content.fileSize, _content.contentUsageType);\n\t\treturn _content.contentId;\n\t}\n\n\t/**\n\t * @dev Return content info at a given ID\n\t * @param _contentId The ID of the content\n\t * @return address of the creator\n\t * @return file size of the content\n\t * @return the content usage type, i.e AO Content, Creative Commons, or T(AO) Content\n\t * @return The TAO ID for this content (if this is a T(AO) Content)\n\t * @return The TAO Content state, i.e Submitted, Pending Review, or Accepted to TAO\n\t * @return The V part of signature that is used to update the TAO Content State\n\t * @return The R part of signature that is used to update the TAO Content State\n\t * @return The S part of signature that is used to update the TAO Content State\n\t * @return the extra information sent to the contract when creating a content\n\t */\n\tfunction getById(bytes32 _contentId) external view returns (address, uint256, bytes32, address, bytes32, uint8, bytes32, bytes32, string memory) {\n\t\t// Make sure the content exist\n\t\trequire (contentIndex[_contentId] > 0);\n\t\tContent memory _content = contents[contentIndex[_contentId]];\n\t\treturn (\n\t\t\t_content.creator,\n\t\t\t_content.fileSize,\n\t\t\t_content.contentUsageType,\n\t\t\t_content.taoId,\n\t\t\t_content.taoContentState,\n\t\t\t_content.updateTAOContentStateV,\n\t\t\t_content.updateTAOContentStateR,\n\t\t\t_content.updateTAOContentStateS,\n\t\t\t_content.extraData\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get content base challenge\n\t * @param _contentId The ID of the content\n\t * @return the base challenge\n\t */\n\tfunction getBaseChallenge(bytes32 _contentId) external view returns (string memory) {\n\t\t// Make sure the content exist\n\t\trequire (contentIndex[_contentId] > 0);\n\t\tContent memory _content = contents[contentIndex[_contentId]];\n\t\trequire (whitelist[msg.sender] == true || _content.creator == _nameFactory.ethAddressToNameId(msg.sender));\n\t\treturn _content.baseChallenge;\n\t}\n\n\t/**\n\t * @dev Update the TAO Content State of a T(AO) Content\n\t * @param _contentId The ID of the Content\n\t * @param _taoId The ID of the TAO that initiates the update\n\t * @param _taoContentState The TAO Content state value, i.e Submitted, Pending Review, or Accepted to TAO\n\t * @param _updateTAOContentStateV The V part of the signature for this update\n\t * @param _updateTAOContentStateR The R part of the signature for this update\n\t * @param _updateTAOContentStateS The S part of the signature for this update\n\t */\n\tfunction updateTAOContentState(\n\t\tbytes32 _contentId,\n\t\taddress _taoId,\n\t\tbytes32 _taoContentState,\n\t\tuint8 _updateTAOContentStateV,\n\t\tbytes32 _updateTAOContentStateR,\n\t\tbytes32 _updateTAOContentStateS\n\t) public {\n\t\t// Make sure the content exist\n\t\trequire (contentIndex[_contentId] > 0);\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t(,, bytes32 _contentUsageType_taoContent, bytes32 taoContentState_submitted, bytes32 taoContentState_pendingReview, bytes32 taoContentState_acceptedToTAO) = _getSettingVariables();\n\t\trequire (_taoContentState == taoContentState_submitted || _taoContentState == taoContentState_pendingReview || _taoContentState == taoContentState_acceptedToTAO);\n\n\t\taddress _signatureAddress = _getUpdateTAOContentStateSignatureAddress(_contentId, _taoId, _taoContentState, _updateTAOContentStateV, _updateTAOContentStateR, _updateTAOContentStateS);\n\n\t\tContent storage _content = contents[contentIndex[_contentId]];\n\t\t// Make sure that the signature address is one of content's TAO ID's Advocate/Listener/Speaker\n\t\trequire (_signatureAddress == msg.sender && _nameTAOPosition.senderIsPosition(_signatureAddress, _content.taoId));\n\t\trequire (_content.contentUsageType == _contentUsageType_taoContent);\n\n\t\t_content.taoContentState = _taoContentState;\n\t\t_content.updateTAOContentStateV = _updateTAOContentStateV;\n\t\t_content.updateTAOContentStateR = _updateTAOContentStateR;\n\t\t_content.updateTAOContentStateS = _updateTAOContentStateS;\n\n\t\temit UpdateTAOContentState(_contentId, _taoId, _signatureAddress, _taoContentState);\n\t}\n\n\t/**\n\t * @dev Check whether or not the content is of AO Content Usage Type\n\t * @param _contentId The ID of the content\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isAOContentUsageType(bytes32 _contentId) external view returns (bool) {\n\t\trequire (contentIndex[_contentId] > 0);\n\t\t(bytes32 _contentUsageType_aoContent,,,,,) = _getSettingVariables();\n\t\treturn contents[contentIndex[_contentId]].contentUsageType == _contentUsageType_aoContent;\n\t}\n\n\t/**\n\t * @dev Set extra data on existing content\n\t * @param _contentId The ID of the content\n\t * @param _extraData some extra information to send to the contract for a content\n\t */\n\tfunction setExtraData(bytes32 _contentId, string memory _extraData) public {\n\t\t// Make sure the content exist\n\t\trequire (contentIndex[_contentId] > 0);\n\n\t\tContent storage _content = contents[contentIndex[_contentId]];\n\t\t// Make sure the content creator is the same as the sender\n\t\trequire (_content.creator == _nameFactory.ethAddressToNameId(msg.sender));\n\n\t\t_content.extraData = _extraData;\n\n\t\temit SetExtraData(_content.creator, _content.contentId, _content.extraData);\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Checks if create params are valid\n\t * @param _creator the address of the content creator\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _fileSize The size of the file\n\t * @param _contentUsageType The content usage type, i.e AO Content, Creative Commons, or T(AO) Content\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\n\t * @return true if yes. false otherwise\n\t */\n\tfunction _canCreate(address _creator, string memory _baseChallenge, uint256 _fileSize, bytes32 _contentUsageType, address _taoId) internal view returns (bool) {\n\t\t(bytes32 aoContent, bytes32 creativeCommons, bytes32 taoContent,,,) = _getSettingVariables();\n\t\treturn (_creator != address(0) &&\n\t\t\tAOLibrary.isName(_creator) &&\n\t\t\tbytes(_baseChallenge).length > 0 &&\n\t\t\t_fileSize > 0 &&\n\t\t\t(_contentUsageType == aoContent || _contentUsageType == creativeCommons || _contentUsageType == taoContent) &&\n\t\t\t(\n\t\t\t\t_contentUsageType != taoContent ||\n\t\t\t\t(_contentUsageType == taoContent && _taoId != address(0) && AOLibrary.isTAO(_taoId) && _nameTAOPosition.nameIsPosition(_creator, _taoId))\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get setting variables\n\t * @return contentUsageType_aoContent Content Usage Type = AO Content\n\t * @return contentUsageType_creativeCommons Content Usage Type = Creative Commons\n\t * @return contentUsageType_taoContent Content Usage Type = T(AO) Content\n\t * @return taoContentState_submitted TAO Content State = Submitted\n\t * @return taoContentState_pendingReview TAO Content State = Pending Review\n\t * @return taoContentState_acceptedToTAO TAO Content State = Accepted to TAO\n\t */\n\tfunction _getSettingVariables() internal view returns (bytes32, bytes32, bytes32, bytes32, bytes32, bytes32) {\n\t\t(,,,bytes32 contentUsageType_aoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_aoContent');\n\t\t(,,,bytes32 contentUsageType_creativeCommons,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_creativeCommons');\n\t\t(,,,bytes32 contentUsageType_taoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_taoContent');\n\t\t(,,,bytes32 taoContentState_submitted,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'taoContentState_submitted');\n\t\t(,,,bytes32 taoContentState_pendingReview,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'taoContentState_pendingReview');\n\t\t(,,,bytes32 taoContentState_acceptedToTAO,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'taoContentState_acceptedToTAO');\n\n\t\treturn (\n\t\t\tcontentUsageType_aoContent,\n\t\t\tcontentUsageType_creativeCommons,\n\t\t\tcontentUsageType_taoContent,\n\t\t\ttaoContentState_submitted,\n\t\t\ttaoContentState_pendingReview,\n\t\t\ttaoContentState_acceptedToTAO\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the address that signed the TAO content state update\n\t * @param _contentId the ID of the content\n\t * @param _taoId the ID of the TAO\n\t * @param _taoContentState the TAO Content State value, i.e Submitted, Pending Review, or Accepted to TAO\n\t * @param _v part of the signature\n\t * @param _r part of the signature\n\t * @param _s part of the signature\n\t * @return the address that signed the message\n\t */\n\tfunction _getUpdateTAOContentStateSignatureAddress(bytes32 _contentId, address _taoId, bytes32 _taoContentState, uint8 _v, bytes32 _r, bytes32 _s) internal view returns (address) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _contentId, _taoId, _taoContentState));\n\t\treturn ecrecover(_hash, _v, _r, _s);\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentId\",\"type\":\"bytes32\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"setExtraData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contentId\",\"type\":\"bytes32\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contentId\",\"type\":\"bytes32\"}],\"name\":\"getBaseChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contentId\",\"type\":\"bytes32\"}],\"name\":\"isAOContentUsageType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentId\",\"type\":\"bytes32\"},{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_taoContentState\",\"type\":\"bytes32\"},{\"name\":\"_updateTAOContentStateV\",\"type\":\"uint8\"},{\"name\":\"_updateTAOContentStateR\",\"type\":\"bytes32\"},{\"name\":\"_updateTAOContentStateS\",\"type\":\"bytes32\"}],\"name\":\"updateTAOContentState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"},{\"name\":\"_contentUsageType\",\"type\":\"bytes32\"},{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"},{\"name\":\"_aoSettingAddress\",\"type\":\"address\"},{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fileSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contentUsageType\",\"type\":\"bytes32\"}],\"name\":\"StoreContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taoContentState\",\"type\":\"bytes32\"}],\"name\":\"UpdateTAOContentState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newExtraData\",\"type\":\"string\"}],\"name\":\"SetExtraData\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051608080620029ee833981018060405260808110156200003357600080fd5b5080516020820151604083015160609093015160008054600160a060020a03191633179055919290916200007084640100000000620000b6810204565b620000848364010000000062000249810204565b62000098826401000000006200034e810204565b620000ac8164010000000062000453810204565b5050505062000558565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200013f57600080fd5b505af415801562000154573d6000803e3d6000fd5b505050506040513d60208110156200016b57600080fd5b505115156200017957600080fd5b604080517f2fca5414000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b158015620001ed57600080fd5b505af415801562000202573d6000803e3d6000fd5b505050506040513d60208110156200021957600080fd5b505115156200022757600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015620002d257600080fd5b505af4158015620002e7573d6000803e3d6000fd5b505050506040513d6020811015620002fe57600080fd5b505115156200030c57600080fd5b600160a060020a03811615156200032257600080fd5b60058054600160a060020a03909216600160a060020a0319928316811790915560078054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015620003d757600080fd5b505af4158015620003ec573d6000803e3d6000fd5b505050506040513d60208110156200040357600080fd5b505115156200041157600080fd5b600160a060020a03811615156200042757600080fd5b60068054600160a060020a03909216600160a060020a0319928316811790915560088054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015620004dc57600080fd5b505af4158015620004f1573d6000803e3d6000fd5b505050506040513d60208110156200050857600080fd5b505115156200051657600080fd5b600160a060020a03811615156200052c57600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560098054909216179055565b61248680620005686000396000f3fe608060405234801561001057600080fd5b506004361061013e576000357c01000000000000000000000000000000000000000000000000000000009004806365cf0ace116100ca578063bc4062061161008e578063bc40620614610507578063d0d9ca521461050f578063d6830af3146105a4578063e7c50185146105ca578063f2fde38b146105d25761013e565b806365cf0ace1461043b57806383b01a831461046c5780638c924361146104b35780639b19251a146104d9578063a9b6b38e146104ff5761013e565b80633486d8f6116101115780633486d8f6146103335780633848627b146103c55780634ef033f0146103df57806353d6fd59146103e75780635cfaf2ef146104155761013e565b806306fd7088146101435780631d0138ff1461016b5780632d189a621461018f5780632dff0d0d1461023c575b600080fd5b6101696004803603602081101561015957600080fd5b5035600160a060020a03166105f8565b005b6101736106ef565b60408051600160a060020a039092168252519081900360200190f35b610169600480360360408110156101a557600080fd5b813591908101906040810160208201356401000000008111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460018302840111640100000000831117156101fb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106fe945050505050565b6102596004803603602081101561025257600080fd5b50356108ba565b604051808a600160a060020a0316600160a060020a0316815260200189815260200188815260200187600160a060020a0316600160a060020a031681526020018681526020018560ff1660ff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102f05781810151838201526020016102d8565b50505050905090810190601f16801561031d5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b6103506004803603602081101561034957600080fd5b5035610b01565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038a578181015183820152602001610372565b50505050905090810190601f1680156103b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103cd610dba565b60408051918252519081900360200190f35b610173610dc0565b610169600480360360408110156103fd57600080fd5b50600160a060020a0381351690602001351515610dcf565b6101696004803603602081101561042b57600080fd5b5035600160a060020a0316610eb8565b6104586004803603602081101561045157600080fd5b5035610faf565b604080519115158252519081900360200190f35b610169600480360360c081101561048257600080fd5b50803590600160a060020a036020820135169060408101359060ff6060820135169060808101359060a00135611002565b610169600480360360208110156104c957600080fd5b5035600160a060020a031661127a565b610458600480360360208110156104ef57600080fd5b5035600160a060020a0316611371565b610173611386565b610173611395565b6103cd600480360360a081101561052557600080fd5b600160a060020a03823516919081019060408101602082013564010000000081111561055057600080fd5b82018360208201111561056257600080fd5b8035906020019184600183028401116401000000008311171561058457600080fd5b919350915080359060208101359060400135600160a060020a03166113a4565b610169600480360360208110156105ba57600080fd5b5035600160a060020a03166115af565b610173611731565b610169600480360360208110156105e857600080fd5b5035600160a060020a0316611740565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561066a57600080fd5b505af415801561067e573d6000803e3d6000fd5b505050506040513d602081101561069457600080fd5b505115156106a157600080fd5b600160a060020a03811615156106b657600080fd5b60058054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560078054909216179055565b600554600160a060020a031681565b6000828152600b60205260408120541161071757600080fd5b6000828152600b60209081526040808320548352600a82529182902060085483517f029b7d5300000000000000000000000000000000000000000000000000000000815233600482015293519193600160a060020a039091169263029b7d5392602480840193829003018186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d60208110156107bb57600080fd5b50516001820154600160a060020a039081169116146107d957600080fd5b81516107ee90600a83019060208501906122f6565b508054600180830154604080516020808252600a8701805460026000199782161561010002979097011695909504908201819052600160a060020a03909316937fccfac2e5e45c8af339b83af022e2d6072564ca42a312b0511d9fd022ebb2fdf7939092829190820190849080156108a75780601f1061087c576101008083540402835291602001916108a7565b820191906000526020600020905b81548152906001019060200180831161088a57829003601f168201915b50509250505060405180910390a3505050565b60008060008060008060008060606000600b60008c8152602001908152602001600020541115156108ea57600080fd5b6108f2612374565b60008b8152600b60209081526040808320548352600a82529182902082516101608101845281548152600180830154600160a060020a0316828501526002808401805487516101009482161594909402600019011691909104601f810186900486028301860187528083529295939493860193919290918301828280156109ba5780601f1061098f576101008083540402835291602001916109ba565b820191906000526020600020905b81548152906001019060200180831161099d57829003601f168201915b5050509183525050600382015460208083019190915260048301546040808401919091526005840154600160a060020a0316606084015260068401546080840152600784015460ff1660a0840152600884015460c0840152600984015460e0840152600a8401805482516002610100600184161581026000190190931604601f810186900486028201860190945283815294019392909190830182828015610aa35780601f10610a7857610100808354040283529160200191610aa3565b820191906000526020600020905b815481529060010190602001808311610a8657829003601f168201915b50505050508152505090508060200151816060015182608001518360a001518460c001518560e00151866101000151876101200151886101400151809050995099509950995099509950995099509950509193959799909294969850565b6000818152600b602052604081205460609110610b1d57600080fd5b610b25612374565b6000838152600b60209081526040808320548352600a82529182902082516101608101845281548152600180830154600160a060020a0316828501526002808401805487516101009482161594909402600019011691909104601f81018690048602830186018752808352929593949386019391929091830182828015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050509183525050600382015460208083019190915260048301546040808401919091526005840154600160a060020a0316606084015260068401546080840152600784015460ff1660a0840152600884015460c0840152600984015460e0840152600a8401805482516002610100600184161581026000190190931604601f810186900486028201860190945283815294019392909190830182828015610cd65780601f10610cab57610100808354040283529160200191610cd6565b820191906000526020600020905b815481529060010190602001808311610cb957829003601f168201915b505050919092525050336000908152600260205260409020549192505060ff16151560011480610da55750600854604080517f029b7d530000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163029b7d5391602480820192602092909190829003018186803b158015610d6557600080fd5b505afa158015610d79573d6000803e3d6000fd5b505050506040513d6020811015610d8f57600080fd5b50516020820151600160a060020a039081169116145b1515610db057600080fd5b6040015192915050565b60035481565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610e4157600080fd5b505af4158015610e55573d6000803e3d6000fd5b505050506040513d6020811015610e6b57600080fd5b50511515610e7857600080fd5b600160a060020a0382161515610e8d57600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610f2a57600080fd5b505af4158015610f3e573d6000803e3d6000fd5b505050506040513d6020811015610f5457600080fd5b50511515610f6157600080fd5b600160a060020a0381161515610f7657600080fd5b60018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560098054909216179055565b6000818152600b60205260408120548110610fc957600080fd5b6000610fd361182d565b5050506000868152600b60209081526040808320548352600a9091529020600401549092149350505050919050565b6000868152600b60205260408120541161101b57600080fd5b604080517f2fca5414000000000000000000000000000000000000000000000000000000008152600160a060020a03871660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b15801561108e57600080fd5b505af41580156110a2573d6000803e3d6000fd5b505050506040513d60208110156110b857600080fd5b505115156110c557600080fd5b6000806000806110d361182d565b95509550955095505050828814806110ea57508188145b806110f457508088145b15156110ff57600080fd5b600061110f8b8b8b8b8b8b611faa565b60008c8152600b60209081526040808320548352600a9091529020909150600160a060020a038216331480156111e057506009546005820154604080517fe2c8e54a000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015292831660248201529051919092169163e2c8e54a916044808301926020929190829003018186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d60208110156111dd57600080fd5b50515b15156111eb57600080fd5b600481015486146111fb57600080fd5b600681018a905560078101805460ff191660ff8b16179055600881018890556009810187905560408051600160a060020a038481168252602082018d90528251908e16928f927f0528e12829f4904634dd7bd06309457b4867ebd8bdf33ae6a8f6092a9a9461b9929081900390910190a3505050505050505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156112ec57600080fd5b505af4158015611300573d6000803e3d6000fd5b505050506040513d602081101561131657600080fd5b5051151561132357600080fd5b600160a060020a038116151561133857600080fd5b60068054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560088054909216179055565b60026020526000908152604090205460ff1681565b600054600160a060020a031681565b600654600160a060020a031681565b3360009081526002602052604081205460ff1615156001146113c557600080fd5b61140a8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150879050612075565b151561141557600080fd5b60038054600190810191829055604080516c01000000000000000000000000308102602080840191909152600160a060020a03808e169092026034840152604880840187905284518085039091018152606890930184528251928101929092206000958652600a9092529190932091820154161561149257600080fd5b60008061149d61182d565b50509350935050508383600001819055508a8360010160006101000a815481600160a060020a030219169083600160a060020a0316021790555089898460020191906114ea9291906123cf565b50600383018890556004830187905581871415611533576006830181905560058301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b600380546000868152600b6020908152604091829020929092558554600187015493870154600488015483519182529381019390935281519093600160a060020a0316927fe57c42bf3a4425cef2daf5daea09e512a58183eac320e1480456a511a6afe7cd92908290030190a350505498975050505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561162157600080fd5b505af4158015611635573d6000803e3d6000fd5b505050506040513d602081101561164b57600080fd5b5051151561165857600080fd5b604080517f2fca5414000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b1580156116cb57600080fd5b505af41580156116df573d6000803e3d6000fd5b505050506040513d60208110156116f557600080fd5b5051151561170257600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156117b257600080fd5b505af41580156117c6573d6000803e3d6000fd5b505050506040513d60208110156117dc57600080fd5b505115156117e957600080fd5b600160a060020a03811615156117fe57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052601a60448401527f636f6e74656e745573616765547970655f616f436f6e74656e7400000000000060648401525160009384938493849384938493849390911691637065bedc916084808201928692909190829003018186803b1580156118c457600080fd5b505afa1580156118d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a081101561190157600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561193757600080fd5b8201602081018481111561194a57600080fd5b815164010000000081118282018710171561196457600080fd5b5050600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052602060448401527f636f6e74656e745573616765547970655f6372656174697665436f6d6d6f6e73606484015251979b5060009a509091169750637065bedc96506084808201968a965094509084900301915082905086803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015611a3957600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115611a6f57600080fd5b82016020810184811115611a8257600080fd5b8151640100000000811182820187101715611a9c57600080fd5b5050600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052601b60448401527f636f6e74656e745573616765547970655f74616f436f6e74656e740000000000606484015251979b5060009a509091169750637065bedc96506084808201968a965094509084900301915082905086803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015611b7157600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115611ba757600080fd5b82016020810184811115611bba57600080fd5b8151640100000000811182820187101715611bd457600080fd5b5050600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052601960448401527f74616f436f6e74656e7453746174655f7375626d697474656400000000000000606484015251979b5060009a509091169750637065bedc96506084808201968a965094509084900301915082905086803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015611ca957600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115611cdf57600080fd5b82016020810184811115611cf257600080fd5b8151640100000000811182820187101715611d0c57600080fd5b5050600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052601d60448401527f74616f436f6e74656e7453746174655f70656e64696e67526576696577000000606484015251979b5060009a509091169750637065bedc96506084808201968a965094509084900301915082905086803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015611de157600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115611e1757600080fd5b82016020810184811115611e2a57600080fd5b8151640100000000811182820187101715611e4457600080fd5b5050600754600480546040805160e260020a631c196fb7028152600160a060020a039283169381019390935260248301819052601d60448401527f74616f436f6e74656e7453746174655f6163636570746564546f54414f000000606484015251979b5060009a509091169750637065bedc96506084808201968a965094509084900301915082905086803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015611f1957600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115611f4f57600080fd5b82016020810184811115611f6257600080fd5b8151640100000000811182820187101715611f7c57600080fd5b50509291905050505093505050508585858585859b509b509b509b509b509b50505050505050909192939495565b604080516c01000000000000000000000000308102602080840191909152603483018a9052600160a060020a03891690910260548301526068808301889052835180840390910181526088830180855281519183019190912060009182905260a8840180865281905260ff881660c885015260e8840187905261010884018690529351909392600192610128808301939192601f198301929081900390910190855afa15801561205e573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b60008060008061208361182d565b5093965091945092505050600160a060020a038916158015906121415750604080517f2d706a34000000000000000000000000000000000000000000000000000000008152600160a060020a038b1660048201529051731150d53299abb7de27464d01b626728f5c84022991632d706a34916024808301926020929190829003018186803b15801561211457600080fd5b505af4158015612128573d6000803e3d6000fd5b505050506040513d602081101561213e57600080fd5b50515b801561214e575060008851115b801561215a5750600087115b801561217857508286148061216e57508186145b8061217857508086145b80156122e9575080861415806122e9575080861480156121a05750600160a060020a03851615155b80156122475750604080517f2fca5414000000000000000000000000000000000000000000000000000000008152600160a060020a03871660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b15801561221a57600080fd5b505af415801561222e573d6000803e3d6000fd5b505050506040513d602081101561224457600080fd5b50515b80156122e95750600954604080517f473f1e4d000000000000000000000000000000000000000000000000000000008152600160a060020a038c8116600483015288811660248301529151919092169163473f1e4d916044808301926020929190829003018186803b1580156122bc57600080fd5b505afa1580156122d0573d6000803e3d6000fd5b505050506040513d60208110156122e657600080fd5b50515b9998505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061233757805160ff1916838001178555612364565b82800160010185558215612364579182015b82811115612364578251825591602001919060010190612349565b5061237092915061243d565b5090565b604080516101608101825260008082526020820181905260609282018390528282018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082015261014081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124105782800160ff19823516178555612364565b82800160010185558215612364579182015b82811115612364578235825591602001919060010190612422565b61245791905b808211156123705760008155600101612443565b9056fea165627a7a723058206784f92f1592c1af51f20dbe7a4e00cf858154c0a114b2a3a73817998f3bbf3e0029000000000000000000000000ec7aa72cb653b773b8c8c66a2e3e05669f4ef362000000000000000000000000bd314084ac5872598fdff2f31567084fc9c4427000000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "constructorArguments": "000000000000000000000000ec7aa72cb653b773b8c8c66a2e3e05669f4ef362000000000000000000000000bd314084ac5872598fdff2f31567084fc9c4427000000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}