{
  "address": "0x7e342474ec75f8781de7eda5166e9fc4b3d761bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QCB",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.4.13;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract QCB is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\n\t//the base info of the token\n\tstring public constant name=\"QINGCUNBI\";\n\tstring public constant symbol=\"QCB\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tuint256 public constant MAX_SUPPLY=21000000*10**decimals;\n\tuint256 public constant INIT_SUPPLY=20990000*10**decimals;\n\n\tuint256 public constant autoAirdropAmount=1*10**decimals;\n    uint256 public constant MAX_AUTO_AIRDROP_AMOUNT=10000*10**decimals;\n\n    address private admin;\n\n\tuint256 public alreadyAutoAirdropAmount;\n\n\tmapping(address => bool) touched;\n\n\n    struct epoch  {\n        uint256 endTime;\n        uint256 amount;\n    }\n\n\tmapping(address=>epoch[]) public lockEpochsMap;\n\n\n\n\tfunction QCB() public{\n        alreadyAutoAirdropAmount=0;\n\t\ttotalSupply = INIT_SUPPLY;\n\t\tbalances[msg.sender] = INIT_SUPPLY;\n\t\temit Transfer(0x0, msg.sender, INIT_SUPPLY);\n\t}\n\n    function addIssue(uint256 amount) external\n    {\n\t\tassert(msg.sender == owner||msg.sender == admin);\n\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\tTransfer(0x0, msg.sender, amount);\n\t}\n\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) external\n\t\tonlyOwner\n\t{\n\t\t epoch[] storage epochs = lockEpochsMap[user];\n\t\t epochs.push(epoch(endTime,amount));\n\t}\n\n\tfunction () payable external \n\t{\n\t}\n\n\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\n        if( !touched[msg.sender] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            touched[msg.sender] = true;\n            balances[msg.sender] = balances[msg.sender].add( autoAirdropAmount );\n            totalSupply = totalSupply.add( autoAirdropAmount );\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\n\n        }\n        \n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n\n        require(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n        if( totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            if( touched[_owner] ){\n                return balances[_owner];\n            }\n            else{\n                return balances[_owner].add(autoAirdropAmount);\n            }\n        } else {\n            return balances[_owner];\n        }\n  \t}\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n        \n        if( !touched[_from] && totalSupply.add(autoAirdropAmount) <= MAX_SUPPLY &&alreadyAutoAirdropAmount.add(autoAirdropAmount)<=MAX_AUTO_AIRDROP_AMOUNT){\n            touched[_from] = true;\n            balances[_from] = balances[_from].add( autoAirdropAmount );\n            totalSupply = totalSupply.add( autoAirdropAmount );\n            alreadyAutoAirdropAmount=alreadyAutoAirdropAmount.add(autoAirdropAmount);\n        }\n\n\t\tepoch[] epochs = lockEpochsMap[_from];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);  \n\n        require(_value <= balances[_from]);\n\n\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n      \n    function setAdmin(address _admin) public onlyOwner{\n        admin=_admin;\n    }\n\t  \n}",
  "bytecode": "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005819055506012600a0a6301404830026000819055506012600a0a630140483002600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a0a6301404830026040518082815260200191505060405180910390a3611d93806101226000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012a578063095ea7b3146101ba57806318160ddd1461021f57806323b872dd1461024a578063313ce567146102cf57806332cb6b0c146102fa578063363bc3a2146103255780635080af091461035057806354fd4d501461037b5780635b89a48a1461040b578063704b6c021461047357806370a08231146104b65780637854216b1461050d578063801aba56146105385780638da5cb5b1461054f578063956cc859146105a657806395d89b41146105d1578063a559568314610661578063a9059cbb146106b8578063d57c1ea21461071d578063dd62ed3e1461074a578063f2fde38b146107c1575b005b34801561013657600080fd5b5061013f610804565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017f578082015181840152602081019050610164565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c657600080fd5b50610205600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083d565b604051808215151515815260200191505060405180910390f35b34801561022b57600080fd5b5061023461092f565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b506102b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610935565b604051808215151515815260200191505060405180910390f35b3480156102db57600080fd5b506102e4610f7d565b6040518082815260200191505060405180910390f35b34801561030657600080fd5b5061030f610f82565b6040518082815260200191505060405180910390f35b34801561033157600080fd5b5061033a610f90565b6040518082815260200191505060405180910390f35b34801561035c57600080fd5b50610365610f96565b6040518082815260200191505060405180910390f35b34801561038757600080fd5b50610390610fa2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d05780820151818401526020810190506103b5565b50505050905090810190601f1680156103fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041757600080fd5b50610456600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fdb565b604051808381526020018281526020019250505060405180910390f35b34801561047f57600080fd5b506104b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101b565b005b3480156104c257600080fd5b506104f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110bb565b6040518082815260200191505060405180910390f35b34801561051957600080fd5b5061052261125b565b6040518082815260200191505060405180910390f35b34801561054457600080fd5b5061054d611266565b005b34801561055b57600080fd5b5061056461131b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105b257600080fd5b506105bb611341565b6040518082815260200191505060405180910390f35b3480156105dd57600080fd5b506105e661134f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062657808201518184015260208101905061060b565b50505050905090810190601f1680156106535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561066d57600080fd5b506106b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611388565b005b3480156106c457600080fd5b50610703600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611485565b604051808215151515815260200191505060405180910390f35b34801561072957600080fd5b50610748600480360381019080803590602001909291905050506119b8565b005b34801561075657600080fd5b506107ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b51565b6040518082815260200191505060405180910390f35b3480156107cd57600080fd5b50610802600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bd8565b005b6040805190810160405280600981526020017f51494e4743554e4249000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008060008060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561097857600080fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156109f757506012600a0a6301406f40026109f46012600a0a600102600054611d3090919063ffffffff16565b11155b8015610a2657506012600a0a61271002610a236012600a0a600102600554611d3090919063ffffffff16565b11155b15610b64576001600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610adc6012600a0a600102600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3b6012600a0a600102600054611d3090919063ffffffff16565b600081905550610b5d6012600a0a600102600554611d3090919063ffffffff16565b6005819055505b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600092505b8380549050821015610c1f578382815481101515610bc457fe5b906000526020600020906002020160000154421015610c1257610c0f8483815481101515610bee57fe5b90600052602060002090600202016001015484611d3090919063ffffffff16565b92505b8180600101925050610baa565b82610c7287600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4e90919063ffffffff16565b10151515610c7f57600080fd5b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548611151515610ccd57600080fd5b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610d9e86600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4e90919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3386600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e898682611d4e90919063ffffffff16565b600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450505050509392505050565b601281565b6012600a0a6301406f400281565b60055481565b6012600a0a6127100281565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b600760205281600052604060002081815481101515610ff657fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107757600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006012600a0a6301406f40026110e46012600a0a600102600054611d3090919063ffffffff16565b1115801561111557506012600a0a612710026111126012600a0a600102600554611d3090919063ffffffff16565b11155b1561121357600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111b357600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611256565b61120c6012600a0a600102600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b9050611256565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6012600a0a60010281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561131957600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a63014048300281565b6040805190810160405280600381526020017f514342000000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113e657600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060408051908101604052808481526020018581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505050505050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156114c757600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561154657506012600a0a6301406f40026115436012600a0a600102600054611d3090919063ffffffff16565b11155b801561157557506012600a0a612710026115726012600a0a600102600554611d3090919063ffffffff16565b11155b156116b3576001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061162b6012600a0a600102600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061168a6012600a0a600102600054611d3090919063ffffffff16565b6000819055506116ac6012600a0a600102600554611d3090919063ffffffff16565b6005819055505b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b828054905081101561176e57828181548110151561171357fe5b9060005260206000209060020201600001544210156117615761175e838281548110151561173d57fe5b90600052602060002090600202016001015483611d3090919063ffffffff16565b91505b80806001019150506116f9565b816117c186600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4e90919063ffffffff16565b101515156117ce57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561181c57600080fd5b61186e85600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d4e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190385600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a615750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611a6957fe5b611abb81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c3457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611c7057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515611d4457fe5b8091505092915050565b6000828211151515611d5c57fe5b8183039050929150505600a165627a7a72305820db7aeefd00da7c9e5308ae676a6eac235e470aad3fa408c96eff1c62ce950df80029"
}