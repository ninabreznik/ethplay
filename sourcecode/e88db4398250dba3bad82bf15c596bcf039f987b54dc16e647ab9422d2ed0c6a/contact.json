{
  "address": "0x2c4e58277b20a53a2dd1eb4e71c348e3f2f99571",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SYNCContract",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-24\n*/\n\npragma solidity 0.5.2;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address payable public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) external onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\ncontract SYNCContract is Ownable\n{\n\nusing SafeMath for uint256;\n    mapping(address => uint256) internal balances;\n\n    mapping(address => uint256) internal totalBalances;\n    \n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    mapping (address => uint256) internal totalAllowed;\n\n    /**\n     * @dev total number of tokens in existence\n    */\n    uint256 internal totSupply;\n\n    /**\n     * @dev Gets the total supply of tokens currently in circulation.\n     * @return An uint256 representing the amount of tokens already minted.\n    */\n    function totalSupply() view public returns(uint256)\n    {\n        return totSupply;\n    }\n    \n    /**\n     * @dev Gets the sum of all tokens that this address allowed others spend on its expence. \n     * Basically a sum of all allowances from this address\n     * @param _owner The address to query the allowances of.\n     * @return An uint256 representing the sum of all allowances of the passed address.\n    */\n    function getTotalAllowed(address _owner) view public returns(uint256)\n    {\n        return totalAllowed[_owner];\n    }\n\n    /**\n     * @dev Sets the sum of all tokens that this address allowed others spend on its expence. \n     * @param _owner The address to query the allowances of.\n     * @param _newValue The amount of tokens allowed by the _owner address.\n    */\n    function setTotalAllowed(address _owner, uint256 _newValue) internal\n    {\n        totalAllowed[_owner]=_newValue;\n    }\n\n    /**\n    * @dev Sets the total supply of tokens currently in circulation. \n    * Callable only internally and only when total supply should be changed for consistency\n    * @param _newValue An uint256 representing the amount of tokens already minted.\n    */\n\n    function setTotalSupply(uint256 _newValue) internal\n    {\n        totSupply=_newValue;\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n    */\n\n    function balanceOf(address _owner) view public returns(uint256)\n    {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Sets the balance of the specified address. \n     * Only callable from inside smart contract by method updateInvestorTokenBalance, which is callable only by contract owner\n     * @param _investor The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n    */\n    function setBalanceOf(address _investor, uint256 _newValue) internal\n    {\n        require(_investor!=0x0000000000000000000000000000000000000000);\n        balances[_investor]=_newValue;\n    }\n\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n\n    function allowance(address _owner, address _spender) view public returns(uint256)\n    {\n        require(msg.sender==_owner || msg.sender == _spender || msg.sender==getOwner());\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Set the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @param _newValue uint256 The amount of tokens allowed to spend by _spender on _owsner's expence.\n     */\n    function setAllowance(address _owner, address _spender, uint256 _newValue) internal\n    {\n        require(_spender!=0x0000000000000000000000000000000000000000);\n        uint256 newTotal = getTotalAllowed(_owner).sub(allowance(_owner, _spender)).add(_newValue);\n        require(newTotal <= balanceOf(_owner));\n        allowed[_owner][_spender]=_newValue;\n        setTotalAllowed(_owner,newTotal);\n    }\n\n\n   constructor() public\n    {\n        // require(_rate > 0);\n    //    require(_cap > 0);\n        //rate=_rate;\n        cap = 48000000*1000000000000000000;\n    }\n\n    \n    bytes32 public constant name = \"SYNCoin\";\n\n    bytes4 public constant symbol = \"SYNC\";\n\n    uint8 public constant decimals = 18;\n\n    uint256 public cap;\n\n    bool public mintingFinished;\n\n    /** @dev Fires on every transportation of tokens, both minting and transfer\n     *  @param _from address The address from which transfer has been initialized.\n     *  @param _to address The address to where the tokens are headed.\n     *  @param value uint256 The amount of tokens transferred\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\n\n    /** @dev Fires when owner allows spender to spend value of tokens on their(owner's) expence\n     *  @param _owner address The address from which allowance has been initialized.\n     *  @param _spender address The address who was allowed to spend tokens on owner's expence.\n     *  @param value uint256 The amount of tokens allowed for spending\n     */\n    event Approval(address indexed _owner, address indexed _spender, uint256 value);\n\n    /** @dev Fires on every creation of new tokens\n     *  @param _to address The owner address of new tokens.\n     *  @param amount uint256 The amount of tokens created\n     */\n    event Mint(address indexed _to, uint256 amount);\n\n    /** @dev fires when minting process is complete and no new tokens can be minted\n    */\n    event MintFinished();\n\n    // /** @dev Fires on every destruction of existing tokens\n    //  *  @param to address The owner address of tokens burned.\n    //  *  @param value uint256 The amount of tokens destroyed\n    //  */\n    // event Burn(address indexed _owner, uint256 _value);\n\n    /** @dev Check if tokens are no more mintable\n    */\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    function getName() pure public returns(bytes32)\n    {\n        return name;\n    }\n\n    function getSymbol() pure public returns(bytes4)\n    {\n        return symbol;\n    }\n\n    function getTokenDecimals() pure public returns(uint256)\n    {\n        return decimals;\n    }\n    \n    function getMintingFinished() view public returns(bool)\n    {\n        return mintingFinished;\n    }\n\n    /** @dev Get maximum amount of how many tokens can be minted by this contract\n     * @return uint256 The amount of how many tokens can be minted by this contract\n    */\n    function getTokenCap() view public returns(uint256)\n    {\n        return cap;\n    }\n\n    /** @dev Set maximum amount of how many tokens can be minted by this contract\n    */\n    function setTokenCap(uint256 _newCap) external onlyOwner\n    {\n        cap=_newCap;\n    }\n\n    /** @dev Set the balance of _investor as _newValue. Only usable by contract owner\n     * @param _investor address The address whose balance is updated\n     * @param _newValue uint256. The new token balance of _investor \n    */\n    function updateTokenInvestorBalance(address _investor, uint256 _newValue) onlyOwner external\n    {\n        setTokens(_investor,_newValue);\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n    */\n\n    function transfer(address _to, uint256 _value) external{\n        require(msg.sender!=_to);\n        require(_value <= balanceOf(msg.sender));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        setBalanceOf(msg.sender, balanceOf(msg.sender).sub(_value));\n        setBalanceOf(_to, balanceOf(_to).add(_value));\n\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) external {\n        require(_value <= balanceOf(_from));\n        require(_value <= allowance(_from,_to));\n        setBalanceOf(_from, balanceOf(_from).sub(_value));\n        setBalanceOf(_to, balanceOf(_to).add(_value));\n        setAllowance(_from,_to,allowance(_from,_to).sub(_value));\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n * @dev Approve the passed address to spend the specified amount of tokens on expence of msg.sender.\n *\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n * @param _owner The address of the owner which allows tokens to a spender\n * @param _spender The address which will spend the funds.\n * @param _value The amount of tokens to be spent.\n */\n    function approve(address _owner,address _spender, uint256 _value) external {\n        require(msg.sender ==_owner);\n        setAllowance(msg.sender,_spender, _value);\n        emit Approval(msg.sender, _spender, _value);\n    }\n\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _owner The address of the owner which allows tokens to a spender\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _owner, address _spender, uint _addedValue) external{\n        require(msg.sender==_owner);\n        setAllowance(_owner,_spender,allowance(_owner,_spender).add(_addedValue));\n        emit Approval(_owner, _spender, allowance(_owner,_spender));\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _owner The address of the owner which allows tokens to a spender\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _owner,address _spender, uint _subtractedValue) external{\n        require(msg.sender==_owner);\n\n        uint oldValue = allowance(_owner,_spender);\n        if (_subtractedValue > oldValue) {\n            setAllowance(_owner,_spender, 0);\n        } else {\n            setAllowance(_owner,_spender, oldValue.sub(_subtractedValue));\n        }\n        emit Approval(_owner, _spender, allowance(_owner,_spender));\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n\n\n    function mint(address _to, uint256 _amount) canMint internal{\n        require(totalSupply().add(_amount) <= getTokenCap());\n        setTotalSupply(totalSupply().add(_amount));\n        setBalanceOf(_to, balanceOf(_to).add(_amount));\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n    }\n    \n    /**\n     * @dev Changes balance of _to to _amount, also increments or decrements total token supply depending on whether balance is increased or decreased\n     * @param _to address The address which token balance is updated\n     * @param _amount uint256 The new balance\n    */\n    function setTokens(address _to, uint256 _amount) canMint internal{\n        if(_amount > balanceOf(_to)){\n            uint256 diff = _amount.sub(balanceOf(_to));\n            require( totalSupply().add(diff) <= getTokenCap());\n            setTotalSupply(totalSupply().add(diff));\n            setBalanceOf(_to, _amount);\n        }else{\n            uint256 diff = balanceOf(_to).sub(_amount);\n            setTotalSupply(totalSupply().sub(diff));\n            setBalanceOf(_to, _amount);\n        }\n        emit Transfer(address(0), _to, _amount);\n    }    \n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() canMint onlyOwner external{\n        emit MintFinished();\n    }\n\n    //Crowdsale\n    \n    // how many token units a buyer gets per wei\n    //uint256 internal rate;\n\n    // amount of raised money in wei\n    //uint256 internal weiRaised;\n    \n    /**\n     * event for token purchase logging\n     * @param _beneficiary who got the tokens\n     * @param value uint256 The amount of weis paid for purchase\n     * @param amount uint256 The amount of tokens purchased\n     */\n    //event TokenPurchase(address indexed _beneficiary, uint256 value, uint256 amount);\n\n     /**\n     * event for when current balance of smart contract is emptied by contract owner\n     * @param amount uint  The amount of wei withdrawn from contract balance\n     * @param timestamp uint The timestamp of withdrawal\n     */\n    //event InvestmentsWithdrawn(uint indexed amount, uint indexed timestamp);\n\n    /**\n     @dev Fallback function for when contract is simply sent ether. This calls buyTokens() method\n    */\n    // function () external payable {\n    //     buyTokens(msg.sender);\n    // }\n\n    /**\n     * @dev Just a getter for token rate\n     * @return uint256 Current token rate stored in this contract and by which new tokens are minted\n    */\n    // function getTokenRate() view public returns(uint256)\n    // {\n    //     return rate;\n    // }\n\n    /**\n     * @dev Setter for token rate. Callable by contract owner only\n     * @param _newRate uint256 New token rate stored in this contract\n    */\n    // function setTokenRate(uint256 _newRate) external onlyOwner\n    // {\n    //     rate = _newRate;\n    // }\n\n    /**\n     * @dev Returns how much wei was ever received by this smart contract\n    */\n    // function getWeiRaised() view external returns(uint256)\n    // {\n    //     return weiRaised;\n    // }\n\n    /**\n     * @dev low level token purchase function. Can be called from fallback function or directly\n     * @param _buyer address The address which will receive bought tokens\n    */\n    // function buyTokens(address _buyer) public payable{\n    //     require(msg.value > 0);\n    //     uint256 weiAmount = msg.value;\n\n    //     // calculate token amount to be created\n    //     uint256 tokens = getTokenAmount(weiAmount);\n    //     require(validPurchase(tokens));\n\n    //     // update state\n    //     weiRaised = weiRaised.add(weiAmount);\n    //     mint(_buyer, tokens);\n    //     emit TokenPurchase(_buyer, weiAmount, tokens);\n    // }\n\n    /**\n     * @dev Get how many tokens can be received for this amount of wei.\n     * @param weiAmount uint256 The amount of wei\n     * @return uint256 How many tokens to be bought for weiAmount\n    */\n    // function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n    //     return weiAmount.div(getTokenRate());\n    // }\n\n    /**\n     * @dev Function for smart contract owner to withdraw all wei from contract's balance\n    */\n    // function withdrawInvestments() external onlyOwner{\n    //     uint  amount = address(this).balance;\n    //     getOwner().transfer(amount * 1 wei);\n    //     emit InvestmentsWithdrawn(amount, block.timestamp);\n    // }\n\n    /**\n     * @dev Get current balance of smart contract in wei. Callable only by contract owner\n     * @return uint256 Current contract balance if wei\n    */\n    \n    // function getCurrentInvestments() view external onlyOwner returns(uint256)\n    // {\n    //     return address(this).balance;\n    // }\n\n    /**\n     * @dev Get the address of owner of this smart contract\n     * @return address\n    */\n    function getOwner() view internal returns(address payable)\n    {\n        return owner;\n    }\n\n    /**\n     * @return true if the transaction can buy tokens\n    */ \n    // function validPurchase(uint256 tokensAmount) internal pure returns (bool) {\n    //     bool nonZeroPurchase = tokensAmount != 0;\n    //     return nonZeroPurchase;\n    // }\n    function destroy() external onlyOwner{\n        selfdestruct(getOwner());\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a27b46536c66c8e30000000600681905550611632806100726000396000f3fe608060405234801561001057600080fd5b5060043610610190576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100fb578063965232c0116100b4578063dd62ed3e1161008e578063dd62ed3e1461061d578063e1f21c6714610695578063f019c26714610703578063f2fde38b1461077157610190565b8063965232c014610509578063a9059cbb14610561578063bcdd6121146105af57610190565b806370a08231146103a957806379fdf548146104015780637d64bcb41461044f57806383197ef0146104595780638da5cb5b1461046357806395d89b41146104ad57610190565b806324f65ee71161014d57806324f65ee7146102db5780632854bc7e146102f95780632f087a2814610327578063313ce56714610345578063355274ea14610369578063676cb63d1461038757610190565b806305d2035b1461019557806306fdde03146101b757806315070401146101d557806317d7de7c1461023157806318160ddd1461024f57806323b872dd1461026d575b600080fd5b61019d6107b5565b604051808215151515815260200191505060405180910390f35b6101bf6107c8565b6040518082815260200191505060405180910390f35b6101dd6107ec565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610239610814565b6040518082815260200191505060405180910390f35b61025761083c565b6040518082815260200191505060405180910390f35b6102d96004803603606081101561028357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610846565b005b6102e361094d565b6040518082815260200191505060405180910390f35b6103256004803603602081101561030f57600080fd5b8101908080359060200190929190505050610959565b005b61032f6109be565b6040518082815260200191505060405180910390f35b61034d6109c8565b604051808260ff1660ff16815260200191505060405180910390f35b6103716109cd565b6040518082815260200191505060405180910390f35b61038f6109d3565b604051808215151515815260200191505060405180910390f35b6103eb600480360360208110156103bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ea565b6040518082815260200191505060405180910390f35b61044d6004803603604081101561041757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a33565b005b610457610a9c565b005b610461610b41565b005b61046b610bbc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104b5610be1565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61054b6004803603602081101561051f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c05565b6040518082815260200191505060405180910390f35b6105ad6004803603604081101561057757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c4e565b005b61061b600480360360608110156105c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d51565b005b61067f6004803603604081101561063357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e24565b6040518082815260200191505060405180910390f35b610701600480360360608110156106ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f58565b005b61076f6004803603606081101561071957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611007565b005b6107b36004803603602081101561078757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110fa565b005b600760009054906101000a900460ff1681565b7f53594e436f696e0000000000000000000000000000000000000000000000000081565b60007f53594e4300000000000000000000000000000000000000000000000000000000905090565b60007f53594e436f696e00000000000000000000000000000000000000000000000000905090565b6000600554905090565b61084f836109ea565b811115151561085d57600080fd5b6108678383610e24565b811115151561087557600080fd5b6108998361089483610886876109ea565b61124f90919063ffffffff16565b611268565b6108bd826108b8836108aa866109ea565b6112ec90919063ffffffff16565b611268565b6108e383836108de846108d08888610e24565b61124f90919063ffffffff16565b61130a565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000601260ff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109b457600080fd5b8060068190555050565b6000600654905090565b601281565b60065481565b6000600760009054906101000a900460ff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8e57600080fd5b610a988282611428565b5050565b600760009054906101000a900460ff16151515610ab857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1357600080fd5b7fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9c57600080fd5b610ba461158b565b73ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f53594e430000000000000000000000000000000000000000000000000000000081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610c8957600080fd5b610c92336109ea565b8111151515610ca057600080fd5b610cc433610cbf83610cb1336109ea565b61124f90919063ffffffff16565b611268565b610ce882610ce383610cd5866109ea565b6112ec90919063ffffffff16565b611268565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8b57600080fd5b610db18383610dac84610d9e8888610e24565b6112ec90919063ffffffff16565b61130a565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610e0a8686610e24565b6040518082815260200191505060405180910390a3505050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e8b57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610ec85750610e9961158b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ed357600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9257600080fd5b610f9d33838361130a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104157600080fd5b600061104d8484610e24565b905080821115611068576110638484600061130a565b611086565b6110858484611080858561124f90919063ffffffff16565b61130a565b5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256110df8787610e24565b6040518082815260200191505060405180910390a350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561115557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561119157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561125d57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156112a457600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080828401905083811015151561130057fe5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561134657600080fd5b600061137e826113706113598787610e24565b61136288610c05565b61124f90919063ffffffff16565b6112ec90919063ffffffff16565b9050611389846109ea565b811115151561139757600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061142284826115b4565b50505050565b600760009054906101000a900460ff1615151561144457600080fd5b61144d826109ea565b8111156114d4576000611471611462846109ea565b8361124f90919063ffffffff16565b905061147b6109be565b6114958261148761083c565b6112ec90919063ffffffff16565b111515156114a257600080fd5b6114c46114bf826114b161083c565b6112ec90919063ffffffff16565b6115fc565b6114ce8383611268565b50611521565b60006114f1826114e3856109ea565b61124f90919063ffffffff16565b90506115156115108261150261083c565b61124f90919063ffffffff16565b6115fc565b61151f8383611268565b505b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b806005819055505056fea165627a7a72305820136018328dcecf00bd999c01543a5f89750f405648d75eeec83ac896c08e3ce40029"
}