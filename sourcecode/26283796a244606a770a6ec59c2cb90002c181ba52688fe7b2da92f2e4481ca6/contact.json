{
  "address": "0xd2e46fcde7ad104c86266f3bd5f50f8a852c8415",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BKToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\npragma solidity ^0.4.17;\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n    //ERC 20 token\n    \n    contract BKToken is SafeMath {\n        string public constant name = \"ButterflyToken\";  //Burrerfly Token\n        string public constant symbol = \"BK\"; //BK\n        uint public constant decimals = 8;\n        uint256 _totalSupply = 7579185859 * 10**decimals;\n        address trader = 0x60C8eD2EbD76839a5Ec563D78E6D1f02575660Af;\n \n        function setTrader(address _addr) returns (bool success){\n            if (msg.sender!=founder) revert();\n            trader = _addr;\n        }\n        \n        function totalSupply() constant returns (uint256 supply) {\n            return _totalSupply;\n        }\n \n        function balanceOf(address _owner) constant returns (uint256 balance) {\n            return balances[_owner];\n        }\n \n        function approve(address _spender, uint256 _value) returns (bool success) {\n            require((_value == 0)||(allowed[msg.sender][_spender] ==0));\n            allowed[msg.sender][_spender] = _value;\n            Approval(msg.sender, _spender, _value);\n            return true;\n        }\n \n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n          return allowed[_owner][_spender];\n        }\n        \n        enum DistType{\n            Miner,  //98% no lock\n            Team,   //0.4% 3 years 36 months\n            Private_Placement, //0.1% one year 12 months\n            Foundation //1.5% 0.5% no lock and 0.083% one month\n        }\n        \n        mapping(address => uint256) balances;\n        mapping(address => uint256) distBalances;\n        mapping(address => DistType) public distType;\n        mapping(address => mapping (address => uint256)) allowed;\n        \n        uint public baseStartTime;\n        \n        address startAddr = 0x1B66B59ABBF0AEB60F30E89607B2AD00000186A0;\n        address endAddr = 0x1B66B59ABBF0AEB60F30E89607B2AD00FFFFFFFF;\n \n        address public founder;\n        uint256 public distributed = 0;\n \n        event AllocateFounderTokens(address indexed sender);\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n        event Tradein(address indexed _from, address indexed _to, uint256 _value);\n        event Transgap(address indexed _from, address indexed _to, uint256 _value);\n        function BKToken() {\n            founder = msg.sender;\n            baseStartTime = now;\n            distribute(0x0,DistType.Miner);\n            distribute(0x2Ad35dC7c9952C4A4a6Fe6f135ED07E73849E70F,DistType.Team);\n            distribute(0x155A1B34B021F16adA54a2F1eE35b9deB77fDac8,DistType.Private_Placement);\n            distribute(0xB7e3dB36FF7B82101bBB16aE86C9B5132311150e,DistType.Foundation);\n        }\n \n        function setStartTime(uint _startTime) {\n            if (msg.sender!=founder) revert();\n            baseStartTime = _startTime;\n        }\n        \n        function setOffsetAddr(address _startAddr, address _endAddr) {\n            if (msg.sender!=founder) revert();\n            startAddr = _startAddr;\n            endAddr = _endAddr;\n        }\n \n        function distribute(address _to, DistType _type) {\n            if (msg.sender!=founder) revert();\n            uint256 _percent;\n            if(_type==DistType.Miner)\n                _percent = 980;\n            if(_type==DistType.Team)\n                _percent = 4;\n            if(_type==DistType.Private_Placement)\n                _percent = 1;\n            if(_type==DistType.Foundation)\n                _percent = 15;\n            uint256 _amount = _percent * _totalSupply / 1000;\n            if (distributed + _amount > _totalSupply) revert();\n            distType[_to] = _type;\n            distributed += _amount;\n            balances[_to] += _amount;\n            distBalances[_to] += _amount;\n            Transfer(0,_to,_amount);\n        }\n        \n        function dealorder(address _to, uint256 gapvalue){\n            if (msg.sender!=trader) revert();\n            _transfer(0x0,_to,gapvalue);\n            Transgap(0x0,_to,gapvalue);\n        }\n \n    function _transfer(address _from, address _to, uint256 _value) internal\n    {\n        if (_to == 0x0) throw;\n        if (_value <= 0) throw; \n        if (balances[_from] < _value) throw;\n        if (balances[_to] + _value < balances[_to]) throw;\n        balances[_from] = SafeMath.safeSub(balances[_from], _value);\n        balances[_to] = SafeMath.safeAdd(balances[_to], _value);\n        Transfer(_from, _to, _value);\n    }\n \n        function transfer(address _to, uint256 _value) returns (bool success) {\n            if (now < baseStartTime) revert();\n            if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n                uint _freeAmount = freeAmount(msg.sender);\n                if (_freeAmount < _value) {\n                    revert();\n                    return false;\n                } \n                balances[msg.sender] = SafeMath.safeSub(balances[msg.sender], _value);\n                if(_to >= startAddr && _to <= endAddr){\n                balances[trader] = SafeMath.safeAdd(balances[trader], _value);  \n                Tradein(msg.sender, _to, _value);\n                Transfer(msg.sender, trader, _value);\n                }\n                else{\n                balances[_to] = SafeMath.safeAdd(balances[_to], _value);  \n                Transfer(msg.sender, _to, _value);\n                }\n                \n                return true;\n            } else {\n                revert();\n                return false;\n            }\n        }\n \n        function freeAmount(address user) view returns (uint256 amount)  {\n            if (user == founder) {\n                return balances[user];\n            }\n \n            if (now < baseStartTime) {\n                return 0;\n            }\n            \n            if(distType[user] == DistType.Miner){\n                return balances[user];\n            }\n            \n            uint monthDiff = uint((now - baseStartTime) / (30 days));\n            uint yearDiff =  uint((now - baseStartTime) / (360 days));\n            if (monthDiff >= 36) {\n                return balances[user];\n            }\n            \n            uint unrestricted;\n            \n            if(distType[user] == DistType.Team){\n                if(monthDiff < 36)\n                unrestricted  = (distBalances[user] / 36) * monthDiff;\n                else\n                unrestricted = distBalances[user];\n            }\n            \n            if(distType[user] == DistType.Private_Placement){\n                if(monthDiff < 12)\n                unrestricted  = (distBalances[user] / 12) * monthDiff;\n                else\n                unrestricted = distBalances[user];\n            }\n            \n            if(distType[user] == DistType.Foundation){\n                if(monthDiff < 12)\n                unrestricted  = (distBalances[user] / 3) + (distBalances[user] / 18)*(monthDiff);\n                else\n                unrestricted = distBalances[user];\n            }\n \n            if (unrestricted > distBalances[user]) {\n                unrestricted = distBalances[user];\n            }\n            \n            if (unrestricted + balances[user] < distBalances[user]) {\n                amount = 0;\n            } else {\n                amount = unrestricted + (balances[user] - distBalances[user]);\n            }\n \n            return amount;\n        }\n \n        function changeFounder(address newFounder) {\n            if (msg.sender!=founder) revert();\n            founder = newFounder;\n        }\n \n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n            if (msg.sender != founder) revert();\n            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n                uint _freeAmount = freeAmount(_from);\n                if (_freeAmount < _value) {\n                    revert();\n                    return false;\n                } \n                balances[_to] = SafeMath.safeAdd(balances[_to], _value);\n                balances[_from] = SafeMath.safeSub(balances[_from], _value);   \n                allowed[_from][msg.sender] = SafeMath.safeAdd(allowed[_from][msg.sender], _value);\n                Transfer(_from, _to, _value);\n                return true;\n            } else { \n                revert();\n                return false; \n            }\n        }\n \n        function withdrawEther(uint256 amount) {\n            if(msg.sender != founder)throw;\n            founder.transfer(amount);\n        }\n    \n        function() payable {\n        }\n        \n    }",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startAddr\",\"type\":\"address\"},{\"name\":\"_endAddr\",\"type\":\"address\"}],\"name\":\"setOffsetAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTrader\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"gapvalue\",\"type\":\"uint256\"}],\"name\":\"dealorder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Tradein\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transgap\",\"type\":\"event\"}]",
  "bytecode": "60606040526008600a0a6401c3c132c3026000557360c8ed2ebd76839a5ec563d78e6d1f02575660af600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731b66b59abbf0aeb60f30e89607b2ad00000186a0600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731b66b59abbf0aeb60f30e89607b2ad00ffffffff600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5534156200012357600080fd5b33600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426006819055506200018c600080620002316401000000000262001dc8176401000000009004565b620001c1732ad35dc7c9952c4a4a6fe6f135ed07e73849e70f6001620002316401000000000262001dc8176401000000009004565b620001f673155a1b34b021f16ada54a2f1ee35b9deb77fdac86002620002316401000000000262001dc8176401000000009004565b6200022b73b7e3db36ff7b82101bbb16ae86c9b5132311150e6003620002316401000000000262001dc8176401000000009004565b620004b7565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200029157600080fd5b600060038111156200029f57fe5b836003811115620002ac57fe5b1415620002b9576103d491505b60016003811115620002c757fe5b836003811115620002d457fe5b1415620002e057600491505b60026003811115620002ee57fe5b836003811115620002fb57fe5b14156200030757600191505b6003808111156200031457fe5b8360038111156200032157fe5b14156200032d57600f91505b6103e860005483028115156200033f57fe5b04905060005481600a540111156200035657600080fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836003811115620003b257fe5b021790555080600a6000828254019250508190555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505050565b61249380620004c76000396000f3006060604052361561011b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011d578063095ea7b3146101ab5780630f7503c91461020557806318160ddd1461022e57806323b652e51461025757806323b872dd146102b2578063313ce5671461032b5780633bed33ce146103545780633e0a322d1461037757806346ca48a21461039a5780634d853ee5146103e757806370a082311461043c578063743702631461048957806393c32e06146104e157806395d89b411461051a578063a6bc18f9146105a8578063a9059cbb146105f9578063ad2e65a714610653578063dd62ed3e14610698578063f0c48fbf14610704578063f84b903e14610746575b005b341561012857600080fd5b61013061076f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610170578082015181840152602081019050610155565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b657600080fd5b6101eb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107a8565b604051808215151515815260200191505060405180910390f35b341561021057600080fd5b61021861092f565b6040518082815260200191505060405180910390f35b341561023957600080fd5b610241610935565b6040518082815260200191505060405180910390f35b341561026257600080fd5b61028e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061093e565b6040518082600381111561029e57fe5b60ff16815260200191505060405180910390f35b34156102bd57600080fd5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061095e565b604051808215151515815260200191505060405180910390f35b341561033657600080fd5b61033e610dc9565b6040518082815260200191505060405180910390f35b341561035f57600080fd5b6103756004808035906020019091905050610dce565b005b341561038257600080fd5b6103986004808035906020019091905050610e8f565b005b34156103a557600080fd5b6103d1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ef5565b6040518082815260200191505060405180910390f35b34156103f257600080fd5b6103fa6115f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044757600080fd5b610473600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061161e565b6040518082815260200191505060405180910390f35b341561049457600080fd5b6104df600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611667565b005b34156104ec57600080fd5b610518600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611749565b005b341561052557600080fd5b61052d6117e9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056d578082015181840152602081019050610552565b50505050905090810190601f16801561059a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105b357600080fd5b6105df600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611822565b604051808215151515815260200191505060405180910390f35b341561060457600080fd5b610639600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506118c6565b604051808215151515815260200191505060405180910390f35b341561065e57600080fd5b610696600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff16906020019091905050611dc8565b005b34156106a357600080fd5b6106ee600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061203e565b6040518082815260200191505060405180910390f35b341561070f57600080fd5b610744600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506120c5565b005b341561075157600080fd5b610759612181565b6040518082815260200191505060405180910390f35b6040805190810160405280600e81526020017f427574746572666c79546f6b656e00000000000000000000000000000000000081525081565b60008082148061083457506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561083f57600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60065481565b60008054905090565b60046020528060005260406000206000915054906101000a900460ff1681565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109bd57600080fd5b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a88575082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610b135750600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610dbc57610b2185610ef5565b905082811015610b3057600080fd5b610b79600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612187565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c05600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846121b1565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cce600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612187565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610dc1565b600080fd5b509392505050565b600881565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e2a57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610e8c57600080fd5b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eeb57600080fd5b8060068190555050565b600080600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610f9857600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506115f0565b600654421015610fab57600093506115f0565b60006003811115610fb857fe5b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600381111561101057fe5b141561105d57600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506115f0565b62278d00600654420381151561106f57fe5b0492506301da9c00600654420381151561108557fe5b0491506024831015156110d957600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506115f0565b600160038111156110e657fe5b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600381111561113e57fe5b14156111e65760248310156111a257826024600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481151561119957fe5b040290506111e5565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b5b600260038111156111f357fe5b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600381111561124b57fe5b14156112f357600c8310156112af5782600c600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548115156112a657fe5b040290506112f2565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b5b6003808111156112ff57fe5b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600381111561135757fe5b141561144b57600c83101561140757826012600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548115156113b257fe5b040260038060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548115156113fe57fe5b0401905061144a565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156114d557600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548201101561156657600093506115ec565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403810193505b8393505b505050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116c357600080fd5b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117a557600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280600281526020017f424b00000000000000000000000000000000000000000000000000000000000081525081565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188057600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b6000806006544210156118d857600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156119a65750600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611dbc576119b433610ef5565b9050828110156119c357600080fd5b611a0c600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846121b1565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610158015611afb5750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611155b15611cc157611b6b60026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612187565b60026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fff3c9aaae55fa04e86004cc997a0abb7ee800392609c4ab6afdb228fb2980b30856040518082815260200191505060405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3611db3565b611d0a600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612187565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b60019150611dc1565b600080fd5b5092915050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e2757600080fd5b60006003811115611e3457fe5b836003811115611e4057fe5b1415611e4c576103d491505b60016003811115611e5957fe5b836003811115611e6557fe5b1415611e7057600491505b60026003811115611e7d57fe5b836003811115611e8957fe5b1415611e9457600191505b600380811115611ea057fe5b836003811115611eac57fe5b1415611eb757600f91505b6103e86000548302811515611ec857fe5b04905060005481600a54011115611ede57600080fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836003811115611f3957fe5b021790555080600a6000828254019250508190555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561212157600080fd5b61212d600083836121ca565b8173ffffffffffffffffffffffffffffffffffffffff1660007fa8cb34e28e40b8aa9726efbe80ab45fb4e2064e3506a0595c96a10d9f17e3c72836040518082815260200191505060405180910390a35050565b600a5481565b60008082840190506121a78482101580156121a25750838210155b612458565b8091505092915050565b60006121bf83831115612458565b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614156121ee57600080fd5b6000811115156121fd57600080fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561224957600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156122d657600080fd5b61231f600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826121b1565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506123ab600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612187565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b80151561246457600080fd5b505600a165627a7a72305820c716a2d149ad6f5fbbe7e8881c5b0809ca18fc2d28a5f39760b4da29a21d90bb0029"
}