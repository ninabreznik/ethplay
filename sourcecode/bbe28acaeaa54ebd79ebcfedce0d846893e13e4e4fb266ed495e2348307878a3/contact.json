{
  "address": "0xb032f90b95cf71fd4b040f254a8dde141198e335",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "readFiftyContract",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity ^0.5.3;\n\ncontract FiftyContract {\n\tmapping (address => mapping (uint => mapping (uint => mapping (uint => treeNode)))) public treeChildren;\n\tmapping (address => mapping (uint => bool)) public currentNodes;\n\tmapping (address => mapping (uint => uint)) public nodeIDIndex;\n\tmapping (address => uint) public membership;\n\tmapping(address => mapping(uint => uint)) public memberOrders;\n\tmapping (address => uint) public nodeReceivedETH;\n\tstruct treeNode {\n\t\t address payable ethAddress; \n\t\t uint nodeType; \n\t\t uint nodeID;\n\t}\n\tuint public spread;\n}\ncontract Adminstrator {\n  address public admin;\n  address payable public owner;\n\n  modifier onlyAdmin() { \n        require(msg.sender == admin || msg.sender == owner,\"Not authorized\"); \n        _;\n  } \n\n  constructor() public {\n    admin = msg.sender;\n\towner = msg.sender;\n  }\n\n  function transferAdmin(address newAdmin) public onlyAdmin {\n    admin = newAdmin; \n  }\n}\ncontract readFiftyContract is Adminstrator{\n\t\n\taddress public baseAddr = 0x7B15bd1B13ACa9127e5e3bfaF238aB51839f8Ea2;\n\tFiftyContract bcontract = FiftyContract(baseAddr);\n\t\n\tfunction setContract(address newAddr) public onlyAdmin {\n\t\tbaseAddr = newAddr;\n\t\tbcontract = FiftyContract(baseAddr);\n\t}\n\tfunction getReceivedETH(address r) public view returns (uint, uint, uint, uint, uint){\n\t\treturn ( bcontract.nodeReceivedETH(r) , bcontract.nodeIDIndex(r, 1 ether) \n\t\t, bcontract.nodeIDIndex(r, 2 ether) , bcontract.nodeIDIndex(r, 3 ether) \n\t\t, bcontract.nodeIDIndex(r, 5 ether) );\n\t}\n\tfunction getTree(address r, uint t, uint cc) public view returns(address[7] memory){\n\t\taddress[7] memory Adds;\n\t\tif(bcontract.nodeIDIndex(r,t) <= cc) return Adds;\n\t\t(,uint pp,) = bcontract.treeChildren(r,t,cc,0);\n\t\tif (pp!=0 || bcontract.nodeIDIndex(r,t) == (cc+1) ) Adds[0]=r;\n\t\telse return Adds;\n\t\tuint8 spread = uint8(bcontract.spread());\n\t\tfor (uint8 i=0; i < spread; i++) {\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\n\t\t\tif(p != 0){\n\t\t\t\tAdds[i+1]=k;\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Adds;\n\t}\n\t/*function getHistory(address r, uint s) public view returns (bool,uint8, uint8,uint256){\n\t\tif(bcontract.nodeLatestAction(r) <= s) return (false,0,0,0);\n\t\t(FiftyContract.nodeActionType aT, uint8 nP, uint256 tT) = bcontract.nodeActionHistory(r,s);\n\t\tuint8 actType;\n\t\tif(aT == FiftyContract.nodeActionType.joinMember) actType=0;\n\t\tif(aT == FiftyContract.nodeActionType.startTree) actType=1;\n\t\tif(aT == FiftyContract.nodeActionType.addNode) actType=2;\n\t\tif(aT == FiftyContract.nodeActionType.completeTree) actType=3;\n\t\treturn (true,actType,nP,tT);\n\t}*/\n\tfunction getCurrentTree(address r, uint t) public view returns(address[7] memory){\n\t\taddress[7] memory Adds;\n\t\tif(bcontract.nodeIDIndex(r,t) > (2 ** 32) -2 || !bcontract.currentNodes(r,t)) \n\t\t    return Adds;\n\t\tuint cc=bcontract.nodeIDIndex(r,t) - 1;\n\t\tAdds[0]=r;\n\t\tuint8 spread = uint8(bcontract.spread());\n\t\tfor (uint8 i=0; i < spread; i++) {\n\t\t    (address k,uint p,uint m) = bcontract.treeChildren(r,t,cc,i);\n\t\t\tif(p != 0){\n\t\t\t\tAdds[i+1]=k;\n\t\t\t\tfor (uint8 a=0; a < spread; a++) {\n\t\t\t\t    (address L,uint q,) = bcontract.treeChildren(k,p,m,a);    \n\t\t\t\t\tif(q != 0) Adds[i*2+a+3] = L;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Adds;\n\t}\n\tfunction getMemberShip(address r) public view returns(uint){\n\t\treturn bcontract.membership(r);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getCurrentTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getReceivedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"uint256\"},{\"name\":\"cc\",\"type\":\"uint256\"}],\"name\":\"getTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"address\"}],\"name\":\"getMemberShip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405260028054600160a060020a0319908116737b15bd1b13aca9127e5e3bfaf238ab51839f8ea21791829055600380548216600160a060020a03939093169290921790915560008054821633908117909155600180549092161790556110908061006d6000396000f3fe608060405234801561001057600080fd5b50600436106100b0576000357c010000000000000000000000000000000000000000000000000000000090048063845b07ab11610083578063845b07ab1461018b5780638da5cb5b146101dc57806397be8862146101e4578063f851a44014610216578063ffb845bb1461021e576100b0565b806313eb44f1146100b55780632005a9461461011957806375829def1461013d57806375f890ab14610165575b600080fd5b6100e1600480360360408110156100cb57600080fd5b50600160a060020a038135169060200135610256565b604051808260e080838360005b838110156101065781810151838201526020016100ee565b5050505090500191505060405180910390f35b6101216106ae565b60408051600160a060020a039092168252519081900360200190f35b6101636004803603602081101561015357600080fd5b5035600160a060020a03166106bd565b005b6101636004803603602081101561017b57600080fd5b5035600160a060020a031661077c565b6101b1600480360360208110156101a157600080fd5b5035600160a060020a0316610848565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b610121610b20565b6100e1600480360360608110156101fa57600080fd5b50600160a060020a038135169060208101359060400135610b2f565b610121610f9a565b6102446004803603602081101561023457600080fd5b5035600160a060020a0316610fa9565b60408051918252519081900360200190f35b61025e611045565b610266611045565b6003546040805160e060020a63aaf96581028152600160a060020a03878116600483015260248201879052915163fffffffe93929092169163aaf9658191604480820192602092909190829003018186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d60208110156102ee57600080fd5b505111806103925750600354604080517fa3d250f5000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018790529151919092169163a3d250f5916044808301926020929190829003018186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d602081101561038e57600080fd5b5051155b1561039e5790506106a8565b6003546040805160e060020a63aaf96581028152600160a060020a038781166004830152602482018790529151600093600193169163aaf96581916044808301926020929190829003018186803b1580156103f857600080fd5b505afa15801561040c573d6000803e3d6000fd5b505050506040513d602081101561042257600080fd5b5051600160a060020a038088168552600354604080517f5c25c76c0000000000000000000000000000000000000000000000000000000081529051949093039450600093911691635c25c76c916004808301926020929190829003018186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d60208110156104b857600080fd5b5051905060005b8160ff168160ff1610156106a1576003546040805160e060020a630c235b5b028152600160a060020a038a81166004830152602482018a90526044820187905260ff85166064830152915160009384938493911691630c235b5b91608480820192606092909190829003018186803b15801561053a57600080fd5b505afa15801561054e573d6000803e3d6000fd5b505050506040513d606081101561056457600080fd5b50805160208201516040909201519094509092509050811561069657828760ff60018701166007811061059357fe5b600160a060020a03909216602092909202015260005b8560ff168160ff161015610694576003546040805160e060020a630c235b5b028152600160a060020a038781166004830152602482018790526044820186905260ff85166064830152915160009384931691630c235b5b916084808301926060929190829003018186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d606081101561064a57600080fd5b5080516020909101519092509050801561068a57818a60ff600360028b02870101166007811061067657fe5b600160a060020a0390921660209290920201525b50506001016105a9565b505b5050506001016104bf565b5091925050505b92915050565b600254600160a060020a031681565b600054600160a060020a03163314806106e05750600154600160a060020a031633145b151561074d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633148061079f5750600154600160a060020a031633145b151561080c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03938416179182905560038054929093169116179055565b600354604080517f20f78e4a000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093849384938493849392909216916320f78e4a91602480820192602092909190829003018186803b1580156108ba57600080fd5b505afa1580156108ce573d6000803e3d6000fd5b505050506040513d60208110156108e457600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038a81166004830152670de0b6b3a764000060248301529151919092169163aaf96581916044808301926020929190829003018186803b15801561094457600080fd5b505afa158015610958573d6000803e3d6000fd5b505050506040513d602081101561096e57600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038b81166004830152671bc16d674ec8000060248301529151919092169163aaf96581916044808301926020929190829003018186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d60208110156109f857600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038c811660048301526729a2241af62c000060248301529151919092169163aaf96581916044808301926020929190829003018186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d6020811015610a8257600080fd5b50516003546040805160e060020a63aaf96581028152600160a060020a038d81166004830152674563918244f4000060248301529151919092169163aaf96581916044808301926020929190829003018186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d6020811015610b0c57600080fd5b5051939a9299509097509550909350915050565b600154600160a060020a031681565b610b37611045565b610b3f611045565b6003546040805160e060020a63aaf96581028152600160a060020a0388811660048301526024820188905291518693929092169163aaf9658191604480820192602092909190829003018186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d6020811015610bc357600080fd5b505111610bd1579050610f93565b6003546040805160e060020a630c235b5b028152600160a060020a0388811660048301526024820188905260448201879052600060648301819052925192931691630c235b5b91608480820192606092909190829003018186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d6060811015610c6257600080fd5b5060200151905080151580610cfd57506003546040805160e060020a63aaf96581028152600160a060020a0389811660048301526024820189905291516001880193929092169163aaf9658191604480820192602092909190829003018186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d6020811015610cf957600080fd5b5051145b15610d1357600160a060020a0386168252610d1b565b509050610f93565b600354604080517f5c25c76c0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691635c25c76c916004808301926020929190829003018186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d6020811015610da357600080fd5b5051905060005b8160ff168160ff161015610f8c576003546040805160e060020a630c235b5b028152600160a060020a038b81166004830152602482018b9052604482018a905260ff85166064830152915160009384938493911691630c235b5b91608480820192606092909190829003018186803b158015610e2557600080fd5b505afa158015610e39573d6000803e3d6000fd5b505050506040513d6060811015610e4f57600080fd5b508051602082015160409092015190945090925090508115610f8157828760ff600187011660078110610e7e57fe5b600160a060020a03909216602092909202015260005b8560ff168160ff161015610f7f576003546040805160e060020a630c235b5b028152600160a060020a038781166004830152602482018790526044820186905260ff85166064830152915160009384931691630c235b5b916084808301926060929190829003018186803b158015610f0b57600080fd5b505afa158015610f1f573d6000803e3d6000fd5b505050506040513d6060811015610f3557600080fd5b50805160209091015190925090508015610f7557818a60ff600360028b028701011660078110610f6157fe5b600160a060020a0390921660209290920201525b5050600101610e94565b505b505050600101610daa565b5091925050505b9392505050565b600054600160a060020a031681565b600354604080517f772ccf5d000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163772ccf5d91602480820192602092909190829003018186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d602081101561103d57600080fd5b505192915050565b60e060405190810160405280600790602082028038833950919291505056fea165627a7a723058204b5e2fbf60d8ce91da809cccb171db67920e03dee41ea4795ae2717cf7f4f3970029"
}