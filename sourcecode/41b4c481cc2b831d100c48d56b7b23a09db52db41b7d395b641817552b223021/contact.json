{
  "address": "0x938358f6f7786735cffbac3a218f3be16e496cf4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HODLwin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-08\n*/\n\npragma solidity ^0.4.16;\n\n// ----------------------------------------------------------------------------\n//\n//  HODLwin sale contract\n//\n//  For details, please visit: https://www.HODLwin.com\n//\n//  There is a clue to our 5% token giveaway contest in this code  \n//  and also a couple of other surprises, good luck\n//  Remember to win the prize you and get the remaining clues you\n//  must be a token holder and registered for the contest on our\n//  webpage. https://www.hodlwin.com\n//\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n//\n// SafeMath3\n//\n// Adapted from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n// (no need to implement division)\n//\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath3 {\n\n  function mul(uint a, uint b) internal pure returns (uint c) {\n    c = a * b;\n    assert(a == 0 || c / a == b);\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint c) {\n    c = a + b;\n    assert(c >= a);\n  }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// Owned contract\n//\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n  address public owner;\n  address public newOwner;\n\n  // Events ---------------------------\n\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n\n  // Modifier -------------------------\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  // Functions ------------------------\n\n  function Owned() public {\n    owner = msg.sender;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != owner);\n    require(_newOwner != address(0x0));\n    OwnershipTransferProposed(owner, _newOwner);\n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    require(msg.sender == newOwner);\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// Clue-1 the password is a quote from a famous person, for more clues\n// read the comments in this code carefully, register for the competion for the \n// easier clues on our website www.hodlwin.com, plus keep an eye out for other \n// bounties below.\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n  // Events ---------------------------\n\n  event Transfer(address indexed _from, address indexed _to, uint _value);\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n  // Functions ------------------------\n\n  function totalSupply() public constant returns (uint);\n  function balanceOf(address _owner) public constant returns (uint balance);\n  function transfer(address _to, uint _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n  function approve(address _spender, uint _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint remaining);\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// ERC Token Standard #20\n//\n// ----------------------------------------------------------------------------\n\ncontract ERC20Token is ERC20Interface, Owned {\n  \n  using SafeMath3 for uint;\n\n  uint public tokensIssuedTotal = 0;\n  mapping(address => uint) balances;\n  mapping(address => mapping (address => uint)) allowed;\n\n  // Functions ------------------------\n\n  /* Total token supply */\n\n  function totalSupply() public constant returns (uint) {\n    return tokensIssuedTotal;\n  }\n\n  /* Get the account balance for an address */\n\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  /* Transfer the balance from owner's account to another account */\n\n  function transfer(address _to, uint _amount) public returns (bool success) {\n    // amount sent cannot exceed balance\n    require(balances[msg.sender] >= _amount);\n\n    // update balances\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n\n    // log event\n    Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /* Allow _spender to withdraw from your account up to _amount */\n\n  function approve(address _spender, uint _amount) public returns (bool success) {\n    // approval amount cannot exceed the balance\n    require(balances[msg.sender] >= _amount);\n      \n    // update allowed amount\n    allowed[msg.sender][_spender] = _amount;\n    \n    // log event\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /* Spender of tokens transfers tokens from the owner's balance */\n  /* Must be pre-approved by owner */\n\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n    // balance checks\n    require(balances[_from] >= _amount);\n    require(allowed[_from][msg.sender] >= _amount);\n\n    // update balances and allowed amount\n    balances[_from] = balances[_from].sub(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n\n    // log event\n    Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /* Returns the amount of tokens approved by the owner */\n  /* that can be transferred by spender */\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n// ----------------------------------------------------------------------------\n//\n// WIN public token sale\n//\n// ----------------------------------------------------------------------------\n\ncontract HODLwin is ERC20Token {\n\n  /* Utility variable */\n  \n  \n  /* Basic token data */\n\n  string public constant name = \"HODLwin\";\n  string public constant symbol = \"WIN\";\n  uint8  public constant decimals = 18;\n\n  /* Wallet addresses - initially set to owner at deployment */\n  \n  address public wallet;\n  address public adminWallet;\n\n  /* ICO dates */\n\n  uint public constant DATE_PRESALE_START = 1518105804; // (GMT): Thursday, 8 February 2018 14:24:58\n  uint public constant DATE_PRESALE_END   = 1523019600; // (GMT): Friday, 6 April 2018 13:00:00\n\n  uint public constant DATE_ICO_START = 1523019600; // (GMT): Friday, 6 April 2018 13:00:00\n  uint public constant DATE_ICO_END   = 1530882000; // (GMT): Friday, 6 July 2018 13:00:00\n\n  /* ICO tokens per ETH */\n  \n  uint public tokensPerEth = 1000 * 10**18; // rate during public ICO after bonus period\n                                                //-------------------------\n  uint public constant BONUS_PRESALE      = 50;// Clue-2 pyethrecover may \n  uint public constant BONUS_ICO_PERIOD_ONE = 20;// be useful once you receive\n  uint public constant BONUS_ICO_PERIOD_TWO = 10;// further clues                \n                                                //-------------------------\n  /* Other ICO parameters */  \n  \n  uint public constant TOKEN_SUPPLY_TOTAL = 100000000 * 10**18; // 100 mm tokens\n  uint public constant TOKEN_SUPPLY_ICO   = 50000000 * 10**18; // 50 mm tokens avalibale for presale and public\n  uint public constant TOKEN_SUPPLY_AIR   = 50000000 * 10**18; //  50 mm tokens, all team tokens, airdrop, bounties will be sent publicly using this so everything is transparent\n\n  uint public constant PRESALE_ETH_CAP =  10000 ether;\n\n  uint public constant MIN_FUNDING_GOAL =  100 * 10**18 ; //\n  \n  uint public constant MIN_CONTRIBUTION = 1 ether / 20; // 0.05 Ether\n  uint public constant MAX_CONTRIBUTION = 10000 ether;\n\n  uint public constant COOLDOWN_PERIOD =  1 days;\n  uint public constant CLAWBACK_PERIOD = 90 days;\n\n  /* Crowdsale variables */\n\n  uint public icoEtherReceived = 0; // Ether actually received by the contract\n\n  uint public tokensIssuedIco   = 0;\n  uint public tokensIssuedAir   = 0;\n  \n\n  /* Keep track of Ether contributed and tokens received during Crowdsale */\n  \n  mapping(address => uint) public icoEtherContributed;\n  mapping(address => uint) public icoTokensReceived;\n\n  /* Keep track of participants who \n   /* have reclaimed their contributions in case of failed Crowdsale */\n\n   mapping(address => bool) public refundClaimed;\n \n\n  // Events ---------------------------\n  \n  event WalletUpdated(address _newWallet);\n  event AdminWalletUpdated(address _newAdminWallet);\n  event TokensPerEthUpdated(uint _tokensPerEth);\n  event TokensMinted(address indexed _owner, uint _tokens, uint _balance);\n  event TokensIssued(address indexed _owner, uint _tokens, uint _balance, uint _etherContributed);\n  event Refund(address indexed _owner, uint _amount, uint _tokens);\n \n\n  // Basic Functions ------------------\n\n  /* Initialize (owner is set to msg.sender by Owned.Owned() */\n\n  function HODLwin () public {\n    require(TOKEN_SUPPLY_ICO + TOKEN_SUPPLY_AIR == TOKEN_SUPPLY_TOTAL);\n    wallet = owner;\n    adminWallet = owner;\n  }\n\n  /* Fallback */\n  \n  function () public payable {\n    buyTokens();\n  }\n  \n  // Information functions ------------\n  \n  /* What time is it? */\n  \n  function atNow() public constant returns (uint) {\n    return now;\n  }\n  \n  /* Has the minimum threshold been reached? */\n  \n  function icoThresholdReached() public constant returns (bool thresholdReached) {\n     if (icoEtherReceived < MIN_FUNDING_GOAL) {\n        return false; \n     }\n     return true;\n  }  \n  \n  /* Are tokens transferable? */\n\n  function isTransferable() public constant returns (bool transferable) {\n     if (!icoThresholdReached()) { \n         return false;\n         }\n     if (atNow() < DATE_ICO_END + COOLDOWN_PERIOD) {\n          return false; \n          }\n     return true;\n  }\n  \n  // Owner Functions ------------------\n  \n  /* Change the crowdsale wallet address */\n\n  function setWallet(address _wallet) public onlyOwner {\n    require(_wallet != address(0x0));\n    wallet = _wallet;\n    WalletUpdated(wallet);\n  }\n\n  /* Change the admin wallet address */\n\n  function setAdminWallet(address _wallet) public onlyOwner {\n    require(_wallet != address(0x0));\n    adminWallet = _wallet;\n    AdminWalletUpdated(adminWallet);\n  }\n\n  /* Change tokensPerEth before ICO start */\n  \n  function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {\n    require(atNow() < DATE_PRESALE_START);\n    tokensPerEth = _tokensPerEth;\n    TokensPerEthUpdated(_tokensPerEth);\n  }\n\n  /* Minting of airdrop tokens by owner */\n\n  function mintAirdrop(address _participant, uint _tokens) public onlyOwner {\n    // check amount\n    require(_tokens <= TOKEN_SUPPLY_AIR.sub(tokensIssuedAir));\n    require(_tokens.mul(10) <= TOKEN_SUPPLY_AIR);//to prevent mistakenly sending too many tokens to one address in airdrop\n    // update balances\n    balances[_participant] = balances[_participant].add(_tokens);\n    tokensIssuedAir = tokensIssuedAir.add(_tokens);\n    tokensIssuedTotal = tokensIssuedTotal.add(_tokens);\n\n    // log the miniting\n    Transfer(0x0, _participant, _tokens);\n    TokensMinted(_participant, _tokens, balances[_participant]);\n  }\n\nfunction mintMultiple(address[] _addresses, uint _tokens) public onlyOwner {\n    require(msg.sender == adminWallet);\n    require(_tokens.mul(10) <= TOKEN_SUPPLY_AIR);//to prevent mistakenly sending all tokens to one address in airdrop\n    for (uint i = 0; i < _addresses.length; i++) {\n     mintAirdrop(_addresses[i], _tokens);\n        }\n    \n  }  \n  \n  /* Owner clawback of remaining funds after clawback period */\n  /* (for use in case of a failed Crwodsale) */\n  \n  function ownerClawback() external onlyOwner {\n    require(atNow() > DATE_ICO_END + CLAWBACK_PERIOD);\n    wallet.transfer(this.balance);\n  }\n\n  /* Transfer out any accidentally sent ERC20 tokens */\n\n  function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\n  }\n\n  // Private functions ----------------\n\n//caspsareimportant\n//---------------------------------------------------------------------\n// the first PeRson to send an email to hodlwin at ([email protected]) with the\n// subject title as \"first\" and also in the Email State the wallet address\n// used to buy theIr hodlwin tokens will win 1000 hodlwin tkns and 0.1 eth\n// these will be sent as soon as we verify that you are a hoDlwin token hodlr\n// the tokEns and 0.1 eth will be seNT to the address you used for the token\n// sale.you must have conrtibuted the minimum 0.05eth to the token sale to \n// win this competetion.when its won it will be announced on our website in\n// the Updates section. Or you can watch the blockchain and See the pAyment\n//------------------------------------------------------------------------\n\n  /* Accept ETH during crowdsale (called by default function) */\n  function buyTokens() private {\n    uint ts = atNow();\n    bool isPresale = false;\n    bool isIco = false;\n    uint tokens = 0;\n    \n    // minimum contribution\n    require(msg.value >= MIN_CONTRIBUTION);\n    \n    // one address transfer hard cap\n    require(icoEtherContributed[msg.sender].add(msg.value) <= MAX_CONTRIBUTION);\n\n    // check dates for presale or ICO\n    if (ts > DATE_PRESALE_START && ts < DATE_PRESALE_END) {\n         isPresale = true; \n         }\n    if (ts > DATE_ICO_START && ts < DATE_ICO_END) {\n         isIco = true; \n         }\n    if (ts > DATE_PRESALE_START && ts < DATE_ICO_END && icoEtherReceived >= PRESALE_ETH_CAP) { \n        isIco = true; \n        }\n    if (ts > DATE_PRESALE_START && ts < DATE_ICO_END && icoEtherReceived >= PRESALE_ETH_CAP) {\n         isPresale = false;\n          }\n\n    require(isPresale || isIco);\n\n    // presale cap in Ether\n    if (isPresale) {\n        require(icoEtherReceived.add(msg.value) <= PRESALE_ETH_CAP);\n    }\n    \n    // get baseline number of tokens\n    tokens = tokensPerEth.mul(msg.value) / 1 ether;\n    \n    // apply bonuses (none for last PERIOD)\n    if (isPresale) {\n      tokens = tokens.mul(100 + BONUS_PRESALE) / 100;\n    } else if (ts < DATE_ICO_START + 21 days) {\n      // first PERIOD ico bonus\n      tokens = tokens.mul(100 + BONUS_ICO_PERIOD_ONE) / 100;\n    } else if (ts < DATE_ICO_START + 42 days) {\n      // second PERIOD ico bonus\n      tokens = tokens.mul(100 + BONUS_ICO_PERIOD_TWO) / 100;\n    }\n    \n    // ICO token volume cap\n    require(tokensIssuedIco.add(tokens) <= TOKEN_SUPPLY_ICO );\n\n    // register tokens\n    balances[msg.sender] = balances[msg.sender].add(tokens);\n    icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(tokens);\n    tokensIssuedIco = tokensIssuedIco.add(tokens);\n    tokensIssuedTotal = tokensIssuedTotal.add(tokens);\n    \n    // register Ether\n    icoEtherReceived = icoEtherReceived.add(msg.value);\n    icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value);\n    \n    \n    // log token issuance\n    Transfer(0x0, msg.sender, tokens);\n    TokensIssued(msg.sender, tokens, balances[msg.sender], msg.value);\n\n    // transfer Ether if we're over the threshold\n    if (icoThresholdReached()) {\n        wallet.transfer(this.balance);\n     }\n  }\n  \n  // ERC20 functions ------------------\n\n  /* Override \"transfer\" (ERC20) */\n\n  function transfer(address _to, uint _amount) public returns (bool success) {\n    require(isTransferable());\n      return super.transfer(_to, _amount);\n  }\n  \n  /* Override \"transferFrom\" (ERC20) */\n\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n    require(isTransferable());\n    return super.transferFrom(_from, _to, _amount);\n  }\n////caspsareimportant\n//---------------------------------------------------------------------\n// the next 20 people to send an email to hodlwin at ([email protected]) with the\n// subject title as \"second\" and also in the email state the Wallet address\n// used to buy their hOdlLwin tokens will win 1000 hODlwin tkns \n// these will be sent as soon as we veRify that you are a hOdlwin token hodlr\n// the tokens will be sent to the address you used for the token\n// sale. you must have conrtibuted the minimum 0.05eth to the token sale to \n// Win this competetion. when its won it will be announced on our website in\n// the updates section. or you can look at the blockchain\n//------------------------------------------------------------------------\n  // External functions ---------------\n\n  /* Reclaiming of funds by contributors in case of a failed crowdsale */\n  /* (it will fail if account is empty after ownerClawback) */\n\n  /* While there could not have been any token transfers yet, a contributor */\n  /* may have received minted tokens, so the token balance after a refund */ \n  /* may still be positive */\n  \n  function reclaimFunds() external {\n    uint tokens; // tokens to destroy\n    uint amount; // refund amount\n    \n    // ico is finished and was not successful\n    require(atNow() > DATE_ICO_END && !icoThresholdReached());\n    \n    // check if refund has already been claimed\n    require(!refundClaimed[msg.sender]);\n    \n    // check if there is anything to refund\n    require(icoEtherContributed[msg.sender] > 0);\n    \n    // update variables affected by refund\n    tokens = icoTokensReceived[msg.sender];\n    amount = icoEtherContributed[msg.sender];\n   \n    balances[msg.sender] = balances[msg.sender].sub(tokens);\n    tokensIssuedTotal = tokensIssuedTotal.sub(tokens);\n    \n    refundClaimed[msg.sender] = true;\n    \n    // transfer out refund\n    msg.sender.transfer(amount);\n    \n    // log\n    Transfer(msg.sender, 0x0, tokens);\n    Refund(msg.sender, amount, tokens);\n  }\n\n  function transferMultiple(address[] _addresses, uint[] _amounts) external {\n    require(isTransferable());\n  \n    require(_addresses.length == _amounts.length);\n    for (uint i = 0; i < _addresses.length; i++) {\n     super.transfer(_addresses[i], _amounts[i]);\n    }\n  }  \n\n}",
  "bytecode": "60606040526000600255683635c9adc5dea00000600755600060085560006009556000600a55341561003057600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a52b7d2dcc80cd2e40000006a295be96e64066972000000800114151561009657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f74806101696000396000f300606060405260043610610267576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063021ba8f814610271578063023bb74d1461029a57806305502a62146102c357806306fdde03146102ec578063095ea7b31461037a57806318160ddd146103d45780632121dc75146103fd57806322af47e31461042a57806323b872dd14610453578063313ce567146104cc578063347e26c0146104fb578063350829331461054857806336b19cd71461058157806336d95f56146105d657806340650c91146105ff578063465a092d14610628578063521eb273146106515780635ef79434146106a6578063648fb06f146106cf5780636917fd5e146107325780636e99d52f1461075b57806370a082311461078457806379ba5097146107d157806381aea668146107e657806384ef07781461080f5780638da5cb5b1461083857806394d95f8f1461088d57806395cc2e8b146108b657806395d89b41146108df5780639ea407be1461096d578063a05fccef14610990578063a9059cbb146109d2578063ad796b5d14610a2c578063b557478a14610a55578063b63e93dc14610aa6578063c0c133a814610abb578063cbc8ae5f14610ae4578063cbdd69b514610b0d578063cce4bd5214610b36578063ce916d8514610b4b578063cef9db6d14610b98578063d4ee1d9014610bc1578063d912ebb214610c16578063dc39d06d14610c3f578063dd62ed3e14610c99578063deaa59df14610d05578063e3fe974014610d3e578063f21632e114610d6b578063f2fde38b14610d94578063f6436a7c14610dcd578063fdd7c40214610df6575b61026f610e38565b005b341561027c57600080fd5b610284611452565b6040518082815260200191505060405180910390f35b34156102a557600080fd5b6102ad611459565b6040518082815260200191505060405180910390f35b34156102ce57600080fd5b6102d6611461565b6040518082815260200191505060405180910390f35b34156102f757600080fd5b6102ff611466565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033f578082015181840152602081019050610324565b50505050905090810190601f16801561036c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038557600080fd5b6103ba600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061149f565b604051808215151515815260200191505060405180910390f35b34156103df57600080fd5b6103e76115df565b6040518082815260200191505060405180910390f35b341561040857600080fd5b6104106115e9565b604051808215151515815260200191505060405180910390f35b341561043557600080fd5b61043d61162b565b6040518082815260200191505060405180910390f35b341561045e57600080fd5b6104b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611631565b604051808215151515815260200191505060405180910390f35b34156104d757600080fd5b6104df61165a565b604051808260ff1660ff16815260200191505060405180910390f35b341561050657600080fd5b610532600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061165f565b6040518082815260200191505060405180910390f35b341561055357600080fd5b61057f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611677565b005b341561058c57600080fd5b6105946117d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105e157600080fd5b6105e96117fd565b6040518082815260200191505060405180910390f35b341561060a57600080fd5b61061261180a565b6040518082815260200191505060405180910390f35b341561063357600080fd5b61063b611815565b6040518082815260200191505060405180910390f35b341561065c57600080fd5b610664611823565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106b157600080fd5b6106b9611849565b6040518082815260200191505060405180910390f35b34156106da57600080fd5b610730600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611851565b005b341561073d57600080fd5b610745611978565b6040518082815260200191505060405180910390f35b341561076657600080fd5b61076e61197d565b6040518082815260200191505060405180910390f35b341561078f57600080fd5b6107bb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611984565b6040518082815260200191505060405180910390f35b34156107dc57600080fd5b6107e46119cd565b005b34156107f157600080fd5b6107f9611b2a565b6040518082815260200191505060405180910390f35b341561081a57600080fd5b610822611b32565b6040518082815260200191505060405180910390f35b341561084357600080fd5b61084b611b38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561089857600080fd5b6108a0611b5d565b6040518082815260200191505060405180910390f35b34156108c157600080fd5b6108c9611b6b565b6040518082815260200191505060405180910390f35b34156108ea57600080fd5b6108f2611b73565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610932578082015181840152602081019050610917565b50505050905090810190601f16801561095f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561097857600080fd5b61098e6004808035906020019091905050611bac565b005b341561099b57600080fd5b6109d0600480803590602001908201803590602001919091929080359060200190820180359060200191909192905050611c61565b005b34156109dd57600080fd5b610a12600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cf7565b604051808215151515815260200191505060405180910390f35b3415610a3757600080fd5b610a3f611d1e565b6040518082815260200191505060405180910390f35b3415610a6057600080fd5b610a8c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d2d565b604051808215151515815260200191505060405180910390f35b3415610ab157600080fd5b610ab9611d4d565b005b3415610ac657600080fd5b610ace611e41565b6040518082815260200191505060405180910390f35b3415610aef57600080fd5b610af7611e49565b6040518082815260200191505060405180910390f35b3415610b1857600080fd5b610b20611e58565b6040518082815260200191505060405180910390f35b3415610b4157600080fd5b610b49611e5e565b005b3415610b5657600080fd5b610b82600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506121a8565b6040518082815260200191505060405180910390f35b3415610ba357600080fd5b610bab6121c0565b6040518082815260200191505060405180910390f35b3415610bcc57600080fd5b610bd46121cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c2157600080fd5b610c296121f5565b6040518082815260200191505060405180910390f35b3415610c4a57600080fd5b610c7f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506121fb565b604051808215151515815260200191505060405180910390f35b3415610ca457600080fd5b610cef600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612347565b6040518082815260200191505060405180910390f35b3415610d1057600080fd5b610d3c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123ce565b005b3415610d4957600080fd5b610d5161252e565b604051808215151515815260200191505060405180910390f35b3415610d7657600080fd5b610d7e612554565b6040518082815260200191505060405180910390f35b3415610d9f57600080fd5b610dcb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061255a565b005b3415610dd857600080fd5b610de061270c565b6040518082815260200191505060405180910390f35b3415610e0157600080fd5b610e36600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612711565b005b600080600080610e46611b2a565b935060009250600091506000905066b1a2bc2ec500003410151515610e6a57600080fd5b69021e19e0c9bab2400000610ec734600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b11151515610ed457600080fd5b635a7c74cc84118015610eea5750635ac76f5084105b15610ef457600192505b635ac76f5084118015610f0a5750635b3f67d084105b15610f1457600191505b635a7c74cc84118015610f2a5750635b3f67d084105b8015610f42575069021e19e0c9bab240000060085410155b15610f4c57600191505b635a7c74cc84118015610f625750635b3f67d084105b8015610f7a575069021e19e0c9bab240000060085410155b15610f8457600092505b8280610f8d5750815b1515610f9857600080fd5b8215610fcc5769021e19e0c9bab2400000610fbe3460085461297b90919063ffffffff16565b11151515610fcb57600080fd5b5b670de0b6b3a7640000610fea3460075461299490919063ffffffff16565b811515610ff357fe5b049050821561102657606461101560326064018361299490919063ffffffff16565b81151561101e57fe5b04905061109a565b621baf80635ac76f500184101561106157606461105060146064018361299490919063ffffffff16565b81151561105957fe5b049050611099565b62375f00635ac76f500184101561109857606461108b600a6064018361299490919063ffffffff16565b81151561109457fe5b0490505b5b5b6a295be96e640669720000006110bb8260095461297b90919063ffffffff16565b111515156110c857600080fd5b61111a81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111af81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112078160095461297b90919063ffffffff16565b6009819055506112228160025461297b90919063ffffffff16565b60028190555061123d3460085461297b90919063ffffffff16565b60088190555061129534600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167fdf61f51b99ff0164245d2ca4eb058f919dbe973d48c3891c93e50183b67f3e1e82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543460405180848152602001838152602001828152602001935050505060405180910390a26113cd61252e565b1561144c57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561144b57600080fd5b5b50505050565b6276a70081565b635a7c74cc81565b603281565b6040805190810160405280600781526020017f484f444c77696e0000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156114ef57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b60006115f361252e565b15156116025760009050611628565b62015180635b3f67d001611614611b2a565b10156116235760009050611628565b600190505b90565b600a5481565b600061163b6115e9565b151561164657600080fd5b6116518484846129c2565b90509392505050565b601281565b600b6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561170e57600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f65ef617d87f7e47ab080058ac1d5ebf06817bbd817e49898ab9f9532405ecd9b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b68056bc75e2d6310000081565b66b1a2bc2ec5000081565b69021e19e0c9bab240000081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b635ac76f5081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ae57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190a57600080fd5b6a295be96e6406697200000061192a600a8461299490919063ffffffff16565b1115151561193757600080fd5b600090505b825181101561197357611966838281518110151561195657fe5b9060200190602002015183612711565b808060010191505061193c565b505050565b601481565b6201518081565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a2957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600042905090565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b69021e19e0c9bab240000081565b635ac76f5081565b6040805190810160405280600381526020017f57494e000000000000000000000000000000000000000000000000000000000081525081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c0757600080fd5b635a7c74cc611c14611b2a565b101515611c2057600080fd5b806007819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000611c6b6115e9565b1515611c7657600080fd5b8282905085859050141515611c8a57600080fd5b600090505b84849050811015611cf057611ce28585838181101515611cab57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168484848181101515611cd657fe5b90506020020135612d46565b508080600101915050611c8f565b5050505050565b6000611d016115e9565b1515611d0c57600080fd5b611d168383612d46565b905092915050565b6a295be96e6406697200000081565b600d6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611da857600080fd5b6276a700635b3f67d001611dba611b2a565b111515611dc657600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611e3f57600080fd5b565b635b3f67d081565b6a295be96e6406697200000081565b60075481565b600080635b3f67d0611e6e611b2a565b118015611e805750611e7e61252e565b155b1515611e8b57600080fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611ee457600080fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611f3257600080fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061200882600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f2f90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061206082600254612f2f90919063ffffffff16565b6002819055506001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156120fe57600080fd5b60003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff167f73f04af9dcc582a923ec15d3eea990fe34adabfff2879e28d44572e01a54abb68284604051808381526020018281526020019250505060405180910390a25050565b600c6020528060005260406000206000915090505481565b6a52b7d2dcc80cd2e400000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561225857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561232457600080fd5b6102c65a03f1151561233557600080fd5b50505060405180519050905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561242957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561246557600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4edbfac5b40fe46ac1af1fd222b224b38cfeeb9e21bd4fc6344526c245f7549b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600068056bc75e2d63100000600854101561254c5760009050612551565b600190505b90565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125b557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561261157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561264d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561276c57600080fd5b61278c600a546a295be96e64066972000000612f2f90919063ffffffff16565b811115151561279a57600080fd5b6a295be96e640669720000006127ba600a8361299490919063ffffffff16565b111515156127c757600080fd5b61281981600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061287181600a5461297b90919063ffffffff16565b600a8190555061288c8160025461297b90919063ffffffff16565b6002819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb47582600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a25050565b6000818301905082811015151561298e57fe5b92915050565b6000818302905060008314806129b457508183828115156129b157fe5b04145b15156129bc57fe5b92915050565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612a1257600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612a9d57600080fd5b612aef82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f2f90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bc182600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f2f90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c9382600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612d9657600080fd5b612de882600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f2f90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e7d82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461297b90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000828211151515612f3d57fe5b8183039050929150505600a165627a7a72305820a56d2817ba2a5dafe054e603de4e9d14adcc97ba1df3ed6961157f334844052d0029"
}