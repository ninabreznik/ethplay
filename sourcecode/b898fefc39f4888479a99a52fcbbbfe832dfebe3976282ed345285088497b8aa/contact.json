{
  "address": "0x3c1ce1c005ff289177b7eebb134e5a2ec8f3c580",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LightCrowdsale",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.4.25 <0.6.0;\n\n/**\n * Minimum recomendation: 10(GWEI) & 121000 Gas \n   Minimum send to this contract = 0.2 eth\n   Approximately 2.5 mill tokens = 10.000 ETH \"hard goal\"\n   Deadline 4/aug/2019\n */\n\ninterface token {\n    function transfer(address receiver, uint amount) external;\n}\n\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract LightCrowdsale is ReentrancyGuard {\n\n    using SafeMath for uint256;\n    using SafeMath for uint;\n\n    address payable public beneficiary; // wallet to send eth to\n    uint public fundingGoal; // maximum amount to raise\n    uint public amountRaised; // current amount raised\n    uint public minAmountWei; // min amount for crowdsale\n    uint public deadline; // time when crowdsale to close\n    uint public price; // price for token\n    token public tokenReward; // token\n    mapping(address => uint256) public balanceOf;\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n\n    event GoalReached(address recipient, uint totalAmountRaised);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    /**\n     * Constructor\n     *\n     * Setup the owner\n     */\n    constructor(\n        address payable ifSuccessfulSendTo,\n        uint fundingGoalInEthers,\n        uint durationInMinutes,\n        uint finneyCostOfEachToken,\n        address addressOfTokenUsedAsReward,\n        uint minAmountFinney\n    ) public {\n        beneficiary = ifSuccessfulSendTo;\n        fundingGoal = fundingGoalInEthers * 1 ether;\n        deadline = now + durationInMinutes * 1 minutes;\n        price = finneyCostOfEachToken * 1 finney;\n        minAmountWei = minAmountFinney * 1 finney;\n        tokenReward = token(addressOfTokenUsedAsReward);\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function() payable external {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address sender) public nonReentrant payable {\n        checkGoalReached();\n        require(!crowdsaleClosed);\n        require(sender != address(0));\n        uint amount = msg.value;\n        require(balanceOf[sender] >= amount);\n        require(amount != 0);\n        require(amount >= minAmountWei);\n\n        uint senderBalance = balanceOf[sender];\n        balanceOf[sender] = senderBalance.add(amount);\n        amountRaised = amountRaised.add(amount);\n        uint tokenToSend = amount.div(price) * 1 ether;\n        tokenReward.transfer(sender, tokenToSend);\n        emit FundTransfer(sender, amount, true);\n\n        if (beneficiary.send(amount)) {\n            emit FundTransfer(beneficiary, amount, false);\n        }\n\n        checkGoalReached();\n    }\n\n    modifier afterDeadline() {if (now >= deadline) _;}\n\n    /**\n     * Check if goal was reached\n     *\n     * Checks if the goal or time limit has been reached and ends the campaign\n     */\n    function checkGoalReached() public afterDeadline {\n        if (amountRaised >= fundingGoal) {\n            fundingGoalReached = true;\n            crowdsaleClosed = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n        if (now > deadline) {\n            crowdsaleClosed = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n    }\n}",
  "bytecode": "60806040526000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff02191690831515021790555034801561004657600080fd5b50604051610afc380380610afc833981810160405260c081101561006957600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050600160008190555085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008502600281905550603c8402420160058190555066038d7ea4c68000830260068190555066038d7ea4c68000810260048190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050610974806101886000396000f3fe6080604052600436106100915760003560e01c806370a082311161005957806370a08231146101b75780637a3a0e841461021c5780637b3e5e7b14610247578063a035b1fe14610272578063ec8ac4d81461029d57610091565b806301cb3b201461009c57806329dcb0cf146100b357806338af3eed146100de5780633feced03146101355780636e66f6e914610160575b61009a336102e1565b005b3480156100a857600080fd5b506100b16106e6565b005b3480156100bf57600080fd5b506100c8610878565b6040518082815260200191505060405180910390f35b3480156100ea57600080fd5b506100f361087e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014157600080fd5b5061014a6108a4565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b506101756108aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101c357600080fd5b50610206600480360360208110156101da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d0565b6040518082815260200191505060405180910390f35b34801561022857600080fd5b506102316108e8565b6040518082815260200191505060405180910390f35b34801561025357600080fd5b5061025c6108ee565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b506102876108f4565b6040518082815260200191505060405180910390f35b6102df600480360360208110156102b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102e1565b005b600160008082825401925050819055506000805490506102ff6106e6565b600960019054906101000a900460ff161561031957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561035357600080fd5b600034905080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103a457600080fd5b60008114156103b257600080fd5b6004548110156103c157600080fd5b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061041882826108fa90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610470826003546108fa90919063ffffffff16565b6003819055506000670de0b6b3a76400006104966006548561091990919063ffffffff16565b029050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561054257600080fd5b505af1158015610556573d6000803e3d6000fd5b505050507fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf685846001604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151515158152602001935050505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050156106c9577fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846000604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151515158152602001935050505060405180910390a15b6106d16106e6565b50505060005481146106e257600080fd5b5050565b600554421061087657600254600354106107c0576001600960006101000a81548160ff0219169083151502179055506001600960016101000a81548160ff0219169083151502179055507fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b600554421115610875576001600960016101000a81548160ff0219169083151502179055507fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b60025481565b60035481565b60065481565b60008082840190508381101561090f57600080fd5b8091505092915050565b600080821161092757600080fd5b600082848161093257fe5b049050809150509291505056fea265627a7a72305820a14124b0971ec873bbba57000033b036d1c3d8a401613d8634115e803516b84164736f6c6343000509003200000000000000000000000013512480dd2c3718e4314046d3156fc334dda369000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000153420000000000000000000000000000000000000000000000000000000000000004000000000000000000000000aab80423daa0334aba8f16726677c23619e3877300000000000000000000000000000000000000000000000000000000000000c8",
  "constructorArguments": "00000000000000000000000013512480dd2c3718e4314046d3156fc334dda369000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000153420000000000000000000000000000000000000000000000000000000000000004000000000000000000000000aab80423daa0334aba8f16726677c23619e3877300000000000000000000000000000000000000000000000000000000000000c8"
}