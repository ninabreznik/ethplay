{
  "address": "0xeb93e12e23acd78f622fcdb6b51906b7ba0aed2b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnailFarm2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-20\n*/\n\npragma solidity ^0.4.24;\n\n/* SNAILFARM 2\n\n// We keep the same basics as SnailFarm: hatch eggs into snails, buy or sell eggs for money.\n// Hatching now comes with a small ETH cost.\n// Your snails don't die anymore when you sell eggs.\n// Referrals are gone.\n// The formula for buying and selling eggs is simplified.\n// Only a finite number of eggs is available for sale.\n// This number is based on initial seed, and varies based on player buys and sells.\n// Eggs sell for half of the current buy price.\n// There is no more extra inflation tied to hatching.\n\n// The ultimate goal of the game is the Snailmaster title.\n// The reward is now a lump sum rather than a constant fee.\n// To become Snailmaster, you need a certain number of snails.\n// Once you take the Snailmaster title, you lose 90% of your snails.\n// 20% of the snailpot is immediately paid out to the Snailmaster.\n// When someone becomes the Snailmaster, a new round starts.\n// The amount of snails required to claim the title increases with each new round.\n// The amount of starting snails also increases by that same amount for new players.\n\n// We introduce a new mechanic: the Ethertree.\n// Every ETH added to the contract is split 50/50 between the snailpot and the treepot.\n// Players can claim ETH from the ethertree through selling acorns.\n// Players can buy acorns for twice their current price.\n// (Half of the ETH goes in the snailpot, half of the ETH buys acorns at their going rate.)\n// Players get a better rate on acorn buys if the current snailpot is under the previous snailpot.\n// The price of acorns can only rise over time.\n\n// We add three hot potato items: the SpiderQueen, the TadpolePrince, and the SquirrelDuke.\n// Owning any of these boosts adds base hatch size to your hatch, cumulative.\n// (With 2 boosts, you get 1+1+1 = 3 times the snails when you hatch your eggs.)\n// The Tadpole Prince costs ETH, and rises by 20% with every buy.\n// 10% goes to the previous holder, 5% goes to the snailpot, 5% to the treepot.\n// The Spider Queen costs snails, this cost doubles with every buy.\n// The Squirrel Duke costs acorns, this cost doubles with every buy.\n\n*/\n\ncontract SnailFarm2 {\n    using SafeMath for uint;\n    \n    /* Event */\n    \n    event SoldAcorn (address indexed seller, uint acorns, uint eth);\n    event BoughtAcorn (address indexed buyer, uint acorns, uint eth);\n    event BecameMaster (address indexed newmaster, uint indexed round, uint reward, uint pot);\n    event WithdrewEarnings (address indexed player, uint eth);\n    event Hatched (address indexed player, uint eggs, uint snails);\n    event SoldEgg (address indexed seller, uint eggs, uint eth);\n    event BoughtEgg (address indexed buyer, uint eggs, uint eth);\n    event StartedSnailing (address indexed player, uint indexed round);\n    event BecameQueen (address indexed newqueen, uint indexed round, uint newreq);\n    event BecameDuke (address indexed newduke, uint indexed round, uint newreq);\n    event BecamePrince (address indexed newprince, uint indexed round, uint newreq);\n\n    /* Constants */\n    \n    uint256 public TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day\n    uint256 public STARTING_SNAIL       = 200;\n    uint256 public SNAILMASTER_INCREASE = 100000;\n    uint256 public STARTING_SNAIL_COST  = 0.004 ether;\n    uint256 public HATCHING_COST        = 0.0008 ether;\n    uint256 public SPIDER_BASE_REQ      = 80;\n    uint256 public SPIDER_BOOST         = 1;\n    uint256 public TADPOLE_BASE_REQ     = 0.02 ether;\n    uint256 public TADPOLE_BOOST        = 1;\n\tuint256 public SQUIRREL_BASE_REQ    = 1;\n    uint256 public SQUIRREL_BOOST       = 1;\n\n\t\n    /* Variables */\n    \n\t//Becomes true one time to start the game\n    bool public gameStarted             = false;\n\t\n\t//Used to ensure a proper game start\n    address public gameOwner;\n\t\n\t//Current round\n    uint256 public round                = 0;\n\t\n\t//Owners of hot potatoes\n    address public currentSpiderOwner;\n    address public currentTadpoleOwner;\n\taddress public currentSquirrelOwner;\n\t\n\t//Current requirement for hot potatoes\n\tuint256 public spiderReq;\n    uint256 public tadpoleReq;\n\tuint256 public squirrelReq;\n\t\n\t//Current requirement for snailmaster\n    uint256 public snailmasterReq       = SNAILMASTER_INCREASE;\n    \n    //Current amount of snails given to new players\n\tuint256 public startingSnailAmount  = STARTING_SNAIL;\n\t\n\t//Current number of eggs for sale\n    uint256 public marketEggs;\n\t\n\t//Current number of acorns in existence\n\tuint256 public totalAcorns;\n\t\t\n\t//Ether pots\n    uint256 public snailPot;\n\tuint256 public previousSnailPot;\n    uint256 public treePot;\n\n    \t\n    /* Mappings */\n    \n\tmapping (address => bool) public hasStartingSnails;\n    mapping (address => uint256) public hatcherySnail;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => uint256) public playerAcorns;\n    mapping (address => uint256) public playerEarnings;\n    mapping (address => uint256) public playerProdBoost;\n    \n\t\n    /* Functions */\n    \n    // Constructor\n    // Sets msg.sender as gameOwner for SeedMarket purposes\n    // Assigns all hot potatoes to gameOwner and sets his prodBoost accordingly\n    // (gameOwner is banned from playing the game)\n    \n    constructor() public {\n        gameOwner = msg.sender;\n        \n        currentTadpoleOwner = gameOwner;\n        currentSquirrelOwner = gameOwner;\n        currentSpiderOwner = gameOwner;\n        hasStartingSnails[gameOwner] = true; //prevents buying starting snails\n        playerProdBoost[gameOwner] = 4; //base+tadpole+squirrel+spider\n    }\n    \n    // SeedMarket\n    // Sets eggs and acorns, funds the pot, starts the game\n\t\n\t// 10000:1 ratio for _eggs:msg.value gives near parity with starting snails\n\t// Recommended ratio = 5000:1\n\t// Acorns can be any amount, the higher the better as we deal with integers\n\t// Recommended value = 1000000\n\t// 1% of the acorns are left without an owner\n\t// This prevents an infinite acorn price rise,\n\t// In the case of a complete acorn dump followed by egg buys\n    \n    function SeedMarket(uint256 _eggs, uint256 _acorns) public payable {\n        require(msg.value > 0);\n        require(round == 0);\n        require(msg.sender == gameOwner);\n        \n        marketEggs = _eggs.mul(TIME_TO_HATCH_1SNAIL); //for readability\n        snailPot = msg.value.div(2); //50% to the snailpot\n        treePot = msg.value.sub(snailPot); //remainder to the treepot\n\t\tpreviousSnailPot = snailPot.mul(10); //encourage early acorn funding\n        totalAcorns = _acorns; \n        playerAcorns[msg.sender] = _acorns.mul(99).div(100); \n        spiderReq = SPIDER_BASE_REQ;\n        tadpoleReq = TADPOLE_BASE_REQ;\n\t\tsquirrelReq = SQUIRREL_BASE_REQ;\n        round = 1;\n        gameStarted = true;\n    }\n    \n    // SellAcorns\n    // Takes a given amount of acorns, increases player ETH balance\n    \n    function SellAcorns(uint256 _acorns) public {\n        require(playerAcorns[msg.sender] > 0);\n        \n        playerAcorns[msg.sender] = playerAcorns[msg.sender].sub(_acorns);\n        uint256 _acornEth = ComputeAcornPrice().mul(_acorns);\n        totalAcorns = totalAcorns.sub(_acorns);\n        treePot = treePot.sub(_acornEth);\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_acornEth);\n        \n        emit SoldAcorn(msg.sender, _acorns, _acornEth);\n    }\n    \n    // BuyAcorns\n    // Takes a given amount of ETH, gives acorns in return\n\t\n\t// If current snailpot is under previous snailpot, 3 acorns for the price of 4\n\t// If current snailpot is equal or above, 1 acorn for the price of \n    \n    function BuyAcorns() public payable {\n        require(msg.value > 0);\n        require(tx.origin == msg.sender);\n        require(gameStarted);\n        \n\t\tif (snailPot < previousSnailPot) {\n\t\t\tuint256 _acornBought = ((msg.value.div(ComputeAcornPrice())).mul(3)).div(4);\n\t\t\tAcornPotSplit(msg.value);\n\t\t} else {\n\t\t\t_acornBought = (msg.value.div(ComputeAcornPrice())).div(2);\n\t\t\tPotSplit(msg.value);\n\t\t}\n        totalAcorns = totalAcorns.add(_acornBought);\n        playerAcorns[msg.sender] = playerAcorns[msg.sender].add(_acornBought);\n        \n        emit BoughtAcorn(msg.sender, _acornBought, msg.value);\n    }\n    \n    // BecomeSnailmaster\n    // Gives out 20% of the snailpot and increments round for a snail sacrifice\n\t\n    // Increases Snailmaster requirement\n    // Resets Spider and Tadpole reqs to initial values\n    \n    function BecomeSnailmaster() public {\n        require(gameStarted);\n        require(hatcherySnail[msg.sender] >= snailmasterReq);\n        \n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].div(10);\n        \n        uint256 _snailReqIncrease = round.mul(SNAILMASTER_INCREASE);\n        snailmasterReq = snailmasterReq.add(_snailReqIncrease);\n        uint256 _startingSnailIncrease = round.mul(STARTING_SNAIL);\n        startingSnailAmount = startingSnailAmount.add(_startingSnailIncrease);\n        \n        spiderReq = SPIDER_BASE_REQ;\n        tadpoleReq = TADPOLE_BASE_REQ;\n        squirrelReq = SQUIRREL_BASE_REQ;\n        \n        previousSnailPot = snailPot;\n        uint256 _rewardSnailmaster = snailPot.div(5);\n        snailPot = snailPot.sub(_rewardSnailmaster);\n        round++;\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_rewardSnailmaster);\n        \n        emit BecameMaster(msg.sender, round, _rewardSnailmaster, snailPot);\n    }\n    \n    // WithdrawEarnings\n    // Withdraws all ETH earnings of a player to his wallet\n    \n    function WithdrawEarnings() public {\n        require(playerEarnings[msg.sender] > 0);\n        \n        uint _amount = playerEarnings[msg.sender];\n        playerEarnings[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewEarnings(msg.sender, _amount);\n    }\n    \n    // PotSplit\n\t// Splits value equally between the two pots\n\t\n    // Should be called each time ether is spent on the game\n    \n    function PotSplit(uint256 _msgValue) private {\n        uint256 _potBoost = _msgValue.div(2);\n        snailPot = snailPot.add(_potBoost);\n        treePot = treePot.add(_potBoost);\n    }\n\t\n\t// AcornPotSplit\t\n    // Gives one fourth to the snailpot, three fourths to the treepot\n    \n\t// Variant of PotSplit with a privileged rate\n\t// Encourages pot funding with each new round\n\t\n    function AcornPotSplit(uint256 _msgValue) private {\n        uint256 _snailBoost = _msgValue.div(4);\n\t\tuint256 _treeBoost = _msgValue.sub(_snailBoost);\n        snailPot = snailPot.add(_snailBoost);\n        treePot = treePot.add(_treeBoost);\n    }\n    \n    // HatchEggs\n    // Hatches eggs into snails for a slight ETH cost\n\t\n    // If the player owns a hot potato, adjust prodBoost accordingly\n    \n    function HatchEggs() public payable {\n        require(gameStarted);\n        require(msg.value == HATCHING_COST);\t\t\n        \n        PotSplit(msg.value);\n        uint256 eggsUsed = ComputeMyEggs();\n        uint256 newSnail = (eggsUsed.div(TIME_TO_HATCH_1SNAIL)).mul(playerProdBoost[msg.sender]);\n        claimedEggs[msg.sender]= 0;\n        lastHatch[msg.sender]= now;\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(newSnail);\n        \n        emit Hatched(msg.sender, eggsUsed, newSnail);\n    }\n    \n    // SellEggs\n    // Sells current player eggs for ETH at a snail cost\n\t\n    // Ether is taken from the snailpot\n\t// Eggs sold are added to the market\n    \n    function SellEggs() public {\n        require(gameStarted);\n        \n        uint256 eggsSold = ComputeMyEggs();\n        uint256 eggValue = ComputeSell(eggsSold);\n        claimedEggs[msg.sender] = 0;\n        lastHatch[msg.sender] = now;\n        marketEggs = marketEggs.add(eggsSold);\n        snailPot = snailPot.sub(eggValue);\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(eggValue);\n        \n        emit SoldEgg(msg.sender, eggsSold, eggValue);\n    }\n    \n    // BuyEggs\n    // Buy a calculated amount of eggs for a given amount of ETH\n\t\n\t// Eggs bought are removed from the market\n    \n    function BuyEggs() public payable {\n        require(gameStarted);\n        require(hasStartingSnails[msg.sender] == true);\n        require(msg.sender != gameOwner);\n        \n        uint256 eggsBought = ComputeBuy(msg.value);\n        PotSplit(msg.value);\n        marketEggs = marketEggs.sub(eggsBought);\n        claimedEggs[msg.sender] = claimedEggs[msg.sender].add(eggsBought);\n        \n        emit BoughtEgg(msg.sender, eggsBought, msg.value);\n    }\n    \n    // BuyStartingSnails\n    // Gives starting snails and sets playerProdBoost to 1\n    \n    function BuyStartingSnails() public payable {\n        require(gameStarted);\n        require(tx.origin == msg.sender);\n        require(hasStartingSnails[msg.sender] == false);\n        require(msg.value == STARTING_SNAIL_COST); \n\n        PotSplit(msg.value);\n\t\thasStartingSnails[msg.sender] = true;\n        lastHatch[msg.sender] = now;\n\t\tplayerProdBoost[msg.sender] = 1;\n        hatcherySnail[msg.sender] = startingSnailAmount;\n        \n        emit StartedSnailing(msg.sender, round);\n    }\n    \n    // BecomeSpiderQueen\n    // Increases playerProdBoost while held, obtained with a snail sacrifice\n\t\n\t// Hot potato item, requirement doubles with every buy\n    \n    function BecomeSpiderQueen() public {\n        require(gameStarted);\n        require(hatcherySnail[msg.sender] >= spiderReq);\n\n        // Remove sacrificed snails, increase req\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(spiderReq);\n        spiderReq = spiderReq.mul(2);\n        \n        // Lower prodBoost of old spider owner\n        playerProdBoost[currentSpiderOwner] = playerProdBoost[currentSpiderOwner].sub(SPIDER_BOOST);\n        \n        // Give ownership to msg.sender, then increases his prodBoost\n        currentSpiderOwner = msg.sender;\n        playerProdBoost[currentSpiderOwner] = playerProdBoost[currentSpiderOwner].add(SPIDER_BOOST);\n        \n        emit BecameQueen(msg.sender, round, spiderReq);\n    }\n\t\n\t// BecomeSquirrelDuke\n\t// Increases playerProdBoost while held, obtained with an acorn sacrifice\n\n    // Hot potato item, requirement doubles with every buy\n    \n    function BecomeSquirrelDuke() public {\n        require(gameStarted);\n        require(hasStartingSnails[msg.sender] == true);\n        require(playerAcorns[msg.sender] >= squirrelReq);\n        \n        // Remove sacrificed acorns, change totalAcorns in consequence, increase req\n        playerAcorns[msg.sender] = playerAcorns[msg.sender].sub(squirrelReq);\n\t\ttotalAcorns = totalAcorns.sub(squirrelReq);\n        squirrelReq = squirrelReq.mul(2);\n        \n        // Lower prodBoost of old squirrel owner\n        playerProdBoost[currentSquirrelOwner] = playerProdBoost[currentSquirrelOwner].sub(SQUIRREL_BOOST);\n        \n        // Give ownership to msg.sender, then increases his prodBoost\n        currentSquirrelOwner = msg.sender;\n        playerProdBoost[currentSquirrelOwner] = playerProdBoost[currentSquirrelOwner].add(SQUIRREL_BOOST);\n        \n        emit BecameDuke(msg.sender, round, squirrelReq);\n    }\n    \n    // BecomeTadpolePrince\n    // Increases playerProdBoost while held, obtained with ETH\n\t\n    // Hot potato item, price increases by 20% with every buy\n    \n    function BecomeTadpolePrince() public payable {\n        require(gameStarted);\n        require(hasStartingSnails[msg.sender] == true);\n        require(msg.value >= tadpoleReq);\n        \n        // If player sent more ETH than needed, refund excess to playerEarnings\n        if (msg.value > tadpoleReq) {\n            uint _excess = msg.value.sub(tadpoleReq);\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_excess);\n        }  \n        \n        // Calculate +10% from previous price\n        // Give result to the potsplit\n        uint _extra = tadpoleReq.div(12); \n        PotSplit(_extra);\n        \n        // Calculate 110% of previous price\n        // Give result to the previous owner\n        uint _previousFlip = tadpoleReq.mul(11).div(12);\n        playerEarnings[currentTadpoleOwner] = playerEarnings[currentTadpoleOwner].add(_previousFlip);\n        \n        // Increase ETH required for next buy by 20%\n        tadpoleReq = (tadpoleReq.mul(6)).div(5); \n        \n        // Lower prodBoost of old tadpole owner\n        playerProdBoost[currentTadpoleOwner] = playerProdBoost[currentTadpoleOwner].sub(TADPOLE_BOOST);\n        \n        // Give ownership to msg.sender, then increase his prodBoost\n        currentTadpoleOwner = msg.sender;\n        playerProdBoost[currentTadpoleOwner] = playerProdBoost[currentTadpoleOwner].add(TADPOLE_BOOST);\n        \n        emit BecamePrince(msg.sender, round, tadpoleReq);\n    }\n    \n    // ComputeAcornPrice\n\t// Returns the current ether value of one acorn\n\t\n    // Acorn price = treePot / totalAcorns\n    \n    function ComputeAcornPrice() public view returns(uint256) {\n        return treePot.div(totalAcorns);\n    }\n    \n    // ComputeSell\n\t// Calculates ether value for a given amount of eggs being sold\n    \n\t// ETH = (eggs / (eggs + marketeggs)) * snailpot / 2\n\t// A sale can never give more than half of the snailpot\n    \n    function ComputeSell(uint256 eggspent) public view returns(uint256) {\n        uint256 _eggPool = eggspent.add(marketEggs);\n        uint256 _eggFactor = eggspent.mul(snailPot).div(_eggPool);\n        return _eggFactor.div(2);\n    }\n    \n    // ComputeBuy\n\t// Calculates number of eggs bought for a given amount of ether\n\t\n    // Eggs bought = ETH spent / (ETH spent + snailpot) * marketeggs\n    \n    function ComputeBuy(uint256 ethspent) public view returns(uint256) {\n        uint256 _ethPool = ethspent.add(snailPot);\n        uint256 _ethFactor = ethspent.mul(marketEggs).div(_ethPool);\n        return _ethFactor;\n    }\n    \n    // ComputeMyEggs\n    // Returns current player eggs\n    \n    function ComputeMyEggs() public view returns(uint256) {\n        return claimedEggs[msg.sender].add(ComputeEggsSinceLastHatch(msg.sender));\n    }\n    \n    // ComputeEggsSinceLastHatch\n    // Returns eggs produced since last hatch\n    \n    function ComputeEggsSinceLastHatch(address adr) public view returns(uint256) {\n        uint256 secondsPassed = min(TIME_TO_HATCH_1SNAIL , now.sub(lastHatch[adr]));\n        return secondsPassed.mul(hatcherySnail[adr]);\n    }\n    \n    // Helper function for CalculateEggsSinceLastHatch\n\t// If a < b, return a\n\t// Else, return b\n    \n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    // Gets\n    \n    function GetMySnail() public view returns(uint256) {\n        return hatcherySnail[msg.sender];\n    }\n\t\n\tfunction GetMyProd() public view returns(uint256) {\n\t\treturn playerProdBoost[msg.sender];\n\t}\n    \n    function GetMyEgg() public view returns(uint256) {\n        return ComputeMyEggs().div(TIME_TO_HATCH_1SNAIL);\n    }\n    \n    function GetMyAcorn() public view returns(uint256) {\n        return playerAcorns[msg.sender];\n    }\n\t\n\tfunction GetMyEarning() public view returns(uint256) {\n\t    return playerEarnings[msg.sender];\n\t}\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acorns\",\"type\":\"uint256\"}],\"name\":\"SellAcorns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeAcornPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyStartingSnails\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousSnailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggspent\",\"type\":\"uint256\"}],\"name\":\"ComputeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingSnailAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSpiderQueen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyAcorns\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HATCHING_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAcorns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSpiderOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeTadpolePrince\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggs\",\"type\":\"uint256\"},{\"name\":\"_acorns\",\"type\":\"uint256\"}],\"name\":\"SeedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILMASTER_INCREASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tadpoleReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerProdBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethspent\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAcorns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spiderReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSquirrelDuke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStartingSnails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSnailmaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"squirrelReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyProd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSquirrelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTadpoleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldAcorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoughtAcorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newmaster\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"BecameMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoughtEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"StartedSnailing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newqueen\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecameQueen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newduke\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecameDuke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newprince\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newreq\",\"type\":\"uint256\"}],\"name\":\"BecamePrince\",\"type\":\"event\"}]",
  "bytecode": "608060405262015180600090815560c86001818155620186a06002819055660e35fa931a00006003556602d79883d200006004556050600555600682905566470de4df82000060075560088290556009829055600a91909155600b805460ff19169055600c9290925560139190915560145534801561007d57600080fd5b50600b805461010033810261010060a860020a031990921691909117808355600e8054600160a060020a031990811692849004600160a060020a03908116938417909255600f8054821684179055600d8054909116831790556000918252601a60209081526040808420805460ff191660011790559454939093041681529080522060049055611998806101126000396000f30060806040526004361061029d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305f0f66281146102a2578063090b8d18146102c95780630d13bec6146102de5780630f8dc272146102f8578063146ca5311461030d5780631c3122ba146103225780631e3e63691461032a57806321d1d3881461033f5780632e9392bb146103605780632fc8c39d146103755780633f8a4c131461038a578063407ed2e21461039f578063467ece79146103b75780634ab273f0146103d857806356afeed6146103ed578063580101c8146104025780635e123ce41461041757806369f92773146104405780636a8b9f7b146104615780636c3aaab714610476578063726703611461048b57806373bc8b77146104ac57806375b9fd47146104c157806375c9c4a4146104c957806377bad015146104de57806378d7ccea146104f35780637d87bb7b146105145780638574ddf91461052957806386544e111461053e57806386b85853146105535780638769bc7e1461057457806390f0a5bd146105a55780639e1be663146105ad5780639e987b20146105bb578063a694dabd146105d0578063a7985ae4146105e5578063acda6737146105fa578063ad2e6aff1461060f578063b334e90b14610624578063b9cb5b5f14610639578063be31be3514610641578063c22af7ff14610662578063c60f56b21461067a578063c6c651361461068f578063c6daeeaa146106a4578063cdf3bdab146106b9578063ce1ed2bb146106ce578063cfaf7315146106e3578063d8104e19146106eb578063d8c75e4814610700578063de656b7114610721578063eb11dd7b14610736578063edfa45e61461074b578063f56e842114610760578063f6b12f2814610775578063f991a43f1461078a575b600080fd5b3480156102ae57600080fd5b506102b761079f565b60408051918252519081900360200190f35b3480156102d557600080fd5b506102b76107ce565b3480156102ea57600080fd5b506102f66004356107d4565b005b34801561030457600080fd5b506102b76108db565b34801561031957600080fd5b506102b76108f4565b6102f66108fa565b34801561033657600080fd5b506102b76109b8565b34801561034b57600080fd5b506102b7600160a060020a03600435166109cb565b34801561036c57600080fd5b506102b76109dd565b34801561038157600080fd5b506102b76109e3565b34801561039657600080fd5b506102b76109e9565b3480156103ab57600080fd5b506102b76004356109ef565b3480156103c357600080fd5b506102b7600160a060020a0360043516610a4b565b3480156103e457600080fd5b506102f6610a5d565b3480156103f957600080fd5b506102b7610b49565b34801561040e57600080fd5b506102b7610b4f565b34801561042357600080fd5b5061042c610b55565b604080519115158252519081900360200190f35b34801561044c57600080fd5b506102b7600160a060020a0360043516610b5e565b34801561046d57600080fd5b506102f6610b70565b34801561048257600080fd5b506102b7610ccf565b34801561049757600080fd5b506102b7600160a060020a0360043516610cd5565b3480156104b857600080fd5b506102b7610ce7565b6102f6610ced565b3480156104d557600080fd5b506102b7610dfd565b3480156104ea57600080fd5b506102b7610e03565b3480156104ff57600080fd5b506102b7600160a060020a0360043516610e13565b34801561052057600080fd5b506102b7610e7d565b34801561053557600080fd5b506102b7610e83565b34801561054a57600080fd5b506102b7610e89565b34801561055f57600080fd5b506102b7600160a060020a0360043516610e8f565b34801561058057600080fd5b50610589610ea1565b60408051600160a060020a039092168252519081900360200190f35b6102f6610eb0565b6102f66004356024356110d5565b3480156105c757600080fd5b506102b76111b8565b3480156105dc57600080fd5b506102b76111be565b3480156105f157600080fd5b506102b76111c4565b34801561060657600080fd5b506102b76111ca565b34801561061b57600080fd5b506102f66111d0565b34801561063057600080fd5b506102b7611267565b6102f661126d565b34801561064d57600080fd5b506102b7600160a060020a036004351661135a565b34801561066e57600080fd5b506102b760043561136b565b34801561068657600080fd5b506102b76113a0565b34801561069b57600080fd5b506102b76113a6565b3480156106b057600080fd5b506102b76113ac565b3480156106c557600080fd5b506102b76113b2565b3480156106da57600080fd5b506102f66113c5565b6102f661155d565b3480156106f757600080fd5b506102b761164f565b34801561070c57600080fd5b5061042c600160a060020a0360043516611662565b34801561072d57600080fd5b506102f6611677565b34801561074257600080fd5b506102b76117fe565b34801561075757600080fd5b506102b7611804565b34801561076c57600080fd5b50610589611816565b34801561078157600080fd5b50610589611825565b34801561079657600080fd5b50610589611839565b60006107c96107ad33610e13565b336000908152601c60205260409020549063ffffffff61184816565b905090565b60055481565b336000908152601e602052604081205481106107ef57600080fd5b336000908152601e602052604090205461080f908363ffffffff61186216565b336000908152601e60205260409020556108378261082b6108db565b9063ffffffff61187416565b60165490915061084d908363ffffffff61186216565b601655601954610863908263ffffffff61186216565b601955336000908152601f6020526040902054610886908263ffffffff61184816565b336000818152601f6020908152604091829020939093558051858152928301849052805191927f6d7482398904b145782ff16116a0c50dae7f19240995ec0263a419d748fa941c929081900390910190a25050565b60006107c960165460195461189f90919063ffffffff16565b600c5481565b600b5460ff16151561090b57600080fd5b32331461091757600080fd5b336000908152601a602052604090205460ff161561093457600080fd5b600354341461094257600080fd5b61094b346118b6565b336000818152601a60209081526040808320805460ff19166001908117909155601d835281842042905582805281842055601454601b90925280832091909155600c5490519092917fb24429d80e2047c0670ad25304b334c093701a4881ad217608beb7636d84ed7991a3565b336000908152601b602052604090205490565b601b6020526000908152604090205481565b60155481565b60075481565b60185481565b6000806000610a096015548561184890919063ffffffff16565b9150610a3082610a246017548761187490919063ffffffff16565b9063ffffffff61189f16565b9050610a4381600263ffffffff61189f16565b949350505050565b601d6020526000908152604090205481565b600b54600090819060ff161515610a7357600080fd5b610a7b61079f565b9150610a86826109ef565b336000908152601c60209081526040808320839055601d9091529020429055601554909150610abb908363ffffffff61184816565b601555601754610ad1908263ffffffff61186216565b601755336000908152601f6020526040902054610af4908263ffffffff61184816565b336000818152601f6020908152604091829020939093558051858152928301849052805191927f857d40828f39106e6a56da2cc4386b5f7f4b1aa4f4ce1b864a79ec717b166639929081900390910190a25050565b600a5481565b60145481565b600b5460ff1681565b601f6020526000908152604090205481565b600b5460ff161515610b8157600080fd5b601054336000908152601b60205260409020541015610b9f57600080fd5b601054336000908152601b6020526040902054610bc19163ffffffff61186216565b336000908152601b6020526040902055601054610be590600263ffffffff61187416565b601055600654600d54600160a060020a03166000908152602080526040902054610c149163ffffffff61186216565b600d8054600160a060020a03908116600090815260208052604080822094909455825473ffffffffffffffffffffffffffffffffffffffff19163317928390556006549290911681529190912054610c719163ffffffff61184816565b600d54600160a060020a03166000908152602080805260409182902092909255600c5460105482519081529151909233927f23c4e7a17964c48ecb414243cd125e5302c21f5292d6ef3b4109fbbdd30b807f929081900390910190a3565b60175481565b601c6020526000908152604090205481565b60065481565b6000348110610cfb57600080fd5b323314610d0757600080fd5b600b5460ff161515610d1857600080fd5b6018546017541015610d5657610d466004610a24600361082b610d396108db565b349063ffffffff61189f16565b9050610d51346118fc565b610d71565b610d666002610a24610d396108db565b9050610d71346118b6565b601654610d84908263ffffffff61184816565b601655336000908152601e6020526040902054610da7908263ffffffff61184816565b336000818152601e60209081526040918290209390935580518481523493810193909352805191927f05b17145f556864034a649d370467379f5b1675d72aba4c2ba244b41358adf22929081900390910190a250565b60095481565b60006107c9600054610a2461079f565b60008054600160a060020a0383168252601d60205260408220548291610e4991610e4490429063ffffffff61186216565b611956565b600160a060020a0384166000908152601b6020526040902054909150610e7690829063ffffffff61187416565b9392505050565b60045481565b60135481565b60035481565b601e6020526000908152604090205481565b600d54600160a060020a031681565b600b546000908190819060ff161515610ec857600080fd5b336000908152601a602052604090205460ff161515600114610ee957600080fd5b601154341015610ef857600080fd5b601154341115610f4a57601154610f1690349063ffffffff61186216565b336000908152601f6020526040902054909350610f39908463ffffffff61184816565b336000908152601f60205260409020555b601154610f5e90600c63ffffffff61189f16565b9150610f69826118b6565b610f84600c610a24600b60115461187490919063ffffffff16565b600e54600160a060020a03166000908152601f6020526040902054909150610fb2908263ffffffff61184816565b600e54600160a060020a03166000908152601f6020526040902055601154610fe890600590610a2490600663ffffffff61187416565b601155600854600e54600160a060020a031660009081526020805260409020546110179163ffffffff61186216565b600e8054600160a060020a03908116600090815260208052604080822094909455825473ffffffffffffffffffffffffffffffffffffffff191633179283905560085492909116815291909120546110749163ffffffff61184816565b600e54600160a060020a03166000908152602080805260409182902092909255600c5460115482519081529151909233927f58a8d6ae025d6db5293cc6d0a4c46539684fad8825c7575a514ffed0cdeaa9bd929081900390910190a3505050565b600034116110e257600080fd5b600c54156110ef57600080fd5b600b546101009004600160a060020a0316331461110b57600080fd5b60005461111f90839063ffffffff61187416565b60155561113334600263ffffffff61189f16565b601781905561114990349063ffffffff61186216565b60195560175461116090600a63ffffffff61187416565b601855601681905561117e6064610a2483606363ffffffff61187416565b336000908152601e602052604090205550506005546010556007546011556009546012556001600c819055600b805460ff19169091179055565b60195481565b60015481565b60025481565b60085481565b336000908152601f602052604081205481106111eb57600080fd5b50336000818152601f6020526040808220805490839055905190929183156108fc02918491818181858888f1935050505015801561122d573d6000803e3d6000fd5b5060408051828152905133917fc7035f890abdb50e1dcbc2664e1f5a9c99696d1ded57f140955139aaddb2b06a919081900360200190a250565b60115481565b600b54600090819060ff16151561128357600080fd5b600454341461129157600080fd5b61129a346118b6565b6112a261079f565b33600090815260208052604081205490549193506112cb9161082b90859063ffffffff61189f16565b336000908152601c60209081526040808320839055601d8252808320429055601b909152902054909150611305908263ffffffff61184816565b336000818152601b6020908152604091829020939093558051858152928301849052805191927f44eb804aac4258c86d630e9249489eff043b42a399ee3e572b6a81abafc68288929081900390910190a25050565b602080526000908152604090205481565b60008060006113856017548561184890919063ffffffff16565b9150610a4382610a246015548761187490919063ffffffff16565b60165481565b60105481565b60005481565b336000908152601e602052604090205490565b600b5460ff1615156113d657600080fd5b336000908152601a602052604090205460ff1615156001146113f757600080fd5b601254336000908152601e6020526040902054101561141557600080fd5b601254336000908152601e60205260409020546114379163ffffffff61186216565b336000908152601e602052604090205560125460165461145c9163ffffffff61186216565b60165560125461147390600263ffffffff61187416565b601255600a54600f54600160a060020a031660009081526020805260409020546114a29163ffffffff61186216565b600f8054600160a060020a03908116600090815260208052604080822094909455825473ffffffffffffffffffffffffffffffffffffffff1916331792839055600a5492909116815291909120546114ff9163ffffffff61184816565b600f54600160a060020a03166000908152602080805260409182902092909255600c5460125482519081529151909233927fb80ad726ae48f40b288f6996377c09cf6c968c96b550841edbf57433990ed4d7929081900390910190a3565b600b5460009060ff16151561157157600080fd5b336000908152601a602052604090205460ff16151560011461159257600080fd5b600b546101009004600160a060020a03163314156115af57600080fd5b6115b83461136b565b90506115c3346118b6565b6015546115d6908263ffffffff61186216565b601555336000908152601c60205260409020546115f9908263ffffffff61184816565b336000818152601c60209081526040918290209390935580518481523493810193909352805191927f290b84a4817669f6391075335e7fc0d60004ff3d9b3910363c589adc7f1a4351929081900390910190a250565b336000908152601f602052604090205490565b601a6020526000908152604090205460ff1681565b600b546000908190819060ff16151561168f57600080fd5b601354336000908152601b602052604090205410156116ad57600080fd5b336000908152601b60205260409020546116ce90600a63ffffffff61189f16565b336000908152601b6020526040902055600254600c546116f39163ffffffff61187416565b601354909350611709908463ffffffff61184816565b601355600154600c546117219163ffffffff61187416565b601454909250611737908363ffffffff61184816565b6014556005805460105560075460115560095460125560175460188190556117649163ffffffff61189f16565b60175490915061177a908263ffffffff61186216565b601755600c80546001019055336000908152601f60205260409020546117a6908263ffffffff61184816565b336000818152601f602090815260409182902093909355600c54601754825186815294850152815190937f3e5ddc53ed25e093508bc374d8b3d9a6c02fdd3bf3b6c94e465c8cfded5d47c992908290030190a3505050565b60125481565b33600090815260208052604090205490565b600f54600160a060020a031681565b600b546101009004600160a060020a031681565b600e54600160a060020a031681565b60008282018381101561185757fe5b8091505b5092915050565b60008282111561186e57fe5b50900390565b600080831515611887576000915061185b565b5082820282848281151561189757fe5b041461185757fe5b60008082848115156118ad57fe5b04949350505050565b60006118c982600263ffffffff61189f16565b6017549091506118df908263ffffffff61184816565b6017556019546118f5908263ffffffff61184816565b6019555050565b60008061191083600463ffffffff61189f16565b9150611922838363ffffffff61186216565b601754909150611938908363ffffffff61184816565b60175560195461194e908263ffffffff61184816565b601955505050565b60008183106119655781610e76565b50909190505600a165627a7a723058200ec8b8c014a105d90edcdcd86160b8fd8eeb03aaca603695ed6c0af3e8c6339b0029"
}