{
  "address": "0xd5bd3da7228bfa951eccf86af1d1bfd9fe0ff31b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CentralizedOracle",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-25\n*/\n\npragma solidity ^0.5.0;\n\npragma experimental ABIEncoderV2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// The functionality that all derivative contracts expose to the admin.\ninterface AdminInterface {\n    // Initiates the shutdown process, in case of an emergency.\n    function emergencyShutdown() external;\n\n    // A core contract method called immediately before or after any financial transaction. It pays fees and moves money\n    // between margin accounts to make sure they reflect the NAV of the contract.\n    function remargin() external;\n}\n\n// This interface allows contracts to query a verified, trusted price.\ninterface OracleInterface {\n    // Requests the Oracle price for an identifier at a time. Returns the time at which a price will be available.\n    // Returns 0 is the price is available now, and returns 2^256-1 if the price will never be available.  Reverts if\n    // the Oracle doesn't support this identifier. Only contracts registered in the Registry are authorized to call this\n    // method.\n    function requestPrice(bytes32 identifier, uint time) external returns (uint expectedTime);\n\n    // Checks whether a price has been resolved.\n    function hasPrice(bytes32 identifier, uint time) external view returns (bool hasPriceAvailable);\n\n    // Returns the Oracle price for identifier at a time. Reverts if the Oracle doesn't support this identifier or if\n    // the Oracle doesn't have a price for this time. Only contracts registered in the Registry are authorized to call\n    // this method.\n    function getPrice(bytes32 identifier, uint time) external view returns (int price);\n\n    // Returns whether the Oracle provides verified prices for the given identifier.\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported);\n\n    // An event fired when a request for a (identifier, time) pair is made.\n    event VerifiedPriceRequested(bytes32 indexed identifier, uint indexed time);\n\n    // An event fired when a verified price is available for a (identifier, time) pair.\n    event VerifiedPriceAvailable(bytes32 indexed identifier, uint indexed time, int price);\n}\n\ninterface RegistryInterface {\n    struct RegisteredDerivative {\n        address derivativeAddress;\n        address derivativeCreator;\n    }\n\n    // Registers a new derivative. Only authorized derivative creators can call this method.\n    function registerDerivative(address[] calldata counterparties, address derivativeAddress) external;\n\n    // Adds a new derivative creator to this list of authorized creators. Only the owner of this contract can call\n    // this method.   \n    function addDerivativeCreator(address derivativeCreator) external;\n\n    // Removes a derivative creator to this list of authorized creators. Only the owner of this contract can call this\n    // method.  \n    function removeDerivativeCreator(address derivativeCreator) external;\n\n    // Returns whether the derivative has been registered with the registry (and is therefore an authorized participant\n    // in the UMA system).\n    function isDerivativeRegistered(address derivative) external view returns (bool isRegistered);\n\n    // Returns a list of all derivatives that are associated with a particular party.\n    function getRegisteredDerivatives(address party) external view returns (RegisteredDerivative[] memory derivatives);\n\n    // Returns all registered derivatives.\n    function getAllRegisteredDerivatives() external view returns (RegisteredDerivative[] memory derivatives);\n\n    // Returns whether an address is authorized to register new derivatives.\n    function isDerivativeCreatorAuthorized(address derivativeCreator) external view returns (bool isAuthorized);\n}\n\ncontract Testable is Ownable {\n\n    // Is the contract being run on the test network. Note: this variable should be set on construction and never\n    // modified.\n    bool public isTest;\n\n    uint private currentTime;\n\n    constructor(bool _isTest) internal {\n        isTest = _isTest;\n        if (_isTest) {\n            currentTime = now; // solhint-disable-line not-rely-on-time\n        }\n    }\n\n    modifier onlyIfTest {\n        require(isTest);\n        _;\n    }\n\n    function setCurrentTime(uint _time) external onlyOwner onlyIfTest {\n        currentTime = _time;\n    }\n\n    function getCurrentTime() public view returns (uint) {\n        if (isTest) {\n            return currentTime;\n        } else {\n            return now; // solhint-disable-line not-rely-on-time\n        }\n    }\n}\n\ncontract Withdrawable is Ownable {\n    // Withdraws ETH from the contract.\n    function withdraw(uint amount) external onlyOwner {\n        msg.sender.transfer(amount);\n    }\n\n    // Withdraws ERC20 tokens from the contract.\n    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\n        IERC20 erc20 = IERC20(erc20Address);\n        require(erc20.transfer(msg.sender, amount));\n    }\n}\n\n// Implements an oracle that allows the owner to push prices for queries that have been made.\ncontract CentralizedOracle is OracleInterface, Withdrawable, Testable {\n    using SafeMath for uint;\n\n    // This contract doesn't implement the voting routine, and naively indicates that all requested prices will be\n    // available in a week.\n    uint constant private SECONDS_IN_WEEK = 60*60*24*7;\n\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\n    struct Price {\n        bool isAvailable;\n        int price;\n        // Time the verified price became available.\n        uint verifiedTime;\n    }\n\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\n    // not yet available.\n    struct QueryIndex {\n        bool isValid;\n        uint index;\n    }\n\n    // Represents a (identifier, time) point that has been queried.\n    struct QueryPoint {\n        bytes32 identifier;\n        uint time;\n    }\n\n    // The set of identifiers the oracle can provide verified prices for.\n    mapping(bytes32 => bool) private supportedIdentifiers;\n\n    // Conceptually we want a (time, identifier) -> price map.\n    mapping(bytes32 => mapping(uint => Price)) private verifiedPrices;\n\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\n    // Can we generalize this data structure?\n    mapping(bytes32 => mapping(uint => QueryIndex)) private queryIndices;\n    QueryPoint[] private requestedPrices;\n\n    // Registry to verify that a derivative is approved to use the Oracle.\n    RegistryInterface private registry;\n\n    constructor(address _registry, bool _isTest) public Testable(_isTest) {\n        registry = RegistryInterface(_registry);\n    }\n\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\n    function requestPrice(bytes32 identifier, uint time) external returns (uint expectedTime) {\n        // Ensure that the caller has been registered with the Oracle before processing the request.\n        require(registry.isDerivativeRegistered(msg.sender));\n        require(supportedIdentifiers[identifier]);\n        Price storage lookup = verifiedPrices[identifier][time];\n        if (lookup.isAvailable) {\n            // We already have a price, return 0 to indicate that.\n            return 0;\n        } else if (queryIndices[identifier][time].isValid) {\n            // We already have a pending query, don't need to do anything.\n            return getCurrentTime().add(SECONDS_IN_WEEK);\n        } else {\n            // New query, enqueue it for review.\n            queryIndices[identifier][time] = QueryIndex(true, requestedPrices.length);\n            requestedPrices.push(QueryPoint(identifier, time));\n            emit VerifiedPriceRequested(identifier, time);\n            return getCurrentTime().add(SECONDS_IN_WEEK);\n        }\n    }\n\n    // Pushes the verified price for a requested query.\n    function pushPrice(bytes32 identifier, uint time, int price) external onlyOwner {\n        verifiedPrices[identifier][time] = Price(true, price, getCurrentTime());\n        emit VerifiedPriceAvailable(identifier, time, price);\n\n        QueryIndex storage queryIndex = queryIndices[identifier][time];\n        require(queryIndex.isValid, \"Can't push prices that haven't been requested\");\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\n        // the contents of the last index (unless it is the last index).\n        uint indexToReplace = queryIndex.index;\n        delete queryIndices[identifier][time];\n        uint lastIndex = requestedPrices.length.sub(1);\n        if (lastIndex != indexToReplace) {\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\n            queryIndices[queryToCopy.identifier][queryToCopy.time].index = indexToReplace;\n            requestedPrices[indexToReplace] = queryToCopy;\n        }\n        requestedPrices.length = requestedPrices.length.sub(1);\n    }\n\n    // Adds the provided identifier as a supported identifier.\n    function addSupportedIdentifier(bytes32 identifier) external onlyOwner {\n        if(!supportedIdentifiers[identifier]) {\n            supportedIdentifiers[identifier] = true;\n            emit AddSupportedIdentifier(identifier);\n        }\n    }\n\n    // Calls emergencyShutdown() on the provided derivative.\n    function callEmergencyShutdown(address derivative) external onlyOwner {\n        AdminInterface admin = AdminInterface(derivative);\n        admin.emergencyShutdown();\n    }\n\n    // Calls remargin() on the provided derivative.\n    function callRemargin(address derivative) external onlyOwner {\n        AdminInterface admin = AdminInterface(derivative);\n        admin.remargin();\n    }\n\n    // Checks whether a price has been resolved.\n    function hasPrice(bytes32 identifier, uint time) external view returns (bool hasPriceAvailable) {\n        // Ensure that the caller has been registered with the Oracle before processing the request.\n        require(registry.isDerivativeRegistered(msg.sender));\n        require(supportedIdentifiers[identifier]);\n        Price storage lookup = verifiedPrices[identifier][time];\n        return lookup.isAvailable;\n    }\n\n    // Gets a price that has already been resolved.\n    function getPrice(bytes32 identifier, uint time) external view returns (int price) {\n        // Ensure that the caller has been registered with the Oracle before processing the request.\n        require(registry.isDerivativeRegistered(msg.sender));\n        require(supportedIdentifiers[identifier]);\n        Price storage lookup = verifiedPrices[identifier][time];\n        require(lookup.isAvailable);\n        return lookup.price;\n    }\n\n    // Gets the queries that still need verified prices.\n    function getPendingQueries() external view onlyOwner returns (QueryPoint[] memory queryPoints) {\n        return requestedPrices;\n    }\n\n    // Whether the oracle provides verified prices for the provided identifier.\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported) {\n        return supportedIdentifiers[identifier];\n    }\n\n    event AddSupportedIdentifier(bytes32 indexed identifier);\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062001a6f83398101806040526200003391908101906200018f565b80336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060146101000a81548160ff02191690831515021790555080156200011957426001819055505b5081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000210565b6000620001718251620001f0565b905092915050565b600062000187825162000204565b905092915050565b60008060408385031215620001a357600080fd5b6000620001b38582860162000163565b9250506020620001c68582860162000179565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fd82620001d0565b9050919050565b60008115159050919050565b61184f80620002206000396000f3fe6080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063051fd48c146101015780630caf41211461012a57806310a7e2011461015357806322f8e5661461017c57806329cb924d146101a55780632e1a7d4d146101d0578063547e1c40146101f957806368ad8ae314610222578063715018a61461025f5780638da5cb5b146102765780638f32d59b146102a157806390978d1b146102cc5780639381a34514610309578063a03e881a14610334578063b555d60814610371578063bd1f4b521461039c578063c9280f06146103c5578063f2fde38b14610402575b600080fd5b34801561010d57600080fd5b5061012860048036036101239190810190611477565b61042b565b005b34801561013657600080fd5b50610151600480360361014c9190810190611384565b6106a0565b005b34801561015f57600080fd5b5061017a60048036036101759190810190611412565b610738565b005b34801561018857600080fd5b506101a3600480360361019e91908101906114c6565b6107cf565b005b3480156101b157600080fd5b506101ba610807565b6040516101c79190611707565b60405180910390f35b3480156101dc57600080fd5b506101f760048036036101f291908101906114c6565b61082e565b005b34801561020557600080fd5b50610220600480360361021b9190810190611384565b61088b565b005b34801561022e57600080fd5b506102496004803603610244919081019061143b565b610923565b6040516102569190611707565b60405180910390f35b34801561026b57600080fd5b50610274610be7565b005b34801561028257600080fd5b5061028b610cb9565b6040516102989190611630565b60405180910390f35b3480156102ad57600080fd5b506102b6610ce2565b6040516102c391906116b1565b60405180910390f35b3480156102d857600080fd5b506102f360048036036102ee9190810190611412565b610d39565b60405161030091906116b1565b60405180910390f35b34801561031557600080fd5b5061031e610d63565b60405161032b91906116b1565b60405180910390f35b34801561034057600080fd5b5061035b6004803603610356919081019061143b565b610d76565b60405161036891906116b1565b60405180910390f35b34801561037d57600080fd5b50610386610eb9565b604051610393919061168f565b60405180910390f35b3480156103a857600080fd5b506103c360048036036103be91908101906113ad565b610f3f565b005b3480156103d157600080fd5b506103ec60048036036103e7919081019061143b565b611010565b6040516103f991906116cc565b60405180910390f35b34801561040e57600080fd5b5061042960048036036104249190810190611384565b611163565b005b610433610ce2565b151561043e57600080fd5b606060405190810160405280600115158152602001828152602001610461610807565b81525060036000858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015590505081837f83ca681005f196e636df0f6e560a015328fffb17066e1b45ace5d0c0c5a3902e836040516104f091906116cc565b60405180910390a3600060046000858152602001908152602001600020600084815260200190815260200160002090508060000160009054906101000a900460ff161515610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a906116e7565b60405180910390fd5b600081600101549050600460008681526020019081526020016000206000858152602001908152602001600020600080820160006101000a81549060ff02191690556001820160009055505060006105da600160058054905061118290919063ffffffff16565b905081811415156106715760006005828154811015156105f657fe5b90600052602060002090600202019050826004600083600001548152602001908152602001600020600083600101548152602001908152602001600020600101819055508060058481548110151561064a57fe5b90600052602060002090600202016000820154816000015560018201548160010155905050505b61068a600160058054905061118290919063ffffffff16565b60058161069791906112bf565b50505050505050565b6106a8610ce2565b15156106b357600080fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff16633403c2fc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b505050505050565b610740610ce2565b151561074b57600080fd5b6002600082815260200190815260200160002060009054906101000a900460ff1615156107cc5760016002600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807fc7e37af44984c2b724d6d811bc8e85a9e31e5bda01d172c0a51117d03be6970860405160405180910390a25b50565b6107d7610ce2565b15156107e257600080fd5b600060149054906101000a900460ff1615156107fd57600080fd5b8060018190555050565b60008060149054906101000a900460ff161561082757600154905061082b565b4290505b90565b610836610ce2565b151561084157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610887573d6000803e3d6000fd5b5050565b610893610ce2565b151561089e57600080fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663bda02e776040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561090757600080fd5b505af115801561091b573d6000803e3d6000fd5b505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a3ca36b336040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161099c919061164b565b60206040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109ec91908101906113e9565b15156109f757600080fd5b6002600084815260200190815260200160002060009054906101000a900460ff161515610a2357600080fd5b600060036000858152602001908152602001600020600084815260200190815260200160002090508060000160009054906101000a900460ff1615610a6c576000915050610be1565b60046000858152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900460ff1615610acb57610ac362093a80610ab5610807565b6111a490919063ffffffff16565b915050610be1565b604080519081016040528060011515815260200160058054905081525060046000868152602001908152602001600020600085815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155905050600560408051908101604052808681526020018581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505082847f2bb40504cc2b3a0e7ca6ef610d2c2ede99691b888390419849e90ac117b82abc60405160405180910390a3610bdd62093a80610bcf610807565b6111a490919063ffffffff16565b9150505b92915050565b610bef610ce2565b1515610bfa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60006002600083815260200190815260200160002060009054906101000a900460ff169050919050565b600060149054906101000a900460ff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a3ca36b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610def919061164b565b60206040518083038186803b158015610e0757600080fd5b505afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e3f91908101906113e9565b1515610e4a57600080fd5b6002600084815260200190815260200160002060009054906101000a900460ff161515610e7657600080fd5b600060036000858152602001908152602001600020600084815260200190815260200160002090508060000160009054906101000a900460ff1691505092915050565b6060610ec3610ce2565b1515610ece57600080fd5b6005805480602002602001604051908101604052809291908181526020016000905b82821015610f3657838290600052602060002090600202016040805190810160405290816000820154815260200160018201548152505081526020019060010190610ef0565b50505050905090565b610f47610ce2565b1515610f5257600080fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fae929190611666565b602060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061100091908101906113e9565b151561100b57600080fd5b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a3ca36b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611089919061164b565b60206040518083038186803b1580156110a157600080fd5b505afa1580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110d991908101906113e9565b15156110e457600080fd5b6002600084815260200190815260200160002060009054906101000a900460ff16151561111057600080fd5b600060036000858152602001908152602001600020600084815260200190815260200160002090508060000160009054906101000a900460ff16151561115557600080fd5b806001015491505092915050565b61116b610ce2565b151561117657600080fd5b61117f816111c5565b50565b600082821115151561119357600080fd5b600082840390508091505092915050565b60008082840190508381101515156111bb57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561120157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8154818355818111156112ec576002028160020283600052602060002091820191016112eb91906112f1565b5b505050565b61131d91905b80821115611319576000808201600090556001820160009055506002016112f7565b5090565b90565b600061132c82356117a3565b905092915050565b600061134082516117b5565b905092915050565b600061135482356117c1565b905092915050565b600061136882356117cb565b905092915050565b600061137c82356117d5565b905092915050565b60006020828403121561139657600080fd5b60006113a484828501611320565b91505092915050565b600080604083850312156113c057600080fd5b60006113ce85828601611320565b92505060206113df85828601611370565b9150509250929050565b6000602082840312156113fb57600080fd5b600061140984828501611334565b91505092915050565b60006020828403121561142457600080fd5b600061143284828501611348565b91505092915050565b6000806040838503121561144e57600080fd5b600061145c85828601611348565b925050602061146d85828601611370565b9150509250929050565b60008060006060848603121561148c57600080fd5b600061149a86828701611348565b93505060206114ab86828701611370565b92505060406114bc8682870161135c565b9150509250925092565b6000602082840312156114d857600080fd5b60006114e684828501611370565b91505092915050565b6114f8816117df565b82525050565b61150781611747565b82525050565b60006115188261172f565b80845260208401935061152a83611722565b60005b8281101561155c576115408683516115f2565b6115498261173a565b915060408601955060018101905061152d565b50849250505092915050565b61157181611759565b82525050565b61158081611765565b82525050565b61158f8161176f565b82525050565b6000602d82527f43616e2774207075736820707269636573207468617420686176656e2774206260208301527f65656e20726571756573746564000000000000000000000000000000000000006040830152606082019050919050565b6040820160008201516116086000850182611577565b50602082015161161b6020850182611621565b50505050565b61162a81611799565b82525050565b600060208201905061164560008301846114fe565b92915050565b600060208201905061166060008301846114ef565b92915050565b600060408201905061167b60008301856114ef565b6116886020830184611621565b9392505050565b600060208201905081810360008301526116a9818461150d565b905092915050565b60006020820190506116c66000830184611568565b92915050565b60006020820190506116e16000830184611586565b92915050565b6000602082019050818103600083015261170081611595565b9050919050565b600060208201905061171c6000830184611621565b92915050565b6000602082019050919050565b600081519050919050565b6000602082019050919050565b600061175282611779565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006117ae82611779565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b60006117ea826117f1565b9050919050565b60006117fc82611803565b9050919050565b600061180e82611779565b905091905056fea265627a7a72305820359daf5b6dddb3e40a326df6b678e274f360a8e7bef4bf96a6809cab1e2731086c6578706572696d656e74616cf5003700000000000000000000000061c35bc16f947c1e8829f4d1a19806c8099083e50000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000061c35bc16f947c1e8829f4d1a19806c8099083e50000000000000000000000000000000000000000000000000000000000000000"
}