{
  "address": "0xbd367c347fc8e0a9b2da08717bcc22bb3fd878eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HoldPresaleContract",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-18\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract OpportyToken is StandardToken {\n\n  string public constant name = \"OpportyToken\";\n  string public constant symbol = \"OPP\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n  function OpportyToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HoldPresaleContract is Ownable {\n  using SafeMath for uint256;\n  // Addresses and contracts\n  OpportyToken public OppToken;\n  address private presaleCont;\n\n  struct Holder {\n    bool isActive;\n    uint tokens;\n    uint8 holdPeriod;\n    uint holdPeriodTimestamp;\n    bool withdrawed;\n  }\n\n  mapping(address => Holder) public holderList;\n  mapping(uint => address) private holderIndexes;\n\n  mapping (uint => address) private assetOwners;\n  mapping (address => uint) private assetOwnersIndex;\n  uint public assetOwnersIndexes;\n\n  uint private holderIndex;\n\n  event TokensTransfered(address contributor , uint amount);\n  event Hold(address sender, address contributor, uint amount, uint8 holdPeriod);\n\n  modifier onlyAssetsOwners() {\n    require(assetOwnersIndex[msg.sender] > 0);\n    _;\n  }\n\n  /* constructor */\n  function HoldPresaleContract(address _OppToken) {\n    OppToken = OpportyToken(_OppToken);\n  }\n\n  function setPresaleCont(address pres)  public onlyOwner\n  {\n    presaleCont = pres;\n  }\n\n  function addHolder(address holder, uint tokens, uint8 timed, uint timest) onlyAssetsOwners external {\n    if (holderList[holder].isActive == false) {\n      holderList[holder].isActive = true;\n      holderList[holder].tokens = tokens;\n      holderList[holder].holdPeriod = timed;\n      holderList[holder].holdPeriodTimestamp = timest;\n      holderIndexes[holderIndex] = holder;\n      holderIndex++;\n    } else {\n      holderList[holder].tokens += tokens;\n      holderList[holder].holdPeriod = timed;\n      holderList[holder].holdPeriodTimestamp = timest;\n    }\n    Hold(msg.sender, holder, tokens, timed);\n  }\n\n  function getBalance() constant returns (uint) {\n    return OppToken.balanceOf(this);\n  }\n\n  function unlockTokens() external {\n    address contributor = msg.sender;\n\n    if (holderList[contributor].isActive && !holderList[contributor].withdrawed) {\n      if (now >= holderList[contributor].holdPeriodTimestamp) {\n        if ( OppToken.transfer( msg.sender, holderList[contributor].tokens ) ) {\n          holderList[contributor].withdrawed = true;\n          TokensTransfered(contributor,  holderList[contributor].tokens);\n        }\n      } else {\n        revert();\n      }\n    } else {\n      revert();\n    }\n  }\n\n  function addAssetsOwner(address _owner) public onlyOwner {\n    assetOwnersIndexes++;\n    assetOwners[assetOwnersIndexes] = _owner;\n    assetOwnersIndex[_owner] = assetOwnersIndexes;\n  }\n  function removeAssetsOwner(address _owner) public onlyOwner {\n    uint index = assetOwnersIndex[_owner];\n    delete assetOwnersIndex[_owner];\n    delete assetOwners[index];\n    assetOwnersIndexes--;\n  }\n  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\n    return assetOwners[_index];\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610902833981016040528080519150505b5b60008054600160a060020a03191633600160a060020a03161790555b60018054600160a060020a031916600160a060020a0383161790555b505b610892806100706000396000f3006060604052361561009e5763ffffffff60e060020a60003504166305a955af81146100a357806312065fe0146100fd5780631df2bcbc146101225780632644f9f81461014357806328368e0f1461017557806368b2cee0146101a45780638da5cb5b146101c5578063a0c86718146101f4578063d29d503c14610219578063f2fde38b14610246578063f968f49314610267578063fb4ce0a91461027c575b600080fd5b34156100ae57600080fd5b6100c2600160a060020a036004351661029d565b6040519415158552602085019390935260ff9091166040808501919091526060840191909152901515608083015260a0909101905180910390f35b341561010857600080fd5b6101106102d4565b60405190815260200160405180910390f35b341561012d57600080fd5b610141600160a060020a036004351661034f565b005b341561014e57600080fd5b610159600435610397565b604051600160a060020a03909116815260200160405180910390f35b341561018057600080fd5b6101596103d3565b604051600160a060020a03909116815260200160405180910390f35b34156101af57600080fd5b610141600160a060020a03600435166103e2565b005b34156101d057600080fd5b610159610456565b604051600160a060020a03909116815260200160405180910390f35b34156101ff57600080fd5b610110610465565b60405190815260200160405180910390f35b341561022457600080fd5b610141600160a060020a036004351660243560ff6044351660643561046b565b005b341561025157600080fd5b610141600160a060020a03600435166105cc565b005b341561027257600080fd5b610141610665565b005b341561028757600080fd5b610141600160a060020a03600435166107f5565b005b60036020819052600091825260409091208054600182015460028301549383015460049093015460ff928316949193918316921685565b600154600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561032f57600080fd5b6102c65a03f1151561034057600080fd5b50505060405180519150505b90565b60005433600160a060020a0390811691161461036a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000805433600160a060020a039081169116146103b357600080fd5b50600081815260056020526040902054600160a060020a03165b5b919050565b600154600160a060020a031681565b6000805433600160a060020a039081169116146103fe57600080fd5b50600160a060020a03811660009081526006602090815260408083208054908490558084526005909252909120805473ffffffffffffffffffffffffffffffffffffffff19169055600780546000190190555b5b5050565b600054600160a060020a031681565b60075481565b600160a060020a0333166000908152600660205260408120541161048e57600080fd5b600160a060020a03841660009081526003602052604090205460ff16151561052e57600160a060020a03841660008181526003602081815260408084208054600160ff19918216811783558083018b905560028301805490921660ff8b161790915593018690556008805485526004909252909220805473ffffffffffffffffffffffffffffffffffffffff191690931790925580549091019055610569565b600160a060020a03841660009081526003602081905260409091206001810180548601905560028101805460ff191660ff8616179055018190555b7fc68ad0a8abd86d7b83eaf1d0ccea7b846233e17ce28eadab92d143dec66900da33858585604051600160a060020a03948516815292909316602083015260408083019190915260ff9092166060820152608001905180910390a15b5b50505050565b60005433600160a060020a039081169116146105e757600080fd5b600160a060020a03811615156105fc57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b33600160a060020a03811660009081526003602052604090205460ff1680156106aa5750600160a060020a03811660009081526003602052604090206004015460ff16155b1561009e57600160a060020a03811660009081526003602081905260409091200154421061009e5760018054600160a060020a0383811660009081526003602052604080822090940154919092169263a9059cbb92339291516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561074a57600080fd5b6102c65a03f1151561075b57600080fd5b50505060405180519050156107dd57600160a060020a0381166000908152600360205260409081902060048101805460ff1916600190811790915501547fa267b5cf59cf96d97abf36d29c63cf7bdef867c208ca8575c47f2cafda39abc99183919051600160a060020a03909216825260208201526040908101905180910390a15b6107e7565b600080fd5b610393565b600080fd5b5b50565b60005433600160a060020a0390811691161461081057600080fd5b600780546001018082556000908152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038716908117909155935493835260069091529020555b5b505600a165627a7a72305820286c772230b997b5ce3cac70ea566bb0a1aa01faaa59ccb42588ab2b1c98bda800290000000000000000000000008ef7c0cf8fe68076446803bb9035bd2a3a5e1581",
  "constructorArguments": "0000000000000000000000008ef7c0cf8fe68076446803bb9035bd2a3a5e1581"
}