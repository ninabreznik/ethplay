{
  "address": "0xbb97e381f1d1e94ffa2a5844f6875e6146981009",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WibxToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\n/**\n * This smart contract code is Copyright 2018 WiBX. For more information see https://wibx.io\n *\n * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/blob/master/LICENSE\n * It includes parts of OpenZeppelin, licensed under the MIT License: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n */\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n\n\n\n/**\n * @title Taxation Library\n *\n * @dev Helpers for taxation\n */\nlibrary TaxLib\n{\n    using SafeMath for uint256;\n\n    /**\n     * Modifiable tax container\n     */\n    struct DynamicTax\n    {\n        /**\n         * Tax amount per each transaction (in %).\n         */\n        uint256 amount;\n\n        /**\n         * The shift value.\n         * Represents: 100 * 10 ** shift\n         */\n        uint256 shift;\n    }\n\n    /**\n     * @dev Apply percentage to the value.\n     *\n     * @param taxAmount The amount of tax\n     * @param shift The shift division amount\n     * @param value The total amount\n     * @return The tax amount to be payed (in WEI)\n     */\n    function applyTax(uint256 taxAmount, uint256 shift, uint256 value) internal pure returns (uint256)\n    {\n        uint256 temp = value.mul(taxAmount);\n\n        return temp.div(shift);\n    }\n\n    /**\n     * @dev Normalize the shift value\n     *\n     * @param shift The power chosen\n     */\n    function normalizeShiftAmount(uint256 shift) internal pure returns (uint256)\n    {\n        require(shift >= 0 && shift <= 2, \"You can't set more than 2 decimal places\");\n\n        uint256 value = 100;\n\n        return value.mul(10 ** shift);\n    }\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n\n\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n\n\n/**\n * @title Taxable token\n *\n * @dev Manages dynamic taxes\n */\ncontract Taxable is Ownable\n{\n    /**\n     * Tax recipient.\n     */\n    address internal _taxRecipientAddr;\n\n    /**\n     * Modifiable tax container.\n     */\n    TaxLib.DynamicTax private _taxContainer;\n\n    constructor(address taxRecipientAddr) public\n    {\n        _taxRecipientAddr = taxRecipientAddr;\n\n        /**\n         * Tax: Starting at 0.9%\n         */\n        changeTax(9, 1);\n    }\n\n    /**\n     * Returns the tax recipient account\n     */\n    function taxRecipientAddr() public view returns (address)\n    {\n        return _taxRecipientAddr;\n    }\n\n    /**\n     * @dev Get the current tax amount.\n     */\n    function currentTaxAmount() public view returns (uint256)\n    {\n        return _taxContainer.amount;\n    }\n\n    /**\n     * @dev Get the current tax shift.\n     */\n    function currentTaxShift() public view returns (uint256)\n    {\n        return _taxContainer.shift;\n    }\n\n    /**\n     * @dev Change the dynamic tax.\n     *\n     * Just the contract admin can change the taxes.\n     * The possible tax range is 0% ~ 3% and cannot exceed it.\n     *\n     * Reference table:\n     * 3, 0 (3 / 100)   = 3%\n     * 3, 1 (3 / 1000)  = 0.3%\n     * 3, 2 (3 / 10000) = 0.03%\n     *\n     * @param amount The new tax amount chosen\n     */\n    function changeTax(uint256 amount, uint256 shift) public onlyOwner\n    {\n        if (shift == 0)\n        {\n            require(amount <= 3, \"You can't set a tax greater than 3%\");\n        }\n\n        _taxContainer = TaxLib.DynamicTax(\n            amount,\n\n            // The maximum decimal places value is checked here\n            TaxLib.normalizeShiftAmount(shift)\n        );\n    }\n\n    /**\n     * @dev Apply the tax based on the dynamic tax container\n     *\n     * @param value The value of transaction\n     */\n    function _applyTax(uint256 value) internal view returns (uint256)\n    {\n        return TaxLib.applyTax(\n            _taxContainer.amount,\n            _taxContainer.shift,\n            value\n        );\n    }\n}\n\n\n\n\n/**\n * @title BCH Handled tokens contract\n *\n * @dev Addresses owned by BCH\n */\ncontract BCHHandled\n{\n    /**\n     * The BCH module address.\n     */\n    address private _bchAddress;\n\n    /**\n     * Accounts managed by BCH.\n     */\n    mapping (address => bool) private _bchAllowed;\n\n    /**\n     * BCH Approval event\n     */\n    event BchApproval(address indexed to, bool state);\n\n    constructor(address bchAddress) public\n    {\n        _bchAddress = bchAddress;\n    }\n\n    /**\n     * @dev Check if the address is handled by BCH.\n     *\n     * @param wallet The address to check\n     */\n    function isBchHandled(address wallet) public view returns (bool)\n    {\n        return _bchAllowed[wallet];\n    }\n\n    /**\n     * @dev Authorize the full control of BCH.\n     */\n    function bchAuthorize() public returns (bool)\n    {\n        return _changeState(true);\n    }\n\n    /**\n     * @dev Revoke the BCH access.\n     */\n    function bchRevoke() public returns (bool)\n    {\n        return _changeState(false);\n    }\n\n    /**\n     * @dev Check if the transaction can be handled by BCH and its authenticity.\n     *\n     * @param from The spender address\n     */\n    function canBchHandle(address from) internal view returns (bool)\n    {\n        return isBchHandled(from) && msg.sender == _bchAddress;\n    }\n\n    /**\n     * @dev Change the BCH ownership state\n     *\n     * @param state The new state\n     */\n    function _changeState(bool state) private returns (bool)\n    {\n        emit BchApproval(msg.sender, _bchAllowed[msg.sender] = state);\n\n        return true;\n    }\n}\n\n\n\n\n/**\n * @title WiBX Utility Token\n *\n * @dev Implementation of the main WiBX token smart contract.\n */\ncontract WibxToken is ERC20Pausable, ERC20Burnable, ERC20Detailed, Taxable, BCHHandled\n{\n    /**\n     * 12 billion tokens raised by 18 decimal places.\n     */\n    uint256 public constant INITIAL_SUPPLY = 12000000000 * (10 ** 18);\n\n    constructor(address bchAddress, address taxRecipientAddr) public ERC20Detailed(\"WiBX Utility Token\", \"WBX\", 18)\n                                                                     BCHHandled(bchAddress)\n                                                                     Taxable(taxRecipientAddr)\n    {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n     * @dev Overrides the OpenZeppelin default transfer\n     *\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @return If the operation was successful\n     */\n    function transfer(address to, uint256 value) public returns (bool)\n    {\n        return _fullTransfer(msg.sender, to, value);\n    }\n\n    /**\n     * @dev Special WBX transfer tokens from one address to another checking the access for BCH\n     *\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     * @return If the operation was successful\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool)\n    {\n        if (canBchHandle(from))\n        {\n            return _fullTransfer(from, to, value);\n        }\n\n        /*\n         * Exempting the tax account to avoid an infinite loop in transferring values from this wallet.\n         */\n        if (from == taxRecipientAddr() || to == taxRecipientAddr())\n        {\n            super.transferFrom(from, to, value);\n\n            return true;\n        }\n\n        uint256 taxValue = _applyTax(value);\n\n        // Transfer the tax to the recipient\n        super.transferFrom(from, taxRecipientAddr(), taxValue);\n\n        // Transfer user's tokens\n        super.transferFrom(from, to, value);\n\n        return true;\n    }\n\n    /**\n     * @dev Batch token transfer (maxium 100 transfers)\n     *\n     * @param recipients The recipients for transfer to\n     * @param values The values\n     * @param from Spender address\n     * @return If the operation was successful\n     */\n    function sendBatch(address[] memory recipients, uint256[] memory values, address from) public returns (bool)\n    {\n        /*\n         * The maximum batch send should be 100 transactions.\n         * Each transaction we recommend 65000 of GAS limit and the maximum block size is 6700000.\n         * 6700000 / 65000 = ~103.0769 ∴ 100 transacitons (safe rounded).\n         */\n        uint maxTransactionCount = 100;\n        uint transactionCount = recipients.length;\n\n        require(transactionCount <= maxTransactionCount, \"Max transaction count violated\");\n        require(transactionCount == values.length, \"Wrong data\");\n\n        if (msg.sender == from)\n        {\n            return _sendBatchSelf(recipients, values, transactionCount);\n        }\n\n        return _sendBatchFrom(recipients, values, from, transactionCount);\n    }\n\n    /**\n     * @dev Batch token transfer from MSG sender\n     *\n     * @param recipients The recipients for transfer to\n     * @param values The values\n     * @param transactionCount Total transaction count\n     * @return If the operation was successful\n     */\n    function _sendBatchSelf(address[] memory recipients, uint256[] memory values, uint transactionCount) private returns (bool)\n    {\n        for (uint i = 0; i < transactionCount; i++)\n        {\n            _fullTransfer(msg.sender, recipients[i], values[i]);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Batch token transfer from other sender\n     *\n     * @param recipients The recipients for transfer to\n     * @param values The values\n     * @param from Spender address\n     * @param transactionCount Total transaction count\n     * @return If the operation was successful\n     */\n    function _sendBatchFrom(address[] memory recipients, uint256[] memory values, address from, uint transactionCount) private returns (bool)\n    {\n        for (uint i = 0; i < transactionCount; i++)\n        {\n            transferFrom(from, recipients[i], values[i]);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Special WBX transfer token for a specified address.\n     *\n     * @param from The address of the spender\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @return If the operation was successful\n     */\n    function _fullTransfer(address from, address to, uint256 value) private returns (bool)\n    {\n        /*\n         * Exempting the tax account to avoid an infinite loop in transferring values from this wallet.\n         */\n        if (from == taxRecipientAddr() || to == taxRecipientAddr())\n        {\n            _transfer(from, to, value);\n\n            return true;\n        }\n\n        uint256 taxValue = _applyTax(value);\n\n        // Transfer the tax to the recipient\n        _transfer(from, taxRecipientAddr(), taxValue);\n\n        // Transfer user's tokens\n        _transfer(from, to, value);\n\n        return true;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062003575833981018060405260408110156200003357600080fd5b81019080805190602001909291908051906020019092919050505081816040805190810160405280601281526020017f57694258205574696c69747920546f6b656e00000000000000000000000000008152506040805190810160405280600381526020017f57425800000000000000000000000000000000000000000000000000000000008152506012620000d833620002d1640100000000026401000000009004565b6000600460006101000a81548160ff02191690831515021790555082600590805190602001906200010b929190620008c7565b50816006908051906020019062000124929190620008c7565b5080600760006101000a81548160ff021916908360ff16021790555050505033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200025f600960016200033b640100000000026401000000009004565b5080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002c9336b26c62ad77dc602dae00000006200045b640100000000026401000000009004565b505062000976565b620002f5816003620005d06401000000000262002aab179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200035462000693640100000000026401000000009004565b15156200036057600080fd5b60008114156200040b57600382111515156200040a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f752063616e2774207365742061207461782067726561746572207468616e81526020017f203325000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60408051908101604052808381526020016200043b83620006eb64010000000002620021ac176401000000009004565b815250600960008201518160000155602082015181600101559050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200049857600080fd5b620004bd81600254620007ce64010000000002620029b9179091906401000000009004565b60028190555062000524816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620007ce64010000000002620029b9179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200060d57600080fd5b620006288282620007f0640100000000026401000000009004565b1515156200063557600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000808210158015620006ff575060028211155b15156200079a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f596f752063616e277420736574206d6f7265207468616e203220646563696d6181526020017f6c20706c6163657300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060649050620007c683600a0a82620008856401000000000262002b5b179091906401000000009004565b915050919050565b6000808284019050838110151515620007e657600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200082e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000808314156200089a5760009050620008c1565b60008284029050828482811515620008ae57fe5b04141515620008bc57600080fd5b809150505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200090a57805160ff19168380011785556200093b565b828001600101855582156200093b579182015b828111156200093a5782518255916020019190600101906200091d565b5b5090506200094a91906200094e565b5090565b6200097391905b808211156200096f57600081600090555060010162000955565b5090565b90565b612bef80620009866000396000f3fe608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461019b578063095ea7b31461022b5780630f2af89a1461029e578063102bf9b9146102c9578063174f0d4f1461033257806318160ddd1461035d5780631b1a48f51461038857806323b872dd146103b75780632ff2e9dc1461044a578063313ce5671461047557806333237989146104a657806339509351146106375780633f4ba83a146106aa57806342966c68146106c157806346fbf68e146106fc5780635c975abb146107655780636ef8d66d1461079457806370a08231146107ab578063715018a61461081057806379cc67901461082757806382dc1ec4146108825780638456cb59146108d35780638da5cb5b146108ea5780638f32d59b146109415780639036ed4d1461097057806395d89b41146109b55780639ea605c314610a45578063a457c2d714610a74578063a9059cbb14610ae7578063c1150bc714610b5a578063dd62ed3e14610bb1578063f2fde38b14610c36575b600080fd5b3480156101a757600080fd5b506101b0610c87565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401526020810190506101d5565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023757600080fd5b506102846004803603604081101561024e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d29565b604051808215151515815260200191505060405180910390f35b3480156102aa57600080fd5b506102b3610d59565b6040518082815260200191505060405180910390f35b3480156102d557600080fd5b50610318600480360360208110156102ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d66565b604051808215151515815260200191505060405180910390f35b34801561033e57600080fd5b50610347610dbc565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b50610372610dc9565b6040518082815260200191505060405180910390f35b34801561039457600080fd5b5061039d610dd3565b604051808215151515815260200191505060405180910390f35b3480156103c357600080fd5b50610430600480360360608110156103da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de4565b604051808215151515815260200191505060405180910390f35b34801561045657600080fd5b5061045f610ecc565b6040518082815260200191505060405180910390f35b34801561048157600080fd5b5061048a610edc565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104b257600080fd5b5061061d600480360360608110156104c957600080fd5b81019080803590602001906401000000008111156104e657600080fd5b8201836020820111156104f857600080fd5b8035906020019184602083028401116401000000008311171561051a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561057a57600080fd5b82018360208201111561058c57600080fd5b803590602001918460208302840111640100000000831117156105ae57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef3565b604051808215151515815260200191505060405180910390f35b34801561064357600080fd5b506106906004803603604081101561065a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611050565b604051808215151515815260200191505060405180910390f35b3480156106b657600080fd5b506106bf611080565b005b3480156106cd57600080fd5b506106fa600480360360208110156106e457600080fd5b810190808035906020019092919050505061112f565b005b34801561070857600080fd5b5061074b6004803603602081101561071f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061113c565b604051808215151515815260200191505060405180910390f35b34801561077157600080fd5b5061077a611159565b604051808215151515815260200191505060405180910390f35b3480156107a057600080fd5b506107a9611170565b005b3480156107b757600080fd5b506107fa600480360360208110156107ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117b565b6040518082815260200191505060405180910390f35b34801561081c57600080fd5b506108256111c3565b005b34801561083357600080fd5b506108806004803603604081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611297565b005b34801561088e57600080fd5b506108d1600480360360208110156108a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112a5565b005b3480156108df57600080fd5b506108e86112c5565b005b3480156108f657600080fd5b506108ff611375565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561094d57600080fd5b5061095661139f565b604051808215151515815260200191505060405180910390f35b34801561097c57600080fd5b506109b36004803603604081101561099357600080fd5b8101908080359060200190929190803590602001909291905050506113f7565b005b3480156109c157600080fd5b506109ca6114ed565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a0a5780820151818401526020810190506109ef565b50505050905090810190601f168015610a375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a5157600080fd5b50610a5a61158f565b604051808215151515815260200191505060405180910390f35b348015610a8057600080fd5b50610acd60048036036040811015610a9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115a0565b604051808215151515815260200191505060405180910390f35b348015610af357600080fd5b50610b4060048036036040811015610b0a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d0565b604051808215151515815260200191505060405180910390f35b348015610b6657600080fd5b50610b6f6115e5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bbd57600080fd5b50610c2060048036036040811015610bd457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061160f565b6040518082815260200191505060405180910390f35b348015610c4257600080fd5b50610c8560048036036020811015610c5957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611696565b005b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d1f5780601f10610cf457610100808354040283529160200191610d1f565b820191906000526020600020905b815481529060010190602001808311610d0257829003601f168201915b5050505050905090565b6000600460009054906101000a900460ff16151515610d4757600080fd5b610d5183836116b5565b905092915050565b6000600960000154905090565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600960010154905090565b6000600254905090565b6000610ddf60006117e2565b905090565b6000610def84611894565b15610e0657610dff8484846118ff565b9050610ec5565b610e0e6115e5565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e795750610e4a6115e5565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610e9357610e898484846119c4565b5060019050610ec5565b6000610e9e836119f6565b9050610eb285610eac6115e5565b836119c4565b50610ebe8585856119c4565b5060019150505b9392505050565b6b26c62ad77dc602dae000000081565b6000600760009054906101000a900460ff16905090565b60008060649050600085519050818111151515610f78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4d6178207472616e73616374696f6e20636f756e742076696f6c61746564000081525060200191505060405180910390fd5b845181141515610ff0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f57726f6e6720646174610000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156110385761102f868683611a14565b92505050611049565b61104486868684611a77565b925050505b9392505050565b6000600460009054906101000a900460ff1615151561106e57600080fd5b6110788383611adb565b905092915050565b6110893361113c565b151561109457600080fd5b600460009054906101000a900460ff1615156110af57600080fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6111393382611d12565b50565b6000611152826003611e6690919063ffffffff16565b9050919050565b6000600460009054906101000a900460ff16905090565b61117933611efa565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111cb61139f565b15156111d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6112a18282611f54565b5050565b6112ae3361113c565b15156112b957600080fd5b6112c281612152565b50565b6112ce3361113c565b15156112d957600080fd5b600460009054906101000a900460ff161515156112f557600080fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6113ff61139f565b151561140a57600080fd5b60008114156114b357600382111515156114b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f752063616e2774207365742061207461782067726561746572207468616e81526020017f203325000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60408051908101604052808381526020016114cd836121ac565b815250600960008201518160000155602082015181600101559050505050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115855780601f1061155a57610100808354040283529160200191611585565b820191906000526020600020905b81548152906001019060200180831161156857829003601f168201915b5050505050905090565b600061159b60016117e2565b905090565b6000600460009054906101000a900460ff161515156115be57600080fd5b6115c8838361227d565b905092915050565b60006115dd3384846118ff565b905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61169e61139f565b15156116a957600080fd5b6116b2816124b4565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156116f257600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff167f387797210916a5c520f420b0ef09d9bee966f0728f388056ec40f6ac4a8a81ef83600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055604051808215151515815260200191505060405180910390a260019050919050565b600061189f82610d66565b80156118f85750600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006119096115e5565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061197457506119456115e5565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561198d576119848484846125b0565b600190506119bd565b6000611998836119f6565b90506119ac856119a66115e5565b836125b0565b6119b78585856125b0565b60019150505b9392505050565b6000600460009054906101000a900460ff161515156119e257600080fd5b6119ed84848461277c565b90509392505050565b6000611a0d60096000015460096001015484612984565b9050919050565b600080600090505b82811015611a6b57611a5d338683815181101515611a3657fe5b906020019060200201518684815181101515611a4e57fe5b906020019060200201516118ff565b508080600101915050611a1c565b50600190509392505050565b600080600090505b82811015611ace57611ac0848783815181101515611a9957fe5b906020019060200201518784815181101515611ab157fe5b90602001906020020151610de4565b508080600101915050611a7f565b5060019050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611b1857600080fd5b611ba782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129b990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611d4e57600080fd5b611d63816002546129da90919063ffffffff16565b600281905550611dba816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129da90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ea357600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611f0e8160036129fc90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b611fe381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129da90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061206d8282611d12565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b612166816003612aab90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60008082101580156121bf575060028211155b1515612259576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f596f752063616e277420736574206d6f7265207468616e203220646563696d6181526020017f6c20706c6163657300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60006064905061227583600a0a82612b5b90919063ffffffff16565b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156122ba57600080fd5b61234982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129da90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156124f057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156125ec57600080fd5b61263d816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129da90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126d0816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129b990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600061280d82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546129da90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128988484846125b0565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b60008061299a8584612b5b90919063ffffffff16565b90506129af8482612b9990919063ffffffff16565b9150509392505050565b60008082840190508381101515156129d057600080fd5b8091505092915050565b60008282111515156129eb57600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a3857600080fd5b612a428282611e66565b1515612a4d57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612ae757600080fd5b612af18282611e66565b151515612afd57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080831415612b6e5760009050612b93565b60008284029050828482811515612b8157fe5b04141515612b8e57600080fd5b809150505b92915050565b60008082111515612ba957600080fd5b60008284811515612bb657fe5b049050809150509291505056fea165627a7a72305820f4c60f3b74af162468605d129d54c8af6949074691d71eacc3cbdef1ab67698d00290000000000000000000000004261cdfea93118677c04f880380d9b86b79c9b6a000000000000000000000000194d1ba9edb4bd849ca844870c05ac5cfb632b14",
  "constructorArguments": "0000000000000000000000004261cdfea93118677c04f880380d9b86b79c9b6a000000000000000000000000194d1ba9edb4bd849ca844870c05ac5cfb632b14"
}