{
  "address": "0x0cc06a72f686662adfb7d29c25c40f9b1725fc76",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NPC",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity ^0.4.8;\n  \ninterface ERC20Interface {\n  \n    function totalSupply() constant returns (uint256 totalSupply) ;\n      \n    function balanceOf(address _owner) constant returns (uint256 balance);\n      \n    function transfer(address _to, uint256 _value) returns (bool success);\n      \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n      \n    function approve(address _spender, uint256 _value) returns (bool success);\n      \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n      \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n      \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n      \n }\n    \n contract NPC is ERC20Interface {\n      string public constant symbol = \"NPC\";\n      string public constant name = \"node PC\";\n      uint8 public constant decimals = 4;\n      uint256 _totalSupply = 200000000000000;\n   \n      address public owner;\n     \n      mapping(address => uint256) balances;\n     \n   \n      mapping(address => mapping (address => uint256)) allowed;\n     \n        \n      modifier onlyOwner() {\n          if (msg.sender != owner) {\n              throw;\n          }\n          _;\n      }\n     \n      function NPC() {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n     \n      function totalSupply() constant returns (uint256 totalSupply) {\n          totalSupply = _totalSupply;\n      }\n     \n      function balanceOf(address _owner) constant returns (uint256 balance) {\n          return balances[_owner];\n      }\n     \n      function transfer(address _to, uint256 _amount) returns (bool success) {\n          if (balances[msg.sender] >= _amount \n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]) {\n              balances[msg.sender] -= _amount;\n              balances[_to] += _amount;\n              Transfer(msg.sender, _to, _amount);\n              return true;\n          } else {\n              return false;\n          }\n      }\n     \n      function transferFrom(\n          address _from,\n          address _to,\n          uint256 _amount\n     ) returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n         } else {\n             return false;\n         }\n     }\n  \n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n    \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n }",
  "bytecode": "606060405265b5e620f48000600055341561001957600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be7806100d16000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a9578063095ea7b31461013757806318160ddd1461019157806323b872dd146101ba578063313ce5671461023357806370a08231146102625780638da5cb5b146102af57806395d89b4114610304578063a9059cbb14610392578063dd62ed3e146103ec575b600080fd5b34156100b457600080fd5b6100bc610458565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905090810190601f1680156101295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014257600080fd5b610177600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610491565b604051808215151515815260200191505060405180910390f35b341561019c57600080fd5b6101a4610583565b6040518082815260200191505060405180910390f35b34156101c557600080fd5b610219600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061058c565b604051808215151515815260200191505060405180910390f35b341561023e57600080fd5b610246610893565b604051808260ff1660ff16815260200191505060405180910390f35b341561026d57600080fd5b610299600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610898565b6040518082815260200191505060405180910390f35b34156102ba57600080fd5b6102c26108e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561030f57600080fd5b610317610907565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035757808201518184015260208101905061033c565b50505050905090810190601f1680156103845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039d57600080fd5b6103d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610940565b604051808215151515815260200191505060405180910390f35b34156103f757600080fd5b610442600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b34565b6040518082815260200191505060405180910390f35b6040805190810160405280600781526020017f6e6f64652050430000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610659575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156106655750600082115b80156106f05750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156108875781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061088c565b600090505b9392505050565b600481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4e5043000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109915750600082115b8015610a1c5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610b295781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610b2e565b600090505b92915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a72305820d76279b7bb4d2660a753cb5140e0e3069ccde273c1e3ab94fed7e538c73f145b0029"
}