{
  "address": "0x8bbf4dd0f11b3a535660fd7fcb7158daebd3a17e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EthGas: Old Token",
  "contractName": "EGAS",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-28\n*/\n\n/**\n * @First Smart Airdrop eGAS\n * @http://ethgas.stream\n * @[emailÂ protected]\n */\n\npragma solidity ^0.4.16;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n library SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Owned {\n    // The address of the account of the current owner\n    address public owner;\n\n    // The publiser is the inital owner\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * Access is restricted to the current owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\ncontract EGAS is Owned {\n    using SafeMath for uint256;\n    string public symbol = \"EGAS\";\n    string public name = \"ETHGAS\";\n    uint8 public constant decimals = 8;\n    uint256 _initialSupply = 100000000000000;\n    uint256 _totalSupply = 0;\n\tuint256 _maxTotalSupply = 1279200000000000;\n\tuint256 _dropReward = 26000000000; //260 eGAS - per entry with 30% bonus to start\n\tuint256 _maxDropReward = 1300000000000; //13000 eGAS - per block 10min with 30% bonus to start - 50 entry max\n\tuint256 _rewardBonusTimePeriod = 86400; //1 day each bonus stage\n\tuint256 _nextRewardBonus = now + _rewardBonusTimePeriod;\n\tuint256 _rewardTimePeriod = 600; //10 minutes\n\tuint256 _rewardStart = now;\n\tuint256 _rewardEnd = now + _rewardTimePeriod;\n\tuint256 _currentAirdropped = 0;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n    \n    function OwnerReward() public {\n    balances[owner] = _initialSupply;\n    transfer(owner, balances[owner]);\n    }\n \n    function withdraw() public onlyOwner {\n        owner.transfer(this.balance);\n    }\n \n    function totalSupply() constant returns (uint256) {        \n\t\treturn _totalSupply + _initialSupply;\n    }\n    \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount \n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\t\n\tfunction SmartAirdrop() payable returns (bool success)\n\t{\n\t\tif (now < _rewardEnd && _currentAirdropped >= _maxDropReward)\n\t\t\trevert();\n\t\telse if (now >= _rewardEnd)\n\t\t{\n\t\t\t_rewardStart = now;\n\t\t\t_rewardEnd = now + _rewardTimePeriod;\n\t\t\t_currentAirdropped = 0;\n\t\t}\n\t\n\t\tif (now >= _nextRewardBonus)\n\t\t{\n\t\t\t_nextRewardBonus = now + _rewardBonusTimePeriod;\n\t\t\t_dropReward = _dropReward - 1000000000;\n\t\t\t_maxDropReward = _maxDropReward - 50000000000;\n\t\t\t_currentAirdropped = 0;\n\t\t\t_rewardStart = now;\n\t\t\t_rewardEnd = now + _rewardTimePeriod;\n\t\t}\t\n\t\t\n\t\tif ((_currentAirdropped < _maxDropReward) && (_totalSupply < _maxTotalSupply))\n\t\t{\n\t\t\tbalances[msg.sender] += _dropReward;\n\t\t\t_currentAirdropped += _dropReward;\n\t\t\t_totalSupply += _dropReward;\n\t\t\tTransfer(this, msg.sender, _dropReward);\n\t\t\treturn true;\n\t\t}\t\t\t\t\n\t\treturn false;\n\t}\n\t\n\tfunction MaxTotalSupply() constant returns(uint256)\n\t{\n\t\treturn _maxTotalSupply;\n\t}\n\t\n\tfunction DropReward() constant returns(uint256)\n\t{\n\t\treturn _dropReward;\n\t}\n\t\n\tfunction MaxDropReward() constant returns(uint256)\n\t{\n\t\treturn _maxDropReward;\n\t}\n\t\n\tfunction RewardBonusTimePeriod() constant returns(uint256)\n\t{\n\t\treturn _rewardBonusTimePeriod;\n\t}\n\t\n\tfunction NextRewardBonus() constant returns(uint256)\n\t{\n\t\treturn _nextRewardBonus;\n\t}\n\t\n\tfunction RewardTimePeriod() constant returns(uint256)\n\t{\n\t\treturn _rewardTimePeriod;\n\t}\n\t\n\tfunction RewardStart() constant returns(uint256)\n\t{\n\t\treturn _rewardStart;\n\t}\n\t\n\tfunction RewardEnd() constant returns(uint256)\n\t{\n\t\treturn _rewardEnd;\n\t}\n\t\n\tfunction CurrentAirdropped() constant returns(uint256)\n\t{\n\t\treturn _currentAirdropped;\n\t}\n\t\n\tfunction TimeNow() constant returns(uint256)\n\t{\n\t\treturn now;\n\t}\n}",
  "bytecode": "606060405260408051908101604052600481527f45474153000000000000000000000000000000000000000000000000000000006020820152600190805161004b929160200190610109565b5060408051908101604052600681527f455448474153000000000000000000000000000000000000000000000000000060208201526002908051610093929160200190610109565b50655af3107a4000600355600060045566048b6cf598c00060055564060db8840060065565012eae09c800600755620151806008556008544201600955610258600a5542600b55600a544201600c556000600d555b60008054600160a060020a03191633600160a060020a03161790555b6101a9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014a57805160ff1916838001178555610177565b82800160010185558215610177579182015b8281111561017757825182559160200191906001019061015c565b5b50610184929150610188565b5090565b6101a691905b80821115610184576000815560010161018e565b5090565b90565b610c1d806101b86000396000f3006060604052361561013b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610140578063095ea7b3146101cb57806318160ddd146102015780631bfe783e1461022657806323b872dd1461024b578063313ce567146102875780633ccfd60b146102b057806343562bd0146102c557806353ac36f4146102ea5780635d7e994a1461030f57806370a08231146103345780638a5910a5146103655780638da5cb5b1461038a57806395d89b41146103b9578063a8faf6f014610444578063a9059cbb14610460578063ad459a1c14610496578063b579d7de146104bb578063b597842a146104e0578063c965ed7b14610505578063c9d825601461051a578063da0f039d1461053f578063dd62ed3e14610564578063f2fde38b1461059b575b600080fd5b341561014b57600080fd5b6101536105bc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d657600080fd5b6101ed600160a060020a036004351660243561065a565b604051901515815260200160405180910390f35b341561020c57600080fd5b6102146106c7565b60405190815260200160405180910390f35b341561023157600080fd5b6102146106d2565b60405190815260200160405180910390f35b341561025657600080fd5b6101ed600160a060020a03600435811690602435166044356106d9565b604051901515815260200160405180910390f35b341561029257600080fd5b61029a6107f5565b60405160ff909116815260200160405180910390f35b34156102bb57600080fd5b6102c36107fa565b005b34156102d057600080fd5b610214610852565b60405190815260200160405180910390f35b34156102f557600080fd5b610214610859565b60405190815260200160405180910390f35b341561031a57600080fd5b610214610860565b60405190815260200160405180910390f35b341561033f57600080fd5b610214600160a060020a0360043516610867565b60405190815260200160405180910390f35b341561037057600080fd5b610214610886565b60405190815260200160405180910390f35b341561039557600080fd5b61039d61088d565b604051600160a060020a03909116815260200160405180910390f35b34156103c457600080fd5b61015361089c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101905780820151818401525b602001610177565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ed61093a565b604051901515815260200160405180910390f35b341561046b57600080fd5b6101ed600160a060020a0360043516602435610a52565b604051901515815260200160405180910390f35b34156104a157600080fd5b610214610b21565b60405190815260200160405180910390f35b34156104c657600080fd5b610214610b28565b60405190815260200160405180910390f35b34156104eb57600080fd5b610214610b2f565b60405190815260200160405180910390f35b341561051057600080fd5b6102c3610b34565b005b341561052557600080fd5b610214610b6e565b60405190815260200160405180910390f35b341561054a57600080fd5b610214610b75565b60405190815260200160405180910390f35b341561056f57600080fd5b610214600160a060020a0360043581169060243516610b7c565b60405190815260200160405180910390f35b34156105a657600080fd5b6102c3600160a060020a0360043516610ba9565b005b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106525780601f1061062757610100808354040283529160200191610652565b820191906000526020600020905b81548152906001019060200180831161063557829003601f168201915b505050505081565b600160a060020a033381166000818152600f6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600354600454015b90565b6007545b90565b600160a060020a0383166000908152600e60205260408120548290108015906107295750600160a060020a038085166000908152600f602090815260408083203390941683529290522054829010155b80156107355750600082115b801561075a5750600160a060020a0383166000908152600e6020526040902054828101115b156107e957600160a060020a038085166000818152600e6020818152604080842080548990039055600f8252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016107ed565b5060005b5b9392505050565b600881565b60005433600160a060020a0390811691161461081557600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561084e57600080fd5b5b5b565b6009545b90565b6006545b90565b600b545b90565b600160a060020a0381166000908152600e60205260409020545b919050565b600a545b90565b600054600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106525780601f1061062757610100808354040283529160200191610652565b820191906000526020600020905b81548152906001019060200180831161063557829003601f168201915b505050505081565b6000600c54421080156109515750600754600d5410155b1561095b57600080fd5b600c5442106109775742600b819055600a5401600c556000600d555b5b60095442106109b8576008544290810160095560068054633b9ac9ff1901905560078054640ba43b73ff190190556000600d55600b819055600a5401600c555b600754600d541080156109ce5750600554600454105b15610a4b5760068054600160a060020a033381166000818152600e60205260409081902080549094019093559254600d805482019055600480548201905530909116917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a35060016106cf565b5060005b90565b600160a060020a0333166000908152600e6020526040812054829010801590610a7b5750600082115b8015610aa05750600160a060020a0383166000908152600e6020526040902054828101115b15610b1257600160a060020a033381166000818152600e60205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016106c1565b5060006106c1565b5b92915050565b600d545b90565b600c545b90565b425b90565b60035460008054600160a060020a039081168252600e60205260408083209390935581541680825291902054610b6a9190610a52565b505b565b6008545b90565b6005545b90565b600160a060020a038083166000908152600f60209081526040808320938516835292905220545b92915050565b60005433600160a060020a03908116911614610bc457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a723058206f36466ab8fc9f5102f5917740a580ad353889a8b6d69e0270f9c34023a27f2c0029"
}