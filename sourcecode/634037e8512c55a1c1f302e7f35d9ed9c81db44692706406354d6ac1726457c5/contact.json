{
  "address": "0x125af86c811554abd880b160d4682faaed01218c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CompoundProxy",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity ^0.5.0;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    function allocateTo(address recipient, uint256 value) external;\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract CTokenInterface is ERC20 {\n    function mint(uint mintAmount) external returns (uint);\n    function mint() external payable;\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrow() external payable;\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower) external payable;\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function exchangeRateCurrent() external returns (uint);\n    function supplyRatePerBlock() external returns (uint);\n    function borrowRatePerBlock() external returns (uint);\n    function totalReserves() external returns (uint);\n    function reserveFactorMantissa() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function getCash() external returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract PepInterface {\n    function peek() public returns (bytes32, bool);\n}\n\ncontract VoxInterface {\n    function par() public returns (uint);\n}\n\ncontract TubInterface {\n    event LogNewCup(address indexed lad, bytes32 cup);\n\n    function open() public returns (bytes32);\n    function join(uint) public;\n    function exit(uint) public;\n    function lock(bytes32, uint) public;\n    function free(bytes32, uint) public;\n    function draw(bytes32, uint) public;\n    function wipe(bytes32, uint) public;\n    function give(bytes32, address) public;\n    function shut(bytes32) public;\n    function bite(bytes32) public;\n    function cups(bytes32) public returns (address, uint, uint, uint);\n    function gem() public returns (TokenInterface);\n    function gov() public returns (TokenInterface);\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function vox() public returns (VoxInterface);\n    function ask(uint) public returns (uint);\n    function mat() public returns (uint);\n    function chi() public returns (uint);\n    function ink(bytes32) public returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function per() public returns (uint);\n    function pip() public returns (PipInterface);\n    function pep() public returns (PepInterface);\n    function tag() public returns (uint);\n    function drip() public;\n    function lad(bytes32 cup) public view returns (address);\n}\n\ncontract KyberNetworkProxyInterface {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes memory hint) public payable returns(uint);\n\n    function trade(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId) public payable returns(uint);\n\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n}\n\ncontract ActionLogger {\n    event Log(string indexed _type, address indexed owner, uint _first, uint _second);\n\n    function logEvent(string memory _type, address _owner, uint _first, uint _second) public {\n        emit Log(_type, _owner, _first, _second);\n    }\n}\n\n\ncontract CarefulMath {\n    enum MathError {\n        NO_ERROR,\n        DIVISION_BY_ZERO,\n        INTEGER_OVERFLOW,\n        INTEGER_UNDERFLOW\n    }\n\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n}\n\ncontract Exponential is CarefulMath {\n    uint constant expScale = 1e18;\n    uint constant halfExpScale = expScale/2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n        return getExp(numerator, divisor.mantissa);\n    }\n\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(fraction));\n    }\n\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n    }\n\n    function truncate(Exp memory exp) pure internal returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n}\n\n/// @title CompoundProxy implements CDP and Compound direct interactions\ncontract CompoundProxy is DSMath, Exponential {\n    \n    // Kovan addresses\n    // address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\n    // address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // address public constant DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    // address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    // address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\n    // address public constant KYBER_WRAPPER = 0x82CD6436c58A65E2D4263259EcA5843d3d7e0e65;\n    // address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\n    // address public constant LOGGER_ADDRESS = 0x70b742b84a75aFF6482953f7883Fd7E70d3dBbac;\n    // address public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\n    // address constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\n    // address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\n    \n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant KYBER_WRAPPER = 0xAae7ba823679889b12f71D1f18BEeCBc69E62237;\n    address public constant LOGGER_ADDRESS = 0x669e1AF3D294a47366F3796F0FA66Be751A23B0D;\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    address public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    \n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\n    \n    /// @notice It will draw Dai from Compound and repay part of the CDP debt\n    /// @dev User has to approve DSProxy to pull CDai before calling this\n    /// @param _cup Cdp id\n    /// @param _amount Amount of Dai that will be taken from Compound and put into CDP\n    function repayCDPDebt(bytes32 _cup, uint _amount) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n        CTokenInterface cDaiContract = CTokenInterface(CDAI_ADDRESS);\n        \n        approveTub(DAI_ADDRESS);\n        approveTub(MKR_ADDRESS);\n        approveTub(PETH_ADDRESS);\n        approveTub(WETH_ADDRESS);\n\n        // Calculate how many cDai tokens we need to pull for the Dai _amount\n        uint cAmount = getCTokenAmount(_amount, CDAI_ADDRESS);     \n\n        cDaiContract.approve(CDAI_ADDRESS, uint(-1));\n        cDaiContract.transferFrom(msg.sender, address(this), cAmount);\n        \n        require(cDaiContract.redeemUnderlying(_amount) == 0, \"Reedem Failed\");\n\n        // Buy some Mkr to pay stability fee\n        uint mkrAmount = stabilityFeeInMkr(tub, _cup, _amount);\n        uint daiFee = wmul(mkrAmount, estimatedDaiPrice(_amount));\n        uint amountExchanged = exchangeToken(ERC20(DAI_ADDRESS), ERC20(MKR_ADDRESS), daiFee, mkrAmount);\n\n        require(amountExchanged == mkrAmount, \"Exact amount of Mkr not exchanged\");\n\n        _amount = sub(_amount, daiFee);\n\n        uint daiDebt = getDebt(tub, _cup);\n\n        if (_amount > daiDebt) {\n            ERC20(DAI_ADDRESS).transfer(msg.sender, sub(_amount, daiDebt));\n            _amount = daiDebt;\n        }\n        \n        tub.wipe(_cup, _amount);\n        \n        ActionLogger(LOGGER_ADDRESS).logEvent('repayCDPDebt', msg.sender, mkrAmount, amountExchanged);\n        \n    }\n    \n    /// @notice It will draw Dai from CDP and add it to Compound\n    /// @param _cup CDP id\n    /// @param _amount Amount of Dai drawn from the CDP and put into Compound\n    function cdpToCompound(bytes32 _cup, uint _amount) public {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n        CTokenInterface cDaiContract = CTokenInterface(CDAI_ADDRESS);\n\n        approveTub(WETH_ADDRESS);\n        approveTub(PETH_ADDRESS);\n        approveTub(DAI_ADDRESS);\n\n        tub.draw(_cup, _amount);\n        \n        //cDai will try and pull Dai tokens from DSProxy, so approve it\n        ERC20(DAI_ADDRESS).approve(CDAI_ADDRESS, uint(-1));\n        \n        require(cDaiContract.mint(_amount) == 0, \"Failed Mint\");\n        \n        uint cDaiMinted = cDaiContract.balanceOf(address(this));\n        \n        // transfer the cDai to the original sender\n        ERC20(CDAI_ADDRESS).transfer(msg.sender, cDaiMinted);\n        \n        ActionLogger(LOGGER_ADDRESS).logEvent('cdpToCompound', msg.sender, _amount, cDaiMinted);\n        \n    }\n\n    /// @notice Calculates how many cTokens you get for a _tokenAmount\n    function getCTokenAmount(uint _tokenAmount, address _tokeAddress) internal returns(uint cAmount) {\n        MathError error;\n        (error, cAmount) = divScalarByExpTruncate(_tokenAmount,\n             Exp({mantissa: CTokenInterface(_tokeAddress).exchangeRateCurrent()}));\n\n        require(error == MathError.NO_ERROR, \"Math error\");\n    }\n    \n    /// @notice Stability fee amount in Mkr\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    /// @param _daiRepay Amount of dai we are repaying\n    function stabilityFeeInMkr(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\n        bytes32 mkrPrice;\n        bool ok;\n\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\n\n        (mkrPrice, ok) = _tub.pep().peek();\n\n        return wdiv(feeInDai, uint(mkrPrice));\n    }\n    \n      /// @notice Returns expected rate for Eth -> Dai conversion\n    /// @param _amount Amount of Ether\n    function estimatedDaiPrice(uint _amount) internal returns (uint expectedRate) {\n        (expectedRate, ) = KyberNetworkProxyInterface(KYBER_INTERFACE).getExpectedRate(ERC20(ETHER_ADDRESS), ERC20(DAI_ADDRESS), _amount);\n    }\n    \n    /// @notice Approve a token if it's not already approved\n    /// @param _tokenAddress Address of the ERC20 token we want to approve\n    function approveTub(address _tokenAddress) internal {\n        if (ERC20(_tokenAddress).allowance(msg.sender, _tokenAddress) < (uint(-1) / 2)) {\n            ERC20(_tokenAddress).approve(TUB_ADDRESS, uint(-1));\n        }\n    }\n\n    /// @notice Returns current Dai debt of the CDP\n    /// @param _tub Tub interface\n    /// @param _cup Id of the CDP\n    function getDebt(TubInterface _tub, bytes32 _cup) internal returns (uint debt) {\n        ( , , debt, ) = _tub.cups(_cup);\n    }\n\n    /// @notice Exhcanged a token on kyber\n    function exchangeToken(ERC20 _sourceToken, ERC20 _destToken, uint _sourceAmount, uint _maxAmount) internal returns (uint destAmount) {\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n\n        uint minRate;\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(_sourceToken, _destToken, _sourceAmount);\n\n        require(_sourceToken.approve(address(_kyberNetworkProxy), 0));\n        require(_sourceToken.approve(address(_kyberNetworkProxy), _sourceAmount));\n\n        destAmount = _kyberNetworkProxy.trade(\n            _sourceToken,\n            _sourceAmount,\n            _destToken,\n            address(this),\n            _maxAmount,\n            minRate,\n            WALLET_ID\n        );\n\n        return destAmount;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_daiRepay\",\"type\":\"uint256\"}],\"name\":\"stabilityFeeInMkr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cdpToCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayCDPDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "bytecode": ""
}