{
  "address": "0xf97b5d65da6b0468b90d531ddae2a69843e6797d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "LEOcoin Token",
  "contractName": "LEOcoin",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-02\n*/\n\npragma solidity ^0.5.2;\n\n//////////////////////////////////////////\n//                                      //\n//              SafeMath                //\n//                                      //\n//                                      //\n//////////////////////////////////////////\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n\n//////////////////////////////////////////\n//                                      //\n//          Token interface             //\n//                                      //\n//                                      //\n//////////////////////////////////////////\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);   \n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    \n    function approve(address spender, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n */\ncontract LEOcoin is IERC20 {\n    using SafeMath for uint256;\n\n    // \n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    uint256 private _totalSupply;\n\n    address private _isMinter;\n    uint256 private _cap;\n\n\n    constructor (address masterAccount, uint256 premined, address minterAccount) public {\n        _name = \"LEOcoin\";\n        _symbol = \"LEO\";\n        _decimals = 18;\n        _cap = 4000000000*1E18;\n\n        _isMinter = minterAccount;\n\n        _totalSupply = _totalSupply.add(premined);\n        _balances[masterAccount] = _balances[masterAccount].add(premined);\n        emit Transfer(address(0), masterAccount, premined);\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;      \n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param account The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address account, uint256 value) public onlyMinter  {\n        require(account != address(0));\n        require(totalSupply().add(value) <= _cap);\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n\n    /**\n     * @return the cap for the token minting.\n     */\n    function cap() external view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @return the address that can mint tokens.\n     */\n    function currentMinter() external view returns (address) {\n        return _isMinter;\n    }\n\n\n    /**\n     * @dev Function to change minter address\n     * @param newMinter The address that will be able to mint tokens from now on\n     */\n    function changeMinter(address newMinter) external onlyMinter {\n        _isMinter = newMinter;\n    } \n\n    modifier onlyMinter() {\n        require(msg.sender==_isMinter);\n        _;\n    }\n\n\n    function batchTransfer(address[] memory accounts, uint256[] memory values) public {\n        for (uint i=0; i<accounts.length; i++) {\n            // check to!=0 to prevent reversion\n            if (accounts[i]==address(0)) {\n                continue;\n            }\n            transfer(accounts[i], values[i]);\n        }\n    }\n\n    function batchMint(address[] memory accounts, uint256[] memory values) public {\n        for (uint i=0; i<accounts.length; i++) {\n            // check to!=0 to prevent reversion\n            if (accounts[i]==address(0)) {\n                continue;\n            }\n\n            mint(accounts[i], values[i]);\n        }   \n    }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"masterAccount\",\"type\":\"address\"},{\"name\":\"premined\",\"type\":\"uint256\"},{\"name\":\"minterAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160608062000e8e833981018060405260608110156200003357600080fd5b508051602080830151604093840151845180860190955260078086527f4c454f636f696e000000000000000000000000000000000000000000000000009590930194855292939092916200008a91600091620001d6565b506040805180820190915260038082527f4c454f00000000000000000000000000000000000000000000000000000000006020909201918252620000d191600191620001d6565b506002805460ff191660121790556b0cecb8f27f4200f3a000000060075560068054600160a060020a038316600160a060020a031990911617905560055462000129908364010000000062000bbe620001bc82021704565b600555600160a060020a0383166000908152600360205260409020546200015f908364010000000062000bbe620001bc82021704565b600160a060020a03841660008181526003602090815260408083209490945583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050506200027b565b600082820183811015620001cf57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021957805160ff191683800117855562000249565b8280016001018555821562000249579182015b82811115620002495782518255916020019190600101906200022c565b50620002579291506200025b565b5090565b6200027891905b8082111562000257576000815560010162000262565b90565b610c03806200028b6000396000f3fe608060405234801561001057600080fd5b5060043610610128576000357c01000000000000000000000000000000000000000000000000000000009004806340c10f19116100bf57806395d89b411161008e57806395d89b41146105545780639bac6e8d1461055c578063a457c2d714610580578063a9059cbb146105ac578063dd62ed3e146105d857610128565b806340c10f19146102b457806368573107146102e057806370a082311461040757806388d695b21461042d57610128565b80632c4d4d18116100fb5780632c4d4d181461023a578063313ce56714610262578063355274ea14610280578063395093511461028857610128565b806306fdde031461012d578063095ea7b3146101aa57806318160ddd146101ea57806323b872dd14610204575b600080fd5b610135610606565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016f578181015183820152602001610157565b50505050905090810190601f16801561019c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d6600480360360408110156101c057600080fd5b50600160a060020a03813516906020013561069c565b604080519115158252519081900360200190f35b6101f26106b2565b60408051918252519081900360200190f35b6101d66004803603606081101561021a57600080fd5b50600160a060020a038135811691602081013590911690604001356106b8565b6102606004803603602081101561025057600080fd5b5035600160a060020a031661070f565b005b61026a610755565b6040805160ff9092168252519081900360200190f35b6101f261075e565b6101d66004803603604081101561029e57600080fd5b50600160a060020a038135169060200135610764565b610260600480360360408110156102ca57600080fd5b50600160a060020a0381351690602001356107a0565b610260600480360360408110156102f657600080fd5b81019060208101813564010000000081111561031157600080fd5b82018360208201111561032357600080fd5b8035906020019184602083028401116401000000008311171561034557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460208302840111640100000000831117156103c957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610889945050505050565b6101f26004803603602081101561041d57600080fd5b5035600160a060020a0316610909565b6102606004803603604081101561044357600080fd5b81019060208101813564010000000081111561045e57600080fd5b82018360208201111561047057600080fd5b8035906020019184602083028401116401000000008311171561049257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104e257600080fd5b8201836020820111156104f457600080fd5b8035906020019184602083028401116401000000008311171561051657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610924945050505050565b6101356109a1565b610564610a01565b60408051600160a060020a039092168252519081900360200190f35b6101d66004803603604081101561059657600080fd5b50600160a060020a038135169060200135610a10565b6101d6600480360360408110156105c257600080fd5b50600160a060020a038135169060200135610a4c565b6101f2600480360360408110156105ee57600080fd5b50600160a060020a0381358116916020013516610a59565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106925780601f1061066757610100808354040283529160200191610692565b820191906000526020600020905b81548152906001019060200180831161067557829003601f168201915b5050505050905090565b60006106a9338484610a84565b50600192915050565b60055490565b60006106c5848484610ada565b600160a060020a038416600090815260046020908152604080832033808552925290912054610705918691610700908663ffffffff610ba916565b610a84565b5060019392505050565b600654600160a060020a0316331461072657600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025460ff1690565b60075490565b336000818152600460209081526040808320600160a060020a038716845290915281205490916106a9918590610700908663ffffffff610bbe16565b600654600160a060020a031633146107b757600080fd5b600160a060020a03821615156107cc57600080fd5b6007546107e7826107db6106b2565b9063ffffffff610bbe16565b11156107f257600080fd5b600554610805908263ffffffff610bbe16565b600555600160a060020a038216600090815260036020526040902054610831908263ffffffff610bbe16565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60005b82518110156109045782516000908490839081106108a657fe5b90602001906020020151600160a060020a031614156108c4576108fc565b6108fc83828151811015156108d557fe5b9060200190602002015183838151811015156108ed57fe5b906020019060200201516107a0565b60010161088c565b505050565b600160a060020a031660009081526003602052604090205490565b60005b825181101561090457825160009084908390811061094157fe5b90602001906020020151600160a060020a0316141561095f57610999565b610997838281518110151561097057fe5b90602001906020020151838381518110151561098857fe5b90602001906020020151610a4c565b505b600101610927565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156106925780601f1061066757610100808354040283529160200191610692565b600654600160a060020a031690565b336000818152600460209081526040808320600160a060020a038716845290915281205490916106a9918590610700908663ffffffff610ba916565b60006106a9338484610ada565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600160a060020a0382161515610a9957600080fd5b600160a060020a0383161515610aae57600080fd5b600160a060020a0392831660009081526004602090815260408083209490951682529290925291902055565b600160a060020a0382161515610aef57600080fd5b600160a060020a038316600090815260036020526040902054610b18908263ffffffff610ba916565b600160a060020a038085166000908152600360205260408082209390935590841681522054610b4d908263ffffffff610bbe16565b600160a060020a0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610bb857600080fd5b50900390565b600082820183811015610bd057600080fd5b939250505056fea165627a7a723058200ecffb66c4c4bf3f724d9c294da6bd7ac5f93cfaac1b19f61c255f127a159fe80029000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b0000000000000000000000000000000000000000006b88921f0410abc2000000000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b0000000000000000000000000000000000000000006b88921f0410abc2000000000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b",
  "constructorArguments": "000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b0000000000000000000000000000000000000000006b88921f0410abc2000000000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b0000000000000000000000000000000000000000006b88921f0410abc2000000000000000000000000000000bacaa9db707a9c4168bc354b659ad02b75fbf34b"
}