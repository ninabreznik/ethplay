{
  "address": "0xb052d4d50577e2081f85558ae84b47feb11a2fb8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOIonLot",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface IAOIonLot {\n\tfunction createPrimordialLot(address _account, uint256 _primordialAmount, uint256 _multiplier, uint256 _networkBonusAmount) external returns (bytes32);\n\n\tfunction createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier) external returns (bytes32);\n\n\tfunction lotById(bytes32 _lotId) external view returns (bytes32, address, uint256, uint256);\n\n\tfunction totalLotsByAddress(address _lotOwner) external view returns (uint256);\n\n\tfunction createBurnLot(address _account, uint256 _amount, uint256 _multiplierAfterBurn) external returns (bool);\n\n\tfunction createConvertLot(address _account, uint256 _amount, uint256 _multiplierAfterConversion) external returns (bool);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n/**\n * @title AOIonLot\n */\ncontract AOIonLot is TheAO {\n\tusing SafeMath for uint256;\n\n\taddress public aoIonAddress;\n\n\tuint256 public totalLots;\n\tuint256 public totalBurnLots;\n\tuint256 public totalConvertLots;\n\n\t/**\n\t * Stores Lot creation data (during network exchange)\n\t */\n\tstruct Lot {\n\t\tbytes32 lotId;\n\t\tuint256 multiplier;\t// This value is in 10^6, so 1000000 = 1\n\t\taddress lotOwner;\n\t\tuint256 amount;\n\t}\n\n\t/**\n\t * Struct to store info when account burns primordial ion\n\t */\n\tstruct BurnLot {\n\t\tbytes32 burnLotId;\n\t\taddress lotOwner;\n\t\tuint256 amount;\n\t}\n\n\t/**\n\t * Struct to store info when account converts network ion to primordial ion\n\t */\n\tstruct ConvertLot {\n\t\tbytes32 convertLotId;\n\t\taddress lotOwner;\n\t\tuint256 amount;\n\t}\n\n\t// Mapping from Lot ID to Lot object\n\tmapping (bytes32 => Lot) internal lots;\n\n\t// Mapping from Burn Lot ID to BurnLot object\n\tmapping (bytes32 => BurnLot) internal burnLots;\n\n\t// Mapping from Convert Lot ID to ConvertLot object\n\tmapping (bytes32 => ConvertLot) internal convertLots;\n\n\t// Mapping from owner to list of owned lot IDs\n\tmapping (address => bytes32[]) internal ownedLots;\n\n\t// Mapping from owner to list of owned burn lot IDs\n\tmapping (address => bytes32[]) internal ownedBurnLots;\n\n\t// Mapping from owner to list of owned convert lot IDs\n\tmapping (address => bytes32[]) internal ownedConvertLots;\n\n\t// Event to be broadcasted to public when a lot is created\n\t// multiplier value is in 10^6 to account for 6 decimal points\n\tevent LotCreation(address indexed lotOwner, bytes32 indexed lotId, uint256 multiplier, uint256 primordialAmount, uint256 networkBonusAmount);\n\n\t// Event to be broadcasted to public when burn lot is created (when account burns primordial ions)\n\tevent BurnLotCreation(address indexed lotOwner, bytes32 indexed burnLotId, uint256 burnAmount, uint256 multiplierAfterBurn);\n\n\t// Event to be broadcasted to public when convert lot is created (when account convert network ions to primordial ions)\n\tevent ConvertLotCreation(address indexed lotOwner, bytes32 indexed convertLotId, uint256 convertAmount, uint256 multiplierAfterConversion);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _aoIonAddress, address _nameTAOPositionAddress) public {\n\t\tsetAOIonAddress(_aoIonAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if calling address is AOIon\n\t */\n\tmodifier onlyAOIon {\n\t\trequire (msg.sender == aoIonAddress);\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the AOIon Address\n\t * @param _aoIonAddress The address of AOIon\n\t */\n\tfunction setAOIonAddress(address _aoIonAddress) public onlyTheAO {\n\t\trequire (_aoIonAddress != address(0));\n\t\taoIonAddress = _aoIonAddress;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Create a lot with `primordialAmount` of primordial ions with `_multiplier` for an `account`\n\t *\t\tduring network exchange, and reward `_networkBonusAmount` if exist\n\t * @param _account Address of the lot owner\n\t * @param _primordialAmount The amount of primordial ions to be stored in the lot\n\t * @param _multiplier The multiplier for this lot in (10 ** 6)\n\t * @param _networkBonusAmount The network ion bonus amount\n\t * @return Created lot Id\n\t */\n\tfunction createPrimordialLot(address _account, uint256 _primordialAmount, uint256 _multiplier, uint256 _networkBonusAmount) external onlyAOIon returns (bytes32) {\n\t\treturn _createWeightedMultiplierLot(_account, _primordialAmount, _multiplier, _networkBonusAmount);\n\t}\n\n\t/**\n\t * @dev Create a lot with `amount` of ions at `weightedMultiplier` for an `account`\n\t * @param _account Address of lot owner\n\t * @param _amount The amount of ions\n\t * @param _weightedMultiplier The multiplier of the lot (in 10^6)\n\t * @return bytes32 of new created lot ID\n\t */\n\tfunction createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier) external onlyAOIon returns (bytes32) {\n\t\trequire (_account != address(0));\n\t\trequire (_amount > 0);\n\t\treturn _createWeightedMultiplierLot(_account, _amount, _weightedMultiplier, 0);\n\t}\n\n\t/**\n\t * @dev Return the lot information at a given ID\n\t * @param _lotId The lot ID in question\n\t * @return id of the lot\n\t * @return The lot owner address\n\t * @return multiplier of the lot in (10 ** 6)\n\t * @return Primordial ion amount in the lot\n\t */\n\tfunction lotById(bytes32 _lotId) external view returns (bytes32, address, uint256, uint256) {\n\t\tLot memory _lot = lots[_lotId];\n\t\treturn (_lot.lotId, _lot.lotOwner, _lot.multiplier, _lot.amount);\n\t}\n\n\t/**\n\t * @dev Return all lot IDs owned by an address\n\t * @param _lotOwner The address of the lot owner\n\t * @return array of lot IDs\n\t */\n\tfunction lotIdsByAddress(address _lotOwner) public view returns (bytes32[] memory) {\n\t\treturn ownedLots[_lotOwner];\n\t}\n\n\t/**\n\t * @dev Return the total lots owned by an address\n\t * @param _lotOwner The address of the lot owner\n\t * @return total lots owner by the address\n\t */\n\tfunction totalLotsByAddress(address _lotOwner) external view returns (uint256) {\n\t\treturn ownedLots[_lotOwner].length;\n\t}\n\n\t/**\n\t * @dev Return the lot information at a given index of the lots list of the requested owner\n\t * @param _lotOwner The address owning the lots list to be accessed\n\t * @param _index uint256 representing the index to be accessed of the requested lots list\n\t * @return id of the lot\n\t * @return The address of the lot owner\n\t * @return multiplier of the lot in (10 ** 6)\n\t * @return Primordial ion amount in the lot\n\t */\n\tfunction lotOfOwnerByIndex(address _lotOwner, uint256 _index) public view returns (bytes32, address, uint256, uint256) {\n\t\trequire (_index < ownedLots[_lotOwner].length);\n\t\tLot memory _lot = lots[ownedLots[_lotOwner][_index]];\n\t\treturn (_lot.lotId, _lot.lotOwner, _lot.multiplier, _lot.amount);\n\t}\n\n\t/**\n\t * @dev Store burn lot information\n\t * @param _account The address of the account\n\t * @param _amount The amount of primordial ions to burn\n\t * @param _multiplierAfterBurn The owner's weighted multiplier after burn\n\t * @return true on success\n\t */\n\tfunction createBurnLot(address _account, uint256 _amount, uint256 _multiplierAfterBurn) external onlyAOIon returns (bool) {\n\t\ttotalBurnLots++;\n\n\t\t// Generate burn lot Id\n\t\tbytes32 burnLotId = keccak256(abi.encodePacked(this, _account, totalBurnLots));\n\n\t\t// Make sure no one owns this lot yet\n\t\trequire (burnLots[burnLotId].lotOwner == address(0));\n\n\t\tBurnLot storage burnLot = burnLots[burnLotId];\n\t\tburnLot.burnLotId = burnLotId;\n\t\tburnLot.lotOwner = _account;\n\t\tburnLot.amount = _amount;\n\t\townedBurnLots[_account].push(burnLotId);\n\t\temit BurnLotCreation(burnLot.lotOwner, burnLot.burnLotId, burnLot.amount, _multiplierAfterBurn);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Return all Burn Lot IDs owned by an address\n\t * @param _lotOwner The address of the burn lot owner\n\t * @return array of Burn Lot IDs\n\t */\n\tfunction burnLotIdsByAddress(address _lotOwner) public view returns (bytes32[] memory) {\n\t\treturn ownedBurnLots[_lotOwner];\n\t}\n\n\t/**\n\t * @dev Return the total burn lots owned by an address\n\t * @param _lotOwner The address of the burn lot owner\n\t * @return total burn lots owner by the address\n\t */\n\tfunction totalBurnLotsByAddress(address _lotOwner) public view returns (uint256) {\n\t\treturn ownedBurnLots[_lotOwner].length;\n\t}\n\n\t/**\n\t * @dev Return the burn lot information at a given ID\n\t * @param _burnLotId The burn lot ID in question\n\t * @return id of the lot\n\t * @return The address of the burn lot owner\n\t * @return Primordial ion amount in the burn lot\n\t */\n\tfunction burnLotById(bytes32 _burnLotId) public view returns (bytes32, address, uint256) {\n\t\tBurnLot memory _burnLot = burnLots[_burnLotId];\n\t\treturn (_burnLot.burnLotId, _burnLot.lotOwner, _burnLot.amount);\n\t}\n\n\t/**\n\t * @dev Store convert lot information\n\t * @param _account The address of the account\n\t * @param _amount The amount to convert\n\t * @param _multiplierAfterConversion The owner's weighted multiplier after conversion\n\t * @return true on success\n\t */\n\tfunction createConvertLot(address _account, uint256 _amount, uint256 _multiplierAfterConversion) external onlyAOIon returns (bool) {\n\t\t// Store convert lot info\n\t\ttotalConvertLots++;\n\n\t\t// Generate convert lot Id\n\t\tbytes32 convertLotId = keccak256(abi.encodePacked(this, _account, totalConvertLots));\n\n\t\t// Make sure no one owns this lot yet\n\t\trequire (convertLots[convertLotId].lotOwner == address(0));\n\n\t\tConvertLot storage convertLot = convertLots[convertLotId];\n\t\tconvertLot.convertLotId = convertLotId;\n\t\tconvertLot.lotOwner = _account;\n\t\tconvertLot.amount = _amount;\n\t\townedConvertLots[_account].push(convertLotId);\n\t\temit ConvertLotCreation(convertLot.lotOwner, convertLot.convertLotId, convertLot.amount, _multiplierAfterConversion);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Return all Convert Lot IDs owned by an address\n\t * @param _lotOwner The address of the convert lot owner\n\t * @return array of Convert Lot IDs\n\t */\n\tfunction convertLotIdsByAddress(address _lotOwner) public view returns (bytes32[] memory) {\n\t\treturn ownedConvertLots[_lotOwner];\n\t}\n\n\t/**\n\t * @dev Return the total convert lots owned by an address\n\t * @param _lotOwner The address of the convert lot owner\n\t * @return total convert lots owner by the address\n\t */\n\tfunction totalConvertLotsByAddress(address _lotOwner) public view returns (uint256) {\n\t\treturn ownedConvertLots[_lotOwner].length;\n\t}\n\n\t/**\n\t * @dev Return the convert lot information at a given ID\n\t * @param _convertLotId The convert lot ID in question\n\t * @return id of the lot\n\t * @return The address of the convert lot owner\n\t * @return Primordial ion amount in the convert lot\n\t */\n\tfunction convertLotById(bytes32 _convertLotId) public view returns (bytes32, address, uint256) {\n\t\tConvertLot memory _convertLot = convertLots[_convertLotId];\n\t\treturn (_convertLot.convertLotId, _convertLot.lotOwner, _convertLot.amount);\n\t}\n\n\t/***** INTERNAL METHOD *****/\n\t/**\n\t * @dev Actual creating a lot with `amount` of ions at `weightedMultiplier` for an `account`\n\t * @param _account Address of lot owner\n\t * @param _amount The amount of ions\n\t * @param _weightedMultiplier The multiplier of the lot (in 10^6)\n\t * @param _networkBonusAmount The network ion bonus amount\n\t * @return bytes32 of new created lot ID\n\t */\n\tfunction _createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier, uint256 _networkBonusAmount) internal returns (bytes32) {\n\t\ttotalLots++;\n\n\t\t// Generate lotId\n\t\tbytes32 lotId = keccak256(abi.encodePacked(address(this), _account, totalLots));\n\n\t\t// Make sure no one owns this lot yet\n\t\trequire (lots[lotId].lotOwner == address(0));\n\n\t\tLot storage lot = lots[lotId];\n\t\tlot.lotId = lotId;\n\t\tlot.multiplier = _weightedMultiplier;\n\t\tlot.lotOwner = _account;\n\t\tlot.amount = _amount;\n\t\townedLots[_account].push(lotId);\n\n\t\temit LotCreation(lot.lotOwner, lot.lotId, lot.multiplier, lot.amount, _networkBonusAmount);\n\t\treturn lotId;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_lotId\",\"type\":\"bytes32\"}],\"name\":\"lotById\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"lotIdsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_weightedMultiplier\",\"type\":\"uint256\"}],\"name\":\"createWeightedMultiplierLot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalConvertLots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_multiplierAfterBurn\",\"type\":\"uint256\"}],\"name\":\"createBurnLot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"totalBurnLotsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_burnLotId\",\"type\":\"bytes32\"}],\"name\":\"burnLotById\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoIonAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurnLots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_multiplierAfterConversion\",\"type\":\"uint256\"}],\"name\":\"createConvertLot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"lotOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"burnLotIdsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_convertLotId\",\"type\":\"bytes32\"}],\"name\":\"convertLotById\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"totalConvertLotsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"name\":\"_networkBonusAmount\",\"type\":\"uint256\"}],\"name\":\"createPrimordialLot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"convertLotIdsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lotOwner\",\"type\":\"address\"}],\"name\":\"totalLotsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoIonAddress\",\"type\":\"address\"}],\"name\":\"setAOIonAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_aoIonAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lotId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"primordialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"networkBonusAmount\",\"type\":\"uint256\"}],\"name\":\"LotCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"burnLotId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"multiplierAfterBurn\",\"type\":\"uint256\"}],\"name\":\"BurnLotCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"convertLotId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"convertAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"multiplierAfterConversion\",\"type\":\"uint256\"}],\"name\":\"ConvertLotCreation\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062001466833981018060405260408110156200003357600080fd5b50805160209091015160008054600160a060020a0319163317905562000062826401000000006200007e810204565b620000768164010000000062000179810204565b505062000274565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200010757600080fd5b505af41580156200011c573d6000803e3d6000fd5b505050506040513d60208110156200013357600080fd5b505115156200014157600080fd5b600160a060020a03811615156200015757600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200020257600080fd5b505af415801562000217573d6000803e3d6000fd5b505050506040513d60208110156200022e57600080fd5b505115156200023c57600080fd5b600160a060020a03811615156200025257600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b6111e280620002846000396000f3fe608060405234801561001057600080fd5b5060043610610190576000357c01000000000000000000000000000000000000000000000000000000009004806353d6fd59116100fb578063af339ee4116100b4578063f2fde38b1161008e578063f2fde38b14610510578063f39cce0114610536578063f5bd48c41461055c578063f97106b51461058257610190565b8063af339ee414610495578063d58e1758146104b2578063d9c93ccd146104d857610190565b806353d6fd59146103bf57806354f7dd8c146103ef5780635cfaf2ef1461041b5780637056d1f4146104415780639b19251a14610467578063a9b6b38e1461048d57610190565b8063360f277b1161014d578063360f277b1461030e5780633be92863146103165780633c56b0111461035957806341682d971461037d578063424cfd21146103855780634ef033f0146103b757610190565b8063080e74f714610195578063178a8f34146101e057806328948e5b146102565780632ffeef771461029a57806330a331d1146102a2578063324b8ad2146102e8575b600080fd5b6101b2600480360360208110156101ab57600080fd5b50356105a8565b60408051948552600160a060020a039093166020850152838301919091526060830152519081900360800190f35b610206600480360360208110156101f657600080fd5b5035600160a060020a031661060b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561024257818101518382015260200161022a565b505050509050019250505060405180910390f35b6102886004803603606081101561026c57600080fd5b50600160a060020a038135169060208101359060400135610677565b60408051918252519081900360200190f35b6102886106c8565b6102d4600480360360608110156102b857600080fd5b50600160a060020a0381351690602081013590604001356106ce565b604080519115158252519081900360200190f35b610288600480360360208110156102fe57600080fd5b5035600160a060020a031661081c565b610288610837565b6103336004803603602081101561032c57600080fd5b503561083d565b60408051938452600160a060020a03909216602084015282820152519081900360600190f35b610361610892565b60408051600160a060020a039092168252519081900360200190f35b6102886108a1565b6102d46004803603606081101561039b57600080fd5b50600160a060020a0381351690602081013590604001356108a7565b6103616109f5565b6103ed600480360360408110156103d557600080fd5b50600160a060020a0381351690602001351515610a04565b005b6101b26004803603604081101561040557600080fd5b50600160a060020a038135169060200135610aed565b6103ed6004803603602081101561043157600080fd5b5035600160a060020a0316610bb3565b6102066004803603602081101561045757600080fd5b5035600160a060020a0316610ca0565b6102d46004803603602081101561047d57600080fd5b5035600160a060020a0316610d0a565b610361610d1f565b610333600480360360208110156104ab57600080fd5b5035610d2e565b610288600480360360208110156104c857600080fd5b5035600160a060020a0316610d83565b610288600480360360808110156104ee57600080fd5b50600160a060020a038135169060208101359060408101359060600135610d9e565b6103ed6004803603602081101561052657600080fd5b5035600160a060020a0316610dcd565b6102066004803603602081101561054c57600080fd5b5035600160a060020a0316610eba565b6102886004803603602081101561057257600080fd5b5035600160a060020a0316610f24565b6103ed6004803603602081101561059857600080fd5b5035600160a060020a0316610f3f565b6000806000806105b661116f565b50505060009283525050600760209081526040918290208251608081018452815480825260018301549382018490526002830154600160a060020a031694820185905260039092015460609091018190529093565b600160a060020a0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561066b57602002820191906000526020600020905b815481526020019060010190808311610657575b50505050509050919050565b600354600090600160a060020a0316331461069157600080fd5b600160a060020a03841615156106a657600080fd5b600083116106b357600080fd5b6106c0848484600061102c565b949350505050565b60065481565b600354600090600160a060020a031633146106e857600080fd5b60058054600190810191829055604080516c01000000000000000000000000308102602080840191909152600160a060020a03808b169092026034840152604880840196909652835180840390960186526068909201835284519482019490942060008181526008909252919020909101549091161561076757600080fd5b60008181526008602090815260408083208481556001808201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038c81169182178355600285018c8155918852600b87528588208054948501815588529686902090920187905582549054915484519081529485018990528351929590949116927f6c5992d9f99885465942ae05b2bcc358a509184bb262ec9bfe242ccdc42d1a0392918290030190a350600195945050505050565b600160a060020a03166000908152600b602052604090205490565b60045481565b600080600061084a611196565b50505060009182525060086020908152604091829020825160608101845281548082526001830154600160a060020a0316938201849052600290920154930183905292909190565b600354600160a060020a031681565b60055481565b600354600090600160a060020a031633146108c157600080fd5b60068054600190810191829055604080516c01000000000000000000000000308102602080840191909152600160a060020a03808b169092026034840152604880840196909652835180840390960186526068909201835284519482019490942060008181526009909252919020909101549091161561094057600080fd5b60008181526009602090815260408083208481556001808201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038c81169182178355600285018c8155918852600c87528588208054948501815588529686902090920187905582549054915484519081529485018990528351929590949116927f24f057e925d9fc5c8b912d57da9cf8bbcf393fa8c87db8005d378fe9f828e7ba92918290030190a350600195945050505050565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610a7657600080fd5b505af4158015610a8a573d6000803e3d6000fd5b505050506040513d6020811015610aa057600080fd5b50511515610aad57600080fd5b600160a060020a0382161515610ac257600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b600160a060020a0382166000908152600a60205260408120548190819081908510610b1757600080fd5b610b1f61116f565b600160a060020a0387166000908152600a602052604081208054600792919089908110610b4857fe5b600091825260208083209190910154835282810193909352604091820190208151608081018352815480825260018301549482018590526002830154600160a060020a03169382018490526003909201546060909101819052909a9199509197509095509350505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610c2557600080fd5b505af4158015610c39573d6000803e3d6000fd5b505050506040513d6020811015610c4f57600080fd5b50511515610c5c57600080fd5b600160a060020a0381161515610c7157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561066b57602002820191906000526020600020908154815260200190600101908083116106575750505050509050919050565b60026020526000908152604090205460ff1681565b600054600160a060020a031681565b6000806000610d3b611196565b50505060009182525060096020908152604091829020825160608101845281548082526001830154600160a060020a0316938201849052600290920154930183905292909190565b600160a060020a03166000908152600c602052604090205490565b600354600090600160a060020a03163314610db857600080fd5b610dc48585858561102c565b95945050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610e3f57600080fd5b505af4158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b50511515610e7657600080fd5b600160a060020a0381161515610e8b57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561066b57602002820191906000526020600020908154815260200190600101908083116106575750505050509050919050565b600160a060020a03166000908152600a602052604090205490565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610fb157600080fd5b505af4158015610fc5573d6000803e3d6000fd5b505050506040513d6020811015610fdb57600080fd5b50511515610fe857600080fd5b600160a060020a0381161515610ffd57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6004805460010190819055604080516c01000000000000000000000000308102602080840191909152600160a060020a03808a16909202603484015260488084019590955283518084039095018552606890920183528351938201939093206000818152600790925291812060020154909216156110a957600080fd5b60008181526007602090815260408083208481556001808201898155600283018054600160a060020a03808f1673ffffffffffffffffffffffffffffffffffffffff1990921682178355600386018e8155918952600a88528689208054958601815589529787902090930188905583549054915492548551938452958301959095528184018990529251919492909216917f20dcffcce6f33b394371fed8876a2562e3110ed8dbdc448b593a2680c7330a03919081900360600190a35095945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60408051606081018252600080825260208201819052918101919091529056fea165627a7a723058209e64599844106d6bd7921c8e8526fa78c9fbfc2005c3b5b797b3875b0754f41800290000000000000000000000007fea965a502f3f17851a57bcc57e95e03d83e98a0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "constructorArguments": "0000000000000000000000007fea965a502f3f17851a57bcc57e95e03d83e98a0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}