{
  "address": "0x5f7198931366b35c362518f440ebcbabd7419dbd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoinCrowdReservedContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-24\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n     return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract tokenInterface {\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n\tstring public symbols;\n\tfunction originBurn(uint256 _value) public returns(bool);\n}\ncontract TokedoDaicoInterface {\n    function sendTokens(address _buyer, uint256 _amount) public returns(bool);\n    address public owner;\n}\n\ncontract AtomaxKyc {\n    using SafeMath for uint256;\n\n    mapping (address => bool) public isKycSigner;\n    mapping (bytes32 => uint256) public alreadyPayed;\n\n    event KycVerified(address indexed signer, address buyerAddress, bytes32 buyerId, uint maxAmount);\n\n    constructor() internal {\n        isKycSigner[0x9787295cdAb28b6640bc7e7db52b447B56b1b1f0] = true; //ATOMAX KYC 1 SIGNER\n        isKycSigner[0x3b3f379e49cD95937121567EE696dB6657861FB0] = true; //ATOMAX KYC 2 SIGNER\n    }\n\n    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n    function releaseTokensTo(address buyer) internal returns(bool);\n    \n    function buyTokens(bytes32 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s) public payable returns (bool) {\n        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n    }\n\n    function buyImplementation(address _buyerAddress, bytes32 _buyerId, uint256 _maxAmount, uint8 _v, bytes32 _r, bytes32 _s) private returns (bool) {\n        // check the signature\n        bytes32 hash = hasher ( _buyerAddress,  _buyerId,  _maxAmount );\n        address signer = ecrecover(hash, _v, _r, _s);\n\t\t\n\t\trequire( isKycSigner[signer], \"isKycSigner[signer]\");\n        \n\t\tuint256 totalPayed = alreadyPayed[_buyerId].add(msg.value);\n\t\trequire(totalPayed <= _maxAmount);\n\t\talreadyPayed[_buyerId] = totalPayed;\n\t\t\n\t\temit KycVerified(signer, _buyerAddress, _buyerId, _maxAmount);\n\t\treturn releaseTokensTo(_buyerAddress);\n\n    }\n    \n    function hasher (address _buyerAddress, bytes32 _buyerId, uint256 _maxAmount) public view returns ( bytes32 hash ) {\n        hash = keccak256(abi.encodePacked(\"Atomax authorization:\", this, _buyerAddress, _buyerId, _maxAmount));\n    }\n}\n\ncontract CoinCrowdReservedContract is AtomaxKyc {\n    using SafeMath for uint256;\n    \n    tokenInterface public xcc;\n    TokedoDaicoInterface public tokenSaleContract;\n    \n    mapping (address => uint256) public tkd_amount;\n    \n    constructor(address _xcc, address _tokenSaleAddress) public {\n        xcc = tokenInterface(_xcc);\n        tokenSaleContract = TokedoDaicoInterface(_tokenSaleAddress);\n    } \n\n    function releaseTokensTo(address _buyer) internal returns(bool) {\n        require ( msg.sender == tx.origin, \"msg.sender == tx.orgin\" );\n\t\t\n\t\tuint256 xcc_amount = xcc.balanceOf(msg.sender);\n\t\trequire( xcc_amount > 0, \"xcc_amount > 0\" );\n\t\t\n\t\txcc.originBurn(xcc_amount);\n\t\ttokenSaleContract.sendTokens(_buyer, xcc_amount);\n\t\t\n\t\tif ( msg.value > 0 ) msg.sender.transfer(msg.value);\n\t\t\n        return true;\n    }\n    \n    modifier onlyTokenSaleOwner() {\n        require(msg.sender == tokenSaleContract.owner() );\n        _;\n    }\n    \n    function withdrawTokens(address tknAddr, address to, uint256 value) public onlyTokenSaleOwner returns (bool) { //emergency function\n        return tokenInterface(tknAddr).transfer(to, value);\n    }\n    \n    function withdraw(address to, uint256 value) public onlyTokenSaleOwner { //emergency function\n        to.transfer(value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610ad38339810160405280516020918201516000928390527fb8872af7a9622bc85c96c0f77f327eeb6eff80958276742d0a852932b259f282805460ff199081166001908117909255733b3f379e49cd95937121567ee696db6657861fb09094527f5a7d870fd0511c2456864d8605d9d9d8e770a9ed96ae46e5e00ae538b20c501c80549094161790925560028054600160a060020a03928316600160a060020a031991821617909155600380549290931691161790556109f6806100dd6000396000f30060806040526004361061007f5763ffffffff60e060020a6000350416630570d56881146100845780635023b6a7146100b95780635983ae4e146100e35780635d5aa2771461010a5780635e35359e1461013b5780636348257c14610165578063c072422d14610186578063d84bd737146101a0578063f3fef3a3146101b5575b600080fd5b34801561009057600080fd5b506100a5600160a060020a03600435166101db565b604080519115158252519081900360200190f35b3480156100c557600080fd5b506100d16004356101f0565b60408051918252519081900360200190f35b3480156100ef57600080fd5b506100d1600160a060020a0360043516602435604435610202565b34801561011657600080fd5b5061011f6102db565b60408051600160a060020a039092168252519081900360200190f35b34801561014757600080fd5b506100a5600160a060020a03600435811690602435166044356102ea565b34801561017157600080fd5b506100d1600160a060020a0360043516610420565b6100a560043560243560ff60443516606435608435610432565b3480156101ac57600080fd5b5061011f61044c565b3480156101c157600080fd5b506101d9600160a060020a036004351660243561045b565b005b60006020819052908152604090205460ff1681565b60016020526000908152604090205481565b604080517f41746f6d617820617574686f72697a6174696f6e3a00000000000000000000006020808301919091526c010000000000000000000000003081026035840152600160a060020a038716026049830152605d8201859052607d80830185905283518084039091018152609d909201928390528151600093918291908401908083835b602083106102a75780518252601f199092019160209182019101610288565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b600354600160a060020a031681565b600354604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638da5cb5b91600480830192602092919082900301818787803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050506040513d602081101561037357600080fd5b5051600160a060020a0316331461038957600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b5051949350505050565b60046020526000908152604090205481565b6000610442338787878787610529565b9695505050505050565b600254600160a060020a031681565b600360009054906101000a9004600160a060020a0316600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050506040513d60208110156104d857600080fd5b5051600160a060020a031633146104ee57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610524573d6000803e3d6000fd5b505050565b60008060008061053a8a8a8a610202565b604080516000808252602080830180855285905260ff8c1683850152606083018b9052608083018a9052925193965060019360a08084019493601f19830193908390039091019190865af1158015610596573d6000803e3d6000fd5b505060408051601f190151600160a060020a03811660009081526020819052919091205490935060ff161515905061062f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f69734b79635369676e65725b7369676e65725d00000000000000000000000000604482015290519081900360640190fd5b60008981526001602052604090205461064e903463ffffffff6106d516565b90508781111561065d57600080fd5b6000898152600160209081526040918290208390558151600160a060020a038d811682529181018c90528083018b90529151908416917faa8045c83ac4ee300a0e08a82a65d0a5a85baa7f13ed145c966d603233129215919081900360600190a26106c78a6106e8565b9a9950505050505050505050565b818101828110156106e257fe5b92915050565b60008033321461075957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6d73672e73656e646572203d3d2074782e6f7267696e00000000000000000000604482015290519081900360640190fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156107bf57600080fd5b505af11580156107d3573d6000803e3d6000fd5b505050506040513d60208110156107e957600080fd5b505190506000811161085c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7863635f616d6f756e74203e2030000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f55684aa6000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a03909216916355684aa6916024808201926020929091908290030181600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506040513d60208110156108ed57600080fd5b5050600354604080517f05ab421d000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201859052915191909216916305ab421d9160448083019260209291908290030181600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050506040513d602081101561098857600080fd5b505060003411156109c15760405133903480156108fc02916000818181858888f193505050501580156109bf573d6000803e3d6000fd5b505b506001929150505600a165627a7a7230582052a376f0b4feb7f7453edae5536660199d6c9e2fe696424185cb2f2c0207a3d200290000000000000000000000004d829f8c92a6691c56300d020c9e0db984cfe2ba0000000000000000000000008b850e007736b24f7a81ad776d3e7e0a5c6df4d7",
  "constructorArguments": "0000000000000000000000004d829f8c92a6691c56300d020c9e0db984cfe2ba0000000000000000000000008b850e007736b24f7a81ad776d3e7e0a5c6df4d7"
}