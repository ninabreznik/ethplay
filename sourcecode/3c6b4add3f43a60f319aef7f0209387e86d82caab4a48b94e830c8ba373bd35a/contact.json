{
  "address": "0x62632f870244ad9a9f74978489aafee0a859fdca",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MarmoStork",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-02\n*/\n\npragma solidity ^0.5.7;\n\n\nlibrary SigUtils {\n    /**\n      @dev Recovers address who signed the message \n      @param _hash operation ethereum signed message hash\n      @param _signature message `hash` signature  \n    */\n    function ecrecover2 (\n        bytes32 _hash, \n        bytes memory _signature\n    ) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := and(mload(add(_signature, 65)), 255)\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        return ecrecover(\n            _hash,\n            v,\n            r,\n            s\n        );\n    }\n}\n\n// File: contracts/Marmo.sol\n\npragma solidity ^0.5.7;\n\n\n/*\n    Marmo wallet\n\n    It has a signer, and it accepts signed messages ´Intents´ (Meta-Txs)\n    all messages are composed by an interpreter and a ´data´ field.\n*/\ncontract Marmo {\n    event Relayed(bytes32 indexed _id, address _implementation, bytes _data);\n    event Canceled(bytes32 indexed _id);\n\n    // Random Invalid signer address\n    // Intents signed with this address are invalid\n    address private constant INVALID_ADDRESS = address(0x9431Bab00000000000000000000000039bD955c9);\n\n    // Random slot to store signer\n    bytes32 private constant SIGNER_SLOT = keccak256(\"marmo.wallet.signer\");\n\n    // [1 bit (canceled) 95 bits (block) 160 bits (relayer)]\n    mapping(bytes32 => bytes32) private intentReceipt;\n\n    function() external payable {}\n\n    // Inits the wallet, any address can Init\n    // it should be called using another contract\n    function init(address _signer) external payable {\n        address signer;\n        bytes32 signerSlot = SIGNER_SLOT;\n        assembly { signer := sload(signerSlot) }\n        require(signer == address(0), \"Signer already defined\");\n        assembly { sstore(signerSlot, _signer) }\n    }\n\n    // Signer of the Marmo wallet\n    // can perform transactions by signing Intents\n    function signer() public view returns (address _signer) {\n        bytes32 signerSlot = SIGNER_SLOT;\n        assembly { _signer := sload(signerSlot) }\n    } \n\n    // Address that relayed the `_id` intent\n    // address(0) if the intent was not relayed\n    function relayedBy(bytes32 _id) external view returns (address _relayer) {\n        (,,_relayer) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // Block when the intent was relayed\n    // 0 if the intent was not relayed\n    function relayedAt(bytes32 _id) external view returns (uint256 _block) {\n        (,_block,) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // True if the intent was canceled\n    // An executed intent can't be canceled and\n    // a Canceled intent can't be executed\n    function isCanceled(bytes32 _id) external view returns (bool _canceled) {\n        (_canceled,,) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // Relay a signed intent\n    //\n    // The implementation receives data containing the id of the 'intent' and its data,\n    // and it will perform all subsequent calls.\n    //\n    // The same _implementation and _data combination can only be relayed once\n    //\n    // Returns the result of the 'delegatecall' execution\n    function relay(\n        address _implementation,\n        bytes calldata _data,\n        bytes calldata _signature\n    ) external payable returns (\n        bytes memory result\n    ) {\n        // Calculate ID from\n        // (this, _implementation, data)\n        // Any change in _data results in a different ID\n        bytes32 id = keccak256(\n            abi.encodePacked(\n                address(this),\n                _implementation,\n                keccak256(_data)\n            )\n        );\n\n        // Read receipt only once\n        // if the receipt is 0, the Intent was not canceled or relayed\n        if (intentReceipt[id] != bytes32(0)) {\n            // Decode the receipt and determine if the Intent was canceled or relayed\n            (bool canceled, , address relayer) = _decodeReceipt(intentReceipt[id]);\n            require(relayer == address(0), \"Intent already relayed\");\n            require(!canceled, \"Intent was canceled\");\n            revert(\"Unknown error\");\n        }\n\n        // Read the signer from storage, avoid multiples 'sload' ops\n        address _signer = signer();\n\n        // The signer 'INVALID_ADDRESS' is considered invalid and it will always throw\n        // this is meant to disable the wallet safely\n        require(_signer != INVALID_ADDRESS, \"Signer is not a valid address\");\n\n        // Validate if the msg.sender is the signer or if the provided signature is valid\n        require(_signer == msg.sender || _signer == SigUtils.ecrecover2(id, _signature), \"Invalid signature\");\n\n        // Save the receipt before performing any other action\n        intentReceipt[id] = _encodeReceipt(false, block.number, msg.sender);\n\n        // Emit the 'relayed' event\n        emit Relayed(id, _implementation, _data);\n\n        // Perform 'delegatecall' to _implementation, appending the id of the intent\n        // to the beginning of the _data.\n\n        bool success;\n        (success, result) = _implementation.delegatecall(abi.encode(id, _data));\n\n        // If the 'delegatecall' failed, reverts the transaction\n        // forwarding the revert message\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    // Cancels a not executed Intent '_id'\n    // a canceled intent can't be executed\n    function cancel(bytes32 _id) external {\n        require(msg.sender == address(this), \"Only wallet can cancel txs\");\n\n        if (intentReceipt[_id] != bytes32(0)) {\n            (bool canceled, , address relayer) = _decodeReceipt(intentReceipt[_id]);\n            require(relayer == address(0), \"Intent already relayed\");\n            require(!canceled, \"Intent was canceled\");\n            revert(\"Unknown error\");\n        }\n\n        emit Canceled(_id);\n        intentReceipt[_id] = _encodeReceipt(true, 0, address(0));\n    }\n\n    // Encodes an Intent receipt\n    // into a single bytes32\n    // canceled (1 bit) + block (95 bits) + relayer (160 bits)\n    // notice: Does not validate the _block length,\n    // a _block overflow would not corrupt the wallet state\n    function _encodeReceipt(\n        bool _canceled,\n        uint256 _block,\n        address _relayer\n    ) internal pure returns (bytes32 _receipt) {\n        assembly {\n            _receipt := or(shl(255, _canceled), or(shl(160, _block), _relayer))\n        }\n    }\n    \n    // Decodes an Intent receipt\n    // reverse of _encodeReceipt(bool,uint256,address)\n    function _decodeReceipt(bytes32 _receipt) internal pure returns (\n        bool _canceled,\n        uint256 _block,\n        address _relayer\n    ) {\n        assembly {\n            _canceled := shr(255, _receipt)\n            _block := and(shr(160, _receipt), 0x7fffffffffffffffffffffff)\n            _relayer := and(_receipt, 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    // Used to receive ERC721 tokens\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return bytes4(0x150b7a02);\n    }\n}\n\n// File: contracts/commons/Bytes.sol\n\npragma solidity ^0.5.7;\n\n\n// Bytes library to concat and transform\n// bytes arrays\nlibrary Bytes {\n    // Concadenates two bytes array\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_preBytes, _postBytes);\n    }\n\n    // Concatenates a bytes array and a bytes1\n    function concat(bytes memory _a, bytes1 _b) internal pure returns (bytes memory _out) {\n        return concat(_a, abi.encodePacked(_b));\n    }\n\n    // Concatenates 6 bytes arrays\n    function concat(\n        bytes memory _a,\n        bytes memory _b,\n        bytes memory _c,\n        bytes memory _d,\n        bytes memory _e,\n        bytes memory _f\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            _a,\n            _b,\n            _c,\n            _d,\n            _e,\n            _f\n        );\n    }\n\n    // Transforms a bytes1 into bytes\n    function toBytes(bytes1 _a) internal pure returns (bytes memory) {\n        return abi.encodePacked(_a);\n    }\n\n    // Transform a uint256 into bytes (last 8 bits)\n    function toBytes1(uint256 _a) internal pure returns (bytes1 c) {\n        assembly { c := shl(248, _a) }\n    }\n\n    // Adds a bytes1 and the last 8 bits of a uint256\n    function plus(bytes1 _a, uint256 _b) internal pure returns (bytes1 c) {\n        c = toBytes1(_b);\n        assembly { c := add(_a, c) }\n    }\n\n    // Transforms a bytes into an array\n    // it fails if _a has more than 20 bytes\n    function toAddress(bytes memory _a) internal pure returns (address payable b) {\n        require(_a.length <= 20);\n        assembly {\n            b := shr(mul(sub(32, mload(_a)), 8), mload(add(_a, 32)))\n        }\n    }\n\n    // Returns the most significant bit of a given uint256\n    function mostSignificantBit(uint256 x) internal pure returns (uint256) {        \n        uint8 o = 0;\n        uint8 h = 255;\n        \n        while (h > o) {\n            uint8 m = uint8 ((uint16 (o) + uint16 (h)) >> 1);\n            uint256 t = x >> m;\n            if (t == 0) h = m - 1;\n            else if (t > 1) o = m + 1;\n            else return m;\n        }\n        \n        return h;\n    }\n\n    // Shrinks a given address to the minimal representation in a bytes array\n    function shrink(address _a) internal pure returns (bytes memory b) {\n        uint256 abits = mostSignificantBit(uint256(_a)) + 1;\n        uint256 abytes = abits / 8 + (abits % 8 == 0 ? 0 : 1);\n\n        assembly {\n            b := 0x0\n            mstore(0x0, abytes)\n            mstore(0x20, shl(mul(sub(32, abytes), 8), _a))\n        }\n    }\n}\n\n// File: contracts/commons/MinimalProxy.sol\n\npragma solidity ^0.5.7;\n\n\n\nlibrary MinimalProxy {\n    using Bytes for bytes1;\n    using Bytes for bytes;\n\n    // Minimal proxy contract\n    // by Agusx1211\n    bytes constant CODE1 = hex\"60\"; // + <size>                                   // Copy code to memory\n    bytes constant CODE2 = hex\"80600b6000396000f3\";                               // Return and deploy contract\n    bytes constant CODE3 = hex\"3660008037600080366000\";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall\n    bytes constant CODE4 = hex\"5af43d6000803e60003d9160\"; // + <return jump>      // Do delegatecall and return jump\n    bytes constant CODE5 = hex\"57fd5bf3\";                                         // Return proxy\n\n    bytes1 constant BASE_SIZE = 0x1d;\n    bytes1 constant PUSH_1 = 0x60;\n    bytes1 constant BASE_RETURN_JUMP = 0x1b;\n\n    // Returns the Init code to create a\n    // Minimal proxy pointing to a given address\n    function build(address _address) internal pure returns (bytes memory initCode) {\n        return build(Bytes.shrink(_address));\n    }\n\n    function build(bytes memory _address) private pure returns (bytes memory initCode) {\n        require(_address.length <= 20, \"Address too long\");\n        initCode = Bytes.concat(\n            CODE1,\n            BASE_SIZE.plus(_address.length).toBytes(),\n            CODE2,\n            CODE3.concat(PUSH_1.plus(_address.length - 1)).concat(_address),\n            CODE4.concat(BASE_RETURN_JUMP.plus(_address.length)),\n            CODE5\n        );\n    }\n}\n\n// File: contracts/MarmoStork.sol\n\npragma solidity ^0.5.7;\n\n\n\n\n// MarmoStork creates all Marmo wallets\n// every address has a designated marmo wallet\n// and can send transactions by signing Meta-Tx (Intents)\n//\n// All wallets are proxies pointing to a single\n// source contract, to make deployment costs viable\ncontract MarmoStork {\n    // Random Invalid signer address\n    // Intents signed with this address are invalid\n    address private constant INVALID_ADDRESS = address(0x9431Bab00000000000000000000000039bD955c9);\n\n    // Prefix of create2 address formula (EIP-1014)\n    bytes1 private constant CREATE2_PREFIX = byte(0xff);\n\n    // Bytecode to deploy marmo wallets\n    bytes public bytecode;\n\n    // Hash of the bytecode\n    // used to calculate create2 result\n    bytes32 public hash;\n\n    // Marmo Source contract\n    // all proxies point here\n    address public marmo;\n\n    // Creates a new MarmoStork (Marmo wallet Factory)\n    // with wallets pointing to the _source contract reference\n    constructor(address payable _source) public {\n        // Generate and save wallet creator bytecode using the provided '_source'\n        bytecode = MinimalProxy.build(_source);\n\n        // Precalculate init_code hash\n        hash = keccak256(bytecode);\n        \n        // Destroy the '_source' provided, if is not disabled\n        Marmo marmoc = Marmo(_source);\n        if (marmoc.signer() == address(0)) {\n            marmoc.init(INVALID_ADDRESS);\n        }\n\n        // Validate, the signer of _source should be \"INVALID_ADDRESS\" (disabled)\n        require(marmoc.signer() == INVALID_ADDRESS, \"Error init Marmo source\");\n\n        // Save the _source address, casting to address (160 bits)\n        marmo = address(marmoc);\n    }\n    \n    // Calculates the Marmo wallet for a given signer\n    // the wallet contract will be deployed in a deterministic manner\n    function marmoOf(address _signer) external view returns (address) {\n        // CREATE2 address\n        return address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        CREATE2_PREFIX,\n                        address(this),\n                        bytes32(uint256(_signer)),\n                        hash\n                    )\n                )\n            )\n        );\n    }\n\n    // Deploys the Marmo wallet of a given _signer\n    // all ETH sent will be forwarded to the wallet\n    function reveal(address _signer) external payable {\n        // Load init code from storage\n        bytes memory proxyCode = bytecode;\n\n        // Create wallet proxy using CREATE2\n        // use _signer as salt\n        Marmo p;\n        assembly {\n            p := create2(0, add(proxyCode, 0x20), mload(proxyCode), _signer)\n        }\n\n        // Init wallet with provided _signer\n        // and forward all Ether\n        p.init.value(msg.value)(_signer);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"marmo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"marmoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bytecode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000045ef846ac1cb7fa62ca926d5701512"
}