{
  "address": "0x0de059aa5dd17427b58145782143c4e3d2dda6ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CodeToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-09\n*/\n\npragma solidity 0.4.24;\n\n/**\n * SafeMath\n * */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n   \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n       \n        uint256 c = a / b;\n       \n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n *ERC20Basic\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n ERC20 interface\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * Basic token\n *\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 public totalSupply_;\n\n  \n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n  \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(msg.data.length>=(2*32)+4);\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer (msg.sender, _to, _value);\n        return true;\n    }\n\n   \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n Standard ERC20 token\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n   \n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_value==0||allowed[msg.sender][_spender]==0);\n        require(msg.data.length>=(2*32)+4);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    \n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n  \n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n   \n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract CodeToken is StandardToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public precentDecimal=2;\n    \n    // miner and developer percent\n    uint256 public minerAndDeveloperPercent=70;\n    \n    //open dao fund percent\n    uint256 public openDaoFundPercent=10;\n    \n    //codecoin core team percent\n    uint256 public codeCoinCoreTeamPercent=10;\n    \n    //cloudmine precent\n    uint256 public mineralcloudFundPercent=10;\n     \n    \n    // miner and developer Account\n    address public minerAndDeveloperFundAccount;\n    \n    //open dao fund Account\n    address public openDaoFundAccount;\n    \n    //codecoin core team Account\n    address public codeCoinCoreTeamAccount;\n    \n    //cloudmine Account\n    address public mineralcloudFundAccount;\n    \n    \n    // miner and developer fund Balnace\n    uint256 public minerAndDeveloperFundBalnace;\n    \n    //open dao fund Balnace\n    uint256 public openDaoFundBalnace;\n    \n    //codecoin core team Balnace\n    uint256 public codeCoinCoreTeamBalnace;\n    \n    //cloudmine Balnace\n    uint256 public mineralcloudFundBalnace;\n\n\n    //codeToken constructor\n    constructor(string _name,string _symbol, uint8 _decimals, uint256 _initialSupply,\n        address _minerAndDeveloperFundAccount,address _openDaoFundAccount,address _codeCoinCoreTeamAccount,address _mineralcloudFundAccount) public {\n        //init name,symbol,decimal,totalSupply\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _initialSupply*10**uint256(_decimals);\n        \n        //init account\n        minerAndDeveloperFundAccount=_minerAndDeveloperFundAccount;\n        openDaoFundAccount=_openDaoFundAccount;\n        codeCoinCoreTeamAccount=_codeCoinCoreTeamAccount;\n        mineralcloudFundAccount=_mineralcloudFundAccount;\n        \n\n        //compute balance\n        minerAndDeveloperFundBalnace=totalSupply_.mul(minerAndDeveloperPercent).div(10 ** precentDecimal);\n        openDaoFundBalnace=totalSupply_.mul(openDaoFundPercent).div(10 ** precentDecimal);\n        codeCoinCoreTeamBalnace=totalSupply_.mul(codeCoinCoreTeamPercent).div(10 ** precentDecimal);\n        mineralcloudFundBalnace=totalSupply_.mul(mineralcloudFundPercent).div(10 ** precentDecimal);\n    \n    \n        //evaluate balanace for account\n        balances[_minerAndDeveloperFundAccount]=minerAndDeveloperFundBalnace;\n        balances[_openDaoFundAccount]=openDaoFundBalnace;\n        balances[_codeCoinCoreTeamAccount]=codeCoinCoreTeamBalnace;\n        balances[_mineralcloudFundAccount]=mineralcloudFundBalnace;\n        \n    }\n    \n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n       return super.transfer(_to, _value);\n    } \n    \n   \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n     \n     function() public payable{\n         revert();\n     }\n}",
  "bytecode": "608060405260026006556046600755600a600855600a600955600a80553480156200002957600080fd5b5060405162000edc38038062000edc8339810160409081528151602080840151928401516060850151608086015160a087015160c088015160e08901519689018051909998909801979496939592949193909290916200009091600391908b019062000283565b508651620000a69060049060208a019062000283565b506005805460ff191660ff8816908117909155600a90810a86026001819055600b8054600160a060020a0319908116600160a060020a0389811691909117909255600c80548216888416179055600d80548216878416179055600e80549091169185169190911790556006546007546200014d939190910a91620001389164010000000062000231810262000b361704565b9064010000000062000b616200026b82021704565b600f556006546008546001546200017c92600a0a9162000138919064010000000062000b366200023182021704565b601055600654600954600154620001ab92600a0a9162000138919064010000000062000b366200023182021704565b601155600654600a8054600154620001da9390920a91620001389164010000000062000b366200023182021704565b6012908155600f54600160a060020a03958616600090815260208190526040808220929092556010549587168152818120959095556011549386168552808520939093555493168252902055506200032892505050565b60008083151562000246576000915062000264565b508282028284828115156200025757fe5b04146200026057fe5b8091505b5092915050565b60008082848115156200027a57fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c657805160ff1916838001178555620002f6565b82800160010185558215620002f6579182015b82811115620002f6578251825591602001919060010190620002d9565b506200030492915062000308565b5090565b6200032591905b808211156200030457600081556001016200030f565b90565b610ba480620003386000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302e32144811461014d57806306fdde0314610174578063095ea7b3146101fe57806318160ddd146102365780631f3e8d881461024b57806323b872dd1461027c57806323db3350146102a6578063313ce567146102bb578063324536eb146102e6578063539e92ab146102fb5780635cef6d6a14610310578063661884631461032557806369a5cffb1461034957806370a082311461035e578063732c92e21461037f57806395d89b4114610394578063a6286849146103a9578063a9059cbb146103be578063b4cceba5146103e2578063b794a204146103f7578063bf849e091461040c578063c0cf56c114610421578063d73dd62314610436578063dd62ed3e1461045a578063fd6e5caf14610481575b600080fd5b34801561015957600080fd5b50610162610496565b60408051918252519081900360200190f35b34801561018057600080fd5b5061018961049c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c35781810151838201526020016101ab565b50505050905090810190601f1680156101f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020a57600080fd5b50610222600160a060020a036004351660243561052a565b604080519115158252519081900360200190f35b34801561024257600080fd5b506101626105da565b34801561025757600080fd5b506102606105e0565b60408051600160a060020a039092168252519081900360200190f35b34801561028857600080fd5b50610222600160a060020a03600435811690602435166044356105ef565b3480156102b257600080fd5b50610260610604565b3480156102c757600080fd5b506102d0610613565b6040805160ff9092168252519081900360200190f35b3480156102f257600080fd5b5061016261061c565b34801561030757600080fd5b50610260610622565b34801561031c57600080fd5b50610162610631565b34801561033157600080fd5b50610222600160a060020a0360043516602435610637565b34801561035557600080fd5b50610162610729565b34801561036a57600080fd5b50610162600160a060020a036004351661072f565b34801561038b57600080fd5b5061026061074a565b3480156103a057600080fd5b50610189610759565b3480156103b557600080fd5b506101626107b4565b3480156103ca57600080fd5b50610222600160a060020a03600435166024356107ba565b3480156103ee57600080fd5b506101626107cd565b34801561040357600080fd5b506101626107d3565b34801561041857600080fd5b506101626107d9565b34801561042d57600080fd5b506101626107df565b34801561044257600080fd5b50610222600160a060020a03600435166024356107e5565b34801561046657600080fd5b50610162600160a060020a036004358116906024351661087e565b34801561048d57600080fd5b506101626108a9565b60065481565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b505050505081565b600081158061055a5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561056557600080fd5b604436101561057357600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015490565b600b54600160a060020a031681565b60006105fc8484846108af565b949350505050565b600e54600160a060020a031681565b60055460ff1681565b60015481565b600c54600160a060020a031681565b600f5481565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561068c57336000908152600260209081526040808320600160a060020a03881684529091528120556106c1565b61069c818463ffffffff610a2616565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b60075481565b600160a060020a031660009081526020819052604090205490565b600d54600160a060020a031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105225780601f106104f757610100808354040283529160200191610522565b60125481565b60006107c68383610a38565b9392505050565b60095481565b60085481565b60105481565b60115481565b336000908152600260209081526040808320600160a060020a0386168452909152812054610819908363ffffffff610b2716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600a5481565b6000600160a060020a03831615156108c657600080fd5b600160a060020a0384166000908152602081905260409020548211156108eb57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561091b57600080fd5b600160a060020a038416600090815260208190526040902054610944908363ffffffff610a2616565b600160a060020a038086166000908152602081905260408082209390935590851681522054610979908363ffffffff610b2716565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546109bb908363ffffffff610a2616565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610a3257fe5b50900390565b60006044361015610a4857600080fd5b600160a060020a0383161515610a5d57600080fd5b33600090815260208190526040902054821115610a7957600080fd5b33600090815260208190526040902054610a99908363ffffffff610a2616565b3360009081526020819052604080822092909255600160a060020a03851681522054610acb908363ffffffff610b2716565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000828201838110156107c657fe5b600080831515610b495760009150610722565b50828202828482811515610b5957fe5b04146107c657fe5b6000808284811515610b6f57fe5b049493505050505600a165627a7a72305820efed1eca25e516f7c71812cfe01a4e07787e98bcd2fea7beb75913554f1f52460029000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000007d2b75000000000000000000000000004e522e5c57637e8f4f0fa2dbe87153cd42d33c9500000000000000000000000099704ad8f3bd0bd56a132f07a6be234a6b352fab00000000000000000000000041fd3b620113c088dd5734665a7a2780601ce88b000000000000000000000000c84d44b83e0e203b5f814dd2c6da5c5745f7ba7f0000000000000000000000000000000000000000000000000000000000000008636f6465636f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434f444500000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000007d2b75000000000000000000000000004e522e5c57637e8f4f0fa2dbe87153cd42d33c9500000000000000000000000099704ad8f3bd0bd56a132f07a6be234a6b352fab00000000000000000000000041fd3b620113c088dd5734665a7a2780601ce88b000000000000000000000000c84d44b83e0e203b5f814dd2c6da5c5745f7ba7f0000000000000000000000000000000000000000000000000000000000000008636f6465636f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434f444500000000000000000000000000000000000000000000000000000000"
}