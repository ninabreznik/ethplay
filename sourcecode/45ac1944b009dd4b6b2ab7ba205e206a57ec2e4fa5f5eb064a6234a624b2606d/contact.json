{
  "address": "0x3fbd598a07702ced544ccc2c9fd3dae5b14c3d41",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ECHARGE",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-19\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\ncontract InvestorsFeature is Ownable, StandardToken {\n    using SafeMath for uint;\n    \n    address[] public investors;\n    mapping(address => bool) isInvestor;\n    function deposit(address investor, uint) internal {\n        if(isInvestor[investor] == false) {\n            investors.push(investor);\n            isInvestor[investor] = true;\n        }\n    }\n    \n    function sendp(address addr, uint amount) internal {\n        require(addr != address(0));\n        require(amount > 0);\n        deposit(addr, amount);\n        \n        // SafeMath.sub will throw if there is not enough balance.\n        balances[this] = balances[this].sub(amount);\n        balances[addr] = balances[addr].add(amount);\n        Transfer(this, addr, amount);\n    }\n    \n\n\n}\n\ncontract ECHARGE is Ownable, StandardToken, InvestorsFeature  {\n    \n\n  string public constant name = \"ECHARGE\";\n  string public constant symbol = \"ECHG\";\n  uint8 public constant decimals = 18;\n  \n  uint256 public constant INITIAL_SUPPLY = (2000 * (10**6)) * (10 ** uint256(decimals));\n  \n  \n  \n  function ECHARGE() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[this] = INITIAL_SUPPLY;\n    Transfer(address(0), this, INITIAL_SUPPLY);\n  }\n  \n\n  \n  function send(address addr, uint amount) public onlyOwner {\n      sendp(addr, amount);\n  }\n\n  function moneyBack(address addr) public onlyOwner {\n      require(addr != 0x0);\n      addr.transfer(this.balance);\n  }\n  \n  function burnRemainder(uint) public onlyOwner {\n      uint value = balances[this];\n      totalSupply = totalSupply.sub(value);\n      balances[this] = 0;\n  }\n \n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a039081169190911782556b06765c793fa10079d0000000600181905530909116808352600260205260408084208390559092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610cf7806100986000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c057806323b872dd146101e55780632ff2e9dc1461020d578063313ce567146102205780633feb5f2b14610249578063661884631461027b57806370a082311461029d5780638da5cb5b146102bc57806395d89b41146102cf578063a19c1f01146102e2578063a9059cbb146102fa578063d0679d341461031c578063d73dd6231461033e578063dd62ed3e14610360578063e0db874d14610385578063f2fde38b146103a4575b600080fd5b341561010b57600080fd5b6101136103c3565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a03600435166024356103fa565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d3610466565b60405190815260200160405180910390f35b34156101f057600080fd5b6101ac600160a060020a036004358116906024351660443561046c565b341561021857600080fd5b6101d36105ee565b341561022b57600080fd5b6102336105fe565b60405160ff909116815260200160405180910390f35b341561025457600080fd5b61025f600435610603565b604051600160a060020a03909116815260200160405180910390f35b341561028657600080fd5b6101ac600160a060020a036004351660243561062b565b34156102a857600080fd5b6101d3600160a060020a0360043516610725565b34156102c757600080fd5b61025f610740565b34156102da57600080fd5b61011361074f565b34156102ed57600080fd5b6102f8600435610786565b005b341561030557600080fd5b6101ac600160a060020a03600435166024356107ef565b341561032757600080fd5b6102f8600160a060020a03600435166024356108ea565b341561034957600080fd5b6101ac600160a060020a0360043516602435610913565b341561036b57600080fd5b6101d3600160a060020a03600435811690602435166109b7565b341561039057600080fd5b6102f8600160a060020a03600435166109e2565b34156103af57600080fd5b6102f8600160a060020a0360043516610a52565b60408051908101604052600781527f4543484152474500000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b6000600160a060020a038316151561048357600080fd5b600160a060020a0384166000908152600260205260409020548211156104a857600080fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220548211156104db57600080fd5b600160a060020a038416600090815260026020526040902054610504908363ffffffff610aed16565b600160a060020a038086166000908152600260205260408082209390935590851681522054610539908363ffffffff610aff16565b600160a060020a03808516600090815260026020908152604080832094909455878316825260038152838220339093168252919091522054610581908363ffffffff610aed16565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6b06765c793fa10079d000000081565b601281565b600480548290811061061157fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a0333811660009081526003602090815260408083209386168352929052908120548083111561068857600160a060020a0333811660009081526003602090815260408083209388168352929052908120556106bf565b610698818463ffffffff610aed16565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051908101604052600481527f4543484700000000000000000000000000000000000000000000000000000000602082015281565b6000805433600160a060020a039081169116146107a257600080fd5b50600160a060020a0330166000908152600260205260409020546001546107cf908263ffffffff610aed16565b6001555050600160a060020a033016600090815260026020526040812055565b6000600160a060020a038316151561080657600080fd5b600160a060020a03331660009081526002602052604090205482111561082b57600080fd5b600160a060020a033316600090815260026020526040902054610854908363ffffffff610aed16565b600160a060020a033381166000908152600260205260408082209390935590851681522054610889908363ffffffff610aff16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a0390811691161461090557600080fd5b61090f8282610b15565b5050565b600160a060020a03338116600090815260036020908152604080832093861683529290529081205461094b908363ffffffff610aff16565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a039081169116146109fd57600080fd5b600160a060020a0381161515610a1257600080fd5b80600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515610a4f57600080fd5b50565b60005433600160a060020a03908116911614610a6d57600080fd5b600160a060020a0381161515610a8257600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610af957fe5b50900390565b600082820183811015610b0e57fe5b9392505050565b600160a060020a0382161515610b2a57600080fd5b60008111610b3757600080fd5b610b418282610bfb565b600160a060020a033016600090815260026020526040902054610b6a908263ffffffff610aed16565b600160a060020a033081166000908152600260205260408082209390935590841681522054610b9f908263ffffffff610aff16565b600160a060020a0380841660008181526002602052604090819020939093559130909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b600160a060020a03821660009081526005602052604090205460ff16151561090f576004805460018101610c2f8382610c81565b5060009182526020808320919091018054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff19909116811790915582526005905260409020805460ff191660011790555050565b815481835581811511610ca557600083815260209020610ca5918101908301610caa565b505050565b610cc891905b80821115610cc45760008155600101610cb0565b5090565b905600a165627a7a7230582068e96ea56186725d6b7f8f905e2a5d5ebd3b4540c959b1144668a622dbbc182d0029"
}