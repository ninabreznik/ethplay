{
  "address": "0x9a1c7577a69ea9e296ef99bfb0eb6bedbe352a36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HighCastleToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-09\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract HighCastleToken is BurnableToken, HasNoEther {\n\n    string public constant name = \"HighCastle Token\";\n    string public constant symbol = \"AIMS\";\n    uint8 public constant decimals = 8;\n    uint256 constant INITIAL_SUPPLY = 2000000000 * (10 ** uint256(decimals));\n\n    uint256 constant FREEZE_END = 1520553600;\n\t// 1520553600 - Fri, 09 Mar 2018 00:00:00 GMT\n\t\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    function HighCastleToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(msg.sender == owner || now >= FREEZE_END);\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(msg.sender == owner || now >= FREEZE_END);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    * @dev Multi transfer token for a specified address\n    * @param _to The array addresses to transfer to.\n    * @param _value The array amounts to be transferred.\n    */\n    function multiTransfer(address[] _to, uint256[] _value) public {\n        require(_to.length == _value.length);\n        for (uint i = 0; i < _to.length; i++) {\n            transfer(_to[i], _value[i]);\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a0316179055341561003557600080fd5b6702c68af0bb1400006000818155600160a060020a0333168082526001602052604080832084905590927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610b608061009f6000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a75780631e89d545146101cc57806323b872dd1461025b578063313ce5671461028357806342966c68146102ac57806366188463146102c257806370a08231146102e45780638da5cb5b1461030357806395d89b41146103325780639f727c2714610345578063a9059cbb14610358578063d73dd6231461037a578063dd62ed3e1461039c575b34156100e557600080fd5b005b34156100f257600080fd5b6100fa6103c1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013657808201518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b610193600160a060020a03600435166024356103f8565b604051901515815260200160405180910390f35b34156101b257600080fd5b6101ba610464565b60405190815260200160405180910390f35b34156101d757600080fd5b6100e560046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061046a95505050505050565b341561026657600080fd5b610193600160a060020a03600435811690602435166044356104c9565b341561028e57600080fd5b61029661050b565b60405160ff909116815260200160405180910390f35b34156102b757600080fd5b6100e5600435610510565b34156102cd57600080fd5b610193600160a060020a03600435166024356105d9565b34156102ef57600080fd5b6101ba600160a060020a03600435166106d3565b341561030e57600080fd5b6103166106ee565b604051600160a060020a03909116815260200160405180910390f35b341561033d57600080fd5b6100fa6106fd565b341561035057600080fd5b6100e5610734565b341561036357600080fd5b610193600160a060020a0360043516602435610787565b341561038557600080fd5b610193600160a060020a03600435166024356107c7565b34156103a757600080fd5b6101ba600160a060020a036004358116906024351661086b565b60408051908101604052601081527f48696768436173746c6520546f6b656e00000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000815183511461047a57600080fd5b5060005b82518110156104c4576104bb83828151811061049657fe5b906020019060200201518383815181106104ac57fe5b90602001906020020151610787565b5060010161047e565b505050565b60035460009033600160a060020a03908116911614806104ed5750635aa1ce804210155b15156104f857600080fd5b610503848484610896565b949350505050565b600881565b600080821161051e57600080fd5b600160a060020a03331660009081526001602052604090205482111561054357600080fd5b5033600160a060020a0381166000908152600160205260409020546105689083610a18565b600160a060020a03821660009081526001602052604081209190915554610595908363ffffffff610a1816565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561063657600160a060020a03338116600090815260026020908152604080832093881683529290529081205561066d565b610646818463ffffffff610a1816565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600481527f41494d5300000000000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a0390811691161461074f57600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561078557fe5b565b60035460009033600160a060020a03908116911614806107ab5750635aa1ce804210155b15156107b657600080fd5b6107c08383610a2a565b9392505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546107ff908363ffffffff610b2516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000600160a060020a03831615156108ad57600080fd5b600160a060020a0384166000908152600160205260409020548211156108d257600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561090557600080fd5b600160a060020a03841660009081526001602052604090205461092e908363ffffffff610a1816565b600160a060020a038086166000908152600160205260408082209390935590851681522054610963908363ffffffff610b2516565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546109ab908363ffffffff610a1816565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610a2457fe5b50900390565b6000600160a060020a0383161515610a4157600080fd5b600160a060020a033316600090815260016020526040902054821115610a6657600080fd5b600160a060020a033316600090815260016020526040902054610a8f908363ffffffff610a1816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610ac4908363ffffffff610b2516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828201838110156107c057fe00a165627a7a72305820de5e159cea1a2ba728e90eddf8b988df7d78144bdd4fb8c99bd1ae58333bd5910029"
}