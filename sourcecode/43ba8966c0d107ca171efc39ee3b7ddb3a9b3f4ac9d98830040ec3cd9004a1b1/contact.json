{
  "address": "0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VokenPublicSale",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity ^0.5.7;\n\n// Voken Public Sale\n// \n// More info:\n//   https://vision.network\n//   https://voken.io\n//\n// Contact us:\n//   [email protected]\n//   [email protected]\n\n\n/**\n * @title SafeMath for uint256\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath256 {\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient,\n     * reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return a / b;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title SafeMath for uint16\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath16 {\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint16 a, uint16 b) internal pure returns (uint16 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient,\n     * reverts on division by zero.\n     */\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return a / b;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Ownable\n */\ncontract Ownable {\n    address private _owner;\n    address payable internal _receiver;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event ReceiverChanged(address indexed previousReceiver, address indexed newReceiver);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract\n     * to the sender account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        _receiver = msg.sender;\n    }\n\n    /**\n     * @return The address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0));\n        address __previousOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(__previousOwner, newOwner);\n    }\n\n    /**\n     * @dev Change receiver.\n     */\n    function changeReceiver(address payable newReceiver) external onlyOwner {\n        require(newReceiver != address(0));\n        address __previousReceiver = _receiver;\n        _receiver = newReceiver;\n        emit ReceiverChanged(__previousReceiver, newReceiver);\n    }\n\n    /**\n     * @dev Rescue compatible ERC20 Token\n     *\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\n     * @param receiver The address of the receiver\n     * @param amount uint256\n     */\n    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\n        IERC20 _token = IERC20(tokenAddr);\n        require(receiver != address(0));\n        uint256 balance = _token.balanceOf(address(this));\n        require(balance >= amount);\n\n        assert(_token.transfer(receiver, amount));\n    }\n\n    /**\n     * @dev Withdraw ether\n     */\n    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\n        require(to != address(0));\n        uint256 balance = address(this).balance;\n        require(balance >= amount);\n\n        to.transfer(amount);\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    bool private _paused;\n\n    event Paused(address account);\n    event Unpaused(address account);\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return Returns true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Paused.\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function setPaused(bool state) external onlyOwner {\n        if (_paused && !state) {\n            _paused = false;\n            emit Unpaused(msg.sender);\n        } else if (!_paused && state) {\n            _paused = true;\n            emit Paused(msg.sender);\n        }\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\n\n/**\n * @title Voken interface\n */\ninterface IVoken {\n    function balanceOf(address owner) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function inWhitelist(address account) external view returns (bool);\n    function referrer(address account) external view returns (address);\n    function refCount(address account) external view returns (uint256);\n}\n\n\n/**\n * @title Voken Public Sale\n */\ncontract VokenPublicSale is Ownable, Pausable{\n    using SafeMath16 for uint16;\n    using SafeMath256 for uint256;\n\n    // Voken\n    IVoken public VOKEN = IVoken(0x82070415FEe803f94Ce5617Be1878503e58F0a6a);\n\n    // Start timestamp\n    uint32 _startTimestamp;\n\n    // Audit ether price\n    uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals\n\n    // Referral rewards, 35% for 15 levels\n    uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;\n    uint16[15] private WHITELIST_REF_REWARDS_PCT = [\n        6,  // 6% for Level.1\n        6,  // 6% for Level.2\n        5,  // 5% for Level.3\n        4,  // 4% for Level.4\n        3,  // 3% for Level.5\n        2,  // 2% for Level.6\n        1,  // 1% for Level.7\n        1,  // 1% for Level.8\n        1,  // 1% for Level.9\n        1,  // 1% for Level.10\n        1,  // 1% for Level.11\n        1,  // 1% for Level.12\n        1,  // 1% for Level.13\n        1,  // 1% for Level.14\n        1   // 1% for Level.15\n    ];\n\n    // Wei & Gas\n    uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum\n    uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum\n    uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus\n    uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum\n    uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex\n\n    // Price\n    uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    \n    uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD\n    uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD\n    uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD\n    uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD\n\n    uint256 private _vokenUsdPrice = VOKEN_USD_PRICE_START;\n\n    // Progress\n    uint16 private STAGE_MAX = 60000;   // 60,000 stages total\n    uint16 private SEASON_MAX = 100;    // 100 seasons total\n    uint16 private SEASON_STAGES = 600; // each 600 stages is a season\n\n    uint16 private _stage;\n    uint16 private _season;\n\n    // Sum\n    uint256 private _txs;\n    uint256 private _vokenTxs;\n    uint256 private _vokenBonusTxs;\n    uint256 private _vokenWhitelistTxs;\n    uint256 private _vokenIssued;\n    uint256 private _vokenBonus;\n    uint256 private _vokenWhitelist;\n    uint256 private _weiSold;\n    uint256 private _weiRefRewarded;\n    uint256 private _weiTopSales;\n    uint256 private _weiTeam;\n    uint256 private _weiPending;\n    uint256 private _weiPendingTransfered;\n\n    // Top-Sales\n    uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals\n    uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals\n\n    uint256 private _topSalesRatio = TOP_SALES_RATIO_START;   // 15% + 50% x(_stage/_stageMax)\n\n    // During tx\n    bool private _inWhitelist_;\n    uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n    uint16[] private _rewards_;\n    address[] private _referrers_;\n\n    // Audit ether price auditor\n    mapping (address => bool) private _etherPriceAuditors;\n\n    // Stage\n    mapping (uint16 => uint256) private _stageUsdSold;\n    mapping (uint16 => uint256) private _stageVokenIssued;\n\n    // Season\n    mapping (uint16 => uint256) private _seasonWeiSold;\n    mapping (uint16 => uint256) private _seasonWeiTopSales;\n    mapping (uint16 => uint256) private _seasonWeiTopSalesTransfered;\n\n    // Account\n    mapping (address => uint256) private _accountVokenIssued;\n    mapping (address => uint256) private _accountVokenBonus;\n    mapping (address => uint256) private _accountVokenWhitelisted;\n    mapping (address => uint256) private _accountWeiPurchased;\n    mapping (address => uint256) private _accountWeiRefRewarded;\n\n    // Ref\n    mapping (uint16 => address[]) private _seasonRefAccounts;\n    mapping (uint16 => mapping (address => bool)) private _seasonHasRefAccount;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountPurchased;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountRef;\n\n    // Events\n    event AuditEtherPriceChanged(uint256 value, address indexed account);\n    event AuditEtherPriceAuditorChanged(address indexed account, bool state);\n\n    event VokenBonusTransfered(address indexed to, uint256 amount);\n    event VokenWhitelistTransfered(address indexed to, uint256 amount);\n    event VokenIssuedTransfered(uint16 stageIndex, address indexed to, uint256 vokenAmount, uint256 auditEtherPrice, uint256 weiUsed);\n\n    event StageClosed(uint256 _stageNumber, address indexed account);\n    event SeasonClosed(uint16 _seasonNumber, address indexed account);\n\n    event SeasonTopSalesWeiTransfered(uint16 seasonNumber, address indexed to, uint256 amount);\n    event TeamWeiTransfered(address indexed to, uint256 amount);\n    event PendingWeiTransfered(address indexed to, uint256 amount);\n\n\n    /**\n     * @dev Start timestamp.\n     */\n    function startTimestamp() public view returns (uint32) {\n        return _startTimestamp;\n    }\n\n    /**\n     * @dev Set start timestamp.\n     */\n    function setStartTimestamp(uint32 timestamp) external onlyOwner {\n        _startTimestamp = timestamp;\n    }\n\n    /**\n     * @dev Throws if not ether price auditor.\n     */\n    modifier onlyEtherPriceAuditor() {\n        require(_etherPriceAuditors[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Set audit ether price.\n     */\n    function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {\n        _etherPrice = value;\n        emit AuditEtherPriceChanged(value, msg.sender);\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function etherPriceAuditor(address account) public view returns (bool) {\n        return _etherPriceAuditors[account];\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function setEtherPriceAuditor(address account, bool state) external onlyOwner {\n        _etherPriceAuditors[account] = state;\n        emit AuditEtherPriceAuditorChanged(account, state);\n    }\n\n    /**\n     * @dev Stage Voken price in USD, by stage index.\n     */\n    function stageVokenUsdPrice(uint16 stageIndex) private view returns (uint256) {\n        return VOKEN_USD_PRICE_START.add(VOKEN_USD_PRICE_STEP.mul(stageIndex));\n    }\n\n    /**\n     * @dev wei => USD\n     */\n    function wei2usd(uint256 amount) private view returns (uint256) {\n        return amount.mul(_etherPrice).div(1 ether);\n    }\n\n    /**\n     * @dev USD => wei\n     */\n    function usd2wei(uint256 amount) private view returns (uint256) {\n        return amount.mul(1 ether).div(_etherPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2voken(uint256 usdAmount) private view returns (uint256) {\n        return usdAmount.mul(1000000).div(_vokenUsdPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2vokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {\n        return usdAmount.mul(1000000).div(stageVokenUsdPrice(stageIndex));\n    }\n\n    /**\n     * @dev Calculate season number, by stage index.\n     */\n    function calcSeason(uint16 stageIndex) private view returns (uint16) {\n        if (stageIndex > 0) {\n            uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);\n\n            if (stageIndex.mod(SEASON_STAGES) > 0) {\n                return __seasonNumber.add(1);\n            }\n            \n            return __seasonNumber;\n        }\n        \n        return 1;\n    }\n\n    /**\n     * @dev Transfer Top-Sales wei, by season number.\n     */\n    function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {\n        uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);\n        require(to != address(0));\n        \n        _seasonWeiTopSalesTransfered[seasonNumber] = _seasonWeiTopSalesTransfered[seasonNumber].add(__weiRemain);\n        emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Pending remain, in wei.\n     */\n    function pendingRemain() private view returns (uint256) {\n        return _weiPending.sub(_weiPendingTransfered);\n    }\n\n    /**\n     * @dev Transfer pending wei.\n     */\n    function transferPending(address payable to) external onlyOwner {\n        uint256 __weiRemain = pendingRemain();\n        require(to != address(0));\n\n        _weiPendingTransfered = _weiPendingTransfered.add(__weiRemain);\n        emit PendingWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Transfer team wei.\n     */\n    function transferTeam(address payable to) external onlyOwner {\n        uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        require(to != address(0));\n\n        _weiTeam = _weiTeam.add(__weiRemain);\n        emit TeamWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Status.\n     */\n    function status() public view returns (uint256 auditEtherPrice,\n                                           uint16 stage,\n                                           uint16 season,\n                                           uint256 vokenUsdPrice,\n                                           uint256 currentTopSalesRatio,\n                                           uint256 txs,\n                                           uint256 vokenTxs,\n                                           uint256 vokenBonusTxs,\n                                           uint256 vokenWhitelistTxs,\n                                           uint256 vokenIssued,\n                                           uint256 vokenBonus,\n                                           uint256 vokenWhitelist) {\n        auditEtherPrice = _etherPrice;\n\n        if (_stage > STAGE_MAX) {\n            stage = STAGE_MAX;\n            season = SEASON_MAX;\n        } else {\n            stage = _stage;\n            season = _season;\n        }\n\n        vokenUsdPrice = _vokenUsdPrice;\n        currentTopSalesRatio = _topSalesRatio;\n\n        txs = _txs;\n        vokenTxs = _vokenTxs;\n        vokenBonusTxs = _vokenBonusTxs;\n        vokenWhitelistTxs = _vokenWhitelistTxs;\n        vokenIssued = _vokenIssued;\n        vokenBonus = _vokenBonus;\n        vokenWhitelist = _vokenWhitelist;\n    }\n\n    /**\n     * @dev Sum.\n     */\n    function sum() public view returns(uint256 weiSold,\n                                       uint256 weiReferralRewarded,\n                                       uint256 weiTopSales,\n                                       uint256 weiTeam,\n                                       uint256 weiPending,\n                                       uint256 weiPendingTransfered,\n                                       uint256 weiPendingRemain) {\n        weiSold = _weiSold;\n        weiReferralRewarded = _weiRefRewarded;\n        weiTopSales = _weiTopSales;\n        weiTeam = _weiTeam;\n        weiPending = _weiPending;\n        weiPendingTransfered = _weiPendingTransfered;\n        weiPendingRemain = pendingRemain();\n    }\n\n    /**\n     * @dev Throws if gas is not enough.\n     */\n    modifier enoughGas() {\n        require(gasleft() > GAS_MIN);\n        _;\n    }\n\n    /**\n     * @dev Throws if not started.\n     */\n    modifier onlyOnSale() {\n        require(_startTimestamp > 0 && now > _startTimestamp, \"Voken Public-Sale has not started yet.\");\n        require(_etherPrice > 0, \"Audit ETH price must be greater than zero.\");\n        require(!paused(), \"Voken Public-Sale is paused.\");\n        require(_stage <= STAGE_MAX, \"Voken Public-Sale Closed.\");\n        _;\n    }\n\n    /**\n     * @dev Top-Sales ratio.\n     */\n    function topSalesRatio(uint16 stageIndex) private view returns (uint256) {\n        return TOP_SALES_RATIO_START.add(TOP_SALES_RATIO_DISTANCE.mul(stageIndex).div(STAGE_MAX));\n    }\n\n    /**\n     * @dev USD => wei, for Top-Sales\n     */\n    function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {\n        return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));\n    }\n\n    /**\n     * @dev Calculate stage dollor cap, by stage index.\n     */\n    function stageUsdCap(uint16 stageIndex) private view returns (uint256) {\n        uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex)); \n\n        if (__usdCap > STAGE_USD_CAP_MAX) {\n            return STAGE_USD_CAP_MAX;\n        }\n\n        return __usdCap;\n    }\n\n    /**\n     * @dev Stage Vokdn cap, by stage index.\n     */\n    function stageVokenCap(uint16 stageIndex) private view returns (uint256) {\n        return usd2vokenByStage(stageUsdCap(stageIndex), stageIndex);\n    }\n\n    /**\n     * @dev Stage status, by stage index.\n     */\n    function stageStatus(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,\n                                                                 uint256 vokenCap,\n                                                                 uint256 vokenOnSale,\n                                                                 uint256 vokenSold,\n                                                                 uint256 usdCap,\n                                                                 uint256 usdOnSale,\n                                                                 uint256 usdSold,\n                                                                 uint256 weiTopSalesRatio) {\n        if (stageIndex > STAGE_MAX) {\n            return (0, 0, 0, 0, 0, 0, 0, 0);\n        }\n\n        vokenUsdPrice = stageVokenUsdPrice(stageIndex);\n\n        vokenSold = _stageVokenIssued[stageIndex];\n        vokenCap = stageVokenCap(stageIndex);\n        vokenOnSale = vokenCap.sub(vokenSold);\n\n        usdSold = _stageUsdSold[stageIndex];\n        usdCap = stageUsdCap(stageIndex);\n        usdOnSale = usdCap.sub(usdSold);\n\n        weiTopSalesRatio = topSalesRatio(stageIndex);\n    }\n\n    /**\n     * @dev Season Top-Sales remain, in wei.\n     */\n    function seasonTopSalesRemain(uint16 seasonNumber) private view returns (uint256) {\n        return _seasonWeiTopSales[seasonNumber].sub(_seasonWeiTopSalesTransfered[seasonNumber]);\n    }\n\n    /**\n     * @dev Season Top-Sales rewards, by season number, in wei.\n     */\n    function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,\n                                                                             uint256 weiTopSales,\n                                                                             uint256 weiTopSalesTransfered,\n                                                                             uint256 weiTopSalesRemain) {\n        weiSold = _seasonWeiSold[seasonNumber];\n        weiTopSales = _seasonWeiTopSales[seasonNumber];\n        weiTopSalesTransfered = _seasonWeiTopSalesTransfered[seasonNumber];\n        weiTopSalesRemain = seasonTopSalesRemain(seasonNumber);\n    }\n\n    /**\n     * @dev Query account.\n     */\n    function accountQuery(address account) public view returns (uint256 vokenIssued,\n                                                                uint256 vokenBonus,\n                                                                uint256 vokenWhitelisted,\n                                                                uint256 weiPurchased,\n                                                                uint256 weiReferralRewarded) {\n        vokenIssued = _accountVokenIssued[account];\n        vokenBonus = _accountVokenBonus[account];\n        vokenWhitelisted = _accountVokenWhitelisted[account];\n        weiPurchased = _accountWeiPurchased[account];\n        weiReferralRewarded = _accountWeiRefRewarded[account];\n    }\n\n    /**\n     * @dev Accounts in a specific season.\n     */\n    function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {\n        accounts = _seasonRefAccounts[seasonNumber];\n    }\n\n    /**\n     * @dev Season number => account => USD purchased.\n     */\n    function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountPurchased[seasonNumber][account];\n    }\n\n    /**\n     * @dev Season number => account => referral dollors.\n     */\n    function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountRef[seasonNumber][account];\n    }\n\n    /**\n     * @dev constructor\n     */\n    constructor () public {\n        _etherPriceAuditors[msg.sender] = true;\n        _stage = 0;\n        _season = 1;\n    }\n\n    /**\n     * @dev Receive ETH, and send Vokens.\n     */\n    function () external payable enoughGas onlyOnSale {\n        require(msg.value >= WEI_MIN);\n        require(msg.value <= WEI_MAX);\n\n        // Set temporary variables.\n        setTemporaryVariables();\n        uint256 __usdAmount = wei2usd(msg.value);\n        uint256 __usdRemain = __usdAmount;\n        uint256 __vokenIssued;\n        uint256 __vokenBonus;\n        uint256 __usdUsed;\n        uint256 __weiUsed;\n\n        // USD => Voken\n        while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {\n            uint256 __txVokenIssued;\n            (__txVokenIssued, __usdRemain) = ex(__usdRemain);\n            __vokenIssued = __vokenIssued.add(__txVokenIssued);\n        }\n\n        // Used\n        __usdUsed = __usdAmount.sub(__usdRemain);\n        __weiUsed = usd2wei(__usdUsed);\n\n        // Bonus 10%\n        if (msg.value >= WEI_BONUS) {\n            __vokenBonus = __vokenIssued.div(10);\n            assert(transferVokenBonus(__vokenBonus));\n        }\n\n        // Whitelisted\n        // BUY-ONE-AND-GET-ONE-MORE-FREE\n        if (_inWhitelist_ && __vokenIssued > 0) {\n            // both issued and bonus\n            assert(transferVokenWhitelisted(__vokenIssued.add(__vokenBonus)));\n\n            // 35% for 15 levels\n            sendWhitelistReferralRewards(__weiUsed);\n        }\n\n        // If wei remains, refund.\n        if (__usdRemain > 0) {\n            uint256 __weiRemain = usd2wei(__usdRemain);\n            \n            __weiUsed = msg.value.sub(__weiRemain);\n            \n            // Refund wei back\n            msg.sender.transfer(__weiRemain);\n        }\n\n        // Counter\n        if (__weiUsed > 0) {\n            _txs = _txs.add(1);\n            _weiSold = _weiSold.add(__weiUsed);\n            _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);\n        }\n\n        // Wei team\n        uint256 __weiTeam;\n        if (_season > SEASON_MAX)\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        else\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam).div(0.01 ether).mul(0.01 ether);\n\n        _weiTeam = _weiTeam.add(__weiTeam);\n        _receiver.transfer(__weiTeam);\n\n        // Assert finished\n        assert(true);\n    }\n\n    /**\n     * @dev Set temporary variables.\n     */\n    function setTemporaryVariables() private {\n        delete _referrers_;\n        delete _rewards_;\n\n        _inWhitelist_ = VOKEN.inWhitelist(msg.sender);\n        _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n\n        address __cursor = msg.sender;\n        for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {\n            address __refAccount = VOKEN.referrer(__cursor);\n\n            if (__cursor == __refAccount)\n                break;\n\n            if (VOKEN.refCount(__refAccount) > i) {\n                if (!_seasonHasRefAccount[_season][__refAccount]) {\n                    _seasonRefAccounts[_season].push(__refAccount);\n                    _seasonHasRefAccount[_season][__refAccount] = true;\n                }\n\n                _pending_ = _pending_.sub(WHITELIST_REF_REWARDS_PCT[i]);\n                _rewards_.push(WHITELIST_REF_REWARDS_PCT[i]);                    \n                _referrers_.push(__refAccount);\n            }\n\n            __cursor = __refAccount;\n        }\n    }\n\n    /**\n     * @dev USD => Voken\n     */\n    function ex(uint256 usdAmount) private returns (uint256, uint256) {\n        uint256 __stageUsdCap = stageUsdCap(_stage);\n        uint256 __vokenIssued;\n\n        // in stage\n        if (_stageUsdSold[_stage].add(usdAmount) <= __stageUsdCap) {\n            exCount(usdAmount);\n\n            __vokenIssued = usd2voken(usdAmount);\n            assert(transfervokenIssued(__vokenIssued, usdAmount));\n\n            // close stage, if stage dollor cap reached\n            if (__stageUsdCap == _stageUsdSold[_stage]) {\n                assert(closeStage());\n            }\n\n            return (__vokenIssued, 0);\n        }\n\n        // close stage\n        uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);\n        uint256 __usdRemain = usdAmount.sub(__usdUsed);\n\n        exCount(__usdUsed);\n\n        __vokenIssued = usd2voken(__usdUsed);\n        assert(transfervokenIssued(__vokenIssued, __usdUsed));\n        assert(closeStage());\n\n        return (__vokenIssued, __usdRemain);\n    }\n\n    /**\n     * @dev Ex counter.\n     */\n    function exCount(uint256 usdAmount) private {\n        uint256 __weiSold = usd2wei(usdAmount);\n        uint256 __weiTopSales = usd2weiTopSales(usdAmount);\n\n        _usdSeasonAccountPurchased[_season][msg.sender] = _usdSeasonAccountPurchased[_season][msg.sender].add(usdAmount);   // season => address => purchased, in USD\n        \n        _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD\n        _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei\n        _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei\n        _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei\n\n        // season referral account\n        if (_inWhitelist_) {\n            for (uint16 i = 0; i < _rewards_.length; i++) {\n                _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfer Voken issued.\n     */\n    function transfervokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {\n        _vokenTxs = _vokenTxs.add(1);\n        \n        _vokenIssued = _vokenIssued.add(amount);\n        _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);\n        _accountVokenIssued[msg.sender] = _accountVokenIssued[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken bonus.\n     */\n    function transferVokenBonus(uint256 amount) private returns (bool) {\n        _vokenBonusTxs = _vokenBonusTxs.add(1);\n\n        _vokenBonus = _vokenBonus.add(amount);\n        _accountVokenBonus[msg.sender] = _accountVokenBonus[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenBonusTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken whitelisted.\n     */\n    function transferVokenWhitelisted(uint256 amount) private returns (bool) {\n        _vokenWhitelistTxs = _vokenWhitelistTxs.add(1);\n\n        _vokenWhitelist = _vokenWhitelist.add(amount);\n        _accountVokenWhitelisted[msg.sender] = _accountVokenWhitelisted[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenWhitelistTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * Close current stage.\n     */\n    function closeStage() private returns (bool) {\n        emit StageClosed(_stage, msg.sender);\n        _stage = _stage.add(1);\n        _vokenUsdPrice = stageVokenUsdPrice(_stage);\n        _topSalesRatio = topSalesRatio(_stage);\n\n        // Close current season\n        uint16 __seasonNumber = calcSeason(_stage);\n        if (_season < __seasonNumber) {\n            emit SeasonClosed(_season, msg.sender);\n            _season = __seasonNumber;\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Send whitelist referral rewards.\n     */\n    function sendWhitelistReferralRewards(uint256 weiAmount) private {\n        uint256 __weiRemain = weiAmount;\n        for (uint16 i = 0; i < _rewards_.length; i++) {\n            uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);\n            address payable __receiver = address(uint160(_referrers_[i]));\n\n            _weiRefRewarded = _weiRefRewarded.add(__weiReward);\n            _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);\n            __weiRemain = __weiRemain.sub(__weiReward);\n\n            __receiver.transfer(__weiReward);\n        }\n        \n        if (_pending_ > 0)\n            _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));\n    }\n}",
  "bytecode": "600280546001600160a01b0319167382070415fee803f94ce5617be1878503e58f0a6a1781556004805461ffff191660231781556102606040526006608081815260a091909152600560c081905260e0929092526003610100526101209290925260016101408190526101608190526101808190526101a08190526101c08190526101e081905261020081905261022081905261024052620000a391600f62000233565b506006805467016345785d8a00006001600160481b031990911617600160481b600160901b03191671056bc75e2d6310000000000000000000000017600160901b600160d81b031916798ac7230489e8000000000000000000000000000000000000000017600160d81b62ffffff0219167d2dc6c0000000000000000000000000000000000000000000000000000000179055600780546216e36062ffffff199091161790556103e86008819055600a60098190556305f5e1009055620f4240600b5564038407b700600c55600d55600e805461ea6061ffff199091161763ffff00001916626400001765ffff0000000019166502580000000017905562e4e1c0601c8190556302faf080601d55601e5560045461ffff16602055348015620001cb57600080fd5b5060008054336001600160a01b031991821681178355600180549092168117600160a01b60ff0219168255825260236020526040909120805460ff19169091179055600e80546801000000000000000069ffffffff00000000000019909116179055620002f4565b600183019183908215620002bd5791602002820160005b838211156200028b57835183826101000a81548161ffff021916908360ff16021790555092602001926002016020816001010492830192600103026200024a565b8015620002bb5782816101000a81549061ffff02191690556002016020816001010492830192600103026200028b565b505b50620002cb929150620002cf565b5090565b620002f191905b80821115620002cb57805461ffff19168155600101620002d6565b90565b6128ce80620003046000396000f3fe6080604052600436106101665760003560e01c8063853255cc116100d1578063cea9d26f1161008a578063e6fd48bc11610064578063e6fd48bc14610b13578063f2e2934114610b41578063f2fde38b14610b9f578063f5f56b7a14610bd257610166565b8063cea9d26f14610a4c578063d4eeb6ad14610a8f578063de8f246c14610ae357610166565b8063853255cc146109025780638da5cb5b1461094f5780639b28fa7b14610980578063ac5cf93414610995578063b7352bee146109d2578063c225135d14610a0f57610166565b806348d3297c1161012357806348d3297c14610799578063522f681514610808578063547e3f06146108415780635c975abb1461087457806363b26e76146108895780636541c7c2146108bc57610166565b806316c38b3c14610611578063200d2ed21461063f578063223e8eff146106ba57806322c8c2cc14610701578063271879911461073c578063294b2ed014610766575b600654600160d81b900462ffffff165a1161018057600080fd5b600254600160a01b900463ffffffff16158015906101ac5750600254600160a01b900463ffffffff1642115b6101ea57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806128536026913960400191505060405180910390fd5b60006003541161022e57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180612879602a913960400191505060405180910390fd5b610236610c50565b1561028b5760408051600160e51b62461bcd02815260206004820152601c60248201527f566f6b656e205075626c69632d53616c65206973207061757365642e00000000604482015290519081900360640190fd5b600e5461ffff808216600160301b9092041611156102f35760408051600160e51b62461bcd02815260206004820152601960248201527f566f6b656e205075626c69632d53616c6520436c6f7365642e00000000000000604482015290519081900360640190fd5b60065468ffffffffffffffffff1634101561030d57600080fd5b6006546901000000000000000000900468ffffffffffffffffff1634111561033457600080fd5b61033c610c61565b600061034734610fe7565b90508060008080805b60075462ffffff165a1180156103665750600085115b80156103825750600e5461ffff808216600160301b9092041611155b156103ae57600061039286611012565b965090506103a6858263ffffffff61114316565b945050610350565b6103be868663ffffffff61115616565b91506103c982611168565b600654909150600160901b900468ffffffffffffffffff163410610409576103f884600a63ffffffff61118a16565b9250610403836111cb565b61040957fe5b601f5460ff16801561041b5750600084115b1561044757610438610433858563ffffffff61114316565b6112f3565b61043e57fe5b6104478161141b565b841561049d57600061045886611168565b905061046a348263ffffffff61115616565b604051909250339082156108fc029083906000818181858888f1935050505015801561049a573d6000803e3d6000fd5b50505b801561050157600f546104b790600163ffffffff61114316565b600f556016546104cd908263ffffffff61114316565b601655336000908152602c60205260409020546104f0908263ffffffff61114316565b336000908152602c60205260409020555b600e5460009061ffff6201000082048116600160401b90920416111561055d5761055660195461054a601a5461054a60185461054a60175460165461115690919063ffffffff16565b9063ffffffff61115616565b90506105b7565b6105b4662386f26fc100006105a8662386f26fc1000061059c60195461054a601a5461054a60185461054a60175460165461115690919063ffffffff16565b9063ffffffff61118a16565b9063ffffffff61158516565b90505b6019546105ca908263ffffffff61114316565b6019556001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610607573d6000803e3d6000fd5b5050505050505050005b34801561061d57600080fd5b5061063d6004803603602081101561063457600080fd5b503515156115aa565b005b34801561064b57600080fd5b5061065461168e565b604080519c8d5261ffff9b8c1660208e015299909a168b8a015260608b019790975260808a019590955260a089019390935260c088019190915260e087015261010086015261012085015261014084015261016083019190915251908190036101800190f35b3480156106c657600080fd5b506106ed600480360360208110156106dd57600080fd5b50356001600160a01b0316611732565b604080519115158252519081900360200190f35b34801561070d57600080fd5b5061063d6004803603604081101561072457600080fd5b506001600160a01b0381351690602001351515611750565b34801561074857600080fd5b5061063d6004803603602081101561075f57600080fd5b50356117c7565b34801561077257600080fd5b5061063d6004803603602081101561078957600080fd5b50356001600160a01b0316611821565b3480156107a557600080fd5b506107c7600480360360208110156107bc57600080fd5b503561ffff166118e7565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561081457600080fd5b5061063d6004803603604081101561082b57600080fd5b506001600160a01b0381351690602001356119ba565b34801561084d57600080fd5b5061063d6004803603602081101561086457600080fd5b50356001600160a01b0316611a2f565b34801561088057600080fd5b506106ed610c50565b34801561089557600080fd5b5061063d600480360360208110156108ac57600080fd5b50356001600160a01b0316611aab565b3480156108c857600080fd5b506108f0600480360360408110156108df57600080fd5b508035906020013561ffff16611b8d565b60408051918252519081900360200190f35b34801561090e57600080fd5b50610917611bb5565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b34801561095b57600080fd5b50610964611bdc565b604080516001600160a01b039092168252519081900360200190f35b34801561098c57600080fd5b50610964611beb565b3480156109a157600080fd5b506108f0600480360360408110156109b857600080fd5b50803561ffff1690602001356001600160a01b0316611bfa565b3480156109de57600080fd5b506108f0600480360360408110156109f557600080fd5b50803561ffff1690602001356001600160a01b0316611c28565b348015610a1b57600080fd5b5061063d60048036036040811015610a3257600080fd5b50803561ffff1690602001356001600160a01b0316611c56565b348015610a5857600080fd5b5061063d60048036036060811015610a6f57600080fd5b506001600160a01b03813581169160208101359091169060400135611d42565b348015610a9b57600080fd5b50610abd60048036036020811015610ab257600080fd5b503561ffff16611e8e565b604080519485526020850193909352838301919091526060830152519081900360800190f35b348015610aef57600080fd5b5061063d60048036036020811015610b0657600080fd5b503563ffffffff16611eca565b348015610b1f57600080fd5b50610b28611f18565b6040805163ffffffff9092168252519081900360200190f35b348015610b4d57600080fd5b50610b7460048036036020811015610b6457600080fd5b50356001600160a01b0316611f2b565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610bab57600080fd5b5061063d60048036036020811015610bc257600080fd5b50356001600160a01b0316611f6f565b348015610bde57600080fd5b50610c0060048036036020811015610bf557600080fd5b503561ffff16611fe9565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610c3c578181015183820152602001610c24565b505050509050019250505060405180910390f35b600154600160a01b900460ff165b90565b610c6d602260006127f5565b610c7960216000612813565b60025460408051600160e01b63e2aafa2102815233600482015290516001600160a01b039092169163e2aafa2191602480820192602092909190829003018186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b5051601f805460ff191691151591909117905560045461ffff166020553360005b600f8161ffff161015610fe35760025460408051600160e11b63167801e10281526001600160a01b03858116600483015291516000939290921691632cf003c291602480820192602092909190829003018186803b158015610d7357600080fd5b505afa158015610d87573d6000803e3d6000fd5b505050506040513d6020811015610d9d57600080fd5b505190506001600160a01b038381169082161415610dbb5750610fe3565b60025460408051600160e21b633b23e57f0281526001600160a01b038481166004830152915161ffff861693929092169163ec8f95fc91602480820192602092909190829003018186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b50511115610fd957600e54600160401b900461ffff166000908152602f602090815260408083206001600160a01b038516845290915290205460ff16610ef457600e805461ffff600160401b9182900481166000908152602e602090815260408083208054600181810183559185528385200180546001600160a01b038a166001600160a01b031990911681179091559654959095049093168252602f815282822094825293909352909120805460ff191690911790555b610f2a60058361ffff16600f8110610f0857fe5b60108104919091015460205491600f166002026101000a900461ffff16611156565b6020556021600561ffff8416600f8110610f4057fe5b60108082049290920154835460018082018655600095865260208620948204909401805461ffff6002600f948516810261010090810a83810219909416959097160290950a9093049093169091021790556022805491820181559091527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e5100180546001600160a01b0319166001600160a01b0383161790555b9150600101610d12565b5050565b600061100a670de0b6b3a764000061059c6003548561158590919063ffffffff16565b90505b919050565b6000806000611030600e60069054906101000a900461ffff1661205a565b600e54600160301b900461ffff1660009081526024602052604081205491925090829061105d9087611143565b116110c55761106b8561209e565b611074856122df565b905061108081866122fc565b61108657fe5b600e54600160301b900461ffff166000908152602460205260409020548214156110b8576110b261248a565b6110b857fe5b92506000915061113e9050565b600e54600160301b900461ffff166000908152602460205260408120546110ed908490611156565b90506000611101878363ffffffff61115616565b905061110c8261209e565b611115826122df565b925061112183836122fc565b61112757fe5b61112f61248a565b61113557fe5b91945090925050505b915091565b8181018281101561115057fe5b92915050565b60008282111561116257fe5b50900390565b60035460009061100a9061059c84670de0b6b3a764000063ffffffff61158516565b600080821161119557fe5b60008284816111a057fe5b0490508284816111ac57fe5b068184020184146111b957fe5b8284816111c257fe5b04949350505050565b6011546000906111e290600163ffffffff61114316565b6011556014546111f8908363ffffffff61114316565b601455336000908152602a602052604090205461121b908363ffffffff61114316565b336000818152602a60209081526040808320949094556002548451600160e01b63a9059cbb02815260048101949094526024840187905293516001600160a01b039094169363a9059cbb93604480820194918390030190829087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050506040513d60208110156112ad57600080fd5b50516112b557fe5b60408051838152905133917f307cd8dd2b0de91574773a8d043032396e536c24df2a7b519a0ef251b1bd6186919081900360200190a2506001919050565b60125460009061130a90600163ffffffff61114316565b601255601554611320908363ffffffff61114316565b601555336000908152602b6020526040902054611343908363ffffffff61114316565b336000818152602b60209081526040808320949094556002548451600160e01b63a9059cbb02815260048101949094526024840187905293516001600160a01b039094169363a9059cbb93604480820194918390030190829087803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b505050506040513d60208110156113d557600080fd5b50516113dd57fe5b60408051838152905133917f2dc6fbf5af806174d3da724495dd09c4a7da35ceb3d38a377ff00ed38fa65cd8919081900360200190a2506001919050565b8060005b60215461ffff8216101561154957600061146f606461059c60218561ffff168154811061144857fe5b600091825260209091206010820401548891600f166002026101000a900461ffff16611585565b9050600060228361ffff168154811061148457fe5b6000918252602090912001546017546001600160a01b0390911691506114b0908363ffffffff61114316565b6017556001600160a01b0381166000908152602d60205260409020546114dc908363ffffffff61114316565b6001600160a01b0382166000908152602d6020526040902055611505848363ffffffff61115616565b6040519094506001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561153e573d6000803e3d6000fd5b50505060010161141f565b5060205415610fe35761157e61156f606461059c6020548661158590919063ffffffff16565b601a549063ffffffff61114316565b601a555050565b60008261159457506000611150565b50818102818382816115a257fe5b041461115057fe5b6000546001600160a01b031633146115c157600080fd5b600154600160a01b900460ff1680156115d8575080155b156116255760018054600160a01b60ff02191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a161168b565b600154600160a01b900460ff1615801561163c5750805b1561168b5760018054600160a01b60ff021916600160a01b1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a15b50565b600354600e54600090819081908190819081908190819081908190819061ffff808216600160301b9092041611156116da57600e5461ffff8082169c50620100009091041699506116f7565b600e5461ffff600160301b820481169c50600160401b9091041699505b600d549850601e549750600f549650601054955060115494506012549350601354925060145491506015549050909192939495969798999a9b565b6001600160a01b031660009081526023602052604090205460ff1690565b6000546001600160a01b0316331461176757600080fd5b6001600160a01b038216600081815260236020908152604091829020805460ff1916851515908117909155825190815291517f7309a1bee0ae3b528b2e9f11ab2abd82b54426646b40c5bef678f09554bd7c8f9281900390910190a25050565b3360009081526023602052604090205460ff166117e357600080fd5b600381905560408051828152905133917f4c93251017d1829354b31aa6cb37ab6ec1b2af6a073553f6073a7a3420cf7393919081900360200190a250565b6000546001600160a01b0316331461183857600080fd5b60006118426125d9565b90506001600160a01b03821661185757600080fd5b601b5461186a908263ffffffff61114316565b601b556040805182815290516001600160a01b038416917ffcd200d7cba84a55eb61ba9209300062477f6f08297653f398fa5489b65a1704919081900360200190a26040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156118e2573d6000803e3d6000fd5b505050565b600080600080600080600080600e60009054906101000a900461ffff1661ffff168961ffff161115611930575060009650869550859450849350839250829150819050806119af565b611939896125f7565b61ffff8a16600090815260256020526040902054909850945061195b89612624565b965061196d878663ffffffff61115616565b61ffff8a16600090815260246020526040902054909650915061198f8961205a565b93506119a1848363ffffffff61115616565b92506119ac89612638565b90505b919395975091939597565b6000546001600160a01b031633146119d157600080fd5b6001600160a01b0382166119e457600080fd5b3031818110156119f357600080fd5b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015611a29573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314611a4657600080fd5b6001600160a01b038116611a5957600080fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fd36aafedb017e43b79d3cf6aa1987d3fbb9fff33e1738c71dbf6b2abaadbded090600090a35050565b6000546001600160a01b03163314611ac257600080fd5b6000611aed60195461054a601a5461054a60185461054a60175460165461115690919063ffffffff16565b90506001600160a01b038216611b0257600080fd5b601954611b15908263ffffffff61114316565b6019556040805182815290516001600160a01b038416917fe4de4c8dc6ab2404c805abf5db58633d76fc08b6c8b2c0a34d3a47bfb73663bf919081900360200190a26040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156118e2573d6000803e3d6000fd5b6000611bae611b9b836125f7565b61059c85620f424063ffffffff61158516565b9392505050565b601654601754601854601954601a54601b546000611bd16125d9565b905090919293949596565b6000546001600160a01b031690565b6002546001600160a01b031681565b61ffff821660009081526031602090815260408083206001600160a01b038516845290915290205492915050565b61ffff821660009081526030602090815260408083206001600160a01b038516845290915290205492915050565b6000546001600160a01b03163314611c6d57600080fd5b6000611c7883612670565b90506001600160a01b038216611c8d57600080fd5b61ffff8316600090815260286020526040902054611cb1908263ffffffff61114316565b61ffff841660008181526028602090815260409182902093909355805191825291810183905281516001600160a01b038516927f69ccd39c099e91512b4f9c8d1664c05f38430681d4d594a1deec4ace4e7a6e0d928290030190a26040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611a29573d6000803e3d6000fd5b6000546001600160a01b03163314611d5957600080fd5b826001600160a01b038316611d6d57600080fd5b60408051600160e01b6370a0823102815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015611dba57600080fd5b505afa158015611dce573d6000803e3d6000fd5b505050506040513d6020811015611de457600080fd5b5051905082811015611df557600080fd5b816001600160a01b031663a9059cbb85856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b505050506040513d6020811015611e7f57600080fd5b5051611e8757fe5b5050505050565b61ffff811660009081526026602090815260408083205460278352818420546028909352908320549092611ec185612670565b90509193509193565b6000546001600160a01b03163314611ee157600080fd5b6002805463ffffffff909216600160a01b0277ffffffff000000000000000000000000000000000000000019909216919091179055565b600254600160a01b900463ffffffff1690565b6001600160a01b0316600090815260296020908152604080832054602a835281842054602b845282852054602c855283862054602d90955292909420549094919291565b6000546001600160a01b03163314611f8657600080fd5b6001600160a01b038116611f9957600080fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61ffff81166000908152602e602090815260409182902080548351818402810184019094528084526060939283018282801561204e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612030575b50505050509050919050565b6000806120886120798461ffff16600b5461158590919063ffffffff16565b600a549063ffffffff61114316565b9050600c5481111561100a575050600c5461100d565b60006120a982611168565b905060006120b68361269e565b600e54600160401b900461ffff1660009081526030602090815260408083203384529091529020549091506120eb9084611143565b600e805461ffff600160401b909104811660009081526030602090815260408083203384528252808320959095559254600160301b900490911681526024909152205461213e908463ffffffff61114316565b600e805461ffff600160301b90910481166000908152602460209081526040808320959095559254600160401b9004909116815260269091522054612189908363ffffffff61114316565b600e805461ffff600160401b918290048116600090815260266020908152604080832096909655935492909204168152602790915220546121d0908263ffffffff61114316565b600e54600160401b900461ffff166000908152602760205260409020556018546121fa9082611143565b601855601f5460ff16156118e25760005b60215461ffff82161015611a2957600e5461ffff600160401b9091048116600090815260316020526040812060228054612280948994929190871690811061224f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020549063ffffffff61114316565b600e5461ffff600160401b9091048116600090815260316020526040812060228054919390919086169081106122b257fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205560010161220b565b600d5460009061100a9061059c84620f424063ffffffff61158516565b60105460009061231390600163ffffffff61114316565b601055601354612329908463ffffffff61114316565b601355600e54600160301b900461ffff166000908152602560205260409020546123539084611143565b600e54600160301b900461ffff166000908152602560209081526040808320939093553382526029905220546123899084611143565b336000818152602960209081526040808320949094556002548451600160e01b63a9059cbb02815260048101949094526024840188905293516001600160a01b039094169363a9059cbb93604480820194918390030190829087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b505050506040513d602081101561241b57600080fd5b505161242357fe5b600e546003546040805161ffff600160301b9094049390931683526020830186905282810191909152606082018490525133917f29caba8ede395b9502a07748e15eee56dc0606ed5b003837c18768e0dc96e09d919081900360800190a250600192915050565b600e5460408051600160301b90920461ffff1682525160009133917feb233b5b7ba017d2651d779b7619d1a70758bcd13049019e0dd121077a1e1a2f916020908290030190a2600e546124e990600160301b900461ffff1660016126c5565b600e805467ffff0000000000001916600160301b61ffff93841681029190911791829055612519929104166125f7565b600d55600e5461253390600160301b900461ffff16612638565b601e55600e5460009061255090600160301b900461ffff166126d9565b600e5490915061ffff808316600160401b9092041610156125d157600e546040805161ffff600160401b9093049290921682525133917f7d2797fdf1b9f35ccf52e7b904a608332c1db1d8c7f2ff7f28ea7f2d6f87996c919081900360200190a2600e805469ffff00000000000000001916600160401b61ffff8416021790555b600191505090565b60006125f2601b54601a5461115690919063ffffffff16565b905090565b600061100a6126158361ffff1660095461158590919063ffffffff16565b6008549063ffffffff61114316565b600061100a6126328361205a565b83611b8d565b600e54601d5460009161100a916126619161ffff9081169161059c91871663ffffffff61158516565b601c549063ffffffff61114316565b61ffff8116600090815260286020908152604080832054602790925282205461100a9163ffffffff61115616565b600061100a6126c06305f5e10061059c601e548661158590919063ffffffff16565b611168565b81810161ffff808416908216101561115057fe5b600061ffff82161561276057600e5460009061270a9061ffff8581169164010000000090041663ffffffff61276816565b600e549091506000906127329061ffff8681169164010000000090041663ffffffff6127cc16565b61ffff1611156127595761275161ffff8216600163ffffffff6126c516565b91505061100d565b905061100d565b506001919050565b6000808261ffff161161277757fe5b60008261ffff168461ffff168161278a57fe5b0461ffff1690508261ffff168461ffff16816127a257fe5b0661ffff16818461ffff1602018461ffff16146127bb57fe5b8261ffff168461ffff16816111c257fe5b600061ffff82166127dc57600080fd5b8161ffff168361ffff16816127ed57fe5b069392505050565b508054600082559060005260206000209081019061168b9190612834565b50805460008255600f01601090049060005260206000209081019061168b91905b610c5e91905b8082111561284e576000815560010161283a565b509056fe566f6b656e205075626c69632d53616c6520686173206e6f742073746172746564207965742e417564697420455448207072696365206d7573742062652067726561746572207468616e207a65726f2ea165627a7a7230582092ce47e7211dd4afd7e07a98bc706fc961beaf3ee4e0595b25feb13e3b5805010029"
}