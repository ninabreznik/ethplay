{
  "address": "0x11f1c623c49a90c523f7e8875c592bba2b819f83",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IOAEXBDR",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity 0.5.4;\n\n\nlibrary SafeMath {\n\n    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        require(MAX_UINT / _a >= _b);\n        return _a * _b;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b != 0);\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(MAX_UINT - _a >= _b);\n        return _a + _b;\n    }\n\n}\n\ninterface AbcInterface {\n    function decimals() external view returns (uint8);\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n    function transfer(address _to, uint _value) external returns (bool);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the balance of.\n     * @return An uint256 representing the value owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the value of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the value of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The value to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified value of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The value of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the value of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the value of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The value of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the value of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The value of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an value of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The value that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n\n}\n\n\ncontract BurnableToken is StandardToken {\n\n    /**\n     * @dev Burns a specific value of tokens.\n     * @param value The value of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific value of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The value of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract PausableToken is StandardToken, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(spender, addedValue);\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(spender, subtractedValue);\n    }\n}\n\ncontract LockableToken is PausableToken {\n\tstruct LockInfo {\n\t\tuint256 amount;\n\t\tuint256 releaseTime;\n\t}\n\n\tmapping(address => LockInfo[]) public lockDetail;\n\tmapping(address => uint256) public transferLocked;\n\n\tevent LockToken(address indexed benefit, uint256 amount, uint256 releasetime);\n\tevent ReleaseToken(address indexed benefit, uint256 amount);\n\t\n\t/**\n     * @dev Transfers and locks tokens.\n     * @param to The address to transfer to.\n     * @param value The value to be transferred.\n     * @param lockdays The days of locking tokens.\n     */\n\tfunction transferAndLock(address to, uint256 value, uint256 lockdays) public whenNotPaused returns (bool) {\n\t\trelease(msg.sender);\n\t\trequire(to != address(0) && value != 0 && lockdays != 0);\n\t\tuint256 _releaseTime = now.add(lockdays.mul(1 days));\n\t\tlockDetail[to].push(LockInfo({amount:value, releaseTime:_releaseTime}));\n\t\tbalances[msg.sender] = balances[msg.sender].sub(value);\n\t\ttransferLocked[to] = transferLocked[to].add(value);\n\t\temit Transfer(msg.sender, to, value);\n\t\temit LockToken(to, value, _releaseTime);\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Rewrites function transfer, release tokens before transferring.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n\t\trelease(msg.sender);\n        return super.transfer(to, value);\n    }\n\n\t/**\n     * @dev Rewrites function transferFrom, release tokens before transferring.\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        release(from);\n        return super.transferFrom(from, to, value);\n    }\n\n\t/**\n     * @dev release tokens.\n     */\n\tfunction release(address benefit) public whenNotPaused {\n\t\tuint256 len = lockDetail[benefit].length;\n\t\tif( len == 0) return;\n\t\tuint256 totalReleasable = 0;\n\t\tfor(uint256 i = 0; i < len; i = i.add(1)){\n\t\t\tLockInfo memory tmp = lockDetail[benefit][i];\n\t\t\tif(tmp.releaseTime != 0 && now >= tmp.releaseTime){\n\t\t\t\ttotalReleasable = totalReleasable.add(tmp.amount);\n\t\t\t\tdelete lockDetail[benefit][i];\n\t\t\t}\n\t\t}\n\t\tif(totalReleasable == 0) return;\n\t\tbalances[benefit] = balances[benefit].add(totalReleasable);\n\t\ttransferLocked[benefit] = transferLocked[benefit].sub(totalReleasable);\n\t\tif(transferLocked[benefit] == 0)\n\t\tdelete lockDetail[benefit];\n\t\temit ReleaseToken(benefit, totalReleasable);\n\n\t}\n\n\t/**\n     * @dev Calculates the amount of releasable tokens.\n     */\n\tfunction releasableTokens(address benefit) public view returns(uint256) {\n\t\tuint256 len = lockDetail[benefit].length;\n\t\tif( len == 0) return 0;\n\t\tuint256 releasable = 0;\n\t\tfor(uint256 i = 0; i < len; i = i.add(1)){\n\t\t\tLockInfo memory tmp = lockDetail[benefit][i];\n\t\t\tif(tmp.releaseTime != 0 && now >= tmp.releaseTime){\n\t\t\t\treleasable = releasable.add(tmp.amount);\n\t\t\t}\n\t\t}\t\n\t\treturn releasable;\t\n\t}\n}\n\ncontract Token is LockableToken, BurnableToken {\n    string public name; // name of Token\n    string public symbol; // symbol of Token\n    uint8 public decimals;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n}\n\ncontract IOAEXBDR is Token {\n    struct Trx {\n        bool executed;\n        address from;\n        uint256 value;\n        address[] signers;\n    }\n\n    mapping(address => bool) public isSigner;\n    mapping(uint256 => Trx) public exchangeTrx;\n    address public AbcInstance;  // address of AbcToken\n    uint256 public requestSigners = 2;  // BDR => Abc need signers number\n    uint256 public applyCounts = 0;  // Sequence of exchange request\n    mapping(address => uint256) public exchangeLock;\n\n    event SetSigner(address indexed signer,bool isSigner);  // emit when add/remove signer\n    event ApplyExchangeToken(address indexed from,uint256 value,uint256 trxSeq);  // emit when exchange successful\n    event ConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer confirmed exchange request\n    event CancleConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer cancles confirmed exchange request\n    event CancleExchangeRequest(address indexed signer,uint256 indexed trxSeq);  // emit when signer/requester cancles exchange request\n    event TokenExchange(address indexed from,uint256 value,bool AbcExchangeBDR); // emit when Abc <=> Bdr,true:Abc => BDR,false:BDR => abc\n    event Mint(address indexed target,uint256 value);\n\n    modifier onlySigner() {\n        require(isSigner[msg.sender]);\n        _;\n    }\n    /**\n     * @dev initialize token info\n     * @param _name string The name of token\n     * @param _symbol string The symbol of token\n     * @param _decimals uint8 The decimals of token\n     */\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) Token(_name,_symbol,_decimals) public {\n    }\n\n    /**\n     * @dev rewrite transfer function，user can't transfer token to AbcToken's address directly\n     */\n    function transfer(address _to,uint256 _value) public returns (bool success) {\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\n        return super.transfer(_to,_value);\n    }\n\n    /**\n     * @dev rewrite transferFrom function，user can't transfer token to AbcToken's address directly\n     */\n    function transferFrom(address _from, address _to,uint256 _value) public returns (bool success) {\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\n        return super.transferFrom(_from,_to,_value);\n    }\n\n    /**\n     * @dev rewrite transferAndLock function，user can't transfer token to AbcToken's address directly\n     */\n    function transferAndLock(address _to, uint256 _value, uint256 _lockdays) public returns (bool success) {\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\n        return super.transferAndLock(_to,_value,_lockdays);\n    }   \n\n    /**\n     * @dev set AbcToken's address\n     */\n    function setAbcInstance(address _abc) public onlyOwner {\n        require(_abc != address(0));\n        AbcInstance = _abc;\n    }\n\n    /**\n     * @dev add/remove signers\n     * @param _signers address[] The array of signers to add/remove\n     * @param _addSigner bool true:add signers,false:remove:signers\n     */\n    function setSigners(address[] memory _signers,bool _addSigner) public onlyOwner {\n        for(uint256 i = 0;i< _signers.length;i++){\n            require(_signers[i] != address(0));\n            isSigner[_signers[i]] = _addSigner;\n            emit SetSigner(_signers[i],_addSigner);\n        }\n    }\n\n    /**\n     * @dev set the number of exchange request in order to execute\n     * @param _requestSigners uint256 The number of signers\n     */\n    function setrequestSigners(uint256 _requestSigners) public onlyOwner {\n        require(_requestSigners != 0);\n        requestSigners = _requestSigners;\n    }\n\n    /**\n     * @dev check whether the signer confirmed this exchange request\n     */\n    function isConfirmer(uint256 _trxSeq,address _signer) public view returns (bool) {\n        require(exchangeTrx[_trxSeq].from != address(0),\"trxSeq not exist\");\n        for(uint256 i = 0;i < exchangeTrx[_trxSeq].signers.length;i++){\n            if(exchangeTrx[_trxSeq].signers[i] == _signer){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev get how many signers that confirmed this exchange request\n     */\n    function getConfirmersLengthOfTrx(uint256 _trxSeq) public view returns (uint256) {\n        return exchangeTrx[_trxSeq].signers.length;\n    }\n\n    /**\n     * @dev get signers's address that confirmed this exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     * @param _index uint256 the index of signers\n     */\n    function getConfirmerOfTrx(uint256 _trxSeq,uint256 _index) public view returns (address) {\n        require(_index < getConfirmersLengthOfTrx(_trxSeq),\"out of range\");\n        return exchangeTrx[_trxSeq].signers[_index];\n    }\n\n    /**\n     * @dev apply BDR exchange Abc\n     * @param _value uint256 amount of BDR to exchange\n     * @return uint256 the sequence of exchange request\n     */\n    function applyExchangeToken(uint256 _value) public whenNotPaused returns (uint256) {\n        uint256 trxSeq = applyCounts;\n        require(exchangeTrx[trxSeq].from == address(0),\"trxSeq already exist\");\n        require(balances[msg.sender] >= _value);\n        exchangeTrx[trxSeq].executed = false;\n        exchangeTrx[trxSeq].from = msg.sender;\n        exchangeTrx[trxSeq].value = _value;\n        applyCounts = applyCounts.add(1);\n        balances[address(this)] = balances[address(this)].add(_value);\n        balances[exchangeTrx[trxSeq].from] = balances[exchangeTrx[trxSeq].from].sub(_value);\n        exchangeLock[exchangeTrx[trxSeq].from] = exchangeLock[exchangeTrx[trxSeq].from].add(_value);\n        emit ApplyExchangeToken(exchangeTrx[trxSeq].from,exchangeTrx[trxSeq].value,trxSeq);\n        emit Transfer(msg.sender,address(this),_value);\n        return trxSeq;\n    }\n\n    /**\n     * @dev signer confirms one exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function confirmExchangeTrx(uint256 _trxSeq) public onlySigner {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].signers.length < requestSigners,\"trx already has enough signers\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        require(isConfirmer(_trxSeq, msg.sender) == false,\"signer already confirmed\");\n        exchangeTrx[_trxSeq].signers.push(msg.sender);\n        emit ConfirmTrx(msg.sender, _trxSeq);\n    }\n\n    /**\n     * @dev signer cancel confirmed exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function cancelConfirm(uint256 _trxSeq) public onlySigner {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(isConfirmer(_trxSeq, msg.sender),\"Signer didn't confirm\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        uint256 len = exchangeTrx[_trxSeq].signers.length;\n        for(uint256 i = 0;i < len;i++){\n            if(exchangeTrx[_trxSeq].signers[i] == msg.sender){\n                exchangeTrx[_trxSeq].signers[i] = exchangeTrx[_trxSeq].signers[len.sub(1)] ;\n                exchangeTrx[_trxSeq].signers.length --;\n                break;\n            }\n        }\n        emit CancleConfirmTrx(msg.sender,_trxSeq);\n    }\n\n    /**\n     * @dev signer cancel exchange request\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function cancleExchangeRequest(uint256 _trxSeq) public {\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\n        require(isSigner[msg.sender] || exchangeTrx[_trxSeq].from == msg.sender);\n        balances[address(this)] = balances[address(this)].sub(exchangeTrx[_trxSeq].value);\n        balances[exchangeTrx[_trxSeq].from] = balances[exchangeTrx[_trxSeq].from].add(exchangeTrx[_trxSeq].value);\n        exchangeLock[exchangeTrx[_trxSeq].from] = exchangeLock[exchangeTrx[_trxSeq].from].sub(exchangeTrx[_trxSeq].value);\n        delete exchangeTrx[_trxSeq];\n        emit CancleExchangeRequest(msg.sender,_trxSeq);\n        emit Transfer(address(this),exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value);\n    }\n\n    /**\n     * @dev execute exchange request which confirmed by enough signers\n     * @param _trxSeq uint256 the Sequence of exchange request\n     */\n    function executeExchangeTrx(uint256 _trxSeq) public whenNotPaused{\n        address from = exchangeTrx[_trxSeq].from;\n        uint256 value = exchangeTrx[_trxSeq].value;\n        require(from != address(0),\"trxSeq not exist\");\n        require(exchangeTrx[_trxSeq].executed == false,\"trxSeq has executed\");\n        require(exchangeTrx[_trxSeq].signers.length >= requestSigners);\n        require(from == msg.sender|| isSigner[msg.sender]);\n        require(value <= balances[address(this)]);\n        _burn(address(this), value);\n        exchangeLock[from] = exchangeLock[from].sub(value);\n        exchangeTrx[_trxSeq].executed = true;\n        AbcInterface(AbcInstance).tokenFallback(from,value,bytes(\"\"));\n        emit TokenExchange(exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value,false);\n    }\n\n    /**\n     * @dev exchange Abc token to BDR token,only AbcInstance can invoke this function\n     */\n    function tokenFallback(address _from, uint _value, bytes memory) public {\n        require(msg.sender == AbcInstance);\n        require(_from != address(0));\n        require(_value > 0);\n        uint256 exchangeAmount = _value.mul(10**uint256(decimals)).div(10**uint256(AbcInterface(AbcInstance).decimals()));\n        _mint(_from, exchangeAmount);\n        emit Transfer(address(0x00),_from,exchangeAmount);\n        emit TokenExchange(_from,_value,true);\n    }\n\n    /**\n     * @dev mint BDR token\n     */\n    function _mint(address target, uint256 value ) internal {\n        balances[target] = balances[target].add(value);\n        totalSupply = totalSupply.add(value);\n        emit Mint(target,value);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000f494f4145582042445220544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003494f420000000000000000000000000000000000000000000000000000000000"
}