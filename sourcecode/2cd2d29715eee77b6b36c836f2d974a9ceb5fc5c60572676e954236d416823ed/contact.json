{
  "address": "0x29bef3878b85522ef2afa541dd7477c9e0a2c122",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherLife",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* ETHERLIFE INTERNATIONAL ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n* Web:               https://etherlife.io\n* Telegram_channel:  https://t.me/etherlife\n* EN  Telegram_chat: https://t.me/etherlife_eng\n* RU  Telegram_chat: https://t.me/EtherLife_rus\n* Email:             [emailÂ protected]\n* \n* \n*  - GAIN 4% - 0,5% per 24 HOURS\n*  - Life-long payments\n*  - The revolutionary reliability\n*  - Minimal contribution 0.1 eth\n*  - Currency and payment - ETH only\n*  - Contribution allocation schemes:\n*       - 89% payments;\n*       - 4% marketing;\n*       - 7% technical support & dev.\n*\n* HOW TO USE:\n*  1. Send from ETH wallet to the smart contract address 0x29BeF3878B85522Ef2AFA541dD7477c9e0a2c122 any amount from 0.1 ETH.\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address \n*     of your wallet.\n*  3a. Claim your profit by sending 0 ether transaction.\n*  OR\n*  3b. For reinvest, you need to deposit the amount that you want to reinvest and the \n*      accrued interest automatically summed to your new contribution.\n*\n* RECOMMEND\n* GAS LIMIT: 200000\n* GAS PRICE: https://ethgasstation.info/\n* \n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet. \n*\n* AFFILIATE PROGRAM:\n* 1 LEVEL - 2 %\n* 2 LEVEL - 1 %\n* 3 LEVEL - 0.5 %\n* 4 LEVEL - 0.25 %\n* 5 LEVEL - 0.25 %\n*\n* ATTENTION!\n* It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you \n* have private keys.\n*\n* Contracts reviewed and approved by octopus.\n*/\n\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract EtherLife\n{   \n    using SafeMath for uint;\n    address public owner;\n    \n    struct deposit {\n        uint time;\n        uint value;\n        uint timeOfLastWithdraw;\n    }\n    \n    mapping(address => deposit) public deposits;\n    mapping(address => address) public parents;\n    address[] public investors;\n    \n    uint public constant minDepositSum = 100 finney; // 0.1 ether;\n    \n    event Deposit(address indexed from, uint256 value, uint256 startTime);\n    event Withdraw(address indexed from, uint256 value);\n    event ReferrerBonus(address indexed from, address indexed to, uint8 level, uint256 value);\n    \n    constructor () public \n    {\n        owner = msg.sender;\n    }\n    \n    modifier checkSender() \n    {\n        require(msg.sender != address(0));\n        _;\n    }\n    \n    function bytesToAddress(bytes source) internal pure returns(address parsedAddress) \n    {\n        assembly {\n            parsedAddress := mload(add(source,0x14))\n        }\n        return parsedAddress;\n    }\n\n    function () checkSender public payable \n    {\n        if(msg.value == 0)\n        {\n            withdraw();\n            return;\n        }\n        \n        require(msg.value >= minDepositSum);\n        \n        uint bonus = checkReferrer(msg.sender, msg.value);\n        \n        payFee(msg.value);\n        addDeposit(msg.sender, msg.value, bonus);\n        \n        payRewards(msg.sender, msg.value);\n    }\n    \n    function getInvestorsLength() public view returns (uint)\n    {\n        return investors.length;\n    }\n    \n    function getParents(address investorAddress) public view returns (address[])\n    {\n        address[] memory refLevels = new address[](5);\n        address current = investorAddress;\n        \n        for(uint8 i = 0; i < 5; i++)\n        {\n             current = parents[current];\n             if(current == address(0)) break;\n             refLevels[i] = current;\n        }\n        \n        return refLevels;\n    }\n    \n    function calculateRewardForLevel(uint8 level, uint value) public pure returns (uint)\n    {\n        if(level == 1) return value.div(50);           // 2%\n        if(level == 2) return value.div(100);          // 1%\n        if(level == 3) return value.div(200);          // 0.5%\n        if(level == 4) return value.div(400);          // 0.25%\n        if(level == 5) return value.div(400);          // 0.25%\n        \n        return 0;\n    }\n    \n    function calculateWithdrawalSumForPeriod(uint period, uint depositValue, uint duration) public pure returns (uint)\n    {\n        if(period == 1) return depositValue * 4 / 100 * duration / 1 days;          // 4%\n        else if(period == 2) return depositValue * 3 / 100 * duration / 1 days;     // 3%\n        else if(period == 3) return depositValue * 2 / 100 * duration / 1 days;     // 2%\n        else if(period == 4) return depositValue / 100 * duration / 1 days;         // 1%\n        else if(period == 5) return depositValue / 200 * duration / 1 days;         // 0.5%\n        return 0;\n    }\n    \n    function calculateWithdrawalSum(uint currentTime, uint depositTime, uint depositValue, uint timeOfLastWithdraw) public pure returns (uint)\n    {\n        uint startTime = 0;\n        uint endTime = 0;\n        uint sum = 0;\n        int duration = 0;\n        \n        uint timeEndOfPeriod = 0;\n        uint timeEndOfPrevPeriod = 0;\n        \n        for(uint i = 1; i <= 5; i++)\n        {\n            timeEndOfPeriod = depositTime.add(i.mul(30 days));\n            \n            if(i == 1)\n            {\n                startTime = timeOfLastWithdraw;\n                endTime = currentTime > timeEndOfPeriod ? timeEndOfPeriod : currentTime;\n            }\n            else if(i == 5) \n            {\n                timeEndOfPrevPeriod = timeEndOfPeriod.sub(30 days);\n                startTime = timeOfLastWithdraw > timeEndOfPrevPeriod ? timeOfLastWithdraw : timeEndOfPrevPeriod;\n                endTime = currentTime;\n            }\n            else\n            {\n                timeEndOfPrevPeriod = timeEndOfPeriod.sub(30 days);\n                startTime = timeOfLastWithdraw > timeEndOfPrevPeriod ? timeOfLastWithdraw : timeEndOfPrevPeriod;\n                endTime = currentTime > timeEndOfPeriod ? timeEndOfPeriod : currentTime;    \n            }\n            \n            duration = int(endTime - startTime);\n            if(duration >= 0)\n            {\n                sum = sum.add(calculateWithdrawalSumForPeriod(i, depositValue, uint(duration)));\n                timeOfLastWithdraw = endTime;\n            }\n        }\n        \n        return sum;\n    }\n    \n    function checkReferrer(address investorAddress, uint weiAmount) internal returns (uint)\n    {\n        if(deposits[investorAddress].value == 0 && msg.data.length == 20)\n        {\n            address referrerAddress = bytesToAddress(bytes(msg.data));\n            require(referrerAddress != investorAddress);     \n            require(deposits[referrerAddress].value > 0);        \n            \n            parents[investorAddress] = referrerAddress;\n            return weiAmount / 100; // 1%\n        }\n        \n        return 0;\n    }\n    \n    function payRewards(address investorAddress, uint depositValue) internal\n    {   \n        address[] memory parentAddresses = getParents(investorAddress);\n        for(uint8 i = 0; i < parentAddresses.length; i++)\n        {\n            address parent = parentAddresses[i];\n            if(parent == address(0)) break;\n            \n            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);\n            parent.transfer(rewardValue);\n            \n            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);\n        }\n    }\n    \n    function addDeposit(address investorAddress, uint weiAmount, uint bonus) internal\n    {   \n        if(deposits[investorAddress].value == 0)\n        {\n            deposits[investorAddress].time = now;\n            deposits[investorAddress].timeOfLastWithdraw = deposits[investorAddress].time;\n            deposits[investorAddress].value = weiAmount.add(bonus);\n            investors.push(investorAddress);\n        }\n        else\n        {\n            payWithdraw(investorAddress);\n            deposits[investorAddress].value = deposits[investorAddress].value.add(weiAmount);\n        }\n        \n        emit Deposit(msg.sender, msg.value, deposits[investorAddress].timeOfLastWithdraw);\n    }\n    \n    function payFee(uint weiAmount) internal\n    {\n        uint fee = weiAmount.mul(11).div(100); // 11%\n        owner.transfer(fee);\n    }\n    \n    function calculateNewTime(uint startTime, uint endTime) public pure returns (uint) \n    {\n        uint daysCount = endTime.sub(startTime).div(1 days);\n        return startTime.add(daysCount.mul(1 days));\n    }\n    \n    function payWithdraw(address to) internal\n    {\n        require(deposits[to].value > 0);\n        require(now - deposits[to].timeOfLastWithdraw >= 1 days);\n        \n        uint sum = calculateWithdrawalSum(now, deposits[to].time, deposits[to].value, deposits[to].timeOfLastWithdraw);\n        require(sum > 0);\n        \n        deposits[to].timeOfLastWithdraw = now;\n        \n        to.transfer(sum);\n        emit Withdraw(to, sum);\n    }\n    \n    function withdraw() checkSender public\n    {\n        payWithdraw(msg.sender);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610c61806100326000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318b13fb2811461011d5780633ccfd60b1461015a5780633feb5f2b1461017157806382f3dbe21461018957806389be2334146101b05780638da5cb5b146101ce5780639687c181146101e3578063a6567a9a14610204578063a9fae4221461021f578063e3cc65e214610290578063ebb9ba80146102a5578063fc7e286d146102c3575b60003315156100c757600080fd5b3415156100db576100d6610302565b61011a565b67016345785d8a00003410156100f057600080fd5b6100fa3334610319565b905061010534610416565b61011033348361047a565b61011a33346105ef565b50005b34801561012957600080fd5b5061013e600160a060020a03600435166106ef565b60408051600160a060020a039092168252519081900360200190f35b34801561016657600080fd5b5061016f610302565b005b34801561017d57600080fd5b5061013e60043561070a565b34801561019557600080fd5b5061019e610732565b60408051918252519081900360200190f35b3480156101bc57600080fd5b5061019e60043560243560443561073e565b3480156101da57600080fd5b5061013e6107d1565b3480156101ef57600080fd5b5061019e6004356024356044356064356107e0565b34801561021057600080fd5b5061019e6004356024356108ef565b34801561022b57600080fd5b50610240600160a060020a0360043516610936565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561027c578181015183820152602001610264565b505050509050019250505060405180910390f35b34801561029c57600080fd5b5061019e6109d9565b3480156102b157600080fd5b5061019e60ff600435166024356109df565b3480156102cf57600080fd5b506102e4600160a060020a0360043516610a85565b60408051938452602084019290925282820152519081900360600190f35b33151561030e57600080fd5b61031733610aa5565b565b600160a060020a03821660009081526001602081905260408220015481901580156103445750601436145b1561040a576103836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610bcb945050505050565b9050600160a060020a03808216908516141561039e57600080fd5b600160a060020a038116600090815260016020819052604082200154116103c457600080fd5b600160a060020a038481166000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905560648304915061040f565b600091505b5092915050565b600061043a606461042e84600b63ffffffff610bd216565b9063ffffffff610bfd16565b60008054604051929350600160a060020a03169183156108fc0291849190818181858888f19350505050158015610475573d6000803e3d6000fd5b505050565b600160a060020a03831660009081526001602081905260409091200154151561054157600160a060020a0383166000908152600160205260409020428082556002909101556104cf828263ffffffff610c1416565b600160a060020a0384166000818152600160208190526040822081019390935560038054938401815590527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909101805473ffffffffffffffffffffffffffffffffffffffff19169091179055610595565b61054a83610aa5565b600160a060020a03831660009081526001602081905260409091200154610577908363ffffffff610c1416565b600160a060020a038416600090815260016020819052604090912001555b600160a060020a03831660009081526001602090815260409182902060020154825134815291820152815133927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a2505050565b606060008060006105ff86610936565b9350600092505b83518360ff1610156106e757838360ff1681518110151561062357fe5b602090810290910101519150600160a060020a0382161515610644576106e7565b61065183600101866109df565b604051909150600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561068a573d6000803e3d6000fd5b506040805160ff60018601168152602081018390528151600160a060020a0380861693908a16927f376b851abe2d6c4f73814c680eca625154aaa6aaeb7be7dcaf5dbee98c4295f2929081900390910190a3600190920191610606565b505050505050565b600260205260009081526040902054600160a060020a031681565b600380548290811061071857fe5b600091825260209091200154600160a060020a0316905081565b67016345785d8a000081565b600083600114156107685762015180826064600486025b040281151561076057fe5b0490506107ca565b8360021415610781576201518082606460038602610755565b836003141561079a576201518082606460028602610755565b83600414156107b0576201518082606485610755565b83600514156107c657620151808260c885610755565b5060005b9392505050565b600054600160a060020a031681565b600080808080808060015b600581116108df576108166108098262278d0063ffffffff610bd216565b8c9063ffffffff610c1416565b9250806001141561083a57889650828c11610831578b610833565b825b95506108a9565b8060051415610871576108568362278d0063ffffffff610c2316565b91508189116108655781610867565b885b96508b95506108a9565b6108848362278d0063ffffffff610c2316565b91508189116108935781610895565b885b9650828c116108a4578b6108a6565b825b95505b8686039350600084126108d7576108d16108c4828c8761073e565b869063ffffffff610c1416565b94508598505b6001016107eb565b50929a9950505050505050505050565b6000806109096201518061042e858763ffffffff610c2316565b905061092e610921826201518063ffffffff610bd216565b859063ffffffff610c1416565b949350505050565b60408051600580825260c0820190925260609182916000918291906020820160a080388339019050509250849150600090505b60058160ff1610156109d057600160a060020a039182166000908152600260205260409020549091169081151561099f576109d0565b81838260ff168151811015156109b157fe5b600160a060020a03909216602092830290910190910152600101610969565b50909392505050565b60035490565b60008260ff1660011415610a05576109fe82603263ffffffff610bfd16565b9050610a7f565b8260ff1660021415610a22576109fe82606463ffffffff610bfd16565b8260ff1660031415610a3f576109fe8260c863ffffffff610bfd16565b8260ff1660041415610a5d576109fe8261019063ffffffff610bfd16565b8260ff1660051415610a7b576109fe8261019063ffffffff610bfd16565b5060005b92915050565b600160208190526000918252604090912080549181015460029091015483565b600160a060020a0381166000908152600160208190526040822001548110610acc57600080fd5b600160a060020a0382166000908152600160205260409020600201546201518042919091031015610afc57600080fd5b600160a060020a0382166000908152600160208190526040909120805491810154600290910154610b3092429290916107e0565b905060008111610b3f57600080fd5b600160a060020a038216600081815260016020526040808220426002909101555183156108fc0291849190818181858888f19350505050158015610b87573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050565b6014015190565b600080831515610be5576000915061040f565b50828202828482811515610bf557fe5b04146107ca57fe5b6000808284811515610c0b57fe5b04949350505050565b6000828201838110156107ca57fe5b600082821115610c2f57fe5b509003905600a165627a7a72305820801cec58c94f64926930c625f76aee820755e5da1cc1335ad4a420839b42ef130029"
}