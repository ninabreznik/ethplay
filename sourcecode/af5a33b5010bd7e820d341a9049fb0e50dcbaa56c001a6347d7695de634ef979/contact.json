{
  "address": "0xba95be962235de79436057a0987bd8dfea87cbd3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWalletCreator",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\n// Multi-signature wallet for easily transfers of ETH and ERC20 tokens\n// Developed by Phenom.Team <[emailÂ protected]>\npragma solidity ^0.4.24;\n\n/**\n *   @title ERC20\n *   @dev Standart ERC20 token interface\n */\n\n /**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n      /**\n       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n       * account.\n       */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n      /**\n       * @dev Throws if called by any account other than the owner.\n       */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"msg.sender is not Owner\");\n        _;\n    }\n\n      /**\n       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n       * @param newOwner The address to transfer ownership to.\n       */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Owner must not be zero-address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n      /**\n       * @dev Allows the current owner to relinquish control of the contract.\n       */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\ncontract ERC20 {\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping (address => uint)) allowed;\n\n    function balanceOf(address _owner) public view returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public  returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n} \n\n/// @title Multisignature wallet\ncontract MultiSigWallet {\n\n    //Events\n    event TransactionCreated(uint indexed _txId, uint indexed _timestamp, address indexed _creator);\n    event TranscationSended(uint indexed _txId, uint indexed _timestamp);\n    event TranscationSigned(uint indexed _txId, uint indexed _timestamp, address indexed _signer);\n    event TranscationUnsigned(uint indexed _txId, uint indexed _timestamp, address indexed _signer);\n    event Deposit(uint _amount, address indexed _sender);\n    \n    //Trunsaction struct\n    struct Transcation {\n        address to;\n        address tokenAddress; // if tx is ether transfer  token address equals address(0) \n        uint amount;\n        uint confirmations;\n        bool done;\n        mapping (address => bool) confirmed;\n    }\n\n    //adresses of signers\n    address[] public signers;\n    \n    //numbers of signs to perform tx\n    uint public requiredConfirmations;\n    \n    //trancations count\n    uint public txCount;\n    \n    //mappings\n    mapping (uint => Transcation) public transactions; // trancations\n    mapping (address => bool) isSigner; // signers\n\n    // name of the wallet\n    string public name;\n    \n\n    modifier onlySigners {\n        require(isSigner[msg.sender], \"msg.sender is not Signer\");\n        _;\n    } \n\n    \n   /**\n    *   @dev Contract constructor sets signers list, required number of confirmations and name of the wallet.\n    *   @param _signers                     signers list\n    *   @param _requiredConfirmations       required number of confirmations\n    *   @param _name                        name of the wallet\n    */\n    constructor(\n        address[] _signers, \n        uint _requiredConfirmations,\n        string _name\n    ) \n    public {\n        require( \n            _requiredConfirmations <= _signers.length && \n            _requiredConfirmations > 0,\n            \"required confirmations must be > 0 and less than number of signers\"\n        );\n        requiredConfirmations = _requiredConfirmations;\n        for (uint i = 0; i < _signers.length; i++) {\n            signers.push(_signers[i]);\n            isSigner[_signers[i]] = true;\n        }\n        name = _name;\n    }\n\n   /**\n    *   @dev Fallback function\n    */\n    function() public payable {\n        require(msg.value > 0, \"value must be > 0\");\n        emit Deposit(msg.value, msg.sender);\n    }\n    \n    function getSigners() public view returns (address[]) {\n        return signers;\n    }\n\n   /**\n    *   @dev Allows to create a new transaction\n    */\n    function createTransaction(\n        address _to, \n        address _tokenAddress,\n        uint _amount\n    ) \n    public \n    onlySigners {\n        txCount++;\n        transactions[txCount] = Transcation(\n            _to,\n            _tokenAddress,\n            _amount,\n            0,\n            false\n        );\n        emit TransactionCreated(txCount, now, msg.sender);\n        signTransaction(txCount);\n    }\n\n   /**\n    *   @dev Allows to sign a transaction\n    */\n    function signTransaction(uint _txId) public  onlySigners {\n        require(!transactions[_txId].confirmed[msg.sender] && _txId <= txCount, \"must be a valid unsigned tx\");\n        transactions[_txId].confirmed[msg.sender] = true;\n        transactions[_txId].confirmations++;\n        emit TranscationSigned(_txId, now, msg.sender);\n        if (transactions[_txId].confirmations >= requiredConfirmations) {\n            _sendTransaction(_txId);\n      }\n    }\n    \n    function getTransactionsId(\n        bool _pending, \n        bool _done,\n        bool _tokenTransfers,\n        bool _etherTransfers, \n        uint _tailSize\n    ) \n    public \n    view returns(uint[] _txIdList) {\n        uint[] memory tempList = new uint[](txCount);\n        uint count = 0;\n        uint id = txCount;\n        while(id > 0 && count < _tailSize) {\n            if ((_pending && !transactions[id].done || _done && transactions[id].done) && \n                (_tokenTransfers && transactions[id].tokenAddress != address(0) || \n                 _etherTransfers && transactions[id].tokenAddress == address(0))\n                ) \n                {\n                tempList[count] = id;\n                count++;\n                }\n            id--;\n        }\n        _txIdList = new uint[](count);\n        for (uint i = 0; i < count; i++) {\n            _txIdList[i] = tempList[i];\n        }\n    }\n\n    /*\n    *   @dev Allows to check whether tx is signed by signer\n    */\n    function isSigned(uint _txId, address _signer) \n        public\n        view\n        returns (bool _isSigned) \n    {\n        _isSigned = transactions[_txId].confirmed[_signer];\n    }\n    \n    function unsignTransaction(uint _txId) external onlySigners {\n        require(\n            transactions[_txId].confirmed[msg.sender] && \n            !transactions[_txId].done,\n            \"must be a valid signed tx\"\n        );\n        transactions[_txId].confirmed[msg.sender] = false;\n        transactions[_txId].confirmations--;\n        emit TranscationUnsigned(_txId, now, msg.sender);\n    }\n\n    //executing tx\n    function _sendTransaction(uint _txId) private {\n        require(!transactions[_txId].done, \"transaction must not be done\");\n        transactions[_txId].done = true;\n        if ( transactions[_txId].tokenAddress == address(0)) {\n            transactions[_txId].to.transfer(transactions[_txId].amount);\n        } else {\n            ERC20 token = ERC20(transactions[_txId].tokenAddress);\n            require(token.transfer(transactions[_txId].to, transactions[_txId].amount), \"token transfer failded\");\n        }\n        emit TranscationSended(_txId, now);\n    }\n\n}\n\n\n/// @title Multisignature wallet factory\ncontract MultiSigWalletCreator is Ownable() {\n\n    // wallets\n    mapping(address => bool) public isMultiSigWallet;\n\n    mapping(address => address[]) public wallets;\n\n    mapping(address => uint) public numberOfWallets;\n\n    // information about system\n    string public currentSystemInfo;\n\n    event walletCreated(address indexed _creator, address indexed _wallet);\n\n    function createMultiSigWallet(\n        address[] _signers, \n        uint _requiredConfirmations,\n        string _name\n        )\n        public\n        returns (address wallet)\n    {\n        wallet = new MultiSigWallet(_signers, _requiredConfirmations, _name);\n        isMultiSigWallet[wallet] = true;    \n        for (uint i = 0; i < _signers.length; i++) {\n            wallets[_signers[i]].push(wallet);\n            numberOfWallets[_signers[i]]++;\n        }\n        emit walletCreated(msg.sender, wallet);\n    }\n\n    function setCurrentSystemInfo(string _info) public onlyOwner {\n        currentSystemInfo = _info;\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612751806100536000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632c4b1bd21461009e578063353e65e9146100f95780633983e2d11461018657806342ea120614610216578063715018a61461030c57806372eb5662146103235780638da5cb5b1461038c578063eafa9920146103e3578063f2fde38b1461043a575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061047d565b604051808215151515815260200191505060405180910390f35b34801561010557600080fd5b50610144600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061049d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019257600080fd5b5061019b6104ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101db5780820151818401526020810190506101c0565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022257600080fd5b506102ca6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610588565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031857600080fd5b50610321610867565b005b34801561032f57600080fd5b5061038a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506109d2565b005b34801561039857600080fd5b506103a1610ab0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ef57600080fd5b50610424600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ad5565b6040518082815260200191505060405180910390f35b34801561044657600080fd5b5061047b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aed565b005b60016020528060005260406000206000915054906101000a900460ff1681565b6002602052816000526040600020818154811015156104b857fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105805780601f1061055557610100808354040283529160200191610580565b820191906000526020600020905b81548152906001019060200180831161056357829003601f168201915b505050505081565b600080848484610596610d14565b808060200184815260200180602001838103835286818151815260200191508051906020019060200280838360005b838110156105e05780820151818401526020810190506105c5565b50505050905001838103825284818151815260200191508051906020019080838360005b8381101561061f578082015181840152602081019050610604565b50505050905090810190601f16801561064c5780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f080158015610670573d6000803e3d6000fd5b50915060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b8451811015610805576002600086838151811015156106ea57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506003600086838151811015156107a457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555080806001019150506106cf565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fce08025bff40e98963b3c26173339c34e449347b25795b4fc970ffd3c1368fea60405160405180910390a3509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6d73672e73656e646572206973206e6f74204f776e657200000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6d73672e73656e646572206973206e6f74204f776e657200000000000000000081525060200191505060405180910390fd5b8060049080519060200190610aac929190610d25565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6d73672e73656e646572206973206e6f74204f776e657200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4f776e6572206d757374206e6f74206265207a65726f2d61646472657373000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60405161195b8062000dcb83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d6657805160ff1916838001178555610d94565b82800160010185558215610d94579182015b82811115610d93578251825591602001919060010190610d78565b5b509050610da19190610da5565b5090565b610dc791905b80821115610dc3576000816000905550600101610dab565b5090565b90560060806040523480156200001157600080fd5b506040516200195b3803806200195b8339810180604052810190808051820192919060200180519060200190929190805182019291905050506000835183111580156200005e5750600083115b15156200011f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260428152602001807f726571756972656420636f6e6669726d6174696f6e73206d757374206265203e81526020017f203020616e64206c657373207468616e206e756d626572206f66207369676e6581526020017f727300000000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b82600181905550600090505b83518110156200023157600084828151811015156200014657fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600460008684815181101515620001c857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506200012b565b81600590805190602001906200024992919062000254565b505050505062000303565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029757805160ff1916838001178555620002c8565b82800160010185558215620002c8579182015b82811115620002c7578251825591602001919060010190620002aa565b5b509050620002d79190620002db565b5090565b6200030091905b80821115620002fc576000816000905550600101620002e2565b5090565b90565b61164880620003136000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101775780630b826afa146102075780632079fb9a146102745780633c540687146102e15780633e6d21fa1461030c5780635d9ec2101461037157806382e717f71461039e57806394cf795e146103c95780639a75755d146104355780639ace38c2146104e7578063dc61c866146105a0575b600034111515610127576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f76616c7565206d757374206265203e203000000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a53346040518082815260200191505060405180910390a2005b34801561018357600080fd5b5061018c6105cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cc5780820151818401526020810190506101b1565b50505050905090810190601f1680156101f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021357600080fd5b50610272600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061066b565b005b34801561028057600080fd5b5061029f600480360381019080803590602001909291905050506108c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ed57600080fd5b506102f6610905565b6040518082815260200191505060405180910390f35b34801561031857600080fd5b5061035760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061090b565b604051808215151515815260200191505060405180910390f35b34801561037d57600080fd5b5061039c60048036038101908080359060200190929190505050610976565b005b3480156103aa57600080fd5b506103b3610c20565b6040518082815260200191505060405180910390f35b3480156103d557600080fd5b506103de610c26565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610421578082015181840152602081019050610406565b505050509050019250505060405180910390f35b34801561044157600080fd5b5061049060048036038101908080351515906020019092919080351515906020019092919080351515906020019092919080351515906020019092919080359060200190929190505050610cb4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d35780820151818401526020810190506104b8565b505050509050019250505060405180910390f35b3480156104f357600080fd5b5061051260048036038101908080359060200190929190505050610f24565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b3480156105ac57600080fd5b506105cb60048036038101908080359060200190929190505050610fa7565b005b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b505050505081565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561072c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6d73672e73656e646572206973206e6f74205369676e6572000000000000000081525060200191505060405180910390fd5b60026000815480929190600101919050555060a0604051908101604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001600081526020016000151581525060036000600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16426002547f106084fb46505c06958323263745ad47e9941babc295f2754ffb90467add480360405160405180910390a46108c2600254610976565b505050565b6000818154811015156108d657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60006003600084815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6d73672e73656e646572206973206e6f74205369676e6572000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610aa757506002548111155b1515610b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6d75737420626520612076616c696420756e7369676e6564207478000000000081525060200191505060405180910390fd5b60016003600083815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000828152602001908152602001600020600301600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff1642827f20351c8c9015098c2e04c780f0f16af7e7a6db3ba3d5d7ce101cb365b987ec9b60405160405180910390a46001546003600083815260200190815260200160002060030154101515610c1d57610c1c81611245565b5b50565b60015481565b60606000805480602002602001604051908101604052809291908181526020018280548015610caa57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c60575b5050505050905090565b6060806000806000600254604051908082528060200260200182016040528015610ced5781602001602082028038833980820191505090505b5093506000925060025491505b600082118015610d0957508583105b15610e9757898015610d3c57506003600083815260200190815260200160002060040160009054906101000a900460ff16155b80610d705750888015610d6f57506003600083815260200190815260200160002060040160009054906101000a900460ff165b5b8015610e5e5750878015610de75750600073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b80610e5d5750868015610e5c5750600073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b5b15610e8957818484815181101515610e7257fe5b906020019060200201818152505082806001019350505b818060019003925050610cfa565b82604051908082528060200260200182016040528015610ec65781602001602082028038833980820191505090505b509450600090505b82811015610f17578381815181101515610ee457fe5b906020019060200201518582815181101515610efc57fe5b90602001906020020181815250508080600101915050610ece565b5050505095945050505050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611068576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6d73672e73656e646572206973206e6f74205369676e6572000000000000000081525060200191505060405180910390fd5b6003600082815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156110f657506003600082815260200190815260200160002060040160009054906101000a900460ff16155b151561116a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6d75737420626520612076616c6964207369676e65642074780000000000000081525060200191505060405180910390fd5b60006003600083815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600082815260200190815260200160002060030160008154809291906001900391905055503373ffffffffffffffffffffffffffffffffffffffff1642827f17326ac4abd5d71c439093d3fbeae93c4e67588931d9927d8ec3b6acb94fecc260405160405180910390a450565b60006003600083815260200190815260200160002060040160009054906101000a900460ff161515156112e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f7472616e73616374696f6e206d757374206e6f7420626520646f6e650000000081525060200191505060405180910390fd5b60016003600084815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611412576003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60036000858152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561140c573d6000803e3d6000fd5b506115ea565b6003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036000868152602001908152602001600020600201546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050506040513d602081101561156457600080fd5b810190808051906020019092919050505015156115e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f746f6b656e207472616e73666572206661696c6465640000000000000000000081525060200191505060405180910390fd5b5b42827fc32fe1a70d43a1520d740277a4a049319f0ade6f28bc3e6ed2209fd2c4867f1d60405160405180910390a350505600a165627a7a723058207e1c6cb7f37f5c071c0892ab431b75c85c25ccd4f986a454775e9c9bdd0745c00029a165627a7a723058201e10e99d6228ce2e2c5b2c54b72dd52232f44148801daed15efcfca55bac0afd0029"
}