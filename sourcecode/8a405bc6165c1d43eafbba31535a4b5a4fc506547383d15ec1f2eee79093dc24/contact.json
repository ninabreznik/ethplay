{
  "address": "0x6693bc7a3f8875b36c9bbe57c4917a1506e5a327",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ONOSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity ^0.4.24;\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n\t    uint\t \t      wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf( address who ) public view returns (uint value);\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\n\n    function transfer( address to, uint value) public returns (bool ok);\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\n    function approve( address spender, uint value ) public returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public constant returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public{\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth\n    {\n        require(owner_ != address(0));\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        assert(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    modifier authorized(bytes4 sig) {\n        assert(isAuthorized(msg.sender, sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n    \n}\n\ncontract DSExec {\n    function tryExec( address target, bytes calldata, uint value)\n             internal\n             returns (bool call_ret)\n    {\n        return target.call.value(value)(calldata);\n    }\n    function exec( address target, bytes calldata, uint value)\n             internal\n    {\n        if(!tryExec(target, calldata, value)) {\n            revert();\n        }\n    }\n\n    // Convenience aliases\n    function exec( address t, bytes c )\n        internal\n    {\n        exec(t, c, 0);\n    }\n    function exec( address t, uint256 v )\n        internal\n    {\n        bytes memory c; exec(t, c, v);\n    }\n    function tryExec( address t, bytes c )\n        internal\n        returns (bool)\n    {\n        return tryExec(t, c, 0);\n    }\n    function tryExec( address t, uint256 v )\n        internal\n        returns (bool)\n    {\n        bytes memory c; return tryExec(t, c, v);\n    }\n}\n\ncontract DSMath {\n    \n    /*\n    standard uint256 functions\n     */\n\n    function add(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        assert(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        z = x / y;\n    }\n\n    function min(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    uint128 functions (h is for half)\n     */\n\n\n    function hadd(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function hsub(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function hmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        assert(y == 0 || (z = x * y) / y == x);\n    }\n\n    function hdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        z = x / y;\n    }\n\n    function hmin(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        return x <= y ? x : y;\n    }\n    function hmax(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        return x >= y ? x : y;\n    }\n\n\n    /*\n    int256 functions\n     */\n\n    function imin(int256 x, int256 y) pure internal returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) pure internal returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    WAD math\n     */\n\n    uint128 constant WAD = 10 ** 18;\n\n    function wadd(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function wsub(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function wmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        z = cast(add(mul(uint256(x), y), WAD/2) / WAD);\n    }\n\n    function wdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        z = cast(add(mul(uint256(x), WAD), y/2) / y);\n    }\n\n    function wmin(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function wmax(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    /*\n    RAY math\n     */\n\n    uint128 constant RAY = 10 ** 27;\n\n    function radd(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function rsub(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function rmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        z = cast(add(mul(uint256(x), y), RAY/2) / RAY);\n    }\n\n    function rdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n        z = cast(add(mul(uint256(x), RAY), y/2) / y);\n    }\n\n    function rpow(uint128 x, uint64 n) pure internal returns (uint128 z) {\n        // This famous algorithm is called \"exponentiation by squaring\"\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\n        //\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\n        //\n        // These facts are why it works:\n        //\n        //  If n is even, then x^n = (x^2)^(n/2).\n        //  If n is odd,  then x^n = x * x^(n-1),\n        //   and applying the equation for even x gives\n        //    x^n = x * (x^2)^((n-1) / 2).\n        //\n        //  Also, EVM division is flooring and\n        //    floor[(n-1) / 2] = floor[n / 2].\n\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n\n    function rmin(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function rmax(uint128 x, uint128 y) pure internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    function cast(uint256 x) pure internal returns (uint128 z) {\n        assert((z = uint128(x)) == x);\n    }\n\n}\n\ncontract DSStop is DSAuth, DSNote {\n\n    bool public stopped;\n\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n    \n    constructor(uint256 supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint256) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint256) {\n        return _approvals[src][guy];\n    }\n    \n    function transfer(address dst, uint wad) public returns (bool) {\n        assert(_balances[msg.sender] >= wad);\n        \n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _balances[dst] = add(_balances[dst], wad);\n        \n        emit Transfer(msg.sender, dst, wad);\n        \n        return true;\n    }\n    \n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n        assert(_balances[src] >= wad);\n        assert(_approvals[src][msg.sender] >= wad);\n        \n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n        \n        emit Transfer(src, dst, wad);\n        \n        return true;\n    }\n    \n    function approve(address guy, uint256 wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n        \n        emit Approval(msg.sender, guy, wad);\n        \n        return true;\n    }\n\n}\n\n\ncontract DSToken is DSTokenBase(0), DSStop {\n    bytes32  public  symbol;\n    bytes32  public  name;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n    uint256  public  MAX_MINT_NUMBER = 1000*10**26;\n\n    constructor(bytes32 symbol_, bytes32 name_) public {\n        symbol = symbol_;\n        name = name_;\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) public auth stoppable note {\n        assert (add(_supply, wad) <= MAX_MINT_NUMBER);\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) public auth stoppable note {\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n}\n\ncontract DSAuthList is DSAuth {\n    mapping(address => bool) public whitelist;\n    mapping(address => bool) public adminlist;\n\n    modifier onlyIfWhitelisted\n    {\n        assert(whitelist[msg.sender] == true);\n        _;\n    }\n\n    modifier onlyIfAdmin\n    {\n        assert(adminlist[msg.sender] == true);\n        _;\n    }\n\n    function addAdminList(address[] addresses) public auth\n    {\n        for (uint256 i=0; i < addresses.length; i++)\n        {\n            adminlist[addresses[i]] = true;\n        }\n    }\n\n    function removeAdminList(address[] addresses) public auth\n    {\n        for (uint256 i=0; i < addresses.length; i++)\n        {\n            adminlist[addresses[i]] = false;\n        }\n    }\n\n    function addWhiteList(address[] addresses) public onlyIfAdmin\n    {\n        for (uint256 i=0; i < addresses.length; i++)\n        {\n            whitelist[addresses[i]] = true;\n        }\n    }\n\n    function removeWhiteList(address[] addresses) public onlyIfAdmin\n    {\n        for (uint256 i=0; i < addresses.length; i++)\n        {\n            whitelist[addresses[i]] = false;\n        }\n    }\n}\n\ncontract ONOSale is DSExec, DSMath, DSAuthList {\n    DSToken  public  ONO;                  // The ONO token itself\n    uint128  public  totalSupply;          // Total ONO amount created\n    uint128  public  foundersAllocation;   // Amount given to founders\n    string   public  foundersKey;          // Public key of founders\n\n    uint     public  openTime;             // Time of window 0 opening\n    uint     public  createFirstRound;       // Tokens sold in window 0\n\n    uint     public  startTime;            // Time of window 1 opening\n    uint     public  numberOfRounds;         // Number of windows after 0\n    uint     public  createPerRound;         // Tokens sold in each window\n\n    address  public  founderAddr = 0xF9BaaA91e617dF1dE6c2386b789B401c422E9AB1;\n    address  public  burnAddr    = 0xA3Ad4EFDd5719eAed1B0F2e12c0D7368a6D11037;\n\n    mapping (uint => uint)                       public  dailyTotals;\n    mapping (uint => mapping (address => uint))  public  userBuys;\n    mapping (uint => mapping (address => bool))  public  claimed;\n    mapping (address => string)                  public  keys;\n\n    mapping (uint => address[]) public userBuysArray;\n    mapping (uint => bool) public burned; //In one round, If the getted eth insufficient, the remain token will be burned\n\n    event LogBuy      (uint window, address user, uint amount);\n    event LogClaim    (uint window, address user, uint amount);\n    event LogMint     (address user, uint amount);\n    event LogBurn     (uint window, address user, uint amount);\n    event LogRegister (address user, string key);\n    event LogCollect  (uint amount);\n\n    constructor(\n        uint     _numberOfRounds,\n        uint128  _totalSupply,\n        uint128  _firstRoundSupply,\n        uint     _openTime,\n        uint     _startTime,\n        uint128  _foundersAllocation,\n        string   _foundersKey\n    ) public {\n        numberOfRounds     = _numberOfRounds;\n        totalSupply        = _totalSupply;\n        openTime           = _openTime;\n        startTime          = _startTime;\n        foundersAllocation = _foundersAllocation;\n        foundersKey        = _foundersKey;\n\n        createFirstRound = _firstRoundSupply;\n        createPerRound = div(\n            sub(sub(totalSupply, foundersAllocation), createFirstRound),\n            numberOfRounds\n        );\n\n        assert(numberOfRounds > 0);\n        assert(totalSupply > foundersAllocation);\n        assert(openTime < startTime);\n    }\n\n    function initialize(DSToken ono) public auth {\n        assert(address(ONO) == address(0));\n        assert(ono.owner() == address(this));\n        assert(ono.authority() == DSAuthority(0));\n        assert(ono.totalSupply() == 0);\n\n        ONO = ono;\n        ONO.mint(totalSupply);\n\n        ONO.push(founderAddr, foundersAllocation);\n        keys[founderAddr] = foundersKey;\n\n        emit LogRegister(founderAddr, foundersKey);\n    }\n\n    function time() public constant returns (uint) {\n        return block.timestamp;\n    }\n\n    function currRound() public constant returns (uint) {\n        return roundFor(time());\n    }\n\n    function roundFor(uint timestamp) public constant returns (uint) {\n        return timestamp < startTime\n            ? 0\n            : sub(timestamp, startTime) / 71 hours + 1;\n    }\n\n    function createOnRound(uint round) public constant returns (uint) {\n        return round == 0 ? createFirstRound : createPerRound;\n    }\n\n    function () public payable {\n        buy();\n    }\n\n    function claim(uint round) public {\n        claimAddress(msg.sender, round);\n    }\n\n    function claimAll() public {\n        for (uint i = 0; i < currRound(); i++) {\n            claim(i);\n        }\n    }\n\n    // Value should be a public key.  Read full key import policy.\n    // Manually registering requires a base58\n    // encoded using the STEEM, BTS, or ONO public key format.\n    function register(string key) public {\n        assert(currRound() <=  numberOfRounds + 1);\n        assert(bytes(key).length <= 64);\n\n        keys[msg.sender] = key;\n\n        emit LogRegister(msg.sender, key);\n    }\n\n    function buy() public payable onlyIfWhitelisted{\n        \n        uint round = currRound();\n        \n        assert(time() >= openTime && round <= numberOfRounds);\n        assert(msg.value >= 0.1 ether);\n\n        userBuys[round][msg.sender] = add(userBuys[round][msg.sender], msg.value);\n        dailyTotals[round] = add(dailyTotals[round], msg.value);\n        \n        bool founded = false;\n        for (uint i = 0; i < userBuysArray[round].length; i++) {\n            address target = userBuysArray[round][i];\n            if (target == msg.sender) {\n                founded = true;\n                break;\n            }\n        }\n\n        if (founded == false) {\n            userBuysArray[round].push(msg.sender);\n        }\n\n        emit LogBuy(round, msg.sender, msg.value);\n    }\n\n    function claimAddresses(address[] addresses, uint round) public onlyIfAdmin {\n        uint arrayLength = addresses.length;\n        for (uint i=0; i < arrayLength; i++) {\n            claimAddress(addresses[i], round);\n        }\n    }\n\n    function claimAddress(address addr, uint round) public {\n        assert(currRound() > round);\n\n        if (claimed[round][addr] || dailyTotals[round] == 0) {\n            return;\n        }\n\n        // This will have small rounding errors, but the token is\n        // going to be truncated to 8 decimal places or less anyway\n        // when launched on its own chain.\n\n        uint128 dailyTotal = cast(dailyTotals[round]);\n        uint128 userTotal  = cast(userBuys[round][addr]);\n        uint128 price      = wdiv(cast(createOnRound(round)), dailyTotal);\n        uint128 minPrice   = wdiv(600000, 1);//private sale price\n\n        //cannot lower than private sale price\n        if (price > minPrice) {\n            price = minPrice;\n        }\n        uint128 reward     = wmul(price, userTotal);\n\n        claimed[round][addr] = true;\n        ONO.push(addr, reward);\n\n        emit LogClaim(round, addr, reward);\n    }\n\n    function mint(uint128 deltaSupply) public auth {\n        ONO.mint(deltaSupply);\n        ONO.push(founderAddr, deltaSupply);\n\n        emit LogMint(founderAddr, deltaSupply);\n    }\n\n    function burn(uint round) public onlyIfAdmin {\n        assert(time() >= openTime && round <= numberOfRounds);\n\n        assert (currRound() > round);\n        assert (burned[round] == false);\n        \n        uint128 dailyTotalEth = cast(dailyTotals[round]);\n        uint128 dailyTotalToken = cast(createOnRound(round));\n\n        if (dailyTotalEth == 0) {\n            burned[round] = true;\n            ONO.push(burnAddr, dailyTotalToken);\n\n            emit LogBurn(round, burnAddr, dailyTotalToken);\n        }\n        else {\n            uint128 price      = wdiv(dailyTotalToken, dailyTotalEth);\n            uint128 minPrice   = wdiv(600000, 1);//private sale price\n\n            if (price > minPrice) {\n                price = minPrice;\n\n                uint128 totalReward = wmul(price, dailyTotalEth);\n                assert(dailyTotalToken > totalReward);\n\n                burned[round] = true;\n                ONO.push(burnAddr, wsub(dailyTotalToken, totalReward));\n                emit LogBurn(round, burnAddr, wsub(dailyTotalToken, totalReward));\n            } else {\n                burned[round] = true;\n            }\n        }\n    }\n\n    // Crowdsale owners can collect ETH any number of times\n    function collect() public auth {\n        assert(currRound() > 0); // Prevent recycling during window 0\n        exec(msg.sender, address(this).balance);\n        emit LogCollect(address(this).balance);\n    }\n\n    function start() public auth {\n        ONO.start();\n    }\n\n    function stop() public auth {\n        ONO.stop();\n    }\n}",
  "bytecode": "6080604052600c8054600160a060020a031990811673f9baaa91e617df1de6c2386b789b401c422e9ab117909155600d805490911673a3ad4efdd5719eaed1b0f2e12c0d7368a6d110371790553480156200005957600080fd5b506040516200249f3803806200249f83398101604081815282516020840151918401516060850151608086015160a087015160c088015160018054600160a060020a031916339081179091559598969794969395929491930191907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600a87905560058054600786905560098590556001608060020a0384811670010000000000000000000000000000000002818a166001608060020a0319909316929092171617905580516200013790600690602084019062000224565b506001608060020a03808616600855600554620001a4916200019291620001809181811691700100000000000000000000000000000000900416640100000000620001fa810204565b600854640100000000620001fa810204565b600a546401000000006200020e810204565b600b55600a54600010620001b457fe5b6005546001608060020a0370010000000000000000000000000000000082048116911611620001df57fe5b60095460075410620001ed57fe5b50505050505050620002c9565b808203828111156200020857fe5b92915050565b600081838115156200021c57fe5b049392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026757805160ff191683800117855562000297565b8280016001018555821562000297579182015b82811115620002975782518255916020019190600101906200027a565b50620002a5929150620002a9565b5090565b620002c691905b80821115620002a55760008155600101620002b0565b90565b6121c680620002d96000396000f3006080604052600436106101f55763ffffffff60e060020a60003504166307da68f581146101ff578063120aa8771461021457806313af40351461024c57806316ada5471461026d57806318160ddd146102945780631db580fa146102c55780631effc0d8146102da57806323250cae146102ef5780632c8be60e14610307578063379607f514610338578063389ae4d1146103505780633904e1bf146103da57806339745791146103fe5780633a7dab5e146104535780633bde045f1461046e5780633f5d80561461048357806342966c68146104985780635c9442a1146104b05780635e1045ec14610505578063670d14b21461055a57806369d3e20e1461057b57806370c8f8ad1461059c57806378e97925146105b15780637a9e5e4b146105c65780637d34f5ac146105e75780638831597f146105ff5780638da5cb5b146106205780639373b8bd14610635578063940df4141461068c5780639b19251a146106b0578063a6f2ae3a146101f5578063b4256888146106d1578063be9a6555146106e6578063bf7e214f146106fb578063c4d66de814610710578063c9b5e55514610731578063ca0d956414610746578063d1058e591461079b578063d246d411146107b0578063e5225381146107c5578063f25c130a146107da578063f2c298be146107f2578063ffe4fe4c1461084b575b6101fd610863565b005b34801561020b57600080fd5b506101fd610a1c565b34801561022057600080fd5b50610238600435600160a060020a0360243516610ab0565b604080519115158252519081900360200190f35b34801561025857600080fd5b506101fd600160a060020a0360043516610ad0565b34801561027957600080fd5b50610282610b60565b60408051918252519081900360200190f35b3480156102a057600080fd5b506102a9610b65565b604080516001608060020a039092168252519081900360200190f35b3480156102d157600080fd5b506102a9610b74565b3480156102e657600080fd5b50610282610b97565b3480156102fb57600080fd5b50610238600435610b9d565b34801561031357600080fd5b5061031c610bb2565b60408051600160a060020a039092168252519081900360200190f35b34801561034457600080fd5b506101fd600435610bc1565b34801561035c57600080fd5b50610365610bce565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561039f578181015183820152602001610387565b50505050905090810190601f1680156103cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e657600080fd5b50610282600435600160a060020a0360243516610c5c565b34801561040a57600080fd5b50604080516020600480358082013583810280860185019096528085526101fd95369593946024949385019291829185019084908082843750949750610c799650505050505050565b34801561045f57600080fd5b5061031c600435602435610cf6565b34801561047a57600080fd5b50610282610d2d565b34801561048f57600080fd5b50610282610d33565b3480156104a457600080fd5b506101fd600435610d4a565b3480156104bc57600080fd5b50604080516020600480358082013583810280860185019096528085526101fd953695939460249493850192918291850190849080828437509497506110b19650505050505050565b34801561051157600080fd5b50604080516020600480358082013583810280860185019096528085526101fd9536959394602494938501929182918501908490808284375094975061112c9650505050505050565b34801561056657600080fd5b50610365600160a060020a03600435166111a5565b34801561058757600080fd5b506101fd6001608060020a036004351661120d565b3480156105a857600080fd5b50610282611394565b3480156105bd57600080fd5b5061028261139a565b3480156105d257600080fd5b506101fd600160a060020a03600435166113a0565b3480156105f357600080fd5b50610282600435611417565b34801561060b57600080fd5b50610238600160a060020a0360043516611429565b34801561062c57600080fd5b5061031c61143e565b34801561064157600080fd5b50604080516020600480358082013583810280860185019096528085526101fd95369593946024949385019291829185019084908082843750949750509335945061144d9350505050565b34801561069857600080fd5b506101fd600160a060020a03600435166024356114a5565b3480156106bc57600080fd5b50610238600160a060020a03600435166116a5565b3480156106dd57600080fd5b506102826116ba565b3480156106f257600080fd5b506101fd6116c0565b34801561070757600080fd5b5061031c61173a565b34801561071c57600080fd5b506101fd600160a060020a0360043516611749565b34801561073d57600080fd5b5061031c611b4b565b34801561075257600080fd5b50604080516020600480358082013583810280860185019096528085526101fd95369593946024949385019291829185019084908082843750949750611b5a9650505050505050565b3480156107a757600080fd5b506101fd611bd5565b3480156107bc57600080fd5b5061031c611bf8565b3480156107d157600080fd5b506101fd611c07565b3480156107e657600080fd5b50610282600435611c77565b3480156107fe57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101fd943694929360249392840191908190840183828082843750949750611c939650505050505050565b34801561085757600080fd5b50610282600435611d8c565b3360009081526002602052604081205481908190819060ff16151560011461088757fe5b61088f610d33565b935060075461089c610b60565b101580156108ac5750600a548411155b15156108b457fe5b67016345785d8a00003410156108c657fe5b6000848152600f602090815260408083203384529091529020546108ea9034611dc1565b6000858152600f60209081526040808320338452825280832093909355868252600e9052205461091a9034611dc1565b6000858152600e602052604081209190915592508291505b60008481526012602052604090205482101561099557600084815260126020526040902080548390811061096257fe5b600091825260209091200154600160a060020a031690503381141561098a5760019250610995565b600190910190610932565b8215156109d857600084815260126020908152604082208054600181018255908352912001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b60408051858152336020820152348183015290517fe054057d0479c6218d6ec87be73f88230a7e4e1f064cee6e7504e2c4cd9d61509181900360600190a150505050565b610a3233600035600160e060020a031916611dd4565b1515610a3a57fe5b60048054604080517f07da68f50000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926307da68f592828201926000929082900301818387803b158015610a9657600080fd5b505af1158015610aaa573d6000803e3d6000fd5b50505050565b601060209081526000928352604080842090915290825290205460ff1681565b610ae633600035600160e060020a031916611dd4565b1515610aee57fe5b600160a060020a0381161515610b0357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b425b90565b6005546001608060020a031681565b60055470010000000000000000000000000000000090046001608060020a031681565b600b5481565b60136020526000908152604090205460ff1681565b600454600160a060020a031681565b610bcb33826114a5565b50565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b505050505081565b600f60209081526000928352604080842090915290825290205481565b3360009081526003602052604081205460ff161515600114610c9757fe5b5060005b8151811015610cf2576000600260008484815181101515610cb857fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610c9b565b5050565b601260205281600052604060002081815481101515610d1157fe5b600091825260209091200154600160a060020a03169150829050565b600a5481565b6000610d45610d40610b60565b611d8c565b905090565b33600090815260036020526040812054819081908190819060ff161515600114610d7057fe5b600754610d7b610b60565b10158015610d8b5750600a548611155b1515610d9357fe5b85610d9c610d33565b11610da357fe5b60008681526013602052604090205460ff1615610dbc57fe5b6000868152600e6020526040902054610dd490611edb565b9450610de7610de287611c77565b611edb565b93506001608060020a0385161515610efc576000868152601360209081526040808320805460ff1916600117905560048054600d54835160e060020a633452f51d028152600160a060020a03918216938101939093526001608060020a038a1660248401529251921693633452f51d9360448084019491939192918390030190829087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505050506040513d6020811015610ea257600080fd5b5050600d5460408051888152600160a060020a0390921660208301526001608060020a03861682820152517fc6153bcdea8e01f311c1272fa84ef0c6fb227f082f3bcdf834a6d1749295e5959181900360600190a16110a9565b610f068486611eee565b9250610f16620927c06001611eee565b9150816001608060020a0316836001608060020a0316111561108f57819250610f3f8386611f56565b90506001608060020a0380821690851611610f5657fe5b6000868152601360205260409020805460ff19166001179055600454600d54600160a060020a0391821691633452f51d9116610f928785611f8d565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a03168152602001826001608060020a03166001608060020a0316815260200192505050602060405180830381600087803b158015610ff657600080fd5b505af115801561100a573d6000803e3d6000fd5b505050506040513d602081101561102057600080fd5b5050600d547fc6153bcdea8e01f311c1272fa84ef0c6fb227f082f3bcdf834a6d1749295e595908790600160a060020a031661105c8785611f8d565b60408051938452600160a060020a0390921660208401526001608060020a031682820152519081900360600190a16110a9565b6000868152601360205260409020805460ff191660011790555b505050505050565b60006110c933600035600160e060020a031916611dd4565b15156110d157fe5b5060005b8151811015610cf25760016003600084848151811015156110f257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790556001016110d5565b3360009081526003602052604081205460ff16151560011461114a57fe5b5060005b8151811015610cf257600160026000848481518110151561116b57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905560010161114e565b60116020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610c545780601f10610c2957610100808354040283529160200191610c54565b61122333600035600160e060020a031916611dd4565b151561122b57fe5b60048054604080517f69d3e20e0000000000000000000000000000000000000000000000000000000081526001608060020a0385169381019390935251600160a060020a03909116916369d3e20e91602480830192600092919082900301818387803b15801561129a57600080fd5b505af11580156112ae573d6000803e3d6000fd5b505060048054600c546040805160e060020a633452f51d028152600160a060020a03928316948101949094526001608060020a03871660248501525191169350633452f51d925060448083019260209291908290030181600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d602081101561134057600080fd5b5050600c5460408051600160a060020a0390921682526001608060020a038316602083015280517f9f494565851dbcb31fb5198ca217cda6833282fadb96ba9431bd19c82afc1dd39281900390910190a150565b60085481565b60095481565b6113b633600035600160e060020a031916611dd4565b15156113be57fe5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600e6020526000908152604090205481565b60036020526000908152604090205460ff1681565b600154600160a060020a031681565b33600090815260036020526040812054819060ff16151560011461146d57fe5b5050815160005b81811015610aaa5761149d848281518110151561148d57fe5b90602001906020020151846114a5565b600101611474565b6000806000806000856114b6610d33565b116114bd57fe5b6000868152601060209081526040808320600160a060020a038b16845290915290205460ff16806114fa57506000868152600e6020526040902054155b156115045761169c565b6000868152600e602052604090205461151c90611edb565b6000878152600f60209081526040808320600160a060020a038c16845290915290205490955061154b90611edb565b935061156261155c610de288611c77565b86611eee565b9250611572620927c06001611eee565b9150816001608060020a0316836001608060020a03161115611592578192505b61159c8385611f56565b6000878152601060209081526040808320600160a060020a03808d16808652918452828520805460ff1916600117905560048054845160e060020a633452f51d028152918201939093526001608060020a038716602482015292519596501693633452f51d93604480840194938390030190829087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b505050506040513d602081101561164957600080fd5b505060408051878152600160a060020a03891660208201526001608060020a0383168183015290517f51223fdc0a25891366fb358b4af9fe3c381b1566e287c61a29d01c8a173fe4f49181900360600190a15b50505050505050565b60026020526000908152604090205460ff1681565b60075481565b6116d633600035600160e060020a031916611dd4565b15156116de57fe5b60048054604080517fbe9a65550000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263be9a655592828201926000929082900301818387803b158015610a9657600080fd5b600054600160a060020a031681565b61175f33600035600160e060020a031916611dd4565b151561176757fe5b600454600160a060020a03161561177a57fe5b30600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156117c257600080fd5b505af11580156117d6573d6000803e3d6000fd5b505050506040513d60208110156117ec57600080fd5b5051600160a060020a0316146117fe57fe5b6000600160a060020a031681600160a060020a031663bf7e214f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b505050506040513d602081101561187157600080fd5b5051600160a060020a03161461188357fe5b80600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b505050506040513d60208110156118eb57600080fd5b5051156118f457fe5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117808355600554604080517f69d3e20e0000000000000000000000000000000000000000000000000000000081526001608060020a039092169482019490945292519116916369d3e20e91602480830192600092919082900301818387803b15801561198857600080fd5b505af115801561199c573d6000803e3d6000fd5b505060048054600c546005546040805160e060020a633452f51d028152600160a060020a03938416958101959095527001000000000000000000000000000000009091046001608060020a031660248501525191169350633452f51d925060448083019260209291908290030181600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b5050600c54600160a060020a0316600090815260116020526040902060068054611a839291906002600019600183161561010002019091160461208d565b50600c5460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad2294929390929190606083019084908015611b395780601f10611b0e57610100808354040283529160200191611b39565b820191906000526020600020905b815481529060010190602001808311611b1c57829003601f168201915b5050935050505060405180910390a150565b600c54600160a060020a031681565b6000611b7233600035600160e060020a031916611dd4565b1515611b7a57fe5b5060005b8151811015610cf2576000600360008484815181101515611b9b57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101611b7e565b60005b611be0610d33565b811015610bcb57611bf081610bc1565b600101611bd8565b600d54600160a060020a031681565b611c1d33600035600160e060020a031916611dd4565b1515611c2557fe5b6000611c2f610d33565b11611c3657fe5b611c41333031611f99565b604080513031815290517f4ceba015d961d93f1d6825703b730a8ba05619c005dfd8073aee773dc6725fbb9181900360200190a1565b60008115611c8757600b54611c8b565b6008545b90505b919050565b600a54600101611ca1610d33565b1115611ca957fe5b805160401015611cb557fe5b3360009081526011602090815260409091208251611cd592840190612112565b507fd80364ba2cbb1e827ab8adac9651cdfc27fb7b61c0a95663cb80b82d7636ad2233826040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d4e578181015183820152602001611d36565b50505050905090810190601f168015611d7b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b60006009548210611db9576203e670611da783600954611fab565b811515611db057fe5b04600101611c8b565b506000919050565b80820182811015611dce57fe5b92915050565b6000600160a060020a038316301415611def57506001611dce565b600154600160a060020a0384811691161415611e0d57506001611dce565b600054600160a060020a03161515611e2757506000611dce565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b158015611ea857600080fd5b505af1158015611ebc573d6000803e3d6000fd5b505050506040513d6020811015611ed257600080fd5b50519050611dce565b806001608060020a0381168114611c8e57fe5b6000611f4f826001608060020a0316611f40611f24866001608060020a0316670de0b6b3a76400006001608060020a0316611fb8565b60026001608060020a0387165b046001608060020a0316611dc1565b811515611f4957fe5b04611edb565b9392505050565b6000611f4f670de0b6b3a7640000611f40611f7d6001608060020a03878116908716611fb8565b6002670de0b6b3a7640000611f31565b6000611f4f8383611fdd565b6060611fa6838284611ff6565b505050565b80820382811115611dce57fe5b6000811580611fd5575050808202828282811515611fd257fe5b04145b1515611dce57fe5b8082036001608060020a038084169082161115611dce57fe5b61200183838361200c565b1515611fa657600080fd5b600083600160a060020a0316828460405180828051906020019080838360005b8381101561204457818101518382015260200161202c565b50505050905090810190601f1680156120715780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1979650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120c65780548555612102565b8280016001018555821561210257600052602060002091601f016020900482015b828111156121025782548255916001019190600101906120e7565b5061210e929150612180565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061215357805160ff1916838001178555612102565b82800160010185558215612102579182015b82811115612102578251825591602001919060010190612165565b610b6291905b8082111561210e57600081556001016121865600a165627a7a723058203a9b92caa08ddc7bce114217df49df054132df553e02f13ef4df24f5917e049a002900000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000f2568bc2d21591d7f800000000000000000000000000000000000000000000001027e72f1f12813088000000000000000000000000000000000000000000000000000000000000005b50b580000000000000000000000000000000000000000000000000000000005b5de480000000000000000000000000000000000000000094a24ee4b7770af1b000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a4f4e4f4163636f756e7400000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000f2568bc2d21591d7f800000000000000000000000000000000000000000000001027e72f1f12813088000000000000000000000000000000000000000000000000000000000000005b50b580000000000000000000000000000000000000000000000000000000005b5de480000000000000000000000000000000000000000094a24ee4b7770af1b000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a4f4e4f4163636f756e7400000000000000000000000000000000000000000000"
}