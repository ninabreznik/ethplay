{
  "address": "0x0c9718a4b2f467dbcc9a71a442d715a2e6889e4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ELyXToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity ^0.4.22;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;       \n    }       \n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);        \n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n}\n\n\ncontract ELyXToken is ERC20, Ownable, Pausable {\n\n    using SafeMath for uint256;\n\n    struct LockupInfo {\n        uint256 releaseTime;\n        uint256 termOfRound;\n        uint256 unlockAmountPerRound;        \n        uint256 lockupBalance;\n    }\n\n    string public name;\n    string public symbol;\n    uint8 constant public decimals =18;\n    uint256 internal initialSupply;\n    uint256 internal totalSupply_;\n\n    mapping(address => uint256) internal balances;\n    mapping(address => bool) internal locks;\n    mapping(address => bool) public frozen;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    mapping(address => LockupInfo[]) internal lockupInfo;\n\n    event Lock(address indexed holder, uint256 value);\n    event Unlock(address indexed holder, uint256 value);\n    event Burn(address indexed owner, uint256 value);\n    event Mint(uint256 value);\n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n\n    modifier notFrozen(address _holder) {\n        require(!frozen[_holder]);\n        _;\n    }\n\n    constructor() public {\n        name = \"ELyX\";\n        symbol = \"ELyX\";\n        initialSupply = 10000000000; //10,000,000,000 ê°œ\n        totalSupply_ = initialSupply * 10 ** uint(decimals);\n        balances[owner] = totalSupply_;\n        emit Transfer(address(0), owner, totalSupply_);\n    }\n\n    //\n    function () public payable {\n        revert();\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused notFrozen(msg.sender) returns (bool) {\n        if (locks[msg.sender]) {\n            autoUnlock(msg.sender);            \n        }\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        \n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        uint256 lockedBalance = 0;\n        if(locks[_holder]) {\n            for(uint256 idx = 0; idx < lockupInfo[_holder].length ; idx++ ) {\n                lockedBalance = lockedBalance.add(lockupInfo[_holder][idx].lockupBalance);\n            }\n        }\n        return balances[_holder] + lockedBalance;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused notFrozen(_from)returns (bool) {\n        if (locks[_from]) {\n            autoUnlock(_from);            \n        }\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        \n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        require(isContract(_spender));\n        TokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].add(addedValue));\n        \n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance( address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return allowed[_holder][_spender];\n    }\n\n    function lock(address _holder, uint256 _amount, uint256 _releaseStart, uint256 _termOfRound, uint256 _releaseRate) public onlyOwner returns (bool) {\n        require(balances[_holder] >= _amount);\n        if(_termOfRound==0 ) {\n            _termOfRound = 1;\n        }\n        balances[_holder] = balances[_holder].sub(_amount);\n        lockupInfo[_holder].push(\n            LockupInfo(_releaseStart, _termOfRound, _amount.div(100).mul(_releaseRate), _amount)\n        );\n\n        locks[_holder] = true;\n\n        emit Lock(_holder, _amount);\n\n        return true;\n    }\n\n    function unlock(address _holder, uint256 _idx) public onlyOwner returns (bool) {\n        require(locks[_holder]);\n        require(_idx < lockupInfo[_holder].length);\n        LockupInfo storage lockupinfo = lockupInfo[_holder][_idx];\n        uint256 releaseAmount = lockupinfo.lockupBalance;\n\n        delete lockupInfo[_holder][_idx];\n        lockupInfo[_holder][_idx] = lockupInfo[_holder][lockupInfo[_holder].length.sub(1)];\n        lockupInfo[_holder].length -=1;\n        if(lockupInfo[_holder].length == 0) {\n            locks[_holder] = false;\n        }\n\n        emit Unlock(_holder, releaseAmount);\n        balances[_holder] = balances[_holder].add(releaseAmount);\n\n        return true;\n    }\n\n    function freezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(!frozen[_holder]);\n        frozen[_holder] = true;\n        emit Freeze(_holder);\n        return true;\n    }\n\n    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(frozen[_holder]);\n        frozen[_holder] = false;\n        emit Unfreeze(_holder);\n        return true;\n    }\n\n    function getNowTime() public view returns(uint256) {\n        return now;\n    }\n\n    function showLockState(address _holder, uint256 _idx) public view returns (bool, uint256, uint256, uint256, uint256, uint256) {\n        if(locks[_holder]) {\n            return (\n                locks[_holder], \n                lockupInfo[_holder].length, \n                lockupInfo[_holder][_idx].lockupBalance, \n                lockupInfo[_holder][_idx].releaseTime, \n                lockupInfo[_holder][_idx].termOfRound, \n                lockupInfo[_holder][_idx].unlockAmountPerRound\n            );\n        } else {\n            return (\n                locks[_holder], \n                lockupInfo[_holder].length, \n                0,0,0,0\n            );\n\n        }        \n    }\n    \n    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[owner]);\n\n        balances[owner] = balances[owner].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(owner, _to, _value);\n        return true;\n    }\n\n    function distributeWithLockup(address _to, uint256 _value, uint256 _releaseStart, uint256 _termOfRound, uint256 _releaseRate) public onlyOwner returns (bool) {\n        distribute(_to, _value);\n        lock(_to, _value, _releaseStart, _termOfRound, _releaseRate);\n        return true;\n    }\n\n    function claimToken(ERC20 token, address _to, uint256 _value) public onlyOwner returns (bool) {\n        token.transfer(_to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        return true;\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly{size := extcodesize(addr)}\n        return size > 0;\n    }\n\n    function autoUnlock(address _holder) internal returns (bool) {\n\n        for(uint256 idx =0; idx < lockupInfo[_holder].length ; idx++ ) {\n            if(locks[_holder]==false) {\n                return true;\n            }\n            if (lockupInfo[_holder][idx].releaseTime <= now) {\n                // If lockupinfo was deleted, loop restart at same position.\n                if( releaseTimeLock(_holder, idx) ) {\n                    idx -=1;\n                }\n            }\n        }\n        return true;\n    }\n\n    function releaseTimeLock(address _holder, uint256 _idx) internal returns(bool) {\n        require(locks[_holder]);\n        require(_idx < lockupInfo[_holder].length);\n\n        // If lock status of holder is finished, delete lockup info. \n        LockupInfo storage info = lockupInfo[_holder][_idx];\n        uint256 releaseAmount = info.unlockAmountPerRound;\n        uint256 sinceFrom = now.sub(info.releaseTime);\n        uint256 sinceRound = sinceFrom.div(info.termOfRound);\n        releaseAmount = releaseAmount.add( sinceRound.mul(info.unlockAmountPerRound) );\n\n        if(releaseAmount >= info.lockupBalance) {            \n            releaseAmount = info.lockupBalance;\n\n            delete lockupInfo[_holder][_idx];\n            lockupInfo[_holder][_idx] = lockupInfo[_holder][lockupInfo[_holder].length.sub(1)];\n            lockupInfo[_holder].length -=1;\n\n            if(lockupInfo[_holder].length == 0) {\n                locks[_holder] = false;\n            }\n            emit Unlock(_holder, releaseAmount);\n            balances[_holder] = balances[_holder].add(releaseAmount);\n            return true;\n        } else {\n            lockupInfo[_holder][_idx].releaseTime = lockupInfo[_holder][_idx].releaseTime.add( sinceRound.add(1).mul(info.termOfRound) );\n            lockupInfo[_holder][_idx].lockupBalance = lockupInfo[_holder][_idx].lockupBalance.sub(releaseAmount);\n            emit Unlock(_holder, releaseAmount);\n            balances[_holder] = balances[_holder].add(releaseAmount);\n            return false;\n        }\n    }\n\n\n}",
  "bytecode": ""
}