{
  "address": "0xafb8fe439ff3dbba25e6c5058ed1246022716e6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoCardsPayroll",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n/**\n * Phat Cats - Crypto-Cards\n *  - https://crypto-cards.io\n *  - https://phatcats.co\n *\n * Copyright 2019 (c) Phat Cats, Inc.\n */\n\n/**\n * @title Crypto-Cards Payroll\n */\ncontract CryptoCardsPayroll is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    event PayeeAdded(address account, uint256 shares);\n    event PayeeUpdated(address account, uint256 sharesAdded, uint256 totalShares);\n    event PaymentReleased(address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n    uint256 private _totalReleasedAllTime;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    /**\n     * @dev Constructor\n     */\n    constructor () public {}\n\n    /**\n     * @dev payable fallback\n     */\n    function () external payable {\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n\n    /**\n     * @return the total shares of the contract.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @return the total amount already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @return the total amount already released.\n     */\n    function totalReleasedAllTime() public view returns (uint256) {\n        return _totalReleasedAllTime;\n    }\n\n    /**\n     * @return the total amount of funds in the contract.\n     */\n    function totalFunds() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @return the shares of an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @return the shares of an account.\n     */\n    function sharePercentage(address account) public view returns (uint256) {\n        if (_totalShares == 0 || _shares[account] == 0) { return 0; }\n        return _shares[account].mul(100).div(_totalShares);\n    }\n\n    /**\n     * @return the amount already released to an account.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @return the amount available for release to an account.\n     */\n    function available(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance.add(_totalReleased);\n        uint256 totalCut = totalReceived.mul(_shares[account]).div(_totalShares);\n        if (totalCut < _released[account]) { return 0; }\n        return totalCut.sub(_released[account]);\n    }\n\n    /**\n     * @return the address of a payee.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Release payee's proportional payment.\n     */\n    function release() external nonReentrant {\n        address payable account = address(uint160(msg.sender));\n        require(_shares[account] > 0, \"Account not eligible for payroll\");\n\n        uint256 payment = available(account);\n        require(payment != 0, \"No payment available for account\");\n\n        _release(account, payment);\n    }\n\n    /**\n     * @dev Release payment for all payees and reset state\n     */\n    function releaseAll() public onlyOwner {\n        _releaseAll();\n        _resetAll();\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function addNewPayee(address account, uint256 shares_) public onlyOwner {\n        require(account != address(0), \"Invalid account\");\n        require(Address.isContract(account) == false, \"Account cannot be a contract\");\n        require(shares_ > 0, \"Shares must be greater than zero\");\n        require(_shares[account] == 0, \"Payee already exists\");\n        require(_totalReleased == 0, \"Must release all existing payments first\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares.add(shares_);\n        emit PayeeAdded(account, shares_);\n    }\n\n    /**\n     * @dev Increase he shares of an existing payee\n     * @param account The address of the payee to increase.\n     * @param shares_ The number of shares to add to the payee.\n     */\n    function increasePayeeShares(address account, uint256 shares_) public onlyOwner {\n        require(account != address(0), \"Invalid account\");\n        require(shares_ > 0, \"Shares must be greater than zero\");\n        require(_shares[account] > 0, \"Payee does not exist\");\n        require(_totalReleased == 0, \"Must release all existing payments first\");\n\n        _shares[account] = _shares[account].add(shares_);\n        _totalShares = _totalShares.add(shares_);\n        emit PayeeUpdated(account, shares_, _shares[account]);\n    }\n\n    /**\n     * @dev Release one of the payee's proportional payment.\n     * @param account Whose payments will be released.\n     */\n    function _release(address payable account, uint256 payment) private {\n        _released[account] = _released[account].add(payment);\n        _totalReleased = _totalReleased.add(payment);\n        _totalReleasedAllTime = _totalReleasedAllTime.add(payment);\n\n        account.transfer(payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Release payment for all payees\n     */\n    function _releaseAll() private {\n        for (uint256 i = 0; i < _payees.length; i++) {\n            _release(address(uint160(_payees[i])), available(_payees[i]));\n        }\n    }\n\n    /**\n     * @dev Reset state of released payments for all payees\n     */\n    function _resetAll() private {\n        for (uint256 i = 0; i < _payees.length; i++) {\n            _released[_payees[i]] = 0;\n        }\n        _totalReleased = 0;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018055610f248061006d6000396000f3fe60806040526004361061011b576000357c0100000000000000000000000000000000000000000000000000000000900480638b83209b116100b25780639852595c116100815780639852595c146103305780639cf3f6b514610363578063ce7c2ac214610378578063e33b7de3146103ab578063f2fde38b146103c05761011b565b80638b83209b146102975780638da5cb5b146102dd5780638f32d59b146102f2578063968ed6001461031b5761011b565b8063715018a6116100ee578063715018a614610201578063737e0779146102165780637c7ed1121461024f57806386d1a69f146102825761011b565b806310098ad5146101575780633a98ef391461019c578063599f88db146101b15780635be7fde8146101ec575b6040805133815234602082015281517f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770929181900390910190a1005b34801561016357600080fd5b5061018a6004803603602081101561017a57600080fd5b5035600160a060020a03166103f3565b60408051918252519081900360200190f35b3480156101a857600080fd5b5061018a6104b1565b3480156101bd57600080fd5b506101ea600480360360408110156101d457600080fd5b50600160a060020a0381351690602001356104b7565b005b3480156101f857600080fd5b506101ea6106e5565b34801561020d57600080fd5b506101ea61070a565b34801561022257600080fd5b506101ea6004803603604081101561023957600080fd5b50600160a060020a038135169060200135610774565b34801561025b57600080fd5b5061018a6004803603602081101561027257600080fd5b5035600160a060020a0316610a0c565b34801561028e57600080fd5b506101ea610a7a565b3480156102a357600080fd5b506102c1600480360360208110156102ba57600080fd5b5035610b6a565b60408051600160a060020a039092168252519081900360200190f35b3480156102e957600080fd5b506102c1610b96565b3480156102fe57600080fd5b50610307610ba5565b604080519115158252519081900360200190f35b34801561032757600080fd5b5061018a610bb6565b34801561033c57600080fd5b5061018a6004803603602081101561035357600080fd5b5035600160a060020a0316610bbb565b34801561036f57600080fd5b5061018a610bd6565b34801561038457600080fd5b5061018a6004803603602081101561039b57600080fd5b5035600160a060020a0316610bdc565b3480156103b757600080fd5b5061018a610bf7565b3480156103cc57600080fd5b506101ea600480360360208110156103e357600080fd5b5035600160a060020a0316610bfd565b600354600090819061040d9030319063ffffffff610c1916565b600254600160a060020a0385166000908152600560205260408120549293509161044f919061044390859063ffffffff610c3216565b9063ffffffff610c5d16565b600160a060020a03851660009081526006602052604090205490915081101561047d576000925050506104ac565b600160a060020a0384166000908152600660205260409020546104a790829063ffffffff610c8116565b925050505b919050565b60025490565b6104bf610ba5565b15156104ca57600080fd5b600160a060020a038216151561052a576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964206163636f756e740000000000000000000000000000000000604482015290519081900360640190fd5b60008111610582576040805160e560020a62461bcd02815260206004820181905260248201527f536861726573206d7573742062652067726561746572207468616e207a65726f604482015290519081900360640190fd5b600160a060020a038216600090815260056020526040812054116105f0576040805160e560020a62461bcd02815260206004820152601460248201527f506179656520646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b600354156106325760405160e560020a62461bcd028152600401808060200182810382526028815260200180610ed16028913960400191505060405180910390fd5b600160a060020a03821660009081526005602052604090205461065b908263ffffffff610c1916565b600160a060020a038316600090815260056020526040902055600254610687908263ffffffff610c1916565b600255600160a060020a03821660008181526005602090815260409182902054825193845290830184905282820152517f923fac7317b99562d1ab8a3971ffbfec4f6ca821278831af738a67d6e2ef17a49181900360600190a15050565b6106ed610ba5565b15156106f857600080fd5b610700610c96565b610708610d07565b565b610712610ba5565b151561071d57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61077c610ba5565b151561078757600080fd5b600160a060020a03821615156107e7576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964206163636f756e740000000000000000000000000000000000604482015290519081900360640190fd5b6107f082610d5e565b15610845576040805160e560020a62461bcd02815260206004820152601c60248201527f4163636f756e742063616e6e6f74206265206120636f6e747261637400000000604482015290519081900360640190fd5b6000811161089d576040805160e560020a62461bcd02815260206004820181905260248201527f536861726573206d7573742062652067726561746572207468616e207a65726f604482015290519081900360640190fd5b600160a060020a0382166000908152600560205260409020541561090b576040805160e560020a62461bcd02815260206004820152601460248201527f506179656520616c726561647920657869737473000000000000000000000000604482015290519081900360640190fd5b6003541561094d5760405160e560020a62461bcd028152600401808060200182810382526028815260200180610ed16028913960400191505060405180910390fd5b60078054600181019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03841690811790915560009081526005602052604090208190556002546109c19082610c19565b60025560408051600160a060020a03841681526020810183905281517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac929181900390910190a15050565b600060025460001480610a355750600160a060020a038216600090815260056020526040902054155b15610a42575060006104ac565b600254600160a060020a038316600090815260056020526040902054610a74919061044390606463ffffffff610c3216565b92915050565b600180548101908190553360008181526005602052604081205411610ae9576040805160e560020a62461bcd02815260206004820181905260248201527f4163636f756e74206e6f7420656c696769626c6520666f7220706179726f6c6c604482015290519081900360640190fd5b6000610af4826103f3565b9050801515610b4d576040805160e560020a62461bcd02815260206004820181905260248201527f4e6f207061796d656e7420617661696c61626c6520666f72206163636f756e74604482015290519081900360640190fd5b610b578282610d66565b50506001548114610b6757600080fd5b50565b6000600782815481101515610b7b57fe5b600091825260209091200154600160a060020a031692915050565b600054600160a060020a031690565b600054600160a060020a0316331490565b303190565b600160a060020a031660009081526006602052604090205490565b60045490565b600160a060020a031660009081526005602052604090205490565b60035490565b610c05610ba5565b1515610c1057600080fd5b610b6781610e53565b600082820183811015610c2b57600080fd5b9392505050565b6000821515610c4357506000610a74565b828202828482811515610c5257fe5b0414610c2b57600080fd5b6000808211610c6b57600080fd5b60008284811515610c7857fe5b04949350505050565b600082821115610c9057600080fd5b50900390565b60005b600754811015610b6757610cff600782815481101515610cb557fe5b60009182526020909120015460078054600160a060020a0390921691610cfa919085908110610ce057fe5b600091825260209091200154600160a060020a03166103f3565b610d66565b600101610c99565b60005b600754811015610d5657600060066000600784815481101515610d2957fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055600101610d0a565b506000600355565b6000903b1190565b600160a060020a038216600090815260066020526040902054610d8f908263ffffffff610c1916565b600160a060020a038316600090815260066020526040902055600354610dbb908263ffffffff610c1916565b600355600454610dd1908263ffffffff610c1916565b600455604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610e0a573d6000803e3d6000fd5b5060408051600160a060020a03841681526020810183905281517fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056929181900390910190a15050565b600160a060020a0381161515610e6857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fe4d7573742072656c6561736520616c6c206578697374696e67207061796d656e7473206669727374a165627a7a72305820e30add460ca22c78f2e8d767afb58d2f4b797dd72856ed585436dd371d6329940029"
}