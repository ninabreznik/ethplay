{
  "address": "0x8adfe1d5240145273a70f51d00db5a53eb94813f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NDEX",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-14\n*/\n\npragma solidity ^0.4.21;\n\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract NDEX {\n    // Public variables of the token\n    string public name = \"nDEX\";\n    string public symbol = \"NDX\";\n    uint8 public decimals = 18;\n\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public NdexSupply = 15000000000;\n    uint256 public buyPrice = 10000000;\n    address public creator;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function NDEX() public {\n        totalSupply = NdexSupply * 10 ** uint256(decimals);  \t// Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;    \t\t// Give NDX Mint the total created tokens\n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\t// Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    \n   function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    \n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                   \t // calculates the amount\n        uint amountRaised;                                     \n        amountRaised += msg.value;                            \t//many thanks bois, couldnt do it without r/me_irl\n        require(balanceOf[creator] >= amount);               \t   // checks if it has enough to sell\n        require(msg.value <= 10**17);                      \t  // so any person who wants to put more then 0.1 ETH has time to think!\n        balanceOf[msg.sender] += amount;                 \t // adds the amount to buyer's balance\n        balanceOf[creator] -= amount;                      \t  // sends ETH to NDXMint\n        emit Transfer(creator, msg.sender, amount);              \t // execute an event reflecting the change\n        creator.transfer(amountRaised);\n    }\n\n }",
  "bytecode": "606060405260408051908101604052600481527f6e444558000000000000000000000000000000000000000000000000000000006020820152600090805161004b929160200190610104565b5060408051908101604052600381527f4e4458000000000000000000000000000000000000000000000000000000000060208201526001908051610093929160200190610104565b506002805460ff1916601217905564037e11d6006004556298968060055534156100bc57600080fd5b60025460045460ff909116600a0a026003819055600160a060020a03331660008181526007602052604090209190915560068054600160a060020a031916909117905561019f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014557805160ff1916838001178555610172565b82800160010185558215610172579182015b82811115610172578251825591602001919060010190610157565b5061017e929150610182565b5090565b61019c91905b8082111561017e5760008155600101610188565b90565b6105db806101ae6000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461018f57806306fdde03146101be57806318160ddd14610248578063313ce5671461026d57806370a08231146102965780638620410b146102b557806395d89b41146102c8578063a9059cbb146102db578063dd62ed3e146102ff578063e489fc6814610324575b600554600654600160a060020a0316600090815260076020526040902054349182029190829010156100d457600080fd5b67016345785d8a00003411156100e957600080fd5b600160a060020a03338116600081815260076020526040808220805487019055600680548516835291819020805487900390559054919291909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600654600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561018b57600080fd5b5050005b341561019a57600080fd5b6101a2610337565b604051600160a060020a03909116815260200160405180910390f35b34156101c957600080fd5b6101d1610346565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561020d5780820151838201526020016101f5565b50505050905090810190601f16801561023a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025357600080fd5b61025b6103e4565b60405190815260200160405180910390f35b341561027857600080fd5b6102806103ea565b60405160ff909116815260200160405180910390f35b34156102a157600080fd5b61025b600160a060020a03600435166103f3565b34156102c057600080fd5b61025b610405565b34156102d357600080fd5b6101d161040b565b34156102e657600080fd5b6102fd600160a060020a0360043516602435610476565b005b341561030a57600080fd5b61025b600160a060020a0360043581169060243516610485565b341561032f57600080fd5b61025b6104a2565b600654600160a060020a031681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103dc5780601f106103b1576101008083540402835291602001916103dc565b820191906000526020600020905b8154815290600101906020018083116103bf57829003601f168201915b505050505081565b60035481565b60025460ff1681565b60076020526000908152604090205481565b60055481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103dc5780601f106103b1576101008083540402835291602001916103dc565b6104813383836104a8565b5050565b600860209081526000928352604080842090915290825290205481565b60045481565b6000600160a060020a03831615156104bf57600080fd5b600160a060020a038416600090815260076020526040902054829010156104e557600080fd5b600160a060020a038316600090815260076020526040902054828101101561050c57600080fd5b50600160a060020a0380831660008181526007602052604080822080549488168084528284208054888103909155938590528154870190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a038084166000908152600760205260408082205492871682529020540181146105a957fe5b505050505600a165627a7a723058203b2a425938c8bf3d0fe2a3b4fcabfdeaed3d3c6d43d91b7b37b791e881b07b4c0029"
}