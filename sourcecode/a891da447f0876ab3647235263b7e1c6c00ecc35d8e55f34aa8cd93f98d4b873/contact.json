{
  "address": "0xb746aed479f18287dc8fc202fe06f25f1a0a60ae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ethex",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.19;\n\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    //  function assert(bool assertion) internal {\n    //    if (!assertion) throw;\n    //  }\n}\n\n\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Interface {\n    // Get the total token supply\n    function totalSupply() public constant returns (uint256 totalSupply);\n\n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract Etx is ERC20Interface {\n    uint256 public expirationBlock;\n    function isActive(address _owner) public returns (bool activated);\n}\n\n\ncontract Ethex is SafeMath {\n    address public admin; //the admin address\n    address public feeAccount; //the account that will receive fees\n    address public etxAddress;\n\n    uint256 public makeFee; //percentage times (1 ether)\n    uint256 public takeFee; //percentage times (1 ether)\n    uint256 public lastFreeBlock;\n\n    mapping (bytes32 => uint256) public sellOrderBalances; //a hash of available order balances holds a number of tokens\n    mapping (bytes32 => uint256) public buyOrderBalances; //a hash of available order balances. holds a number of eth\n\n    event MakeBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed buyer);\n\n    event MakeSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed seller);\n\n    event CancelBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed buyer);\n\n    event CancelSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed seller);\n\n    event TakeBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTransactionTokens, address indexed buyer, address indexed seller);\n\n    event TakeSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTransactionWei, address indexed buyer, address indexed seller);\n\n    function Ethex(address admin_, address feeAccount_, uint256 makeFee_, uint256 takeFee_, address etxAddress_, uint256 _lastFreeBlock) public {\n        admin = admin_;\n        feeAccount = feeAccount_;\n        makeFee = makeFee_;\n        takeFee = takeFee_;\n        etxAddress = etxAddress_;\n        lastFreeBlock = _lastFreeBlock;\n    }\n\n    function() public {\n        revert();\n    }\n\n    function changeAdmin(address admin_) public {\n        require(msg.sender == admin);\n        admin = admin_;\n    }\n\n    function changeETXAddress(address etxAddress_) public {\n        require(msg.sender == admin);\n        require(block.number > Etx(etxAddress).expirationBlock());\n        etxAddress = etxAddress_;\n    }\n\n    function changeLastFreeBlock(uint256 _lastFreeBlock) public {\n        require(msg.sender == admin);\n        require(_lastFreeBlock > block.number + 100); //announce at least 100 blocks ahead\n        lastFreeBlock = _lastFreeBlock;\n    }\n\n    function changeFeeAccount(address feeAccount_) public {\n        require(msg.sender == admin);\n        feeAccount = feeAccount_;\n    }\n\n    function changeMakeFee(uint256 makeFee_) public {\n        require(msg.sender == admin);\n        require(makeFee_ < makeFee);\n        makeFee = makeFee_;\n    }\n\n    function changeTakeFee(uint256 takeFee_) public {\n        require(msg.sender == admin);\n        require(takeFee_ < takeFee);\n        takeFee = takeFee_;\n    }\n\n    function feeFromTotalCostForAccount(uint256 totalCost, uint256 feeAmount, address account) public constant returns (uint256) {\n        if (Etx(etxAddress).isActive(account)) {\n            // No fee for active addr.\n            return 0;\n        }\n\n        if (block.number <= lastFreeBlock)\n        {\n            return 0;\n        }\n\n        return feeFromTotalCost(totalCost, feeAmount);\n    }\n\n    function feeFromTotalCost(uint256 totalCost, uint256 feeAmount) public constant returns (uint256) {\n\n        uint256 cost = safeMul(totalCost, (1 ether)) / safeAdd((1 ether), feeAmount);\n\n        // Calculate ceil(cost).\n        uint256 remainder = safeMul(totalCost, (1 ether)) % safeAdd((1 ether), feeAmount);\n        if (remainder != 0) {\n            cost = safeAdd(cost, 1);\n        }\n\n        uint256 fee = safeSub(totalCost, cost);\n        return fee;\n    }\n\n    function calculateFeeForAccount(uint256 cost, uint256 feeAmount, address account) public constant returns (uint256) {\n        if (Etx(etxAddress).isActive(account)) {\n            // No fee for vested addr.\n            return 0;\n        }\n\n        if (block.number <= lastFreeBlock)\n        {\n            return 0;\n        }\n\n        return calculateFee(cost, feeAmount);\n    }\n\n    function calculateFee(uint256 cost, uint256 feeAmount) public constant returns (uint256) {\n\n        uint256 fee = safeMul(cost, feeAmount) / (1 ether);\n        return fee;\n    }\n\n    // Makes an offer to trade tokenAmount of ERC20 token, token, for weiAmount of wei.\n    function makeSellOrder(address token, uint256 tokenAmount, uint256 weiAmount) public {\n        require(tokenAmount != 0);\n        require(weiAmount != 0);\n\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\n\n\n        // Update balance.\n        sellOrderBalances[h] = safeAdd(sellOrderBalances[h], tokenAmount);\n\n        // Check allowance.  -- Done after updating balance bc it makes a call to an untrusted contract.\n        require(tokenAmount <= ERC20Interface(token).allowance(msg.sender, this));\n\n        // Grab the token.\n        if (!ERC20Interface(token).transferFrom(msg.sender, this, tokenAmount)) {\n            revert();\n        }\n\n\n        MakeSellOrder(h, token, tokenAmount, weiAmount, msg.sender);\n    }\n\n    // Makes an offer to trade msg.value wei for tokenAmount of token (an ERC20 token).\n    function makeBuyOrder(address token, uint256 tokenAmount) public payable {\n        require(tokenAmount != 0);\n        require(msg.value != 0);\n\n        uint256 fee = feeFromTotalCost(msg.value, makeFee);\n        uint256 valueNoFee = safeSub(msg.value, fee);\n        bytes32 h = sha256(token, tokenAmount, valueNoFee, msg.sender);\n\n        //put ether in the buyOrderBalances map\n        buyOrderBalances[h] = safeAdd(buyOrderBalances[h], msg.value);\n\n        // Notify all clients.\n        MakeBuyOrder(h, token, tokenAmount, valueNoFee, msg.sender);\n    }\n\n\n    // Cancels all previous offers by msg.sender to trade tokenAmount of tokens for weiAmount of wei.\n    function cancelAllSellOrders(address token, uint256 tokenAmount, uint256 weiAmount) public {\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\n        uint256 remain = sellOrderBalances[h];\n        delete sellOrderBalances[h];\n\n        ERC20Interface(token).transfer(msg.sender, remain);\n\n        CancelSellOrder(h, token, tokenAmount, weiAmount, msg.sender);\n    }\n\n    // Cancels any previous offers to trade weiAmount of wei for tokenAmount of tokens. Refunds the wei to sender.\n    function cancelAllBuyOrders(address token, uint256 tokenAmount, uint256 weiAmount) public {\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\n        uint256 remain = buyOrderBalances[h];\n        delete buyOrderBalances[h];\n\n        if (!msg.sender.send(remain)) {\n            revert();\n        }\n\n        CancelBuyOrder(h, token, tokenAmount, weiAmount, msg.sender);\n    }\n\n    // Take some (or all) of the ether (minus fees) in the buyOrderBalances hash in exchange for totalTokens tokens.\n    function takeBuyOrder(address token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTokens, address buyer) public {\n        require(tokenAmount != 0);\n        require(weiAmount != 0);\n        require(totalTokens != 0);\n\n        bytes32 h = sha256(token, tokenAmount, weiAmount, buyer);\n\n        // How many wei for the amount of tokens being sold?\n        uint256 transactionWeiAmountNoFee = safeMul(totalTokens, weiAmount) / tokenAmount;\n\n        // Does the buyer (maker) have enough money in the contract?\n        uint256 unvestedMakeFee = calculateFee(transactionWeiAmountNoFee, makeFee);\n        uint256 totalTransactionWeiAmount = safeAdd(transactionWeiAmountNoFee, unvestedMakeFee);\n        require(buyOrderBalances[h] >= totalTransactionWeiAmount);\n\n\n        // Calculate the actual vested fees.\n        uint256 currentTakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, takeFee, msg.sender);\n        uint256 currentMakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, makeFee, buyer);\n\n        // Proceed with transferring balances.\n\n        // Update our internal accounting.\n        buyOrderBalances[h] = safeSub(buyOrderBalances[h], totalTransactionWeiAmount);\n\n\n        // Did the seller send enough tokens?  -- This check is here bc it calls to an untrusted contract.\n        require(ERC20Interface(token).allowance(msg.sender, this) >= totalTokens);\n\n        // Send buyer their tokens and any fee refund.\n        if (currentMakeFee < unvestedMakeFee) {// the buyer got a fee discount. Send the refund.\n            uint256 refundAmount = safeSub(unvestedMakeFee, currentMakeFee);\n            if (!buyer.send(refundAmount)) {\n                revert();\n            }\n        }\n        if (!ERC20Interface(token).transferFrom(msg.sender, buyer, totalTokens)) {\n            revert();\n        }\n\n        // Grab our fee.\n        if (safeAdd(currentTakeFee, currentMakeFee) > 0) {\n            if (!feeAccount.send(safeAdd(currentTakeFee, currentMakeFee))) {\n                revert();\n            }\n        }\n\n        // Send seller the proceeds.\n        if (!msg.sender.send(safeSub(transactionWeiAmountNoFee, currentTakeFee))) {\n            revert();\n        }\n\n        TakeBuyOrder(h, token, tokenAmount, weiAmount, totalTokens, buyer, msg.sender);\n    }\n\n\n    function takeSellOrder(address token, uint256 tokenAmount, uint256 weiAmount, address seller) public payable {\n\n        require(tokenAmount != 0);\n        require(weiAmount != 0);\n\n        bytes32 h = sha256(token, tokenAmount, weiAmount, seller);\n\n        // Check that the contract has enough token to satisfy this order.\n        uint256 currentTakeFee = feeFromTotalCostForAccount(msg.value, takeFee, msg.sender);\n        uint256 transactionWeiAmountNoFee = safeSub(msg.value, currentTakeFee);\n        uint256 totalTokens = safeMul(transactionWeiAmountNoFee, tokenAmount) / weiAmount;\n        require(sellOrderBalances[h] >= totalTokens);\n\n        // Calculate total vested fee.\n        uint256 currentMakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, makeFee, seller);\n        uint256 totalFee = safeAdd(currentMakeFee, currentTakeFee);\n\n        uint256 makerProceedsAfterFee = safeSub(transactionWeiAmountNoFee, currentMakeFee);\n\n        // Transfer.\n\n        // Update internal accounting.\n        sellOrderBalances[h] = safeSub(sellOrderBalances[h], totalTokens);\n\n        // Send buyer the tokens.\n        if (!ERC20Interface(token).transfer(msg.sender, totalTokens)) {\n            revert();\n        }\n\n        // Take our fee.\n        if (totalFee > 0) {\n            if (!feeAccount.send(totalFee)) {\n                revert();\n            }\n        }\n\n        // Send seller the proceeds.\n        if (!seller.send(makerProceedsAfterFee)) {\n            revert();\n        }\n\n        TakeSellOrder(h, token, tokenAmount, weiAmount, transactionWeiAmountNoFee, msg.sender, seller);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160c08061242c83398101604052808051906020019091908051906020019091908051906020019091908051906020019091908051906020019091908051906020019091905050856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836003819055508260048190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005819055505050505050506122e8806101446000396000f30060606040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d02369b1461014e5780630f5137f9146101ad578063181aa1fd146101e857806320c8651b146102115780632c5773471461023a57806334e731221461025d57806341db18751461029d5780635a476e5a146102d457806365e17c9d1461030f57806369af0634146103645780636dc92426146103af57806371ffcb16146103fa57806372d744e0146104335780638f24f2a3146104735780638f283970146104e65780639a8ae2fa1461051f578063a4094a0d14610542578063b775c9ef146105a1578063c7431f5c146105f6578063ddc53c2c1461062f578063e61b762b14610658578063eefea6b7146106a3578063f1ae543714610702578063f851a44014610725575b341561014957600080fd5b600080fd5b6101ab600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061077a565b005b34156101b857600080fd5b6101d2600480803560001916906020019091905050610b60565b6040518082815260200191505060405180910390f35b34156101f357600080fd5b6101fb610b78565b6040518082815260200191505060405180910390f35b341561021c57600080fd5b610224610b7e565b6040518082815260200191505060405180910390f35b341561024557600080fd5b61025b6004808035906020019091905050610b84565b005b341561026857600080fd5b6102876004808035906020019091908035906020019091905050610bf9565b6040518082815260200191505060405180910390f35b6102d2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c25565b005b34156102df57600080fd5b6102f9600480803560001916906020019091905050610dfa565b6040518082815260200191505060405180910390f35b341561031a57600080fd5b610322610e12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561036f57600080fd5b6103ad600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610e38565b005b34156103ba57600080fd5b6103f8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190505061100b565b005b341561040557600080fd5b610431600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113c7565b005b341561043e57600080fd5b61045d6004808035906020019091908035906020019091905050611466565b6040518082815260200191505060405180910390f35b341561047e57600080fd5b6104e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114fc565b005b34156104f157600080fd5b61051d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a8d565b005b341561052a57600080fd5b6105406004808035906020019091905050611b2b565b005b341561054d57600080fd5b61058b600480803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ba1565b6040518082815260200191505060405180910390f35b34156105ac57600080fd5b6105b4611cb9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060157600080fd5b61062d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611cdf565b005b341561063a57600080fd5b610642611e34565b6040518082815260200191505060405180910390f35b341561066357600080fd5b6106a1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050611e3a565b005b34156106ae57600080fd5b6106ec600480803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612094565b6040518082815260200191505060405180910390f35b341561070d57600080fd5b61072360048080359060200190919050506121ac565b005b341561073057600080fd5b610738612221565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000806000806000808a1415151561079457600080fd5b600089141515156107a457600080fd5b60028b8b8b8b600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f1151561086857600080fd5b50506040518051905096506108803460045433612094565b955061088c3487612246565b945088610899868c61225f565b8115156108a257fe5b0493508360066000896000191660001916815260200190815260200160002054101515156108cf57600080fd5b6108dc856003548a611ba1565b92506108e88387612292565b91506108f48584612246565b905061091b6006600089600019166000191681526020019081526020016000205485612246565b600660008960001916600019168152602001908152602001600020819055508a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156109e557600080fd5b6102c65a03f115156109f657600080fd5b505050604051805190501515610a0b57600080fd5b6000821115610a7757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515610a7657600080fd5b5b8773ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab757600080fd5b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f4a42a397fcad5d4d60ebf2e7cf663489e687e9c6d2d2cf518488fc78044815ba8a8e8e8b60405180856000191660001916815260200184815260200183815260200182815260200194505050505060405180910390a45050505050505050505050565b60066020528060005260406000206000915090505481565b60045481565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bdf57600080fd5b60035481101515610bef57600080fd5b8060038190555050565b600080670de0b6b3a7640000610c0f858561225f565b811515610c1857fe5b0490508091505092915050565b6000806000808414151515610c3957600080fd5b60003414151515610c4957600080fd5b610c5534600354611466565b9250610c613484612246565b9150600285858433600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f11515610d2757600080fd5b5050604051805190509050610d576007600083600019166000191681526020019081526020016000205434612292565b600760008360001916600019168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f849e6b1794b7cb3bede4d37c1ca77bb512d0cdb3dda8603bfb5d04ce1650c8ce838786604051808460001916600019168152602001838152602001828152602001935050505060405180910390a35050505050565b60076020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600285858533600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f11515610eff57600080fd5b5050604051805190509150600760008360001916600019168152602001908152602001600020549050600760008360001916600019168152602001908152602001600020600090553373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610f8757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fdfcbc298f038f8dfeed385de93132b213796782867265b3fb3cf96523ad1a81b848787604051808460001916600019168152602001838152602001828152602001935050505060405180910390a35050505050565b600080831415151561101c57600080fd5b6000821415151561102c57600080fd5b600284848433600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f115156110f057600080fd5b50506040518051905090506111206006600083600019166000191681526020019081526020016000205484612292565b600660008360001916600019168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561121657600080fd5b6102c65a03f1151561122757600080fd5b50505060405180519050831115151561123f57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561131e57600080fd5b6102c65a03f1151561132f57600080fd5b50505060405180519050151561134457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f0a728b85095c48da44dc9e607993a04f5e3af97a235fb2d805ffc363fa74bffa838686604051808460001916600019168152602001838152602001828152602001935050505060405180910390a350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008061147e670de0b6b3a764000086612292565b61149087670de0b6b3a764000061225f565b81151561149957fe5b0492506114ae670de0b6b3a764000086612292565b6114c087670de0b6b3a764000061225f565b8115156114c957fe5b0691506000821415156114e4576114e1836001612292565b92505b6114ee8684612246565b905080935050505092915050565b6000806000806000806000808b1415151561151657600080fd5b60008a1415151561152657600080fd5b6000891415151561153657600080fd5b60028c8c8c8b600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f115156115fa57600080fd5b50506040518051905096508a6116108a8c61225f565b81151561161957fe5b04955061162886600354610bf9565b94506116348686612292565b935083600760008960001916600019168152602001908152602001600020541015151561166057600080fd5b61166d8660045433611ba1565b925061167c866003548a611ba1565b91506116a36007600089600019166000191681526020019081526020016000205485612246565b60076000896000191660001916815260200190815260200160002081905550888c73ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561179a57600080fd5b6102c65a03f115156117ab57600080fd5b50505060405180519050101515156117c257600080fd5b84821015611817576117d48583612246565b90508773ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561181657600080fd5b5b8b73ffffffffffffffffffffffffffffffffffffffff166323b872dd338a8c6000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15156118f657600080fd5b6102c65a03f1151561190757600080fd5b50505060405180519050151561191c57600080fd5b60006119288484612292565b111561199a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6119748585612292565b9081150290604051600060405180830381858888f19350505050151561199957600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6119be8886612246565b9081150290604051600060405180830381858888f1935050505015156119e357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167f8de9ee05a363c847bda3ed15fc9011be60b55c7cf2e7c024c173859ed2d3760c8a8f8f8f60405180856000191660001916815260200184815260200183815260200182815260200194505050505060405180910390a4505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ae857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b8657600080fd5b6064430181111515611b9757600080fd5b8060058190555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8a13d7836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611c6857600080fd5b6102c65a03f11515611c7957600080fd5b5050506040518051905015611c915760009050611cb2565b60055443111515611ca55760009050611cb2565b611caf8484610bf9565b90505b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d3a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d4170646000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611dc857600080fd5b6102c65a03f11515611dd957600080fd5b5050506040518051905043111515611df057600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b600080600285858533600060405160200152604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060206040518083038160008661646e5a03f11515611f0157600080fd5b5050604051805190509150600660008360001916600019168152602001908152602001600020549050600660008360001916600019168152602001908152602001600020600090558473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611ff457600080fd5b6102c65a03f1151561200557600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f22ff11109a205aa0810b30f9b2e68274f2eef8e292585877f61cf0a0a3b4637e848787604051808460001916600019168152602001838152602001828152602001935050505060405180910390a35050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8a13d7836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561215b57600080fd5b6102c65a03f1151561216c57600080fd5b505050604051805190501561218457600090506121a5565b6005544311151561219857600090506121a5565b6121a28484611466565b90505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561220757600080fd5b6004548110151561221757600080fd5b8060048190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115151561225457fe5b818303905092915050565b60008082840290506000841480612280575082848281151561227d57fe5b04145b151561228857fe5b8091505092915050565b60008082840190508381101580156122aa5750828110155b15156122b257fe5b80915050929150505600a165627a7a723058202ba3a0f5119ff966af85f63ca51f7f0d60eeb68b78e9d6819e8242b5c04f122c0029000000000000000000000000008016370e643866a88b73342eef763fc2bbcc84000000000000000000000000007d8d7bc3d89386eda8742c1d2162b52a33949200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000be8d3261cd699fc5ae124b3f8d38d568fd461b50000000000000000000000000000000000000000000000000000000000989680",
  "constructorArguments": "000000000000000000000000008016370e643866a88b73342eef763fc2bbcc84000000000000000000000000007d8d7bc3d89386eda8742c1d2162b52a33949200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000be8d3261cd699fc5ae124b3f8d38d568fd461b50000000000000000000000000000000000000000000000000000000000989680"
}