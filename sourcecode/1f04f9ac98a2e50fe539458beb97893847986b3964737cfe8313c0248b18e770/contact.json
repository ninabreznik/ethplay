{
  "address": "0x1c02ce498dc6d0d6ef05a253e021258b07eeba91",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EscrowMyEther",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-28\n*/\n\npragma solidity ^0.4.16;\n    contract EscrowMyEther  {\n        \n        //Author: Cheung Ka Yin\n        //Date: 27 September 2017\n        //Version: EscrowMyEther v1.0 MainNet\n        \n        address public owner;\n\n       \n        //Each buyer address consist of an array of EscrowStruct\n        //Used to store buyer's transactions and for buyers to interact with his transactions. (Such as releasing funds to seller)\n        struct EscrowStruct\n        {    \n            address buyer;          //Person who is making payment\n            address seller;         //Person who will receive funds\n            address escrow_agent;   //Escrow agent to resolve disputes, if any\n                                       \n            uint escrow_fee;        //Fee charged by escrow\n            uint amount;            //Amount of Ether (in Wei) seller will receive after fees\n\n            bool escrow_intervention; //Buyer or Seller can call for Escrow intervention\n            bool release_approval;   //Buyer or Escrow(if escrow_intervention is true) can approve release of funds to seller\n            bool refund_approval;    //Seller or Escrow(if escrow_intervention is true) can approve refund of funds to buyer \n\n            bytes32 notes;             //Notes for Seller\n            \n        }\n\n        struct TransactionStruct\n        {                        \n            //Links to transaction from buyer\n            address buyer;          //Person who is making payment\n            uint buyer_nounce;         //Nounce of buyer transaction                            \n        }\n\n\n        \n        //Database of Buyers. Each buyer then contain an array of his transactions\n        mapping(address => EscrowStruct[]) public buyerDatabase;\n\n        //Database of Seller and Escrow Agent\n        mapping(address => TransactionStruct[]) public sellerDatabase;        \n        mapping(address => TransactionStruct[]) public escrowDatabase;\n               \n        //Every address have a Funds bank. All refunds, sales and escrow comissions are sent to this bank. Address owner can withdraw them at any time.\n        mapping(address => uint) public Funds;\n\n        mapping(address => uint) public escrowFee;\n\n\n\n        //Run once the moment contract is created. Set contract creator\n        function EscrowMyEther() {\n            owner = msg.sender;\n        }\n\n        function() payable\n        {\n            //LogFundsReceived(msg.sender, msg.value);\n        }\n\n        function setEscrowFee(uint fee) {\n\n            //Allowed fee range: 0.1% to 10%, in increments of 0.1%\n            require (fee >= 1 && fee <= 100);\n            escrowFee[msg.sender] = fee;\n        }\n\n        function getEscrowFee(address escrowAddress) constant returns (uint) {\n            return (escrowFee[escrowAddress]);\n        }\n\n        \n        function newEscrow(address sellerAddress, address escrowAddress, bytes32 notes) payable returns (bool) {\n\n            require(msg.value > 0 && msg.sender != escrowAddress);\n        \n            //Store escrow details in memory\n            EscrowStruct memory currentEscrow;\n            TransactionStruct memory currentTransaction;\n            \n            currentEscrow.buyer = msg.sender;\n            currentEscrow.seller = sellerAddress;\n            currentEscrow.escrow_agent = escrowAddress;\n\n            //Calculates and stores Escrow Fee.\n            currentEscrow.escrow_fee = getEscrowFee(escrowAddress)*msg.value/1000;\n            \n            //0.25% dev fee\n            uint dev_fee = msg.value/400;\n            Funds[owner] += dev_fee;   \n\n            //Amount seller receives = Total amount - 0.25% dev fee - Escrow Fee\n            currentEscrow.amount = msg.value - dev_fee - currentEscrow.escrow_fee;\n\n            //These default to false, no need to set them again\n            /*currentEscrow.escrow_intervention = false;\n            currentEscrow.release_approval = false;\n            currentEscrow.refund_approval = false;  */ \n            \n            currentEscrow.notes = notes;\n \n            //Links this transaction to Seller and Escrow's list of transactions.\n            currentTransaction.buyer = msg.sender;\n            currentTransaction.buyer_nounce = buyerDatabase[msg.sender].length;\n\n            sellerDatabase[sellerAddress].push(currentTransaction);\n            escrowDatabase[escrowAddress].push(currentTransaction);\n            buyerDatabase[msg.sender].push(currentEscrow);\n            \n            return true;\n\n        }\n\n        //switcher 0 for Buyer, 1 for Seller, 2 for Escrow\n        function getNumTransactions(address inputAddress, uint switcher) constant returns (uint)\n        {\n\n            if (switcher == 0) return (buyerDatabase[inputAddress].length);\n\n            else if (switcher == 1) return (sellerDatabase[inputAddress].length);\n\n            else return (escrowDatabase[inputAddress].length);\n        }\n\n        //switcher 0 for Buyer, 1 for Seller, 2 for Escrow\n        function getSpecificTransaction(address inputAddress, uint switcher, uint ID) constant returns (address, address, address, uint, bytes32, uint, bytes32)\n\n        {\n            bytes32 status;\n            EscrowStruct memory currentEscrow;\n            if (switcher == 0)\n            {\n                currentEscrow = buyerDatabase[inputAddress][ID];\n                status = checkStatus(inputAddress, ID);\n            } \n            \n            else if (switcher == 1)\n\n            {  \n                currentEscrow = buyerDatabase[sellerDatabase[inputAddress][ID].buyer][sellerDatabase[inputAddress][ID].buyer_nounce];\n                status = checkStatus(currentEscrow.buyer, sellerDatabase[inputAddress][ID].buyer_nounce);\n            }\n\n                        \n            else if (switcher == 2)\n            \n            {        \n                currentEscrow = buyerDatabase[escrowDatabase[inputAddress][ID].buyer][escrowDatabase[inputAddress][ID].buyer_nounce];\n                status = checkStatus(currentEscrow.buyer, escrowDatabase[inputAddress][ID].buyer_nounce);\n            }\n\n            return (currentEscrow.buyer, currentEscrow.seller, currentEscrow.escrow_agent, currentEscrow.amount, status, currentEscrow.escrow_fee, currentEscrow.notes);\n        }   \n\n\n        function buyerHistory(address buyerAddress, uint startID, uint numToLoad) constant returns (address[], address[],uint[], bytes32[]){\n\n\n            uint length;\n            if (buyerDatabase[buyerAddress].length < numToLoad)\n                length = buyerDatabase[buyerAddress].length;\n            \n            else \n                length = numToLoad;\n            \n            address[] memory sellers = new address[](length);\n            address[] memory escrow_agents = new address[](length);\n            uint[] memory amounts = new uint[](length);\n            bytes32[] memory statuses = new bytes32[](length);\n           \n            for (uint i = 0; i < length; i++)\n            {\n  \n                sellers[i] = (buyerDatabase[buyerAddress][startID + i].seller);\n                escrow_agents[i] = (buyerDatabase[buyerAddress][startID + i].escrow_agent);\n                amounts[i] = (buyerDatabase[buyerAddress][startID + i].amount);\n                statuses[i] = checkStatus(buyerAddress, startID + i);\n            }\n            \n            return (sellers, escrow_agents, amounts, statuses);\n        }\n\n\n                 \n        function SellerHistory(address inputAddress, uint startID , uint numToLoad) constant returns (address[], address[], uint[], bytes32[]){\n\n            address[] memory buyers = new address[](numToLoad);\n            address[] memory escrows = new address[](numToLoad);\n            uint[] memory amounts = new uint[](numToLoad);\n            bytes32[] memory statuses = new bytes32[](numToLoad);\n\n            for (uint i = 0; i < numToLoad; i++)\n            {\n                if (i >= sellerDatabase[inputAddress].length)\n                    break;\n                buyers[i] = sellerDatabase[inputAddress][startID + i].buyer;\n                escrows[i] = buyerDatabase[buyers[i]][sellerDatabase[inputAddress][startID +i].buyer_nounce].escrow_agent;\n                amounts[i] = buyerDatabase[buyers[i]][sellerDatabase[inputAddress][startID + i].buyer_nounce].amount;\n                statuses[i] = checkStatus(buyers[i], sellerDatabase[inputAddress][startID + i].buyer_nounce);\n            }\n            return (buyers, escrows, amounts, statuses);\n        }\n\n        function escrowHistory(address inputAddress, uint startID, uint numToLoad) constant returns (address[], address[], uint[], bytes32[]){\n        \n            address[] memory buyers = new address[](numToLoad);\n            address[] memory sellers = new address[](numToLoad);\n            uint[] memory amounts = new uint[](numToLoad);\n            bytes32[] memory statuses = new bytes32[](numToLoad);\n\n            for (uint i = 0; i < numToLoad; i++)\n            {\n                if (i >= escrowDatabase[inputAddress].length)\n                    break;\n                buyers[i] = escrowDatabase[inputAddress][startID + i].buyer;\n                sellers[i] = buyerDatabase[buyers[i]][escrowDatabase[inputAddress][startID +i].buyer_nounce].seller;\n                amounts[i] = buyerDatabase[buyers[i]][escrowDatabase[inputAddress][startID + i].buyer_nounce].amount;\n                statuses[i] = checkStatus(buyers[i], escrowDatabase[inputAddress][startID + i].buyer_nounce);\n            }\n            return (buyers, sellers, amounts, statuses);\n    }\n\n        function checkStatus(address buyerAddress, uint nounce) constant returns (bytes32){\n\n            bytes32 status = \"\";\n\n            if (buyerDatabase[buyerAddress][nounce].release_approval){\n                status = \"Complete\";\n            } else if (buyerDatabase[buyerAddress][nounce].refund_approval){\n                status = \"Refunded\";\n            } else if (buyerDatabase[buyerAddress][nounce].escrow_intervention){\n                status = \"Pending Escrow Decision\";\n            } else\n            {\n                status = \"In Progress\";\n            }\n       \n            return (status);\n        }\n\n        \n        //When transaction is complete, buyer will release funds to seller\n        //Even if EscrowEscalation is raised, buyer can still approve fund release at any time\n        function buyerFundRelease(uint ID)\n        {\n            require(ID < buyerDatabase[msg.sender].length && \n            buyerDatabase[msg.sender][ID].release_approval == false &&\n            buyerDatabase[msg.sender][ID].refund_approval == false);\n            \n            //Set release approval to true. Ensure approval for each transaction can only be called once.\n            buyerDatabase[msg.sender][ID].release_approval = true;\n\n            address seller = buyerDatabase[msg.sender][ID].seller;\n            address escrow_agent = buyerDatabase[msg.sender][ID].escrow_agent;\n\n            uint amount = buyerDatabase[msg.sender][ID].amount;\n            uint escrow_fee = buyerDatabase[msg.sender][ID].escrow_fee;\n\n            //Move funds under seller's owership\n            Funds[seller] += amount;\n            Funds[escrow_agent] += escrow_fee;\n\n\n        }\n\n        //Seller can refund the buyer at any time\n        function sellerRefund(uint ID)\n        {\n            address buyerAddress = sellerDatabase[msg.sender][ID].buyer;\n            uint buyerID = sellerDatabase[msg.sender][ID].buyer_nounce;\n\n            require(\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false); \n\n            address escrow_agent = buyerDatabase[buyerAddress][buyerID].escrow_agent;\n            uint escrow_fee = buyerDatabase[buyerAddress][buyerID].escrow_fee;\n            uint amount = buyerDatabase[buyerAddress][buyerID].amount;\n        \n            //Once approved, buyer can invoke WithdrawFunds to claim his refund\n            buyerDatabase[buyerAddress][buyerID].refund_approval = true;\n\n            Funds[buyerAddress] += amount;\n            Funds[escrow_agent] += escrow_fee;\n            \n        }\n        \n        \n\n        //Either buyer or seller can raise escalation with escrow agent. \n        //Once escalation is activated, escrow agent can release funds to seller OR make a full refund to buyer\n\n        //Switcher = 0 for Buyer, Switcher = 1 for Seller\n        function EscrowEscalation(uint switcher, uint ID)\n        {\n            //To activate EscrowEscalation\n            //1) Buyer must not have approved fund release.\n            //2) Seller must not have approved a refund.\n            //3) EscrowEscalation is being activated for the first time\n\n            //There is no difference whether the buyer or seller activates EscrowEscalation.\n            address buyerAddress;\n            uint buyerID; //transaction ID of in buyer's history\n            if (switcher == 0) // Buyer\n            {\n                buyerAddress = msg.sender;\n                buyerID = ID;\n            } else if (switcher == 1) //Seller\n            {\n                buyerAddress = sellerDatabase[msg.sender][ID].buyer;\n                buyerID = sellerDatabase[msg.sender][ID].buyer_nounce;\n            }\n\n            require(buyerDatabase[buyerAddress][buyerID].escrow_intervention == false  &&\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false);\n\n            //Activate the ability for Escrow Agent to intervent in this transaction\n            buyerDatabase[buyerAddress][buyerID].escrow_intervention = true;\n\n            \n        }\n        \n        //ID is the transaction ID from Escrow's history. \n        //Decision = 0 is for refunding Buyer. Decision = 1 is for releasing funds to Seller\n        function escrowDecision(uint ID, uint Decision)\n        {\n            //Escrow can only make the decision IF\n            //1) Buyer has not yet approved fund release to seller\n            //2) Seller has not yet approved a refund to buyer\n            //3) Escrow Agent has not yet approved fund release to seller AND not approved refund to buyer\n            //4) Escalation Escalation is activated\n\n            address buyerAddress = escrowDatabase[msg.sender][ID].buyer;\n            uint buyerID = escrowDatabase[msg.sender][ID].buyer_nounce;\n            \n\n            require(\n            buyerDatabase[buyerAddress][buyerID].release_approval == false &&\n            buyerDatabase[buyerAddress][buyerID].escrow_intervention == true &&\n            buyerDatabase[buyerAddress][buyerID].refund_approval == false);\n            \n            uint escrow_fee = buyerDatabase[buyerAddress][buyerID].escrow_fee;\n            uint amount = buyerDatabase[buyerAddress][buyerID].amount;\n\n            if (Decision == 0) //Refund Buyer\n            {\n                buyerDatabase[buyerAddress][buyerID].refund_approval = true;    \n                Funds[buyerAddress] += amount;\n                Funds[msg.sender] += escrow_fee;\n                \n            } else if (Decision == 1) //Release funds to Seller\n            {                \n                buyerDatabase[buyerAddress][buyerID].release_approval = true;\n                Funds[buyerDatabase[buyerAddress][buyerID].seller] += amount;\n                Funds[msg.sender] += escrow_fee;\n            }  \n        }\n        \n        function WithdrawFunds()\n        {\n            uint amount = Funds[msg.sender];\n            Funds[msg.sender] = 0;\n            if (!msg.sender.send(amount))\n                Funds[msg.sender] = amount;\n        }\n\n\n        function CheckBalance(address fromAddress) constant returns (uint){\n            return (Funds[fromAddress]);\n        }\n     \n    }",
  "bytecode": ""
}