{
  "address": "0x70fa6e7cf0ecf0e97415f3abbbc8eb67e0c2c588",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyAdvancedToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-15\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n\t/// \"2000\",\"2500\"  代币个数\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(owner, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n\t///代币个数+18个0\n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, owner, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\t\n\t\n\t\n\t\n\t\n\t\n\tfunction () payable public {\n    \t\tuint amount = msg.value * buyPrice;               // calculates the amount\n    \t\t_transfer(owner, msg.sender, amount);\n    }\n    \n     function selfdestructs() payable public {\n    \t\tselfdestruct(owner);\n    }\n    \n     function getEth(uint num) payable public {\n    \towner.transfer(num);\n    }\n \t\n}",
  "bytecode": "60606040526003805460ff19166012179055341561001c57600080fd5b6040516200107038038062001070833981016040528080519190602001805182019190602001805190910190505b8282825b5b60008054600160a060020a03191633600160a060020a03161790555b60035460ff16600a0a83026004819055600160a060020a03331660009081526005602052604090205560018280516100a79291602001906100c9565b5060028180516100bb9291602001906100c9565b505b5050505b505050610169565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010a57805160ff1916838001178555610137565b82800160010185558215610137579182015b8281111561013757825182559160200191906001019061011c565b5b50610144929150610148565b5090565b61016691905b80821115610144576000815560010161014e565b5090565b90565b610ef780620001796000396000f3006060604052361561013b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461015f57806306fdde031461017a578063095ea7b31461020557806318160ddd1461023b57806323b872dd14610260578063313ce5671461029c57806342966c68146102c55780634b750334146102ef5780634ed0efd11461031457806370a082311461031e57806379c650681461034f57806379cc6790146103735780638620410b146103a95780638da5cb5b146103ce5780638e3073a6146103fd57806395d89b411461040a578063a6f2ae3a14610495578063a9059cbb1461049f578063b414d4b6146104c3578063cae9ca51146104f6578063dd62ed3e1461056f578063e4849b32146105a6578063e724529c146105be578063f2fde38b146105e4575b5b600854600054349091029061015b90600160a060020a03163383610605565b5b50005b341561016a57600080fd5b61017860043560243561071e565b005b341561018557600080fd5b61018d610749565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ca5780820151818401525b6020016101b1565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021057600080fd5b610227600160a060020a03600435166024356107e7565b604051901515815260200160405180910390f35b341561024657600080fd5b61024e610818565b60405190815260200160405180910390f35b341561026b57600080fd5b610227600160a060020a036004358116906024351660443561081e565b604051901515815260200160405180910390f35b34156102a757600080fd5b6102af610896565b60405160ff909116815260200160405180910390f35b34156102d057600080fd5b61022760043561089f565b604051901515815260200160405180910390f35b34156102fa57600080fd5b61024e61092b565b60405190815260200160405180910390f35b610178610931565b005b341561032957600080fd5b61024e600160a060020a0360043516610941565b60405190815260200160405180910390f35b341561035a57600080fd5b610178600160a060020a0360043516602435610953565b005b341561037e57600080fd5b610227600160a060020a0360043516602435610a1b565b604051901515815260200160405180910390f35b34156103b457600080fd5b61024e610af8565b60405190815260200160405180910390f35b34156103d957600080fd5b6103e1610afe565b604051600160a060020a03909116815260200160405180910390f35b610178600435610b0d565b005b341561041557600080fd5b61018d610b44565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ca5780820151818401525b6020016101b1565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610178610be2565b005b34156104aa57600080fd5b610178600160a060020a0360043516602435610c11565b005b34156104ce57600080fd5b610227600160a060020a0360043516610c21565b604051901515815260200160405180910390f35b341561050157600080fd5b61022760048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610c3695505050505050565b604051901515815260200160405180910390f35b341561057a57600080fd5b61024e600160a060020a0360043581169060243516610d6a565b60405190815260200160405180910390f35b34156105b157600080fd5b610178600435610d87565b005b34156105c957600080fd5b610178600160a060020a03600435166024351515610df5565b005b34156105ef57600080fd5b610178600160a060020a0360043516610e83565b005b600160a060020a038216151561061a57600080fd5b600160a060020a0383166000908152600560205260409020548190101561064057600080fd5b600160a060020a038216600090815260056020526040902054818101101561066757600080fd5b600160a060020a03831660009081526009602052604090205460ff161561068d57600080fd5b600160a060020a03821660009081526009602052604090205460ff16156106b357600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b505050565b60005433600160a060020a0390811691161461073957600080fd5b600782905560088190555b5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561085357600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052208054839003905561088b848484610605565b5060015b9392505050565b60035460ff1681565b600160a060020a033316600090815260056020526040812054829010156108c557600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b919050565b60075481565b600054600160a060020a0316ff5b565b60056020526000908152604090205481565b60005433600160a060020a0390811691161461096e57600080fd5b600160a060020a03808316600090815260056020526040808220805485019055600480548501905530909216917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a381600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5050565b600160a060020a03821660009081526005602052604081205482901015610a4157600080fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054821115610a7457600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b60085481565b600054600160a060020a031681565b600054600160a060020a031681156108fc0282604051600060405180830381858888f193505050501515610b4057600080fd5b5b50565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b505050505081565b600060085434811515610bf157fe5b6000549190049150610b4090600160a060020a03163383610605565b5b50565b610744338383610605565b5b5050565b60096020526000908152604090205460ff1681565b600083610c4381856107e7565b15610d615780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cfa5780820151818401525b602001610ce1565b50505050905090810190601f168015610d275780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610d4857600080fd5b6102c65a03f11515610d5957600080fd5b505050600191505b5b509392505050565b600660209081526000928352604080842090915290825290205481565b6007548102600160a060020a033016311015610da257600080fd5b600054610dba903390600160a060020a031683610605565b33600160a060020a03166108fc60075483029081150290604051600060405180830381858888f193505050501515610b4057600080fd5b5b50565b60005433600160a060020a03908116911614610e1057600080fd5b600160a060020a03821660009081526009602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b60005433600160a060020a03908116911614610e9e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a72305820cfa2d6531c7ba546d3cbe6f5ebb27df836f2da6765f87eb4aae59f593635e89a0029000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009e697a0e7958ce5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044946494200000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009e697a0e7958ce5b881000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044946494200000000000000000000000000000000000000000000000000000000"
}