{
  "address": "0xbc425c4209bd4c3f1fc9686371513f13f72cc70a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "URA",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-22\n*/\n\npragma solidity ^0.5.2;\n\n\n/**\n *  URA Mraket contract\n *  web site: ura.market\n *\n *  URA.market  is a decentralized trade and investment platform, created by Ethereum net.\n *\n *  URA.market is controlled without human participation,\n *  and by automated smart contracts with refusal from ownership activated function.\n *\n * Gas limit: 150 000 (only the first time, average ~ 50 000)\n * Gas price: https://ethgasstation.info/\n *\n * github: https://github.com/bigdaddy777/URA-MARKET-COIN\n */\n\n\nlibrary ToAddress {\n    function toAddr(uint _source) internal pure returns(address payable) {\n        return address(_source);\n    }\n\n    function toAddr(bytes memory _source) internal pure returns(address payable addr) {\n        // solium-disable security/no-inline-assembly\n        assembly { addr := mload(add(_source,0x14)) }\n        return addr;\n    }\n\n    function isNotContract(address addr) internal view returns(bool) {\n        // solium-disable security/no-inline-assembly\n        uint256 length;\n        assembly { length := extcodesize(addr) }\n        return length == 0;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// @wiki: https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function tokensOwner() public view returns (uint256);\n    function contracBalance() public view returns (uint256);\n    function balanceOf(address _tokenOwner) public view returns (uint256 balanceOwner);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event EtherTransfer(address indexed from, address indexed to, uint256 etherAmount);\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol.\n// ----------------------------------------------------------------------------\ncontract ERC20 is ERC20Interface {\n    using SafeMath for uint;\n    using ToAddress for *;\n\n    string constant public symbol = \"URA\";\n    string constant public  name = \"URA market coin\";\n    uint8 constant internal decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) balances;\n\n\n    // ------------------------------------------------------------------------\n    // Get balance on contract\n    // ------------------------------------------------------------------------\n    function contracBalance() public view returns (uint256 contractBalance) {\n        contractBalance = address(this).balance;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address _tokenOwner) public view returns (uint256 balanceOwner) {\n        return balances[_tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Addon shows caller tokens.\n    // ------------------------------------------------------------------------\n    function tokensOwner() public view returns (uint256 tokens) {\n        tokens = balances[msg.sender];\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n// Bookeeper contract that holds the amount of dividents in Ether.\n// ----------------------------------------------------------------------------\ncontract Dividend is ERC20 {\n\n    uint8 public constant dividendsCosts = 10; // Dividends 10%.\n    uint16 public constant day = 6000;\n    uint256 public dividendes; // storage for Dividends.\n\n    mapping(address => uint256) bookKeeper;\n\n\n    event SendOnDividend(address indexed customerAddress, uint256 dividendesAmount);\n    event WithdrawDividendes(address indexed customerAddress, uint256 dividendesAmount);\n\n    constructor() public {}\n\n\n    // ------------------------------------------------------------------------\n    // Withdraw dividendes.\n    // ------------------------------------------------------------------------\n    function withdrawDividendes() external payable returns(bool success) {\n        require(msg.sender.isNotContract(),\n                \"the contract can not hold tokens\");\n\n        uint256 _tokensOwner = balanceOf(msg.sender);\n\n        require(_tokensOwner > 0, \"cannot pass 0 value\");\n        require(bookKeeper[msg.sender] > 0,\n                \"to withdraw dividends, please wait\");\n\n        uint256 _dividendesAmount = dividendesCalc(_tokensOwner);\n\n        require(_dividendesAmount > 0, \"dividendes amount > 0\");\n\n        bookKeeper[msg.sender] = block.number;\n        dividendes = dividendes.sub(_dividendesAmount);\n\n        msg.sender.transfer(_dividendesAmount);\n\n        emit WithdrawDividendes(msg.sender, _dividendesAmount);\n\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get value of dividendes.\n    // ------------------------------------------------------------------------\n    function dividendesOf(address _owner)\n        public\n        view\n        returns(uint256 dividendesAmount) {\n        uint256 _tokens = balanceOf(_owner);\n\n        dividendesAmount = dividendesCalc(_tokens);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Count percent of dividendes from ether.\n    // ------------------------------------------------------------------------\n    function onDividendes(uint256 _value, uint8 _dividendsCosts)\n        internal\n        pure\n        returns(uint256 forDividendes) {\n        return _value.mul(_dividendsCosts).div(100);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get number of dividendes in ether\n    // * @param _tokens: Amount customer tokens.\n    // * @param _dividendesPercent: Customer tokens percent in 10e18.\n    // *\n    // * @retunrs dividendesReceived: amount of dividendes in ether.\n    // ------------------------------------------------------------------------\n    function dividendesCalc(uint256 _tokensAmount)\n        internal\n        view\n        returns(uint256 dividendesReceived) {\n        if (_tokensAmount == 0) {\n            return 0;\n        }\n\n        uint256 _tokens = _tokensAmount.mul(10e18);\n        uint256 _dividendesPercent = dividendesPercent(_tokens); // Get % from tokensOwner.\n\n        dividendesReceived = dividendes.mul(_dividendesPercent).div(100);\n        dividendesReceived = dividendesReceived.div(10e18);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get number of dividendes in percent\n    // * @param _tokens: Amount of (tokens * 10e18).\n    // * returns: tokens % in 10e18.\n    // ------------------------------------------------------------------------\n    function dividendesPercent(uint256 _tokens)\n        internal\n        view\n        returns(uint256 percent) {\n        if (_tokens == 0) {\n            return 0;\n        }\n\n        uint256 _interest = accumulatedInterest();\n\n        if (_interest > 100) {\n            _interest = 100;\n        }\n\n        percent = _tokens.mul(_interest).div(totalSupply);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Block value when buying.\n    // ------------------------------------------------------------------------\n    function accumulatedInterest() private view returns(uint256 interest) {\n        if (bookKeeper[msg.sender] == 0) {\n            interest = 0;\n        } else {\n            interest = block.number.sub(bookKeeper[msg.sender]).div(day);\n        }\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n// URA.market main contract.\n// ----------------------------------------------------------------------------\ncontract URA is ERC20, Dividend {\n\n    // The initial cost of the token, it can not be less. //\n    uint128 constant tokenPriceInit = 0.00000000001 ether;\n    uint128 public constant limiter = 15 ether;\n\n    uint8 public constant advertisingCosts = 5; // 5% for transfer advertising.\n    uint8 public constant forReferralCosts = 2; // 2% for transfer to referral.\n    uint8 public constant forWithdrawCosts = 3; // 3% for the withdraw of tokens.\n\n    // For advertising. //\n    address payable constant advertising = 0x4d332E1f9d55d9B89dc2a8457B693Beaa7b36b2e;\n\n\n    event WithdrawTokens(address indexed customerAddress, uint256 ethereumWithdrawn);\n    event ReverseAccess(uint256 etherAmount);\n    event ForReferral(uint256 etherAmount);\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public { }\n\n\n    // ------------------------------------------------------------------------\n    // Purchase\n    // * @param _reverseAccessOfLimiter: Excess value.\n    // * @param _aTokenPrice: Price For one token.\n    // * @param _forAdvertising: Advertising victim.\n    // * @param _forDividendes: Dividend sacrifice.\n    // * @param _amountOfTokens: Ether to tokens amount.\n    // * @param _reverseAccess: Change remainder in ether.\n    // ------------------------------------------------------------------------\n    function () external payable {\n        require(msg.sender.isNotContract(),\n                \"the contract can not hold tokens\");\n\n        address payable _referralAddress = msg.data.toAddr();\n        uint256 _incomingEthereum = msg.value;\n\n        uint256 _forReferral;\n        uint256 _reverseAccessOfLimiter;\n\n        if (_incomingEthereum > limiter) {\n            _reverseAccessOfLimiter = _incomingEthereum.sub(limiter);\n            _incomingEthereum = limiter;\n        }\n\n        uint256 _aTokenPrice = tokenPrice();\n        uint256 _dividendesOwner = dividendesOf(msg.sender);\n        uint256 _forAdvertising = _incomingEthereum.mul(advertisingCosts).div(100);\n        uint256 _forDividendes = onDividendes(_incomingEthereum, dividendsCosts);\n\n        if (_referralAddress != address(0)) {\n            _forReferral = _incomingEthereum.mul(forReferralCosts).div(100);\n            _forAdvertising = _forAdvertising.sub(_forReferral);\n        }\n\n        _incomingEthereum = _incomingEthereum.sub(\n            _forDividendes\n        ).sub(\n            _forAdvertising\n        ).sub(\n            _forReferral\n        );\n\n        require(_incomingEthereum >= _aTokenPrice,\n                \"the amount of ether is not enough\");\n\n        (uint256 _amountOfTokens,\n         uint256 _reverseAccess) = ethereumToTokens(_incomingEthereum, _aTokenPrice);\n\n        advertising.transfer(_forAdvertising);\n\n        _reverseAccessOfLimiter = _reverseAccessOfLimiter.add(_reverseAccess);\n\n        if (_reverseAccessOfLimiter > 0) {\n            // If there are leftovers, then return to customer. //\n            msg.sender.transfer(_reverseAccessOfLimiter);\n            emit ReverseAccess(_reverseAccessOfLimiter);\n        }\n        if (_forReferral > 0 && _referralAddress != address(0)) {\n            _referralAddress.transfer(_forReferral);\n            emit ForReferral(_forReferral);\n        }\n        if (_dividendesOwner > _aTokenPrice) {\n            reinvest();\n        }\n\n        bookKeeper[msg.sender] = block.number;\n        balances[msg.sender] = balances[msg.sender].add(_amountOfTokens);\n        totalSupply = totalSupply.add(_amountOfTokens);\n        dividendes = dividendes.add(_forDividendes);\n\n        emit EtherTransfer(msg.sender, advertising, _forAdvertising);\n        emit Transfer(address(0), msg.sender, _amountOfTokens);\n        emit SendOnDividend(msg.sender, _forDividendes);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Increment for token cost\n    // - Dynamic property that is responsible for\n    // - the rise and fall of the price of the token.\n    // ------------------------------------------------------------------------\n    function tokenPrice() public view returns(uint256 priceForToken) {\n        uint256 _contracBalance = contracBalance();\n\n        if (totalSupply == 0 || _contracBalance == 0) {\n            return tokenPriceInit;\n        }\n\n        return _contracBalance.div(totalSupply).mul(4).div(3);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Burning tokens function\n    // * @param _valueTokens: Amount tokens for burning.\n    // * @param _aTokenPrice: One token price.\n    // * @param _etherForTokens: Calculate the ether for burning tokens.\n    // * @param _forDividendes: Calculate the are common Dividendes.\n    // * @param _contracBalance: Get contract balance.\n    // * @param _dividendesAmount: Get the percentage of dividends burned tokens.\n    // ------------------------------------------------------------------------\n    function withdraw(uint256 _valueTokens) external payable returns(bool success) {\n        require(msg.sender.isNotContract(),\n                \"the contract can not hold tokens\");\n\n        uint256 _tokensOwner = balanceOf(msg.sender);\n\n        require(_valueTokens > 0, \"cannot pass 0 value\");\n        require(_tokensOwner >= _valueTokens,\n                \"you do not have so many tokens\");\n\n        uint256 _aTokenPrice = tokenPrice();\n        uint256 _etherForTokens = tokensToEthereum(_valueTokens, _aTokenPrice);\n        uint256 _contracBalance = contracBalance();\n        uint256 _forDividendes = onDividendes(_etherForTokens, forWithdrawCosts);\n        uint256 _dividendesAmount = dividendesCalc(_tokensOwner);\n\n        _etherForTokens = _etherForTokens.sub(_forDividendes);\n        totalSupply = totalSupply.sub(_valueTokens);\n\n        if (_dividendesAmount > 0) {\n            dividendes = dividendes.sub(_dividendesAmount);\n            _etherForTokens = _etherForTokens.add(_dividendesAmount);\n            emit WithdrawDividendes(msg.sender, _dividendesAmount);\n        }\n        if (_tokensOwner == _valueTokens) {\n            // if the owner out of system //\n            bookKeeper[msg.sender] = 0;\n            balances[msg.sender] = 0;\n        } else {\n           bookKeeper[msg.sender] = block.number;\n           balances[msg.sender] = balances[msg.sender].sub(_valueTokens);\n        }\n        if (_etherForTokens > _contracBalance) {\n            _etherForTokens = _contracBalance;\n        }\n\n        msg.sender.transfer(_etherForTokens);\n\n        emit WithdrawTokens(msg.sender, _etherForTokens);\n        emit SendOnDividend(address(0), _forDividendes);\n\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Reinvest dividends into tokens\n    // ------------------------------------------------------------------------\n    function reinvest() public payable returns(bool success) {\n        require(msg.sender.isNotContract(),\n                \"the contract can not hold tokens\");\n\n        uint256 _dividendes = dividendesOf(msg.sender);\n        uint256 _aTokenPrice = tokenPrice();\n\n        require(_dividendes >= _aTokenPrice, \"not enough dividends\");\n\n        (uint256 _amountOfTokens,\n         uint256 _reverseAccess) = ethereumToTokens(_dividendes, _aTokenPrice);\n\n        require(_amountOfTokens > 0, \"tokens amount not zero\");\n\n        dividendes = dividendes.sub(_dividendes.sub(_reverseAccess));\n        balances[msg.sender] = balances[msg.sender].add(_amountOfTokens);\n        totalSupply = totalSupply.add(_amountOfTokens);\n        bookKeeper[msg.sender] = block.number;\n\n        emit Transfer(address(0), msg.sender, _amountOfTokens);\n\n        return true;\n    }\n\n\n\n    // ------------------------------------------------------------------------\n    // ether conversion to token\n    // ------------------------------------------------------------------------\n    function ethereumToTokens(uint256 _incomingEthereum, uint256 _aTokenPrice)\n        private\n        pure\n        returns(uint256 tokensReceived, uint256 reverseAccess) {\n        require(_incomingEthereum >= _aTokenPrice,\n                \"input ether > a token price\");\n\n        tokensReceived = _incomingEthereum.div(_aTokenPrice);\n\n        require(tokensReceived > 0, \"you can not buy 0 tokens\");\n\n        reverseAccess = _incomingEthereum.sub(tokensReceived.mul(_aTokenPrice));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Inverse function ethereumToTokens (Token conversion to ether).\n    // ------------------------------------------------------------------------\n    function tokensToEthereum(uint256 _tokens, uint256 _aTokenPrice)\n        private\n        pure\n        returns(uint256 etherReceived) {\n        require(_tokens > 0, \"0 tokens cannot be counted\");\n\n        etherReceived = _aTokenPrice.mul(_tokens);\n    }\n\n}",
  "bytecode": ""
}