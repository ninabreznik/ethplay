{
  "address": "0x0faa28da415abdda123233a00b7cc7f8c56445b1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vesting",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\npragma solidity 0.4.25;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n  using SafeMath for uint256;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    // safeApprove should only be called when setting an initial allowance, \n    // or when resetting it to zero. To increase and decrease it, use \n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n    require(token.approve(spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    require(token.approve(spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n    require(token.approve(spender, newAllowance));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/Vesting.sol\n\n/**\n * @title Vesting\n * @dev Vesting is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract Vesting is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // ERC20 basic token contract being held\n    IERC20 private _token;\n\n    // Info holds all the relevant information to calculate the right amount for `release`\n    struct Info {\n        bool    known;          // Logs whether or not the address is known and eligible to receive tokens\n        uint256 totalAmount;    // Total amount of tokens to receive\n        uint256 receivedAmount; // Amount of tokens already received\n        uint256 startTime;      // Starting time of vesting\n        uint256 releaseTime;    // End time of vesting\n    }\n\n    // Mapping of an address to it's information\n    mapping(address => Info) private _info;\n\n    constructor(\n        IERC20 token\n    )\n        public\n    {\n        _token = token;\n    }\n    \n    /**\n     * @notice Add beneficiaries to the contract, allowing them to withdraw tokens.\n     * @param beneficiary The address associated with the beneficiary.\n     * @param releaseTime The timestamp at which 100% of their allocation is freed up.\n     * @param amount The amount of tokens they can receive in total.\n     */\n    function addBeneficiary(\n        address beneficiary,\n        uint256 startTime,\n        uint256 releaseTime,\n        uint256 amount\n    )\n        external\n        onlyOwner\n    {\n        Info storage info = _info[beneficiary];\n        require(!info.known, \"This address is already known to the contract.\");\n        require(releaseTime > startTime, \"Release time must be later than the start time.\");\n        require(releaseTime > block.timestamp, \"End of vesting period must be somewhere in the future.\");\n\n        info.startTime = startTime; // Set starting time\n        info.totalAmount = amount; // Set amount\n        info.releaseTime = releaseTime; // Set release time\n        info.known = true; // Prevent overwriting of address data\n    }\n\n    /**\n     * @notice Remove a beneficiary from the contract, preventing them from \n     * retrieving tokens in the future.\n     * @param beneficiary The address associated with the beneficiary.\n     */\n    function removeBeneficiary(address beneficiary) external onlyOwner {\n        Info storage info = _info[beneficiary];\n        require(info.known, \"The address you are trying to remove is unknown to the contract\");\n\n        _release(beneficiary); // Release leftover tokens before removing the investor\n        info.known = false;\n        info.totalAmount = 0;\n        info.receivedAmount = 0;\n        info.startTime = 0;\n        info.releaseTime = 0;\n    }\n\n    /**\n     * @notice Withdraw tokens from the contract. This function is strictly\n     * for the owner, intended to take out any leftovers if needed.\n     * @param amount The amount of tokens to take out.\n     */\n    function withdraw(uint256 amount) external onlyOwner {\n        _token.safeTransfer(owner(), amount);\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     * This function will check if a caller is eligible to receive tokens\n     * and if so, will then call the internal `_release` function.\n     */\n    function release() external {\n        require(_info[msg.sender].known, \"You are not eligible to receive tokens from this contract.\");\n        _release(msg.sender);\n    }\n\n    /**\n     * @notice Simple function to return vesting information for a caller.\n     * Callers can then validate if their information has been properly stored,\n     * instead of trusting the contract owner.\n     */\n    function check() external view returns (uint256, uint256, uint256, uint256) {\n        return (\n            _info[msg.sender].totalAmount, \n            _info[msg.sender].receivedAmount,\n            _info[msg.sender].startTime, \n            _info[msg.sender].releaseTime\n        );\n    }\n\n    /**\n     * @notice Internal function to release tokens to a beneficiary.\n     * This function has been extended from the `release` function included in\n     * `TokenTimelock.sol` included in the OpenZeppelin-solidity library, to allow\n     * for a 'second-by-second' token vesting schedule. Since block timestamps\n     * is the closest Solidity can get to reading the current time, this\n     * mechanism is used.\n     */\n    function _release(address beneficiary) internal {\n        Info storage info = _info[beneficiary];\n        if (block.timestamp >= info.releaseTime) {\n            uint256 remainingTokens = info.totalAmount.sub(info.receivedAmount);\n            require(remainingTokens > 0, \"No tokens left to take out.\");\n\n            // Since `safeTransfer` will throw upon failure, we can modify the state beforehand.\n            info.receivedAmount = info.totalAmount;\n            _token.safeTransfer(beneficiary, remainingTokens);\n        } else if (block.timestamp > info.startTime) {\n            // Calculate allowance\n            uint256 diff = info.releaseTime.sub(info.startTime);\n            uint256 tokensPerTick = info.totalAmount.div(diff);\n            uint256 ticks = block.timestamp.sub(info.startTime);\n            uint256 tokens = tokensPerTick.mul(ticks);\n            uint256 receivableTokens = tokens.sub(info.receivedAmount);\n            require(receivableTokens > 0, \"No tokens to take out right now.\");\n\n            // Since `safeTransfer` will throw upon failure, we can modify the state beforehand.\n            info.receivedAmount = info.receivedAmount.add(receivableTokens);\n            _token.safeTransfer(beneficiary, receivableTokens);\n        } else {\n            // We could let SafeMath revert release calls if vesting has not started yet.\n            // However, in the interest of clarity to contract callers, this error\n            // message is added instead.\n            revert(\"This address is not eligible to receive tokens yet.\");\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806111c283398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611082806101406000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e1a7d4d1461009e57806359633a1c146100cb578063715018a61461010e57806386d1a69f146101255780638da5cb5b1461013c5780638f32d59b14610193578063919840ad146101c2578063b095e12914610202578063f2fde38b14610263575b600080fd5b3480156100aa57600080fd5b506100c9600480360381019080803590602001909291905050506102a6565b005b3480156100d757600080fd5b5061010c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610310565b005b34801561011a57600080fd5b50610123610464565b005b34801561013157600080fd5b5061013a610536565b005b34801561014857600080fd5b5061015161062b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019f57600080fd5b506101a8610654565b604051808215151515815260200191505060405180910390f35b3480156101ce57600080fd5b506101d76106ab565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561020e57600080fd5b50610261600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506107cb565b005b34801561026f57600080fd5b506102a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a47565b005b6102ae610654565b15156102b957600080fd5b61030d6102c461062b565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a669092919063ffffffff16565b50565b600061031a610654565b151561032557600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff161515610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f8152602001807f546865206164647265737320796f752061726520747279696e6720746f20726581526020017f6d6f766520697320756e6b6e6f776e20746f2074686520636f6e74726163740081525060400191505060405180910390fd5b61041b82610b54565b60008160000160006101000a81548160ff021916908315150217905550600081600101819055506000816002018190555060008160030181905550600081600401819055505050565b61046c610654565b151561047757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001807f596f7520617265206e6f7420656c696769626c6520746f20726563656976652081526020017f746f6b656e732066726f6d207468697320636f6e74726163742e00000000000081525060400191505060405180910390fd5b61062933610b54565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600080600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154935093509350935090919293565b60006107d5610654565b15156107e057600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff161515156108ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f54686973206164647265737320697320616c7265616479206b6e6f776e20746f81526020017f2074686520636f6e74726163742e00000000000000000000000000000000000081525060400191505060405180910390fd5b838311151561096b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f52656c656173652074696d65206d757374206265206c61746572207468616e2081526020017f7468652073746172742074696d652e000000000000000000000000000000000081525060400191505060405180910390fd5b4283111515610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001807f456e64206f662076657374696e6720706572696f64206d75737420626520736f81526020017f6d65776865726520696e20746865206675747572652e0000000000000000000081525060400191505060405180910390fd5b83816003018190555081816001018190555082816004018190555060018160000160006101000a81548160ff0219169083151502179055505050505050565b610a4f610654565b1515610a5a57600080fd5b610a6381610eb2565b50565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b81019080805190602001909291905050501515610b4f57600080fd5b505050565b6000806000806000806000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209650866004015442101515610ca157610bc887600201548860010154610fac90919063ffffffff16565b9550600086111515610c42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4e6f20746f6b656e73206c65667420746f2074616b65206f75742e000000000081525060200191505060405180910390fd5b86600101548760020181905550610c9c8887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a669092919063ffffffff16565b610ea8565b8660030154421115610e1357610cc887600301548860040154610fac90919063ffffffff16565b9450610ce1858860010154610fcd90919063ffffffff16565b9350610cfa876003015442610fac90919063ffffffff16565b9250610d0f8385610ff790919063ffffffff16565b9150610d28876002015483610fac90919063ffffffff16565b9050600081111515610da2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e6f20746f6b656e7320746f2074616b65206f7574207269676874206e6f772e81525060200191505060405180910390fd5b610db981886002015461103590919063ffffffff16565b8760020181905550610e0e8882600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a669092919063ffffffff16565b610ea7565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f546869732061646472657373206973206e6f7420656c696769626c6520746f2081526020017f7265636569766520746f6b656e73207965742e0000000000000000000000000081525060400191505060405180910390fd5b5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610eee57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080838311151515610fbe57600080fd5b82840390508091505092915050565b600080600083111515610fdf57600080fd5b8284811515610fea57fe5b0490508091505092915050565b600080600084141561100c576000915061102e565b828402905082848281151561101d57fe5b0414151561102a57600080fd5b8091505b5092915050565b600080828401905083811015151561104c57600080fd5b80915050929150505600a165627a7a72305820553ca159c085d491ff265ef371451fc6435747b2c746b5689ef5250a66f5856f0029000000000000000000000000940a2db1b7008b6c776d4faaca729d6d4a4aa551",
  "constructorArguments": "000000000000000000000000940a2db1b7008b6c776d4faaca729d6d4a4aa551"
}