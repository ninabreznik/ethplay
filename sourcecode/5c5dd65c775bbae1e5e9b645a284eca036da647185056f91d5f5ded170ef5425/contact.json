{
  "address": "0x7c639dafe776aa02f24b90c9bca3dc4ff11b6b3d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TeuBookingDeposit",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-13\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control \n * functions, this simplifies the implementation of \"user permissions\". \n */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev revert()s if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  \n  \n  function mul256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div256(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity automatically revert()s when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }  \n  \n  function mod256(uint256 a, uint256 b) internal pure returns (uint256) {\n\tuint256 c = a % b;\n\treturn c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant public returns (uint256);\n  function transfer(address to, uint256 value) public;\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev ERC20 interface with allowances. \n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant public returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public;\n  function approve(address spender, uint256 value) public;\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       revert();\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public {\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\n    balances[_to] = balances[_to].add256(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n * @dev Implemantation of the basic standart token.\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n    // if (_value > _allowance) revert();\n\n    balances[_to] = balances[_to].add256(_value);\n    balances[_from] = balances[_from].sub256(_value);\n    allowed[_from][msg.sender] = _allowance.sub256(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public {\n\n    //  To change the approve amount you first have to reduce the addresses\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n\n}\n\n\n\n/**\n * @title TeuToken\n * @dev The main TEU token contract\n * \n */\n \ncontract TeuToken is StandardToken, Ownable{\n  string public name = \"20-footEqvUnit\";\n  string public symbol = \"TEU\";\n  uint public decimals = 18;\n\n  event TokenBurned(uint256 value);\n  \n  function TeuToken() public {\n    totalSupply = (10 ** 8) * (10 ** decimals);\n    balances[msg.sender] = totalSupply;\n  }\n\n  /**\n   * @dev Allows the owner to burn the token\n   * @param _value number of tokens to be burned.\n   */\n  function burn(uint _value) onlyOwner public {\n    require(balances[msg.sender] >= _value);\n    balances[msg.sender] = balances[msg.sender].sub256(_value);\n    totalSupply = totalSupply.sub256(_value);\n    TokenBurned(_value);\n  }\n\n}\n\n/*\n * Pausable\n * Abstract contract that allows children to implement an\n * emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  bool public stopped;\n  modifier stopInEmergency {\n    if (stopped) {\n      revert();\n    }\n    _;\n  }\n  \n  modifier onlyInEmergency {\n    if (!stopped) {\n      revert();\n    }\n    _;\n  }\n  // called by the owner on emergency, triggers stopped state\n  function emergencyStop() external onlyOwner {\n    stopped = true;\n  }\n  // called by the owner on end of emergency, returns to normal state\n  function release() external onlyOwner onlyInEmergency {\n    stopped = false;\n  }\n}\n\n/**\n * @title teuBookingDeposit \n * @dev TEU Booking Deposit: A smart contract governing the entitlement of TEU token of two parties for a container shipping booking \n  */\ncontract TeuBookingDeposit is Ownable, Pausable {\n\tevent eAdjustClientAccountBalance(bytes32 indexed _PartnerID, bytes32 _ClientId, bytes32 _adjustedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _tokenRAmount);\n\tevent eAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, bytes32 _allocatedBy, uint256 _tokenAmount);\n\tevent eAllocateRestrictedTokenToPartner(bytes32 indexed _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount);\n\tevent eCancelTransactionEvent(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\n\tevent eConfirmReturnToken(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\n    event eConfirmTokenTransferToBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\n    event eKillTransactionEvent(bytes32 _PartnerID, bytes32 _killedBy, string TxHash, string _TxNum);\n\tevent ePartnerAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, uint256 _tokenAmount);\n\tevent eReceiveTokenByClientAccount(bytes32 indexed _clientId, uint256 _tokenAmount, address _transferFrom);\n\tevent eSetWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy);\n\tevent eTransactionFeeForBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\n\tevent eWithdrawTokenToClientAccount(bytes32 indexed _clientId, bytes32 _withdrawnBy, uint256 _tokenAmount, address _transferTo);\n\tevent eWithdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy);\n\t\n\t\n\t\n    using SafeMath for uint256;\n\t\n\t\n    TeuToken    private token;\n\t/*  \n    * Failsafe drain\n    */\n    function drain() onlyOwner public {\n        if (!owner.send(this.balance)) revert();\n    }\n\t\n\tfunction () payable public {\n\t\tif (msg.value!=0) revert();\n\t}\n\t\n\tfunction stringToBytes32(string memory source) internal pure returns (bytes32 result) {\n\t\tbytes memory tempEmptyStringTest = bytes(source);\n\t\tif (tempEmptyStringTest.length == 0) {\n\t\t\treturn 0x0;\n\t\t}\n\n\t\tassembly {\n\t\t\tresult := mload(add(source, 32))\n\t\t}\n\t}\n\t\n\tfunction killTransaction(bytes32 _PartnerID, bytes32 _killedBy, string _txHash, string _txNum) onlyOwner stopInEmergency public {\n\t\teKillTransactionEvent(_PartnerID, _killedBy, _txHash, _txNum);\n\t}\n\t\n\t\t\n\tfunction cancelTransaction(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\n        eCancelTransactionEvent(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\n\t\teCancelTransactionEvent(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\n\t}\n\t\n\t\n\tfunction AdjustClientAccountBalance(bytes32 _PartnerID, bytes32 _ClientId, bytes32 _allocatedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _RtokenAmount) onlyOwner stopInEmergency public {\n\t\teAdjustClientAccountBalance(_PartnerID, _ClientId, _allocatedBy, _CrDr, _tokenAmount, CrDrR, _RtokenAmount);\n\t}\n\t\n\tfunction setWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy) onlyOwner public {\n        eSetWalletToClientAccount(_clientId, _wallet, _setBy);\n    }\n\t\n    function receiveTokenByClientAccount(string _clientId, uint256 _tokenAmount, address _transferFrom) stopInEmergency public {\n        require(_tokenAmount > 0);\n        bytes32 _clientId32 = stringToBytes32(_clientId);\n\t\ttoken.transferFrom(_transferFrom, this, _tokenAmount);   \n\t\teReceiveTokenByClientAccount(_clientId32, _tokenAmount, _transferFrom);\n    }\n\t\n\tfunction withdrawTokenToClientAccount(bytes32 _clientId, bytes32 _withdrawnBy, address _transferTo, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n        require(_tokenAmount > 0);\n\n\t\ttoken.transfer(_transferTo, _tokenAmount);      \n\n\t\teWithdrawTokenToClientAccount(_clientId, _withdrawnBy, _tokenAmount, _transferTo);\n    }\n\t\n\n\t\n    // functions for restricted token management\n    function allocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n\t\teAllocateRestrictedTokenTo(_PartnerID, _clientId, _allocatedBy, _tokenAmount);\n    }\n    \n    function withdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy) onlyOwner stopInEmergency public {\n        //require(_tokenAmount <= token.balanceOf(this).sub256(totalBookingClientToken).sub256(totalClientToken).sub256(totalRestrictedToken));\n        token.transfer(msg.sender, _tokenAmount);\n\t\teWithdrawUnallocatedRestrictedToken(_tokenAmount, _withdrawnBy);\n    } \n\n// functions for restricted token management Partner side\n    function allocateRestrictedTokenToPartner(bytes32 _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n\t\teAllocateRestrictedTokenToPartner(_PartnerID, _allocatedBy, _tokenAmount);\n    }\n\t\n    function partnerAllocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n\t\tePartnerAllocateRestrictedTokenTo(_PartnerID, _clientId, _tokenAmount);\n    }\n\t\n// functions for transferring token to booking \t\n\tfunction confirmTokenTransferToBooking(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _txTokenAmount1, uint256 _txRAmount1, uint256 _txTokenAmount2, uint256 _txRAmount2) onlyOwner stopInEmergency public {\t\t\n\t\teConfirmTokenTransferToBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _tokenAmount1, _rAmount1, _tokenAmount2, _rAmount2);\n\t\teTransactionFeeForBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _txTokenAmount1, _txRAmount1, _txTokenAmount2, _txRAmount2);\n\t}\n\n \n// functions for returning tokens\t\n\tfunction confirmReturnToken(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\n        eConfirmReturnToken(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\n\t\teConfirmReturnToken(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\n\t}\n\n\n// function for Admin\n    function getToken() constant public onlyOwner returns (address) {\n        return token;\n    }\n\t\n    function setToken(address _token) public onlyOwner stopInEmergency {\n        require(token == address(0));\n        token = TeuToken(_token);\n    }\n\n}",
  "bytecode": "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f8a806100536000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063144fa6d71461012357806316b6c7bd1461015c57806321df0da71461018c5780633d1aac95146101e1578063457610e5146102345780634a975d6b146102e557806363a599a41461032f57806364c638d51461034457806365540940146103a0578063736a1b9a146103dd57806375f12b21146104b657806386d1a69f146104e35780638da5cb5b146104f857806395fc799f1461054d5780639890220b1461058a578063d385293d1461059f578063d6a624451461066b578063dbd846591461071c578063f2fde38b146107a1578063f3706bb7146107da575b60003414151561012157600080fd5b005b341561012e57600080fd5b61015a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610894565b005b341561016757600080fd5b61018a6004808035906020019091908035600019169060200190919050506109aa565b005b341561019757600080fd5b61019f610b42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101ec57600080fd5b61023260048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091905050610bc7565b005b341561023f57600080fd5b6102e360048080356000191690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080356000191690602001909190803560001916906020019091908035906020019091908035906020019091908035906020019091908035906020019091908035906020019091905050610caa565b005b34156102f057600080fd5b61032d6004808035600019169060200190919080356000191690602001909190803560001916906020019091908035906020019091905050610ea6565b005b341561033a57600080fd5b610342610f72565b005b341561034f57600080fd5b61039e6004808035600019169060200190919080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fea565b005b34156103ab57600080fd5b6103db600480803560001916906020019091908035600019169060200190919080359060200190919050506111cc565b005b34156103e857600080fd5b6104b4600480803560001916906020019091908035600019169060200190919080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611287565b005b34156104c157600080fd5b6104c9611443565b604051808215151515815260200191505060405180910390f35b34156104ee57600080fd5b6104f6611456565b005b341561050357600080fd5b61050b6114e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055857600080fd5b6105886004808035600019169060200190919080356000191690602001909190803590602001909190505061150d565b005b341561059557600080fd5b61059d6115d3565b005b34156105aa57600080fd5b61066960048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560001916906020019091908035600019169060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506116a8565b005b341561067657600080fd5b61071a60048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560001916906020019091908035600019169060200190919080359060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506118ed565b005b341561072757600080fd5b61079f600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ae9565b005b34156107ac57600080fd5b6107d8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ca0565b005b34156107e557600080fd5b6108926004808035600019169060200190919080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611d75565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108ef57600080fd5b600060149054906101000a900460ff161561090957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561096657600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0557600080fd5b600060149054906101000a900460ff1615610a1f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610ae357600080fd5b6102c65a03f11515610af457600080fd5b5050507f1f6748648383221e1c75df4acd712fc60d52413a939462a6edf2702c198c292e82826040518083815260200182600019166000191681526020019250505060405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2257600080fd5b7f962df7e4bb1eaf73d0d10a622e082da53c0df87c27f89a57c8966c3c34e544fb8383836040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0557600080fd5b600060149054906101000a900460ff1615610d1f57600080fd5b866000191689600019167fd98ad37b83d05c9f6c9c566c119703c2997f96e56d8cabbde087b2242be52ebd8a8888866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015610da0578082015181840152602081019050610d85565b50505050905090810190601f168015610dcd5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3856000191689600019167fd98ad37b83d05c9f6c9c566c119703c2997f96e56d8cabbde087b2242be52ebd8a8686866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015610e5e578082015181840152602081019050610e43565b50505050905090810190601f168015610e8b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0157600080fd5b600060149054906101000a900460ff1615610f1b57600080fd5b826000191684600019167fad7d44ebc54b64a5231b485c3708395696c66628d2b144d6b3ba2f2c0b91457b84846040518083600019166000191681526020018281526020019250505060405180910390a350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fcd57600080fd5b6001600060146101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104557600080fd5b600060149054906101000a900460ff161561105f57600080fd5b60008111151561106e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561113257600080fd5b6102c65a03f1151561114357600080fd5b50505083600019167fe86b29ed2e9e1c4f7203760e0c7cf8f50a8488b5e12832c346c1e0fcde3c91898483856040518084600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122757600080fd5b600060149054906101000a900460ff161561124157600080fd5b816000191683600019167fcc324637a89025986af5e2b242d3e36f481d35b76b35c9eef480a43734b674fc836040518082815260200191505060405180910390a3505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112e257600080fd5b600060149054906101000a900460ff16156112fc57600080fd5b86600019167ff4f298ff22f78b158689881be6abc0625f5860b28c47df654327b41e7750cc9e87878787878760405180876000191660001916815260200186600019166000191681526020018060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b83811015611394578082015181840152602081019050611379565b50505050905090810190601f1680156113c15780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156113fa5780820151818401526020810190506113df565b50505050905090810190601f1680156114275780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a250505050505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114b157600080fd5b600060149054906101000a900460ff1615156114cc57600080fd5b60008060146101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561156857600080fd5b600060149054906101000a900460ff161561158257600080fd5b82600019167f54423e973cfc8424c7fe42b228245c035f283d8e5dbca1fdf9de92b35fc6f2bd83836040518083600019166000191681526020018281526020019250505060405180910390a2505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561162e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156116a657600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170357600080fd5b600060149054906101000a900460ff161561171d57600080fd5b8b600019167f04fc3f1cfe06cf59c418e6b214fee6f43fe59e02db11e8ad980af94583d9eb548c8c8c8c8c8c8c604051808060200188600019166000191681526020018760001916600019168152602001868152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b838110156117be5780820151818401526020810190506117a3565b50505050905090810190601f1680156117eb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a28b600019167f4db02ac321707de8212d6b7da83a845d1d024188fe7bf340ef1ea12a0cd4534f8c8c8c88888888604051808060200188600019166000191681526020018760001916600019168152602001868152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b8381101561189f578082015181840152602081019050611884565b50505050905090810190601f1680156118cc5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a2505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561194857600080fd5b600060149054906101000a900460ff161561196257600080fd5b866000191689600019167f2b6363f90cfb3c216256c5dde0ba1640437af0fbb409477de9707451759eb3918a8888866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156119e35780820151818401526020810190506119c8565b50505050905090810190601f168015611a105780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3856000191689600019167f2b6363f90cfb3c216256c5dde0ba1640437af0fbb409477de9707451759eb3918a8686866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015611aa1578082015181840152602081019050611a86565b50505050905090810190601f168015611ace5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3505050505050505050565b60008060149054906101000a900460ff1615611b0457600080fd5b600083111515611b1357600080fd5b611b1c84611f19565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515611c1657600080fd5b6102c65a03f11515611c2757600080fd5b50505080600019167f3bfde9fc64a03ce90b370c040b9ee8c20dcb642256b2ffb813e82adcb7bc30d08484604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cfb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611d7257806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd057600080fd5b600060149054906101000a900460ff1615611dea57600080fd5b7f0f348b0a2fb298a874f334e5bd6006401ffc3066fb032be28597ba857e41a8348484848460405180856000191660001916815260200184600019166000191681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611e6f578082015181840152602081019050611e54565b50505050905090810190601f168015611e9c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611ed5578082015181840152602081019050611eba565b50505050905090810190601f168015611f025780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a150505050565b6000611f23611f4a565b829050600081511415611f3c5760006001029150611f44565b602083015191505b50919050565b6020604051908101604052806000815250905600a165627a7a72305820ad3d105a160fd7355e0755ff2f7d87b2c75408d3daa0869896b9e83137b5ab830029"
}