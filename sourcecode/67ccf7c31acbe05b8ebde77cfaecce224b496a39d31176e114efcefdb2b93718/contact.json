{
  "address": "0xc25e8463fbacf35572eae579ecae40850423a70a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SolidSourcesToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-25\n*/\n\npragma solidity ^ 0.4 .24;\n\n// ----------------------------------------------------------------------------\n// 'SLD' 'Solid Sources Token' contract\n//\n// Symbol      : SLD\n// Name        : Solid Sources Token\n// Total supply: 500,000,000.000000000000000000\n// Decimals    : 18\n//\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n\n    function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns(uint);\n\n    function balanceOf(address tokenOwner) public constant returns(uint balance);\n\n    function allowance(address tokenOwner, address spender) public constant returns(uint remaining);\n\n    function transfer(address to, uint tokens) public returns(bool success);\n\n    function approve(address spender, uint tokens) public returns(bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns(bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\n\ncontract SolidSourcesToken is ERC20Interface, Owned {\n    using SafeMath\n    for uint;\n\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Burn(address indexed burner, uint256 value);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n\n    constructor() public {\n        symbol = \"SLD\";\n        name = \"Solid Sources Token\";\n        decimals = 18;\n        _totalSupply = 500000000 * 10 ** uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n\n    function totalSupply() public view returns(uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n\n    function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n\n    function transfer(address to, uint tokens) public returns(bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n\n    function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n\n    function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    //Burn tokens\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] -= _value;            // Subtract from the sender\n        _totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n\n    function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n\n    function() public payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260038082527f534c44000000000000000000000000000000000000000000000000000000000060209092019182526100679160029161012b565b506040805180820190915260138082527f536f6c696420536f757263657320546f6b656e0000000000000000000000000060209092019182526100ac9160039161012b565b5060048054601260ff19909116179081905560ff16600a0a631dcd650002600581905560008054600160a060020a0390811682526006602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101c6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016c57805160ff1916838001178555610199565b82800160010185558215610199579182015b8281111561019957825182559160200191906001019061017e565b506101a59291506101a9565b5090565b6101c391905b808211156101a557600081556001016101af565b90565b610b37806101d56000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd57806342966c681461022857806370a082311461024057806379ba5097146102615780638da5cb5b1461027857806395d89b41146102a9578063a9059cbb146102be578063cae9ca51146102e2578063d4ee1d901461034b578063dc39d06d14610360578063dd62ed3e14610384578063f2fde38b146103ab575b600080fd5b3480156100f657600080fd5b506100ff6103cc565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a036004351660243561045a565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16104c1565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a0360043581169060243516604435610504565b34801561020957600080fd5b5061021261060f565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b50610198600435610618565b34801561024c57600080fd5b506101c1600160a060020a0360043516610690565b34801561026d57600080fd5b506102766106ab565b005b34801561028457600080fd5b5061028d610733565b60408051600160a060020a039092168252519081900360200190f35b3480156102b557600080fd5b506100ff610742565b3480156102ca57600080fd5b50610198600160a060020a036004351660243561079a565b3480156102ee57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610198948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061084a9650505050505050565b34801561035757600080fd5b5061028d6109ab565b34801561036c57600080fd5b50610198600160a060020a03600435166024356109ba565b34801561039057600080fd5b506101c1600160a060020a0360043581169060243516610a75565b3480156103b757600080fd5b50610276600160a060020a0360043516610aa0565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600080805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005546104ff9163ffffffff610ae616565b905090565b600160a060020a03831660009081526006602052604081205461052d908363ffffffff610ae616565b600160a060020a038516600090815260066020908152604080832093909355600781528282203383529052205461056a908363ffffffff610ae616565b600160a060020a0380861660009081526007602090815260408083203384528252808320949094559186168152600690915220546105ae908363ffffffff610afb16565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b3360009081526006602052604081205482111561063457600080fd5b3360008181526006602090815260409182902080548690039055600580548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a031633146106c257600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104525780601f1061042757610100808354040283529160200191610452565b336000908152600660205260408120546107ba908363ffffffff610ae616565b3360009081526006602052604080822092909255600160a060020a038516815220546107ec908363ffffffff610afb16565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000818152600760209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561093a578181015183820152602001610922565b50505050905090810190601f1680156109675780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561098957600080fd5b505af115801561099d573d6000803e3d6000fd5b506001979650505050505050565b600154600160a060020a031681565b60008054600160a060020a031633146109d257600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610a4257600080fd5b505af1158015610a56573d6000803e3d6000fd5b505050506040513d6020811015610a6c57600080fd5b50519392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a03163314610ab757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610af557600080fd5b50900390565b818101828110156104bb57600080fd00a165627a7a723058206036374f8c23aa762827ec175a75fb26c3d8002e43b7b512c8ae3f42394e52710029"
}