{
  "address": "0x512a4d492669e5f0746609d638796c0ad94276cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RaceCoin",
  "compilerVersion": "v0.4.25-nightly.2018.5.18+commit.4d7b092c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\npragma solidity ^0.4.20;\n\ninterface ERC20 {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// RaceCoin - Crypto Idle Raceing Game\n// https://cryptoracing.online\n\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        emit AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\n\ninterface IRaceCoin {\n    function addTotalEtherPool(uint256 amount) external;\n    function addPlayerToList(address player) external;\n    function increasePlayersAttribute(address player, uint16[13] param) external;\n    function reducePlayersAttribute(address player, uint16[13] param) external;\n}\n\ncontract RaceCoin is ERC20, AccessAdmin, IRaceCoin {\n\n    using SafeMath for uint256;\n\n    string public constant name  = \"Race Coin\";\n    string public constant symbol = \"Coin\";\n    uint8 public constant decimals = 0;\n    uint256 private roughSupply;\n    uint256 public totalRaceCoinProduction;\n   \n    //Daily match fun dividend ratio\n    uint256 public bonusMatchFunPercent = 10;\n\n    //Daily off-line dividend ratio\n    uint256 public bonusOffLinePercent = 10;\n\n    //Recommendation ratio\n    uint256 constant refererPercent = 5;\n\n    \n\n    address[] public playerList;\n    //Verifying whether duplication is repeated\n   // mapping(address => uint256) public isProduction;\n\n\n    uint256 public totalEtherPool; // Eth dividends to be split between players' race coin production\n    uint256[] private totalRaceCoinProductionSnapshots; // The total race coin production for each prior day past\n    uint256[] private allocatedProductionSnapshots; // The amount of EHT that can be allocated daily\n    uint256[] private allocatedRaceCoinSnapshots; // The amount of EHT that can be allocated daily\n    uint256[] private totalRaceCoinSnapshots; // The total race coin for each prior day past\n    uint256 public nextSnapshotTime;\n\n\n\n    // Balances for each player\n    mapping(address => uint256) private ethBalance;\n    mapping(address => uint256) private raceCoinBalance;\n    mapping(address => uint256) private refererDivsBalance;\n\n    mapping(address => uint256) private productionBaseValue; //Player production base value\n    mapping(address => uint256) private productionMultiplier; //Player production multiplier\n\n    mapping(address => uint256) private attackBaseValue; //Player attack base value\n    mapping(address => uint256) private attackMultiplier; //Player attack multiplier\n    mapping(address => uint256) private attackPower; //Player attack Power\n\n    mapping(address => uint256) private defendBaseValue; //Player defend base value\n    mapping(address => uint256) private defendMultiplier; //Player defend multiplier\n    mapping(address => uint256) private defendPower; //Player defend Power\n\n    mapping(address => uint256) private plunderBaseValue; //Player plunder base value\n    mapping(address => uint256) private plunderMultiplier; //Player plunder multiplier\n    mapping(address => uint256) private plunderPower; //Player plunder Power\n\n\n\n\n    mapping(address => mapping(uint256 => uint256)) private raceCoinProductionSnapshots; // Store player's race coin production for given day (snapshot)\n    mapping(address => mapping(uint256 => bool)) private raceCoinProductionZeroedSnapshots; // This isn't great but we need know difference between 0 production and an unused/inactive day.\n    mapping(address => mapping(uint256 => uint256)) private raceCoinSnapshots;// Store player's race coin for given day (snapshot)\n\n\n\n    mapping(address => uint256) private lastRaceCoinSaveTime; // Seconds (last time player claimed their produced race coin)\n    mapping(address => uint256) public lastRaceCoinProductionUpdate; // Days (last snapshot player updated their production)\n    mapping(address => uint256) private lastProductionFundClaim; // Days (snapshot number)\n    mapping(address => uint256) private lastRaceCoinFundClaim; // Days (snapshot number)\n    mapping(address => uint256) private battleCooldown; // If user attacks they cannot attack again for short time\n\n\n    // Computational correlation\n\n\n    // Mapping of approved ERC20 transfers (by player)\n    mapping(address => mapping(address => uint256)) private allowed;\n\n\n    event ReferalGain(address referal, address player, uint256 amount);\n    event PlayerAttacked(address attacker, address target, bool success, uint256 raceCoinPlunder);\n\n\n     /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n    \n   \n\n\n    function RaceCoin() public {\n        addrAdmin = msg.sender;\n        totalRaceCoinSnapshots.push(0);\n    }\n    \n\n    function() external payable {\n\n    }\n\n\n    function beginGame(uint256 firstDivsTime) external onlyAdmin {\n        nextSnapshotTime = firstDivsTime;  \n    }\n\n\n     // We will adjust to achieve a balance.\n    function adjustDailyMatchFunDividends(uint256 newBonusPercent) external onlyAdmin whenNotPaused {\n\n        require(newBonusPercent > 0 && newBonusPercent <= 80);\n       \n        bonusMatchFunPercent = newBonusPercent;\n\n    }\n\n     // We will adjust to achieve a balance.\n    function adjustDailyOffLineDividends(uint256 newBonusPercent) external onlyAdmin whenNotPaused {\n\n        require(newBonusPercent > 0 && newBonusPercent <= 80);\n       \n        bonusOffLinePercent = newBonusPercent;\n\n    }\n\n    // Stored race coin (rough supply as it ignores earned/unclaimed RaceCoin)\n    function totalSupply() public view returns(uint256) {\n        return roughSupply; \n    }\n\n\n    function balanceOf(address player) public view returns(uint256) {\n        return raceCoinBalance[player] + balanceOfUnclaimedRaceCoin(player);\n    }\n\n    function raceCionBalance(address player) public view returns(uint256) {\n        return raceCoinBalance[player];\n    }\n\n\n    function balanceOfUnclaimedRaceCoin(address player) internal view returns (uint256) {\n        uint256 lastSave = lastRaceCoinSaveTime[player];\n        if (lastSave > 0 && lastSave < block.timestamp) {\n            return (getRaceCoinProduction(player) * (block.timestamp - lastSave)) / 100;\n        }\n        return 0;\n    }\n\n\n    function getRaceCoinProduction(address player) public view returns (uint256){\n        return raceCoinProductionSnapshots[player][lastRaceCoinProductionUpdate[player]];\n    }\n\n\n    function etherBalanceOf(address player) public view returns(uint256) {\n        return ethBalance[player];\n    }\n\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        updatePlayersRaceCoin(msg.sender);\n        require(amount <= raceCoinBalance[msg.sender]);\n        \n        raceCoinBalance[msg.sender] -= amount;\n        raceCoinBalance[recipient] += amount;\n        \n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address player, address recipient, uint256 amount) public returns (bool) {\n        updatePlayersRaceCoin(player);\n        require(amount <= allowed[player][msg.sender] && amount <= raceCoinBalance[player]);\n        \n        raceCoinBalance[player] -= amount;\n        raceCoinBalance[recipient] += amount;\n        allowed[player][msg.sender] -= amount;\n        \n        emit Transfer(player, recipient, amount);\n        return true;\n    }\n\n\n    function approve(address approvee, uint256 amount) public returns (bool){\n        allowed[msg.sender][approvee] = amount;\n        emit Approval(msg.sender, approvee, amount);\n        return true;\n    }\n\n    function allowance(address player, address approvee) public view returns(uint256){\n        return allowed[player][approvee];\n    }\n\n\n    function addPlayerToList(address player) external{\n        \n        require(actionContracts[msg.sender]);\n        require(player != address(0));\n\n        bool b = false;\n\n        //Judge whether or not to repeat\n        for (uint256 i = 0; i < playerList.length; i++) {\n            if(playerList[i] == player){\n               b = true;\n               break;\n            }\n        } \n\n        if(!b){\n            playerList.push(player);\n        }   \n    }\n\n\n    function getPlayerList() external view returns ( address[] ){\n        return playerList;\n    }\n\n\n\n\n\n    function updatePlayersRaceCoin(address player) internal {\n        uint256 raceCoinGain = balanceOfUnclaimedRaceCoin(player);\n        lastRaceCoinSaveTime[player] = block.timestamp;\n        roughSupply += raceCoinGain;\n        raceCoinBalance[player] += raceCoinGain;\n    }\n\n    //Increase attribute\n    function increasePlayersAttribute(address player, uint16[13] param) external{\n\n\n        require(actionContracts[msg.sender]);\n        require(player != address(0));\n\n\n        //Production\n        updatePlayersRaceCoin(player);\n        uint256 increase;\n        uint256 newProduction;\n        uint256 previousProduction;\n\n        previousProduction = getRaceCoinProduction(player);\n\n        productionBaseValue[player] = productionBaseValue[player].add(param[3]);\n        productionMultiplier[player] = productionMultiplier[player].add(param[7]);\n\n        newProduction = productionBaseValue[player].mul(100 + productionMultiplier[player]).div(100);\n\n        increase = newProduction.sub(previousProduction);\n\n        raceCoinProductionSnapshots[player][allocatedProductionSnapshots.length] = newProduction;\n        lastRaceCoinProductionUpdate[player] = allocatedProductionSnapshots.length;\n        totalRaceCoinProduction += increase;\n\n\n\n\n        //Attack\n        attackBaseValue[player] = attackBaseValue[player].add(param[4]);\n        attackMultiplier[player] = attackMultiplier[player].add(param[8]);\n        attackPower[player] = attackBaseValue[player].mul(100 + attackMultiplier[player]).div(100);\n\n\n        //Defend\n        defendBaseValue[player] = defendBaseValue[player].add(param[5]);\n        defendMultiplier[player] = defendMultiplier[player].add(param[9]);\n        defendPower[player] = defendBaseValue[player].mul(100 + defendMultiplier[player]).div(100);\n\n\n        //Plunder\n        plunderBaseValue[player] = plunderBaseValue[player].add(param[6]);\n        plunderMultiplier[player] = plunderMultiplier[player].add(param[10]);\n\n        plunderPower[player] = plunderBaseValue[player].mul(100 + plunderMultiplier[player]).div(100);\n\n\n    }\n\n\n    //Reduce attribute\n    function reducePlayersAttribute(address player, uint16[13] param) external{\n\n        require(actionContracts[msg.sender]);\n        require(player != address(0));\n\n\n        //Production\n        updatePlayersRaceCoin(player);\n\n\n        uint256 decrease;\n        uint256 newProduction;\n        uint256 previousProduction;\n\n\n        previousProduction = getRaceCoinProduction(player);\n\n        productionBaseValue[player] = productionBaseValue[player].sub(param[3]);\n        productionMultiplier[player] = productionMultiplier[player].sub(param[7]);\n\n        newProduction = productionBaseValue[player].mul(100 + productionMultiplier[player]).div(100);\n\n        decrease = previousProduction.sub(newProduction);\n        \n        if (newProduction == 0) { // Special case which tangles with \"inactive day\" snapshots (claiming divs)\n            raceCoinProductionZeroedSnapshots[player][allocatedProductionSnapshots.length] = true;\n            delete raceCoinProductionSnapshots[player][allocatedProductionSnapshots.length]; // 0\n        } else {\n            raceCoinProductionSnapshots[player][allocatedProductionSnapshots.length] = newProduction;\n        }\n        \n        lastRaceCoinProductionUpdate[player] = allocatedProductionSnapshots.length;\n        totalRaceCoinProduction -= decrease;\n\n\n\n\n        //Attack\n        attackBaseValue[player] = attackBaseValue[player].sub(param[4]);\n        attackMultiplier[player] = attackMultiplier[player].sub(param[8]);\n        attackPower[player] = attackBaseValue[player].mul(100 + attackMultiplier[player]).div(100);\n\n\n        //Defend\n        defendBaseValue[player] = defendBaseValue[player].sub(param[5]);\n        defendMultiplier[player] = defendMultiplier[player].sub(param[9]);\n        defendPower[player] = defendBaseValue[player].mul(100 + defendMultiplier[player]).div(100);\n\n\n        //Plunder\n        plunderBaseValue[player] = plunderBaseValue[player].sub(param[6]);\n        plunderMultiplier[player] = plunderMultiplier[player].sub(param[10]);\n        plunderPower[player] = plunderBaseValue[player].mul(100 + plunderMultiplier[player]).div(100);\n\n\n    }\n\n\n    function attackPlayer(address player,address target) external {\n        require(battleCooldown[player] < block.timestamp);\n        require(target != player);\n        require(balanceOf(target) > 0);\n        \n        uint256 attackerAttackPower = attackPower[player];\n        uint256 attackerplunderPower = plunderPower[player];\n        uint256 defenderDefendPower = defendPower[target];\n        \n\n        if (battleCooldown[target] > block.timestamp) { // When on battle cooldown, the defense is reduced by 50%\n            defenderDefendPower = defenderDefendPower.div(2);\n        }\n        \n        if (attackerAttackPower > defenderDefendPower) {\n            battleCooldown[player] = block.timestamp + 30 minutes;\n            if (balanceOf(target) > attackerplunderPower) {\n               \n                uint256 unclaimedRaceCoin = balanceOfUnclaimedRaceCoin(target);\n                if (attackerplunderPower > unclaimedRaceCoin) {\n                    uint256 raceCoinDecrease = attackerplunderPower - unclaimedRaceCoin;\n                    raceCoinBalance[target] -= raceCoinDecrease;\n                    roughSupply -= raceCoinDecrease;\n                } else {\n                    uint256 raceCoinGain = unclaimedRaceCoin - attackerplunderPower;\n                    raceCoinBalance[target] += raceCoinGain;\n                    roughSupply += raceCoinGain;\n                }\n                raceCoinBalance[player] += attackerplunderPower;\n                emit PlayerAttacked(player, target, true, attackerplunderPower);\n            } else {\n                emit PlayerAttacked(player, target, true, balanceOf(target));\n                raceCoinBalance[player] += balanceOf(target);\n                raceCoinBalance[target] = 0;\n            }\n            \n            lastRaceCoinSaveTime[target] = block.timestamp;\n        \n           \n        } else {\n            battleCooldown[player] = block.timestamp + 10 minutes;\n            emit PlayerAttacked(player, target, false, 0);\n        }\n    }\n\n\n\n    function getPlayersBattleStats(address player) external view returns (uint256, uint256, uint256, uint256){\n\n        return (attackPower[player], defendPower[player], plunderPower[player], battleCooldown[player]);\n    }\n\n\n    function getPlayersBaseAttributesInt(address player) external view returns (uint256, uint256, uint256, uint256){\n        return (productionBaseValue[player], attackBaseValue[player], defendBaseValue[player], plunderBaseValue[player]); \n    }\n    \n    function getPlayersAttributesInt(address player) external view returns (uint256, uint256, uint256, uint256){\n        return (getRaceCoinProduction(player), attackPower[player], defendPower[player], plunderPower[player]); \n    }\n\n\n    function getPlayersAttributesMult(address player) external view returns (uint256, uint256, uint256, uint256){\n        return (productionMultiplier[player], attackMultiplier[player], defendMultiplier[player], plunderMultiplier[player]);\n    }\n    \n\n    function withdrawEther(uint256 amount) external {\n        require(amount <= ethBalance[msg.sender]);\n        ethBalance[msg.sender] -= amount;\n        msg.sender.transfer(amount);\n    }\n\n\n    function getBalance() external view returns(uint256) {\n        return totalEtherPool;\n    }\n\n\n    function addTotalEtherPool(uint256 amount) external{\n        require(actionContracts[msg.sender]);\n        require(amount > 0);\n        totalEtherPool += amount;\n    }\n\n    function correctPool(uint256 _count) external onlyAdmin {\n        require( _count > 0);\n        totalEtherPool += _count;\n    }\n\n\n    // To display \n    function getGameInfo(address player) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256){\n           \n        return ( totalEtherPool, totalRaceCoinProduction,nextSnapshotTime, balanceOf(player), ethBalance[player], \n                    getRaceCoinProduction(player),raceCoinBalance[player]);\n    }\n\n    function getMatchFunInfo(address player) external view returns (uint256, uint256){\n        return (raceCoinSnapshots[player][totalRaceCoinSnapshots.length - 1], \n        totalRaceCoinSnapshots[totalRaceCoinSnapshots.length - 1]);\n    }\n\n\n    function getGameCurrTime(address player) external view returns (uint256){\n        return block.timestamp;\n    }\n\n\n    function claimOffLineDividends(address referer, uint256 startSnapshot, uint256 endSnapShot) external {\n        require(startSnapshot <= endSnapShot);\n        require(startSnapshot >= lastProductionFundClaim[msg.sender]);\n        require(endSnapShot < allocatedProductionSnapshots.length);\n\n        uint256 offLineShare;\n        uint256 previousProduction = raceCoinProductionSnapshots[msg.sender][lastProductionFundClaim[msg.sender] - 1]; \n        for (uint256 i = startSnapshot; i <= endSnapShot; i++) {\n            \n            uint256 productionDuringSnapshot = raceCoinProductionSnapshots[msg.sender][i];\n            bool soldAllProduction = raceCoinProductionZeroedSnapshots[msg.sender][i];\n            if (productionDuringSnapshot == 0 && !soldAllProduction) {\n                productionDuringSnapshot = previousProduction;\n            } else {\n               previousProduction = productionDuringSnapshot;\n            }\n            \n            offLineShare += (allocatedProductionSnapshots[i] * productionDuringSnapshot) / totalRaceCoinProductionSnapshots[i];\n        }\n        \n        \n        if (raceCoinProductionSnapshots[msg.sender][endSnapShot] == 0 && !raceCoinProductionZeroedSnapshots[msg.sender][endSnapShot] && previousProduction > 0) {\n            raceCoinProductionSnapshots[msg.sender][endSnapShot] = previousProduction; // Checkpoint for next claim\n        }\n        \n        lastProductionFundClaim[msg.sender] = endSnapShot + 1;\n        \n       \n        uint256 referalDivs;\n        if (referer != address(0) && referer != msg.sender) {\n            referalDivs = offLineShare.mul(refererPercent).div(100); // 5%\n            ethBalance[referer] += referalDivs;\n            refererDivsBalance[referer] += referalDivs;\n            emit ReferalGain(referer, msg.sender, referalDivs);\n        }\n\n\n        \n        ethBalance[msg.sender] += offLineShare - referalDivs;\n    }\n\n\n    // To display on website\n    function viewOffLineDividends(address player) external view returns (uint256, uint256, uint256) {\n        uint256 startSnapshot = lastProductionFundClaim[player];\n        uint256 latestSnapshot = allocatedProductionSnapshots.length - 1; \n        \n        uint256 offLineShare;\n        uint256 previousProduction = raceCoinProductionSnapshots[player][lastProductionFundClaim[player] - 1];\n        for (uint256 i = startSnapshot; i <= latestSnapshot; i++) {\n            \n            uint256 productionDuringSnapshot = raceCoinProductionSnapshots[player][i];\n            bool soldAllProduction = raceCoinProductionZeroedSnapshots[player][i];\n            if (productionDuringSnapshot == 0 && !soldAllProduction) {\n                productionDuringSnapshot = previousProduction;\n            } else {\n               previousProduction = productionDuringSnapshot;\n            }\n            \n            offLineShare += (allocatedProductionSnapshots[i] * productionDuringSnapshot) / totalRaceCoinProductionSnapshots[i];\n        }\n        return (offLineShare, startSnapshot, latestSnapshot);\n    }\n\n   \n\n\n\n    function claimRaceCoinDividends(address referer, uint256 startSnapshot, uint256 endSnapShot) external {\n        require(startSnapshot <= endSnapShot);\n        require(startSnapshot >= lastRaceCoinFundClaim[msg.sender]);\n        require(endSnapShot < allocatedRaceCoinSnapshots.length);\n        \n        uint256 dividendsShare;\n\n\n        for (uint256 i = startSnapshot; i <= endSnapShot; i++) {\n\n            dividendsShare += (allocatedRaceCoinSnapshots[i] * raceCoinSnapshots[msg.sender][i]) / (totalRaceCoinSnapshots[i] + 1);\n        }\n\n        \n        lastRaceCoinFundClaim[msg.sender] = endSnapShot + 1;\n        \n        uint256 referalDivs;\n        if (referer != address(0) && referer != msg.sender) {\n            referalDivs = dividendsShare.mul(refererPercent).div(100); // 5%\n            ethBalance[referer] += referalDivs;\n            refererDivsBalance[referer] += referalDivs;\n            emit ReferalGain(referer, msg.sender, referalDivs);\n        }\n        \n        ethBalance[msg.sender] += dividendsShare - referalDivs;\n    }\n\n    // To display \n    function viewUnclaimedRaceCoinDividends(address player) external view returns (uint256, uint256, uint256) {\n        uint256 startSnapshot = lastRaceCoinFundClaim[player];\n        uint256 latestSnapshot = allocatedRaceCoinSnapshots.length - 1; // No snapshots to begin with\n        \n        uint256 dividendsShare;\n        \n        for (uint256 i = startSnapshot; i <= latestSnapshot; i++) {\n\n            dividendsShare += (allocatedRaceCoinSnapshots[i] * raceCoinSnapshots[player][i]) / (totalRaceCoinSnapshots[i] + 1);\n        }\n\n        return (dividendsShare, startSnapshot, latestSnapshot);\n    }\n\n\n    function getRefererDivsBalance(address player)  external view returns (uint256){\n        return refererDivsBalance[player];\n    }\n\n\n    function updatePlayersRaceCoinFromPurchase(address player, uint256 purchaseCost) internal {\n        uint256 unclaimedRaceCoin = balanceOfUnclaimedRaceCoin(player);\n        \n        if (purchaseCost > unclaimedRaceCoin) {\n            uint256 raceCoinDecrease = purchaseCost - unclaimedRaceCoin;\n            require(raceCoinBalance[player] >= raceCoinDecrease);\n            roughSupply -= raceCoinDecrease;\n            raceCoinBalance[player] -= raceCoinDecrease;\n        } else {\n            uint256 raceCoinGain = unclaimedRaceCoin - purchaseCost;\n            roughSupply += raceCoinGain;\n            raceCoinBalance[player] += raceCoinGain;\n        }\n        \n        lastRaceCoinSaveTime[player] = block.timestamp;\n    }\n\n\n    function fundRaceCoinDeposit(uint256 amount) external {\n        updatePlayersRaceCoinFromPurchase(msg.sender, amount);\n        raceCoinSnapshots[msg.sender][totalRaceCoinSnapshots.length - 1] += amount;\n        totalRaceCoinSnapshots[totalRaceCoinSnapshots.length - 1] += amount;\n    }\n\n\n\n    // Allocate  divs for the day (00:00 cron job)\n    function snapshotDailyRaceCoinFunding() external onlyAdmin whenNotPaused {\n       \n        uint256 todaysRaceCoinFund = (totalEtherPool * bonusMatchFunPercent) / 100; // 10% of pool daily\n        uint256 todaysOffLineFund = (totalEtherPool * bonusOffLinePercent) / 100; // 10% of pool daily\n\n        if(totalRaceCoinSnapshots[totalRaceCoinSnapshots.length - 1] > 0){\n            totalEtherPool -= todaysRaceCoinFund;\n        }\n\n        totalEtherPool -= todaysOffLineFund;\n\n\n        totalRaceCoinSnapshots.push(0);\n        allocatedRaceCoinSnapshots.push(todaysRaceCoinFund);\n        \n        totalRaceCoinProductionSnapshots.push(totalRaceCoinProduction);\n        allocatedProductionSnapshots.push(todaysOffLineFund);\n        \n        nextSnapshotTime = block.timestamp + 24 hours;\n    }\n\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundRaceCoinDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaceCoinProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"attackPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getRaceCoinProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonusPercent\",\"type\":\"uint256\"}],\"name\":\"adjustDailyMatchFunDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"etherBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"firstDivsTime\",\"type\":\"uint256\"}],\"name\":\"beginGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addPlayerToList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonusPercent\",\"type\":\"uint256\"}],\"name\":\"adjustDailyOffLineDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTotalEtherPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOffLinePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"viewOffLineDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"correctPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"param\",\"type\":\"uint16[13]\"}],\"name\":\"increasePlayersAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referer\",\"type\":\"address\"},{\"name\":\"startSnapshot\",\"type\":\"uint256\"},{\"name\":\"endSnapShot\",\"type\":\"uint256\"}],\"name\":\"claimRaceCoinDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"}],\"name\":\"getActionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getRefererDivsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setActionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersBattleStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getGameCurrTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"viewUnclaimedRaceCoinDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"param\",\"type\":\"uint16[13]\"}],\"name\":\"reducePlayersAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snapshotDailyRaceCoinFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSnapshotTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersAttributesInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raceCionBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersAttributesMult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"approvee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMatchFunPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getMatchFunInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersBaseAttributesInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRaceCoinProductionUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referer\",\"type\":\"address\"},{\"name\":\"startSnapshot\",\"type\":\"uint256\"},{\"name\":\"endSnapShot\",\"type\":\"uint256\"}],\"name\":\"claimOffLineDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferalGain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"raceCoinPlunder\",\"type\":\"uint256\"}],\"name\":\"PlayerAttacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260008060006101000a81548160ff021916908315150217905550600a600355600a60045534801561003457600080fd5b5033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a6000908060018154018082558091505090600182039060005260206000200160009091929091909150555061583080620000f46000396000f300608060405260043610610272576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063045acfd91461027457806306fdde03146102a157806308de5b2014610331578063095ea7b31461035c57806309bf9649146103c15780630ea901d21461042457806312065fe0146104a557806315486640146104d0578063167e072a14610527578063179fc99f1461055457806318160ddd146105ab57806323b872dd146105d657806325a7650a1461065b57806328ed9d80146106885780632d6ecc4c146106cb5780632e7526bd146106f85780632eb1276b1461072557806330efb8d314610750578063313ce567146107675780633bed33ce146107985780633e700a59146107c55780634a52e2621461082a5780634aab17f9146108575780634bd1b571146108a55780634ea34cdb146108fc57806362a63e29146109575780636375513a146109c357806367d0661d14610a1a5780636fb642de14610a31578063704b6c0214610a8057806370a0823114610ac357806380fa790214610b1a57806388bd018514610b865780638ceef90414610bdd57806395d89b4114610c425780639f8f0ec914610cd2578063a7fe432114610d20578063a89cdad914610d37578063a9059cbb14610d62578063ae6d907314610dc7578063b187bd2614610e34578063b377968a14610e63578063bbe1590b14610ecf578063bbeb043914610f26578063bfae2f0e14610f92578063dd62ed3e14610fe9578063e18be0ef14611060578063e3c1346b1461108b578063f06b0816146110b6578063f1bf77e814611114578063f5ef256e14611180578063f9b35004146111d7575b005b34801561028057600080fd5b5061029f6004803603810190808035906020019092919050505061122e565b005b3480156102ad57600080fd5b506102b66112d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f65780820151818401526020810190506102db565b50505050905090810190601f1680156103235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033d57600080fd5b50610346611309565b6040518082815260200191505060405180910390f35b34801561036857600080fd5b506103a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061130f565b604051808215151515815260200191505060405180910390f35b3480156103cd57600080fd5b50610422600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611401565b005b34801561043057600080fd5b50610465600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a9f565b6040518088815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390f35b3480156104b157600080fd5b506104ba611b5e565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b50610511600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b68565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b5061055260048036038101908080359060200190929190505050611c01565b005b34801561056057600080fd5b50610595600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c9e565b6040518082815260200191505060405180910390f35b3480156105b757600080fd5b506105c0611ce7565b6040518082815260200191505060405180910390f35b3480156105e257600080fd5b50610641600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cf1565b604051808215151515815260200191505060405180910390f35b34801561066757600080fd5b5061068660048036038101908080359060200190929190505050611f66565b005b34801561069457600080fd5b506106c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fcc565b005b3480156106d757600080fd5b506106f66004803603810190808035906020019092919050505061216f565b005b34801561070457600080fd5b506107236004803603810190808035906020019092919050505061220c565b005b34801561073157600080fd5b5061073a612286565b6040518082815260200191505060405180910390f35b34801561075c57600080fd5b5061076561228c565b005b34801561077357600080fd5b5061077c61231e565b604051808260ff1660ff16815260200191505060405180910390f35b3480156107a457600080fd5b506107c360048036038101908080359060200190929190505050612323565b005b3480156107d157600080fd5b50610806600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612408565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561083657600080fd5b5061085560048036038101908080359060200190929190505050612640565b005b34801561086357600080fd5b506108a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190806101a0019091929192905050506126be565b005b3480156108b157600080fd5b506108fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613121565b005b34801561090857600080fd5b5061093d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134b6565b604051808215151515815260200191505060405180910390f35b34801561096357600080fd5b5061096c613567565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109af578082015181840152602081019050610994565b505050509050019250505060405180910390f35b3480156109cf57600080fd5b50610a04600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506135f5565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a2f61363e565b005b348015610a3d57600080fd5b50610a7e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506136d1565b005b348015610a8c57600080fd5b50610ac1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613788565b005b348015610acf57600080fd5b50610b04600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138e0565b6040518082815260200191505060405180910390f35b348015610b2657600080fd5b50610b5b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613933565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610b9257600080fd5b50610bc7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a48565b6040518082815260200191505060405180910390f35b348015610be957600080fd5b50610c1e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a52565b60405180848152602001838152602001828152602001935050505060405180910390f35b348015610c4e57600080fd5b50610c57613b6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c97578082015181840152602081019050610c7c565b50505050905090810190601f168015610cc45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cde57600080fd5b50610d1e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190806101a001909192919290505050613ba8565b005b348015610d2c57600080fd5b50610d356146e1565b005b348015610d4357600080fd5b50610d4c614893565b6040518082815260200191505060405180910390f35b348015610d6e57600080fd5b50610dad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614899565b604051808215151515815260200191505060405180910390f35b348015610dd357600080fd5b50610df2600480360381019080803590602001909291905050506149fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e4057600080fd5b50610e49614a39565b604051808215151515815260200191505060405180910390f35b348015610e6f57600080fd5b50610ea4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614a4b565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610edb57600080fd5b50610f10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b29565b6040518082815260200191505060405180910390f35b348015610f3257600080fd5b50610f67600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b72565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610f9e57600080fd5b50610fa7614c87565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ff557600080fd5b5061104a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614cad565b6040518082815260200191505060405180910390f35b34801561106c57600080fd5b50611075614d34565b6040518082815260200191505060405180910390f35b34801561109757600080fd5b506110a0614d3a565b6040518082815260200191505060405180910390f35b3480156110c257600080fd5b506110f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614d40565b604051808381526020018281526020019250505060405180910390f35b34801561112057600080fd5b50611155600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614dc7565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561118c57600080fd5b506111c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614edc565b6040518082815260200191505060405180910390f35b3480156111e357600080fd5b5061122c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050614ef4565b005b61123833826154c6565b80601c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600a805490500381526020019081526020016000206000828254019250508190555080600a6001600a80549050038154811015156112b657fe5b906000526020600020016000828254019250508190555050565b6040805190810160405280600981526020017f5261636520436f696e000000000000000000000000000000000000000000000081525081565b60025481565b600081602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060008060008042602160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561145757600080fd5b8773ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561149257600080fd5b600061149d886138e0565b1115156114a957600080fd5b601360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549550601960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450601660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935042602160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156115cd576115ca60028561564190919063ffffffff16565b93505b838611156119a0576107084201602160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084611627886138e0565b1115611808576116368761565c565b9250828511156116a757828503915081600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508160016000828254039250508190555061170a565b848303905080600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806001600082825401925050819055505b84600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fb06cb54b17603e70140ce0216d86cef7e3e645e5a77c76f0cd1e4afe1b5b9e3f8888600188604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200182815260200194505050505060405180910390a1611957565b7fb06cb54b17603e70140ce0216d86cef7e3e645e5a77c76f0cd1e4afe1b5b9e3f888860016118368b6138e0565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200182815260200194505050505060405180910390a16118c5876138e0565b600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b42601d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a95565b6102584201602160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb06cb54b17603e70140ce0216d86cef7e3e645e5a77c76f0cd1e4afe1b5b9e3f8888600080604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200182815260200194505050505060405180910390a15b5050505050505050565b6000806000806000806000600654600254600b54611abc8b6138e0565b600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b058d611b68565b600d60008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549650965096509650965096509650919395979092949650565b6000600654905090565b6000601a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020549050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5d57600080fd5b6000809054906101000a900460ff16151515611c7857600080fd5b600081118015611c89575060508111155b1515611c9457600080fd5b8060038190555050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600154905090565b6000611cfc846156e0565b602260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211158015611dc75750600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b1515611dd257600080fd5b81600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081602260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fc257600080fd5b80600b8190555050565b600080602360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561202757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561206357600080fd5b60009150600090505b6005805490508110156120fc578273ffffffffffffffffffffffffffffffffffffffff1660058281548110151561209f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120ef57600191506120fc565b808060010191505061206c565b81151561216a5760058390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121cb57600080fd5b6000809054906101000a900460ff161515156121e657600080fd5b6000811180156121f7575060508111155b151561220257600080fd5b8060048190555050565b602360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561226457600080fd5b60008111151561227357600080fd5b8060066000828254019250508190555050565b60045481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122e857600080fd5b6000809054906101000a900460ff16151561230257600080fd5b60008060006101000a81548160ff021916908315150217905550565b600081565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561237157600080fd5b80600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612404573d6000803e3d6000fd5b5050565b600080600080600080600080600080601f60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205496506001600880549050039550601a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001601f60008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540381526020019081526020016000205493508692505b858311151561262957601a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549150601b60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1690506000821480156125c7575080155b156125d4578391506125d8565b8193505b6007838154811015156125e757fe5b90600052602060002001548260088581548110151561260257fe5b90600052602060002001540281151561261757fe5b048501945082806001019350506124fd565b848787995099509950505050505050509193909250565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561269c57600080fd5b6000811115156126ab57600080fd5b8060066000828254019250508190555050565b6000806000602360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561271b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561275757600080fd5b612760856156e0565b61276985611b68565b90506127d8846003600d8110151561277d57fe5b602002013561ffff1661ffff16600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612888846007600d8110151561282d57fe5b602002013561ffff1661ffff16601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129726064612964601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b915061298781836157eb90919063ffffffff16565b925081601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600880549050815260200190815260200160002081905550600880549050601e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600260008282540192505081905550612aa9846004600d81101515612a4e57fe5b602002013561ffff1661ffff16601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b59846008600d81101515612afe57fe5b602002013561ffff1661ffff16601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c436064612c35601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612cf3846005600d81101515612c9857fe5b602002013561ffff1661ffff16601460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612da3846009600d81101515612d4857fe5b602002013561ffff1661ffff16601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e8d6064612e7f601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f3d846006600d81101515612ee257fe5b602002013561ffff1661ffff16601760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612fed84600a600d81101515612f9257fe5b602002013561ffff1661ffff16601860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579290919063ffffffff16565b601860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506130d760646130c9601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b600080600083851115151561313557600080fd5b602060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851015151561318357600080fd5b6009805490508410151561319657600080fd5b8491505b8382111515613247576001600a838154811015156131b457fe5b906000526020600020015401601c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205460098481548110151561322057fe5b90600052602060002001540281151561323557fe5b0483019250818060010192505061319a565b60018401602060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156132f757503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b1561345f5761332360646133156005866157b090919063ffffffff16565b61564190919063ffffffff16565b905080600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f676f0fffb2fbfbfc8daa0d0f7d89788003ac6a87c448c7fb792ceb5b8e00e0dd863383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b808303600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561351357600080fd5b602360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054806020026020016040519081016040528092919081815260200182805480156135eb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116135a1575b5050505050905090565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561369a57600080fd5b6000809054906101000a900460ff161515156136b557600080fd5b60016000806101000a81548160ff021916908315150217905550565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561372d57600080fd5b80602360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156137e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561382057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006138eb8261565c565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050919050565b600080600080601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054602160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b6000429050919050565b6000806000806000806000602060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935060016009805490500392508390505b8281111515613b5b576001600a82815481101515613ac857fe5b906000526020600020015401601c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054600983815481101515613b3457fe5b906000526020600020015402811515613b4957fe5b04820191508080600101915050613aae565b818484965096509650505050509193909250565b6040805190810160405280600481526020017f436f696e0000000000000000000000000000000000000000000000000000000081525081565b6000806000602360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613c0557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515613c4157600080fd5b613c4a856156e0565b613c5385611b68565b9050613cc2846003600d81101515613c6757fe5b602002013561ffff1661ffff16600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d72846007600d81101515613d1757fe5b602002013561ffff1661ffff16601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613e5c6064613e4e601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b9150613e7182826157eb90919063ffffffff16565b92506000821415613f48576001601b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600880549050815260200190815260200160002060006101000a81548160ff021916908315150217905550601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600880549050815260200190815260200160002060009055613fa3565b81601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008805490508152602001908152602001600020819055505b600880549050601e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600260008282540392505081905550614069846004600d8110151561400e57fe5b602002013561ffff1661ffff16601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614119846008600d811015156140be57fe5b602002013561ffff1661ffff16601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061420360646141f5601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506142b3846005600d8110151561425857fe5b602002013561ffff1661ffff16601460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614363846009600d8110151561430857fe5b602002013561ffff1661ffff16601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061444d606461443f601560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506144fd846006600d811015156144a257fe5b602002013561ffff1661ffff16601760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506145ad84600a600d8110151561455257fe5b602002013561ffff1661ffff16601860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157eb90919063ffffffff16565b601860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506146976064614689601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606401601760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b61564190919063ffffffff16565b601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b600080600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561474057600080fd5b6000809054906101000a900460ff1615151561475b57600080fd5b60646003546006540281151561476d57fe5b04915060646004546006540281151561478257fe5b0490506000600a6001600a805490500381548110151561479e57fe5b906000526020600020015411156147c057816006600082825403925050819055505b80600660008282540392505081905550600a600090806001815401808255809150509060018203906000526020600020016000909192909190915055506009829080600181540180825580915050906001820390600052602060002001600090919290919091505550600760025490806001815401808255809150509060018203906000526020600020016000909192909190915055506008819080600181540180825580915050906001820390600052602060002001600090919290919091505550620151804201600b819055505050565b600b5481565b60006148a4336156e0565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156148f257600080fd5b81600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600581815481101515614a0a57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900460ff1681565b600080600080614a5a85611b68565b601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000602260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60035481565b60065481565b600080601c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600a8054905003815260200190815260200160002054600a6001600a8054905003815481101515614db357fe5b906000526020600020015491509150915091565b600080600080600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b601e6020528060005260406000206000915090505481565b600080600080600080868811151515614f0c57600080fd5b601f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548810151515614f5a57600080fd5b60088054905087101515614f6d57600080fd5b601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001601f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540381526020019081526020016000205494508793505b868411151561513257601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020549250601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1691506000831480156150d0575081155b156150dd578492506150e1565b8294505b6007848154811015156150f057fe5b90600052602060002001548360088681548110151561510b57fe5b90600052602060002001540281151561512057fe5b04860195508380600101945050615006565b6000601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020541480156151ed5750601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060009054906101000a900460ff16155b80156151f95750600085115b156152545784601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020819055505b60018701601f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415801561530457503373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b1561546c5761533060646153226005896157b090919063ffffffff16565b61564190919063ffffffff16565b905080600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600e60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f676f0fffb2fbfbfc8daa0d0f7d89788003ac6a87c448c7fb792ceb5b8e00e0dd893383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b808603600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050565b60008060006154d48561565c565b92508284111561559357828403915081600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561553157600080fd5b8160016000828254039250508190555081600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506155f6565b83830390508060016000828254019250508190555080600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b42601d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b600080828481151561564f57fe5b0490508091505092915050565b600080601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811180156156b057504281105b156156d55760648142036156c385611b68565b028115156156cd57fe5b0491506156da565b600091505b50919050565b60006156eb8261565c565b905042601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060016000828254019250508190555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b60008082840190508381101515156157a657fe5b8091505092915050565b60008060008414156157c557600091506157e4565b82840290508284828115156157d657fe5b041415156157e057fe5b8091505b5092915050565b60008282111515156157f957fe5b8183039050929150505600a165627a7a72305820529a2dbdf2f4ff1d0a09b853b26b24fb3972cae9ea27a2f4ca215cd19404a1190029"
}