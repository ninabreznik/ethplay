{
  "address": "0xe3c2130530d77418b3e367fe162808887526e74d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainframeStake",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-03\n*/\n\n// File: contracts/StakeInterface.sol\n\ncontract StakeInterface {\n  function hasStake(address _address) external view returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/MainframeStake.sol\n\ncontract MainframeStake is Ownable, StakeInterface {\n  using SafeMath for uint256;\n\n  ERC20 token;\n  uint256 public arrayLimit = 200;\n  uint256 public totalDepositBalance;\n  uint256 public requiredStake;\n  mapping (address => uint256) public balances;\n\n  struct Staker {\n    uint256 stakedAmount;\n    address stakerAddress;\n  }\n\n  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\n\n  constructor(address tokenAddress) public {\n    token = ERC20(tokenAddress);\n    requiredStake = 1 ether; // ether = 10^18\n  }\n\n  /**\n  * @dev Staking MFT for a node address\n  * @param whitelistAddress representing the address of the node you want to stake for\n  */\n\n  function stake(address whitelistAddress) external returns (bool success) {\n    require(whitelist[whitelistAddress].stakerAddress == 0x0);\n\n    whitelist[whitelistAddress].stakerAddress = msg.sender;\n    whitelist[whitelistAddress].stakedAmount = requiredStake;\n\n    deposit(msg.sender, requiredStake);\n    emit Staked(msg.sender, whitelistAddress);\n    return true;\n  }\n\n  /**\n  * @dev Unstake a staked node address, will remove from whitelist and refund stake\n  * @param whitelistAddress representing the staked node address\n  */\n\n  function unstake(address whitelistAddress) external {\n    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\n\n    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\n    delete whitelist[whitelistAddress];\n\n    withdraw(msg.sender, stakedAmount);\n    emit Unstaked(msg.sender, whitelistAddress);\n  }\n\n  /**\n  * @dev Deposit stake amount\n  * @param fromAddress representing the address to deposit from\n  * @param depositAmount representing amount being deposited\n  */\n\n  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\n    token.transferFrom(fromAddress, this, depositAmount);\n    balances[fromAddress] = balances[fromAddress].add(depositAmount);\n    totalDepositBalance = totalDepositBalance.add(depositAmount);\n    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\n    return true;\n  }\n\n  /**\n  * @dev Withdraw funds after unstaking\n  * @param toAddress representing the stakers address to withdraw to\n  * @param withdrawAmount representing stake amount being withdrawn\n  */\n\n  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\n    require(balances[toAddress] >= withdrawAmount);\n    token.transfer(toAddress, withdrawAmount);\n    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\n    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\n    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\n    return true;\n  }\n\n  function balanceOf(address _address) external view returns (uint256 balance) {\n    return balances[_address];\n  }\n\n  function totalStaked() external view returns (uint256) {\n    return totalDepositBalance;\n  }\n\n  function hasStake(address _address) external view returns (bool) {\n    return whitelist[_address].stakedAmount > 0;\n  }\n\n  function requiredStake() external view returns (uint256) {\n    return requiredStake;\n  }\n\n  function setRequiredStake(uint256 value) external onlyOwner {\n    requiredStake = value;\n  }\n\n  function setArrayLimit(uint256 newLimit) external onlyOwner {\n    arrayLimit = newLimit;\n  }\n\n  function refundBalances(address[] addresses) external onlyOwner {\n    require(addresses.length <= arrayLimit);\n    for (uint256 i = 0; i < addresses.length; i++) {\n      address _address = addresses[i];\n      require(balances[_address] > 0);\n      token.transfer(_address, balances[_address]);\n      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\n      emit RefundedBalance(_address, balances[_address]);\n      balances[_address] = 0;\n    }\n  }\n\n  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\n    // owner can drain tokens that are sent here by mistake\n    uint256 drainAmount;\n    if (address(_token) == address(token)) {\n      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\n    } else {\n      drainAmount = _token.balanceOf(this);\n    }\n    _token.transfer(owner, drainAmount);\n  }\n\n  function destroy() external onlyOwner {\n    require(token.balanceOf(this) == 0);\n    selfdestruct(owner);\n  }\n\n  event Staked(address indexed owner, address whitelistAddress);\n  event Unstaked(address indexed owner, address whitelistAddress);\n  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\n  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\n  event RefundedBalance(address indexed _address, uint256 refundAmount);\n}",
  "bytecode": "608060405260c860025534801561001557600080fd5b50604051602080611b6983398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060048190555050611a91806100d86000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806319cb355d146100f6578063264762041461012157806327e235e31461017c57806370a08231146101d3578063817b1cd21461022a57806383197ef0146102555780638da5cb5b1461026c57806390e8d82f146102c35780639b19251a14610306578063af9cb9f614610390578063b4ae641c146103bd578063d0995b33146103e8578063e73e14bf14610423578063e8c0a0df1461047e578063ee8a0a30146104a9578063f2888dbb146104d6578063f2fde38b14610519575b600080fd5b34801561010257600080fd5b5061010b61055c565b6040518082815260200191505060405180910390f35b34801561012d57600080fd5b50610162600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610566565b604051808215151515815260200191505060405180910390f35b34801561018857600080fd5b506101bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610748565b6040518082815260200191505060405180910390f35b3480156101df57600080fd5b50610214600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610760565b6040518082815260200191505060405180910390f35b34801561023657600080fd5b5061023f6107a9565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b5061026a6107b3565b005b34801561027857600080fd5b5061028161094e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cf57600080fd5b50610304600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610973565b005b34801561031257600080fd5b50610347600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf4565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561039c57600080fd5b506103bb60048036038101908080359060200190929190505050610d38565b005b3480156103c957600080fd5b506103d2610d9d565b6040518082815260200191505060405180910390f35b3480156103f457600080fd5b50610421600480360381019080803590602001908201803590602001919091929391929390505050610da3565b005b34801561042f57600080fd5b50610464600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111f565b604051808215151515815260200191505060405180910390f35b34801561048a57600080fd5b5061049361116d565b6040518082815260200191505060405180910390f35b3480156104b557600080fd5b506104d460048036038101908080359060200190929190505050611173565b005b3480156104e257600080fd5b50610517600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d8565b005b34801561052557600080fd5b5061055a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b5565b005b6000600454905090565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156105ee57600080fd5b33600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506106c43360045461150a565b503373ffffffffffffffffffffffffffffffffffffffff167fe0945a2cfb8a30cc4592112b82485be6cb49b55fcdfc6c2a6c561bd86815503483604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a260019050919050565b60056020528060005260406000206000915090505481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600354905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080e57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156108cd57600080fd5b505af11580156108e1573d6000803e3d6000fd5b505050506040513d60208110156108f757600080fd5b810190808051906020019092919050505014151561091457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b1757610b106003548373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b505050506040513d6020811015610af157600080fd5b810190808051906020019092919050505061179090919063ffffffff16565b9050610bf0565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b505050506040513d6020811015610bdc57600080fd5b810190808051906020019092919050505090505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050506040513d6020811015610cde57600080fd5b8101908080519060200190929190505050505050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9357600080fd5b8060048190555050565b60025481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0157600080fd5b6002548484905011151515610e1557600080fd5b600091505b83839050821015611119578383838181101515610e3357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610ea057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fa457600080fd5b505af1158015610fb8573d6000803e3d6000fd5b505050506040513d6020811015610fce57600080fd5b810190808051906020019092919050505050611034600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460035461179090919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fdf9dd3316575009a28f9a649a271eabbc76c48a7a805b829733ebaf65c7a9201600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a26000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050610e1a565b50505050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ce57600080fd5b8060028190555050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561127657600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505061133633826117a9565b503373ffffffffffffffffffffffffffffffffffffffff167f6fcafed4b3e08bca562a41f54bcc85aa14299e0c17076e7714d4fb19026a68d183604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561144c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8430856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561160557600080fd5b505af1158015611619573d6000803e3d6000fd5b505050506040513d602081101561162f57600080fd5b81019080805190602001909291905050505061169382600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a4990919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116eb82600354611a4990919063ffffffff16565b6003819055508273ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1583600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a26001905092915050565b600082821115151561179e57fe5b818303905092915050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156117f957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156118be57600080fd5b505af11580156118d2573d6000803e3d6000fd5b505050506040513d60208110156118e857600080fd5b81019080805190602001909291905050505061194c82600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179090919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119a48260035461179090919063ffffffff16565b6003819055508273ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb83600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a26001905092915050565b60008183019050828110151515611a5c57fe5b809050929150505600a165627a7a72305820449254353d9b51d6a761303dc1ebceb4972056d43beb9244fdb44c367f6c1d490029000000000000000000000000df2c7238198ad8b389666574f2d8bc411a4b7428",
  "constructorArguments": "000000000000000000000000df2c7238198ad8b389666574f2d8bc411a4b7428"
}