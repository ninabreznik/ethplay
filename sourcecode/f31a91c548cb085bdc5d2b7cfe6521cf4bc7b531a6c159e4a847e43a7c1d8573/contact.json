{
  "address": "0x1fe2401bd6f4de5eff1661086440297baa9a2e12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Zethroll",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-03\n*/\n\npragma solidity ^0.4.24;\n\n// Zethr Token Bankroll interface\ncontract ZethrTokenBankroll{\n    // Game request token transfer to player \n    function gameRequestTokens(address target, uint tokens) public;\n}\n\n// Zether Main Bankroll interface\ncontract ZethrMainBankroll{\n    function gameGetTokenBankrollList() public view returns (address[7]);\n}\n\n// Zethr main contract interface\ncontract ZethrInterface{\n    function withdraw() public;\n}\n\n// Library for figuring out the \"tier\" (1-7) of a dividend rate\nlibrary ZethrTierLibrary{\n    uint constant internal magnitude = 2**64;\n    function getTier(uint divRate) internal pure returns (uint){\n        // Tier logic \n        // Returns the index of the UsedBankrollAddresses which should be used to call into to withdraw tokens \n        \n        // We can divide by magnitude\n        // Remainder is removed so we only get the actual number we want\n        uint actualDiv = divRate; \n        if (actualDiv >= 30){\n            return 6;\n        } else if (actualDiv >= 25){\n            return 5;\n        } else if (actualDiv >= 20){\n            return 4;\n        } else if (actualDiv >= 15){\n            return 3;\n        } else if (actualDiv >= 10){\n            return 2; \n        } else if (actualDiv >= 5){\n            return 1;\n        } else if (actualDiv >= 2){\n            return 0;\n        } else{\n            // Impossible\n            revert(); \n        }\n    }\n}\n \n// Contract that contains the functions to interact with the bankroll system\ncontract ZethrBankrollBridge{\n    // Must have an interface with the main Zethr token contract \n    ZethrInterface Zethr;\n   \n    // Store the bankroll addresses \n    // address[0] is main bankroll \n    // address[1] is tier1: 2-5% \n    // address[2] is tier2: 5-10, etc\n    address[7] UsedBankrollAddresses; \n\n    // Mapping for easy checking\n    mapping(address => bool) ValidBankrollAddress;\n    \n    // Set up the tokenbankroll stuff \n    function setupBankrollInterface(address ZethrMainBankrollAddress) internal {\n        // Instantiate Zethr\n        Zethr = ZethrInterface(0xb9ab8eed48852de901c13543042204c6c569b811);\n        // Get the bankroll addresses from the main bankroll\n        UsedBankrollAddresses = ZethrMainBankroll(ZethrMainBankrollAddress).gameGetTokenBankrollList();\n        for(uint i=0; i<7; i++){\n            ValidBankrollAddress[UsedBankrollAddresses[i]] = true;\n        }\n    }\n    \n    // Require a function to be called from a *token* bankroll \n    modifier fromBankroll(){\n        require(ValidBankrollAddress[msg.sender], \"msg.sender should be a valid bankroll\");\n        _;\n    }\n    \n    // Request a payment in tokens to a user FROM the appropriate tokenBankroll \n    // Figure out the right bankroll via divRate \n    function RequestBankrollPayment(address to, uint tokens, uint userDivRate) internal {\n        uint tier = ZethrTierLibrary.getTier(userDivRate);\n        address tokenBankrollAddress = UsedBankrollAddresses[tier];\n        ZethrTokenBankroll(tokenBankrollAddress).gameRequestTokens(to, tokens);\n    }\n}\n\n// Contract that contains functions to move divs to the main bankroll\ncontract ZethrShell is ZethrBankrollBridge{\n    \n    // Dump ETH balance to main bankroll \n    function WithdrawToBankroll() public {\n        address(UsedBankrollAddresses[0]).transfer(address(this).balance);\n    }\n    \n    // Dump divs and dump ETH into bankroll \n    function WithdrawAndTransferToBankroll() public {\n        Zethr.withdraw();\n        WithdrawToBankroll();\n    }\n}\n\n// Zethr game data setup\n// Includes all necessary to run with Zethr \ncontract Zethroll is ZethrShell {\n  using SafeMath for uint;\n\n  // Makes sure that player profit can't exceed a maximum amount,\n  //  that the bet size is valid, and the playerNumber is in range.\n  modifier betIsValid(uint _betSize, uint _playerNumber, uint divRate) {\n     require(  calculateProfit(_betSize, _playerNumber) < getMaxProfit(divRate)\n             && _betSize >= minBet\n             && _playerNumber >= minNumber\n             && _playerNumber <= maxNumber);\n    _;\n  }\n\n  // Requires game to be currently active\n  modifier gameIsActive {\n    require(gamePaused == false);\n    _;\n  }\n\n  // Requires msg.sender to be owner\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  // Constants\n  uint constant private MAX_INT = 2 ** 256 - 1;\n  uint constant public maxProfitDivisor = 1000000;\n  uint public maxNumber = 90;\n  uint public minNumber = 10;\n  uint constant public houseEdgeDivisor = 1000;\n\n  // Configurables\n  bool public gamePaused;\n  bool public canMining = true;\n  uint public miningProfit = 100;\n  uint public minBetMining = 1e18;\n  address public owner;\n\n  mapping (uint => uint) public contractBalance;\n  mapping (uint => uint) public maxProfit;\n  uint public houseEdge;\n  uint public maxProfitAsPercentOfHouse;\n  uint public minBet = 0;\n\n  // Trackers\n  uint public totalBets;\n  uint public totalZTHWagered;\n\n  // Events\n\n  // Logs bets + output to web3 for precise 'payout on win' field in UI\n  event LogBet(address sender, uint value, uint rollUnder);\n\n  // Outputs to web3 UI on bet result\n  // Status: 0=lose, 1=win, 2=win + failed send, 3=refund, 4=refund + failed send\n  event LogResult(address player, uint result, uint rollUnder, uint profit, uint tokensBetted, bool won);\n\n  // Logs owner transfers\n  event LogOwnerTransfer(address indexed SentToAddress, uint indexed AmountTransferred);\n\n  // Logs changes in maximum profit\n  event MaxProfitChanged(uint _oldMaxProfit, uint _newMaxProfit);\n\n  // Logs current contract balance\n  event CurrentContractBalance(uint _tokens);\n  \n  constructor (address ZethrMainBankrollAddress) public {\n    setupBankrollInterface(ZethrMainBankrollAddress);\n\n    // Owner is deployer\n    owner = msg.sender;\n\n    // Init 990 = 99% (1% houseEdge)\n    houseEdge = 990;\n\n    // The maximum profit from each bet is 10% of the contract balance.\n    ownerSetMaxProfitAsPercentOfHouse(200000);\n\n    // Init min bet (1 ZTH)\n    ownerSetMinBet(1e18);\n    \n    canMining = false;\n    miningProfit = 100;\n    minBetMining = 1e18;\n  }\n\n  // Returns a random number using a specified block number\n  // Always use a FUTURE block number.\n  function maxRandom(uint blockn, address entropy) public view returns (uint256 randomNumber) {\n    return uint256(keccak256(\n        abi.encodePacked(\n        blockhash(blockn),\n        entropy)\n      ));\n  }\n\n  // Random helper\n  function random(uint256 upper, uint256 blockn, address entropy) public view returns (uint256 randomNumber) {\n    return maxRandom(blockn, entropy) % upper;\n  }\n\n  // Calculate the maximum potential profit\n  function calculateProfit(uint _initBet, uint _roll)\n    private\n    view\n    returns (uint)\n  {\n    return ((((_initBet * (100 - (_roll.sub(1)))) / (_roll.sub(1)) + _initBet)) * houseEdge / houseEdgeDivisor) - _initBet;\n  }\n\n  // I present a struct which takes only 20k gas\n  struct playerRoll{\n    uint192 tokenValue; // Token value in uint \n    uint48 blockn;      // Block number 48 bits \n    uint8 rollUnder;    // Roll under 8 bits\n    uint8 divRate;      // Divrate, 8 bits \n  }\n\n  // Mapping because a player can do one roll at a time\n  mapping(address => playerRoll) public playerRolls;\n\n  // The actual roll function\n  function _playerRollDice(uint _rollUnder, TKN _tkn, uint userDivRate) private\n    gameIsActive\n    betIsValid(_tkn.value, _rollUnder, userDivRate)\n  {\n    require(_tkn.value < ((2 ** 192) - 1));   // Smaller than the storage of 1 uint192;\n    require(block.number < ((2 ** 48) - 1));  // Current block number smaller than storage of 1 uint48\n    require(userDivRate < (2 ** 8 - 1)); // This should never throw \n    // Note that msg.sender is the Token Contract Address\n    // and \"_from\" is the sender of the tokens\n\n    playerRoll memory roll = playerRolls[_tkn.sender];\n\n    // Cannot bet twice in one block \n    require(block.number != roll.blockn);\n\n    // If there exists a roll, finish it\n    if (roll.blockn != 0) {\n      _finishBet(_tkn.sender);\n    }\n\n    // Set struct block number, token value, and rollUnder values\n    roll.blockn = uint48(block.number);\n    roll.tokenValue = uint192(_tkn.value);\n    roll.rollUnder = uint8(_rollUnder);\n    roll.divRate = uint8(userDivRate);\n\n    // Store the roll struct - 20k gas.\n    playerRolls[_tkn.sender] = roll;\n\n    // Provides accurate numbers for web3 and allows for manual refunds\n    emit LogBet(_tkn.sender, _tkn.value, _rollUnder);\n                 \n    // Increment total number of bets\n    totalBets += 1;\n\n    // Total wagered\n    totalZTHWagered += _tkn.value;\n    \n    // game mining\n    if(canMining && roll.tokenValue >= minBetMining){\n        uint miningAmout = SafeMath.div(SafeMath.mul(roll.tokenValue, miningProfit) , 10000);\n        RequestBankrollPayment(_tkn.sender, miningAmout, roll.divRate);\n    }\n  }\n\n  // Finished the current bet of a player, if they have one\n  function finishBet() public\n    gameIsActive\n    returns (uint)\n  {\n    return _finishBet(msg.sender);\n  }\n\n  /*\n   * Pay winner, update contract balance\n   * to calculate new max bet, and send reward.\n   */\n  function _finishBet(address target) private returns (uint){\n    playerRoll memory roll = playerRolls[target];\n    require(roll.tokenValue > 0); // No re-entracy\n    require(roll.blockn != block.number);\n    // If the block is more than 255 blocks old, we can't get the result\n    // Also, if the result has already happened, fail as well\n    uint result;\n    if (block.number - roll.blockn > 255) {\n      result = 1000; // Cant win \n    } else {\n      // Grab the result - random based ONLY on a past block (future when submitted)\n      result = random(100, roll.blockn, target) + 1;\n    }\n\n    uint rollUnder = roll.rollUnder;\n\n    if (result < rollUnder) {\n      // Player has won!\n\n      // Safely map player profit\n      uint profit = calculateProfit(roll.tokenValue, rollUnder);\n      uint mProfit = getMaxProfit(roll.divRate);\n        if (profit > mProfit){\n            profit = mProfit;\n        }\n\n      // Safely reduce contract balance by player profit\n      subContractBalance(roll.divRate, profit);\n\n      emit LogResult(target, result, rollUnder, profit, roll.tokenValue, true);\n\n      // Update maximum profit\n      setMaxProfit(roll.divRate);\n\n      // Prevent re-entracy memes\n      playerRolls[target] = playerRoll(uint192(0), uint48(0), uint8(0), uint8(0));\n\n      // Transfer profit plus original bet\n      RequestBankrollPayment(target, profit + roll.tokenValue, roll.divRate);\n      return result;\n\n    } else {\n      /*\n      * Player has lost\n      * Update contract balance to calculate new max bet\n      */\n      emit LogResult(target, result, rollUnder, profit, roll.tokenValue, false);\n\n      /*\n      *  Safely adjust contractBalance\n      *  SetMaxProfit\n      */\n      addContractBalance(roll.divRate, roll.tokenValue);\n     \n      playerRolls[target] = playerRoll(uint192(0), uint48(0), uint8(0), uint8(0));\n      // No need to actually delete player roll here since player ALWAYS loses \n      // Saves gas on next buy \n\n      // Update maximum profit\n      setMaxProfit(roll.divRate);\n      \n      return result;\n    }\n  }\n\n  // TKN struct\n  struct TKN {address sender; uint value;}\n\n  // Token fallback to bet or deposit from bankroll\n  function execute(address _from, uint _value, uint userDivRate, bytes _data) public fromBankroll gameIsActive returns (bool) {\n      TKN memory _tkn;\n      _tkn.sender = _from;\n      _tkn.value = _value;\n      uint8 chosenNumber = uint8(_data[0]);\n      _playerRollDice(chosenNumber, _tkn, userDivRate);\n\n    return true;\n  }\n\n  // Sets max profit\n  function setMaxProfit(uint divRate) internal {\n    //emit CurrentContractBalance(contractBalance);\n    maxProfit[divRate] = (contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor;\n  }\n \n  // Gets max profit \n  function getMaxProfit(uint divRate) public view returns (uint){\n      return (contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor;\n  }\n \n  // Subtracts from the contract balance tracking var \n  function subContractBalance(uint divRate, uint sub) internal {\n      contractBalance[divRate] = contractBalance[divRate].sub(sub);\n  }\n \n  // Adds to the contract balance tracking var \n  function addContractBalance(uint divRate, uint add) internal {\n      contractBalance[divRate] = contractBalance[divRate].add(add);\n  }\n\n  // Only owner adjust contract balance variable (only used for max profit calc)\n  function ownerUpdateContractBalance(uint newContractBalance, uint divRate) public\n  onlyOwner\n  {\n    contractBalance[divRate] = newContractBalance;\n  }\n  function ownerUpdateMinMaxNumber(uint newMinNumber, uint newMaxNumber) public\n  onlyOwner\n  {\n    minNumber = newMinNumber;\n    maxNumber = newMaxNumber;\n  }\n  // Only owner adjust contract balance variable (only used for max profit calc)\n  function updateContractBalance(uint newContractBalance) public\n  onlyOwner\n  {\n    contractBalance[2] = newContractBalance;\n    setMaxProfit(2);\n    contractBalance[5] = newContractBalance;\n    setMaxProfit(5);\n    contractBalance[10] = newContractBalance;\n    setMaxProfit(10);\n    contractBalance[15] = newContractBalance;\n    setMaxProfit(15);\n    contractBalance[20] = newContractBalance;\n    setMaxProfit(20);\n    contractBalance[25] = newContractBalance;\n    setMaxProfit(25);\n    contractBalance[33] = newContractBalance;\n    setMaxProfit(33);\n  }  \n  // An EXTERNAL update of tokens should be handled here \n  // This is due to token allocation \n  // The game should handle internal updates itself (e.g. tokens are betted)\n  function bankrollExternalUpdateTokens(uint divRate, uint newBalance) public fromBankroll {\n      contractBalance[divRate] = newBalance;\n      setMaxProfit(divRate);\n  }\n\n  // Only owner address can set maxProfitAsPercentOfHouse\n  function ownerSetMaxProfitAsPercentOfHouse(uint newMaxProfitAsPercent) public\n  onlyOwner\n  {\n    // Restricts each bet to a maximum profit of 20% contractBalance\n    require(newMaxProfitAsPercent <= 200000);\n    maxProfitAsPercentOfHouse = newMaxProfitAsPercent;\n    setMaxProfit(2);\n    setMaxProfit(5);\n    setMaxProfit(10);\n    setMaxProfit(15);\n    setMaxProfit(20);\n    setMaxProfit(25);\n    setMaxProfit(33);\n  }\n\n  // Only owner address can set minBet\n  function ownerSetMinBet(uint newMinimumBet) public\n  onlyOwner\n  {\n    minBet = newMinimumBet;\n  }\n\n  // Only owner address can set emergency pause #1\n  function ownerSetupBankrollInterface(address ZethrMainBankrollAddress) public\n  onlyOwner\n  {\n    setupBankrollInterface(ZethrMainBankrollAddress);\n  }\n  function ownerPauseGame(bool newStatus) public\n  onlyOwner\n  {\n    gamePaused = newStatus;\n  }\n  function ownerSetCanMining(bool newStatus) public\n  onlyOwner\n  {\n    canMining = newStatus;\n  }\n  function ownerSetMiningProfit(uint newProfit) public\n  onlyOwner\n  {\n    miningProfit = newProfit;\n  }\n  function ownerSetMinBetMining(uint newMinBetMining) public\n  onlyOwner\n  {\n    minBetMining = newMinBetMining;\n  }  \n  // Only owner address can set owner address\n  function ownerChangeOwner(address newOwner) public \n  onlyOwner\n  {\n    owner = newOwner;\n  }\n\n  // Only owner address can selfdestruct - emergency\n  function ownerkill() public\n  onlyOwner\n  {\n\n    selfdestruct(owner);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint a, uint b) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "6080604052605a600955600a8055600b805461ff0019166101001790556064600c55670de0b6b3a7640000600d5560006013553480156200003f57600080fd5b5060405160208062001e1083398101604052516200006681640100000000620000d4810204565b600e8054600160a060020a031916331790556103de6011556200009562030d40640100000000620001fb810204565b620000b1670de0b6b3a7640000640100000000620002bf810204565b50600b805461ff00191690556064600c55670de0b6b3a7640000600d5562000390565b60008054600160a060020a03191673b9ab8eed48852de901c13543042204c6c569b811178155604080517fb1db1cac0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169163b1db1cac9160048083019260e092919082900301818787803b1580156200015557600080fd5b505af11580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e08110156200019057600080fd5b50620001a190600190600762000309565b50600090505b6007811015620001f757600160086000828460078110620001c457fe5b0154600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101620001a7565b5050565b600e54600160a060020a031633146200021357600080fd5b62030d408111156200022457600080fd5b60128190556200023e6002640100000000620002dc810204565b620002536005640100000000620002dc810204565b62000268600a640100000000620002dc810204565b6200027d600f640100000000620002dc810204565b620002926014640100000000620002dc810204565b620002a76019640100000000620002dc810204565b620002bc6021640100000000620002dc810204565b50565b600e54600160a060020a03163314620002d757600080fd5b601355565b6012546000828152600f6020526040902054620f4240910260009283526010602052604090922091049055565b826007810192821562000354579160200282015b82811115620003545782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200031d565b506200036292915062000366565b5090565b6200038d91905b8082111562000362578054600160a060020a03191681556001016200036d565b90565b611a7080620003a06000396000f3006080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304fcadf181146101d15780630bb954c9146101f85780630d4255591461020f578063172ff8d61461022757806323214fab146102505780633a4f6999146102655780633ba064521461027a57806343c1598d1461029257806343db5324146102a75780634f44728d146102c157806355b93031146102e25780635da5a9b1146102f75780635e968a4914610312578063619907591461032a57806361fda6401461034e5780636cdf4c90146103695780636eacd48a14610381578063714490ab1461039b57806377a28461146103b057806382916381146103d15780638701a2f01461043d5780638da5cb5b146104525780639619367d1461048357806397c6824f14610498578063a3531f6c146104ad578063b3472edb146104c2578063bd71e476146104da578063befa1e2f146104f2578063c3de1ab914610507578063ccd50d281461051c578063d263b7eb14610577578063d667dcd71461058c578063e5c774de146105a1578063ee4eabce146105b6578063ef4ef103146105ce578063f17715ef146105e9578063f7ba889614610601575b600080fd5b3480156101dd57600080fd5b506101e6610628565b60408051918252519081900360200190f35b34801561020457600080fd5b5061020d61062e565b005b34801561021b57600080fd5b5061020d6004356106aa565b34801561023357600080fd5b5061023c6106c6565b604080519115158252519081900360200190f35b34801561025c57600080fd5b506101e66106d4565b34801561027157600080fd5b506101e66106da565b34801561028657600080fd5b506101e66004356106e0565b34801561029e57600080fd5b506101e66106f2565b3480156102b357600080fd5b5061020d60043515156106f9565b3480156102cd57600080fd5b5061020d600160a060020a036004351661072a565b3480156102ee57600080fd5b506101e6610770565b34801561030357600080fd5b5061020d600435602435610776565b34801561031e57600080fd5b5061020d600435610798565b34801561033657600080fd5b506101e6600435600160a060020a036024351661080d565b34801561035a57600080fd5b5061020d6004356024356108ae565b34801561037557600080fd5b5061020d6004356108d6565b34801561038d57600080fd5b5061020d60043515156108f2565b3480156103a757600080fd5b5061020d61091c565b3480156103bc57600080fd5b5061020d600160a060020a0360043516610959565b3480156103dd57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261023c94600160a060020a0381351694602480359560443595369560849493019181908401838280828437509497506109799650505050505050565b34801561044957600080fd5b506101e6610a89565b34801561045e57600080fd5b50610467610aab565b60408051600160a060020a039092168252519081900360200190f35b34801561048f57600080fd5b506101e6610aba565b3480156104a457600080fd5b506101e6610ac0565b3480156104b957600080fd5b506101e6610ac6565b3480156104ce57600080fd5b506101e6600435610acc565b3480156104e657600080fd5b5061020d600435610ae9565b3480156104fe57600080fd5b506101e6610b05565b34801561051357600080fd5b5061023c610b0b565b34801561052857600080fd5b5061053d600160a060020a0360043516610b14565b60408051600160c060020a03909516855265ffffffffffff909316602085015260ff91821684840152166060830152519081900360800190f35b34801561058357600080fd5b5061020d610b55565b34801561059857600080fd5b506101e6610b7a565b3480156105ad57600080fd5b506101e6610b80565b3480156105c257600080fd5b5061020d600435610b86565b3480156105da57600080fd5b5061020d600435602435610d2c565b3480156105f557600080fd5b506101e6600435610df0565b34801561060d57600080fd5b506101e6600435602435600160a060020a0360443516610e02565b60155481565b60008054604080517f3ccfd60b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633ccfd60b9260048084019382900301818387803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506106a861091c565b565b600e54600160a060020a031633146106c157600080fd5b600c55565b600b54610100900460ff1681565b60125481565b60095481565b60106020526000908152604090205481565b620f424081565b600e54600160a060020a0316331461071057600080fd5b600b80549115156101000261ff0019909216919091179055565b600e54600160a060020a0316331461074157600080fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5481565b600e54600160a060020a0316331461078d57600080fd5b600a91909155600955565b600e54600160a060020a031633146107af57600080fd5b62030d408111156107bf57600080fd5b60128190556107ce6002610e21565b6107d86005610e21565b6107e2600a610e21565b6107ec600f610e21565b6107f66014610e21565b6108006019610e21565b61080a6021610e21565b50565b6040805183406020808301919091526c01000000000000000000000000600160a060020a0385160282840152825160348184030181526054909201928390528151600093918291908401908083835b6020831061087b5780518252601f19909201916020918201910161085c565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b600e54600160a060020a031633146108c557600080fd5b6000908152600f6020526040902055565b600e54600160a060020a031633146108ed57600080fd5b601355565b600e54600160a060020a0316331461090957600080fd5b600b805460ff1916911515919091179055565b600160000154604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561080a573d6000803e3d6000fd5b600e54600160a060020a0316331461097057600080fd5b61080a81610e4e565b6000610983611970565b3360009081526008602052604081205460ff161515610a2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6d73672e73656e6465722073686f756c6420626520612076616c69642062616e60448201527f6b726f6c6c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600b5460ff1615610a3957600080fd5b600160a060020a038716825260208201869052835184906000908110610a5b57fe5b016020015160f860020a908190048102049050610a7c60ff82168387610f76565b5060019695505050505050565b600b5460009060ff1615610a9c57600080fd5b610aa5336112bd565b90505b90565b600e54600160a060020a031681565b60135481565b600d5481565b600c5481565b6012546000918252600f602052604090912054620f424091020490565b600e54600160a060020a03163314610b0057600080fd5b600d55565b60145481565b600b5460ff1681565b601660205260009081526040902054600160c060020a0381169065ffffffffffff60c060020a8204169060ff60f060020a820481169160f860020a90041684565b600e54600160a060020a03163314610b6c57600080fd5b600e54600160a060020a0316ff5b60115481565b6103e881565b600e54600160a060020a03163314610b9d57600080fd5b60026000819052600f6020527fa74ba3945261e09fde15ba3db55005b205e61eeb4ad811ac0faa2b315bffeead829055610bd690610e21565b60056000819052600f6020527f6bda57492eba051cb4a12a1e19df47c9755d78165341d4009b1d09b3f3616204829055610c0f90610e21565b600a6000819052600f6020527fa13a7a52a9cbb6a90f40d40fbf35f68146be73226e0f48ff16963183fd5684ad829055610c4890610e21565b600f600081905260208190527f09567c41c2b819e512ebbfc896a7d795b901b9f15f7637726d97561d5276acb0829055610c8190610e21565b60146000819052600f6020527f7c16d5886e618926ff2a48ede610aee33ddc3e26b240b1a3e692dab251ff80af829055610cba90610e21565b60196000819052600f6020527f87f994d5ae59a99e2acf48b36d480618800117e5705e341836567036c9771939829055610cf390610e21565b60216000819052600f6020527f4cf9b7e1ac9fdf6c76aa2106d1bb2d28737e17b29c4288bf23778389315a5ba982905561080a90610e21565b3360009081526008602052604090205460ff161515610dd257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6d73672e73656e6465722073686f756c6420626520612076616c69642062616e60448201527f6b726f6c6c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600f60205260409020819055610dec82610e21565b5050565b600f6020526000908152604090205481565b600083610e0f848461080d565b811515610e1857fe5b06949350505050565b6012546000828152600f6020526040902054620f4240910260009283526010602052604090922091049055565b6000805473ffffffffffffffffffffffffffffffffffffffff191673b9ab8eed48852de901c13543042204c6c569b811178155604080517fb1db1cac0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169163b1db1cac9160048083019260e092919082900301818787803b158015610edb57600080fd5b505af1158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e0811015610f1457600080fd5b50610f23906001906007611987565b50600090505b6007811015610dec57600160086000828460078110610f4457fe5b0154600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610f29565b610f7e6119ec565b600b5460009060ff1615610f9157600080fd5b83602001518584610fa181610acc565b610fab8484611736565b108015610fba57506013548310155b8015610fc85750600a548210155b8015610fd657506009548211155b1515610fe157600080fd5b6020870151600160c060020a0311610ff857600080fd5b65ffffffffffff431061100a57600080fd5b60ff861061101757600080fd5b8651600160a060020a031660009081526016602090815260409182902082516080810184529054600160c060020a038116825265ffffffffffff60c060020a82041692820183905260ff60f060020a820481169483019490945260f860020a9004909216606083015290955043141561108f57600080fd5b602085015165ffffffffffff16156110ae5786516110ac906112bd565b505b43856020019065ffffffffffff16908165ffffffffffff168152505086602001518560000190600160c060020a03169081600160c060020a03168152505087856040019060ff16908160ff168152505085856060019060ff16908160ff168152505084601660008960000151600160a060020a0316600160a060020a0316815260200190815260200160002060008201518160000160006101000a815481600160c060020a030219169083600160c060020a0316021790555060208201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001601e6101000a81548160ff021916908360ff160217905550606082015181600001601f6101000a81548160ff021916908360ff1602179055509050507fcfb6e9afebabebfb2c7ac42dfcd2e8ca178dc6400fe8ec3075bd690d8e3377fe876000015188602001518a6040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a16014805460010190556020870151601580549091019055600b54610100900460ff1680156112725750600d548551600160c060020a031610155b156112b35761129b6112938660000151600160c060020a0316600c54611788565b6127106117be565b93506112b3876000015185876060015160ff166117d5565b5050505050505050565b60006112c76119ec565b50600160a060020a038216600090815260166020908152604080832081516080810183529054600160c060020a03811680835265ffffffffffff60c060020a8304169483019490945260ff60f060020a820481169383019390935260f860020a900490911660608201529190819081908190811061134457600080fd5b602085015165ffffffffffff1643141561135d57600080fd5b60ff856020015165ffffffffffff164303111561137e576103e8935061139c565b6113966064866020015165ffffffffffff1689610e02565b60010193505b846040015160ff169250828410156115905784516113c390600160c060020a031684611736565b91506113d5856060015160ff16610acc565b9050808211156113e3578091505b6113f4856060015160ff168361187f565b845160408051600160a060020a038a1681526020810187905280820186905260608101859052600160c060020a039092166080830152600160a0830152517f34079d79bb31b852e172198518083b845886d3d6366fcff691718d392250a9899181900360c00190a161146c856060015160ff16610e21565b60408051608081018252600080825260208083018281528385018381526060808601858152600160a060020a038f1686526016909452959093209351845491519351925177ffffffffffffffffffffffffffffffffffffffffffffffff19909216600160c060020a03918216177fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a65ffffffffffff90951694909402939093177fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f060020a60ff93841602177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f860020a9183169190910217909255875192880151611588938b939216860191166117d5565b83955061172c565b845160408051600160a060020a038a1681526020810187905280820186905260608101859052600160c060020a039092166080830152600060a0830152517f34079d79bb31b852e172198518083b845886d3d6366fcff691718d392250a9899181900360c00190a1611616856060015160ff168660000151600160c060020a03166118b4565b60408051608081018252600080825260208083018281528385018381526060808601858152600160a060020a038f1686526016909452959093209351845491519351925177ffffffffffffffffffffffffffffffffffffffffffffffff19909216600160c060020a03909116177fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a65ffffffffffff90941693909302929092177fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f060020a60ff92831602177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f860020a9282169290920291909117909155908601516115889116610e21565b5050505050919050565b6000826103e8601154856117546001876118d390919063ffffffff16565b61176587600163ffffffff6118d316565b606403880281151561177357fe5b04010281151561177f57fe5b04039392505050565b60008083151561179b57600091506117b7565b508282028284828115156117ab57fe5b04146117b357fe5b8091505b5092915050565b60008082848115156117cc57fe5b04949350505050565b6000806117e1836118e5565b9150600182600781106117f057fe5b0154604080517f8ccd227c000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820188905291519190921692508291638ccd227c91604480830192600092919082900301818387803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b505050505050505050565b6000828152600f602052604090205461189e908263ffffffff6118d316565b6000928352600f60205260409092209190915550565b6000828152600f602052604090205461189e908263ffffffff61196116565b6000828211156118df57fe5b50900390565b600081601e81106118f9576006915061195b565b6019811061190a576005915061195b565b6014811061191b576004915061195b565b600f811061192c576003915061195b565b600a811061193d576002915061195b565b6005811061194e576001915061195b565b600281106101cc57600091505b50919050565b6000828201838110156117b357fe5b604080518082019091526000808252602082015290565b82600781019282156119dc579160200282015b828111156119dc578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617825560209092019160019091019061199a565b506119e8929150611a13565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b610aa891905b808211156119e857805473ffffffffffffffffffffffffffffffffffffffff19168155600101611a195600a165627a7a72305820c3cb600b3c72e0b2fde7bdf29e00dbaa3c3f83f06783de70012047f58c19318100290000000000000000000000008481ff17c388ac87c5fa390e5c745677c6d99552",
  "constructorArguments": "0000000000000000000000008481ff17c388ac87c5fa390e5c745677c6d99552"
}