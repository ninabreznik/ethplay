{
  "address": "0xdc67ec98d4a690230089b2b5b509215e4a1570e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProxyBonusContract",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity 0.5.6;\n\n\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"\");\n        owner = newOwner;\n    }\n\n}\n\n\ncontract Manageable is Ownable {\n    mapping(address => bool) public listOfManagers;\n\n    modifier onlyManager() {\n        require(listOfManagers[msg.sender], \"\");\n        _;\n    }\n\n    function addManager(address _manager) public onlyOwner returns (bool success) {\n        if (!listOfManagers[_manager]) {\n            require(_manager != address(0), \"\");\n            listOfManagers[_manager] = true;\n            success = true;\n        }\n    }\n\n    function removeManager(address _manager) public onlyOwner returns (bool success) {\n        if (listOfManagers[_manager]) {\n            listOfManagers[_manager] = false;\n            success = true;\n        }\n    }\n\n    function getInfo(address _manager) public view returns (bool) {\n        return listOfManagers[_manager];\n    }\n}\n\ninterface iHourlyGame {\n    function buyBonusTickets(\n        address _participant,\n        uint _hourlyTicketsCount,\n        uint _dailyTicketsCount,\n        uint _weeklyTicketsCount,\n        uint _monthlyTicketsCount,\n        uint _yearlyTicketsCount,\n        uint _jackPotTicketsCount,\n        uint _superJackPotTicketsCount\n    ) external payable;\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n\ncontract ProxyBonusContract is Manageable {\n    using SafeMath for uint;\n\n    IERC20 public token;\n\n    address hourlyGame;\n\n    constructor (\n        address _token,\n        address _hourlyGame\n    )\n    public\n    {\n        require(_token != address(0));\n        require(_hourlyGame != address(0), \"\");\n\n        token = IERC20(_token);\n        hourlyGame = _hourlyGame;\n    }\n\n    function buyTickets(address _participant, uint _luckyBacksAmount) public {\n        require(_luckyBacksAmount > 0, \"\");\n        require(token.transferFrom(msg.sender, address(this), _luckyBacksAmount), \"\");\n\n        uint amount = _luckyBacksAmount.div(10**18);\n\n        iHourlyGame(hourlyGame).buyBonusTickets(\n            _participant,\n            amount,\n            amount,\n            amount,\n            amount,\n            amount,\n            amount,\n            amount\n        );\n    }\n\n    function changeToken(address _token) public onlyManager {\n        token = IERC20(_token);\n    }\n}\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"\"); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"\");\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"\");\n        return a % b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516040806107798339810180604052604081101561003057600080fd5b508051602090910151600080546001600160a01b031916331790556001600160a01b03821661005e57600080fd5b6001600160a01b0381166100ad57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526000602482015290519081900360640190fd5b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055610691806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461014c578063ac18de4314610170578063f2fde38b14610196578063fc0c546a146101bc578063ffdd5cf1146101c457610093565b80632d06177a1461009857806366829b16146100d257806382384e9a146100fa57806388f5776714610120575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b03166101ea565b604080519115158252519081900360200190f35b6100f8600480360360208110156100e857600080fd5b50356001600160a01b03166102ab565b005b6100be6004803603602081101561011057600080fd5b50356001600160a01b031661030e565b6100f86004803603604081101561013657600080fd5b506001600160a01b038135169060200135610323565b6101546104c8565b604080516001600160a01b039092168252519081900360200190f35b6100be6004803603602081101561018657600080fd5b50356001600160a01b03166104d7565b6100f8600480360360208110156101ac57600080fd5b50356001600160a01b031661055b565b6101546105f1565b6100be600480360360208110156101da57600080fd5b50356001600160a01b0316610600565b600080546001600160a01b031633146102275760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b6001600160a01b03821660009081526001602052604090205460ff166102a6576001600160a01b03821661027f5760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b506001600160a01b0381166000908152600160208190526040909120805460ff1916821790555b919050565b3360009081526001602052604090205460ff166102ec5760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60016020526000908152604090205460ff1681565b600081116103555760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b60025460408051600160e01b6323b872dd0281523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b505050506040513d60208110156103dc57600080fd5b505161040c5760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b600061042682670de0b6b3a764000063ffffffff61061e16565b60035460408051600160e21b6313bbb8590281526001600160a01b0387811660048301526024820185905260448201859052606482018590526084820185905260a4820185905260c4820185905260e482018590529151939450911691634eeee164916101048082019260009290919082900301818387803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031681565b600080546001600160a01b031633146105145760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b6001600160a01b03821660009081526001602052604090205460ff16156102a657506001600160a01b03166000908152600160208190526040909120805460ff1916905590565b6000546001600160a01b031633146105975760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b6001600160a01b0381166105cf5760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6001600160a01b031660009081526001602052604090205460ff1690565b60008082116106515760408051600160e51b62461bcd028152602060048201526000602482015290519081900360640190fd5b600082848161065c57fe5b0494935050505056fea165627a7a723058209f117bf6ec76d48dffeff5439279b96e9f924b65edf9b938a50ae0bfb12e7daf0029000000000000000000000000ed5a231ecc0fa775980ad7b86e49872feacd4c8f000000000000000000000000ce75d0a0ed04d6eda036aa55d79a045d6abfb4d6",
  "constructorArguments": "000000000000000000000000ed5a231ecc0fa775980ad7b86e49872feacd4c8f000000000000000000000000ce75d0a0ed04d6eda036aa55d79a045d6abfb4d6"
}