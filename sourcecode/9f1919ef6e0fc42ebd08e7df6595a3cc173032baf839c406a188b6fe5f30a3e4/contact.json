{
  "address": "0xdb63d40c033d35e79cdbb21430f0fe10e9d97303",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "0x: Team Vesting",
  "contractName": "VestingWallet",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-11\n*/\n\npragma solidity 0.4.11;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract SafeMath {\n    function safeMul(uint a, uint b) internal constant returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal constant returns (uint) {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal constant returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal constant returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\ncontract VestingWallet is Ownable, SafeMath {\n\n    mapping(address => VestingSchedule) public schedules;        // vesting schedules for given addresses\n    mapping(address => address) public addressChangeRequests;    // requested address changes\n\n    Token vestingToken;\n\n    event VestingScheduleRegistered(\n        address indexed registeredAddress,\n        address depositor,\n        uint startTimeInSec,\n        uint cliffTimeInSec,\n        uint endTimeInSec,\n        uint totalAmount\n    );\n    event VestingScheduleConfirmed(\n        address indexed registeredAddress,\n        address depositor,\n        uint startTimeInSec,\n        uint cliffTimeInSec,\n        uint endTimeInSec,\n        uint totalAmount\n    );\n    event Withdrawal(address indexed registeredAddress, uint amountWithdrawn);\n    event VestingEndedByOwner(address indexed registeredAddress, uint amountWithdrawn, uint amountRefunded);\n    event AddressChangeRequested(address indexed oldRegisteredAddress, address indexed newRegisteredAddress);\n    event AddressChangeConfirmed(address indexed oldRegisteredAddress, address indexed newRegisteredAddress);\n\n    struct VestingSchedule {\n        uint startTimeInSec;\n        uint cliffTimeInSec;\n        uint endTimeInSec;\n        uint totalAmount;\n        uint totalAmountWithdrawn;\n        address depositor;\n        bool isConfirmed;\n    }\n\n    modifier addressRegistered(address target) {\n        VestingSchedule storage vestingSchedule = schedules[target];\n        require(vestingSchedule.depositor != address(0));\n        _;\n    }\n\n    modifier addressNotRegistered(address target) {\n        VestingSchedule storage vestingSchedule = schedules[target];\n        require(vestingSchedule.depositor == address(0));\n        _;\n    }\n\n    modifier vestingScheduleConfirmed(address target) {\n        VestingSchedule storage vestingSchedule = schedules[target];\n        require(vestingSchedule.isConfirmed);\n        _;\n    }\n\n    modifier vestingScheduleNotConfirmed(address target) {\n        VestingSchedule storage vestingSchedule = schedules[target];\n        require(!vestingSchedule.isConfirmed);\n        _;\n    }\n\n    modifier pendingAddressChangeRequest(address target) {\n        require(addressChangeRequests[target] != address(0));\n        _;\n    }\n\n    modifier pastCliffTime(address target) {\n        VestingSchedule storage vestingSchedule = schedules[target];\n        require(block.timestamp > vestingSchedule.cliffTimeInSec);\n        _;\n    }\n\n    modifier validVestingScheduleTimes(uint startTimeInSec, uint cliffTimeInSec, uint endTimeInSec) {\n        require(cliffTimeInSec >= startTimeInSec);\n        require(endTimeInSec >= cliffTimeInSec);\n        _;\n    }\n\n    modifier addressNotNull(address target) {\n        require(target != address(0));\n        _;\n    }\n\n    /// @dev Assigns a vesting token to the wallet.\n    /// @param _vestingToken Token that will be vested.\n    function VestingWallet(address _vestingToken) {\n        vestingToken = Token(_vestingToken);\n    }\n\n    /// @dev Registers a vesting schedule to an address.\n    /// @param _addressToRegister The address that is allowed to withdraw vested tokens for this schedule.\n    /// @param _depositor Address that will be depositing vesting token.\n    /// @param _startTimeInSec The time in seconds that vesting began.\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\n    /// @param _endTimeInSec The time in seconds that vesting ends.\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\n    function registerVestingSchedule(\n        address _addressToRegister,\n        address _depositor,\n        uint _startTimeInSec,\n        uint _cliffTimeInSec,\n        uint _endTimeInSec,\n        uint _totalAmount\n    )\n        public\n        onlyOwner\n        addressNotNull(_depositor)\n        vestingScheduleNotConfirmed(_addressToRegister)\n        validVestingScheduleTimes(_startTimeInSec, _cliffTimeInSec, _endTimeInSec)\n    {\n        schedules[_addressToRegister] = VestingSchedule({\n            startTimeInSec: _startTimeInSec,\n            cliffTimeInSec: _cliffTimeInSec,\n            endTimeInSec: _endTimeInSec,\n            totalAmount: _totalAmount,\n            totalAmountWithdrawn: 0,\n            depositor: _depositor,\n            isConfirmed: false\n        });\n\n        VestingScheduleRegistered(\n            _addressToRegister,\n            _depositor,\n            _startTimeInSec,\n            _cliffTimeInSec,\n            _endTimeInSec,\n            _totalAmount\n        );\n    }\n\n    /// @dev Confirms a vesting schedule and deposits necessary tokens. Throws if deposit fails or schedules do not match.\n    /// @param _startTimeInSec The time in seconds that vesting began.\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\n    /// @param _endTimeInSec The time in seconds that vesting ends.\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\n    function confirmVestingSchedule(\n        uint _startTimeInSec,\n        uint _cliffTimeInSec,\n        uint _endTimeInSec,\n        uint _totalAmount\n    )\n        public\n        addressRegistered(msg.sender)\n        vestingScheduleNotConfirmed(msg.sender)\n    {\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\n\n        require(vestingSchedule.startTimeInSec == _startTimeInSec);\n        require(vestingSchedule.cliffTimeInSec == _cliffTimeInSec);\n        require(vestingSchedule.endTimeInSec == _endTimeInSec);\n        require(vestingSchedule.totalAmount == _totalAmount);\n\n        vestingSchedule.isConfirmed = true;\n        require(vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount));\n\n        VestingScheduleConfirmed(\n            msg.sender,\n            vestingSchedule.depositor,\n            _startTimeInSec,\n            _cliffTimeInSec,\n            _endTimeInSec,\n            _totalAmount\n        );\n    }\n\n    /// @dev Allows a registered address to withdraw tokens that have already been vested.\n    function withdraw()\n        public\n        vestingScheduleConfirmed(msg.sender)\n        pastCliffTime(msg.sender)\n    {\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\n\n        uint totalAmountVested = getTotalAmountVested(vestingSchedule);\n        uint amountWithdrawable = safeSub(totalAmountVested, vestingSchedule.totalAmountWithdrawn);\n        vestingSchedule.totalAmountWithdrawn = totalAmountVested;\n\n        if (amountWithdrawable > 0) {\n            require(vestingToken.transfer(msg.sender, amountWithdrawable));\n            Withdrawal(msg.sender, amountWithdrawable);\n        }\n    }\n\n    /// @dev Allows contract owner to terminate a vesting schedule, transfering remaining vested tokens to the registered address and refunding owner with remaining tokens.\n    /// @param _addressToEnd Address that is currently registered to the vesting schedule that will be closed.\n    /// @param _addressToRefund Address that will receive unvested tokens.\n    function endVesting(address _addressToEnd, address _addressToRefund)\n        public\n        onlyOwner\n        vestingScheduleConfirmed(_addressToEnd)\n        addressNotNull(_addressToRefund)\n    {\n        VestingSchedule storage vestingSchedule = schedules[_addressToEnd];\n\n        uint amountWithdrawable = 0;\n        uint amountRefundable = 0;\n\n        if (block.timestamp < vestingSchedule.cliffTimeInSec) {\n            amountRefundable = vestingSchedule.totalAmount;\n        } else {\n            uint totalAmountVested = getTotalAmountVested(vestingSchedule);\n            amountWithdrawable = safeSub(totalAmountVested, vestingSchedule.totalAmountWithdrawn);\n            amountRefundable = safeSub(vestingSchedule.totalAmount, totalAmountVested);\n        }\n\n        delete schedules[_addressToEnd];\n        require(amountWithdrawable == 0 || vestingToken.transfer(_addressToEnd, amountWithdrawable));\n        require(amountRefundable == 0 || vestingToken.transfer(_addressToRefund, amountRefundable));\n\n        VestingEndedByOwner(_addressToEnd, amountWithdrawable, amountRefundable);\n    }\n\n    /// @dev Allows a registered address to request an address change.\n    /// @param _newRegisteredAddress Desired address to update to.\n    function requestAddressChange(address _newRegisteredAddress)\n        public\n        vestingScheduleConfirmed(msg.sender)\n        addressNotRegistered(_newRegisteredAddress)\n        addressNotNull(_newRegisteredAddress)\n    {\n        addressChangeRequests[msg.sender] = _newRegisteredAddress;\n        AddressChangeRequested(msg.sender, _newRegisteredAddress);\n    }\n\n    /// @dev Confirm an address change and migrate vesting schedule to new address.\n    /// @param _oldRegisteredAddress Current registered address.\n    /// @param _newRegisteredAddress Address to migrate vesting schedule to.\n    function confirmAddressChange(address _oldRegisteredAddress, address _newRegisteredAddress)\n        public\n        onlyOwner\n        pendingAddressChangeRequest(_oldRegisteredAddress)\n        addressNotRegistered(_newRegisteredAddress)\n    {\n        address newRegisteredAddress = addressChangeRequests[_oldRegisteredAddress];\n        require(newRegisteredAddress == _newRegisteredAddress);    // prevents race condition\n\n        VestingSchedule memory vestingSchedule = schedules[_oldRegisteredAddress];\n        schedules[newRegisteredAddress] = vestingSchedule;\n\n        delete schedules[_oldRegisteredAddress];\n        delete addressChangeRequests[_oldRegisteredAddress];\n\n        AddressChangeConfirmed(_oldRegisteredAddress, _newRegisteredAddress);\n    }\n\n    /// @dev Calculates the total tokens that have been vested for a vesting schedule, assuming the schedule is past the cliff.\n    /// @param vestingSchedule Vesting schedule used to calculate vested tokens.\n    /// @return Total tokens vested for a vesting schedule.\n    function getTotalAmountVested(VestingSchedule vestingSchedule)\n        internal\n        returns (uint)\n    {\n        if (block.timestamp >= vestingSchedule.endTimeInSec) return vestingSchedule.totalAmount;\n\n        uint timeSinceStartInSec = safeSub(block.timestamp, vestingSchedule.startTimeInSec);\n        uint totalVestingTimeInSec = safeSub(vestingSchedule.endTimeInSec, vestingSchedule.startTimeInSec);\n        uint totalAmountVested = safeDiv(\n            safeMul(timeSinceStartInSec, vestingSchedule.totalAmount),\n            totalVestingTimeInSec\n        );\n\n        return totalAmountVested;\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b604051602080611e73833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b611db4806100bf6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301d490fd146100a45780630633cd321461011d5780633ccfd60b146101535780634ed600d11461016557806380c3780f146101a05780638da5cb5b14610244578063a5b1993714610296578063b1e9ee64146102eb578063bff44f0d14610361578063f2fde38b146103b6575bfe5b34156100ac57fe5b61011b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506103ec565b005b341561012557fe5b610151600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106e3565b005b341561015b57fe5b61016361090e565b005b341561016d57fe5b61019e6004808035906020019091908035906020019091908035906020019091908035906020019091905050610c33565b005b34156101a857fe5b6101d4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ff9565b604051808881526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200197505050505050505060405180910390f35b341561024c57fe5b610254611068565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029e57fe5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061108e565b005b34156102f357fe5b61031f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561036957fe5b6103b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115ff565b005b34156103be57fe5b6103ea600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b82565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104495760006000fd5b84600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156104875760006000fd5b866000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900460ff161515156104ea5760006000fd5b8686868282101515156104fd5760006000fd5b81811015151561050d5760006000fd5b60e0604051908101604052808b81526020018a8152602001898152602001888152602001600081526020018c73ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff0219169083151502179055509050508b73ffffffffffffffffffffffffffffffffffffffff167feabffab667737db1059b7735b91f5924be3f07f24e6374dbb1b9d11668ed89a58c8c8c8c8c604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a25b5b5050505b50505b505b505050505050565b336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900460ff1615156107455760006000fd5b826000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156107e95760006000fd5b84600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156108275760006000fd5b85600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4fd8411c817c0b524aeeef15446e8327901fcf5b6a31246930dfbe5f8c12235160405180905060405180910390a35b5b505b50505b505050565b600060006000336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900460ff1615156109765760006000fd5b336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010154421115156109cd5760006000fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209650610ac68760e0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050611c5c565b9550610ad6868860040154611cc6565b94508587600401819055506000851115610c2757600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610bb457fe5b6102c65a03f11515610bc257fe5b505050604051805190501515610bd85760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65866040518082815260200191505060405180910390a25b5b5b50505b5050505050565b6000336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610cda5760006000fd5b336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900460ff16151515610d3d5760006000fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209450888560000154141515610d915760006000fd5b878560010154141515610da45760006000fd5b868560020154141515610db75760006000fd5b858560030154141515610dca5760006000fd5b60018560050160146101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630896000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610f0957fe5b6102c65a03f11515610f1757fe5b505050604051805190501515610f2d5760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff167fea82fa2a35ca7f8325d2d09b332a681a74ef8ee132b47febf11e0d6cfbd07b7d8660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8b8b8b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a25b5b50505b50505050505050565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16905087565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110f35760006000fd5b856000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900460ff1615156111555760006000fd5b86600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111935760006000fd5b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209650600095506000945086600101544210156111f457866003015494506112cf565b6112ac8760e0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050611c5c565b93506112bc848860040154611cc6565b95506112cc876003015485611cc6565b94505b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600082016000905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160146101000a81549060ff0219169055505060008614806114625750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a886000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561144957fe5b6102c65a03f1151561145757fe5b505050604051805190505b151561146e5760006000fd5b600085148061155b5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561154257fe5b6102c65a03f1151561155057fe5b505050604051805190505b15156115675760006000fd5b8873ffffffffffffffffffffffffffffffffffffffff167f5312918bb945e949b32d01afc69cad19c589287f4711f3c39aa84ae39a478f2e8787604051808381526020018281526020019250505060405180910390a25b5b505b50505b505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611609611d32565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116665760006000fd5b83600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156117035760006000fd5b836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117a75760006000fd5b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415156118445760006000fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060e0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050935083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff021916908315150217905550905050600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600082016000905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160146101000a81549060ff02191690555050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f3e4882fc047fc5cb92f283c6f3b683c6befb9b02aed687b56407df15640b388560405180905060405180910390a35b5b50505b505b50505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bdf5760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611c575780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b6000600060006000846040015142101515611c7d5784606001519350611cbe565b611c8b428660000151611cc6565b9250611c9f85604001518660000151611cc6565b9150611cb8611cb2848760600151611ce0565b83611d15565b90508093505b505050919050565b6000828211151515611cd457fe5b81830390505b92915050565b6000600082840290506000841480611d025750828482811515611cff57fe5b04145b1515611d0a57fe5b8091505b5092915050565b600060008284811515611d2457fe5b0490508091505b5092915050565b60e0604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250905600a165627a7a723058205075ca9172c7a95c8731702b65656f3faf7424d36ac456971ce52e6901e58e250029000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498",
  "constructorArguments": "000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498"
}