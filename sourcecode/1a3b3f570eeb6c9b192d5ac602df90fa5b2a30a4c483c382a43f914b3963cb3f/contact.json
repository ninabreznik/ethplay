{
  "address": "0x89d4653d8a7017664a2309e69cb31f2ee8d6d924",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Nemira",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity ^0.4.19;\n\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n}\n\ncontract ERC20 {\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function ERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n        name = tokenName;                                       // Set the name for display purposes\n        symbol = tokenSymbol;                                   // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n}\n\n/******************************************/\n/*       NMR TOKEN STARTS HERE       */\n/******************************************/\n\ncontract Nemira is ERC20 {\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Nemira() ERC20(50000000, \"Nemira\", \"NMR\") public {}\n\n\n    function multisend(address[] dests, uint256[] values) public returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n           transfer(dests[i], values[i]);\n           i += 1;\n        }\n        return(i);\n    }\n    \n}",
  "bytecode": "60606040526002805460ff19166012179055341561001c57600080fd5b6302faf080604080519081016040908152600682527f4e656d697261000000000000000000000000000000000000000000000000000060208301528051908101604090815260038083527f4e4d52000000000000000000000000000000000000000000000000000000000060208085019190915260025460ff16600a0a860291829055600160a060020a03331660009081526004909152918220558280516100c89291602001906100e5565b5060018180516100dc9291602001906100e5565b50505050610180565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012657805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610153578251825591602001919060010190610138565b5061015f929150610163565b5090565b61017d91905b8082111561015f5760008155600101610169565b90565b6108098061018f6000396000f3006060604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017357806323b872dd14610198578063313ce567146101c057806370a08231146101e957806395d89b4114610208578063a9059cbb1461021b578063aad41a411461023f578063cae9ca51146102ce578063dd62ed3e14610333575b600080fd5b34156100be57600080fd5b6100c6610358565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101025780820151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014857600080fd5b61015f600160a060020a03600435166024356103f6565b604051901515815260200160405180910390f35b341561017e57600080fd5b610186610426565b60405190815260200160405180910390f35b34156101a357600080fd5b61015f600160a060020a036004358116906024351660443561042c565b34156101cb57600080fd5b6101d36104a3565b60405160ff909116815260200160405180910390f35b34156101f457600080fd5b610186600160a060020a03600435166104ac565b341561021357600080fd5b6100c66104be565b341561022657600080fd5b61023d600160a060020a0360043516602435610529565b005b341561024a57600080fd5b61018660046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061053895505050505050565b34156102d957600080fd5b61015f60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061058895505050505050565b341561033e57600080fd5b610186600160a060020a03600435811690602435166106ba565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b505050505081565b600160a060020a033381166000908152600560209081526040808320938616835292905220819055600192915050565b60035481565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205482111561046157600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220805483900390556104998484846106d7565b5060019392505050565b60025460ff1681565b60046020526000908152604090205481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ee5780601f106103c3576101008083540402835291602001916103ee565b6105343383836106d7565b5050565b6000805b83518110156105815761057984828151811061055457fe5b9060200190602002015184838151811061056a57fe5b90602001906020020151610529565b60010161053c565b9392505050565b60008361059581856103f6565b156106b25780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561064b578082015183820152602001610633565b50505050905090810190601f1680156106785780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561069957600080fd5b6102c65a03f115156106aa57600080fd5b505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156106ee57600080fd5b600160a060020a0384166000908152600460205260409020548290101561071457600080fd5b600160a060020a0383166000908152600460205260409020548281011161073a57600080fd5b50600160a060020a0380831660008181526004602052604080822080549488168084528284208054888103909155938590528154870190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a038084166000908152600460205260408082205492871682529020540181146107d757fe5b505050505600a165627a7a7230582028df828c3c0ab6a59ebe389cd07fd8d0898ccde9a5d1e8499ec7a183b0ead16d0029"
}