{
  "address": "0xcb088fa36bb62a26cac6ecd45f5efe437fa105d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FB",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-28\n*/\n\npragma solidity ^0.4.16;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract owned {\n    address public owner;\n    mapping (address => bool) public owners;\n    \n    constructor() public {\n        owner = msg.sender;\n        owners[msg.sender] = true;\n    }\n    \n    modifier zeus {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier athena {\n        require(owners[msg.sender] == true);\n        _;\n    }\n\n    function addOwner(address _newOwner) zeus public {\n        owners[_newOwner] = true;\n    }\n    \n    function removeOwner(address _oldOwner) zeus public {\n        owners[_oldOwner] = false;\n    }\n    \n    function transferOwnership(address newOwner) public zeus {\n        owner = newOwner;\n        owners[newOwner] = true;\n        owners[owner] = false;\n    }\n}\n\ncontract ContractConn {\n    function transfer(address _to, uint _value) public;\n}\n\ncontract FB is owned{\n    \n    using SafeMath for uint256;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;  \n    uint256 public totalSupply;\n\n    uint256 private constant DAY30 = 2592000;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => uint256) private lockType;\n    mapping (address => uint256) private freezeTotal;\n    mapping (address => uint256) private freezeBalance;\n    mapping (address => uint256) private startReleaseTime;\n    mapping (address => uint256) private endLockTime;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n    constructor() public {\n        totalSupply = 1000000000 * 10 ** uint256(decimals);  \n        balanceOf[msg.sender] = totalSupply;                \n        name = \"Five Blessings\";                                   \n        symbol = \"FB\";                               \n    }\n\n    \n    function _transfer(address _from, address _to, uint _value) internal {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n\t\tif(freezeBalance[_from] > 0){\n\t\t\tif(now >= endLockTime[_from]){\n\t\t\t\tdelete freezeBalance[_from];\n\t\t\t}else if(now >= startReleaseTime[_from]){\n\t\t\t\tuint256 locks;\n\t\t\t\tif(lockType[_from] == 1){\n\t\t\t\t\tlocks = (now - startReleaseTime[_from]) / DAY30 * 1;\n\t\t\t\t\tfreezeBalance[_from] = freezeTotal[_from] * (12 - locks) / 12;\n\t\t\t\t}else if(lockType[_from] == 2){\n\t\t\t\t\tlocks = (now - startReleaseTime[_from]) / DAY30 * 20;\n\t\t\t\t\tfreezeBalance[_from] = freezeTotal[_from] * (100 - locks) / 100;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(_value <= balanceOf[_from] - freezeBalance[_from]);\n\t\t}\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool){\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowance[_from][msg.sender]);     \n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(balanceOf[msg.sender] >= _value);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender,_spender,_value);\n        return true;\n    }\n    \n    function lock (uint256 _type, address _to, uint256 _value) public athena {\n        require(lockType[_to] == 0, \"Each address can only be locked once and only accepts one lock mode.\");\n        lockType[_to] = _type;\n        freezeTotal[_to] = _value;\n        startReleaseTime[_to] = DAY30 * 11 + now;\n        if (_type == 1) {\n            freezeBalance[_to] = freezeTotal[_to].mul(12).div(12);\n            endLockTime[_to] =  DAY30 * 12 + startReleaseTime[_to];\n        } else if (_type == 2) {\n            freezeBalance[_to] = freezeTotal[_to].mul(100).div(100);\n            endLockTime[_to] =  DAY30 * 5 + startReleaseTime[_to];\n        }\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    function extract(address _tokenAddr,address _to,uint256 _value) public athena{\n       ContractConn conn = ContractConn(_tokenAddr);\n       conn.transfer(_to,_value);\n    }\n  \n    function extractEth(uint256 _value) athena public{\n       msg.sender.transfer(_value);\n    }\n \n}",
  "bytecode": "60806040526004805460ff1916601217905534801561001d57600080fd5b506000805433600160a060020a0319909116811782558152600160208181526040808420805460ff191690931790925560045460ff16600a0a633b9aca000260058190556006825292829020929092558051808201909152600e8082527f4669766520426c657373696e6773000000000000000000000000000000000000919092019081526100af91600291906100fa565b506040805180820190915260028082527f464200000000000000000000000000000000000000000000000000000000000060209092019182526100f4916003916100fa565b50610195565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013b57805160ff1916838001178555610168565b82800160010185558215610168579182015b8281111561016857825182559160200191906001019061014d565b50610174929150610178565b5090565b61019291905b80821115610174576000815560010161017e565b90565b610d9c806101a46000396000f3006080604052600436106100f05763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a781146100f557806306fdde031461012a578063095ea7b3146101b4578063173825d9146101d857806318160ddd146101fb57806323b872dd146102225780632991835f1461024c578063313ce567146102765780637065cb48146102a157806370a08231146102c25780638da5cb5b146102e357806395d89b4114610314578063a9059cbb14610329578063c3bf504a1461034d578063cf27cfc414610365578063dd62ed3e1461038c578063f2fde38b146103b3575b600080fd5b34801561010157600080fd5b50610116600160a060020a03600435166103d4565b604080519115158252519081900360200190f35b34801561013657600080fd5b5061013f6103e9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610179578181015183820152602001610161565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c057600080fd5b50610116600160a060020a0360043516602435610474565b3480156101e457600080fd5b506101f9600160a060020a03600435166104f7565b005b34801561020757600080fd5b5061021061052f565b60408051918252519081900360200190f35b34801561022e57600080fd5b50610116600160a060020a0360043581169060243516604435610535565b34801561025857600080fd5b506101f9600160a060020a03600435811690602435166044356105d2565b34801561028257600080fd5b5061028b61067d565b6040805160ff9092168252519081900360200190f35b3480156102ad57600080fd5b506101f9600160a060020a0360043516610686565b3480156102ce57600080fd5b50610210600160a060020a03600435166106c4565b3480156102ef57600080fd5b506102f86106d6565b60408051600160a060020a039092168252519081900360200190f35b34801561032057600080fd5b5061013f6106e5565b34801561033557600080fd5b50610116600160a060020a0360043516602435610740565b34801561035957600080fd5b506101f9600435610756565b34801561037157600080fd5b506101f9600435600160a060020a03602435166044356107a9565b34801561039857600080fd5b50610210600160a060020a03600435811690602435166109da565b3480156103bf57600080fd5b506101f9600160a060020a03600435166109f7565b60016020526000908152604090205460ff1681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b505050505081565b3360009081526006602052604081205482111561049057600080fd5b336000818152600760209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600054600160a060020a0316331461050e57600080fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b60055481565b600160a060020a038316600090815260076020908152604080832033845290915281205482111561056557600080fd5b600160a060020a0384166000908152600760209081526040808320338452909152902054610599908363ffffffff610a6716565b600160a060020a03851660009081526007602090815260408083203384529091529020556105c8848484610a79565b5060019392505050565b33600090815260016020819052604082205460ff161515146105f357600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb91604480830192600092919082900301818387803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b5050505050505050565b60045460ff1681565b600054600160a060020a0316331461069d57600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b60066020526000908152604090205481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046c5780601f106104415761010080835404028352916020019161046c565b600061074d338484610a79565b50600192915050565b3360009081526001602081905260409091205460ff1615151461077857600080fd5b604051339082156108fc029083906000818181858888f193505050501580156107a5573d6000803e3d6000fd5b5050565b3360009081526001602081905260409091205460ff161515146107cb57600080fd5b600160a060020a0382166000908152600860205260409020541561089d57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f4561636820616464726573732063616e206f6e6c79206265206c6f636b656420908201527f6f6e636520616e64206f6e6c792061636365707473206f6e65206c6f636b206d60648201527f6f64652e00000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600160a060020a038216600090815260086020908152604080832086905560098252808320849055600b90915290206301b30f0042019055600183141561095857600160a060020a03821660009081526009602052604090205461091a90600c9061090e908263ffffffff610d1416565b9063ffffffff610d4a16565b600160a060020a0383166000908152600a6020908152604080832093909355600b815282822054600c9091529190206301da9c0090910190556109ca565b82600214156109ca57600160a060020a0382166000908152600960205260409020546109919060649061090e908263ffffffff610d1416565b600160a060020a0383166000908152600a6020908152604080832093909355600b815282822054600c90915291902062c5c10090910190555b6109d5338383610a79565b505050565b600760209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610a0e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392831690811782558152600160208190526040808320805460ff1990811690931790558254909316825291902080549091169055565b600082821115610a7357fe5b50900390565b600160a060020a038316600090815260066020526040812054821115610a9e57600080fd5b600160a060020a038316600090815260066020526040902054610ac7818463ffffffff610d6116565b11610ad157600080fd5b600160a060020a0384166000908152600a60205260408120541115610c5957600160a060020a0384166000908152600c60205260409020544210610b2d57600160a060020a0384166000908152600a6020526040812055610c27565b600160a060020a0384166000908152600b60205260409020544210610c2757600160a060020a03841660009081526008602052604090205460011415610bba5750600160a060020a0383166000908152600b60209081526040808320546009835281842054600a9093529220600c62278d0042949094039390930480840390920292909204909155610c27565b600160a060020a03841660009081526008602052604090205460021415610c275750600160a060020a0383166000908152600b60209081526040808320546009835281842054600a9093529220606462278d00429490940393909304601402808403909202929092049091555b600160a060020a0384166000908152600a602090815260408083205460069092529091205403821115610c5957600080fd5b600160a060020a038416600090815260066020526040902054610c82908363ffffffff610a6716565b600160a060020a038086166000908152600660205260408082209390935590851681522054610cb7908363ffffffff610d6116565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505050565b600080831515610d275760009150610d43565b50828202828482811515610d3757fe5b0414610d3f57fe5b8091505b5092915050565b6000808284811515610d5857fe5b04949350505050565b600082820183811015610d3f57fe00a165627a7a723058200332bed462579b8f15c8a77d79061c30c8f6c2ec4b30d7acda44e2f9580ac0e10029"
}