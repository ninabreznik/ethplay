{
  "address": "0x62bf50192b3ef428e24bc8d10f0c2a6eabe80e08",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20CrowdsaleToken",
  "compilerVersion": "v0.4.25-nightly.2018.8.16+commit.a9e7ae29",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-27\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original \"owner\" of the contract to the sender\n   * account.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  \n  modifier onlyPayloadSize(uint numwords) {\n      assert(msg.data.length >= numwords * 32 + 4);\n      _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n}\n\ncontract Token is BurnableToken, Ownable {\n\n    string public constant name = \"BITSIFU COIN\";\n    string public constant symbol = \"BSF\";\n    uint public constant decimals = 18;\n    // there is no problem in using * here instead of .mul()\n    uint256 public constant initialSupply = 50000000 * (10 ** uint256(decimals));\n\n    // Constructors\n    constructor () public {\n        totalSupply = initialSupply;\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\n        emit Transfer(address(0x0), owner, initialSupply);\n    }\n\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded \n to a wallet\n * as they arrive.\n */\ninterface token { function transfer(address receiver, uint amount) external; }\ncontract ERC20CrowdsaleToken is Token {\n  using SafeMath for uint256;\n\n  uint256 public price = 3000;\n\n  token tokenReward;\n\n\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  constructor () public {\n\n    tokenReward = token(address(this));\n  }\n\n  bool public started = true;\n\n  function startSale() onlyOwner public {\n\n    started = true;\n  }\n\n  function stopSale() onlyOwner public {\n\n    started = false;\n  }\n\n  function setPrice(uint256 _price) onlyOwner public {\n\n    price = _price;\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable external {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable public {\n    require(beneficiary != address(0x0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be sent\n    uint256 tokens = (weiAmount/10**(18-decimals)) * price; //weiamount * price \n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    tokenReward.transfer(beneficiary, tokens);\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    owner.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = started;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  function withdrawTokens(uint256 _amount) onlyOwner public {\n    tokenReward.transfer(owner,_amount);\n  }\n}",
  "bytecode": "6080604052610bb86004556007805460ff1916600117905534801561002357600080fd5b5060038054600160a060020a0319163390811782556a295be96e640669720000006000818155918252600160209081526040808420839055935484519283529351600160a060020a0394909416937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a360058054600160a060020a03191630179055610ec4806100bc6000396000f3fe6080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013d578063095ea7b3146101c757806318160ddd146102145780631f2698ab1461023b57806323b872dd14610250578063313ce56714610293578063315a095d146102a8578063378dc3dc146102d25780634042b66f146102e757806342966c68146102fc578063661884631461032657806370a082311461035f5780638da5cb5b1461039257806391b7f5ed146103c357806395d89b41146103ed578063a035b1fe14610402578063a9059cbb14610417578063b66a0e5d14610450578063d73dd62314610465578063dd62ed3e1461049e578063e36b0b37146104d9578063ec8ac4d8146104ee578063f2fde38b14610514575b61013b33610547565b005b34801561014957600080fd5b50610152610668565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018c578181015183820152602001610174565b50505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d357600080fd5b50610200600480360360408110156101ea57600080fd5b50600160a060020a03813516906020013561069f565b604080519115158252519081900360200190f35b34801561022057600080fd5b50610229610716565b60408051918252519081900360200190f35b34801561024757600080fd5b5061020061071c565b34801561025c57600080fd5b506102006004803603606081101561027357600080fd5b50600160a060020a03813581169160208101359091169060400135610725565b34801561029f57600080fd5b50610229610853565b3480156102b457600080fd5b5061013b600480360360208110156102cb57600080fd5b5035610858565b3480156102de57600080fd5b506102296108fb565b3480156102f357600080fd5b5061022961090a565b34801561030857600080fd5b5061013b6004803603602081101561031f57600080fd5b5035610910565b34801561033257600080fd5b506102006004803603604081101561034957600080fd5b50600160a060020a038135169060200135610a0d565b34801561036b57600080fd5b506102296004803603602081101561038257600080fd5b5035600160a060020a0316610b0d565b34801561039e57600080fd5b506103a7610b28565b60408051600160a060020a039092168252519081900360200190f35b3480156103cf57600080fd5b5061013b600480360360208110156103e657600080fd5b5035610b37565b3480156103f957600080fd5b50610152610b53565b34801561040e57600080fd5b50610229610b8a565b34801561042357600080fd5b506102006004803603604081101561043a57600080fd5b50600160a060020a038135169060200135610b90565b34801561045c57600080fd5b5061013b610c65565b34801561047157600080fd5b506102006004803603604081101561048857600080fd5b50600160a060020a038135169060200135610c8b565b3480156104aa57600080fd5b50610229600480360360408110156104c157600080fd5b50600160a060020a0381358116916020013516610d34565b3480156104e557600080fd5b5061013b610d5f565b61013b6004803603602081101561050457600080fd5b5035600160a060020a0316610547565b34801561052057600080fd5b5061013b6004803603602081101561053757600080fd5b5035600160a060020a0316610d82565b600160a060020a038116151561055c57600080fd5b610564610e17565b151561056f57600080fd5b600454600654349182029061058a908363ffffffff610e3416565b600655600554604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018590529151919092169163a9059cbb91604480830192600092919082900301818387803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b505060408051858152602081018590528151600160a060020a03881694503393507f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929181900390910190a3610663610e4a565b505050565b60408051808201909152600c81527f4249545349465520434f494e0000000000000000000000000000000000000000602082015281565b6000600260443610156106ae57fe5b336000818152600260209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60005481565b60075460ff1681565b60006003606436101561073457fe5b600160a060020a038416151561074957600080fd5b600160a060020a03851660008181526002602090815260408083203384528252808320549383526001909152902054610788908563ffffffff610e8616565b600160a060020a0380881660009081526001602052604080822093909355908716815220546107bd908563ffffffff610e3416565b600160a060020a0386166000908152600160205260409020556107e6818563ffffffff610e8616565b600160a060020a03808816600081815260026020908152604080832033845282529182902094909455805188815290519289169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600195945050505050565b601281565b600354600160a060020a0316331461086f57600080fd5b600554600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163a9059cbb91604480830192600092919082900301818387803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b5050505050565b6a295be96e6406697200000081565b60065481565b6000811161091d57600080fd5b3360009081526001602052604090205481111561093957600080fd5b33600081815260016020526040902054610959908363ffffffff610e8616565b600160a060020a03821660009081526001602052604081209190915554610986908363ffffffff610e8616565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600060026044361015610a1c57fe5b336000908152600260209081526040808320600160a060020a038816845290915290205480841115610a7157336000908152600260209081526040808320600160a060020a0389168452909152812055610aa6565b610a81818563ffffffff610e8616565b336000908152600260209081526040808320600160a060020a038a1684529091529020555b336000818152600260209081526040808320600160a060020a038a168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3506001949350505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b600354600160a060020a03163314610b4e57600080fd5b600455565b60408051808201909152600381527f4253460000000000000000000000000000000000000000000000000000000000602082015281565b60045481565b600060026044361015610b9f57fe5b600160a060020a0384161515610bb457600080fd5b33600090815260016020526040902054610bd4908463ffffffff610e8616565b3360009081526001602052604080822092909255600160a060020a03861681522054610c06908463ffffffff610e3416565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600354600160a060020a03163314610c7c57600080fd5b6007805460ff19166001179055565b600060026044361015610c9a57fe5b336000908152600260209081526040808320600160a060020a0388168452909152902054610cce908463ffffffff610e3416565b336000818152600260209081526040808320600160a060020a038a168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a35060019392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610d7657600080fd5b6007805460ff19169055565b600354600160a060020a03163314610d9957600080fd5b600160a060020a0381161515610dae57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075460009060ff16341515818015610e2d5750805b9250505090565b600082820183811015610e4357fe5b9392505050565b600354604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610e83573d6000803e3d6000fd5b50565b600082821115610e9257fe5b5090039056fea165627a7a723058206ddd8a1a7fa515a2a02e9fc30e63496c1b66ee2b33b5e587fdada5fc41095b080029"
}