{
  "address": "0xc4581e49d306f4df9e672ac9b31a7b2da5fe1d5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LowcarbonToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-23\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// 低碳未来Token\n// Symbol      : LCT\n// Name        : Lowcarbon Token\n// Total supply: 1000000000   初始发行10亿，最大不超过110亿，剩余100亿通过增加接口增发（挖矿）。\n// Decimals    : 1  1位小数位\n// ----------------------------------------------------------------------------\ncontract LowcarbonToken is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply; //总供应量\n    uint public hourlyProduction; //每小时产量\n    uint public accumulatedHours; //累计小时数\n    uint public last_mint; //上次挖矿时间\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Mint(address indexed to, uint256 amount);\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function LowcarbonToken() public {\n        symbol = \"LCT\";\n        name = \"Low Carbon Token\";\n        decimals = 1;\n        last_mint = 0;\n        hourlyProduction = 114155; //放大10倍值\n        accumulatedHours = 0;\n        _totalSupply = 1000000000 * 10**uint(decimals); //初始发行\n        balances[owner] = _totalSupply;\n        Transfer(address(0), owner, _totalSupply);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n   * @dev Function to mint tokens\n   * @return A boolean that indicates if the operation was successful.\n   */\n    function mint() onlyOwner public returns (bool) {\n        if(last_mint == 0){  //首次调用，不挖矿\n            last_mint = now;\n            return true;\n        }\n\n        if(hourlyProduction < 1){\n            revert(); //每小时产值小0.1不能再发行\n        }\n        uint diffHours = (now - last_mint)/3600; //计算小时数\n        if(diffHours == 0){\n            revert(); //小于1小时不能挖矿\n        }\n        \n        uint _amount;\n        if((accumulatedHours + diffHours) > 8760 ){\n            _amount = hourlyProduction * (8760 - accumulatedHours);  //调整前部分产值计算\n            hourlyProduction = hourlyProduction*9/10; //调整生产率\n            accumulatedHours = accumulatedHours + diffHours - 8760; //初始化累计值\n            _amount += hourlyProduction*accumulatedHours;  //调整后部分产值计算\n        }\n        else{\n            _amount = hourlyProduction * diffHours;\n            accumulatedHours += diffHours; //增加累计小时数\n        }\n        _totalSupply = _totalSupply.add(_amount);\n        balances[owner] = balances[owner].add(_amount);\n        last_mint = now;\n        Mint(owner, _amount);\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600381527f4c435400000000000000000000000000000000000000000000000000000000006020820152600290805161007192916020019061014a565b5060408051908101604052601081527f4c6f7720436172626f6e20546f6b656e00000000000000000000000000000000602082015260039080516100b992916020019061014a565b5060048054600160ff199091161790819055600060088190556201bdeb600655600781905560ff909116600a0a633b9aca000260058190558154600160a060020a03908116835260096020526040808420839055835490911692917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a36101e5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018b57805160ff19168380011785556101b8565b828001600101855582156101b8579182015b828111156101b857825182559160200191906001019061019d565b506101c49291506101c8565b5090565b6101e291905b808211156101c457600081556001016101ce565b90565b610add806101f46000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b3146101955780631249c58b146101cb57806318160ddd146101de57806323b872dd14610203578063297398b51461022b578063313ce5671461023e5780633eaaf86b1461026757806366f7d9da1461027a57806370a082311461028d57806379ba5097146102ac5780638da5cb5b146102c157806395d89b41146102f0578063a9059cbb14610303578063d4ee1d9014610325578063dc39d06d14610338578063dd62ed3e1461035a578063eb7a72411461037f578063f2fde38b14610392575b600080fd5b341561011657600080fd5b61011e6103b1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015a578082015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a057600080fd5b6101b7600160a060020a036004351660243561044f565b604051901515815260200160405180910390f35b34156101d657600080fd5b6101b76104bc565b34156101e957600080fd5b6101f1610614565b60405190815260200160405180910390f35b341561020e57600080fd5b6101b7600160a060020a0360043581169060243516604435610646565b341561023657600080fd5b6101f1610759565b341561024957600080fd5b61025161075f565b60405160ff909116815260200160405180910390f35b341561027257600080fd5b6101f1610768565b341561028557600080fd5b6101f161076e565b341561029857600080fd5b6101f1600160a060020a0360043516610774565b34156102b757600080fd5b6102bf61078f565b005b34156102cc57600080fd5b6102d461081d565b604051600160a060020a03909116815260200160405180910390f35b34156102fb57600080fd5b61011e61082c565b341561030e57600080fd5b6101b7600160a060020a0360043516602435610897565b341561033057600080fd5b6102d4610956565b341561034357600080fd5b6101b7600160a060020a0360043516602435610965565b341561036557600080fd5b6101f1600160a060020a0360043581169060243516610a11565b341561038a57600080fd5b6101f1610a3c565b341561039d57600080fd5b6102bf600160a060020a0360043516610a42565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104475780601f1061041c57610100808354040283529160200191610447565b820191906000526020600020905b81548152906001019060200180831161042a57829003601f168201915b505050505081565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600080548190819033600160a060020a039081169116146104dc57600080fd5b60085415156104f257426008556001925061060f565b6001600654101561050257600080fd5b600854610e1090420304915081151561051a57600080fd5b612238826007540111156105625760075461223803600654029050600a60065460090281151561054657fe5b0460068190556007805484016122371901908190550201610571565b50600654600780548301905581025b600554610584908263ffffffff610a8c16565b60055560008054600160a060020a03168152600960205260409020546105b0908263ffffffff610a8c16565b60008054600160a060020a039081168252600960205260408083209390935542600855905416907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600192505b505090565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546005540390565b600160a060020a03831660009081526009602052604081205461066f908363ffffffff610a9c16565b600160a060020a03808616600090815260096020908152604080832094909455600a81528382203390931682529190915220546106b2908363ffffffff610a9c16565b600160a060020a038086166000908152600a6020908152604080832033851684528252808320949094559186168152600990915220546106f8908363ffffffff610a8c16565b600160a060020a03808516600081815260096020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60065481565b60045460ff1681565b60055481565b60075481565b600160a060020a031660009081526009602052604090205490565b60015433600160a060020a039081169116146107aa57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104475780601f1061041c57610100808354040283529160200191610447565b600160a060020a0333166000908152600960205260408120546108c0908363ffffffff610a9c16565b600160a060020a0333811660009081526009602052604080822093909355908516815220546108f5908363ffffffff610a8c16565b600160a060020a0380851660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600154600160a060020a031681565b6000805433600160a060020a0390811691161461098157600080fd5b600054600160a060020a038085169163a9059cbb9116846040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109f457600080fd5b5af11515610a0157600080fd5b5050506040518051949350505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60085481565b60005433600160a060020a03908116911614610a5d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b818101828110156104b657600080fd5b600082821115610aab57600080fd5b509003905600a165627a7a72305820415db77b3e7351a2979a29c300e341f6c04977004f2bc8ae495f83df7d1826730029"
}