{
  "address": "0xe13735037b394b7b18fd469f71feaf3371c4a109",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TecoBuyBack",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-21\n*/\n\npragma solidity ^0.4.23;\n\ncontract TecoIco {\n    function bonusOf(address _owner) public view returns (uint256);\n}\n\ncontract TecoToken {\n    function balanceOf(address who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender) public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract TecoBuyBack is Ownable {\n    using SafeMath for uint256;\n\n    TecoIco public tecoIco;\n    TecoToken public tecoToken;\n\n    mapping(address => uint256) tokensBought;\n\n    uint256 public rate;\n    uint256 public numOrders;\n\n    enum OrderStatus {None, Pending, Payed, Deleted}\n\n    struct Order {\n        address investor;\n        uint amount;\n        OrderStatus status;\n    }\n\n    mapping(uint256 => Order) orders;\n\n    constructor(TecoIco _tecoIco, TecoToken _tecoToken) public{\n        require(_tecoIco != address(0));\n        require(_tecoToken != address(0));\n\n        tecoIco = _tecoIco;\n        tecoToken = _tecoToken;\n    }\n\n    function() external payable {}\n\n    function withdrawAllFunds()\n    public\n    onlyOwner\n    {\n        owner.transfer(address(this).balance);\n    }\n\n    function withdrawFunds(uint value)\n    public\n    onlyOwner\n    {\n        owner.transfer(value);\n    }\n\n    function availableBonuses(address investor) public view returns (uint256) {\n        if (tecoIco.bonusOf(investor) <= tokensBought[investor]) return 0;\n        return tecoIco.bonusOf(investor).sub(tokensBought[investor]);\n    }\n\n    function setRate(uint256 _rate)\n    public\n    onlyOwner\n    {\n        rate = _rate;\n    }\n\n    function createOrder(uint256 _amount)\n    public\n    returns (uint256)\n    {\n        require(availableBonuses(msg.sender) >= _amount);\n        require(tecoToken.allowance(msg.sender, address(this)) >= _amount);\n        orders[numOrders++] = Order(msg.sender, _amount, OrderStatus.Pending);\n        return numOrders - 1;\n    }\n\n    function calculateSum(uint256 amount)\n    public\n    view\n    returns (uint256)\n    {\n        return amount.div(rate);\n    }\n\n    function orderSum(uint256 orderId)\n    public\n    view\n    returns (uint256)\n    {\n        return calculateSum(orders[orderId].amount);\n    }\n\n    function payOrders(uint256 orderId_1, uint256 orderId_2, uint256 orderId_3, uint256 orderId_4, uint256 orderId_5)\n    public\n    onlyOwner\n    {\n        if (orderId_1 >= 0) payOrder(orderId_1);\n        if (orderId_2 >= 0) payOrder(orderId_2);\n        if (orderId_3 >= 0) payOrder(orderId_3);\n        if (orderId_4 >= 0) payOrder(orderId_4);\n        if (orderId_5 >= 0) payOrder(orderId_5);\n    }\n\n    function payOrder(uint256 orderId)\n    public\n    onlyOwner\n    {\n        require(address(this).balance >= orderSum(orderId));\n        require(orders[orderId].status == OrderStatus.Pending);\n\n        orders[orderId].status = OrderStatus.Payed;\n        orders[orderId].investor.transfer(orderSum(orderId));\n        tecoToken.transferFrom(orders[orderId].investor, owner, orders[orderId].amount);\n        tokensBought[orders[orderId].investor] += orders[orderId].amount;\n    }\n\n    function deleteOrder(uint256 orderId)\n    public\n    {\n        require(orders[orderId].investor == msg.sender || owner == msg.sender);\n        require(orders[orderId].status == OrderStatus.Pending);\n        orders[orderId].status = OrderStatus.Deleted;\n    }\n\n    function getOrderInvestor(uint256 orderId)\n    public\n    view\n    returns (address)\n    {\n        return orders[orderId].investor;\n    }\n\n    function getOrderAmount(uint256 orderId)\n    public\n    view\n    returns (uint256)\n    {\n        return orders[orderId].amount;\n    }\n\n    function getOrderStatus(uint256 orderId)\n    public\n    view\n    returns (OrderStatus)\n    {\n        return orders[orderId].status;\n    }\n\n    function getTokensBought(address investor)\n    public\n    view\n    returns (uint256)\n    {\n        return tokensBought[investor];\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516040806118fd8339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156100b957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100f557600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611775806101886000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306c6204a1461011f5780630fd3ea441461017657806311a00327146101b7578063155dd5ee146101e45780632a685d3c146102115780632c4e722e1461023e57806334fcf4371461026957806338bd37741461029657806345d53788146102ed57806345fa8aae1461031857806349649fbf146103675780635f8932ff1461037e57806367bb1fcf146103bf578063715018a61461040057806381ea8362146104175780638da5cb5b1461046e578063d74a375d146104c5578063daa5a7c61461051c578063e9ace53014610571578063f2fde38b146105de578063f8ad8cd714610621575b005b34801561012b57600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610662565b6040518082815260200191505060405180910390f35b34801561018257600080fd5b506101a1600480360381019080803590602001909291905050506108fd565b6040518082815260200191505060405180910390f35b3480156101c357600080fd5b506101e260048036038101908080359060200190929190505050610925565b005b3480156101f057600080fd5b5061020f60048036038101908080359060200190929190505050610a6f565b005b34801561021d57600080fd5b5061023c60048036038101908080359060200190929190505050610b35565b005b34801561024a57600080fd5b50610253610f01565b6040518082815260200191505060405180910390f35b34801561027557600080fd5b5061029460048036038101908080359060200190929190505050610f07565b005b3480156102a257600080fd5b506102ab610f6c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f957600080fd5b50610302610f92565b6040518082815260200191505060405180910390f35b34801561032457600080fd5b5061034360048036038101908080359060200190929190505050610f98565b6040518082600381111561035357fe5b60ff16815260200191505060405180910390f35b34801561037357600080fd5b5061037c610fc5565b005b34801561038a57600080fd5b506103a9600480360381019080803590602001909291905050506110a1565b6040518082815260200191505060405180910390f35b3480156103cb57600080fd5b506103ea600480360381019080803590602001909291905050506110bf565b6040518082815260200191505060405180910390f35b34801561040c57600080fd5b506104156110df565b005b34801561042357600080fd5b5061042c6111e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047a57600080fd5b50610483611207565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d157600080fd5b50610506600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061122c565b6040518082815260200191505060405180910390f35b34801561052857600080fd5b5061056f6004803603810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611275565b005b34801561057d57600080fd5b5061059c6004803603810190808035906020019092919050505061133b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ea57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061137b565b005b34801561062d57600080fd5b5061064c600480360381019080803590602001909291905050506113e2565b6040518082815260200191505060405180910390f35b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631283e328846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b505050506040513d602081101561078b57600080fd5b81019080805190602001909291905050501115156107ac57600090506108f8565b6108f5600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631283e328856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b505050506040513d60208110156108d657600080fd5b810190808051906020019092919050505061162090919063ffffffff16565b90505b919050565b600061091e60066000848152602001908152602001600020600101546110a1565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806109e157503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156109ec57600080fd5b600160038111156109f957fe5b6006600083815260200190815260200160002060020160009054906101000a900460ff166003811115610a2857fe5b141515610a3457600080fd5b60036006600083815260200190815260200160002060020160006101000a81548160ff02191690836003811115610a6757fe5b021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aca57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b31573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9057600080fd5b610b99816108fd565b3073ffffffffffffffffffffffffffffffffffffffff163110151515610bbe57600080fd5b60016003811115610bcb57fe5b6006600083815260200190815260200160002060020160009054906101000a900460ff166003811115610bfa57fe5b141515610c0657600080fd5b60026006600083815260200190815260200160002060020160006101000a81548160ff02191690836003811115610c3957fe5b02179055506006600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610c97836108fd565b9081150290604051600060405180830381858888f19350505050158015610cc2573d6000803e3d6000fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6006600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066000868152602001908152602001600020600101546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050506040513d6020811015610e5357600080fd5b8101908080519060200190929190505050506006600082815260200190815260200160002060010154600360006006600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6257600080fd5b8060048190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60006006600083815260200190815260200160002060020160009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561109e573d6000803e3d6000fd5b50565b60006110b86004548361163990919063ffffffff16565b9050919050565b600060066000838152602001908152602001600020600101549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112d057600080fd5b6000851015156112e4576112e385610b35565b5b6000841015156112f8576112f784610b35565b5b60008310151561130c5761130b83610b35565b5b6000821015156113205761131f82610b35565b5b6000811015156113345761133381610b35565b5b5050505050565b60006006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113d657600080fd5b6113df8161164f565b50565b6000816113ee33610662565b101515156113fb57600080fd5b81600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b81019080805190602001909291905050501015151561153557600080fd5b6060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016001600381111561157057fe5b815250600660006005600081548092919060010191905055815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561160b57fe5b02179055509050506001600554039050919050565b600082821115151561162e57fe5b818303905092915050565b6000818381151561164657fe5b04905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561168b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820cf930e592c16bf940944f7df43428f8d2fa3f8a557b69b9db6c58f1ea390ffd000290000000000000000000000001bb4df717e18a048d391d24e6dfbd67bb62a83ba000000000000000000000000870ad90317c09c0aa03d3bbd76a7a6eefda6f6ac",
  "constructorArguments": "0000000000000000000000001bb4df717e18a048d391d24e6dfbd67bb62a83ba000000000000000000000000870ad90317c09c0aa03d3bbd76a7a6eefda6f6ac"
}