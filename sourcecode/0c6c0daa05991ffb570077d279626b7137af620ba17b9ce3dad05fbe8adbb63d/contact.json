{
  "address": "0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GATS",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.5.1;\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     **/\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     **/\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    \n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     **/\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    /**\n     * @dev Adds two numbers, throws on overflow.\n     **/\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n **/\n \ncontract Ownable {\n    address payable public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n     **/\n   constructor() public {\n      owner = msg.sender;\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     **/\n    modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n    \n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     **/\n    function transferOwnership(address payable newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20Basic interface\n * @dev Basic ERC20 interface\n **/\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n **/\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n **/\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n    \n    /**\n     * @dev total number of tokens in existence\n     **/\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n    \n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     **/\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     **/\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n    mapping (address => mapping (address => uint256)) internal allowed;\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     **/\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n    \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     **/\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     **/\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     **/\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     **/\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n\n/**\n * @title Configurable\n * @dev Configurable varriables of the contract\n **/\ncontract Configurable {\n    uint256 public constant cap = 100000000*10**18;\n    uint256 public constant basePrice = 1000*10**18; // tokens per 1 ether\n    uint256 public tokensSold = 0;\n    \n    uint256 public constant tokenReserve = 100000000*10**18;\n    uint256 public remainingTokens = 0;\n}\n\n/**\n * @title CrowdsaleToken \n * @dev Contract to preform crowd sale with token\n **/\ncontract CrowdsaleToken is StandardToken, Configurable, Ownable {\n    /**\n     * @dev enum of current crowd sale state\n     **/\n     enum Stages {\n        none,\n        stoStart, \n        stoEnd\n    }\n    \n    Stages currentStage;\n  \n    /**\n     * @dev constructor of CrowdsaleToken\n     **/\n    constructor() public {\n        currentStage = Stages.none;\n        balances[owner] = balances[owner].add(tokenReserve);\n        totalSupply_ = totalSupply_.add(tokenReserve);\n        remainingTokens = cap;\n        emit Transfer(address(this), owner, tokenReserve);\n    }\n    \n    /**\n     * @dev fallback function to send ether to for Crowd sale\n     **/\n    function () external payable {\n        require(currentStage == Stages.stoStart);\n        require(msg.value > 0);\n        require(remainingTokens > 0);\n        \n        \n        uint256 weiAmount = msg.value; // Calculate tokens to sell\n        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\n        uint256 returnWei = 0;\n        \n        if(tokensSold.add(tokens) > cap){\n            uint256 newTokens = cap.sub(tokensSold);\n            uint256 newWei = newTokens.div(basePrice).mul(1 ether);\n            returnWei = weiAmount.sub(newWei);\n            weiAmount = newWei;\n            tokens = newTokens;\n        }\n        \n        tokensSold = tokensSold.add(tokens); // Increment raised amount\n        remainingTokens = cap.sub(tokensSold);\n        if(returnWei > 0){\n            msg.sender.transfer(returnWei);\n            emit Transfer(address(this), msg.sender, returnWei);\n        }\n        \n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        emit Transfer(address(this), msg.sender, tokens);\n        totalSupply_ = totalSupply_.add(tokens);\n        owner.transfer(weiAmount);// Send money to owner\n    }\n    \n\n    /**\n     * @dev startSto starts the public STO\n     **/\n    function startSto() public onlyOwner {\n        require(currentStage != Stages.stoEnd);\n        currentStage = Stages.stoStart;\n    }\n    \n\n    /**\n     * @dev endSto closes down the STO \n     **/\n    function endSto() internal {\n        currentStage = Stages.stoEnd;\n        // Transfer any remaining tokens\n        if(remainingTokens > 0)\n            balances[owner] = balances[owner].add(remainingTokens);\n        // transfer any remaining ETH balance in the contract to the owner\n        owner.transfer(address(this).balance); \n    }\n\n    /**\n     * @dev finalizeSto closes down the STO and sets needed variables\n     **/\n    function finalizeSto() public onlyOwner {\n        require(currentStage != Stages.stoEnd);\n        endSto();\n    }\n    \n}\n\n/**\n * @title GATS\n * @dev Contract to create the GATS Token\n **/\ncontract GATS is CrowdsaleToken {\n    string public constant name = \"GATS\";\n    string public constant symbol = \"GATS\";\n    uint32 public constant decimals = 18;\n}",
  "bytecode": "60806040526000600355600060045533600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff021916908360028111156200006f57fe5b0217905550620001026a52b7d2dcc80cd2e4000000600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002466401000000000262000b85179091906401000000009004565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001966a52b7d2dcc80cd2e4000000600154620002466401000000000262000b85179091906401000000009004565b6001819055506a52b7d2dcc80cd2e4000000600481905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6a52b7d2dcc80cd2e40000006040518082815260200191505060405180910390a362000263565b600081830190508281101515156200025a57fe5b80905092915050565b611d1e80620002736000396000f3fe60806040526004361061010c576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde03146104bf578063095ea7b31461054f57806318160ddd146105c257806323b872dd146105ed578063313ce56714610680578063355274ea146106b7578063518ab2a8146106e2578063661884631461070d57806370a08231146107805780638da5cb5b146107e5578063918b83261461083c57806395d89b4114610853578063a9059cbb146108e3578063bf58390314610956578063c7876ea414610981578063cbcb3171146109ac578063d73dd623146109d7578063dd62ed3e14610a4a578063dee3a22614610acf578063f2fde38b14610ae6575b6001600281111561011957fe5b600560149054906101000a900460ff16600281111561013457fe5b14151561014057600080fd5b60003411151561014f57600080fd5b600060045411151561016057600080fd5b6000349050600061019d670de0b6b3a764000061018f683635c9adc5dea0000085610b3790919063ffffffff16565b610b6f90919063ffffffff16565b905060008090506a52b7d2dcc80cd2e40000006101c583600354610b8590919063ffffffff16565b11156102475760006101ed6003546a52b7d2dcc80cd2e4000000610ba190919063ffffffff16565b90506000610227670de0b6b3a7640000610219683635c9adc5dea0000085610b6f90919063ffffffff16565b610b3790919063ffffffff16565b905061023c8186610ba190919063ffffffff16565b925080945081935050505b61025c82600354610b8590919063ffffffff16565b6003819055506102826003546a52b7d2dcc80cd2e4000000610ba190919063ffffffff16565b600481905550600081111561033e573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102d7573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b61038f826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b8590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a361044b82600154610b8590919063ffffffff16565b600181905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156104b9573d6000803e3d6000fd5b50505050005b3480156104cb57600080fd5b506104d4610bba565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105145780820151818401526020810190506104f9565b50505050905090810190601f1680156105415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055b57600080fd5b506105a86004803603604081101561057257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bf3565b604051808215151515815260200191505060405180910390f35b3480156105ce57600080fd5b506105d7610ce5565b6040518082815260200191505060405180910390f35b3480156105f957600080fd5b506106666004803603606081101561061057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cef565b604051808215151515815260200191505060405180910390f35b34801561068c57600080fd5b506106956110a9565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156106c357600080fd5b506106cc6110ae565b6040518082815260200191505060405180910390f35b3480156106ee57600080fd5b506106f76110bd565b6040518082815260200191505060405180910390f35b34801561071957600080fd5b506107666004803603604081101561073057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110c3565b604051808215151515815260200191505060405180910390f35b34801561078c57600080fd5b506107cf600480360360208110156107a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611354565b6040518082815260200191505060405180910390f35b3480156107f157600080fd5b506107fa61139c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561084857600080fd5b506108516113c2565b005b34801561085f57600080fd5b50610868611478565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108a857808201518184015260208101905061088d565b50505050905090810190601f1680156108d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108ef57600080fd5b5061093c6004803603604081101561090657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114b1565b604051808215151515815260200191505060405180910390f35b34801561096257600080fd5b5061096b6116d0565b6040518082815260200191505060405180910390f35b34801561098d57600080fd5b506109966116d6565b6040518082815260200191505060405180910390f35b3480156109b857600080fd5b506109c16116e3565b6040518082815260200191505060405180910390f35b3480156109e357600080fd5b50610a30600480360360408110156109fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116f2565b604051808215151515815260200191505060405180910390f35b348015610a5657600080fd5b50610ab960048036036040811015610a6d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118ee565b6040518082815260200191505060405180910390f35b348015610adb57600080fd5b50610ae4611975565b005b348015610af257600080fd5b50610b3560048036036020811015610b0957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a0f565b005b600080831415610b4a5760009050610b69565b8183029050818382811515610b5b57fe5b04141515610b6557fe5b8090505b92915050565b60008183811515610b7c57fe5b04905092915050565b60008183019050828110151515610b9857fe5b80905092915050565b6000828211151515610baf57fe5b818303905092915050565b6040805190810160405280600481526020017f474154530000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d2c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d7957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e0457600080fd5b610e55826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ee8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b8590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fb982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6a52b7d2dcc80cd2e400000081565b60035481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156111d4576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611268565b6111e78382610ba190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141e57600080fd5b60028081111561142a57fe5b600560149054906101000a900460ff16600281111561144557fe5b1415151561145257600080fd5b6001600560146101000a81548160ff0219169083600281111561147157fe5b0217905550565b6040805190810160405280600481526020017f474154530000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156114ee57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561153b57600080fd5b61158c826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b8590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60045481565b683635c9adc5dea0000081565b6a52b7d2dcc80cd2e400000081565b600061178382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b8590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d157600080fd5b6002808111156119dd57fe5b600560149054906101000a900460ff1660028111156119f857fe5b14151515611a0557600080fd5b611a0d611b67565b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a6b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611aa757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002600560146101000a81548160ff02191690836002811115611b8657fe5b021790555060006004541115611c7057611c0b600454600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b8590919063ffffffff16565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611cef573d6000803e3d6000fd5b5056fea165627a7a72305820005d27a06196434f3d05bdb627b07eff5bd81b725faf56270dddad8dca9c8c6d0029"
}