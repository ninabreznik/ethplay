{
  "address": "0x30008a3685f12b498d546bca7893449fa8bfb153",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nifty Football",
  "contractName": "NiftyFootballTradingCardEliteBlindPack",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-04\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/libs/Strings.sol\n\npragma solidity 0.5.0;\n\nlibrary Strings {\n\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/INiftyTradingCardCreator.sol\n\npragma solidity 0.5.0;\n\ninterface INiftyTradingCardCreator {\n    function mintCard(\n        uint256 _cardType,\n        uint256 _nationality,\n        uint256 _position,\n        uint256 _ethnicity,\n        uint256 _kit,\n        uint256 _colour,\n        address _to\n    ) external returns (uint256 _tokenId);\n\n    function setAttributes(\n        uint256 _tokenId,\n        uint256 _strength,\n        uint256 _speed,\n        uint256 _intelligence,\n        uint256 _skill\n    ) external returns (bool);\n\n    function setName(\n        uint256 _tokenId,\n        uint256 _firstName,\n        uint256 _lastName\n    ) external returns (bool);\n\n    function setAttributesAndName(\n        uint256 _tokenId,\n        uint256 _strength,\n        uint256 _speed,\n        uint256 _intelligence,\n        uint256 _skill,\n        uint256 _firstName,\n        uint256 _lastName\n    ) external returns (bool);\n}\n\n// File: contracts/generators/INiftyFootballTradingCardGenerator.sol\n\npragma solidity 0.5.0;\n\ncontract INiftyFootballTradingCardGenerator {\n    function generateCard(address _sender) external returns (uint256 _nationality, uint256 _position, uint256 _ethnicity, uint256 _kit, uint256 _colour);\n\n    function generateAttributes(address _sender, uint256 _base) external returns (uint256 strength, uint256 speed, uint256 intelligence, uint256 skill);\n\n    function generateName(address _sender) external returns (uint256 firstName, uint256 lastName);\n}\n\n// File: contracts/FundsSplitter.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract FundsSplitter is Ownable {\n    using SafeMath for uint256;\n\n    address payable public platform;\n    address payable public partner;\n\n    uint256 public partnerRate = 7;\n\n    constructor (address payable _platform, address payable _partner) public {\n        platform = _platform;\n        partner = _partner;\n    }\n\n    function splitFunds(uint256 _totalPrice) internal {\n        if (msg.value > 0) {\n            uint256 refund = msg.value.sub(_totalPrice);\n\n            // overpaid...\n            if (refund > 0) {\n                msg.sender.transfer(refund);\n            }\n\n            // work out the amount to split and send it\n            uint256 partnerAmount = _totalPrice.div(100).mul(partnerRate);\n            partner.transfer(partnerAmount);\n\n            // send remaining amount to partner wallet\n            uint256 remaining = _totalPrice.sub(partnerAmount);\n            platform.transfer(remaining);\n        }\n    }\n\n    function updatePartnerAddress(address payable _partner) onlyOwner public {\n        partner = _partner;\n    }\n\n    function updatePartnerRate(uint256 _techPartnerRate) onlyOwner public {\n        partnerRate = _techPartnerRate;\n    }\n\n    function updatePlatformAddress(address payable _platform) onlyOwner public {\n        platform = _platform;\n    }\n\n    function withdraw() public onlyOwner returns (bool) {\n        platform.transfer(address(this).balance);\n        return true;\n    }\n}\n\n// File: contracts/NiftyFootballTradingCardEliteBlindPack.sol\n\npragma solidity 0.5.0;\n\n\n\n\n\n\n\n\n\ncontract NiftyFootballTradingCardEliteBlindPack is Ownable, Pausable, FundsSplitter {\n    using SafeMath for uint256;\n\n    event PriceInWeiChanged(uint256 _old, uint256 _new);\n\n    event DefaultCardTypeChanged(uint256 _new);\n\n    event AttributesBaseChanged(uint256 _new);\n\n    event FutballCardsGeneratorChanged(INiftyFootballTradingCardGenerator _new);\n\n    INiftyFootballTradingCardGenerator public generator;\n    INiftyTradingCardCreator public creator;\n\n    uint256 public totalPurchasesInWei = 0;\n    uint256 public cardTypeDefault = 0;\n    uint256 public attributesBase = 60; // Standard 60-100\n\n    uint256[] public pricePerCard = [\n    // single cards\n    16000000000000000, // 1 @ = 0.016 ETH / $2.50\n    16000000000000000, // 2 @ = 0.016 ETH / $2.50\n\n    // 1 packs\n    14500000000000000, //  3 @ = 0.0145 ETH / $2.30\n    14500000000000000, //  4 @ = 0.0145 ETH / $2.30\n    14500000000000000, //  5 @ = 0.0145 ETH / $2.30\n\n    // 2 packs\n    13500000000000000, //  6 @ = 0.0135 ETH / $2.15\n    13500000000000000, //  7 @ = 0.0135 ETH / $2.15\n    13500000000000000, //  8 @ = 0.0135 ETH / $2.15\n\n    // 3 packs or more\n    12500000000000000, //  9 @ = 0.0125 ETH / $2\n    12500000000000000 //  10 @ = 0.0125 ETH / $2\n    ];\n\n    constructor (\n        address payable _wallet,\n        address payable _partnerAddress,\n        INiftyFootballTradingCardGenerator _generator,\n        INiftyTradingCardCreator _creator\n    ) public FundsSplitter(_wallet, _partnerAddress) {\n        generator = _generator;\n        creator = _creator;\n    }\n\n    function blindPack() whenNotPaused public payable {\n        blindPackTo(msg.sender);\n    }\n\n    function blindPackTo(address _to) whenNotPaused public payable {\n        uint256 _totalPrice = totalPrice(1);\n        require(\n            msg.value >= _totalPrice,\n            \"Must supply at least the required minimum purchase value\"\n        );\n        require(!isContract(msg.sender), \"Unable to buy packs from another contract\");\n\n        _generateAndAssignCard(_to);\n\n        _takePayment(1, _totalPrice);\n    }\n\n    function buyBatch(uint256 _numberOfCards) whenNotPaused public payable {\n        return buyBatchTo(msg.sender, _numberOfCards);\n    }\n\n    function buyBatchTo(address _to, uint256 _numberOfCards) whenNotPaused public payable {\n        uint256 _totalPrice = totalPrice(_numberOfCards);\n        require(\n            msg.value >= _totalPrice,\n            \"Must supply at least the required minimum purchase value\"\n        );\n        require(!isContract(msg.sender), \"Unable to buy packs from another contract\");\n\n        for (uint i = 0; i < _numberOfCards; i++) {\n            _generateAndAssignCard(_to);\n        }\n\n        _takePayment(_numberOfCards, _totalPrice);\n    }\n\n    function _generateAndAssignCard(address _to) internal {\n        // Generate card\n        (uint256 _nationality, uint256 _position, uint256 _ethnicity, uint256 _kit, uint256 _colour) = generator.generateCard(msg.sender);\n\n        // cardType is 0 for genesis (initially)\n        uint256 tokenId = creator.mintCard(cardTypeDefault, _nationality, _position, _ethnicity, _kit, _colour, _to);\n        \n        // Generate attributes\n        (uint256 _strength, uint256 _speed, uint256 _intelligence, uint256 _skill) = generator.generateAttributes(msg.sender, attributesBase);\n        (uint256 _firstName, uint256 _lastName) = generator.generateName(msg.sender);\n\n        creator.setAttributesAndName(tokenId, _strength, _speed, _intelligence, _skill, _firstName, _lastName);\n    }\n\n    function _takePayment(uint256 _numberOfCards, uint256 _totalPrice) internal {\n        // any trapped ether can be withdrawn with withdraw()\n        totalPurchasesInWei = totalPurchasesInWei.add(_totalPrice);\n        splitFunds(_totalPrice);\n    }\n\n    function setCardTypeDefault(uint256 _newDefaultCardType) public onlyOwner returns (bool) {\n        cardTypeDefault = _newDefaultCardType;\n\n        emit DefaultCardTypeChanged(_newDefaultCardType);\n\n        return true;\n    }\n\n    function setAttributesBase(uint256 _newAttributesBase) public onlyOwner returns (bool) {\n        attributesBase = _newAttributesBase;\n\n        emit AttributesBaseChanged(_newAttributesBase);\n\n        return true;\n    }\n\n    function setFutballCardsGenerator(INiftyFootballTradingCardGenerator _futballCardsGenerator) public onlyOwner returns (bool) {\n        generator = _futballCardsGenerator;\n\n        emit FutballCardsGeneratorChanged(_futballCardsGenerator);\n\n        return true;\n    }\n\n    function updatePricePerCardAtIndex(uint256 _index, uint256 _priceInWei) public onlyOwner returns (bool) {\n        pricePerCard[_index] = _priceInWei;\n        return true;\n    }\n\n    function updatePricePerCard(uint256[] memory _pricePerCard) public onlyOwner returns (bool) {\n        pricePerCard = _pricePerCard;\n        return true;\n    }\n\n    function totalPrice(uint256 _numberOfCards) public view returns (uint256) {\n        if (_numberOfCards > pricePerCard.length) {\n            return pricePerCard[pricePerCard.length - 1].mul(_numberOfCards);\n        }\n        return pricePerCard[_numberOfCards - 1].mul(_numberOfCards);\n    }\n\n    /**\n     * Returns whether the target address is a contract\n     * Based on OpenZeppelin Address library\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {size := extcodesize(account)}\n        return size > 0;\n    }\n}",
  "bytecode": "60076004819055600090819055600855603c6009556101c06040526638d7ea4c680000608081815260a091909152663383ac553e400060c081905260e081905261010052662ff62db077c00061012081905261014081905261016052662c68af0bb140006101808190526101a0526200007c90600a90816200026e565b503480156200008a57600080fd5b506040516080806200197583398101806040526080811015620000ac57600080fd5b50805160208201516040830151606090930151919290918383620000d93364010000000062000189810204565b60018054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001805460a060020a60ff021916905560028054600160a060020a0319908116600160a060020a0394851617909155600380548216928416929092179091556005805482169483169490941790935560068054909316911617905550620002e99050565b620001a460008264010000000062001564620001db82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620001f157600080fd5b62000206828264010000000062000236810204565b156200021157600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200024e57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054828255906000526020600020908101928215620002b7579160200282015b82811115620002b7578251829066ffffffffffffff169055916020019190600101906200028f565b50620002c5929150620002c9565b5090565b620002e691905b80821115620002c55760008155600101620002d0565b90565b61167c80620002f96000396000f3fe6080604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101a55780631184fc57146101d657806317a5e03f146101fe578063221f22851461023a57806335d16743146102645780633c31d958146102a25780633ccfd60b146102d55780633f4ba83a146102ea578063429618f2146102ff57806344a71fbb146103af57806346fbf68e146103e25780634bde38c8146104155780635c975abb1461042a5780635f1e98c71461043f57806369451b5b1461045457806369aa9b25146104695780636ef8d66d14610493578063715018a6146104a8578063746d1e57146104bd5780637afa1eed146104da57806382dc1ec4146104ef578063830b5089146105225780638456cb591461054e5780638da5cb5b146105635780638f32d59b146105785780638f9f193f1461058d57806396e7089d146105c0578063b7be867e146105d5578063be10862b146105ea578063d91b68ce146105ff578063f1db44e814610629578063f2fde38b14610631578063ff2b09bc14610664575b600080fd5b3480156101b157600080fd5b506101ba610694565b60408051600160a060020a039092168252519081900360200190f35b6101fc600480360360208110156101ec57600080fd5b5035600160a060020a03166106a3565b005b34801561020a57600080fd5b506102286004803603602081101561022157600080fd5b50356107e2565b60408051918252519081900360200190f35b34801561024657600080fd5b506102286004803603602081101561025d57600080fd5b5035610801565b34801561027057600080fd5b5061028e6004803603602081101561028757600080fd5b5035610864565b604080519115158252519081900360200190f35b3480156102ae57600080fd5b5061028e600480360360208110156102c557600080fd5b5035600160a060020a03166108b9565b3480156102e157600080fd5b5061028e610934565b3480156102f657600080fd5b506101fc61098c565b34801561030b57600080fd5b5061028e6004803603602081101561032257600080fd5b81019060208101813564010000000081111561033d57600080fd5b82018360208201111561034f57600080fd5b8035906020019184602083028401116401000000008311171561037157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a0b945050505050565b3480156103bb57600080fd5b506101fc600480360360208110156103d257600080fd5b5035600160a060020a0316610a3c565b3480156103ee57600080fd5b5061028e6004803603602081101561040557600080fd5b5035600160a060020a0316610a7e565b34801561042157600080fd5b506101ba610a90565b34801561043657600080fd5b5061028e610a9f565b34801561044b57600080fd5b50610228610aaf565b34801561046057600080fd5b50610228610ab5565b34801561047557600080fd5b506101fc6004803603602081101561048c57600080fd5b5035610abb565b34801561049f57600080fd5b506101fc610ad3565b3480156104b457600080fd5b506101fc610ade565b6101fc600480360360208110156104d357600080fd5b5035610b48565b3480156104e657600080fd5b506101ba610b6c565b3480156104fb57600080fd5b506101fc6004803603602081101561051257600080fd5b5035600160a060020a0316610b7b565b6101fc6004803603604081101561053857600080fd5b50600160a060020a038135169060200135610b98565b34801561055a57600080fd5b506101fc610cea565b34801561056f57600080fd5b506101ba610d6e565b34801561058457600080fd5b5061028e610d7d565b34801561059957600080fd5b506101fc600480360360208110156105b057600080fd5b5035600160a060020a0316610d8e565b3480156105cc57600080fd5b50610228610dd0565b3480156105e157600080fd5b50610228610dd6565b3480156105f657600080fd5b506101ba610ddc565b34801561060b57600080fd5b5061028e6004803603602081101561062257600080fd5b5035610deb565b6101fc610e40565b34801561063d57600080fd5b506101fc6004803603602081101561065457600080fd5b5035600160a060020a0316610e60565b34801561067057600080fd5b5061028e6004803603604081101561068757600080fd5b5080359060200135610e7c565b600654600160a060020a031681565b60015460a060020a900460ff16156106ba57600080fd5b60006106c66001610801565b905034811115610746576040805160e560020a62461bcd02815260206004820152603860248201527f4d75737420737570706c79206174206c6561737420746865207265717569726560448201527f64206d696e696d756d2070757263686173652076616c75650000000000000000606482015290519081900360840190fd5b61074f33610eb7565b156107ca576040805160e560020a62461bcd02815260206004820152602960248201527f556e61626c6520746f20627579207061636b732066726f6d20616e6f7468657260448201527f20636f6e74726163740000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6107d382610ebf565b6107de600182611264565b5050565b600a8054829081106107f057fe5b600091825260209091200154905081565b600a5460009082111561084657600a805461083f918491600019810190811061082657fe5b906000526020600020015461128390919063ffffffff16565b905061085f565b61085c82600a6001850381548110151561082657fe5b90505b919050565b600061086e610d7d565b151561087957600080fd5b60098290556040805183815290517f89bfb412bd3e31cdc80daa077c41c4b350394ce6b1df71df0757acb58709c25b9181900360200190a1506001919050565b60006108c3610d7d565b15156108ce57600080fd5b60058054600160a060020a03841673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f1621bff47ed50c9005e5edccf9340ce008500a12dc02e333c5db3890bea1ac4b9181900360200190a1506001919050565b600061093e610d7d565b151561094957600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610983573d6000803e3d6000fd5b50600190505b90565b61099533610a7e565b15156109a057600080fd5b60015460a060020a900460ff1615156109b857600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610a15610d7d565b1515610a2057600080fd5b8151610a3390600a9060208501906115eb565b50600192915050565b610a44610d7d565b1515610a4f57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061085c818363ffffffff6112b516565b600254600160a060020a031681565b60015460a060020a900460ff1690565b60075481565b60095481565b610ac3610d7d565b1515610ace57600080fd5b600455565b610adc336112ec565b565b610ae6610d7d565b1515610af157600080fd5b600154604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805473ffffffffffffffffffffffffffffffffffffffff19169055565b60015460a060020a900460ff1615610b5f57600080fd5b610b693382610b98565b50565b600554600160a060020a031681565b610b8433610a7e565b1515610b8f57600080fd5b610b6981611334565b60015460a060020a900460ff1615610baf57600080fd5b6000610bba82610801565b905034811115610c3a576040805160e560020a62461bcd02815260206004820152603860248201527f4d75737420737570706c79206174206c6561737420746865207265717569726560448201527f64206d696e696d756d2070757263686173652076616c75650000000000000000606482015290519081900360840190fd5b610c4333610eb7565b15610cbe576040805160e560020a62461bcd02815260206004820152602960248201527f556e61626c6520746f20627579207061636b732066726f6d20616e6f7468657260448201527f20636f6e74726163740000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60005b82811015610cda57610cd284610ebf565b600101610cc1565b50610ce58282611264565b505050565b610cf333610a7e565b1515610cfe57600080fd5b60015460a060020a900460ff1615610d1557600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600154600160a060020a031690565b600154600160a060020a0316331490565b610d96610d7d565b1515610da157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085481565b60045481565b600354600160a060020a031681565b6000610df5610d7d565b1515610e0057600080fd5b60088290556040805183815290517f75c6e6de0e60e7234e491208cf9d69acf42dfeecaa9e5ab98ddeabba591dd7569181900360200190a1506001919050565b60015460a060020a900460ff1615610e5757600080fd5b610adc336106a3565b610e68610d7d565b1515610e7357600080fd5b610b698161137c565b6000610e86610d7d565b1515610e9157600080fd5b81600a84815481101515610ea157fe5b6000918252602090912001555060015b92915050565b6000903b1190565b600554604080517ffaf74e0700000000000000000000000000000000000000000000000000000000815233600482015290516000928392839283928392600160a060020a039091169163faf74e079160248082019260a09290919082900301818787803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b505050506040513d60a0811015610f5957600080fd5b508051602080830151604080850151606086015160809096015160065460085484517f9b34918e00000000000000000000000000000000000000000000000000000000815260048101919091526024810188905260448101869052606481018490526084810189905260a48101839052600160a060020a038f811660c48301529451979d50949b509199509597509495506000941692639b34918e9260e48084019391929182900301818787803b15801561101357600080fd5b505af1158015611027573d6000803e3d6000fd5b505050506040513d602081101561103d57600080fd5b5051600554600954604080517fa56e9fd7000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251929350600092839283928392600160a060020a039092169163a56e9fd79160448082019260809290919082900301818787803b1580156110ba57600080fd5b505af11580156110ce573d6000803e3d6000fd5b505050506040513d60808110156110e457600080fd5b508051602082015160408084015160609094015160055482517f10ba885b0000000000000000000000000000000000000000000000000000000081523360048201528351959a5093985094965094506000938493600160a060020a03909116926310ba885b92602480830193919282900301818787803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b505050506040513d604081101561119157600080fd5b508051602091820151600654604080517f7c4c890e000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c9052604481018b9052606481018a90526084810189905260a4810185905260c481018490529051939650919450600160a060020a031692637c4c890e9260e4808401938290030181600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b505050505050505050505050505050565b600754611277908263ffffffff6113fa16565b6007556107de8161140c565b600082151561129457506000610eb1565b8282028284828115156112a357fe5b04146112ae57600080fd5b9392505050565b6000600160a060020a03821615156112cc57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6112fd60008263ffffffff61151816565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61134560008263ffffffff61156416565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561139157600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156112ae57600080fd5b6000341115610b69576000611427348363ffffffff6115b216565b9050600081111561146157604051339082156108fc029083906000818181858888f1935050505015801561145f573d6000803e3d6000fd5b505b6004546000906114889061147c85606463ffffffff6115c716565b9063ffffffff61128316565b600354604051919250600160a060020a03169082156108fc029083906000818181858888f193505050501580156114c3573d6000803e3d6000fd5b5060006114d6848363ffffffff6115b216565b600254604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015611511573d6000803e3d6000fd5b5050505050565b600160a060020a038116151561152d57600080fd5b61153782826112b5565b151561154257600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561157957600080fd5b61158382826112b5565b1561158d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828211156115c157600080fd5b50900390565b60008082116115d557600080fd5b600082848115156115e257fe5b04949350505050565b828054828255906000526020600020908101928215611626579160200282015b8281111561162657825182559160200191906001019061160b565b50611632929150611636565b5090565b61098991905b80821115611632576000815560010161163c56fea165627a7a72305820aff3f198bfb1b91ecd7867a3a2825c3af4606b6f3751c1abffbfa11500498f880029000000000000000000000000377a75c4ef92502fe40d2b454f0c3829b8c0ffc5000000000000000000000000ace0a8666953bf9e1fe1cc91abf5db5a1c57dd46000000000000000000000000a23cb096b4e9440cf391818bfbaa7508d93ad219000000000000000000000000bc5370374fe08d699cf7fcd2e625a93bf393ccc4",
  "constructorArguments": "000000000000000000000000377a75c4ef92502fe40d2b454f0c3829b8c0ffc5000000000000000000000000ace0a8666953bf9e1fe1cc91abf5db5a1c57dd46000000000000000000000000a23cb096b4e9440cf391818bfbaa7508d93ad219000000000000000000000000bc5370374fe08d699cf7fcd2e625a93bf393ccc4"
}