{
  "address": "0x9785abd9001d572b43992c8fe36c24ead353048b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INNBCAirdropDistribution",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity 0.4.24;\n\n\n\n/**\n * @title ERC20Token Interface\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ncontract ERC20Token {\n  function name() public view returns (string);\n  function symbol() public view returns (string);\n  function decimals() public view returns (uint);\n  function totalSupply() public view returns (uint);\n  function balanceOf(address account) public view returns (uint);\n  function transfer(address to, uint amount) public returns (bool);\n  function transferFrom(address from, address to, uint amount) public returns (bool);\n  function approve(address spender, uint amount) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\n/**\n * @title This contract handles the airdrop distribution\n */\ncontract INNBCAirdropDistribution is Ownable {\n  address public tokenINNBCAddress;\n\n  /**\n   * @dev Sets the address of the INNBC token\n   * @param tokenAddress The address of the INNBC token contract\n   */\n  function setINNBCTokenAddress(address tokenAddress) external onlyOwner() {\n    require(tokenAddress != address(0), \"Token address cannot be null\");\n\n    tokenINNBCAddress = tokenAddress;\n  }\n\n  /**\n   * @dev Batch transfers tokens from the owner account to the recipients\n   * @param recipients An array of the addresses of the recipients\n   * @param amountPerRecipient An array of amounts of tokens to give to each recipient\n   */\n  function airdropTokens(address[] recipients, uint[] amountPerRecipient) external onlyOwner() {\n    /* 100 recipients is the limit, otherwise we may reach the gas limit */\n    require(recipients.length <= 100, \"Recipients list is too long\");\n\n    /* Both arrays need to have the same length */\n    require(recipients.length == amountPerRecipient.length, \"Arrays do not have the same length\");\n\n    /* We check if the address of the token contract is set */\n    require(tokenINNBCAddress != address(0), \"INNBC token contract address cannot be null\");\n\n    ERC20Token tokenINNBC = ERC20Token(tokenINNBCAddress);\n\n    /* We check if the owner has enough tokens for everyone */\n    require(\n      calculateSum(amountPerRecipient) <= tokenINNBC.balanceOf(msg.sender),\n      \"Sender does not have enough tokens\"\n    );\n\n    /* We check if the contract is allowed to handle this amount */\n    require(\n      calculateSum(amountPerRecipient) <= tokenINNBC.allowance(msg.sender, address(this)),\n      \"This contract is not allowed to handle this amount\"\n    );\n\n    /* If everything is okay, we can transfer the tokens */\n    for (uint i = 0; i < recipients.length; i += 1) {\n      tokenINNBC.transferFrom(msg.sender, recipients[i], amountPerRecipient[i]);\n    }\n  }\n\n  /**\n   * @dev Calculates the sum of an array of uints\n   * @param a An array of uints\n   * @return The sum as an uint\n   */\n  function calculateSum(uint[] a) private pure returns (uint) {\n    uint sum;\n\n    for (uint i = 0; i < a.length; i = SafeMath.add(i, 1)) {\n      sum = SafeMath.add(sum, a[i]);\n    }\n\n    return sum;\n  }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556108ab806100256000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663706f6937811461007c578063715018a6146100aa5780638da5cb5b146100bf578063ad3335b5146100f0578063ae6f232914610111578063f2fde38b14610126575b600080fd5b34801561008857600080fd5b506100a86024600480358281019290820135918135918201910135610147565b005b3480156100b657600080fd5b506100a8610652565b3480156100cb57600080fd5b506100d46106be565b60408051600160a060020a039092168252519081900360200190f35b3480156100fc57600080fd5b506100a8600160a060020a03600435166106cd565b34801561011d57600080fd5b506100d4610773565b34801561013257600080fd5b506100a8600160a060020a0360043516610782565b600080548190600160a060020a0316331461016157600080fd5b60648511156101ba576040805160e560020a62461bcd02815260206004820152601b60248201527f526563697069656e7473206c69737420697320746f6f206c6f6e670000000000604482015290519081900360640190fd5b848314610237576040805160e560020a62461bcd02815260206004820152602260248201527f41727261797320646f206e6f742068617665207468652073616d65206c656e6760448201527f7468000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600160a060020a031615156102bf576040805160e560020a62461bcd02815260206004820152602b60248201527f494e4e424320746f6b656e20636f6e747261637420616464726573732063616e60448201527f6e6f74206265206e756c6c000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216935083916370a08231916024808201926020929091908290030181600087803b15801561032857600080fd5b505af115801561033c573d6000803e3d6000fd5b505050506040513d602081101561035257600080fd5b5051604080516020868102828101820190935286825261038792889188918291850190849080828437506107a5945050505050565b1115610403576040805160e560020a62461bcd02815260206004820152602260248201527f53656e64657220646f6573206e6f74206861766520656e6f75676820746f6b6560448201527f6e73000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600160a060020a0384169163dd62ed3e9160448083019260209291908290030181600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b505050506040513d602081101561049457600080fd5b505160408051602086810282810182019093528682526104c992889188918291850190849080828437506107a5945050505050565b1115610545576040805160e560020a62461bcd02815260206004820152603260248201527f5468697320636f6e7472616374206973206e6f7420616c6c6f77656420746f2060448201527f68616e646c65207468697320616d6f756e740000000000000000000000000000606482015290519081900360840190fd5b5060005b8481101561064a57600160a060020a0382166323b872dd3388888581811061056d57fe5b90506020020135600160a060020a0316878786818110151561058b57fe5b905060200201356040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b505050506040513d602081101561064057600080fd5b5050600101610549565b505050505050565b600054600160a060020a0316331461066957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a031633146106e457600080fd5b600160a060020a0381161515610744576040805160e560020a62461bcd02815260206004820152601c60248201527f546f6b656e20616464726573732063616e6e6f74206265206e756c6c00000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a031681565b600054600160a060020a0316331461079957600080fd5b6107a2816107ef565b50565b600080805b83518110156107e8576107d48285838151811015156107c557fe5b9060200190602002015161086c565b91506107e181600161086c565b90506107aa565b5092915050565b600160a060020a038116151561080457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8181018281101561087957fe5b929150505600a165627a7a7230582083a7474be63ab47bb95f0c279d83b543109a215c576c8c57c7381e9e8fe02c160029"
}