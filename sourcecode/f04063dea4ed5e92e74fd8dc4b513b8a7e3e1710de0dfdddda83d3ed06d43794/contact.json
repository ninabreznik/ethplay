{
  "address": "0x6443155463953ebd8f864d03c5ffde362cce4b01",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PositionTokenLogic",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\n/**\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n \npragma solidity 0.5.8;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title EIP20/ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract EIP20 is ERC20 {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n}\n\ncontract WETHInterface is EIP20 {\n    function deposit() external payable;\n    function withdraw(uint256 wad) external;\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Integer division of two numbers, rounding up and truncating the quotient\n  */\n  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    return ((_a - 1) / _b) + 1;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n  uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n  /// @dev Constant for locked guard state\n  uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\n    _;\n    reentrancyLock = REENTRANCY_GUARD_FREE;\n  }\n\n}\n\ncontract LoanTokenization is ReentrancyGuard, Ownable {\n\n    uint256 internal constant MAX_UINT = 2**256 - 1;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    address public bZxContract;\n    address public bZxVault;\n    address public bZxOracle;\n    address public wethContract;\n\n    address public loanTokenAddress;\n\n    // price of token at last user checkpoint\n    mapping (address => uint256) internal checkpointPrices_;\n}\n\ncontract PositionTokenStorage is LoanTokenization {\n\n    bool internal isInitialized_ = false;\n\n    address public loanTokenLender;\n    address public tradeTokenAddress;\n\n    uint256 public leverageAmount;\n    bytes32 public loanOrderHash;\n\n    uint256 public initialPrice;\n}\n\ncontract SplittableTokenStorage is PositionTokenStorage {\n    using SafeMath for uint256;\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Mint(\n        address indexed minter,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n    event Burn(\n        address indexed burner,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    uint256 public splitFactor = 10**18;\n\n    function totalSupply()\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(totalSupply_);\n    }\n\n    function balanceOf(\n        address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(balances[_owner]);\n    }\n\n    function allowance(\n        address _owner,\n        address _spender)\n        public\n        view\n        returns (uint256)\n    {\n        return denormalize(allowed[_owner][_spender]);\n    }\n\n    function normalize(\n        uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        return _value\n            .mul(splitFactor)\n            .div(10**18);\n    }\n\n    function denormalize(\n        uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        return _value\n            .mul(10**18)\n            .div(splitFactor);\n    }\n}\n\ncontract SplittableToken is SplittableTokenStorage {\n    using SafeMath for uint256;\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        uint256 allowanceAmount = denormalize(allowed[_from][msg.sender]);\n        uint256 fromBalance = denormalize(balances[_from]);\n        require(_value <= fromBalance, \"insufficient balance\");\n        require(_value <= allowanceAmount, \"insufficient allowance\");\n        require(_to != address(0), \"invalid address\");\n\n        balances[_from] = normalize(fromBalance.sub(_value));\n        if (balanceOf(_from) == 0) {\n            balances[_from] = 0;\n        }\n\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\n        if (allowanceAmount < MAX_UINT) {\n            allowed[_from][msg.sender] = normalize(allowanceAmount.sub(_value));\n            if (allowance(_from, msg.sender) == 0) {\n                allowed[_from][msg.sender] = 0;\n            }\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        uint256 fromBalance = denormalize(balances[msg.sender]);\n        require(_value <= fromBalance, \"insufficient balance\");\n        require(_to != address(0), \"invalid address\");\n\n        balances[msg.sender] = normalize(fromBalance.sub(_value));\n        if (balanceOf(msg.sender) == 0) {\n            balances[msg.sender] = 0;\n        }\n\n        balances[_to] = normalize(denormalize(balances[_to]).add(_value));\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _value;\n        if (allowance(msg.sender, _spender) == 0) {\n            allowed[msg.sender][_spender] = 0;\n        }\n\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = normalize(denormalize(allowed[msg.sender][_spender]).add(_addedValue));\n        emit Approval(msg.sender, _spender, denormalize(allowed[msg.sender][_spender]));\n        return true;\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue)\n        public\n        returns (bool)\n    {\n        uint256 oldValue = denormalize(allowed[msg.sender][_spender]);\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = normalize(oldValue.sub(_subtractedValue));\n            if (allowance(msg.sender, _spender) == 0) {\n                allowed[msg.sender][_spender] = 0;\n            }\n        }\n        emit Approval(msg.sender, _spender, denormalize(allowed[msg.sender][_spender]));\n        return true;\n    }\n\n    function _mint(\n        address _to,\n        uint256 _tokenAmount,\n        uint256 _assetAmount,\n        uint256 _price)\n        internal\n    {\n        require(_to != address(0), \"invalid address\");\n        totalSupply_ = normalize(denormalize(totalSupply_).add(_tokenAmount));\n        balances[_to] = normalize(denormalize(balances[_to]).add(_tokenAmount));\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\n        emit Transfer(address(0), _to, _tokenAmount);\n    }\n\n    function _burn(\n        address _who,\n        uint256 _tokenAmount,\n        uint256 _assetAmount,\n        uint256 _price)\n        internal\n    {\n        uint256 whoBalance = denormalize(balances[_who]);\n        require(_tokenAmount <= whoBalance, \"burn value exceeds balance\");\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = normalize(whoBalance.sub(_tokenAmount));\n        if (balances[_who] <= 10 || balanceOf(_who) <= 10) { // we can't leave such small balance quantities\n            _tokenAmount = _tokenAmount.add(balances[_who]);\n            balances[_who] = 0;\n        }\n\n        totalSupply_ = normalize(denormalize(totalSupply_).sub(_tokenAmount));\n        if (totalSupply() == 0) {\n            totalSupply_ = 0;\n            balances[_who] = 0;\n        }\n\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\n        emit Transfer(_who, address(0), _tokenAmount);\n    }\n}\n\ninterface IBZx {\n    function pushLoanOrderOnChain(\n        address[8] calldata orderAddresses,\n        uint256[11] calldata orderValues,\n        bytes calldata oracleData,\n        bytes calldata signature)\n        external\n        returns (bytes32); // loanOrderHash\n\n    function setLoanOrderDesc(\n        bytes32 loanOrderHash,\n        string calldata desc)\n        external\n        returns (bool);\n\n    function updateLoanAsLender(\n        bytes32 loanOrderHash,\n        uint256 increaseAmountForLoan,\n        uint256 newInterestRate,\n        uint256 newExpirationTimestamp)\n        external\n        returns (bool);\n\n    function takeLoanOrderOnChainAsTraderByDelegate(\n        address trader,\n        bytes32 loanOrderHash,\n        address collateralTokenFilled,\n        uint256 loanTokenAmountFilled,\n        address tradeTokenToFillAddress,\n        bool withdrawOnOpen)\n        external\n        returns (uint256);\n\n    function getLenderInterestForOracle(\n        address lender,\n        address oracleAddress,\n        address interestTokenAddress)\n        external\n        view\n        returns (\n            uint256,    // interestPaid\n            uint256,    // interestPaidDate\n            uint256,    // interestOwedPerDay\n            uint256);   // interestUnPaid\n\n    function withdrawCollateral(\n        bytes32 loanOrderHash,\n        uint256 withdrawAmount)\n        external\n        returns (uint256 amountWithdrawn);\n\n    function closeLoanPartially(\n        bytes32 loanOrderHash,\n        uint256 closeAmount)\n        external\n        returns (uint256 actualCloseAmount);\n\n    function getMarginLevels(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (\n            uint256 initialMarginAmount,\n            uint256 maintenanceMarginAmount,\n            uint256 currentMarginAmount);\n\n    function getTotalEscrow(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (\n            uint256 netCollateralAmount,\n            uint256 interestDepositRemaining,\n            uint256 loanTokenAmountBorrowed);\n\n    function shouldLiquidate(\n        bytes32 loanOrderHash,\n        address trader)\n        external\n        view\n        returns (bool);\n\n    function oracleAddresses(\n        address oracleAddress)\n        external\n        view\n        returns (address);\n}\n\ninterface IBZxOracle {\n    function tradeUserAsset(\n        address sourceTokenAddress,\n        address destTokenAddress,\n        address receiverAddress,\n        address returnToSenderAddress,\n        uint256 sourceTokenAmount,\n        uint256 maxDestTokenAmount,\n        uint256 minConversionRate)\n        external\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\n\n    function interestFeePercent()\n        external\n        view\n        returns (uint256);\n}\n\ninterface ILoanToken {\n    function getMaxEscrowAmount(\n        uint256 leverageAmount)\n        external\n        view\n        returns (uint256);\n}\n\ncontract PositionTokenLogic is SplittableToken {\n    using SafeMath for uint256;\n\n\n    function()\n        external\n        payable\n    {}\n\n\n    /* Public functions */\n\n    // returns the amount of token minted\n    function mintWithEther(\n        address receiver)\n        external\n        payable\n        returns (uint256)\n    {\n        require (msg.value > 0, \"msg.value == 0\");\n\n        uint256 currentPrice = tokenPrice();\n\n        WETHInterface(wethContract).deposit.value(msg.value)();\n\n        return _mintWithToken(\n            receiver,\n            wethContract,\n            msg.value,\n            currentPrice\n        );\n    }\n\n    // returns the amount of token minted\n    function mintWithToken(\n        address receiver,\n        address depositTokenAddress,\n        uint256 depositAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        require (depositAmount > 0, \"depositAmount == 0\");\n\n        uint256 currentPrice = tokenPrice();\n\n        require(ERC20(depositTokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            depositAmount\n        ), \"transfer of token failed\");\n\n        return _mintWithToken(\n            receiver,\n            depositTokenAddress,\n            depositAmount,\n            currentPrice\n        );\n    }\n\n    function burnToEther(\n        address payable receiver,\n        uint256 burnAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 loanAmountOwed = _burnToken(burnAmount);\n        if (loanAmountOwed > 0) {\n            if (wethContract != loanTokenAddress) {\n                address oracle = IBZx(bZxContract).oracleAddresses(bZxOracle);\n                uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), oracle);\n                if (tempAllowance < loanAmountOwed) {\n                    if (tempAllowance > 0) {\n                        // reset approval to 0\n                        require(ERC20(loanTokenAddress).approve(oracle, 0), \"token approval reset failed\");\n                    }\n\n                    require(ERC20(loanTokenAddress).approve(oracle, MAX_UINT), \"token approval failed\");\n                }\n\n                (uint256 destTokenAmountReceived,) = IBZxOracle(oracle).tradeUserAsset(\n                    loanTokenAddress,\n                    address(0), // Ether\n                    receiver, // receiverAddress\n                    receiver, // returnToSenderAddress\n                    loanAmountOwed,\n                    MAX_UINT,\n                    0 // minConversionRate\n                );\n\n                loanAmountOwed = destTokenAmountReceived;\n            } else {\n                WETHInterface(wethContract).withdraw(loanAmountOwed);\n                require(receiver.send(loanAmountOwed), \"transfer of ETH failed\");\n            }\n        }\n\n        return loanAmountOwed;\n    }\n\n    function burnToToken(\n        address receiver,\n        address burnTokenAddress,\n        uint256 burnAmount)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 loanAmountOwed = _burnToken(burnAmount);\n        if (loanAmountOwed > 0) {\n            if (burnTokenAddress != loanTokenAddress) {\n                address oracle = IBZx(bZxContract).oracleAddresses(bZxOracle);\n                uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), oracle);\n                if (tempAllowance < loanAmountOwed) {\n                    if (tempAllowance > 0) {\n                        // reset approval to 0\n                        require(ERC20(loanTokenAddress).approve(oracle, 0), \"token approval reset failed\");\n                    }\n\n                    require(ERC20(loanTokenAddress).approve(oracle, MAX_UINT), \"token approval failed\");\n                }\n\n                (uint256 destTokenAmountReceived,) = IBZxOracle(oracle).tradeUserAsset(\n                    loanTokenAddress,\n                    burnTokenAddress,\n                    receiver, // receiverAddress\n                    receiver, // returnToSenderAddress\n                    loanAmountOwed,\n                    MAX_UINT,\n                    0 // minConversionRate\n                );\n\n                loanAmountOwed = destTokenAmountReceived;\n            } else {\n                require(ERC20(loanTokenAddress).transfer(\n                    receiver,\n                    loanAmountOwed\n                ), \"transfer of loanToken failed\");\n            }\n        }\n\n        return loanAmountOwed;\n    }\n\n    function triggerPosition()\n        external\n        nonReentrant\n    {\n        require(_triggerPosition(), \"triggerPosition failed\");\n    }\n\n    function wrapEther()\n        public\n    {\n        if (address(this).balance > 0) {\n            WETHInterface(wethContract).deposit.value(address(this).balance)();\n        }\n    }\n\n    // Sends non-LoanToken assets to the Oracle fund\n    // These are assets that would otherwise be \"stuck\" due to a user accidently sending them to the contract\n    function donateAsset(\n        address tokenAddress)\n        public\n        returns (bool)\n    {\n        if (tokenAddress == loanTokenAddress)\n            return false;\n\n        uint256 balance = ERC20(tokenAddress).balanceOf(address(this));\n        if (balance == 0)\n            return false;\n\n        require(ERC20(tokenAddress).transfer(\n            IBZx(bZxContract).oracleAddresses(bZxOracle),\n            balance\n        ), \"transfer of token balance failed\");\n\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        super.transferFrom(\n            _from,\n            _to,\n            _value\n        );\n\n        // handle checkpoint update\n        uint256 currentPrice = denormalize(tokenPrice());\n        if (balanceOf(_from) > 0) {\n            checkpointPrices_[_from] = currentPrice;\n        } else {\n            checkpointPrices_[_from] = 0;\n        }\n        if (balanceOf(_to) > 0) {\n            checkpointPrices_[_to] = currentPrice;\n        } else {\n            checkpointPrices_[_to] = 0;\n        }\n\n        return true;\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value)\n        public\n        returns (bool)\n    {\n        super.transfer(\n            _to,\n            _value\n        );\n\n        // handle checkpoint update\n        uint256 currentPrice = denormalize(tokenPrice());\n        if (balanceOf(msg.sender) > 0) {\n            checkpointPrices_[msg.sender] = currentPrice;\n        } else {\n            checkpointPrices_[msg.sender] = 0;\n        }\n        if (balanceOf(_to) > 0) {\n            checkpointPrices_[_to] = currentPrice;\n        } else {\n            checkpointPrices_[_to] = 0;\n        }\n\n        return true;\n    }\n\n    /* Public View functions */\n\n    function tokenPrice()\n        public\n        view\n        returns (uint256 price)\n    {\n        uint256 netCollateralAmount = 0;\n        uint256 interestDepositRemaining = 0;\n        if (totalSupply() > 0) {\n            (netCollateralAmount, interestDepositRemaining,) = IBZx(bZxContract).getTotalEscrow(\n                loanOrderHash,\n                address(this));\n        }\n\n        return _tokenPrice(netCollateralAmount, interestDepositRemaining);\n    }\n\n    function liquidationPrice()\n        public\n        view\n        returns (uint256 price)\n    {\n        (,uint256 maintenanceMarginAmount,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\n            loanOrderHash,\n            address(this));\n\n        if (maintenanceMarginAmount == 0)\n            return 0;\n        else if (currentMarginAmount <= maintenanceMarginAmount)\n            return tokenPrice();\n\n        return tokenPrice()\n            .mul(maintenanceMarginAmount)\n            .div(currentMarginAmount);\n    }\n\n    function checkpointPrice(\n        address _user)\n        public\n        view\n        returns (uint256 price)\n    {\n        return normalize(checkpointPrices_[_user]);\n    }\n\n    function currentLeverage()\n        public\n        view\n        returns (uint256 leverage)\n    {\n        (,,uint256 currentMarginAmount) = IBZx(bZxContract).getMarginLevels(\n            loanOrderHash,\n            address(this));\n\n        if (currentMarginAmount == 0)\n            return 0;\n\n        return SafeMath.div(10**38, currentMarginAmount);\n    }\n\n    function marketLiquidityForAsset()\n        public\n        view\n        returns (uint256)\n    {\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount);\n    }\n\n    function marketLiquidityForToken()\n        public\n        view\n        returns (uint256)\n    {\n        return ILoanToken(loanTokenLender).getMaxEscrowAmount(leverageAmount)\n            .mul(10**18)\n            .div(tokenPrice());\n    }\n\n    // returns the user's balance of underlying token\n    function assetBalanceOf(\n        address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return balanceOf(_owner)\n            .mul(tokenPrice())\n            .div(10**18);\n    }\n\n\n    /* Internal functions */\n\n    // returns the amount of token minted\n    function _mintWithToken(\n        address receiver,\n        address depositTokenAddress,\n        uint256 depositAmount,\n        uint256 currentPrice)\n        internal\n        returns (uint256)\n    {\n        uint256 liquidityAmount = marketLiquidityForAsset();\n        require(liquidityAmount > 0, \"marketLiquidity == 0\");\n\n        uint256 refundAmount;\n        if (depositTokenAddress != loanTokenAddress) {\n            address oracle = IBZx(bZxContract).oracleAddresses(bZxOracle);\n            uint256 tempAllowance = ERC20(depositTokenAddress).allowance(address(this), oracle);\n            if (tempAllowance < depositAmount) {\n                if (tempAllowance > 0) {\n                    // reset approval to 0\n                    require(ERC20(depositTokenAddress).approve(oracle, 0), \"token approval reset failed\");\n                }\n\n                require(ERC20(depositTokenAddress).approve(oracle, MAX_UINT), \"token approval failed\");\n            }\n\n            (uint256 destTokenAmountReceived, uint256 depositAmountUsed) = IBZxOracle(oracle).tradeUserAsset(\n                depositTokenAddress,\n                loanTokenAddress,\n                address(this), // receiverAddress\n                address(this), // returnToSenderAddress\n                depositAmount,\n                MAX_UINT,\n                0 // minConversionRate\n            );\n\n            require(destTokenAmountReceived <= liquidityAmount, \"market liquidity insufficient\");\n\n            if (depositAmount > depositAmountUsed) {\n                refundAmount = depositAmount-depositAmountUsed;\n                if (msg.value == 0) {\n                    require(ERC20(depositTokenAddress).transfer(\n                        msg.sender,\n                        refundAmount\n                    ), \"transfer of token failed\");\n                } else {\n                    WETHInterface(wethContract).withdraw(refundAmount);\n                    require(msg.sender.send(refundAmount), \"transfer of ETH failed\");\n                }\n            }\n\n            depositAmount = destTokenAmountReceived;\n        } else if (depositAmount > liquidityAmount) {\n            refundAmount = depositAmount-liquidityAmount;\n            if (msg.value == 0) {\n                require(ERC20(loanTokenAddress).transfer(\n                    msg.sender,\n                    refundAmount\n                ), \"transfer of token failed\");\n            } else {\n                WETHInterface(wethContract).withdraw(refundAmount);\n                require(msg.sender.send(refundAmount), \"transfer of ETH failed\");\n            }\n            depositAmount = liquidityAmount;\n        }\n\n        require(_triggerPosition(), \"triggerPosition failed\");\n\n        // check slippage for user\n        uint256 totalSupplyBackup = totalSupply_;\n\n        uint256 mintAmount = depositAmount\n            .mul(10**18)\n           .div(currentPrice);\n        totalSupply_ = normalize(denormalize(totalSupply_).add(mintAmount));\n\n        uint256 slippagePrice = tokenPrice();   // price with slipapge\n        totalSupply_ = totalSupplyBackup;       // reset totalSupply\n\n        if (slippagePrice < currentPrice) {\n            uint256 slippageOffset = depositAmount\n                .mul(10**18)\n                .div(slippagePrice)\n                .sub(mintAmount);\n\n            require(mintAmount > slippageOffset, \"slippage too great\");\n\n            mintAmount = mintAmount.sub(slippageOffset);\n            currentPrice = slippagePrice;\n        }\n\n        require(mintAmount > 0 && depositAmount > 0, \"market liquidity insufficient\");\n        _mint(receiver, mintAmount, depositAmount, currentPrice);\n\n        checkpointPrices_[receiver] = denormalize(currentPrice);\n\n        return mintAmount;\n    }\n\n    function _burnToken(\n        uint256 burnAmount)\n        internal\n        returns (uint256)\n    {\n        require(burnAmount > 0, \"burnAmount == 0\");\n\n        if (burnAmount > balanceOf(msg.sender)) {\n            burnAmount = balanceOf(msg.sender);\n        }\n\n        (uint256 netCollateralAmount, uint256 interestDepositRemaining, uint256 loanTokenAmountBorrowed) = IBZx(bZxContract).getTotalEscrow(\n            loanOrderHash,\n            address(this));\n        uint256 currentPrice = _tokenPrice(netCollateralAmount, interestDepositRemaining);\n\n        uint256 loanAmountOwed = burnAmount\n            .mul(currentPrice)\n            .div(10**18);\n\n        uint256 loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\n\n        if (loanAmountAvailableInContract < loanAmountOwed) {\n            loanAmountAvailableInContract = loanAmountAvailableInContract.add(\n                IBZx(bZxContract).withdrawCollateral(\n                    loanOrderHash,\n                    loanAmountOwed.sub(loanAmountAvailableInContract)\n                )\n            );\n        }\n\n        if (loanAmountAvailableInContract < loanAmountOwed) {\n            if (IBZx(bZxContract).shouldLiquidate(loanOrderHash, address(this))) {\n\n                loanAmountOwed = loanAmountAvailableInContract;\n\n                // we couldn't close as much as possible (due to liquidation req), so we update available burn amount\n                burnAmount = loanAmountOwed\n                    .mul(10**18)\n                    .div(currentPrice);\n            } else {\n\n                uint256 closeAmount;\n                if (burnAmount < totalSupply()) {\n                    closeAmount = loanAmountOwed\n                        .sub(loanAmountAvailableInContract)\n                        .mul(loanTokenAmountBorrowed)\n                        .div(netCollateralAmount\n                            .add(interestDepositRemaining));\n                } else {\n                    // close entire loan\n                    closeAmount = MAX_UINT;\n                }\n\n                IBZx(bZxContract).closeLoanPartially(\n                    loanOrderHash,\n                    closeAmount\n                );\n\n                loanAmountAvailableInContract = ERC20(loanTokenAddress).balanceOf(address(this));\n                if (loanAmountAvailableInContract < loanAmountOwed) {\n                    loanAmountOwed = loanAmountAvailableInContract;\n                    // We closed as much as possible, so no update to available burn amount.\n                    // Slippage may have occured for the user.\n                }\n            }\n        }\n\n        require(burnAmount > 0 && loanAmountOwed > 0, \"market liquidity insufficient\");\n        _burn(msg.sender, burnAmount, loanAmountOwed, currentPrice);\n\n        if (totalSupply() == 0 || tokenPrice() == 0) {\n            splitFactor = 10**18;\n            currentPrice = initialPrice;\n        }\n\n        if (balanceOf(msg.sender) > 0) {\n            checkpointPrices_[msg.sender] = denormalize(currentPrice);\n        } else {\n            checkpointPrices_[msg.sender] = 0;\n        }\n\n        return loanAmountOwed;\n    }\n\n    function _triggerPosition()\n        internal\n        returns (bool)\n    {\n        uint256 assetBalance = ERC20(loanTokenAddress).balanceOf(address(this));\n        if (assetBalance > 0) {\n            uint256 tempAllowance = ERC20(loanTokenAddress).allowance.gas(4999)(address(this), bZxVault);\n            if (tempAllowance < assetBalance) {\n                if (tempAllowance > 0) {\n                    // reset approval to 0\n                    require(ERC20(loanTokenAddress).approve(bZxVault, 0), \"token approval reset failed\");\n                }\n\n                require(ERC20(loanTokenAddress).approve(bZxVault, MAX_UINT), \"token approval failed\");\n            }\n\n            (bool result,) = loanTokenLender.call(\n                abi.encodeWithSignature(\n                    \"borrowTokenFromEscrow(uint256,uint256,address,bool)\",\n                    assetBalance,\n                    leverageAmount,\n                    tradeTokenAddress,\n                    false\n                )\n            );\n            return result;\n        }\n        return false;\n    }\n\n\n    /* Internal View functions */\n\n    function _tokenPrice(\n        uint256 netCollateralAmount,\n        uint256 interestDepositRemaining)\n        internal\n        view\n        returns (uint256)\n    {\n        return totalSupply_ > 0 ?\n            normalize(\n                ERC20(loanTokenAddress).balanceOf(address(this))\n                .add(netCollateralAmount)\n                .add(interestDepositRemaining)\n                .mul(10**18)\n                .div(totalSupply_)\n            ) : initialPrice;\n    }\n\n\n    /* Owner-Only functions */\n\n    function setLoanTokenLender(\n        address _lender)\n        public\n        onlyOwner\n    {\n        loanTokenLender = _lender;\n    }\n\n    function setBZxContract(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxContract = _addr;\n    }\n\n    function setBZxVault(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxVault = _addr;\n    }\n\n    function setBZxOracle(\n        address _addr)\n        public\n        onlyOwner\n    {\n        bZxOracle = _addr;\n    }\n\n    function setWETHContract(\n        address _addr)\n        public\n        onlyOwner\n    {\n        wethContract = _addr;\n    }\n\n    function setLoanTokenAddress(\n        address _addr)\n        public\n        onlyOwner\n    {\n        loanTokenAddress = _addr;\n    }\n\n    function setTradeTokenAddress(\n        address _addr)\n        public\n        onlyOwner\n    {\n        tradeTokenAddress = _addr;\n    }\n\n    function setInitialPrice(\n        uint256 _value)\n        public\n        onlyOwner\n    {\n        require(_value > 0, \"value can't be 0\");\n        initialPrice = _value;\n    }\n\n    function handleSplit()\n        public\n        onlyOwner\n    {\n        if (totalSupply() > 0) {\n            splitFactor = splitFactor\n                .mul(initialPrice)\n                .div(\n                    tokenPrice()\n                );\n        } else {\n            splitFactor = 10**18;\n        }\n    }\n\n    function initialize(\n        address _bZxContract,\n        address _bZxVault,\n        address _bZxOracle,\n        address _wethContract,\n        address _loanTokenAddress,\n        address _tradeTokenAddress,\n        address _lender,\n        uint256 _leverageAmount,\n        bytes32 _loanOrderHash,\n        string memory _name,\n        string memory _symbol)\n        public\n        onlyOwner\n    {\n        require (!isInitialized_, \"already initialized\");\n\n        bZxContract = _bZxContract;\n        bZxVault = _bZxVault;\n        bZxOracle = _bZxOracle;\n        wethContract = _wethContract;\n        loanTokenAddress = _loanTokenAddress;\n        tradeTokenAddress = _tradeTokenAddress;\n        loanTokenLender = _lender;\n\n        loanOrderHash = _loanOrderHash;\n        leverageAmount = _leverageAmount;\n\n        name = _name;\n        symbol = _symbol;\n        decimals = EIP20(loanTokenAddress).decimals();\n\n        initialPrice = 10**21; // starting price of 1,000\n\n        // set the BZxVault spend approval\n        require(ERC20(_loanTokenAddress).approve(_bZxVault, MAX_UINT), \"approval of loan token failed\");\n\n        isInitialized_ = true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00490600052602060002090601f016020900481019282601f10613ad057805160ff1916838001178555613afd565b82800160010185558215613afd579182015b82811115613afd578251825591602001919060010190613ae2565b50613b09929150613b0d565b5090565b610aaf91905b80821115613b095760008155600101613b13565b8035610a6081614862565b8051610a6081614862565b8051610a6081614876565b8035610a608161487f565b600082601f830112613b6457600080fd5b8135613b77613b72826147a4565b61477d565b91508082526020830160208301858383011115613b9357600080fd5b613b9e83828461481c565b50505092915050565b8051610a608161487f565b8051610a6081614888565b600060208284031215613bcf57600080fd5b6000612a888484613b27565b600060208284031215613bed57600080fd5b6000612a888484613b32565b60008060408385031215613c0c57600080fd5b6000613c188585613b27565b9250506020613c2985828601613b48565b9150509250929050565b60008060408385031215613c4657600080fd5b6000613c528585613b27565b9250506020613c2985828601613b27565b60008060008060008060008060008060006101608c8e031215613c8557600080fd5b6000613c918e8e613b27565b9b50506020613ca28e828f01613b27565b9a50506040613cb38e828f01613b27565b9950506060613cc48e828f01613b27565b9850506080613cd58e828f01613b27565b97505060a0613ce68e828f01613b27565b96505060c0613cf78e828f01613b27565b95505060e0613d088e828f01613b48565b945050610100613d1a8e828f01613b48565b9350506101208c013567ffffffffffffffff811115613d3857600080fd5b613d448e828f01613b53565b9250506101408c013567ffffffffffffffff811115613d6257600080fd5b613d6e8e828f01613b53565b9150509295989b509295989b9093969950565b600080600060608486031215613d9657600080fd5b6000613da28686613b27565b9350506020613db386828701613b27565b9250506040613dc486828701613b48565b9150509250925092565b600060208284031215613de057600080fd5b6000612a888484613b3d565b600060208284031215613dfe57600080fd5b6000612a888484613b48565b600060208284031215613e1c57600080fd5b6000612a888484613ba7565b60008060408385031215613e3b57600080fd5b6000613e478585613ba7565b9250506020613c2985828601613ba7565b600080600060608486031215613e6d57600080fd5b6000613e798686613ba7565b9350506020613e8a86828701613ba7565b9250506040613dc486828701613ba7565b600060208284031215613ead57600080fd5b6000612a888484613bb2565b613ec2816147fb565b82525050565b613ec2816147d9565b613ec2816147e4565b613ec281610aaf565b6000613eee826147cc565b613ef88185610927565b9350613f08818560208601614828565b9290920192915050565b613ec281614806565b6000613f26826147cc565b613f3081856147d0565b9350613f40818560208601614828565b613f4981614858565b9093019392505050565b6000613f60600f836147d0565b7f6275726e416d6f756e74203d3d20300000000000000000000000000000000000815260200192915050565b6000613f996018836147d0565b7f7472616e73666572206f6620746f6b656e206661696c65640000000000000000815260200192915050565b6000613fd2601b836147d0565b7f746f6b656e20617070726f76616c207265736574206661696c65640000000000815260200192915050565b600061400b6016836147d0565b7f696e73756666696369656e7420616c6c6f77616e636500000000000000000000815260200192915050565b6000614044601d836147d0565b7f6d61726b6574206c697175696469747920696e73756666696369656e74000000815260200192915050565b600061407d6015836147d0565b7f746f6b656e20617070726f76616c206661696c65640000000000000000000000815260200192915050565b60006140b66016836147d0565b7f74726967676572506f736974696f6e206661696c656400000000000000000000815260200192915050565b60006140ef6020836147d0565b7f7472616e73666572206f6620746f6b656e2062616c616e6365206661696c6564815260200192915050565b60006141286012836147d0565b7f736c69707061676520746f6f2067726561740000000000000000000000000000815260200192915050565b60006141616013836147d0565b7f616c726561647920696e697469616c697a656400000000000000000000000000815260200192915050565b600061419a600f836147d0565b7f696e76616c696420616464726573730000000000000000000000000000000000815260200192915050565b60006141d36016836147d0565b7f7472616e73666572206f6620455448206661696c656400000000000000000000815260200192915050565b600061420c6014836147d0565b7f6d61726b65744c6971756964697479203d3d2030000000000000000000000000815260200192915050565b6000614245601a836147d0565b7f6275726e2076616c756520657863656564732062616c616e6365000000000000815260200192915050565b600061427e6014836147d0565b7f696e73756666696369656e742062616c616e6365000000000000000000000000815260200192915050565b60006142b76012836147d0565b7f6465706f736974416d6f756e74203d3d20300000000000000000000000000000815260200192915050565b60006142f0600c836147d0565b7f6e6f6e5265656e7472616e740000000000000000000000000000000000000000815260200192915050565b6000614329600e836147d0565b7f6d73672e76616c7565203d3d2030000000000000000000000000000000000000815260200192915050565b60006143626010836147d0565b7f76616c75652063616e2774206265203000000000000000000000000000000000815260200192915050565b600061439b601c836147d0565b7f7472616e73666572206f66206c6f616e546f6b656e206661696c656400000000815260200192915050565b60006143d4601d836147d0565b7f617070726f76616c206f66206c6f616e20746f6b656e206661696c6564000000815260200192915050565b613ec2816147f5565b6000610b768284613ee3565b60208101610a608284613ec8565b60208101610a608284613eb9565b6040810161443f8285613eb9565b610b766020830184613ec8565b6060810161445a8286613eb9565b6144676020830185613eb9565b612a886040830184613eda565b604081016144828285613eb9565b610b766020830184613eda565b60e0810161449d828a613ec8565b6144aa6020830189613eb9565b6144b76040830188613eb9565b6144c46060830187613eb9565b6144d16080830186613eda565b6144de60a0830185613eda565b6144eb60c0830184613f12565b98975050505050505050565b60e08101614505828a613ec8565b6144aa6020830189613ec8565b60e08101614520828a613ec8565b61452d6020830189613ec8565b61453a6040830188613ec8565b6144c46060830187613ec8565b604081016145558285613ec8565b610b766020830184613f12565b604081016144828285613ec8565b60208101610a608284613ed1565b60208101610a608284613eda565b6040810161459a8285613eda565b610b766020830184613eb9565b604081016144828285613eda565b60208082528101610b768184613f1b565b6020808252810161092481613f53565b6020808252810161092481613f8c565b6020808252810161092481613fc5565b6020808252810161092481613ffe565b6020808252810161092481614037565b6020808252810161092481614070565b60208082528101610924816140a9565b60208082528101610924816140e2565b602080825281016109248161411b565b6020808252810161092481614154565b602080825281016109248161418d565b60208082528101610924816141c6565b60208082528101610924816141ff565b6020808252810161092481614238565b6020808252810161092481614271565b60208082528101610924816142aa565b60208082528101610924816142e3565b602080825281016109248161431c565b6020808252810161092481614355565b602080825281016109248161438e565b60208082528101610924816143c7565b608081016147248287613eda565b6147316020830186613eda565b61473e6040830185613ec8565b61474b6060830184613ed1565b95945050505050565b606081016147628286613eda565b6144676020830185613eda565b60208101610a608284614400565b60405181810167ffffffffffffffff8111828210171561479c57600080fd5b604052919050565b600067ffffffffffffffff8211156147bb57600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b6000610924826147e9565b151590565b6001600160a01b031690565b60ff1690565b600061092482614811565b600061092482610aaf565b6000610924826147d9565b82818337506000910152565b60005b8381101561484357818101518382015260200161482b565b83811115614852576000848401525b50505050565b601f01601f191690565b61486b816147d9565b81146121da57600080fd5b61486b816147e4565b61486b81610aaf565b61486b816147f556feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa265627a7a72305820e44450dcbfa60e24d86be95358771423582cdeec473f947fce9a53de4d5f807d6c6578706572696d656e74616cf50037"
}