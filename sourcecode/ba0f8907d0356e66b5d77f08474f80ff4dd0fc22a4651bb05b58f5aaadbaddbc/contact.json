{
  "address": "0xa8bb73a44dbd481dd2c32a45d062777c7d6e9cf5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Nesc",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\"\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner\n   * @param newOwner The address to transfer ownership to\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/*\n * @title Migration Agent interface\n */\ncontract MigrationAgent {\n  function migrateFrom(address _from, uint256 _value);\n}\n\ncontract ERC20 {\n    function totalSupply() constant returns (uint256);\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value);\n    function transferFrom(address from, address to, uint256 value);\n    function approve(address spender, uint256 value);\n    function allowance(address owner, address spender) constant returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Nesc is Ownable, ERC20 {\n  using SafeMath for uint256;\n\n  uint8 private _decimals = 18;\n  uint256 private decimalMultiplier = 10**(uint256(_decimals));\n\n  string private _name = \"Nebula Exchange Token\";\n  string private _symbol = \"NESC\";\n  uint256 private _totalSupply = 10000000 * decimalMultiplier;\n\n  bool public tradable = true;\n\n  // Wallet Address of Token\n  address public multisig;\n\n  // Function to access name of token\n  function name() constant returns (string) {\n    return _name;\n  }\n\n  // Function to access symbol of token\n  function symbol() constant returns (string) {\n    return _symbol;\n  }\n\n  // Function to access decimals of token\n  function decimals() constant returns (uint8) {\n    return _decimals;\n  }\n\n  // Function to access total supply of tokens\n  function totalSupply() constant returns (uint256) {\n    return _totalSupply;\n  }\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping (address => uint256)) allowed;\n  mapping(address => uint256) releaseTimes;\n  address public migrationAgent;\n  uint256 public totalMigrated;\n\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n  // Constructor\n  // @notice Nesc Contract\n  // @return the transaction address\n  function Nesc(address _multisig) {\n    require(_multisig != 0x0);\n    multisig = _multisig;\n    balances[multisig] = _totalSupply;\n  }\n\n  modifier canTrade() {\n    require(tradable);\n    _;\n  }\n\n  // Standard function transfer similar to ERC20 transfer with no _data\n  // Added due to backwards compatibility reasons\n  function transfer(address to, uint256 value) canTrade {\n    require(!isLocked(msg.sender));\n    require (balances[msg.sender] >= value && value > 0);\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    balances[to] = balances[to].add(value);\n    Transfer(msg.sender, to, value);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param who The address to query the the balance of\n   * @return An uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address who) constant returns (uint256) {\n    return balances[who];\n  }\n\n /**\n  * @dev Transfer tokens from one address to another\n  * @param from address The address which you want to send tokens from\n  * @param to address The address which you want to transfer to\n  * @param value uint256 the amount of tokens to be transfered\n  */\n  function transferFrom(address from, address to, uint256 value) canTrade {\n    require(to != 0x0);\n    require(!isLocked(from));\n    uint256 _allowance = allowed[from][msg.sender];\n    require(value > 0 && _allowance >= value);\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n    allowed[from][msg.sender] = _allowance.sub(value);\n    Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   * @param spender The address which will spend the funds\n   * @param value The amount of tokens to be spent\n   */\n  function approve(address spender, uint256 value) canTrade {\n    require((value >= 0) && (allowed[msg.sender][spender] >= 0));\n    allowed[msg.sender][spender] = value;\n    Approval(msg.sender, spender, value);\n  }\n\n  // Check the allowed value for the spender to withdraw from owner\n  // @param owner The address of the owner\n  // @param spender The address of the spender\n  // @return the amount which spender is still allowed to withdraw from owner\n  function allowance(address owner, address spender) constant returns (uint256) {\n    return allowed[owner][spender];\n  }\n\n  /**\n   * @dev Function to update tradable status\n   * @param _newTradableState New tradable state\n   * @return A boolean that indicates if the operation was successful\n   */\n  function setTradable(bool _newTradableState) onlyOwner public {\n    tradable = _newTradableState;\n  }\n\n  /**\n   * Function to lock a given address until the specified date\n   * @param spender Address to lock\n   * @param date A timestamp specifying when the account will be unlocked\n   * @return A boolean that indicates if the operation was successful\n   */\n  function timeLock(address spender, uint256 date) public onlyOwner returns (bool) {\n    releaseTimes[spender] = date;\n    return true;\n  }\n\n  /**\n   * Function to check if a given address is locked or not\n   * @param _spender Address\n   * @return A boolean that indicates if the account is locked or not\n   */\n  function isLocked(address _spender) public view returns (bool) {\n    if (releaseTimes[_spender] == 0 || releaseTimes[_spender] <= block.timestamp) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * @notice Set address of migration target contract and enable migration process\n   * @dev Required state: Operational Normal\n   * @dev State transition: -> Operational Migration\n   * @param _agent The address of the MigrationAgent contract\n   */\n  function setMigrationAgent(address _agent) external onlyOwner {\n    require(migrationAgent == 0x0 && totalMigrated == 0);\n    migrationAgent = _agent;\n  }\n\n  /*\n   * @notice Migrate tokens to the new token contract.\n   * @dev Required state: Operational Migration\n   * @param _value The amount of token to be migrated\n   */\n  function migrate(uint256 value) external {\n    require(migrationAgent != 0x0);\n    require(value >= 0);\n    require(value <= balances[msg.sender]);\n\n    balances[msg.sender] -= value;\n    _totalSupply = _totalSupply.sub(value);\n    totalMigrated = totalMigrated.add(value);\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n    Migrate(msg.sender, migrationAgent, value);\n  }\n}",
  "bytecode": "60806040526012600060146101000a81548160ff021916908360ff160217905550600060149054906101000a900460ff1660ff16600a0a6001556040805190810160405280601581526020017f4e6562756c612045786368616e676520546f6b656e0000000000000000000000815250600290805190602001906200008692919062000243565b506040805190810160405280600481526020017f4e4553430000000000000000000000000000000000000000000000000000000081525060039080519060200190620000d492919062000243565b5060015462989680026004556001600560006101000a81548160ff0219169083151502179055503480156200010857600080fd5b5060405160208062001b0383398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16141515156200019357600080fd5b80600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060045460066000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050620002f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028657805160ff1916838001178555620002b7565b82800160010185558215620002b7579182015b82811115620002b657825182559160200191906001019062000299565b5b509050620002c69190620002ca565b5090565b620002ef91905b80821115620002eb576000816000905550600101620002d1565b5090565b90565b61180180620003026000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd146101f457806323b872dd1461021f578063313ce5671461028c578063454b0608146102bd5780634783c35b146102ea5780634a4fbeec1461034157806354840c6e1461039c57806370a08231146103cb57806375e2ff65146104225780637cd50577146104655780638328dbcd146104945780638da5cb5b146104eb57806395a0f5eb1461054257806395d89b411461056d578063a9059cbb146105fd578063d91dc9521461064a578063dd62ed3e146106af578063f2fde38b14610726575b600080fd5b34801561012357600080fd5b5061012c610769565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061080b565b005b34801561020057600080fd5b506102096109a9565b6040518082815260200191505060405180910390f35b34801561022b57600080fd5b5061028a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109b3565b005b34801561029857600080fd5b506102a1610ccd565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102c957600080fd5b506102e860048036038101908080359060200190929190505050610ce3565b005b3480156102f657600080fd5b506102ff610f73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034d57600080fd5b50610382600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f99565b604051808215151515815260200191505060405180910390f35b3480156103a857600080fd5b506103b161103f565b604051808215151515815260200191505060405180910390f35b3480156103d757600080fd5b5061040c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611052565b6040518082815260200191505060405180910390f35b34801561042e57600080fd5b50610463600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061109b565b005b34801561047157600080fd5b5061049260048036038101908080351515906020019092919050505061118f565b005b3480156104a057600080fd5b506104a9611207565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f757600080fd5b5061050061122d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054e57600080fd5b50610557611252565b6040518082815260200191505060405180910390f35b34801561057957600080fd5b50610582611258565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105c25780820151818401526020810190506105a7565b50505050905090810190601f1680156105ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561060957600080fd5b50610648600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112fa565b005b34801561065657600080fd5b50610695600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611517565b604051808215151515815260200191505060405180910390f35b3480156106bb57600080fd5b50610710600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c2565b6040518082815260200191505060405180910390f35b34801561073257600080fd5b50610767600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611649565b005b606060028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108015780601f106107d657610100808354040283529160200191610801565b820191906000526020600020905b8154815290600101906020018083116107e457829003601f168201915b5050505050905090565b600560009054906101000a900460ff16151561082657600080fd5b600081101580156108b457506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156108bf57600080fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b6000600454905090565b6000600560009054906101000a900460ff1615156109d057600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156109f657600080fd5b6109ff84610f99565b151515610a0b57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082118015610a9a5750818110155b1515610aa557600080fd5b610af782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179e90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8c82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b790919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be2828261179e90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60008060149054906101000a900460ff16905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610d2b57600080fd5b60008110151515610d3b57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610d8957600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610deb8160045461179e90919063ffffffff16565b600481905550610e0681600a546117b790919063ffffffff16565b600a81905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a3130e333836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b50505050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a836040518082815260200191505060405180910390a350565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480611027575042600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411155b15611035576000905061103a565b600190505b919050565b600560009054906101000a900460ff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110f657600080fd5b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561114057506000600a54145b151561114b57600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ea57600080fd5b80600560006101000a81548160ff02191690831515021790555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112f05780601f106112c5576101008083540402835291602001916112f0565b820191906000526020600020905b8154815290600101906020018083116112d357829003601f168201915b5050505050905090565b600560009054906101000a900460ff16151561131557600080fd5b61131e33610f99565b15151561132a57600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156113795750600081115b151561138457600080fd5b6113d681600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179e90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061146b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117b790919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157457600080fd5b81600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116e057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156117ac57fe5b818303905092915050565b60008082840190508381101515156117cb57fe5b80915050929150505600a165627a7a723058203b1b17dd39362cf65e9866544ee227040b21ea9fb4ccb3123d4dd5e8e8f2af0100290000000000000000000000004284ebe0931e3d93bb92cd8524eed842e5aedefd",
  "constructorArguments": "0000000000000000000000004284ebe0931e3d93bb92cd8524eed842e5aedefd"
}