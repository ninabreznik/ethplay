{
  "address": "0x8940442e7f54e875c8c1c80213a4aee7eee4781c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GenesisProtocol",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-26\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Eliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n  }\n}\n\n\nlibrary OrderStatisticTree {\n\n    struct Node {\n        mapping (bool => uint) children; // a mapping of left(false) child and right(true) child nodes\n        uint parent; // parent node\n        bool side;   // side of the node on the tree (left or right)\n        uint height; //Height of this node\n        uint count; //Number of tree nodes below this node (including this one)\n        uint dupes; //Number of duplicates values for this node\n    }\n\n    struct Tree {\n        // a mapping between node value(uint) to Node\n        // the tree's root is always at node 0 ,which points to the \"real\" tree\n        // as its right child.this is done to eliminate the need to update the tree\n        // root in the case of rotation.(saving gas).\n        mapping(uint => Node) nodes;\n    }\n    /**\n     * @dev rank - find the rank of a value in the tree,\n     *      i.e. its index in the sorted list of elements of the tree\n     * @param _tree the tree\n     * @param _value the input value to find its rank.\n     * @return smaller - the number of elements in the tree which their value is\n     * less than the input value.\n     */\n    function rank(Tree storage _tree,uint _value) internal view returns (uint smaller) {\n        if (_value != 0) {\n            smaller = _tree.nodes[0].dupes;\n\n            uint cur = _tree.nodes[0].children[true];\n            Node storage currentNode = _tree.nodes[cur];\n\n            while (true) {\n                if (cur <= _value) {\n                    if (cur<_value) {\n                        smaller = smaller + 1+currentNode.dupes;\n                    }\n                    uint leftChild = currentNode.children[false];\n                    if (leftChild!=0) {\n                        smaller = smaller + _tree.nodes[leftChild].count;\n                    }\n                }\n                if (cur == _value) {\n                    break;\n                }\n                cur = currentNode.children[cur<_value];\n                if (cur == 0) {\n                    break;\n                }\n                currentNode = _tree.nodes[cur];\n            }\n        }\n    }\n\n    function count(Tree storage _tree) internal view returns (uint) {\n        Node storage root = _tree.nodes[0];\n        Node memory child = _tree.nodes[root.children[true]];\n        return root.dupes+child.count;\n    }\n\n    function updateCount(Tree storage _tree,uint _value) private {\n        Node storage n = _tree.nodes[_value];\n        n.count = 1+_tree.nodes[n.children[false]].count+_tree.nodes[n.children[true]].count+n.dupes;\n    }\n\n    function updateCounts(Tree storage _tree,uint _value) private {\n        uint parent = _tree.nodes[_value].parent;\n        while (parent!=0) {\n            updateCount(_tree,parent);\n            parent = _tree.nodes[parent].parent;\n        }\n    }\n\n    function updateHeight(Tree storage _tree,uint _value) private {\n        Node storage n = _tree.nodes[_value];\n        uint heightLeft = _tree.nodes[n.children[false]].height;\n        uint heightRight = _tree.nodes[n.children[true]].height;\n        if (heightLeft > heightRight)\n            n.height = heightLeft+1;\n        else\n            n.height = heightRight+1;\n    }\n\n    function balanceFactor(Tree storage _tree,uint _value) private view returns (int bf) {\n        Node storage n = _tree.nodes[_value];\n        return int(_tree.nodes[n.children[false]].height)-int(_tree.nodes[n.children[true]].height);\n    }\n\n    function rotate(Tree storage _tree,uint _value,bool dir) private {\n        bool otherDir = !dir;\n        Node storage n = _tree.nodes[_value];\n        bool side = n.side;\n        uint parent = n.parent;\n        uint valueNew = n.children[otherDir];\n        Node storage nNew = _tree.nodes[valueNew];\n        uint orphan = nNew.children[dir];\n        Node storage p = _tree.nodes[parent];\n        Node storage o = _tree.nodes[orphan];\n        p.children[side] = valueNew;\n        nNew.side = side;\n        nNew.parent = parent;\n        nNew.children[dir] = _value;\n        n.parent = valueNew;\n        n.side = dir;\n        n.children[otherDir] = orphan;\n        o.parent = _value;\n        o.side = otherDir;\n        updateHeight(_tree,_value);\n        updateHeight(_tree,valueNew);\n        updateCount(_tree,_value);\n        updateCount(_tree,valueNew);\n    }\n\n    function rebalanceInsert(Tree storage _tree,uint _nValue) private {\n        updateHeight(_tree,_nValue);\n        Node storage n = _tree.nodes[_nValue];\n        uint pValue = n.parent;\n        if (pValue!=0) {\n            int pBf = balanceFactor(_tree,pValue);\n            bool side = n.side;\n            int sign;\n            if (side)\n                sign = -1;\n            else\n                sign = 1;\n            if (pBf == sign*2) {\n                if (balanceFactor(_tree,_nValue) == (-1 * sign)) {\n                    rotate(_tree,_nValue,side);\n                }\n                rotate(_tree,pValue,!side);\n            } else if (pBf != 0) {\n                rebalanceInsert(_tree,pValue);\n            }\n        }\n    }\n\n    function rebalanceDelete(Tree storage _tree,uint _pValue,bool side) private {\n        if (_pValue!=0) {\n            updateHeight(_tree,_pValue);\n            int pBf = balanceFactor(_tree,_pValue);\n            int sign;\n            if (side)\n                sign = 1;\n            else\n                sign = -1;\n            int bf = balanceFactor(_tree,_pValue);\n            if (bf==(2*sign)) {\n                Node storage p = _tree.nodes[_pValue];\n                uint sValue = p.children[!side];\n                int sBf = balanceFactor(_tree,sValue);\n                if (sBf == (-1 * sign)) {\n                    rotate(_tree,sValue,!side);\n                }\n                rotate(_tree,_pValue,side);\n                if (sBf!=0) {\n                    p = _tree.nodes[_pValue];\n                    rebalanceDelete(_tree,p.parent,p.side);\n                }\n            } else if (pBf != sign) {\n                p = _tree.nodes[_pValue];\n                rebalanceDelete(_tree,p.parent,p.side);\n            }\n        }\n    }\n\n    function fixParents(Tree storage _tree,uint parent,bool side) private {\n        if (parent!=0) {\n            updateCount(_tree,parent);\n            updateCounts(_tree,parent);\n            rebalanceDelete(_tree,parent,side);\n        }\n    }\n\n    function insertHelper(Tree storage _tree,uint _pValue,bool _side,uint _value) private {\n        Node storage root = _tree.nodes[_pValue];\n        uint cValue = root.children[_side];\n        if (cValue==0) {\n            root.children[_side] = _value;\n            Node storage child = _tree.nodes[_value];\n            child.parent = _pValue;\n            child.side = _side;\n            child.height = 1;\n            child.count = 1;\n            updateCounts(_tree,_value);\n            rebalanceInsert(_tree,_value);\n        } else if (cValue==_value) {\n            _tree.nodes[cValue].dupes++;\n            updateCount(_tree,_value);\n            updateCounts(_tree,_value);\n        } else {\n            insertHelper(_tree,cValue,(_value >= cValue),_value);\n        }\n    }\n\n    function insert(Tree storage _tree,uint _value) internal {\n        if (_value==0) {\n            _tree.nodes[_value].dupes++;\n        } else {\n            insertHelper(_tree,0,true,_value);\n        }\n    }\n\n    function rightmostLeaf(Tree storage _tree,uint _value) private view returns (uint leaf) {\n        uint child = _tree.nodes[_value].children[true];\n        if (child!=0) {\n            return rightmostLeaf(_tree,child);\n        } else {\n            return _value;\n        }\n    }\n\n    function zeroOut(Tree storage _tree,uint _value) private {\n        Node storage n = _tree.nodes[_value];\n        n.parent = 0;\n        n.side = false;\n        n.children[false] = 0;\n        n.children[true] = 0;\n        n.count = 0;\n        n.height = 0;\n        n.dupes = 0;\n    }\n\n    function removeBranch(Tree storage _tree,uint _value,uint _left) private {\n        uint ipn = rightmostLeaf(_tree,_left);\n        Node storage i = _tree.nodes[ipn];\n        uint dupes = i.dupes;\n        removeHelper(_tree,ipn);\n        Node storage n = _tree.nodes[_value];\n        uint parent = n.parent;\n        Node storage p = _tree.nodes[parent];\n        uint height = n.height;\n        bool side = n.side;\n        uint ncount = n.count;\n        uint right = n.children[true];\n        uint left = n.children[false];\n        p.children[side] = ipn;\n        i.parent = parent;\n        i.side = side;\n        i.count = ncount+dupes-n.dupes;\n        i.height = height;\n        i.dupes = dupes;\n        if (left!=0) {\n            i.children[false] = left;\n            _tree.nodes[left].parent = ipn;\n        }\n        if (right!=0) {\n            i.children[true] = right;\n            _tree.nodes[right].parent = ipn;\n        }\n        zeroOut(_tree,_value);\n        updateCounts(_tree,ipn);\n    }\n\n    function removeHelper(Tree storage _tree,uint _value) private {\n        Node storage n = _tree.nodes[_value];\n        uint parent = n.parent;\n        bool side = n.side;\n        Node storage p = _tree.nodes[parent];\n        uint left = n.children[false];\n        uint right = n.children[true];\n        if ((left == 0) && (right == 0)) {\n            p.children[side] = 0;\n            zeroOut(_tree,_value);\n            fixParents(_tree,parent,side);\n        } else if ((left != 0) && (right != 0)) {\n            removeBranch(_tree,_value,left);\n        } else {\n            uint child = left+right;\n            Node storage c = _tree.nodes[child];\n            p.children[side] = child;\n            c.parent = parent;\n            c.side = side;\n            zeroOut(_tree,_value);\n            fixParents(_tree,parent,side);\n        }\n    }\n\n    function remove(Tree storage _tree,uint _value) internal {\n        Node storage n = _tree.nodes[_value];\n        if (_value==0) {\n            if (n.dupes==0) {\n                return;\n            }\n        } else {\n            if (n.count==0) {\n                return;\n            }\n        }\n        if (n.dupes>0) {\n            n.dupes--;\n            if (_value!=0) {\n                n.count--;\n            }\n            fixParents(_tree,n.parent,n.side);\n        } else {\n            removeHelper(_tree,_value);\n        }\n    }\n\n}\n\n/**\n * RealMath: fixed-point math library, based on fractional and integer parts.\n * Using int256 as real216x40, which isn't in Solidity yet.\n * 40 fractional bits gets us down to 1E-12 precision, while still letting us\n * go up to galaxy scale counting in meters.\n * Internally uses the wider int256 for some math.\n *\n * Note that for addition, subtraction, and mod (%), you should just use the\n * built-in Solidity operators. Functions for these operations are not provided.\n *\n * Note that the fancy functions like sqrt, atan2, etc. aren't as accurate as\n * they should be. They are (hopefully) Good Enough for doing orbital mechanics\n * on block timescales in a game context, but they may not be good enough for\n * other applications.\n */\n\n\nlibrary RealMath {\n\n    /**\n     * How many total bits are there?\n     */\n    int256 constant REAL_BITS = 256;\n\n    /**\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n\n    /**\n     * How many integer bits are there?\n     */\n    int256 constant REAL_IBITS = REAL_BITS - REAL_FBITS;\n\n    /**\n     * What's the first non-fractional bit\n     */\n    int256 constant REAL_ONE = int256(1) << REAL_FBITS;\n\n    /**\n     * What's the last fractional bit?\n     */\n    int256 constant REAL_HALF = REAL_ONE >> 1;\n\n    /**\n     * What's two? Two is pretty useful.\n     */\n    int256 constant REAL_TWO = REAL_ONE << 1;\n\n    /**\n     * And our logarithms are based on ln(2).\n     */\n    int256 constant REAL_LN_TWO = 762123384786;\n\n    /**\n     * It is also useful to have Pi around.\n     */\n    int256 constant REAL_PI = 3454217652358;\n\n    /**\n     * And half Pi, to save on divides.\n     * TODO: That might not be how the compiler handles constants.\n     */\n    int256 constant REAL_HALF_PI = 1727108826179;\n\n    /**\n     * And two pi, which happens to be odd in its most accurate representation.\n     */\n    int256 constant REAL_TWO_PI = 6908435304715;\n\n    /**\n     * What's the sign bit?\n     */\n    int256 constant SIGN_MASK = int256(1) << 255;\n\n\n    /**\n     * Convert an integer to a real. Preserves sign.\n     */\n    function toReal(int216 ipart) internal pure returns (int256) {\n        return int256(ipart) * REAL_ONE;\n    }\n\n    /**\n     * Convert a real to an integer. Preserves sign.\n     */\n    function fromReal(int256 realValue) internal pure returns (int216) {\n        return int216(realValue / REAL_ONE);\n    }\n\n    /**\n     * Round a real to the nearest integral real value.\n     */\n    function round(int256 realValue) internal pure returns (int256) {\n        // First, truncate.\n        int216 ipart = fromReal(realValue);\n        if ((fractionalBits(realValue) & (uint40(1) << (REAL_FBITS - 1))) > 0) {\n            // High fractional bit is set. Round up.\n            if (realValue < int256(0)) {\n                // Rounding up for a negative number is rounding down.\n                ipart -= 1;\n            } else {\n                ipart += 1;\n            }\n        }\n        return toReal(ipart);\n    }\n\n    /**\n     * Get the absolute value of a real. Just the same as abs on a normal int256.\n     */\n    function abs(int256 realValue) internal pure returns (int256) {\n        if (realValue > 0) {\n            return realValue;\n        } else {\n            return -realValue;\n        }\n    }\n\n    /**\n     * Returns the fractional bits of a real. Ignores the sign of the real.\n     */\n    function fractionalBits(int256 realValue) internal pure returns (uint40) {\n        return uint40(abs(realValue) % REAL_ONE);\n    }\n\n    /**\n     * Get the fractional part of a real, as a real. Ignores sign (so fpart(-0.5) is 0.5).\n     */\n    function fpart(int256 realValue) internal pure returns (int256) {\n        // This gets the fractional part but strips the sign\n        return abs(realValue) % REAL_ONE;\n    }\n\n    /**\n     * Get the fractional part of a real, as a real. Respects sign (so fpartSigned(-0.5) is -0.5).\n     */\n    function fpartSigned(int256 realValue) internal pure returns (int256) {\n        // This gets the fractional part but strips the sign\n        int256 fractional = fpart(realValue);\n        if (realValue < 0) {\n            // Add the negative sign back in.\n            return -fractional;\n        } else {\n            return fractional;\n        }\n    }\n\n    /**\n     * Get the integer part of a fixed point value.\n     */\n    function ipart(int256 realValue) internal pure returns (int256) {\n        // Subtract out the fractional part to get the real part.\n        return realValue - fpartSigned(realValue);\n    }\n\n    /**\n     * Multiply one real by another. Truncates overflows.\n     */\n    function mul(int256 realA, int256 realB) internal pure returns (int256) {\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\n        return int256((int256(realA) * int256(realB)) >> REAL_FBITS);\n    }\n\n    /**\n     * Divide one real by another real. Truncates overflows.\n     */\n    function div(int256 realNumerator, int256 realDenominator) internal pure returns (int256) {\n        // We use the reverse of the multiplication trick: convert numerator from\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n        return int256((int256(realNumerator) * REAL_ONE) / int256(realDenominator));\n    }\n\n    /**\n     * Create a real from a rational fraction.\n     */\n    function fraction(int216 numerator, int216 denominator) internal pure returns (int256) {\n        return div(toReal(numerator), toReal(denominator));\n    }\n\n    // Now we have some fancy math things (like pow and trig stuff). This isn't\n    // in the RealMath that was deployed with the original Macroverse\n    // deployment, so it needs to be linked into your contract statically.\n\n    /**\n     * Raise a number to a positive integer power in O(log power) time.\n     * See <https://stackoverflow.com/a/101613>\n     */\n    function ipow(int256 realBase, int216 exponent) internal pure returns (int256) {\n        if (exponent < 0) {\n            // Negative powers are not allowed here.\n            revert();\n        }\n\n        int256 tempRealBase = realBase;\n        int256 tempExponent = exponent;\n\n        // Start with the 0th power\n        int256 realResult = REAL_ONE;\n        while (tempExponent != 0) {\n            // While there are still bits set\n            if ((tempExponent & 0x1) == 0x1) {\n                // If the low bit is set, multiply in the (many-times-squared) base\n                realResult = mul(realResult, tempRealBase);\n            }\n            // Shift off the low bit\n            tempExponent = tempExponent >> 1;\n            // Do the squaring\n            tempRealBase = mul(tempRealBase, tempRealBase);\n        }\n\n        // Return the final result.\n        return realResult;\n    }\n\n    /**\n     * Zero all but the highest set bit of a number.\n     * See <https://stackoverflow.com/a/53184>\n     */\n    function hibit(uint256 _val) internal pure returns (uint256) {\n        // Set all the bits below the highest set bit\n        uint256 val = _val;\n        val |= (val >> 1);\n        val |= (val >> 2);\n        val |= (val >> 4);\n        val |= (val >> 8);\n        val |= (val >> 16);\n        val |= (val >> 32);\n        val |= (val >> 64);\n        val |= (val >> 128);\n        return val ^ (val >> 1);\n    }\n\n    /**\n     * Given a number with one bit set, finds the index of that bit.\n     */\n    function findbit(uint256 val) internal pure returns (uint8 index) {\n        index = 0;\n        // We and the value with alternating bit patters of various pitches to find it.\n        if (val & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA != 0) {\n            // Picth 1\n            index |= 1;\n        }\n        if (val & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC != 0) {\n            // Pitch 2\n            index |= 2;\n        }\n        if (val & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 != 0) {\n            // Pitch 4\n            index |= 4;\n        }\n        if (val & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 != 0) {\n            // Pitch 8\n            index |= 8;\n        }\n        if (val & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 != 0) {\n            // Pitch 16\n            index |= 16;\n        }\n        if (val & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 != 0) {\n            // Pitch 32\n            index |= 32;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000 != 0) {\n            // Pitch 64\n            index |= 64;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 != 0) {\n            // Pitch 128\n            index |= 128;\n        }\n    }\n\n    /**\n     * Shift realArg left or right until it is between 1 and 2. Return the\n     * rescaled value, and the number of bits of right shift applied. Shift may be negative.\n     *\n     * Expresses realArg as realScaled * 2^shift, setting shift to put realArg between [1 and 2).\n     *\n     * Rejects 0 or negative arguments.\n     */\n    function rescale(int256 realArg) internal pure returns (int256 realScaled, int216 shift) {\n        if (realArg <= 0) {\n            // Not in domain!\n            revert();\n        }\n\n        // Find the high bit\n        int216 highBit = findbit(hibit(uint256(realArg)));\n\n        // We'll shift so the high bit is the lowest non-fractional bit.\n        shift = highBit - int216(REAL_FBITS);\n\n        if (shift < 0) {\n            // Shift left\n            realScaled = realArg << -shift;\n        } else if (shift >= 0) {\n            // Shift right\n            realScaled = realArg >> shift;\n        }\n    }\n\n    /**\n     * Calculate the natural log of a number. Rescales the input value and uses\n     * the algorithm outlined at <https://math.stackexchange.com/a/977836> and\n     * the ipow implementation.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function lnLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\n        if (realArg <= 0) {\n            // Outside of acceptable domain\n            revert();\n        }\n\n        if (realArg == REAL_ONE) {\n            // Handle this case specially because people will want exactly 0 and\n            // not ~2^-39 ish.\n            return 0;\n        }\n\n        // We know it's positive, so rescale it to be between [1 and 2)\n        int256 realRescaled;\n        int216 shift;\n        (realRescaled, shift) = rescale(realArg);\n\n        // Compute the argument to iterate on\n        int256 realSeriesArg = div(realRescaled - REAL_ONE, realRescaled + REAL_ONE);\n\n        // We will accumulate the result here\n        int256 realSeriesResult = 0;\n\n        for (int216 n = 0; n < maxIterations; n++) {\n            // Compute term n of the series\n            int256 realTerm = div(ipow(realSeriesArg, 2 * n + 1), toReal(2 * n + 1));\n            // And add it in\n            realSeriesResult += realTerm;\n            if (realTerm == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n\n        // Double it to account for the factor of 2 outside the sum\n        realSeriesResult = mul(realSeriesResult, REAL_TWO);\n\n        // Now compute and return the overall result\n        return mul(toReal(shift), REAL_LN_TWO) + realSeriesResult;\n\n    }\n\n    /**\n     * Calculate a natural logarithm with a sensible maximum iteration count to\n     * wait until convergence. Note that it is potentially possible to get an\n     * un-converged value; lack of convergence does not throw.\n     */\n    function ln(int256 realArg) internal pure returns (int256) {\n        return lnLimited(realArg, 100);\n    }\n\n    /**\n     * Calculate e^x. Uses the series given at\n     * <http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html>.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function expLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\n        // We will accumulate the result here\n        int256 realResult = 0;\n\n        // We use this to save work computing terms\n        int256 realTerm = REAL_ONE;\n\n        for (int216 n = 0; n < maxIterations; n++) {\n            // Add in the term\n            realResult += realTerm;\n\n            // Compute the next term\n            realTerm = mul(realTerm, div(realArg, toReal(n + 1)));\n\n            if (realTerm == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n\n        // Return the result\n        return realResult;\n\n    }\n\n    /**\n     * Calculate e^x with a sensible maximum iteration count to wait until\n     * convergence. Note that it is potentially possible to get an un-converged\n     * value; lack of convergence does not throw.\n     */\n    function exp(int256 realArg) internal pure returns (int256) {\n        return expLimited(realArg, 100);\n    }\n\n    /**\n     * Raise any number to any power, except for negative bases to fractional powers.\n     */\n    function pow(int256 realBase, int256 realExponent) internal pure returns (int256) {\n        if (realExponent == 0) {\n            // Anything to the 0 is 1\n            return REAL_ONE;\n        }\n\n        if (realBase == 0) {\n            if (realExponent < 0) {\n                // Outside of domain!\n                revert();\n            }\n            // Otherwise it's 0\n            return 0;\n        }\n\n        if (fpart(realExponent) == 0) {\n            // Anything (even a negative base) is super easy to do to an integer power.\n\n            if (realExponent > 0) {\n                // Positive integer power is easy\n                return ipow(realBase, fromReal(realExponent));\n            } else {\n                // Negative integer power is harder\n                return div(REAL_ONE, ipow(realBase, fromReal(-realExponent)));\n            }\n        }\n\n        if (realBase < 0) {\n            // It's a negative base to a non-integer power.\n            // In general pow(-x^y) is undefined, unless y is an int or some\n            // weird rational-number-based relationship holds.\n            revert();\n        }\n\n        // If it's not a special case, actually do it.\n        return exp(mul(realExponent, ln(realBase)));\n    }\n\n    /**\n     * Compute the square root of a number.\n     */\n    function sqrt(int256 realArg) internal pure returns (int256) {\n        return pow(realArg, REAL_HALF);\n    }\n\n    /**\n     * Compute the sin of a number to a certain number of Taylor series terms.\n     */\n    function sinLimited(int256 _realArg, int216 maxIterations) internal pure returns (int256) {\n        // First bring the number into 0 to 2 pi\n        // TODO: This will introduce an error for very large numbers, because the error in our Pi will compound.\n        // But for actual reasonable angle values we should be fine.\n        int256 realArg = _realArg;\n        realArg = realArg % REAL_TWO_PI;\n\n        int256 accumulator = REAL_ONE;\n\n        // We sum from large to small iteration so that we can have higher powers in later terms\n        for (int216 iteration = maxIterations - 1; iteration >= 0; iteration--) {\n            accumulator = REAL_ONE - mul(div(mul(realArg, realArg), toReal((2 * iteration + 2) * (2 * iteration + 3))), accumulator);\n            // We can't stop early; we need to make it to the first term.\n        }\n\n        return mul(realArg, accumulator);\n    }\n\n    /**\n     * Calculate sin(x) with a sensible maximum iteration count to wait until\n     * convergence.\n     */\n    function sin(int256 realArg) internal pure returns (int256) {\n        return sinLimited(realArg, 15);\n    }\n\n    /**\n     * Calculate cos(x).\n     */\n    function cos(int256 realArg) internal pure returns (int256) {\n        return sin(realArg + REAL_HALF_PI);\n    }\n\n    /**\n     * Calculate tan(x). May overflow for large results. May throw if tan(x)\n     * would be infinite, or return an approximation, or overflow.\n     */\n    function tan(int256 realArg) internal pure returns (int256) {\n        return div(sin(realArg), cos(realArg));\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC827 interface, an extension of ERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals.\n */\ncontract ERC827 is ERC20 {\n\n    function approveAndCall(address _spender,uint256 _value,bytes _data) public payable returns(bool);\n\n    function transferAndCall(address _to,uint256 _value,bytes _data) public payable returns(bool);\n\n    function transferFromAndCall(address _from,address _to,uint256 _value,bytes _data) public payable returns(bool);\n\n}\n\n/**\n * @title ERC827, an extension of ERC20 token standard\n *\n * @dev Implementation the ERC827, following the ERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals. Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, StandardToken {\n\n  /**\n   * @dev Addition to ERC20 token methods. It allows to\n   * approve the transfer of value and execute a call with the sent data.\n   * Beware that changing an allowance with this method brings the risk that\n   * someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race condition\n   * is to first reduce the spender's allowance to 0 and set the desired value\n   * afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address that will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   * @return true if the call function was executed successfully\n   */\n    function approveAndCall(\n        address _spender,\n        uint256 _value,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.approve(_spender, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * address and execute a call with the sent data on the same transaction\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transfer(_to, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n   * another and make a contract call on the same transaction\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferFromAndCall(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes _data\n    )\n    public payable returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transferFrom(_from, _to, _value);\n\n        // solium-disable-next-line security/no-call-value\n        require(_to.call.value(msg.value)(_data));\n        return true;\n    }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function increaseApprovalAndCall(\n        address _spender,\n        uint _addedValue,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.increaseApproval(_spender, _addedValue);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function decreaseApprovalAndCall(\n        address _spender,\n        uint _subtractedValue,\n        bytes _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.decreaseApproval(_spender, _subtractedValue);\n\n        // solium-disable-next-line security/no-call-value\n        require(_spender.call.value(msg.value)(_data));\n\n        return true;\n    }\n\n}\n\n/**\n * @title DAOToken, base on zeppelin contract.\n * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\n */\n\ncontract DAOToken is ERC827Token,MintableToken,BurnableToken {\n\n    string public name;\n    string public symbol;\n    // solium-disable-next-line uppercase\n    uint8 public constant decimals = 18;\n    uint public cap;\n\n    /**\n    * @dev Constructor\n    * @param _name - token name\n    * @param _symbol - token symbol\n    * @param _cap - token cap - 0 value means no cap\n    */\n    constructor(string _name, string _symbol,uint _cap) public {\n        name = _name;\n        symbol = _symbol;\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        if (cap > 0)\n            require(totalSupply_.add(_amount) <= cap);\n        return super.mint(_to, _amount);\n    }\n}\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\n\ncontract Reputation is Ownable {\n    using SafeMath for uint;\n\n    mapping (address => uint256) public balances;\n    uint256 public totalSupply;\n    uint public decimals = 18;\n\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function reputationOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Generates `_amount` of reputation that are assigned to `_to`\n    * @param _to The address that will be assigned the new reputation\n    * @param _amount The quantity of reputation to be generated\n    * @return True if the reputation are generated correctly\n    */\n    function mint(address _to, uint _amount)\n    public\n    onlyOwner\n    returns (bool)\n    {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Burns `_amount` of reputation from `_from`\n    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n    * @param _from The address that will lose the reputation\n    * @param _amount The quantity of reputation to burn\n    * @return True if the reputation are burned correctly\n    */\n    function burn(address _from, uint _amount)\n    public\n    onlyOwner\n    returns (bool)\n    {\n        uint amountMinted = _amount;\n        if (balances[_from] < _amount) {\n            amountMinted = balances[_from];\n        }\n        totalSupply = totalSupply.sub(amountMinted);\n        balances[_from] = balances[_from].sub(amountMinted);\n        emit Burn(_from, amountMinted);\n        return true;\n    }\n}\n\n/**\n * @title An Avatar holds tokens, reputation and ether for a controller\n */\ncontract Avatar is Ownable {\n    bytes32 public orgName;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n\n    event GenericAction(address indexed _action, bytes32[] _params);\n    event SendEther(uint _amountInWei, address indexed _to);\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\n    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\n    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\n    event ReceiveEther(address indexed _sender, uint _value);\n\n    /**\n    * @dev the constructor takes organization name, native token and reputation system\n    and creates an avatar for a controller\n    */\n    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n        orgName = _orgName;\n        nativeToken = _nativeToken;\n        nativeReputation = _nativeReputation;\n    }\n\n    /**\n    * @dev enables an avatar to receive ethers\n    */\n    function() public payable {\n        emit ReceiveEther(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @return the return bytes of the called contract's function.\n    */\n    function genericCall(address _contract,bytes _data) public onlyOwner {\n        // solium-disable-next-line security/no-low-level-calls\n        bool result = _contract.call(_data);\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n        // Copy the returned data.\n        returndatacopy(0, 0, returndatasize)\n\n        switch result\n        // call returns 0 on error.\n        case 0 { revert(0, returndatasize) }\n        default { return(0, returndatasize) }\n        }\n    }\n\n    /**\n    * @dev send ethers from the avatar's wallet\n    * @param _amountInWei amount to send in Wei units\n    * @param _to send the ethers to this address\n    * @return bool which represents success\n    */\n    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\n        _to.transfer(_amountInWei);\n        emit SendEther(_amountInWei, _to);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer\n    * @param _externalToken the token contract\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\n    public onlyOwner returns(bool)\n    {\n        _externalToken.transfer(_to, _value);\n        emit ExternalTokenTransfer(_externalToken, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer from a specific account\n    * @param _externalToken the token contract\n    * @param _from the account to spend token from\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransferFrom(\n        StandardToken _externalToken,\n        address _from,\n        address _to,\n        uint _value\n    )\n    public onlyOwner returns(bool)\n    {\n        _externalToken.transferFrom(_from, _to, _value);\n        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev increase approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\n    public onlyOwner returns(bool)\n    {\n        _externalToken.increaseApproval(_spender, _addedValue);\n        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n        return true;\n    }\n\n    /**\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\n    public onlyOwner returns(bool)\n    {\n        _externalToken.decreaseApproval(_spender, _subtractedValue);\n        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\n        return true;\n    }\n\n}\n\ncontract UniversalSchemeInterface {\n\n    function updateParameters(bytes32 _hashedParameters) public;\n\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\n}\n\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens ,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ninterface ControllerInterface {\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n    */\n    function mintReputation(uint256 _amount, address _to,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n    external\n    returns(bool);\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister a scheme\n     * @param _avatar address\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme,address _avatar)\n    external\n    returns(bool);\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool);\n\n    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\n\n    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\n\n    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\n\n    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\n\n    /**\n     * @dev globalConstraintsCount return the global constraint pre and post count\n     * @return uint globalConstraintsPre count.\n     * @return uint globalConstraintsPost count.\n     */\n    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\n\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n    external returns(bool);\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n    external  returns(bool);\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController,address _avatar)\n    external returns(bool);\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @return bytes32  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract,bytes _data,address _avatar)\n    external\n    returns(bytes32);\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function sendEther(uint _amountInWei, address _to,address _avatar)\n    external returns(bool);\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev increase approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar)\n    external\n    view\n    returns(address);\n}\n\ncontract UniversalScheme is Ownable, UniversalSchemeInterface {\n    bytes32 public hashedParameters; // For other parameters.\n\n    function updateParameters(\n        bytes32 _hashedParameters\n    )\n        public\n        onlyOwner\n    {\n        hashedParameters = _hashedParameters;\n    }\n\n    /**\n    *  @dev get the parameters for the current scheme from the controller\n    */\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\n        return ControllerInterface(_avatar.owner()).getSchemeParameters(this,address(_avatar));\n    }\n}\ncontract ExecutableInterface {\n    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\n}\n\ninterface IntVoteInterface {\n    //When implementing this interface please do not only override function and modifier,\n    //but also to keep the modifiers on the overridden functions.\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n    modifier votable(bytes32 _proposalId) {revert(); _;}\n\n    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\n    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\n    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n     * @param _avatar an address to be sent as the payload to the _executable contract.\n     * @param _executable This contract will be executed when vote is over.\n     * @param _proposer address\n     * @return proposal's id.\n     */\n    function propose(\n        uint _numOfChoices,\n        bytes32 _proposalParameters,\n        address _avatar,\n        ExecutableInterface _executable,\n        address _proposer\n        ) external returns(bytes32);\n\n    // Only owned proposals and only the owner:\n    function cancelProposal(bytes32 _proposalId) external returns(bool);\n\n    // Only owned proposals and only the owner:\n    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external returns(bool);\n\n    function vote(bytes32 _proposalId, uint _vote) external returns(bool);\n\n    function voteWithSpecifiedAmounts(\n        bytes32 _proposalId,\n        uint _vote,\n        uint _rep,\n        uint _token) external returns(bool);\n\n    function cancelVote(bytes32 _proposalId) external;\n\n    //@dev execute check if the proposal has been decided, and if so, execute the proposal\n    //@param _proposalId the id of the proposal\n    //@return bool true - the proposal has been executed\n    //             false - otherwise.\n    function execute(bytes32 _proposalId) external returns(bool);\n\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\n\n    function isVotable(bytes32 _proposalId) external view returns(bool);\n\n    /**\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n     * @param _proposalId the ID of the proposal\n     * @param _choice the index in the\n     * @return voted reputation for the given choice\n     */\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\n\n    /**\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n     * @return bool true or false\n     */\n    function isAbstainAllow() external pure returns(bool);\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\n}\n\n\n\n\n\n/**\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\n */\n\n\ncontract GenesisProtocol is IntVoteInterface,UniversalScheme {\n    using SafeMath for uint;\n    using RealMath for int216;\n    using RealMath for int256;\n    using ECRecovery for bytes32;\n    using OrderStatisticTree for OrderStatisticTree.Tree;\n\n    enum ProposalState { None ,Closed, Executed, PreBoosted,Boosted,QuietEndingPeriod }\n    enum ExecutionState { None, PreBoostedTimeOut, PreBoostedBarCrossed, BoostedTimeOut,BoostedBarCrossed }\n\n    //Organization's parameters\n    struct Parameters {\n        uint preBoostedVoteRequiredPercentage; // the absolute vote percentages bar.\n        uint preBoostedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\n        uint boostedVotePeriodLimit; //the time limit for a proposal to be in an relative voting mode.\n        uint thresholdConstA;//constant A for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\n        uint thresholdConstB;//constant B for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\n        uint minimumStakingFee; //minimum staking fee allowed.\n        uint quietEndingPeriod; //quite ending period\n        uint proposingRepRewardConstA;//constant A for calculate proposer reward. proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\n        uint proposingRepRewardConstB;//constant B for calculate proposing reward.proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\n        uint stakerFeeRatioForVoters; // The “ratio of stake” to be paid to voters.\n                                      // All stakers pay a portion of their stake to all voters, stakerFeeRatioForVoters * (s+ + s-).\n                                      //All voters (pre and during boosting period) divide this portion in proportion to their reputation.\n        uint votersReputationLossRatio;//Unsuccessful pre booster voters lose votersReputationLossRatio% of their reputation.\n        uint votersGainRepRatioFromLostRep; //the percentages of the lost reputation which is divided by the successful pre boosted voters,\n                                            //in proportion to their reputation.\n                                            //The rest (100-votersGainRepRatioFromLostRep)% of lost reputation is divided between the successful wagers,\n                                            //in proportion to their stake.\n        uint daoBountyConst;//The DAO adds up a bounty for successful staker.\n                            //The bounty formula is: s * daoBountyConst, where s+ is the wager staked for the proposal,\n                            //and  daoBountyConst is a constant factor that is configurable and changeable by the DAO given.\n                            //  daoBountyConst should be greater than stakerFeeRatioForVoters and less than 2 * stakerFeeRatioForVoters.\n        uint daoBountyLimit;//The daoBounty cannot be greater than daoBountyLimit.\n\n\n\n    }\n    struct Voter {\n        uint vote; // YES(1) ,NO(2)\n        uint reputation; // amount of voter's reputation\n        bool preBoosted;\n    }\n\n    struct Staker {\n        uint vote; // YES(1) ,NO(2)\n        uint amount; // amount of staker's stake\n        uint amountForBounty; // amount of staker's stake which will be use for bounty calculation\n    }\n\n    struct Proposal {\n        address avatar; // the organization's avatar the proposal is target to.\n        uint numOfChoices;\n        ExecutableInterface executable; // will be executed if the proposal will pass\n        uint votersStakes;\n        uint submittedTime;\n        uint boostedPhaseTime; //the time the proposal shift to relative mode.\n        ProposalState state;\n        uint winningVote; //the winning vote.\n        address proposer;\n        uint currentBoostedVotePeriodLimit;\n        bytes32 paramsHash;\n        uint daoBountyRemain;\n        uint[2] totalStakes;// totalStakes[0] - (amount staked minus fee) - Total number of tokens staked which can be redeemable by stakers.\n                            // totalStakes[1] - (amount staked) - Total number of redeemable tokens.\n        //      vote      reputation\n        mapping(uint    =>  uint     ) votes;\n        //      vote      reputation\n        mapping(uint    =>  uint     ) preBoostedVotes;\n        //      address     voter\n        mapping(address =>  Voter    ) voters;\n        //      vote        stakes\n        mapping(uint    =>  uint     ) stakes;\n        //      address  staker\n        mapping(address  => Staker   ) stakers;\n    }\n\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\n    event Stake(bytes32 indexed _proposalId, address indexed _avatar, address indexed _staker,uint _vote,uint _amount);\n    event Redeem(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n    event RedeemDaoBounty(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n    event RedeemReputation(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n\n    mapping(bytes=>bool) stakeSignatures; //stake signatures\n\n    uint constant public NUM_OF_CHOICES = 2;\n    uint constant public NO = 2;\n    uint constant public YES = 1;\n    uint public proposalsCnt; // Total number of proposals\n    mapping(address=>uint) orgBoostedProposalsCnt;\n    StandardToken public stakingToken;\n    mapping(address=>OrderStatisticTree.Tree) proposalsExpiredTimes; //proposals expired times\n\n    /**\n     * @dev Constructor\n     */\n    constructor(StandardToken _stakingToken) public\n    {\n        stakingToken = _stakingToken;\n    }\n\n  /**\n   * @dev Check that the proposal is votable (open and not executed yet)\n   */\n    modifier votable(bytes32 _proposalId) {\n        require(_isVotable(_proposalId));\n        _;\n    }\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _avatar an address to be sent as the payload to the _executable contract.\n     * @param _executable This contract will be executed when vote is over.\n     * @param _proposer address\n     * @return proposal's id.\n     */\n    function propose(uint _numOfChoices, bytes32 , address _avatar, ExecutableInterface _executable,address _proposer)\n        external\n        returns(bytes32)\n    {\n          // Check valid params and number of choices:\n        require(_numOfChoices == NUM_OF_CHOICES);\n        require(ExecutableInterface(_executable) != address(0));\n        //Check parameters existence.\n        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\n\n        require(parameters[paramsHash].preBoostedVoteRequiredPercentage > 0);\n        // Generate a unique ID:\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n        proposalsCnt++;\n        // Open proposal:\n        Proposal memory proposal;\n        proposal.numOfChoices = _numOfChoices;\n        proposal.avatar = _avatar;\n        proposal.executable = _executable;\n        proposal.state = ProposalState.PreBoosted;\n        // solium-disable-next-line security/no-block-members\n        proposal.submittedTime = now;\n        proposal.currentBoostedVotePeriodLimit = parameters[paramsHash].boostedVotePeriodLimit;\n        proposal.proposer = _proposer;\n        proposal.winningVote = NO;\n        proposal.paramsHash = paramsHash;\n        proposals[proposalId] = proposal;\n        emit NewProposal(proposalId, _avatar, _numOfChoices, _proposer, paramsHash);\n        return proposalId;\n    }\n\n  /**\n   * @dev Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n   */\n    function cancelProposal(bytes32 ) external returns(bool) {\n        //This is not allowed.\n        return false;\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stake(bytes32 _proposalId, uint _vote, uint _amount) external returns(bool) {\n        return _stake(_proposalId,_vote,_amount,msg.sender);\n    }\n\n    // Digest describing the data the user signs according EIP 712.\n    // Needs to match what is passed to Metamask.\n    bytes32 public constant DELEGATION_HASH_EIP712 =\n    keccak256(abi.encodePacked(\"address GenesisProtocolAddress\",\"bytes32 ProposalId\", \"uint Vote\",\"uint AmountToStake\",\"uint Nonce\"));\n    // web3.eth.sign prefix\n    string public constant ETH_SIGN_PREFIX= \"\\x19Ethereum Signed Message:\\n32\";\n\n    /**\n     * @dev stakeWithSignature function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @param _nonce nonce value ,it is part of the signature to ensure that\n              a signature can be received only once.\n     * @param _signatureType signature type\n              1 - for web3.eth.sign\n              2 - for eth_signTypedData according to EIP #712.\n     * @param _signature  - signed data by the staker\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stakeWithSignature(\n        bytes32 _proposalId,\n        uint _vote,\n        uint _amount,\n        uint _nonce,\n        uint _signatureType,\n        bytes _signature\n        )\n        external\n        returns(bool)\n        {\n        require(stakeSignatures[_signature] == false);\n        // Recreate the digest the user signed\n        bytes32 delegationDigest;\n        if (_signatureType == 2) {\n            delegationDigest = keccak256(\n                abi.encodePacked(\n                    DELEGATION_HASH_EIP712, keccak256(\n                        abi.encodePacked(\n                           address(this),\n                          _proposalId,\n                          _vote,\n                          _amount,\n                          _nonce)))\n            );\n        } else {\n            delegationDigest = keccak256(\n                abi.encodePacked(\n                    ETH_SIGN_PREFIX, keccak256(\n                        abi.encodePacked(\n                            address(this),\n                           _proposalId,\n                           _vote,\n                           _amount,\n                           _nonce)))\n            );\n        }\n        address staker = delegationDigest.recover(_signature);\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\n        require(staker!=address(0));\n        stakeSignatures[_signature] = true;\n        return _stake(_proposalId,_vote,_amount,staker);\n    }\n\n  /**\n   * @dev voting function\n   * @param _proposalId id of the proposal\n   * @param _vote NO(2) or YES(1).\n   * @return bool true - the proposal has been executed\n   *              false - otherwise.\n   */\n    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool) {\n        return internalVote(_proposalId, msg.sender, _vote, 0);\n    }\n\n  /**\n   * @dev voting function with owner functionality (can vote on behalf of someone else)\n   * @return bool true - the proposal has been executed\n   *              false - otherwise.\n   */\n    function ownerVote(bytes32 , uint , address ) external returns(bool) {\n      //This is not allowed.\n        return false;\n    }\n\n    function voteWithSpecifiedAmounts(bytes32 _proposalId,uint _vote,uint _rep,uint) external votable(_proposalId) returns(bool) {\n        return internalVote(_proposalId,msg.sender,_vote,_rep);\n    }\n\n  /**\n   * @dev Cancel the vote of the msg.sender.\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\n   * This function is here in order to comply to the IntVoteInterface .\n   */\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\n       //this is not allowed\n        return;\n    }\n\n  /**\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\n    * @param _proposalId the ID of the proposals\n    * @return uint that contains number of choices\n    */\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint) {\n        return proposals[_proposalId].numOfChoices;\n    }\n\n    /**\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n     * @param _proposalId the ID of the proposal\n     * @param _voter the address of the voter\n     * @return uint vote - the voters vote\n     *        uint reputation - amount of reputation committed by _voter to _proposalId\n     */\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n        Voter memory voter = proposals[_proposalId].voters[_voter];\n        return (voter.vote, voter.reputation);\n    }\n\n    /**\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n    * @param _proposalId the ID of the proposal\n    * @param _choice the index in the\n    * @return voted reputation for the given choice\n    */\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint) {\n        return proposals[_proposalId].votes[_choice];\n    }\n\n    /**\n    * @dev isVotable check if the proposal is votable\n    * @param _proposalId the ID of the proposal\n    * @return bool true or false\n    */\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\n        return _isVotable(_proposalId);\n    }\n\n    /**\n    * @dev proposalStatus return the total votes and stakes for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint preBoostedVotes YES\n    * @return uint preBoostedVotes NO\n    * @return uint stakersStakes\n    * @return uint totalRedeemableStakes\n    * @return uint total stakes YES\n    * @return uint total stakes NO\n    */\n    function proposalStatus(bytes32 _proposalId) external view returns(uint, uint, uint ,uint, uint ,uint) {\n        return (\n                proposals[_proposalId].preBoostedVotes[YES],\n                proposals[_proposalId].preBoostedVotes[NO],\n                proposals[_proposalId].totalStakes[0],\n                proposals[_proposalId].totalStakes[1],\n                proposals[_proposalId].stakes[YES],\n                proposals[_proposalId].stakes[NO]\n        );\n    }\n\n  /**\n    * @dev proposalAvatar return the avatar for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint total reputation supply\n    */\n    function proposalAvatar(bytes32 _proposalId) external view returns(address) {\n        return (proposals[_proposalId].avatar);\n    }\n\n  /**\n    * @dev scoreThresholdParams return the score threshold params for a given\n    * organization.\n    * @param _avatar the organization's avatar\n    * @return uint thresholdConstA\n    * @return uint thresholdConstB\n    */\n    function scoreThresholdParams(address _avatar) external view returns(uint,uint) {\n        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\n        Parameters memory params = parameters[paramsHash];\n        return (params.thresholdConstA,params.thresholdConstB);\n    }\n\n    /**\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\n      * @param _proposalId the ID of the proposal\n      * @param _staker staker address\n      * @return uint vote\n      * @return uint amount\n    */\n    function getStaker(bytes32 _proposalId,address _staker) external view returns(uint,uint) {\n        return (proposals[_proposalId].stakers[_staker].vote,proposals[_proposalId].stakers[_staker].amount);\n    }\n\n    /**\n      * @dev state return the state for a given proposal\n      * @param _proposalId the ID of the proposal\n      * @return ProposalState proposal state\n    */\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\n        return proposals[_proposalId].state;\n    }\n\n    /**\n    * @dev winningVote return the winningVote for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint winningVote\n    */\n    function winningVote(bytes32 _proposalId) external view returns(uint) {\n        return proposals[_proposalId].winningVote;\n    }\n\n   /**\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n    * @return bool true or false\n    */\n    function isAbstainAllow() external pure returns(bool) {\n        return false;\n    }\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max) {\n        return (NUM_OF_CHOICES,NUM_OF_CHOICES);\n    }\n\n    /**\n    * @dev execute check if the proposal has been decided, and if so, execute the proposal\n    * @param _proposalId the id of the proposal\n    * @return bool true - the proposal has been executed\n    *              false - otherwise.\n   */\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev redeem a reward for a successful stake, vote or proposing.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return rewards -\n     *         rewards[0] - stakerTokenAmount\n     *         rewards[1] - stakerReputationAmount\n     *         rewards[2] - voterTokenAmount\n     *         rewards[3] - voterReputationAmount\n     *         rewards[4] - proposerReputationAmount\n     * @return reputation - redeem reputation\n     */\n    function redeem(bytes32 _proposalId,address _beneficiary) public returns (uint[5] rewards) {\n        Proposal storage proposal = proposals[_proposalId];\n        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed),\"wrong proposal state\");\n        Parameters memory params = parameters[proposal.paramsHash];\n        uint amount;\n        uint reputation;\n        uint lostReputation;\n        if (proposal.winningVote == YES) {\n            lostReputation = proposal.preBoostedVotes[NO];\n        } else {\n            lostReputation = proposal.preBoostedVotes[YES];\n        }\n        lostReputation = (lostReputation * params.votersReputationLossRatio)/100;\n        //as staker\n        Staker storage staker = proposal.stakers[_beneficiary];\n        if ((staker.amount>0) &&\n             (staker.vote == proposal.winningVote)) {\n            uint totalWinningStakes = proposal.stakes[proposal.winningVote];\n            if (totalWinningStakes != 0) {\n                rewards[0] = (staker.amount * proposal.totalStakes[0]) / totalWinningStakes;\n            }\n            if (proposal.state != ProposalState.Closed) {\n                rewards[1] = (staker.amount * ( lostReputation - ((lostReputation * params.votersGainRepRatioFromLostRep)/100)))/proposal.stakes[proposal.winningVote];\n            }\n            staker.amount = 0;\n        }\n        //as voter\n        Voter storage voter = proposal.voters[_beneficiary];\n        if ((voter.reputation != 0 ) && (voter.preBoosted)) {\n            uint preBoostedVotes = proposal.preBoostedVotes[YES] + proposal.preBoostedVotes[NO];\n            if (preBoostedVotes>0) {\n                rewards[2] = ((proposal.votersStakes * voter.reputation) / preBoostedVotes);\n            }\n            if (proposal.state == ProposalState.Closed) {\n              //give back reputation for the voter\n                rewards[3] = ((voter.reputation * params.votersReputationLossRatio)/100);\n            } else if (proposal.winningVote == voter.vote ) {\n                rewards[3] = (((voter.reputation * params.votersReputationLossRatio)/100) +\n                (((voter.reputation * lostReputation * params.votersGainRepRatioFromLostRep)/100)/preBoostedVotes));\n            }\n            voter.reputation = 0;\n        }\n        //as proposer\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\n            rewards[4] = (params.proposingRepRewardConstA.mul(proposal.votes[YES]+proposal.votes[NO]) + params.proposingRepRewardConstB.mul(proposal.votes[YES]-proposal.votes[NO]))/1000;\n            proposal.proposer = 0;\n        }\n        amount = rewards[0] + rewards[2];\n        reputation = rewards[1] + rewards[3] + rewards[4];\n        if (amount != 0) {\n            proposal.totalStakes[1] = proposal.totalStakes[1].sub(amount);\n            require(stakingToken.transfer(_beneficiary, amount));\n            emit Redeem(_proposalId,proposal.avatar,_beneficiary,amount);\n        }\n        if (reputation != 0 ) {\n            ControllerInterface(Avatar(proposal.avatar).owner()).mintReputation(reputation,_beneficiary,proposal.avatar);\n            emit RedeemReputation(_proposalId,proposal.avatar,_beneficiary,reputation);\n        }\n    }\n\n    /**\n     * @dev redeemDaoBounty a reward for a successful stake, vote or proposing.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return redeemedAmount - redeem token amount\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the avatar )\n     */\n    function redeemDaoBounty(bytes32 _proposalId,address _beneficiary) public returns(uint redeemedAmount,uint potentialAmount) {\n        Proposal storage proposal = proposals[_proposalId];\n        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed));\n        uint totalWinningStakes = proposal.stakes[proposal.winningVote];\n        if (\n          // solium-disable-next-line operator-whitespace\n            (proposal.stakers[_beneficiary].amountForBounty>0)&&\n            (proposal.stakers[_beneficiary].vote == proposal.winningVote)&&\n            (proposal.winningVote == YES)&&\n            (totalWinningStakes != 0))\n        {\n            //as staker\n            Parameters memory params = parameters[proposal.paramsHash];\n            uint beneficiaryLimit = (proposal.stakers[_beneficiary].amountForBounty.mul(params.daoBountyLimit)) / totalWinningStakes;\n            potentialAmount = (params.daoBountyConst.mul(proposal.stakers[_beneficiary].amountForBounty))/100;\n            if (potentialAmount > beneficiaryLimit) {\n                potentialAmount = beneficiaryLimit;\n            }\n        }\n        if ((potentialAmount != 0)&&(stakingToken.balanceOf(proposal.avatar) >= potentialAmount)) {\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\n            require(ControllerInterface(Avatar(proposal.avatar).owner()).externalTokenTransfer(stakingToken,_beneficiary,potentialAmount,proposal.avatar));\n            proposal.stakers[_beneficiary].amountForBounty = 0;\n            redeemedAmount = potentialAmount;\n            emit RedeemDaoBounty(_proposalId,proposal.avatar,_beneficiary,redeemedAmount);\n        }\n    }\n\n    /**\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\n     * @param _proposalId the ID of the proposal\n     * @return bool true or false.\n     */\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\n        Proposal memory proposal = proposals[_proposalId];\n        return (_score(_proposalId) >= threshold(proposal.paramsHash,proposal.avatar));\n    }\n\n    /**\n     * @dev score return the proposal score\n     * @param _proposalId the ID of the proposal\n     * @return uint proposal score.\n     */\n    function score(bytes32 _proposalId) public view returns(int) {\n        return _score(_proposalId);\n    }\n\n    /**\n     * @dev getBoostedProposalsCount return the number of boosted proposal for an organization\n     * @param _avatar the organization avatar\n     * @return uint number of boosted proposals\n     */\n    function getBoostedProposalsCount(address _avatar) public view returns(uint) {\n        uint expiredProposals;\n        if (proposalsExpiredTimes[_avatar].count() != 0) {\n          // solium-disable-next-line security/no-block-members\n            expiredProposals = proposalsExpiredTimes[_avatar].rank(now);\n        }\n        return orgBoostedProposalsCnt[_avatar].sub(expiredProposals);\n    }\n\n    /**\n     * @dev threshold return the organization's score threshold which required by\n     * a proposal to shift to boosted state.\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\n     * @param _avatar the organization avatar\n     * @param _paramsHash the organization parameters hash\n     * @return int organization's score threshold.\n     */\n    function threshold(bytes32 _paramsHash,address _avatar) public view returns(int) {\n        uint boostedProposals = getBoostedProposalsCount(_avatar);\n        int216 e = 2;\n\n        Parameters memory params = parameters[_paramsHash];\n        require(params.thresholdConstB > 0,\"should be a valid parameter hash\");\n        int256 power = int216(boostedProposals).toReal().div(int216(params.thresholdConstB).toReal());\n\n        if (power.fromReal() > 100 ) {\n            power = int216(100).toReal();\n        }\n        int256 res = int216(params.thresholdConstA).toReal().mul(e.toReal().pow(power));\n        return res.fromReal();\n    }\n\n    /**\n     * @dev hash the parameters, save them if necessary, and return the hash value\n     * @param _params a parameters array\n     *    _params[0] - _preBoostedVoteRequiredPercentage,\n     *    _params[1] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\n     *    _params[2] -_boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\n     *    _params[3] -_thresholdConstA\n     *    _params[4] -_thresholdConstB\n     *    _params[5] -_minimumStakingFee\n     *    _params[6] -_quietEndingPeriod\n     *    _params[7] -_proposingRepRewardConstA\n     *    _params[8] -_proposingRepRewardConstB\n     *    _params[9] -_stakerFeeRatioForVoters\n     *    _params[10] -_votersReputationLossRatio\n     *    _params[11] -_votersGainRepRatioFromLostRep\n     *    _params[12] - _daoBountyConst\n     *    _params[13] - _daoBountyLimit\n    */\n    function setParameters(\n        uint[14] _params //use array here due to stack too deep issue.\n    )\n    public\n    returns(bytes32)\n    {\n        require(_params[0] <= 100 && _params[0] > 0,\"0 < preBoostedVoteRequiredPercentage <= 100\");\n        require(_params[4] > 0 && _params[4] <= 100000000,\"0 < thresholdConstB < 100000000 \");\n        require(_params[3] <= 100000000 ether,\"thresholdConstA <= 100000000 wei\");\n        require(_params[9] <= 100,\"stakerFeeRatioForVoters <= 100\");\n        require(_params[10] <= 100,\"votersReputationLossRatio <= 100\");\n        require(_params[11] <= 100,\"votersGainRepRatioFromLostRep <= 100\");\n        require(_params[2] >= _params[6],\"boostedVotePeriodLimit >= quietEndingPeriod\");\n        require(_params[7] <= 100000000,\"proposingRepRewardConstA <= 100000000\");\n        require(_params[8] <= 100000000,\"proposingRepRewardConstB <= 100000000\");\n        require(_params[12] <= (2 * _params[9]),\"daoBountyConst <= 2 * stakerFeeRatioForVoters\");\n        require(_params[12] >= _params[9],\"daoBountyConst >= stakerFeeRatioForVoters\");\n\n\n        bytes32 paramsHash = getParametersHash(_params);\n        parameters[paramsHash] = Parameters({\n            preBoostedVoteRequiredPercentage: _params[0],\n            preBoostedVotePeriodLimit: _params[1],\n            boostedVotePeriodLimit: _params[2],\n            thresholdConstA:_params[3],\n            thresholdConstB:_params[4],\n            minimumStakingFee: _params[5],\n            quietEndingPeriod: _params[6],\n            proposingRepRewardConstA: _params[7],\n            proposingRepRewardConstB:_params[8],\n            stakerFeeRatioForVoters:_params[9],\n            votersReputationLossRatio:_params[10],\n            votersGainRepRatioFromLostRep:_params[11],\n            daoBountyConst:_params[12],\n            daoBountyLimit:_params[13]\n        });\n        return paramsHash;\n    }\n\n  /**\n   * @dev hashParameters returns a hash of the given parameters\n   */\n    function getParametersHash(\n        uint[14] _params) //use array here due to stack too deep issue.\n        public\n        pure\n        returns(bytes32)\n        {\n        return keccak256(\n            abi.encodePacked(\n            _params[0],\n            _params[1],\n            _params[2],\n            _params[3],\n            _params[4],\n            _params[5],\n            _params[6],\n            _params[7],\n            _params[8],\n            _params[9],\n            _params[10],\n            _params[11],\n            _params[12],\n            _params[13]));\n    }\n\n    /**\n    * @dev execute check if the proposal has been decided, and if so, execute the proposal\n    * @param _proposalId the id of the proposal\n    * @return bool true - the proposal has been executed\n    *              false - otherwise.\n   */\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        Proposal memory tmpProposal = proposal;\n        uint totalReputation = Avatar(proposal.avatar).nativeReputation().totalSupply();\n        uint executionBar = totalReputation * params.preBoostedVoteRequiredPercentage/100;\n        ExecutionState executionState = ExecutionState.None;\n\n        if (proposal.state == ProposalState.PreBoosted) {\n            // solium-disable-next-line security/no-block-members\n            if ((now - proposal.submittedTime) >= params.preBoostedVotePeriodLimit) {\n                proposal.state = ProposalState.Closed;\n                proposal.winningVote = NO;\n                executionState = ExecutionState.PreBoostedTimeOut;\n             } else if (proposal.votes[proposal.winningVote] > executionBar) {\n              // someone crossed the absolute vote execution bar.\n                proposal.state = ProposalState.Executed;\n                executionState = ExecutionState.PreBoostedBarCrossed;\n               } else if ( shouldBoost(_proposalId)) {\n                //change proposal mode to boosted mode.\n                proposal.state = ProposalState.Boosted;\n                // solium-disable-next-line security/no-block-members\n                proposal.boostedPhaseTime = now;\n                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n                orgBoostedProposalsCnt[proposal.avatar]++;\n              }\n           }\n\n        if ((proposal.state == ProposalState.Boosted) ||\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\n            // solium-disable-next-line security/no-block-members\n            if ((now - proposal.boostedPhaseTime) >= proposal.currentBoostedVotePeriodLimit) {\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\n                proposal.state = ProposalState.Executed;\n                executionState = ExecutionState.BoostedTimeOut;\n             } else if (proposal.votes[proposal.winningVote] > executionBar) {\n               // someone crossed the absolute vote execution bar.\n                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n                proposal.state = ProposalState.Executed;\n                executionState = ExecutionState.BoostedBarCrossed;\n            }\n       }\n        if (executionState != ExecutionState.None) {\n            if (proposal.winningVote == YES) {\n                uint daoBountyRemain = (params.daoBountyConst.mul(proposal.stakes[proposal.winningVote]))/100;\n                if (daoBountyRemain > params.daoBountyLimit) {\n                    daoBountyRemain = params.daoBountyLimit;\n                }\n                proposal.daoBountyRemain = daoBountyRemain;\n            }\n            emit ExecuteProposal(_proposalId, proposal.avatar, proposal.winningVote, totalReputation);\n            emit GPExecuteProposal(_proposalId, executionState);\n            (tmpProposal.executable).execute(_proposalId, tmpProposal.avatar, int(proposal.winningVote));\n        }\n        return (executionState != ExecutionState.None);\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @param _staker the staker address\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function _stake(bytes32 _proposalId, uint _vote, uint _amount,address _staker) internal returns(bool) {\n        // 0 is not a valid vote.\n\n        require(_vote <= NUM_OF_CHOICES && _vote > 0);\n        require(_amount > 0);\n        if (_execute(_proposalId)) {\n            return true;\n        }\n\n        Proposal storage proposal = proposals[_proposalId];\n\n        if (proposal.state != ProposalState.PreBoosted) {\n            return false;\n        }\n\n        // enable to increase stake only on the previous stake vote\n        Staker storage staker = proposal.stakers[_staker];\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\n            return false;\n        }\n\n        uint amount = _amount;\n        Parameters memory params = parameters[proposal.paramsHash];\n        require(amount >= params.minimumStakingFee);\n        require(stakingToken.transferFrom(_staker, address(this), amount));\n        proposal.totalStakes[1] = proposal.totalStakes[1].add(amount); //update totalRedeemableStakes\n        staker.amount += amount;\n        staker.amountForBounty = staker.amount;\n        staker.vote = _vote;\n\n        proposal.votersStakes += (params.stakerFeeRatioForVoters * amount)/100;\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\n        amount = amount - ((params.stakerFeeRatioForVoters*amount)/100);\n\n        proposal.totalStakes[0] = amount.add(proposal.totalStakes[0]);\n      // Event:\n        emit Stake(_proposalId, proposal.avatar, _staker, _vote, _amount);\n      // execute the proposal if this vote was decisive:\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n     * @param _proposalId id of the proposal\n     * @param _voter used in case the vote is cast for someone else\n     * @param _vote a value between 0 to and the proposal's number of choices.\n     * @param _rep how many reputation the voter would like to stake for this vote.\n     *         if  _rep==0 so the voter full reputation will be use.\n     * @return true in case of proposal execution otherwise false\n     * throws if proposal is not open or if it has been executed\n     * NB: executes the proposal if a decision has been reached\n     */\n    function internalVote(bytes32 _proposalId, address _voter, uint _vote, uint _rep) internal returns(bool) {\n        // 0 is not a valid vote.\n        require(_vote <= NUM_OF_CHOICES && _vote > 0,\"0 < _vote <= 2\");\n        if (_execute(_proposalId)) {\n            return true;\n        }\n\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\n        Proposal storage proposal = proposals[_proposalId];\n\n        // Check voter has enough reputation:\n        uint reputation = Avatar(proposal.avatar).nativeReputation().reputationOf(_voter);\n        require(reputation >= _rep);\n        uint rep = _rep;\n        if (rep == 0) {\n            rep = reputation;\n        }\n        // If this voter has already voted, return false.\n        if (proposal.voters[_voter].reputation != 0) {\n            return false;\n        }\n        // The voting itself:\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n        //check if the current winningVote changed or there is a tie.\n        //for the case there is a tie the current winningVote set to NO.\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\n           ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\n             proposal.winningVote == YES))\n        {\n           // solium-disable-next-line security/no-block-members\n            uint _now = now;\n            if ((proposal.state == ProposalState.QuietEndingPeriod) ||\n               ((proposal.state == ProposalState.Boosted) && ((_now - proposal.boostedPhaseTime) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod)))) {\n                //quietEndingPeriod\n                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\n                    proposal.state = ProposalState.QuietEndingPeriod;\n                }\n                proposal.boostedPhaseTime = _now;\n                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n            }\n            proposal.winningVote = _vote;\n        }\n        proposal.voters[_voter] = Voter({\n            reputation: rep,\n            vote: _vote,\n            preBoosted:(proposal.state == ProposalState.PreBoosted)\n        });\n        if (proposal.state != ProposalState.Boosted) {\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\n            uint reputationDeposit = (params.votersReputationLossRatio * rep)/100;\n            ControllerInterface(Avatar(proposal.avatar).owner()).burnReputation(reputationDeposit,_voter,proposal.avatar);\n        }\n        // Event:\n        emit VoteProposal(_proposalId, proposal.avatar, _voter, _vote, rep);\n        // execute the proposal if this vote was decisive:\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev _score return the proposal score\n     * For dual choice proposal S = (S+) - (S-)\n     * @param _proposalId the ID of the proposal\n     * @return int proposal score.\n     */\n    function _score(bytes32 _proposalId) private view returns(int) {\n        Proposal storage proposal = proposals[_proposalId];\n        return int(proposal.stakes[YES]) - int(proposal.stakes[NO]);\n    }\n\n    /**\n      * @dev _isVotable check if the proposal is votable\n      * @param _proposalId the ID of the proposal\n      * @return bool true or false\n    */\n    function _isVotable(bytes32 _proposalId) private view returns(bool) {\n        ProposalState pState = proposals[_proposalId].state;\n        return ((pState == ProposalState.PreBoosted)||(pState == ProposalState.Boosted)||(pState == ProposalState.QuietEndingPeriod));\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080615567833981016040525160008054600160a060020a0319908116331790915560078054600160a060020a03909316929091169190911790556155088061005f6000396000f3006080604052600436106101f55763ffffffff60e060020a6000350416630250680481146101fa5780630905c9f9146102805780630d483442146102c5578063119ce91b146102da57806316db51721461031757806321b4b3dc1461033b5780632ac2af53146103505780632daedd521461036a57806330ca0a531461039c57806332ed5b12146103b1578063339e23d11461046b57806337376ca8146104925780633c133818146104aa578063488c65fc146104c25780635142bc1e146104f657806351d997b21461050b578063536db4a8146105205780635e31005d1461056557806361d585da146105865780636359036b146105c25780636de9b192146105e6578063715018a61461062b57806372f702f31461064057806379a1c1f6146106715780637cb6cf3e146106bc57806380f5e0a1146107465780638da5cb5b1461075e5780639525c0cc146107735780639bc5689d146102c55780639ef1204c1461078b578063a003651d146107a6578063ac5d8745146107be578063b2449d65146107df578063b4512913146107f4578063c08351061461080f578063cc3bf9e914610827578063e5af18c514610883578063e751f2711461089b578063f26f4f61146108b3578063f2fde38b146108d7578063f3d305b4146108f8578063f91cb3d614610919578063f98e87ba14610931575b600080fd5b34801561020657600080fd5b50610212600435610946565b604080519e8f5260208f019d909d528d8d019b909b5260608d019990995260808c019790975260a08b019590955260c08a019390935260e08901919091526101008801526101208701526101408601526101608501526101808401526101a083015251908190036101c00190f35b34801561028c57600080fd5b506102b3600435602435600160a060020a03604435811690606435811690608435166109b2565b60408051918252519081900360200190f35b3480156102d157600080fd5b506102b3610c7a565b3480156102e657600080fd5b506102fe600435600160a060020a0360243516610c7f565b6040805192835260208301919091528051918290030190f35b34801561032357600080fd5b506102fe600435600160a060020a0360243516610ce3565b34801561034757600080fd5b506102b3610d17565b34801561035c57600080fd5b50610368600435610d1d565b005b34801561037657600080fd5b50610388600435602435604435610d39565b604080519115158252519081900360200190f35b3480156103a857600080fd5b506102b3610d4f565b3480156103bd57600080fd5b506103c9600435610e85565b604051808d600160a060020a0316600160a060020a031681526020018c81526020018b600160a060020a0316600160a060020a031681526020018a815260200189815260200188815260200187600581111561042157fe5b60ff168152602081019690965250600160a060020a039093166040808601919091526060850192909252608084015260a0830191909152519081900360c001975095505050505050f35b34801561047757600080fd5b50610388600435602435600160a060020a0360443516610ef9565b34801561049e57600080fd5b50610388600435610f02565b3480156104b657600080fd5b506102b3600435610f0a565b3480156104ce57600080fd5b506103886004803590602480359160443591606435916084359160a435908101910135610f1f565b34801561050257600080fd5b506102fe61141f565b34801561051757600080fd5b50610388611426565b34801561052c57600080fd5b50604080516101c08181019092526102b39136916004916101c491908390600e9083908390808284375093965061142c95505050505050565b34801561057157600080fd5b506102fe600160a060020a0360043516611578565b34801561059257600080fd5b5061059e60043561164d565b604051808260058111156105ae57fe5b60ff16815260200191505060405180910390f35b3480156105ce57600080fd5b506102fe600435600160a060020a0360243516611665565b3480156105f257600080fd5b50604080516101c08181019092526102b39136916004916101c491908390600e90839083908082843750939650611ae795505050505050565b34801561063757600080fd5b506103686121d5565b34801561064c57600080fd5b50610655612241565b60408051600160a060020a039092168252519081900360200190f35b34801561067d57600080fd5b50610689600435612250565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b3480156106c857600080fd5b506106d16122a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561070b5781810151838201526020016106f3565b50505050905090810190601f1680156107385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075257600080fd5b506103886004356122dd565b34801561076a57600080fd5b50610655612410565b34801561077f57600080fd5b5061036860043561241f565b34801561079757600080fd5b50610388600435602435612438565b3480156107b257600080fd5b506102b3600435612466565b3480156107ca57600080fd5b5061038860043560243560443560643561247b565b3480156107eb57600080fd5b506102b36124a8565b34801561080057600080fd5b506102b36004356024356124ad565b34801561081b57600080fd5b506103886004356124d1565b34801561083357600080fd5b5061084b600435600160a060020a03602435166124dc565b604051808260a080838360005b83811015610870578181015183820152602001610858565b5050505090500191505060405180910390f35b34801561088f57600080fd5b506102b3600435612be0565b3480156108a757600080fd5b50610388600435612beb565b3480156108bf57600080fd5b506102b3600435600160a060020a0360243516612c12565b3480156108e357600080fd5b50610368600160a060020a0360043516612dd7565b34801561090457600080fd5b506102b3600160a060020a0360043516612dfa565b34801561092557600080fd5b50610655600435612e76565b34801561093d57600080fd5b506102b3612e91565b600260205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b01549080600c01549080600d015490508e565b60008060006109bf615317565b600289146109cc57600080fd5b600160a060020a03861615156109e157600080fd5b6109ea87612e97565b60008181526002602052604081205491945010610a0657600080fd5b600554604080516c01000000000000000000000000300260208083019190915260348083019490945282518083039094018452605490910191829052825182918401908083835b60208310610a6c5780518252601f199092019160209182019101610a4d565b51815160001960209485036101000a01908116901990911617905260408051949092018490039093206005805460010190559286018e9052600160a060020a038c811687528b1690860152509350600391505060c082018190525042608082019081526000848152600260208181526040808420830154610120870152600160a060020a03808b1661010088015260e0870184905261014087018990528785526003808452948290208751815490831673ffffffffffffffffffffffffffffffffffffffff19918216178255938801516001808301919091559288015194810180549590921694909316939093179092556060850151928101929092559151600482015560a083015160058083019190915560c084015160068301805486959293919260ff1991909116918490811115610ba257fe5b021790555060e0820151600782015561010082015160088201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790556101208201516009820155610140820151600a820155610160820151600b820155610180820151610c1c90600c8301906002615384565b5050604080518b8152600160a060020a0388811660208301528183018790529151918a16925084917f75b4ff136cc5de5957574c797de3334eb1c141271922b825eb071e0487ba2c5c9181900360600190a350979650505050505050565b600281565b600080610c8a6153c2565b5050506000918252600360209081526040808420600160a060020a03939093168452601090920181529181902081516060810183528154808252600183015494820185905260029092015460ff16151592019190915291565b6000918252600360209081526040808420600160a060020a0393909316845260129092019052902080546001909101549091565b60055481565b600054600160a060020a03163314610d3457600080fd5b600155565b6000610d4784848433612fa0565b949350505050565b604080517f616464726573732047656e6573697350726f746f636f6c4164647265737300006020808301919091527f627974657333322050726f706f73616c49640000000000000000000000000000603e8301527f75696e7420566f7465000000000000000000000000000000000000000000000060508301527f75696e7420416d6f756e74546f5374616b65000000000000000000000000000060598301527f75696e74204e6f6e636500000000000000000000000000000000000000000000606b83015282516055818403018152607590920192839052815191929182918401908083835b60208310610e555780518252601f199092019160209182019101610e36565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902081565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546006860154600787015460088801546009890154600a8a0154600b909a0154600160a060020a03998a169b989a988a169997989697959660ff909516959394939092169290918c565b60009392505050565b60005b919050565b60009081526003602052604090206007015490565b600080600060048585604051808383808284379091019485525050604051928390036020019092205460ff16159150610f59905057600080fd5b85600214156111db57604080517f616464726573732047656e6573697350726f746f636f6c4164647265737300006020808301919091527f627974657333322050726f706f73616c49640000000000000000000000000000603e8301527f75696e7420566f7465000000000000000000000000000000000000000000000060508301527f75696e7420416d6f756e74546f5374616b65000000000000000000000000000060598301527f75696e74204e6f6e636500000000000000000000000000000000000000000000606b83015282516055818403018152607590920192839052815191929182918401908083835b602083106110685780518252601f199092019160209182019101611049565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020308b8b8b8b6040516020018086600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018560001916600019168152602001848152602001838152602001828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b6020831061112d5780518252601f19909201916020918201910161110e565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019790975281840196909652825180820384018152606090910192839052805190959294508493509185019190508083835b602083106111a75780518252601f199092019160209182019101611188565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150611372565b604080518082018252601c81527f19457468657265756d205369676e6564204d6573736167653a0a33320000000060208083019190915282516c01000000000000000000000000300281830152603481018e9052605481018d9052607481018c905260948082018c90528451808303909101815260b49091019384905280519293909290918291908401908083835b602083106112895780518252601f19909201916020918201910161126a565b51815160209384036101000a6000190180199092169116179052604051919093018190038120865190955090830193508392860191508083835b602083106112e25780518252601f1990920191602091820191016112c3565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106113425780518252601f199092019160209182019101611323565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091505b6113b485858080601f01602080910402602001604051908101604052809392919081815260200183838082843750889594505063ffffffff6132cd1692505050565b9050600160a060020a03811615156113cb57600080fd5b60016004868660405180838380828437909101948552505060405192839003602001909220805493151560ff19909416939093179092555061141190508a8a8a84612fa0565b9a9950505050505050505050565b6002809091565b60005b90565b600081816020020151826001602002015183600260200201518460036020020151856004602002015186600560200201518760066020020151886007602002015189600860200201518a600960200201518b600a60200201518c600b60200201518d600c60200201518e600d6020020151604051602001808f81526020018e81526020018d81526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019e5050505050505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106115465780518252601f199092019160209182019101611527565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b60008060006115856153e6565b61158e85612e97565b60008181526002602081815260409283902083516101c081018552815481526001820154928101929092529182015492810192909252600381015460608301819052600482015460808401819052600583015460a0850152600683015460c0850152600783015460e085015260088301546101008501526009830154610120850152600a830154610140850152600b830154610160850152600c830154610180850152600d909201546101a08401529650945090925090505050915091565b60009081526003602052604090206006015460ff1690565b6000806000806116736153e6565b600087815260036020526040812093506002600685015460ff16600581111561169857fe5b14806116b657506001600685015460ff1660058111156116b457fe5b145b15156116c157600080fd5b60078401546000908152601185016020908152604080832054600160a060020a038b1684526012880190925282206002015490945011801561172057506007840154600160a060020a0388166000908152601286016020526040902054145b8015611730575060018460070154145b801561173b57508215155b1561187257600a80850154600090815260026020818152604080842081516101c0810183528154815260018201548185015281850154818401526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820152600982015461012082015295810154610140870152600b810154610160870152600c810154610180870152600d01546101a08601819052600160a060020a038d16855260128a01909252909220015491935084916118159163ffffffff6133a216565b81151561181e57fe5b600160a060020a038916600090815260128701602052604090206002015461018085015192909104925060649161185a9163ffffffff6133a216565b81151561186357fe5b04945080851115611872578094505b841580159061191857506007548454604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051889392909216916370a08231916024808201926020929091908290030181600087803b1580156118e957600080fd5b505af11580156118fd573d6000803e3d6000fd5b505050506040513d602081101561191357600080fd5b505110155b15611adc57600b840154611932908663ffffffff6133cb16565b600b8501558354604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691638da5cb5b916004808201926020929091908290030181600087803b15801561199657600080fd5b505af11580156119aa573d6000803e3d6000fd5b505050506040513d60208110156119c057600080fd5b50516007548554604080517fb9a04cdd000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201528b84166024820152604481018a9052918316606483015251919092169163b9a04cdd9160848083019260209291908290030181600087803b158015611a4257600080fd5b505af1158015611a56573d6000803e3d6000fd5b505050506040513d6020811015611a6c57600080fd5b50511515611a7957600080fd5b600160a060020a038088166000818152601287016020908152604080832060020192909255875482518a81529251999a508a99939416928c927fb4a37163ec93e05e09b62e52f7f2ea8cfde431802edede7dfebe53d2ad969dbb92908290030190a45b505050509250929050565b80516000908190606410801590611aff575082516000105b1515611b7b576040805160e560020a62461bcd02815260206004820152602b60248201527f30203c20707265426f6f73746564566f7465526571756972656450657263656e60448201527f74616765203c3d20313030000000000000000000000000000000000000000000606482015290519081900360840190fd5b60808301516000108015611b97575060808301516305f5e10010155b1515611bed576040805160e560020a62461bcd02815260206004820181905260248201527f30203c207468726573686f6c64436f6e737442203c2031303030303030303020604482015290519081900360640190fd5b60608301516a52b7d2dcc80cd2e40000001015611c54576040805160e560020a62461bcd02815260206004820181905260248201527f7468726573686f6c64436f6e737441203c3d2031303030303030303020776569604482015290519081900360640190fd5b61012083015160641015611cb2576040805160e560020a62461bcd02815260206004820152601e60248201527f7374616b6572466565526174696f466f72566f74657273203c3d203130300000604482015290519081900360640190fd5b61014083015160641015611d10576040805160e560020a62461bcd02815260206004820181905260248201527f766f7465727352657075746174696f6e4c6f7373526174696f203c3d20313030604482015290519081900360640190fd5b61016083015160641015611d93576040805160e560020a62461bcd028152602060048201526024808201527f766f746572734761696e526570526174696f46726f6d4c6f7374526570203c3d60448201527f2031303000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60c083015160408401511015611e19576040805160e560020a62461bcd02815260206004820152602b60248201527f626f6f73746564566f7465506572696f644c696d6974203e3d2071756965744560448201527f6e64696e67506572696f64000000000000000000000000000000000000000000606482015290519081900360840190fd5b60e08301516305f5e1001015611e9f576040805160e560020a62461bcd02815260206004820152602560248201527f70726f706f73696e67526570526577617264436f6e737441203c3d203130303060448201527f3030303030000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6101008301516305f5e1001015611f26576040805160e560020a62461bcd02815260206004820152602560248201527f70726f706f73696e67526570526577617264436f6e737442203c3d203130303060448201527f3030303030000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61012083015161018084015160029091021015611fb3576040805160e560020a62461bcd02815260206004820152602d60248201527f64616f426f756e7479436f6e7374203c3d2032202a207374616b65724665655260448201527f6174696f466f72566f7465727300000000000000000000000000000000000000606482015290519081900360840190fd5b610120830151610180840151101561203b576040805160e560020a62461bcd02815260206004820152602960248201527f64616f426f756e7479436f6e7374203e3d207374616b6572466565526174696f60448201527f466f72566f746572730000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6120448361142c565b604080516101c08101909152909150808460006020908102919091015182520184600160209081029190910151825201846002602090810291909101518252018460036020908102919091015182520184600460209081029190910151825201846005602090810291909101518252018460066020908102919091015182520184600760209081029190910151825201846008602090810291909101518252018460096020908102919091015182520184600a6020908102919091015182520184600b6020908102919091015182520184600c6020908102919091015182520184600d6020908102919091015190915260008381526002808352604091829020845181559284015160018401559083015190820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201556101a090910151600d9091015592915050565b600054600160a060020a031633146121ec57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600754600160a060020a031681565b60009081526003602090815260408083206001808552600f8201845282852054600280875284872054600c850154600d860154948952601190950190965284872054908752939095205494959394919390929190565b60408051808201909152601c81527f19457468657265756d205369676e6564204d6573736167653a0a333200000000602082015281565b60006122e7615317565b60008381526003602081815260409283902083516101a0810185528154600160a060020a0390811682526001830154938201939093526002820154909216938201939093529082015460608201526004820154608082015260058083015460a0830152600683015491929160c084019160ff9091169081111561236657fe5b600581111561237157fe5b8152600782015460208201526008820154600160a060020a031660408083019190915260098301546060830152600a8301546080830152600b83015460a083015280518082019182905260c09092019190600c84019060029082845b8154815260200190600101908083116123cd5750505050508152505090506123fe8161014001518260000151612c12565b612407846133dd565b12159392505050565b600054600160a060020a031681565b8061242981613407565b151561243457600080fd5b5050565b60008261244481613407565b151561244f57600080fd5b61245c843385600061345e565b91505b5092915050565b60009081526003602052604090206001015490565b60008461248781613407565b151561249257600080fd5b61249e8633878761345e565b9695505050505050565b600181565b6000828152600360209081526040808320848452600e019091529020545b92915050565b60006124cb82613407565b6124e4615456565b60006124ee6153e6565b60008581526003602052604081209250808080808080600260068a015460ff16600581111561251957fe5b14806125375750600160068a015460ff16600581111561253557fe5b145b151561258d576040805160e560020a62461bcd02815260206004820152601460248201527f77726f6e672070726f706f73616c207374617465000000000000000000000000604482015290519081900360640190fd5b600a808a015460009081526002602081815260409283902083516101c081018552815481526001808301549382019390935292810154938301939093526003830154606083015260048301546080830152600583015460a0830152600683015460c083015260078084015460e08401526008840154610100840152600984015461012084015293830154610140830152600b830154610160830152600c830154610180830152600d909201546101a0820152918b015491995014156126665760026000908152600f8a016020526040902054945061267c565b60016000908152600f8a01602052604090205494505b610140880151600160a060020a038c16600090815260128b01602052604081206001810154606498909302979097049695501080156126bf575060078901548454145b15612758576007890154600090815260118a016020526040902054925082156126fc57600c89015460018501548491028115156126f857fe5b048a525b600160068a015460ff16600581111561271157fe5b14612750576007890154600090815260118a016020526040902054610160890151606490870204860385600101540281151561274957fe5b0460208b01525b600060018501555b600160a060020a038b16600090815260108a016020526040902060018101549092501580159061278c5750600282015460ff165b1561285a575060026000908152600f8901602052604080822054600183529082205401908111156127d3578082600101548a60030154028115156127cc57fe5b0460408b01525b600160068a015460ff1660058111156127e857fe5b1415612808576101408801516001830154606491020460608b0152612852565b815460078a0154141561285257610160880151600183015482916064918802020481151561283257fe5b04606489610140015184600101540281151561284a57fe5b040160608b01525b600060018301555b6008890154600160a060020a038c8116911614801561287d575060018960070154145b801561289557506008890154600160a060020a031615155b156129315760026000908152600e8a01602052604080822054600183529120546101008a01516103e8926128cf920363ffffffff6133a216565b60026000908152600e8c016020526040808220546001835291205460e08c01516129019290910163ffffffff6133a216565b0181151561290b57fe5b0460808b015260088901805473ffffffffffffffffffffffffffffffffffffffff191690555b60408a01518a5160808c015160608d015160208e015192909301995091010195508615612a5857600d89015461296790886133cb565b600d8a0155600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018b90529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156129db57600080fd5b505af11580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b50511515612a1257600080fd5b8854604080518981529051600160a060020a03808f169316918f917f6d26871c9f457d104b2122485f659f126f7a0cf6938cf20482c03f49794a2fbf9181900360200190a45b8515612bd1578854604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691638da5cb5b916004808201926020929091908290030181600087803b158015612abd57600080fd5b505af1158015612ad1573d6000803e3d6000fd5b505050506040513d6020811015612ae757600080fd5b50518954604080517feaf994b2000000000000000000000000000000000000000000000000000000008152600481018a9052600160a060020a038f8116602483015292831660448201529051919092169163eaf994b29160648083019260209291908290030181600087803b158015612b5f57600080fd5b505af1158015612b73573d6000803e3d6000fd5b505050506040513d6020811015612b8957600080fd5b50508854604080518881529051600160a060020a03808f169316918f917f7419b736daacf66d5c1645948c956fca2b83be1e2e02d486d65713f289d683b89181900360200190a45b50505050505050505092915050565b60006124cb826133dd565b600081612bf781613407565b1515612c0257600080fd5b612c0b83613b18565b9392505050565b6000806000612c1f6153e6565b600080612c2b87612dfa565b600089815260026020818152604080842081516101c08101835281548152600182015493810193909352808401549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a820154610140840152600b820154610160840152600c820154610180840152600d909101546101a0830152939850909650945010612d34576040805160e560020a62461bcd02815260206004820181905260248201527f73686f756c6420626520612076616c696420706172616d657465722068617368604482015290519081900360640190fd5b612d5f612d478460800151601a0b61427b565b612d5387601a0b61427b565b9063ffffffff61428916565b91506064612d6c836142a6565b601a0b1315612d8257612d7f606461427b565b91505b612dbd612da183612d9587601a0b61427b565b9063ffffffff6142b216565b612db18560600151601a0b61427b565b9063ffffffff61435e16565b9050612dc8816142a6565b601a0b98975050505050505050565b600054600160a060020a03163314612dee57600080fd5b612df78161436b565b50565b600160a060020a03811660009081526008602052604081208190612e1d906143e8565b15612e4d57600160a060020a0383166000908152600860205260409020612e4a904263ffffffff61446616565b90505b600160a060020a038316600090815260066020526040902054612c0b908263ffffffff6133cb16565b600090815260036020526040902054600160a060020a031690565b60015481565b600081600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612ed757600080fd5b505af1158015612eeb573d6000803e3d6000fd5b505050506040513d6020811015612f0157600080fd5b5051604080517f1c4d5608000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03858116602483015291519190921691631c4d56089160448083019260209291908290030181600087803b158015612f6e57600080fd5b505af1158015612f82573d6000803e3d6000fd5b505050506040513d6020811015612f9857600080fd5b505192915050565b600080600080612fae6153e6565b60028811158015612fbf5750600088115b1515612fca57600080fd5b60008711612fd757600080fd5b612fe089613b18565b15612fee57600194506132c1565b60008981526003602081905260409091209450600685015460ff16600581111561301457fe5b1461302257600094506132c1565b600160a060020a038616600090815260128501602052604081206001810154909450118015613052575082548814155b1561306057600094506132c1565b5050600a8083015460009081526002602081815260409283902083516101c0810185528154815260018201549281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a08301819052600682015460c0840152600782015460e08401526008820154610100840152600982015461012084015292810154610140830152600b810154610160830152600c810154610180830152600d01546101a0820152869182101561312057600080fd5b600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561319557600080fd5b505af11580156131a9573d6000803e3d6000fd5b505050506040513d60208110156131bf57600080fd5b505115156131cc57600080fd5b600d8401546131db908361452c565b600d85015560018301805483019081905560028401558783556101208101516003850180546064928502929092049091019055600088815260118501602052604090205461322a90839061452c565b600089815260118601602052604090205561012081015160649083020490910390613263600c850160000154839063ffffffff61452c16565b600c8501558354604080518a8152602081018a90528151600160a060020a038a81169416928d927fd0239d7d4acf51def4507fa173be466927de5d75d8b10d840cd6994d6e102310929081900390910190a46132be89613b18565b94505b50505050949350505050565b600080600080845160411415156132e75760009350613399565b50505060208201516040830151606084015160001a601b60ff8216101561330c57601b015b8060ff16601b1415801561332457508060ff16601c14155b156133325760009350613399565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561338c573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b60008215156133b3575060006124cb565b508181028183828115156133c357fe5b04146124cb57fe5b6000828211156133d757fe5b50900390565b60009081526003602090815260408083206002845260110190915280822054600183529120540390565b600081815260036020819052604082206006015460ff169081600581111561342b57fe5b14806134425750600481600581111561344057fe5b145b80612c0b5750600581600581111561345657fe5b149392505050565b60006134686153e6565b6000806000806000600289111580156134815750600089115b15156134d7576040805160e560020a62461bcd02815260206004820152600e60248201527f30203c205f766f7465203c3d2032000000000000000000000000000000000000604482015290519081900360640190fd5b6134e08b613b18565b156134ee5760019650613b0a565b60026000600360008e60001916600019168152602001908152602001600020600a0154600019166000191681526020019081526020016000206101c0604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509550600360008c6000191660001916815260200190815260200160002094508460000160009054906101000a9004600160a060020a0316600160a060020a03166389ae1c906040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561363457600080fd5b505af1158015613648573d6000803e3d6000fd5b505050506040513d602081101561365e57600080fd5b5051604080517fdb89c044000000000000000000000000000000000000000000000000000000008152600160a060020a038d811660048301529151919092169163db89c0449160248083019260209291908290030181600087803b1580156136c557600080fd5b505af11580156136d9573d6000803e3d6000fd5b505050506040513d60208110156136ef57600080fd5b505193508784101561370057600080fd5b87925082151561370e578392505b600160a060020a038a1660009081526010860160205260409020600101541561373a5760009650613b0a565b6000898152600e8601602052604090205461375c90849063ffffffff61452c16565b60008a8152600e8701602052604080822083905560078801548252812054908b905210806137b4575060078501546000908152600e8601602052604080822054600283529120541480156137b4575060018560070154145b156138b6574291506005600686015460ff1660058111156137d157fe5b148061380a57506004600686015460ff1660058111156137ed57fe5b14801561380a57508560c001518660400151038560050154830310155b156138ae57600985015460058601548654600160a060020a031660009081526008602052604090206138449290910163ffffffff61453916565b6005600686015460ff16600581111561385957fe5b146138785760c0860151600986015560068501805460ff191660051790555b6005850182905560098501548554600160a060020a031660009081526008602052604090206138ae91840163ffffffff6145cb16565b600785018990555b604080516060810182528a8152602081018590529081016003600688015460ff1660058111156138e257fe5b149052600160a060020a038b166000908152601087016020908152604091829020835181559083015160018201559101516002909101805460ff19169115159190911790556004600686015460ff16600581111561393c57fe5b14613ab1576000898152600f8601602052604090205461396390849063ffffffff61452c16565b60008a8152600f8701602052604090205561014086015160649084028654604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051939092049350600160a060020a031691638da5cb5b916004808201926020929091908290030181600087803b1580156139e257600080fd5b505af11580156139f6573d6000803e3d6000fd5b505050506040513d6020811015613a0c57600080fd5b50518554604080517f6e94d27800000000000000000000000000000000000000000000000000000000815260048101859052600160a060020a038e81166024830152928316604482015290519190921691636e94d2789160648083019260209291908290030181600087803b158015613a8457600080fd5b505af1158015613a98573d6000803e3d6000fd5b505050506040513d6020811015613aae57600080fd5b50505b8454604080518b8152602081018690528151600160a060020a03808f169416928f927f066c061a3792cb3eb64a441a928655fcbafb4a54b49725fe9cd2951df5e7189e929081900390910190a4613b078b613b18565b96505b505050505050949350505050565b600080613b236153e6565b613b2b615317565b60008060008088613b3b81613407565b1515613b4657600080fd5b60008a8152600360208181526040808420600a80820154865260028085529583902083516101c081018552815481526001808301548288015282890154828701528288015460608084019190915260048085015460808086019190915260058087015460a08088019190915260068089015460c0808a019190915260078a015460e08a015260088a01546101008a015260098a01546101208a015299890154610140890152600b890154610160890152600c890154610180890152600d909801546101a0808901919091528b519081018c528a54600160a060020a039081168252968b01549c81019c909c529c890154909416988a019890985298860154908801529684015494860194909452858301549685019690965294810154909c50909a5090928b929084019160ff1690811115613c7d57fe5b6005811115613c8857fe5b8152600782015460208201526008820154600160a060020a031660408083019190915260098301546060830152600a8301546080830152600b83015460a083015280518082019182905260c09092019190600c84019060029082845b815481526020019060010190808311613ce4575050509190925250508954604080517f89ae1c900000000000000000000000000000000000000000000000000000000081529051939950600160a060020a03909116926389ae1c90925060048083019260209291908290030181600087803b158015613d6257600080fd5b505af1158015613d76573d6000803e3d6000fd5b505050506040513d6020811015613d8c57600080fd5b5051604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916318160ddd916004808201926020929091908290030181600087803b158015613deb57600080fd5b505af1158015613dff573d6000803e3d6000fd5b505050506040513d6020811015613e1557600080fd5b505187519095506064908602049350600092506003600689015460ff166005811115613e3d57fe5b1415613f1a5760208701516004890154420310613e745760068801805460ff19166001908117909155600260078a01559250613f1a565b60078801546000908152600e89016020526040902054841015613eaa5760068801805460ff191660029081179091559250613f1a565b613eb38a6122dd565b15613f1a5760068801805460ff19166004179055426005890181905560098901548954600160a060020a03166000908152600860205260409020613ef9929091016145cb565b8754600160a060020a03166000908152600660205260409020805460010190555b6004600689015460ff166005811115613f2f57fe5b1480613f4d57506005600689015460ff166005811115613f4b57fe5b145b156140a25760098801546005890154420310613ff957600988015460058901548954600160a060020a03166000908152600860205260409020613f989290910163ffffffff61453916565b8551600160a060020a0316600090815260066020526040902054613fc390600163ffffffff6133cb16565b8651600160a060020a03166000908152600660208190526040909120919091558801805460ff19166002179055600392506140a2565b60078801546000908152600e890160205260409020548410156140a2578551600160a060020a031660009081526006602052604090205461404190600163ffffffff6133cb16565b8651600160a060020a0390811660009081526006602090815260408083209490945560098c015460058d01548d549094168352600890915292902061408e9290910163ffffffff61453916565b60068801805460ff19166002179055600492505b60008360048111156140b057fe5b1461425d5760018860070154141561411b57600788015460009081526011890160205260409020546101808801516064916140f1919063ffffffff6133a216565b8115156140fa57fe5b049150866101a0015182111561411357866101a0015191505b600b88018290555b8754600789015460408051918252602082018890528051600160a060020a03909316928d927f37471b9c9d295ffb1309ad070b8964700bfb7b555e8e8292d0b6cbc7dba35d1092908290030190a389600019167f46a713b994c752c68fbefa9048bec9a0010cc7d933ad95a3c3dbb25931a167e784604051808260048111156141a057fe5b60ff16815260200191505060405180910390a2604080870151875160078b015483517f310ce4e2000000000000000000000000000000000000000000000000000000008152600481018f9052600160a060020a0392831660248201526044810191909152925191169163310ce4e29160648083019260209291908290030181600087803b15801561423057600080fd5b505af1158015614244573d6000803e3d6000fd5b505050506040513d602081101561425a57600080fd5b50505b600083600481111561426b57fe5b14159a9950505050505050505050565b601a0b650100000000000290565b60008165010000000000840281151561429e57fe5b059392505050565b65010000000000900590565b60008115156142c85750650100000000006124cb565b8215156142e55760008212156142dd57600080fd5b5060006124cb565b6142ee826145fd565b15156143365760008213156143165761430f8361430a846142a6565b61461f565b90506124cb565b61430f650100000000006143318561430a60008790036142a6565b614289565b600083121561434457600080fd5b612c0b6143598361435486614687565b61435e565b614694565b6501000000000091020590565b600160a060020a038116151561438057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806143f3615475565b5050600080805260208381526040808320600180855281845282852054855295835292819020815160a081018352958101548652600281015460ff161515928601929092526003820154908501526004810154606085018190526005918201546080909501949094520154909101919050565b600080808084156133995760008080526020878152604080832060058101546001855290835281842054808552928a90529220919550935091505b8483116144eb57848310156144bd578160050154846001010193505b5060008080526020829052604090205480156144eb5760008181526020879052604090206004015493909301925b848314156144f857613399565b9184116000908152602082905260409020549182151561451757613399565b600083815260208790526040902091506144a1565b818101828110156124cb57fe5b6000818152602083905260409020811515614563576005810154151561455e576145c6565b614573565b60048101541515614573576145c6565b6000816005015411156145bc57600581018054600019019055811561459f576004810180546000190190555b600181015460028201546145b791859160ff166146a1565b6145c6565b6145c683836146c6565b505050565b8015156145ef57600081815260208390526040902060050180546001019055612434565b6124348260006001846147ba565b60006501000000000061460f83614889565b81151561461857fe5b0792915050565b600080600080600085601a0b121561463657600080fd5b5084915050601a83900b650100000000005b811561467e57816001166001141561466757614664818461435e565b90505b600290910590614677838061435e565b9250614648565b95945050505050565b60006124cb8260646148a5565b60006124cb826064614987565b81156145c6576146b183836149d6565b6146bb8383614a29565b6145c6838383614a63565b60008181526020838152604080832060018082015460028301548187528487208780529584905284872054928752938620549295909460ff9094169392908083158015614711575082155b15614742578515156000908152602086905260408120556147328a8a614b72565b61473d8a88886146a1565b6147ae565b831580159061475057508215155b156147605761473d8a8a86614bc0565b5050818101600081815260208a815260408083208815158085529288905292208390556001820188905560028201805460ff191690911790556147a38a8a614b72565b6147ae8a88886146a1565b50505050505050505050565b600083815260208581526040808320851515845291829052822054909181151561483d5750831515600081815260208481526040808320879055868352908990529020600180820188905560028201805460ff191690931790925560038101829055600481019190915561482e8785614a29565b6148388785614da8565b614880565b838214156148715760008281526020889052604090206005018054600101905561486787856149d6565b6148388785614a29565b614880878384871015876147ba565b50505050505050565b60008082131561489a575080610f05565b816000039050610f05565b60008080808080808089136148b957600080fd5b650100000000008914156148d0576000965061497b565b6148d989614e49565b90965094506148f864ffffffffff198701650100000000008801614289565b935060009250600091505b8782601a0b121561494d57614930614921858460020260010161461f565b6143318460020260010161427b565b9283019290508015156149425761494d565b600190910190614903565b61495d836502000000000061435e565b92508261497761496c8761427b565b64b17217f7d261435e565b0196505b50505050505092915050565b60008065010000000000815b8481601a0b12156149cc57918101916149b682614354886143316001860161427b565b91508115156149c4576149cc565b600101614993565b5090949350505050565b600090815260208281526040808320600581015460018086528285528386205486528685528386206004908101548780528487528588205488529790955292909420830154909401909201909101910155565b6000818152602083905260409020600101545b80156145c657614a4c83826149d6565b600090815260208390526040902060010154614a3c565b600080808080808715614b6757614a7a8989614ecb565b614a848989614f30565b95508615614a955760019450614a9b565b60001994505b614aa58989614f30565b935084600202841415614b3657600088815260208a815260408083208a15845291829052909120549093509150614adc8983614f30565b90508460001902811415614af657614af689838915614f73565b614b01898989614f73565b8015614b3157600088815260208a90526040902060018101546002820154919450614b31918b919060ff16614a63565b614b67565b858514614b6757600088815260208a90526040902060018101546002820154919450614b67918b919060ff16614a63565b505050505050505050565b600090815260209182526040808220600180820184905560028201805460ff191690558380529381905281832083905592825281208190556004820181905560038201819055600590910155565b6000806000806000806000806000806000614bdb8e8d615133565b9a508d60000160008c8152602001908152602001600020995089600501549850614c058e8c6146c6565b8d60000160008e81526020019081526020016000209750876001015496508d60000160008881526020019081526020016000209550876003015494508760020160009054906101000a900460ff169350876004015492508760000160006001151515158152602001908152602001600020549150876000016000801515151581526020019081526020016000205490508a8660000160008615151515815260200190815260200160002081905550868a60010181905550838a60020160006101000a81548160ff0219169083151502179055508760050154898401038a60040181905550848a60030181905550888a60050181905550806000141515614d4157808a600001600080151515158152602001908152602001600020819055508a8e6000016000838152602001908152602001600020600101819055505b8115614d8457818a60000160006001151515158152602001908152602001600020819055508a8e6000016000848152602001908152602001600020600101819055505b614d8e8e8e614b72565b614d988e8c614a29565b5050505050505050505050505050565b6000806000806000614dba8787614ecb565b600086815260208890526040902060018101549095509350831561488057614de28785614f30565b600286015490935060ff1691508115614dfe5750600019614e02565b5060015b80600202831415614e39578060001902614e1c8888614f30565b1415614e2d57614e2d878784614f73565b61483887858415614f73565b8215614880576148808785614da8565b60008080808413614e5957600080fd5b614e6a614e658561516b565b6151c7565b60ff169050602881039150600082601a0b1215614ea05781600003601a0b846000821215614e9457fe5b9060020a029250614ec5565b6000601a83900b12614ec55781601a0b846000821215614ebc57fe5b9060020a900592505b50915091565b600081815260208381526040808320838052808352818420548452858352818420600390810154600186528285528386205486529387905291909320015480821115614f1f57600182016003840155614f29565b6001810160038401555b5050505050565b6000908152602082815260408083206001845280835281842054845284835281842060039081015485805291845282852054855294909252909120909101540390565b6000806000806000806000806000891598508b60000160008c815260200190815260200160002097508760020160009054906101000a900460ff169650876001015495508760000160008a1515151581526020019081526020016000205494508b600001600086815260200190815260200160002093508360000160008b1515151581526020019081526020016000205492508b600001600087815260200190815260200160002091508b60000160008481526020019081526020016000209050848260000160008915151515815260200190815260200160002081905550868460020160006101000a81548160ff0219169083151502179055508584600101819055508a8460000160008c15151515815260200190815260200160002081905550848860010181905550898860020160006101000a81548160ff021916908315150217905550828860000160008b151515158152602001908152602001600020819055508a8160010181905550888160020160006101000a81548160ff0219169083151502179055506151078c8c614ecb565b6151118c86614ecb565b61511b8c8c6149d6565b6151258c866149d6565b505050505050505050505050565b6000818152602083815260408083206001845290915281205480156151635761515c8482615133565b915061245f565b82915061245f565b600270010000000000000000000000000000000068010000000000000000640100000000620100006101006010600487890489179081041790810417908104179081041790810417908104179081041790810481189050919050565b60007faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8216156151f5576001175b7fcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc821615615221576002175b7ff0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f082161561524d576004175b7fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00821615615279576008175b7fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008216156152a5576010175b7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008216156152d1576020175b77ffffffffffffffff0000000000000000ffffffffffffffff198216156152f6576040175b6fffffffffffffffffffffffffffffffff19821615610f0557608017919050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529060c0820190815260006020820181905260408201819052606082018190526080820181905260a082015260c00161537f6154a7565b905290565b82600281019282156153b2579160200282015b828111156153b2578251825591602001919060010190615397565b506153be9291506154c2565b5090565b60606040519081016040528060008152602001600081526020016000151581525090565b6101c06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60a0604051908101604052806005906020820280388339509192915050565b60a060405190810160405280600081526020016000151581526020016000815260200160008152602001600081525090565b60408051808201825290600290829080388339509192915050565b61142991905b808211156153be57600081556001016154c85600a165627a7a72305820218eccd8214eaecddb9ef9f51d9fb9c17744afd4f7b7ffb38b01945c917efc900029000000000000000000000000543ff227f64aa17ea132bf9886cab5db55dcaddf",
  "constructorArguments": "000000000000000000000000543ff227f64aa17ea132bf9886cab5db55dcaddf"
}