{
  "address": "0x0906896a7ecfc7a3309e88ece89d6bb761380746",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GenbbyToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-02\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        }\n        else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        Unpause();\n    }\n\n}\n\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n}\n\n\n/**\n * @title Capped Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract CappedMintableToken is PausableToken {\n\n    uint256 public hard_cap;\n    // List of agents that are allowed to create new tokens\n    mapping (address => bool) mintAgents;\n\n    event MintingAgentChanged(address addr, bool state);\n    event Mint(address indexed to, uint256 amount);\n\n    /*\n     * @dev Modifier to check if `msg.sender` is an agent allowed to create new tokens\n     */\n    modifier onlyMintAgent() {\n        require(mintAgents[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Owner can allow a crowdsale contract to mint new tokens\n     */\n    function setMintAgent(address addr, bool state) onlyOwner whenNotPaused  public {\n        mintAgents[addr] = state;\n        MintingAgentChanged(addr, state);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyMintAgent whenNotPaused public returns (bool) {\n        require (totalSupply.add(_amount) <= hard_cap);\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Gets if an specified address is allowed to mint tokens\n     * @param _user The address to query if is allowed to mint tokens\n     * @return An bool representing if the address passed is allowed to mint tokens \n     */\n    function isMintAgent(address _user) public view returns (bool state) {\n        return mintAgents[_user];\n    }\n\n}\n\n\n/**\n * @title Platform Token\n * @dev Contract that allows the Genbby platform to work properly and being scalable\n */\ncontract PlatformToken is CappedMintableToken {\n\n    mapping (address => bool) trustedContract;\n\n    event TrustedContract(address addr, bool state);\n\n    /**\n     * @dev Modifier that check that `msg.sender` is an trusted contract\n     */\n    modifier onlyTrustedContract() {\n        require(trustedContract[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev The owner can set a contract as a trusted contract\n     */\n    function setTrustedContract(address addr, bool state) onlyOwner whenNotPaused public {\n        trustedContract[addr] = state;\n        TrustedContract(addr, state);\n    }\n\n    /**\n     * @dev Function that trusted contracts can use to perform any buying that users do in the platform\n     */\n    function buy(address who, uint256 amount) onlyTrustedContract whenNotPaused public {\n        require (balances[who] >= amount);\n        balances[who] = balances[who].sub(amount);\n        totalSupply = totalSupply.sub(amount);\n    }\n\n    /**\n     * @dev Function to check if a contract is marked as a trusted one\n     * @param _contract The address of the contract to query of\n     * @return A bool indicanting if the passed contract is considered as a trusted one\n     */\n    function isATrustedContract(address _contract) public view returns (bool state) {\n        return trustedContract[_contract];\n    }\n\n}\n\n\n/**\n * @title UpgradeAgent\n * @dev Interface of a contract that transfers tokens to itself\n * Inspired by Lunyr\n */\ncontract UpgradeAgent {\n\n    function upgradeBalance(address who, uint256 amount) public;\n    function upgradeAllowance(address _owner, address _spender, uint256 amount) public;\n    function upgradePendingExchange(address _owner, uint256 amount) public;\n\n}\n\n\n/**\n * @title UpgradableToken\n * @dev Allows users to transfers their tokens to a new contract when the token is paused and upgrading \n * It is like a guard for unexpected situations \n */\ncontract UpgradableToken is PlatformToken {\n\n    // The next contract where the tokens will be migrated\n    UpgradeAgent public upgradeAgent;\n    uint256 public totalSupplyUpgraded;\n    bool public upgrading = false;\n\n    event UpgradeBalance(address who, uint256 amount);\n    event UpgradeAllowance(address owner, address spender, uint256 amount);\n    event UpgradePendingExchange(address owner, uint256 value);\n    event UpgradeStateChange(bool state);\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is upgrading\n     */\n    modifier whenUpgrading() {\n        require(upgrading);\n        _;\n    }\n\n    /**\n     * @dev Function that allows the `owner` to set the upgrade agent\n     */\n    function setUpgradeAgent(address addr) onlyOwner public {\n        upgradeAgent = UpgradeAgent(addr);\n    }\n\n    /**\n     * @dev called by the owner when token is paused, triggers upgrading state\n     */\n    function startUpgrading() onlyOwner whenPaused public {\n        upgrading = true;\n        UpgradeStateChange(true);\n    }\n\n    /**\n     * @dev called by the owner then token is paused and upgrading, returns to a non-upgrading state\n     */\n    function stopUpgrading() onlyOwner whenPaused whenUpgrading public {\n        upgrading = false;\n        UpgradeStateChange(false);\n    }\n\n    /**\n     * @dev Allows anybody to upgrade tokens from these contract to the new one\n     */\n    function upgradeBalanceOf(address who) whenUpgrading public {\n        uint256 value = balances[who];\n        require (value != 0);\n        balances[who] = 0;\n        totalSupply = totalSupply.sub(value);\n        totalSupplyUpgraded = totalSupplyUpgraded.add(value);\n        upgradeAgent.upgradeBalance(who, value);\n        UpgradeBalance(who, value);\n    }\n\n    /**\n     * @dev Allows anybody to upgrade allowances from these contract to the new one\n     */\n    function upgradeAllowance(address _owner, address _spender) whenUpgrading public {\n        uint256 value = allowed[_owner][_spender];\n        require (value != 0);\n        allowed[_owner][_spender] = 0;\n        upgradeAgent.upgradeAllowance(_owner, _spender, value);\n        UpgradeAllowance(_owner, _spender, value);\n    }\n\n}\n\n/**\n * @title Genbby Token\n * @dev Token setting\n */\ncontract GenbbyToken is UpgradableToken {\n\n    string public contactInformation;\n    string public name = \"Genbby Token\";\n    string public symbol = \"GG\";\n    uint256 public constant decimals = 18;\n    uint256 public constant factor = 10 ** decimals;\n\n    event UpgradeTokenInformation(string newName, string newSymbol);\n\n    function GenbbyToken() public {\n        hard_cap = (10 ** 9) * factor;\n        contactInformation = 'https://genbby.com/';\n    }\n\n    function setTokenInformation(string _name, string _symbol) onlyOwner public {\n        name = _name;\n        symbol = _symbol;\n        UpgradeTokenInformation(name, symbol);\n    }\n\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n    }\n\n    /*\n     * @dev Do not allow direct deposits\n     */\n    function () public payable {\n        revert();\n    }\n\n}",
  "bytecode": ""
}