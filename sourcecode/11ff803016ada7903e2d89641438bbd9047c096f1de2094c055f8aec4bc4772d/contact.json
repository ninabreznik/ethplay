{
  "address": "0x32a60c0451bd8623c0056076b770fd19b777b1e3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Dividend",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-24\n*/\n\npragma solidity 0.5.2;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/Dividend.sol\n\ncontract Dividend {\n    using SafeMath for uint;\n\n    address payable public addr1 = 0x2b339Ebdd12d6f79aA18ed2A032ebFE1FA4Faf45;\n    address payable public addr2 = 0x4BB515b7443969f7eb519d175e209aE8Af3601C1;\n\n    event LogPayment(\n        address indexed from,\n        address indexed to,\n        uint amount,\n        uint total\n    );\n\n    // NOTE: Transfer of block reward (coinbase) does not invoke this function\n    function () external payable {\n        // 80 % to address 1, remaining to address 2\n        uint amount1 = msg.value.mul(8).div(10);\n        uint amount2 = msg.value.sub(amount1);\n\n        // WARNING: transfer will fail if it uses more than 2300 gas\n        addr1.transfer(amount1);\n        addr2.transfer(amount2);\n\n        emit LogPayment(msg.sender, addr1, amount1, msg.value);\n        emit LogPayment(msg.sender, addr2, amount2, msg.value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"addr2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addr1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"}]",
  "bytecode": "608060405260008054600160a060020a0319908116732b339ebdd12d6f79aa18ed2a032ebfe1fa4faf451790915560018054909116734bb515b7443969f7eb519d175e209ae8af3601c117905534801561005857600080fd5b50610285806100686000396000f3fe608060405260043610610045577c010000000000000000000000000000000000000000000000000000000060003504638de38f988114610188578063eabe09ad146101b9575b6000610069600a61005d34600863ffffffff6101ce16565b9063ffffffff61020216565b9050600061007d348363ffffffff61022616565b60008054604051929350600160a060020a03169184156108fc0291859190818181858888f193505050501580156100b8573d6000803e3d6000fd5b50600154604051600160a060020a039091169082156108fc029083906000818181858888f193505050501580156100f3573d6000803e3d6000fd5b50600054604080518481523460208201528151600160a060020a039093169233927f87bd3c3727dc384c6b57f4c6d12aa3c76a5fdb42a641218fdfd1844a21c852ea928290030190a3600154604080518381523460208201528151600160a060020a039093169233927f87bd3c3727dc384c6b57f4c6d12aa3c76a5fdb42a641218fdfd1844a21c852ea928290030190a35050005b34801561019457600080fd5b5061019d61023b565b60408051600160a060020a039092168252519081900360200190f35b3480156101c557600080fd5b5061019d61024a565b60008215156101df575060006101fc565b8282028284828115156101ee57fe5b04146101f957600080fd5b90505b92915050565b600080821161021057600080fd5b6000828481151561021d57fe5b04949350505050565b60008282111561023557600080fd5b50900390565b600154600160a060020a031681565b600054600160a060020a03168156fea165627a7a72305820063ef7f482e2a73857b706ae21bd4c983e8526e73d330973b16e0d7471fe0efd0029"
}