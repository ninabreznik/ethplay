{
  "address": "0xc767b1cec507f1584469e8efe1a94ad4c75e02ed",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PremiumFactories",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ncontract PremiumFactories {\n    \n    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\n    address owner;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    mapping(uint256 => PremiumUnit) premiumUnits; // Contracts for each premium unit (unitId)\n    mapping(uint256 => PremiumFactory) premiumFactories; // Factory Id\n    \n    uint256 minPrice = 0.5 ether;\n    uint256 dailyDegradation = 10; // 1% a day\n    uint256 maxGasPrice = 20000000000; // 20 Gwei \n    uint256 constant LAUNCH_TIME = 1558814400;\n    \n    struct PremiumFactory {\n        address owner;\n        uint256 unitId;\n        uint256 price;\n        uint256 lastFlipTime; // Last time factory was purchased\n        uint256 lastClaimTimestamp; // Last time factory produced units\n    }\n    \n    function purchaseFactory(uint256 factoryId) external payable {\n        require(msg.sender == tx.origin);\n        require(tx.gasprice <= maxGasPrice);\n        require(now >= LAUNCH_TIME);\n        \n        PremiumFactory memory factory = premiumFactories[factoryId];\n        require(msg.sender != factory.owner && factory.owner > 0);\n        \n        uint256 currentFactoryPrice = getFactoryPrice(factory);\n        require(msg.value >= currentFactoryPrice);\n        \n        \n        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\n        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / premiumUnit.unitProductionSeconds();\n        if (unitsProduced == 0) {\n            unitsProduced++; // Round up (so every owner gets at least 1 unit)\n        }\n        premiumUnit.mintUnit(factory.owner, unitsProduced);\n        \n        // Send profit to previous owner (and bankroll)\n        uint256 previousOwnerProfit = currentFactoryPrice * 94 / 100; // 94% of 120% (so ~13% profit)\n        factory.owner.transfer(previousOwnerProfit);\n        bankroll.depositEth.value(currentFactoryPrice - previousOwnerProfit)(50, 50); // Remaining 7% cut\n        \n        // Update factory\n        factory.price = currentFactoryPrice * 120 / 100;\n        factory.owner = msg.sender;\n        factory.lastFlipTime = now;\n        factory.lastClaimTimestamp = now;\n        premiumFactories[factoryId] = factory;\n        \n        // Return overpayments\n        if (msg.value > currentFactoryPrice) {\n            msg.sender.transfer(msg.value - currentFactoryPrice);\n        }\n    }\n    \n    function getFactoryPrice(PremiumFactory factory) internal view returns (uint256 factoryPrice) {\n        uint256 secondsSinceLastFlip = 0;\n        if (now > factory.lastFlipTime) { // Edge case for initial listing\n            secondsSinceLastFlip = now - factory.lastFlipTime;\n        }\n        \n        uint256 priceReduction = (secondsSinceLastFlip * dailyDegradation * factory.price) / 86400000;\n        \n        factoryPrice = factory.price;\n        if (priceReduction > factoryPrice || factoryPrice - priceReduction < minPrice) {\n            factoryPrice = minPrice;\n        } else {\n            factoryPrice -= priceReduction;\n        }\n    }\n    \n    function getFactories(uint256 endId) external view returns (uint256[] factoryIds, address[] owners, uint256[] unitIds, uint256[] prices, uint256[] lastClaimTime) {\n        factoryIds = new uint256[](endId);\n        owners = new address[](endId);\n        unitIds = new uint256[](endId);\n        prices = new uint256[](endId);\n        lastClaimTime = new uint256[](endId);\n        \n        for (uint256 i = 0; i < endId; i++) {\n            PremiumFactory memory factory = premiumFactories[i+1]; // Id starts at 1\n            factoryIds[i] = i+1;\n            owners[i] = factory.owner;\n            unitIds[i] = factory.unitId;\n            prices[i] = getFactoryPrice(factory);\n            lastClaimTime[i] = factory.lastClaimTimestamp;\n        }\n    }\n    \n    // Just incase needs tweaking for longevity\n    function updateFactoryConfig(uint256 newMinPrice, uint256 newDailyDegradation, uint256 newMaxGasPrice) external {\n        require(msg.sender == owner);\n        minPrice = newMinPrice;\n        dailyDegradation = newDailyDegradation;\n        maxGasPrice = newMaxGasPrice;\n    }\n    \n    function addPremiumUnit(address premiumUnitContract) external {\n        require(msg.sender == owner);\n        PremiumUnit unit = PremiumUnit(premiumUnitContract);\n        premiumUnits[unit.unitId()] = unit;\n    }\n    \n    function addFactory(uint256 id, uint256 unitId, address player, uint256 startPrice) external {\n        require(msg.sender == owner);\n        require(premiumFactories[id].owner == 0);\n        require(premiumUnits[unitId].unitId() == unitId);\n        \n        PremiumFactory memory newFactory;\n        newFactory.owner = player;\n        newFactory.unitId = unitId;\n        newFactory.price = startPrice;\n        newFactory.lastClaimTimestamp = now;\n        newFactory.lastFlipTime = LAUNCH_TIME;\n        \n        premiumFactories[id] = newFactory;\n    }\n    \n    function claimUnits(uint256 factoryId, bool equip) external {\n        PremiumFactory storage factory = premiumFactories[factoryId];\n        require(factory.owner == msg.sender);\n        \n        // Claim all units produced by a factory (since last claimed)\n        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\n        uint256 unitProductionSeconds = premiumUnit.unitProductionSeconds(); // Seconds to produce one unit\n        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / unitProductionSeconds;\n        require(unitsProduced > 0);\n        factory.lastClaimTimestamp += (unitProductionSeconds * unitsProduced);\n        \n        // Mints erc-20 premium units\n        premiumUnit.mintUnit(msg.sender, unitsProduced);\n        \n        // Allow equip in one tx too\n        if (equip) {\n             premiumUnit.equipUnit(msg.sender, uint80(unitsProduced), 100);\n        }\n    }\n    \n    \n    \n}\n\ninterface ERC20 {\n    function totalSupply() external constant returns (uint);\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ninterface ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\n}\n\ncontract Bankroll {\n     function depositEth(uint256 gooAllocation, uint256 tokenAllocation) payable external;\n}\n\ncontract PremiumUnit {\n    function mintUnit(address player, uint256 amount) external;\n    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external;\n    uint256 public unitId;\n    uint256 public unitProductionSeconds;\n}\n\ncontract Units {\n    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\n    function mintUnitExternal(uint256 unit, uint80 amount, address player, uint8 chosenPosition) external;\n    function deleteUnitExternal(uint80 amount, uint256 unit, address player) external;\n    \n    struct UnitsOwned {\n        uint80 units;\n        uint8 factoryBuiltFlag;\n    }\n}\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526706f05b59d3b20000600355600a6004556404a817c80060055534801561002a57600080fd5b5060008054600160a060020a03191633179055610d438061004c6000396000f30060806040526004361061005e5763ffffffff60e060020a60003504166304adbef081146100635780634c78c6eb146100835780635a2587f4146100a4578063d083652114610224578063d88d314e1461022f578063f28447551461024c575b600080fd5b34801561006f57600080fd5b50610081600435602435604435610276565b005b34801561008f57600080fd5b50610081600160a060020a036004351661029b565b3480156100b057600080fd5b506100bc600435610364565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561010c5781810151838201526020016100f4565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561014b578181015183820152602001610133565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561018a578181015183820152602001610172565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156101c95781810151838201526020016101b1565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156102085781810151838201526020016101f0565b505050509050019a505050505050505050505060405180910390f35b610081600435610567565b34801561023b57600080fd5b5061008160043560243515156108fe565b34801561025857600080fd5b50610081600435602435600160a060020a0360443516606435610b15565b600054600160a060020a0316331461028d57600080fd5b600392909255600455600555565b60008054600160a060020a031633146102b357600080fd5b819050806001600083600160a060020a031663dca565536040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b505050506040513d602081101561032357600080fd5b505181526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b60608060608060606000610376610cde565b876040519080825280602002602001820160405280156103a0578160200160208202803883390190505b509650876040519080825280602002602001820160405280156103cd578160200160208202803883390190505b509550876040519080825280602002602001820160405280156103fa578160200160208202803883390190505b50945087604051908082528060200260200182016040528015610427578160200160208202803883390190505b50935087604051908082528060200260200182016040528015610454578160200160208202803883390190505b509250600091505b8782101561055c57506001808201600081815260026020818152604092839020835160a0810185528154600160a060020a03168152958101549186019190915290810154918401919091526003810154606084015260040154608083015287518890849081106104c857fe5b60209081029091010152805186518790849081106104e257fe5b600160a060020a039092166020928302909101820152810151855186908490811061050957fe5b6020908102909101015261051c81610c7c565b848381518110151561052a57fe5b602090810290910101526080810151835184908490811061054757fe5b6020908102909101015260019091019061045c565b505091939590929450565b61056f610cde565b600080808033321461058057600080fd5b6005543a111561058f57600080fd5b635ce99ec04210156105a057600080fd5b600086815260026020818152604092839020835160a0810185528154600160a060020a0316808252600183015493820193909352928101549383019390935260038301546060830152600490920154608082015295503314801590610612575060008560000151600160a060020a0316115b151561061d57600080fd5b61062685610c7c565b93503484111561063557600080fd5b60208086015160009081526001825260408082205481517febd103690000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169650869363ebd10369936004808501949293928390030190829087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505050506040513d60208110156106cf57600080fd5b5051608086015142038115156106e157fe5b0491508115156106f2576001909101905b8451604080517e6843d9000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052905191851691626843d99160448082019260009290919082900301818387803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505086516040516064605e8902049450600160a060020a0390911692506108fc841502915083906000818181858888f193505050501580156107b7573d6000803e3d6000fd5b507366a9f1e53173de33bec727ef76afa84956ae1b25600160a060020a031663ed50aeb98286036032806040518463ffffffff1660e060020a02815260040180838152602001828152602001925050506000604051808303818588803b15801561082057600080fd5b505af1158015610834573d6000803e3d6000fd5b505050505060648460780281151561084857fe5b04604086810191825233875242606088018181526080890191825260008a815260026020818152949091208a51815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178155938a01516001850155935193830193909355915160038201559051600490910155348410156108f65760405133903486900380156108fc02916000818181858888f193505050501580156108f4573d6000803e3d6000fd5b505b505050505050565b6000828152600260205260408120805490919081908190600160a060020a0316331461092957600080fd5b6001848101546000908152602091825260408082205481517febd103690000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169650869363ebd10369936004808501949293928390030190829087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b50516004850154909250829042038115156109db57fe5b049050600081116109eb57600080fd5b60048085018054848402019055604080517e6843d900000000000000000000000000000000000000000000000000000000815233928101929092526024820183905251600160a060020a03851691626843d991604480830192600092919082900301818387803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b5050505084156108f657604080517fd04cf17300000000000000000000000000000000000000000000000000000000815233600482015269ffffffffffffffffffff831660248201526064604482018190529151600160a060020a0386169263d04cf1739280820192600092909182900301818387803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b50505050505050505050565b610b1d610cde565b600054600160a060020a03163314610b3457600080fd5b600085815260026020526040902054600160a060020a031615610b5657600080fd5b60008481526001602090815260408083205481517fdca5655300000000000000000000000000000000000000000000000000000000815291518894600160a060020a039092169363dca5655393600480820194929392918390030190829087803b158015610bc357600080fd5b505af1158015610bd7573d6000803e3d6000fd5b505050506040513d6020811015610bed57600080fd5b505114610bf957600080fd5b600160a060020a039283168152602080820194855260408083019384524260808401908152635ce99ec0606085019081526000988952600293849052919097209251835473ffffffffffffffffffffffffffffffffffffffff19169516949094178255935160018201559051928101929092555160038201559051600490910155565b60008060008091508360600151421115610c9a578360600151420391505b5060408301516004549092506305265c0090820283020482811180610cc25750600354818403105b15610cd1576003549250610cd7565b80830392505b5050919050565b60a0604051908101604052806000600160a060020a031681526020016000815260200160008152602001600081526020016000815250905600a165627a7a723058206fec101ac1d20a48635bc6208565618044a9b81fe85771a501b8960cfec920290029"
}