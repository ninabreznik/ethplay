{
  "address": "0xc1e50afcd71a09f81f1b4e4daa1d1a1a4d678d2a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GBPp",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-05\n*/\n\npragma solidity ^0.4.17;\n\n\n\n/// @title CurrencyToken contract\ncontract GBPp {\n\n    address public server; // Address, which the platform website uses.\n    address public populous; // Address of the Populous bank contract.\n\n    uint256 public totalSupply;\n    bytes32 public name;// token name, e.g, pounds for fiat UK pounds.\n    uint8 public decimals;// How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    bytes32 public symbol;// An identifier: eg SBX.\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    //EVENTS\n    // An event triggered when a transfer of tokens is made from a _from address to a _to address.\n    event Transfer(\n        address indexed _from, \n        address indexed _to, \n        uint256 _value\n    );\n    // An event triggered when an owner of tokens successfully approves another address to spend a specified amount of tokens.\n    event Approval(\n        address indexed _owner, \n        address indexed _spender, \n        uint256 _value\n    );\n    // event EventMintTokens(bytes32 currency, uint amount);\n\n    // MODIFIERS\n\n    modifier onlyServer {\n        require(isServer(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyServerOrOnlyPopulous {\n        require(isServer(msg.sender) == true || isPopulous(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyPopulous {\n        require(isPopulous(msg.sender) == true);\n        _;\n    }\n    // NON-CONSTANT METHODS\n    \n    /** @dev Creates a new currency/token.\n      * param _decimalUnits The decimal units/places the token can have.\n      * param _tokenSymbol The token's symbol, e.g., GBP.\n      * param _decimalUnits The tokens decimal unites/precision\n      * param _amount The amount of tokens to create upon deployment\n      * param _owner The owner of the tokens created upon deployment\n      * param _server The server/admin address\n      */\n    function GBPp ()\n        public\n    {\n        populous = server = 0x63d509F7152769Ddf162eD048B83719fE1e31080;\n        symbol = name = 0x47425070; // Set the name for display purposes\n        decimals = 6; // Amount of decimals for display purposes\n        balances[server] = safeAdd(balances[server], 10000000000000000);\n        totalSupply = safeAdd(totalSupply, 10000000000000000);\n    }\n\n    // ERC20\n\n    //Note.. Need to emit event, Pokens destroyed... from system\n    /** @dev Destroys a specified amount of tokens \n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n\n    function destroyTokens(uint amount) public onlyPopulous returns (bool success) {\n        if (balances[populous] < amount) {\n            return false;\n        } else {\n            balances[populous] = safeSub(balances[populous], amount);\n            totalSupply = safeSub(totalSupply, amount);\n            return true;\n        }\n    }\n\n    \n    /** @dev Destroys a specified amount of tokens, from a user.\n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n    function destroyTokensFrom(uint amount, address from) public onlyPopulous returns (bool success) {\n        if (balances[from] < amount) {\n            return false;\n        } else {\n            balances[from] = safeSub(balances[from], amount);\n            totalSupply = safeSub(totalSupply, amount);\n            return true;\n        }\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    // ACCESS MANAGER\n\n    /** @dev Checks a given address to determine whether it is populous address.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to populous or not.\n      */\n    function isPopulous(address sender) public view returns (bool) {\n        return sender == populous;\n    }\n\n        /** @dev Changes the populous contract address.\n      * @dev The method requires the message sender to be the set server.\n      * @param _populous The address to be set as populous.\n      */\n    function changePopulous(address _populous) public {\n        require(isServer(msg.sender) == true);\n        populous = _populous;\n    }\n\n    // CONSTANT METHODS\n    \n    /** @dev Checks a given address to determine whether it is the server.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to the server or not.\n      */\n    function isServer(address sender) public view returns (bool) {\n        return sender == server;\n    }\n\n    /** @dev Changes the server address that is set by the constructor.\n      * @dev The method requires the message sender to be the set server.\n      * @param _server The new address to be set as the server.\n      */\n    function changeServer(address _server) public {\n        require(isServer(msg.sender) == true);\n        server = _server;\n    }\n\n\n    // SAFE MATH\n\n\n      /** @dev Safely multiplies two unsigned/non-negative integers.\n    * @dev Ensures that one of both numbers can be derived from dividing the product by the other.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n  /** @dev Safely subtracts one number from another\n    * @dev Ensures that the number to subtract is lower.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /** @dev Safely adds two unsigned/non-negative integers.\n    * @dev Ensures that the sum of both numbers is greater or equal to one of both.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"destroyTokensFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isPopulous\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_server\",\"type\":\"address\"}],\"name\":\"changeServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"populous\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_populous\",\"type\":\"address\"}],\"name\":\"changePopulous\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"server\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isServer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b600080547363d509f7152769ddf162ed048b83719fe1e31080600160a060020a03199182168117808455600180549093169091179091556347425070600381905560055560048054600660ff199091168117909155600160a060020a039091168252602052604090205461009790662386f26fc100006401000000006100d9810261082e1704565b60008054600160a060020a03168152600660205260409020556002546100d190662386f26fc1000064010000000061082e6100d982021704565b6002556100fd565b60008282018381108015906100ee5750828110155b15156100f657fe5b9392505050565b61087e8061010c6000396000f300606060405236156101045763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630156b323811461010957806305fd22d01461013f57806306fdde031461015e57806308fb8a8814610183578063095ea7b3146101a457806318160ddd146101c657806323b872dd146101d957806327e235e314610201578063313ce567146102205780635c6581651461024957806367fbd2891461026e57806370a082311461028457806394a3760f146102a357806395d89b41146102d2578063a9059cbb146102e5578063da37415714610307578063dd62ed3e14610326578063fd922a421461034b578063fda089581461035e575b600080fd5b341561011457600080fd5b61012b600435600160a060020a036024351661037d565b604051901515815260200160405180910390f35b341561014a57600080fd5b61012b600160a060020a0360043516610415565b341561016957600080fd5b61017161042c565b60405190815260200160405180910390f35b341561018e57600080fd5b6101a2600160a060020a0360043516610432565b005b34156101af57600080fd5b61012b600160a060020a0360043516602435610478565b34156101d157600080fd5b6101716104e4565b34156101e457600080fd5b61012b600160a060020a03600435811690602435166044356104ea565b341561020c57600080fd5b610171600160a060020a03600435166105f0565b341561022b57600080fd5b610233610602565b60405160ff909116815260200160405180910390f35b341561025457600080fd5b610171600160a060020a036004358116906024351661060b565b341561027957600080fd5b61012b600435610628565b341561028f57600080fd5b610171600160a060020a03600435166106c4565b34156102ae57600080fd5b6102b66106df565b604051600160a060020a03909116815260200160405180910390f35b34156102dd57600080fd5b6101716106ee565b34156102f057600080fd5b61012b600160a060020a03600435166024356106f4565b341561031257600080fd5b6101a2600160a060020a0360043516610788565b341561033157600080fd5b610171600160a060020a03600435811690602435166107ce565b341561035657600080fd5b6102b66107f9565b341561036957600080fd5b61012b600160a060020a0360043516610808565b600061038833610415565b151560011461039657600080fd5b600160a060020a038216600090815260066020526040902054839010156103bf5750600061040f565b600160a060020a0382166000908152600660205260409020546103e2908461081c565b600160a060020a038316600090815260066020526040902055600254610408908461081c565b6002555060015b92915050565b600154600160a060020a038281169116145b919050565b60035481565b61043b33610808565b151560011461044957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025481565b600160a060020a03808416600081815260076020908152604080832033909516835293815283822054928252600690529182205483901080159061052e5750828110155b151561053957600080fd5b600160a060020a038085166000908152600660205260408082208054870190559187168152208054849003905560001981101561059e57600160a060020a03808616600090815260076020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3506001949350505050565b60066020526000908152604090205481565b60045460ff1681565b600760209081526000928352604080842090915290825290205481565b600061063333610415565b151560011461064157600080fd5b600154600160a060020a03166000908152600660205260409020548290101561066c57506000610427565b600154600160a060020a0316600090815260066020526040902054610691908361081c565b600154600160a060020a03166000908152600660205260409020556002546106b9908361081c565b600255506001610427565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a031681565b60055481565b600160a060020a0333166000908152600660205260408120548290101561071a57600080fd5b600160a060020a033381166000818152600660205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b61079133610808565b151560011461079f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a031681565b600054600160a060020a0390811691161490565b60008282111561082857fe5b50900390565b60008282018381108015906108435750828110155b151561084b57fe5b93925050505600a165627a7a72305820e21e1ce4b86783645be76f25d7e059286c66488455931b95f266914bef64d5ba0029"
}