{
  "address": "0x5dbac24e98e2a4f43adc0dc82af403fca063ce2c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EngagementToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-19\n*/\n\npragma solidity ^0.4.21;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\ncontract PoolRole is Ownable {\n    mapping (address => bool) internal poolRoleBearer;\n\n    event PoolRoleGranted(address indexed addr);\n    event PoolRoleRevoked(address indexed addr);\n\n    /**\n    * @dev give an address access to this role\n    */\n    function grantPoolRole(address addr) public onlyOwner {\n        poolRoleBearer[addr] = true;\n        emit PoolRoleGranted(addr);\n    }\n\n    /**\n    * @dev remove an address access to this role\n    */\n    function revokePoolRole(address addr) public onlyOwner {\n        poolRoleBearer[addr] = false;\n        emit PoolRoleRevoked(addr);\n    }\n\n    /**\n    * @dev check if an address has this role\n    * @return bool\n    */\n    function hasPoolRole(address addr) view public returns (bool)\n    {\n        return poolRoleBearer[addr];\n    }\n\n}\n\n\ncontract HasNoEther is Ownable, PoolRole {\n\n    /**\n    * @dev Constructor that rejects incoming Ether\n    * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n    * we could use assembly to access msg.value.\n    */\n    function HasNoEther() public payable {\n        require(msg.value == 0);\n    }\n\n    /**\n     * @dev Disallows direct send by settings a default function without the `payable` flag.\n     */\n    function() external {\n    }\n\n    /**\n     * @dev Transfer all Ether held by the contract to the owner.\n     */\n    function reclaimEther() external onlyOwner {\n        assert(owner.send(address(this).balance));\n    }\n}\n\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    * To change the approve amount you first have to reduce the addresses`\n    * allowance to zero by calling `approve(_spender,0)` if it is not\n    * already 0 to mitigate the race condition described here:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        //  To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract BurnableToken is StandardToken, Ownable {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) onlyOwner public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n    }\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Mint a specific amount of tokens to owner.\n     * @param _amount The amount of token to be minted.\n     */\n    function mint(uint256 _amount) onlyOwner canMint public {\n        totalSupply = totalSupply.add(_amount);\n        balances[msg.sender] = balances[msg.sender].add(_amount);\n        emit Mint(msg.sender, _amount);\n        emit Transfer(address(0), msg.sender, _amount);\n    }\n\n    /**\n     * @dev Disable minting forever\n     */\n    function finishMinting() onlyOwner canMint public {\n        mintingFinished = true;\n        emit MintFinished();\n    }\n}\n\n\n/**\n * @title EngagementToken\n * @dev ERC20 EGT Token\n *\n * EGT are displayed using 18 decimal places of precision.\n *\n * 1 Billion EGT Token total supply:\n */\ncontract EngagementToken is BurnableToken, MintableToken, HasNoEther {\n\n    string public constant name = \"EngagementToken\";\n\n    string public constant symbol = \"EGT\";\n\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\n\n    // 06/14/2018 @ 11:59pm (UTC)\n    uint256 public constant FREEZE_END = 1529020799;\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    function EngagementToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function multiTransfer(address[] recipients, uint256[] amounts) public {\n        require(recipients.length == amounts.length);\n        for (uint i = 0; i < recipients.length; i++) {\n            transfer(recipients[i], amounts[i]);\n        }\n    }\n}",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03191633600160a060020a0316179055341561004557600080fd5b6b033b2e3c9fd0803ce80000006000818155600160a060020a0333168082526001602052604080832084905590927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a36110b8806100b36000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014a57806306fdde0314610171578063095ea7b3146101fb57806318160ddd1461021d5780631e89d5451461024257806323b872dd146102d15780632ff2e9dc146102f9578063313ce5671461030c57806342966c6814610335578063661884631461034b57806370a082311461036d5780637d64bcb41461038c5780638da5cb5b1461039f5780638fda183a146103ce57806395d89b41146103ed5780639f727c2714610400578063a0712d6814610413578063a9059cbb14610429578063d73dd6231461044b578063dd62ed3e1461046d578063e5b4003b14610492578063eb4c5593146104b1578063f2fde38b146104c4578063fa404e34146104e3575b341561014857600080fd5b005b341561015557600080fd5b61015d610502565b604051901515815260200160405180910390f35b341561017c57600080fd5b610184610523565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c05780820151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020657600080fd5b61015d600160a060020a036004351660243561055a565b341561022857600080fd5b610230610600565b60405190815260200160405180910390f35b341561024d57600080fd5b61014860046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061060695505050505050565b34156102dc57600080fd5b61015d600160a060020a0360043581169060243516604435610665565b341561030457600080fd5b6102306106c4565b341561031757600080fd5b61031f6106d4565b60405160ff909116815260200160405180910390f35b341561034057600080fd5b6101486004356106d9565b341561035657600080fd5b61015d600160a060020a03600435166024356107bf565b341561037857600080fd5b610230600160a060020a03600435166108b9565b341561039757600080fd5b6101486108d4565b34156103aa57600080fd5b6103b261097a565b604051600160a060020a03909116815260200160405180910390f35b34156103d957600080fd5b61015d600160a060020a0360043516610989565b34156103f857600080fd5b6101846109a7565b341561040b57600080fd5b6101486109de565b341561041e57600080fd5b610148600435610a31565b341561043457600080fd5b61015d600160a060020a0360043516602435610b46565b341561045657600080fd5b61015d600160a060020a0360043516602435610ba3565b341561047857600080fd5b610230600160a060020a0360043581169060243516610c47565b341561049d57600080fd5b610148600160a060020a0360043516610c72565b34156104bc57600080fd5b610230610ce0565b34156104cf57600080fd5b610148600160a060020a0360043516610ce8565b34156104ee57600080fd5b610148600160a060020a0360043516610d83565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600f81527f456e676167656d656e74546f6b656e0000000000000000000000000000000000602082015281565b600081158061058c5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561059757600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000815183511461061657600080fd5b5060005b82518110156106605761065783828151811061063257fe5b9060200190602002015183838151811061064857fe5b90602001906020020151610b46565b5060010161061a565b505050565b6000635b23017f42101580610688575060035433600160a060020a039081169116145b80610697575061069783610989565b806106a657506106a633610989565b15156106b157600080fd5b6106bc848484610dee565b949350505050565b6b033b2e3c9fd0803ce800000081565b601281565b60035433600160a060020a039081169116146106f457600080fd5b6000811161070157600080fd5b600160a060020a03331660009081526001602052604090205481111561072657600080fd5b600160a060020a03331660009081526001602052604090205461074f908263ffffffff610f7016565b600160a060020a0333166000908152600160205260408120919091555461077c908263ffffffff610f7016565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a250565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561081c57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610853565b61082c818463ffffffff610f7016565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146108ef57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561091757600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1565b600354600160a060020a031681565b600160a060020a031660009081526004602052604090205460ff1690565b60408051908101604052600381527f4547540000000000000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a039081169116146109f957600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610a2f57fe5b565b60035433600160a060020a03908116911614610a4c57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610a7457600080fd5b600054610a87908263ffffffff610f8216565b6000908155600160a060020a033316815260016020526040902054610ab2908263ffffffff610f8216565b600160a060020a0333166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600160a060020a03331660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a350565b6000635b23017f42101580610b69575060035433600160a060020a039081169116145b80610b785750610b7883610989565b80610b875750610b8733610989565b1515610b9257600080fd5b610b9c8383610f91565b9392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610bdb908363ffffffff610f8216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610c8d57600080fd5b600160a060020a03811660008181526004602052604090819020805460ff191660011790557f1349d3eaa89eb9aa16dc3c06eb90a383f863cc1483d6a9e4b8be2e7ab5c6cf7d905160405180910390a250565b635b23017f81565b60035433600160a060020a03908116911614610d0357600080fd5b600160a060020a0381161515610d1857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610d9e57600080fd5b600160a060020a03811660008181526004602052604090819020805460ff191690557f15400faee0685fef808caec11b71577450b8d918f81d7c99f2159d7b4b2d5a10905160405180910390a250565b6000600160a060020a0383161515610e0557600080fd5b600160a060020a038416600090815260016020526040902054821115610e2a57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610e5d57600080fd5b600160a060020a038416600090815260016020526040902054610e86908363ffffffff610f7016565b600160a060020a038086166000908152600160205260408082209390935590851681522054610ebb908363ffffffff610f8216565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610f03908363ffffffff610f7016565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610f7c57fe5b50900390565b600082820183811015610b9c57fe5b6000600160a060020a0383161515610fa857600080fd5b600160a060020a033316600090815260016020526040902054821115610fcd57600080fd5b600160a060020a033316600090815260016020526040902054610ff6908363ffffffff610f7016565b600160a060020a03338116600090815260016020526040808220939093559085168152205461102b908363ffffffff610f8216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a72305820802c6c132876f80a8ef157de777d6fad51a2e601110d4ee5148d13395e5d0d730029"
}