{
  "address": "0x7cbe5682be6b648cc1100c76d4f6c96997f753d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Pool2",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity 0.5.7;\n\nimport \"./SafeMath.sol\";\nimport \"./Quotation.sol\";\nimport \"./ClaimsReward.sol\";\nimport \"./solidity-interface.sol\";\n\n\ncontract Pool2 is Iupgradable {\n    using SafeMath for uint;\n\n    MCR internal m1;\n    Pool1 internal p1;\n    PoolData internal pd;\n    Factory internal factory;\n    address public uniswapFactoryAddress;\n    uint internal constant DECIMAL1E18 = uint(10) ** 18;\n    bool internal locked;\n\n    constructor(address _uniswapFactoryAdd) public {\n       \n        uniswapFactoryAddress = _uniswapFactoryAdd;\n        factory = Factory(_uniswapFactoryAdd);\n    }\n\n    function() external payable {}\n\n    event Liquidity(bytes16 typeOf, bytes16 functionName);\n\n    event Rebalancing(bytes4 iaCurr, uint tokenAmount);\n\n    modifier noReentrancy() {\n        require(!locked, \"Reentrant call.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    /**\n     * @dev to change the uniswap factory address \n     * @param newFactoryAddress is the new factory address in concern\n     * @return the status of the concerned coverId\n     */\n    function changeUniswapFactoryAddress(address newFactoryAddress) external onlyInternal {\n        // require(ms.isOwner(msg.sender) || ms.checkIsAuthToGoverned(msg.sender));\n        uniswapFactoryAddress = newFactoryAddress;\n        factory = Factory(uniswapFactoryAddress);\n    }\n\n    /**\n     * @dev On upgrade transfer all investment assets and ether to new Investment Pool\n     * @param newPoolAddress New Investment Assest Pool address\n     */\n    function upgradeInvestmentPool(address payable newPoolAddress) external onlyInternal noReentrancy {\n        uint len = pd.getInvestmentCurrencyLen();\n        for (uint64 i = 1; i < len; i++) {\n            bytes4 iaName = pd.getInvestmentCurrencyByIndex(i);\n            _upgradeInvestmentPool(iaName, newPoolAddress);\n        }\n\n        if (address(this).balance > 0) {\n            Pool2 newP2 = Pool2(newPoolAddress);\n            newP2.sendEther.value(address(this).balance)();\n        }\n    }\n\n    /**\n     * @dev Internal Swap of assets between Capital \n     * and Investment Sub pool for excess or insufficient  \n     * liquidity conditions of a given currency.\n     */ \n    function internalLiquiditySwap(bytes4 curr) external onlyInternal noReentrancy {\n        uint caBalance;\n        uint baseMin;\n        uint varMin;\n        (, baseMin, varMin) = pd.getCurrencyAssetVarBase(curr);\n        caBalance = _getCurrencyAssetsBalance(curr);\n\n        if (caBalance > uint(baseMin).add(varMin).mul(2)) {\n            _internalExcessLiquiditySwap(curr, baseMin, varMin, caBalance);\n        } else if (caBalance < uint(baseMin).add(varMin)) {\n            _internalInsufficientLiquiditySwap(curr, baseMin, varMin, caBalance);\n            \n        }\n    }\n\n    /**\n     * @dev Saves a given investment asset details. To be called daily.\n     * @param curr array of Investment asset name.\n     * @param rate array of investment asset exchange rate.\n     * @param date current date in yyyymmdd.\n     */ \n    function saveIADetails(bytes4[] calldata curr, uint64[] calldata rate, uint64 date, bool bit) \n    external checkPause noReentrancy {\n        bytes4 maxCurr;\n        bytes4 minCurr;\n        uint64 maxRate;\n        uint64 minRate;\n        //ONLY NOTARZIE ADDRESS CAN POST\n        require(pd.isnotarise(msg.sender));\n        (maxCurr, maxRate, minCurr, minRate) = _calculateIARank(curr, rate);\n        pd.saveIARankDetails(maxCurr, maxRate, minCurr, minRate, date);\n        pd.updatelastDate(date);\n        uint len = curr.length;\n        for (uint i = 0; i < len; i++) {\n            pd.updateIAAvgRate(curr[i], rate[i]);\n        }\n        if (bit)   //for testing purpose\n            _rebalancingLiquidityTrading(maxCurr, maxRate);\n        p1.saveIADetailsOracalise(pd.iaRatesTime());\n    }\n\n    /**\n     * @dev External Trade for excess or insufficient  \n     * liquidity conditions of a given currency.\n     */ \n    function externalLiquidityTrade() external onlyInternal {\n        \n        bool triggerTrade;\n        bytes4 curr;\n        bytes4 minIACurr;\n        bytes4 maxIACurr;\n        uint amount;\n        uint minIARate;\n        uint maxIARate;\n        uint baseMin;\n        uint varMin;\n        uint caBalance;\n\n\n        (maxIACurr, maxIARate, minIACurr, minIARate) = pd.getIARankDetailsByDate(pd.getLastDate());\n        uint len = pd.getAllCurrenciesLen();\n        for (uint64 i = 0; i < len; i++) {\n            curr = pd.getCurrenciesByIndex(i);\n            (, baseMin, varMin) = pd.getCurrencyAssetVarBase(curr);\n            caBalance = _getCurrencyAssetsBalance(curr);\n\n            if (caBalance > uint(baseMin).add(varMin).mul(2)) { //excess\n                amount = caBalance.sub(((uint(baseMin).add(varMin)).mul(3)).div(2)); //*10**18;\n                triggerTrade = _externalExcessLiquiditySwap(curr, minIACurr, amount);\n            } else if (caBalance < uint(baseMin).add(varMin)) { // insufficient\n                amount = (((uint(baseMin).add(varMin)).mul(3)).div(2)).sub(caBalance);\n                triggerTrade = _externalInsufficientLiquiditySwap(curr, maxIACurr, amount);\n            }\n\n            if (triggerTrade) {\n                p1.triggerExternalLiquidityTrade();\n            }\n        }\n    }\n\n    /**\n     * Iupgradable Interface to update dependent contract address\n     */\n    function changeDependentContractAddress() public onlyInternal {\n        m1 = MCR(ms.getLatestAddress(\"MC\"));\n        pd = PoolData(ms.getLatestAddress(\"PD\"));\n        p1 = Pool1(ms.getLatestAddress(\"P1\"));\n    }\n\n    function sendEther() public payable {\n        \n    }\n\n    /** \n     * @dev Gets currency asset balance for a given currency name.\n     */   \n    function _getCurrencyAssetsBalance(bytes4 _curr) public view returns(uint caBalance) {\n        if (_curr == \"ETH\") {\n            caBalance = address(p1).balance;\n        } else {\n            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(_curr));\n            caBalance = erc20.balanceOf(address(p1));\n        }\n    }\n\n    /** \n     * @dev Transfers ERC20 investment asset from this Pool to another Pool.\n     */ \n    function _transferInvestmentAsset(\n        bytes4 _curr,\n        address _transferTo,\n        uint _amount\n    ) \n        internal\n    {\n        if (_curr == \"ETH\") {\n            if (_amount > address(this).balance)\n                _amount = address(this).balance;\n            p1.sendEther.value(_amount)();\n        } else {\n            IERC20 erc20 = IERC20(pd.getInvestmentAssetAddress(_curr));\n            if (_amount > erc20.balanceOf(address(this)))\n                _amount = erc20.balanceOf(address(this));\n            require(erc20.transfer(_transferTo, _amount));\n        }\n    }\n\n    /**\n     * @dev to perform rebalancing \n     * @param iaCurr is the investment asset currency\n     * @param iaRate is the investment asset rate\n     */\n    function _rebalancingLiquidityTrading(\n        bytes4 iaCurr,\n        uint64 iaRate\n    ) \n        internal\n        checkPause\n    {\n        uint amountToSell;\n        uint totalRiskBal = pd.getLastVfull();\n        uint intermediaryEth;\n        uint ethVol = pd.ethVolumeLimit();\n\n        totalRiskBal = (totalRiskBal.mul(100000)).div(DECIMAL1E18);\n        Exchange exchange;\n        if (totalRiskBal > 0) {\n            amountToSell = ((totalRiskBal.mul(2).mul(\n                iaRate)).mul(pd.variationPercX100())).div(100 * 100 * 100000);\n            amountToSell = (amountToSell.mul(\n                10**uint(pd.getInvestmentAssetDecimals(iaCurr)))).div(100); // amount of asset to sell\n\n            if (iaCurr != \"ETH\" && _checkTradeConditions(iaCurr, iaRate, totalRiskBal)) { \n                exchange = Exchange(factory.getExchange(pd.getInvestmentAssetAddress(iaCurr)));\n                intermediaryEth = exchange.getTokenToEthInputPrice(amountToSell);\n                if (intermediaryEth > (address(exchange).balance.mul(ethVol)).div(100)) { \n                    intermediaryEth = (address(exchange).balance.mul(ethVol)).div(100);\n                    amountToSell = (exchange.getEthToTokenInputPrice(intermediaryEth).mul(995)).div(1000);\n                }\n                IERC20 erc20;\n                erc20 = IERC20(pd.getCurrencyAssetAddress(iaCurr));\n                erc20.approve(address(exchange), amountToSell);\n                exchange.tokenToEthSwapInput(amountToSell, (exchange.getTokenToEthInputPrice(\n                    amountToSell).mul(995)).div(1000), pd.uniswapDeadline().add(now));\n            } else if (iaCurr == \"ETH\" && _checkTradeConditions(iaCurr, iaRate, totalRiskBal)) {\n\n                _transferInvestmentAsset(iaCurr, ms.getLatestAddress(\"P1\"), amountToSell);\n            }\n            emit Rebalancing(iaCurr, amountToSell); \n        }\n    }\n\n    /**\n     * @dev Checks whether trading is required for a  \n     * given investment asset at a given exchange rate.\n     */ \n    function _checkTradeConditions(\n        bytes4 curr,\n        uint64 iaRate,\n        uint totalRiskBal\n    )\n        internal\n        view\n        returns(bool check)\n    {\n        if (iaRate > 0) {\n            uint iaBalance =  _getInvestmentAssetBalance(curr).div(DECIMAL1E18);\n            if (iaBalance > 0 && totalRiskBal > 0) {\n                uint iaMax;\n                uint iaMin;\n                uint checkNumber;\n                uint z;\n                (iaMin, iaMax) = pd.getInvestmentAssetHoldingPerc(curr);\n                z = pd.variationPercX100();\n                checkNumber = (iaBalance.mul(100 * 100000)).div(totalRiskBal.mul(iaRate));\n                if ((checkNumber > ((totalRiskBal.mul(iaMax.add(z))).mul(100000)).div(100)) ||\n                    (checkNumber < ((totalRiskBal.mul(iaMin.sub(z))).mul(100000)).div(100)))\n                    check = true; //eligibleIA\n            }\n        }\n    }    \n\n    /** \n     * @dev Gets the investment asset rank.\n     */ \n    function _getIARank(\n        bytes4 curr,\n        uint64 rateX100,\n        uint totalRiskPoolBalance\n    ) \n        internal\n        view\n        returns (int rhsh, int rhsl) //internal function\n    {\n\n        uint currentIAmaxHolding;\n        uint currentIAminHolding;\n        uint iaBalance = _getInvestmentAssetBalance(curr);\n        (currentIAminHolding, currentIAmaxHolding) = pd.getInvestmentAssetHoldingPerc(curr);\n        \n        if (rateX100 > 0) {\n            uint rhsf;\n            rhsf = (iaBalance.mul(1000000)).div(totalRiskPoolBalance.mul(rateX100));\n            rhsh = int(rhsf - currentIAmaxHolding);\n            rhsl = int(rhsf - currentIAminHolding);\n        }\n    }\n\n    /** \n     * @dev Calculates the investment asset rank.\n     */  \n    function _calculateIARank(\n        bytes4[] memory curr,\n        uint64[] memory rate\n    )\n        internal\n        view\n        returns(\n            bytes4 maxCurr,\n            uint64 maxRate,\n            bytes4 minCurr,\n            uint64 minRate\n        )  \n    {\n        int max = 0;\n        int min = -1;\n        int rhsh;\n        int rhsl;\n        uint totalRiskPoolBalance;\n        (totalRiskPoolBalance, ) = m1.calVtpAndMCRtp();\n        uint len = curr.length;\n        for (uint i = 0; i < len; i++) {\n            rhsl = 0;\n            rhsh = 0;\n            if (pd.getInvestmentAssetStatus(curr[i])) {\n                (rhsh, rhsl) = _getIARank(curr[i], rate[i], totalRiskPoolBalance);\n                if (rhsh > max || i == 0) {\n                    max = rhsh;\n                    maxCurr = curr[i];\n                    maxRate = rate[i];\n                }\n                if (rhsl < min || rhsl == 0 || i == 0) {\n                    min = rhsl;\n                    minCurr = curr[i];\n                    minRate = rate[i];\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev to get balance of an investment asset \n     * @param _curr is the investment asset in concern\n     * @return the balance\n     */\n    function _getInvestmentAssetBalance(bytes4 _curr) internal view returns (uint balance) {\n        if (_curr == \"ETH\") {\n            balance = address(this).balance;\n        } else {\n            IERC20 erc20 = IERC20(pd.getInvestmentAssetAddress(_curr));\n            balance = erc20.balanceOf(address(this));\n        }\n    }\n\n    /**\n     * @dev Creates Excess liquidity trading order for a given currency and a given balance.\n     */  \n    function _internalExcessLiquiditySwap(bytes4 _curr, uint _baseMin, uint _varMin, uint _caBalance) internal {\n        // require(ms.isInternal(msg.sender) || md.isnotarise(msg.sender));\n        bytes4 minIACurr;\n        // uint amount;\n        \n        (, , minIACurr, ) = pd.getIARankDetailsByDate(pd.getLastDate());\n        if (_curr == minIACurr) {\n            // amount = _caBalance.sub(((_baseMin.add(_varMin)).mul(3)).div(2)); //*10**18;\n            p1.transferCurrencyAsset(_curr, _caBalance.sub(((_baseMin.add(_varMin)).mul(3)).div(2)));\n        } else {\n            p1.triggerExternalLiquidityTrade();\n        }\n    }\n\n    /** \n     * @dev insufficient liquidity swap  \n     * for a given currency and a given balance.\n     */ \n    function _internalInsufficientLiquiditySwap(bytes4 _curr, uint _baseMin, uint _varMin, uint _caBalance) internal {\n        \n        bytes4 maxIACurr;\n        uint amount;\n        \n        (maxIACurr, , , ) = pd.getIARankDetailsByDate(pd.getLastDate());\n        \n        if (_curr == maxIACurr) {\n            amount = (((_baseMin.add(_varMin)).mul(3)).div(2)).sub(_caBalance);\n            _transferInvestmentAsset(_curr, ms.getLatestAddress(\"P1\"), amount);\n        } else {\n            IERC20 erc20 = IERC20(pd.getInvestmentAssetAddress(maxIACurr));\n            if ((maxIACurr == \"ETH\" && address(this).balance > 0) || \n            (maxIACurr != \"ETH\" && erc20.balanceOf(address(this)) > 0))\n                p1.triggerExternalLiquidityTrade();\n            \n        }\n    }\n\n    /**\n     * @dev Creates External excess liquidity trading  \n     * order for a given currency and a given balance.\n     * @param curr Currency Asset to Sell\n     * @param minIACurr Investment Asset to Buy  \n     * @param amount Amount of Currency Asset to Sell\n     */  \n    function _externalExcessLiquiditySwap(\n        bytes4 curr,\n        bytes4 minIACurr,\n        uint256 amount\n    )\n        internal\n        returns (bool trigger)\n    {\n        uint intermediaryEth;\n        Exchange exchange;\n        IERC20 erc20;\n        uint ethVol = pd.ethVolumeLimit();\n        if (curr == minIACurr) {\n            p1.transferCurrencyAsset(curr, amount);\n        } else if (curr == \"ETH\" && minIACurr != \"ETH\") {\n            \n            exchange = Exchange(factory.getExchange(pd.getInvestmentAssetAddress(minIACurr)));\n            if (amount > (address(exchange).balance.mul(ethVol)).div(100)) { // 4% ETH volume limit \n                amount = (address(exchange).balance.mul(ethVol)).div(100);\n                trigger = true;\n            }\n            p1.transferCurrencyAsset(curr, amount);\n            exchange.ethToTokenSwapInput.value(amount)\n            (exchange.getEthToTokenInputPrice(amount).mul(995).div(1000), pd.uniswapDeadline().add(now));    \n        } else if (curr != \"ETH\" && minIACurr == \"ETH\") {\n            exchange = Exchange(factory.getExchange(pd.getCurrencyAssetAddress(curr)));\n            erc20 = IERC20(pd.getCurrencyAssetAddress(curr));\n            intermediaryEth = exchange.getTokenToEthInputPrice(amount);\n\n            if (intermediaryEth > (address(exchange).balance.mul(ethVol)).div(100)) { \n                intermediaryEth = (address(exchange).balance.mul(ethVol)).div(100);\n                amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n                intermediaryEth = exchange.getTokenToEthInputPrice(amount);\n                trigger = true;\n            }\n            p1.transferCurrencyAsset(curr, amount);\n            // erc20.decreaseAllowance(address(exchange), erc20.allowance(address(this), address(exchange)));\n            erc20.approve(address(exchange), amount);\n            \n            exchange.tokenToEthSwapInput(amount, (\n                intermediaryEth.mul(995)).div(1000), pd.uniswapDeadline().add(now));   \n        } else {\n            \n            exchange = Exchange(factory.getExchange(pd.getCurrencyAssetAddress(curr)));\n            intermediaryEth = exchange.getTokenToEthInputPrice(amount);\n\n            if (intermediaryEth > (address(exchange).balance.mul(ethVol)).div(100)) { \n                intermediaryEth = (address(exchange).balance.mul(ethVol)).div(100);\n                amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n                trigger = true;\n            }\n            \n            Exchange tmp = Exchange(factory.getExchange(\n                pd.getInvestmentAssetAddress(minIACurr))); // minIACurr exchange\n\n            if (intermediaryEth > address(tmp).balance.mul(ethVol).div(100)) { \n                intermediaryEth = address(tmp).balance.mul(ethVol).div(100);\n                amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n                trigger = true;   \n            }\n            p1.transferCurrencyAsset(curr, amount);\n            erc20 = IERC20(pd.getCurrencyAssetAddress(curr));\n            erc20.approve(address(exchange), amount);\n            \n            exchange.tokenToTokenSwapInput(amount, (tmp.getEthToTokenInputPrice(\n                intermediaryEth).mul(995)).div(1000), (intermediaryEth.mul(995)).div(1000), \n                    pd.uniswapDeadline().add(now), pd.getInvestmentAssetAddress(minIACurr));\n        }\n    }\n\n    /** \n     * @dev insufficient liquidity swap  \n     * for a given currency and a given balance.\n     * @param curr Currency Asset to buy\n     * @param maxIACurr Investment Asset to sell\n     * @param amount Amount of Investment Asset to sell\n     */ \n    function _externalInsufficientLiquiditySwap(\n        bytes4 curr,\n        bytes4 maxIACurr,\n        uint256 amount\n    ) \n        internal\n        returns (bool trigger)\n    {   \n\n        Exchange exchange;\n        IERC20 erc20;\n        uint intermediaryEth;\n        // uint ethVol = pd.ethVolumeLimit();\n        if (curr == maxIACurr) {\n            _transferInvestmentAsset(curr, ms.getLatestAddress(\"P1\"), amount);\n        } else if (curr == \"ETH\" && maxIACurr != \"ETH\") { \n            exchange = Exchange(factory.getExchange(pd.getInvestmentAssetAddress(maxIACurr)));\n            intermediaryEth = exchange.getEthToTokenInputPrice(amount);\n\n\n            if (amount > (address(exchange).balance.mul(pd.ethVolumeLimit())).div(100)) { \n                amount = (address(exchange).balance.mul(pd.ethVolumeLimit())).div(100);\n                // amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n                intermediaryEth = exchange.getEthToTokenInputPrice(amount);\n                trigger = true;\n            }\n            \n            erc20 = IERC20(pd.getCurrencyAssetAddress(maxIACurr));\n            if (intermediaryEth > erc20.balanceOf(address(this))) {\n                intermediaryEth = erc20.balanceOf(address(this));\n            }\n            // erc20.decreaseAllowance(address(exchange), erc20.allowance(address(this), address(exchange)));\n            erc20.approve(address(exchange), intermediaryEth);\n            exchange.tokenToEthTransferInput(intermediaryEth, (\n                exchange.getTokenToEthInputPrice(intermediaryEth).mul(995)).div(1000), \n                pd.uniswapDeadline().add(now), address(p1)); \n\n        } else if (curr != \"ETH\" && maxIACurr == \"ETH\") {\n            exchange = Exchange(factory.getExchange(pd.getCurrencyAssetAddress(curr)));\n            intermediaryEth = exchange.getTokenToEthInputPrice(amount);\n            if (intermediaryEth > address(this).balance)\n                intermediaryEth = address(this).balance;\n            if (intermediaryEth > (address(exchange).balance.mul\n            (pd.ethVolumeLimit())).div(100)) { // 4% ETH volume limit \n                intermediaryEth = (address(exchange).balance.mul(pd.ethVolumeLimit())).div(100);\n                trigger = true;\n            }\n            exchange.ethToTokenTransferInput.value(intermediaryEth)((exchange.getEthToTokenInputPrice(\n                intermediaryEth).mul(995)).div(1000), pd.uniswapDeadline().add(now), address(p1));   \n        } else {\n            address currAdd = pd.getCurrencyAssetAddress(curr);\n            exchange = Exchange(factory.getExchange(currAdd));\n            intermediaryEth = exchange.getTokenToEthInputPrice(amount);\n            if (intermediaryEth > (address(exchange).balance.mul(pd.ethVolumeLimit())).div(100)) { \n                intermediaryEth = (address(exchange).balance.mul(pd.ethVolumeLimit())).div(100);\n                trigger = true;\n            }\n            Exchange tmp = Exchange(factory.getExchange(pd.getInvestmentAssetAddress(maxIACurr)));\n\n            if (intermediaryEth > address(tmp).balance.mul(pd.ethVolumeLimit()).div(100)) { \n                intermediaryEth = address(tmp).balance.mul(pd.ethVolumeLimit()).div(100);\n                // amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n                trigger = true;\n            }\n\n            uint maxIAToSell = tmp.getEthToTokenInputPrice(intermediaryEth);\n\n            erc20 = IERC20(pd.getInvestmentAssetAddress(maxIACurr));\n            uint maxIABal = erc20.balanceOf(address(this));\n            if (maxIAToSell > maxIABal) {\n                maxIAToSell = maxIABal;\n                intermediaryEth = tmp.getTokenToEthInputPrice(maxIAToSell);\n                // amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n            }\n            amount = exchange.getEthToTokenInputPrice(intermediaryEth);\n            erc20.approve(address(tmp), maxIAToSell);\n            tmp.tokenToTokenTransferInput(maxIAToSell, (\n                amount.mul(995)).div(1000), (\n                    intermediaryEth), pd.uniswapDeadline().add(now), address(p1), currAdd);\n        }\n    }\n\n    /** \n     * @dev Transfers ERC20 investment asset from this Pool to another Pool.\n     */ \n    function _upgradeInvestmentPool(\n        bytes4 _curr,\n        address _newPoolAddress\n    ) \n        internal\n    {\n        IERC20 erc20 = IERC20(pd.getInvestmentAssetAddress(_curr));\n        if (erc20.balanceOf(address(this)) > 0)\n            require(erc20.transfer(_newPoolAddress, erc20.balanceOf(address(this))));\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806200546e8339810180604052602081101561003157600080fd5b5051600680546001600160a01b039092166001600160a01b0319928316811790915560058054909216179055615401806200006d6000396000f3fe6080604052600436106100a75760003560e01c806383e4a6741161006457806383e4a6741461023e578063a0b2d57f14610284578063b19ab66d14610299578063d46655f4146102cc578063f17a3bec146102ff578063f720036c14610314576100a7565b80630e29df22146100a95780630ea9c984146100b15780632d9fa500146100c65780633655ac3c146100fa5780634a0d95d61461012b5780636dce9b3d1461020b575b005b6100a7610329565b3480156100bd57600080fd5b506100a761032b565b3480156100d257600080fd5b506100a7600480360360208110156100e957600080fd5b50356001600160e01b03191661057a565b34801561010657600080fd5b5061010f610782565b604080516001600160a01b039092168252519081900360200190f35b34801561013757600080fd5b506100a76004803603608081101561014e57600080fd5b81019060208101813564010000000081111561016957600080fd5b82018360208201111561017b57600080fd5b8035906020019184602083028401116401000000008311171561019d57600080fd5b9193909290916020810190356401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b91935091506001600160401b0381351690602001351515610791565b34801561021757600080fd5b506100a76004803603602081101561022e57600080fd5b50356001600160a01b0316610c64565b34801561024a57600080fd5b506102726004803603602081101561026157600080fd5b50356001600160e01b031916610efc565b60408051918252519081900360200190f35b34801561029057600080fd5b5061010f61103c565b3480156102a557600080fd5b506100a7600480360360208110156102bc57600080fd5b50356001600160a01b031661104b565b3480156102d857600080fd5b506100a7600480360360208110156102ef57600080fd5b50356001600160a01b03166110fd565b34801561030b57600080fd5b5061010f61118c565b34801561032057600080fd5b506100a761119b565b565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561037957600080fd5b505afa15801561038d573d6000803e3d6000fd5b505050506040513d60208110156103a357600080fd5b50516103ae57600080fd5b60005460408051600160e31b6227050b028152600160f01b614d4302600482015290516001600160a01b0390921691630138285891602480820192602092909190829003018186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b5051600280546001600160a01b0319166001600160a01b0392831617905560005460408051600160e31b6227050b028152600160f21b611411026004820152905191909216916301382858916024808301926020929190829003018186803b15801561049857600080fd5b505afa1580156104ac573d6000803e3d6000fd5b505050506040513d60208110156104c257600080fd5b5051600480546001600160a01b0319166001600160a01b0392831617815560005460408051600160e31b6227050b028152600160f01b615031029381019390935251921691630138285891602480820192602092909190829003018186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d602081101561055757600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b1580156105c857600080fd5b505afa1580156105dc573d6000803e3d6000fd5b505050506040513d60208110156105f257600080fd5b50516105fd57600080fd5b600654600160a01b900460ff16156106545760408051600160e51b62461bcd02815260206004820152600f6024820152600160891b6e2932b2b73a3930b73a1031b0b6361702604482015290519081900360640190fd5b60068054600160a01b60ff021916600160a01b1790556004805460408051600160e01b6377449c0b0281526001600160e01b031985169381019390935251600092839283926001600160a01b03909116916377449c0b916024808301926060929190829003018186803b1580156106ca57600080fd5b505afa1580156106de573d6000803e3d6000fd5b505050506040513d60608110156106f457600080fd5b506020810151604090910151909250905061070e84610efc565b92506107316002610725848463ffffffff61162816565b9063ffffffff61164316565b831115610749576107448483838661166a565b61076c565b610759828263ffffffff61162816565b83101561076c5761076c848383866118a2565b505060068054600160a01b60ff02191690555050565b6006546001600160a01b031681565b6000809054906101000a90046001600160a01b03166001600160a01b031663ff0938a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d602081101561080857600080fd5b50511561081457600080fd5b600654600160a01b900460ff161561086b5760408051600160e51b62461bcd02815260206004820152600f6024820152600160891b6e2932b2b73a3930b73a1031b0b6361702604482015290519081900360640190fd5b60068054600160a01b60ff021916600160a01b1790556004805460408051600160e01b6362ae37210281523393810193909352516000928392839283926001600160a01b03909216916362ae3721916024808301926020929190829003018186803b1580156108d957600080fd5b505afa1580156108ed573d6000803e3d6000fd5b505050506040513d602081101561090357600080fd5b505161090e57600080fd5b61097b8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250611c1592505050565b6004805460408051600160e11b63210825570281526001600160e01b0319808916948201949094526001600160401b03808816602483015293861660448201528385166064820152928d1660848401525195995092975092955093506001600160a01b0316916342104aae9160a48082019260009290919082900301818387803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b50506004805460408051600160e11b6352d0e2010281526001600160401b038c1693810193909352516001600160a01b03909116935063a5a1c4029250602480830192600092919082900301818387803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b508b925060009150505b81811015610b67576004546001600160a01b0316637deb85768d8d84818110610abc57fe5b905060200201356001600160e01b0319168c8c85818110610ad957fe5b905060200201356001600160401b03166040518363ffffffff1660e01b815260040180836001600160e01b0319166001600160e01b0319168152602001826001600160401b0316815260200192505050600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b505060019092019150610a979050565b508515610b7857610b788584611e2b565b6003546004805460408051600160e01b634c69d49702815290516001600160a01b0394851694630a7000f094931692634c69d49792808201926020929091829003018186803b158015610bca57600080fd5b505afa158015610bde573d6000803e3d6000fd5b505050506040513d6020811015610bf457600080fd5b50516040805163ffffffff841660e01b8152600481019290925251602480830192600092919082900301818387803b158015610c2f57600080fd5b505af1158015610c43573d6000803e3d6000fd5b505060068054600160a01b60ff021916905550505050505050505050505050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015610cb257600080fd5b505afa158015610cc6573d6000803e3d6000fd5b505050506040513d6020811015610cdc57600080fd5b5051610ce757600080fd5b600654600160a01b900460ff1615610d3e5760408051600160e51b62461bcd02815260206004820152600f6024820152600160891b6e2932b2b73a3930b73a1031b0b6361702604482015290519081900360640190fd5b60068054600160a01b60ff021916600160a01b1790556004805460408051600160e01b637d03238f02815290516000936001600160a01b0390931692637d03238f92808201926020929091829003018186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d6020811015610dc757600080fd5b5051905060015b81816001600160401b03161015610e7b576004805460408051600160e01b63dc68e16b0281526001600160401b03851693810193909352516000926001600160a01b039092169163dc68e16b916024808301926020929190829003018186803b158015610e3a57600080fd5b505afa158015610e4e573d6000803e3d6000fd5b505050506040513d6020811015610e6457600080fd5b50519050610e7281856126f8565b50600101610dce565b50303115610ee8576000829050806001600160a01b0316630e29df22306001600160a01b0316316040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b5050505050505b505060068054600160a01b60ff0219169055565b6000600160eb1b6208aa89026001600160e01b031983161415610f2c57506003546001600160a01b031631611037565b6004805460408051600160e01b63e3dee2390281526001600160e01b0319861693810193909352516000926001600160a01b039092169163e3dee239916024808301926020929190829003018186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d6020811015610fb257600080fd5b505160035460408051600160e01b6370a082310281526001600160a01b0392831660048201529051929350908316916370a0823191602480820192602092909190829003018186803b15801561100757600080fd5b505afa15801561101b573d6000803e3d6000fd5b505050506040513d602081101561103157600080fd5b50519150505b919050565b6000546001600160a01b031681565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561109957600080fd5b505afa1580156110ad573d6000803e3d6000fd5b505050506040513d60208110156110c357600080fd5b50516110ce57600080fd5b600680546001600160a01b03199081166001600160a01b03938416179182905560058054929093169116179055565b6000546001600160a01b031615611160576000546001600160a01b031633146111605760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b692737ba1036b0b9ba32b902604482015290519081900360640190fd5b600080546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b6001546001600160a01b031681565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d602081101561121357600080fd5b505161121e57600080fd5b6004805460408051600160e01b6356571fc302815290516000938493849384938493849384938493849384936001600160a01b031692630e412f5c9284926356571fc392808201926020929091829003018186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d60208110156112a957600080fd5b50516040805163ffffffff841660e01b81526001600160401b039092166004830152516024808301926080929190829003018186803b1580156112eb57600080fd5b505afa1580156112ff573d6000803e3d6000fd5b505050506040513d608081101561131557600080fd5b508051602080830151604080850151606090950151600480548351600160e01b63255f50490281529351979f50959d506001600160401b039182169b50921698506000946001600160a01b039094169363255f504993828401939092829003018186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d60208110156113af57600080fd5b5051905060005b81816001600160401b0316101561161a576004805460408051600160e41b6303c40b1f0281526001600160401b03851693810193909352516001600160a01b0390911691633c40b1f0916024808301926020929190829003018186803b15801561141f57600080fd5b505afa158015611433573d6000803e3d6000fd5b505050506040513d602081101561144957600080fd5b50516004805460408051600160e01b6377449c0b0281526001600160e01b031985169381019390935251929d506001600160a01b0316916377449c0b91602480820192606092909190829003018186803b1580156114a657600080fd5b505afa1580156114ba573d6000803e3d6000fd5b505050506040513d60608110156114d057600080fd5b50602081015160409091015190955093506114ea8b610efc565b92506115016002610725878763ffffffff61162816565b8311156115525761153e611531600261152560036107258a8a63ffffffff61162816565b9063ffffffff61290516565b849063ffffffff61292716565b975061154b8b8b8a61293c565b9b506115a3565b611562858563ffffffff61162816565b8310156115a35761159383611587600261152560036107258b8b63ffffffff61162816565b9063ffffffff61292716565b97506115a08b8a8a613a4a565b9b505b8b1561161257600360009054906101000a90046001600160a01b03166001600160a01b0316639c1fe9276040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f957600080fd5b505af115801561160d573d6000803e3d6000fd5b505050505b6001016113b6565b505050505050505050505050565b60008282018381101561163a57600080fd5b90505b92915050565b6000826116525750600061163d565b8282028284828161165f57fe5b041461163a57600080fd5b6004805460408051600160e01b6356571fc302815290516000936001600160a01b0390931692630e412f5c9284926356571fc392828101926020929190829003018186803b1580156116bb57600080fd5b505afa1580156116cf573d6000803e3d6000fd5b505050506040513d60208110156116e557600080fd5b50516040805163ffffffff841660e01b81526001600160401b039092166004830152516024808301926080929190829003018186803b15801561172757600080fd5b505afa15801561173b573d6000803e3d6000fd5b505050506040513d608081101561175157600080fd5b506040015190506001600160e01b0319858116908216141561183257600380546001600160a01b031690631fac40b49087906117af906117a290600290611525906107258c8c63ffffffff61162816565b869063ffffffff61292716565b6040518363ffffffff1660e01b815260040180836001600160e01b0319166001600160e01b031916815260200182815260200192505050602060405180830381600087803b15801561180057600080fd5b505af1158015611814573d6000803e3d6000fd5b505050506040513d602081101561182a57600080fd5b5061189b9050565b600360009054906101000a90046001600160a01b03166001600160a01b0316639c1fe9276040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561188257600080fd5b505af1158015611896573d6000803e3d6000fd5b505050505b5050505050565b6004805460408051600160e01b6356571fc3028152905160009384936001600160a01b031692630e412f5c9284926356571fc392808201926020929091829003018186803b1580156118f357600080fd5b505afa158015611907573d6000803e3d6000fd5b505050506040513d602081101561191d57600080fd5b50516040805163ffffffff841660e01b81526001600160401b039092166004830152516024808301926080929190829003018186803b15801561195f57600080fd5b505afa158015611973573d6000803e3d6000fd5b505050506040513d608081101561198957600080fd5b505191506001600160e01b03198681169083161415611a52576119c083611587600261152560036107258b8b63ffffffff61162816565b60005460408051600160e31b6227050b028152600160f01b6150310260048201529051929350611a4d9289926001600160a01b0316916301382858916024808301926020929190829003018186803b158015611a1b57600080fd5b505afa158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b505183614d38565b611c0d565b6004805460408051600160e01b637e2d14d90281526001600160e01b0319861693810193909352516000926001600160a01b0390921691637e2d14d9916024808301926020929190829003018186803b158015611aae57600080fd5b505afa158015611ac2573d6000803e3d6000fd5b505050506040513d6020811015611ad857600080fd5b50519050600160eb1b6208aa89026001600160e01b03198416148015611afe5750303115155b80611b9d5750600160eb1b6208aa89026001600160e01b0319841614801590611b9d575060408051600160e01b6370a0823102815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015611b6f57600080fd5b505afa158015611b83573d6000803e3d6000fd5b505050506040513d6020811015611b9957600080fd5b5051115b15611c0b57600360009054906101000a90046001600160a01b03166001600160a01b0316639c1fe9276040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611bf257600080fd5b505af1158015611c06573d6000803e3d6000fd5b505050505b505b505050505050565b60025460408051600160e11b636cf68d3d02815281516000938493849384938493600019938593849384936001600160a01b03169263d9ed1a7a9260048082019391829003018186803b158015611c6b57600080fd5b505afa158015611c7f573d6000803e3d6000fd5b505050506040513d6040811015611c9557600080fd5b50518b5190915060005b81811015611e1b576004548d51600096508695506001600160a01b03909116906324da1128908f9084908110611cd157fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160e01b0319166001600160e01b031916815260200191505060206040518083038186803b158015611d2157600080fd5b505afa158015611d35573d6000803e3d6000fd5b505050506040513d6020811015611d4b57600080fd5b505115611e1357611d838d8281518110611d6157fe5b60200260200101518d8381518110611d7557fe5b602002602001015185614fe9565b909550935086851380611d94575080155b15611dc9578496508c8181518110611da857fe5b60200260200101519a508b8181518110611dbe57fe5b602002602001015199505b85841280611dd5575083155b80611dde575080155b15611e13578395508c8181518110611df257fe5b602002602001015198508b8181518110611e0857fe5b602002602001015197505b600101611c9f565b5050505050505092959194509250565b6000809054906101000a90046001600160a01b03166001600160a01b031663ff0938a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7857600080fd5b505afa158015611e8c573d6000803e3d6000fd5b505050506040513d6020811015611ea257600080fd5b505115611eae57600080fd5b6004805460408051600160e01b63e3d22ebd028152905160009384936001600160a01b03169263e3d22ebd9281830192602092829003018186803b158015611ef557600080fd5b505afa158015611f09573d6000803e3d6000fd5b505050506040513d6020811015611f1f57600080fd5b50516004805460408051600160e11b6371283da5028152905193945060009384936001600160a01b039093169263e2507b4a92808201926020929091829003018186803b158015611f6f57600080fd5b505afa158015611f83573d6000803e3d6000fd5b505050506040513d6020811015611f9957600080fd5b50519050611fbc670de0b6b3a764000061152585620186a063ffffffff61164316565b925060008315611c0b57612067633b9aca00611525600460009054906101000a90046001600160a01b03166001600160a01b0316638c3f8fa46040518163ffffffff1660e01b815260040160206040518083038186803b15801561201f57600080fd5b505afa158015612033573d6000803e3d6000fd5b505050506040513d602081101561204957600080fd5b50516107256001600160401b038b16818a600263ffffffff61164316565b6004805460408051600160e21b632dcbbf1f0281526001600160e01b03198c16938101939093525192975061210c92606492611525926001600160a01b03169163b72efc7c91602480820192602092909190829003018186803b1580156120cd57600080fd5b505afa1580156120e1573d6000803e3d6000fd5b505050506040513d60208110156120f757600080fd5b5051889060ff16600a0a63ffffffff61164316565b9450600160eb1b6208aa89026001600160e01b031988161480159061213757506121378787866150e8565b156125f0576005546004805460408051600160e01b637e2d14d90281526001600160e01b03198c1693810193909352516001600160a01b03938416936306f2bf6293921691637e2d14d9916024808301926020929190829003018186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d60208110156121cb57600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b15801561220d57600080fd5b505afa158015612221573d6000803e3d6000fd5b505050506040513d602081101561223757600080fd5b505160408051600160e01b6395b68fe70281526004810188905290519192506001600160a01b038316916395b68fe791602480820192602092909190829003018186803b15801561228757600080fd5b505afa15801561229b573d6000803e3d6000fd5b505050506040513d60208110156122b157600080fd5b505192506122d460646115256001600160a01b038416318563ffffffff61164316565b831115612387576122fa60646115256001600160a01b038416318563ffffffff61164316565b92506123846103e86115256103e3846001600160a01b031663cd7724c3886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561234c57600080fd5b505afa158015612360573d6000803e3d6000fd5b505050506040513d602081101561237657600080fd5b50519063ffffffff61164316565b94505b6004805460408051600160e01b63e3dee2390281526001600160e01b03198b1693810193909352516000926001600160a01b039092169163e3dee239916024808301926020929190829003018186803b1580156123e357600080fd5b505afa1580156123f7573d6000803e3d6000fd5b505050506040513d602081101561240d57600080fd5b505160408051600160e01b63095ea7b30281526001600160a01b038581166004830152602482018a905291519293509083169163095ea7b3916044808201926020929091908290030181600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b505050506040513d602081101561249257600080fd5b505060408051600160e01b6395b68fe70281526004810188905290516001600160a01b038416916395e3c50b9189916124f9916103e891611525916103e39188916395b68fe791602480820192602092909190829003018186803b15801561234c57600080fd5b6004805460408051600160e01b6339d2ad2902815290516125799342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d602081101561256b57600080fd5b50519063ffffffff61162816565b6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050602060405180830381600087803b1580156125bd57600080fd5b505af11580156125d1573d6000803e3d6000fd5b505050506040513d60208110156125e757600080fd5b506126aa915050565b600160eb1b6208aa89026001600160e01b0319881614801561261857506126188787866150e8565b156126aa5760005460408051600160e31b6227050b028152600160f01b61503102600482015290516126aa928a926001600160a01b0390911691630138285891602480820192602092909190829003018186803b15801561267857600080fd5b505afa15801561268c573d6000803e3d6000fd5b505050506040513d60208110156126a257600080fd5b505187614d38565b604080516001600160e01b0319891681526020810187905281517f5b9a4c8e608b5c093e929f19155d286db4301c8af758938fc5b1418915c37ca8929181900390910190a150505050505050565b6004805460408051600160e01b637e2d14d90281526001600160e01b0319861693810193909352516000926001600160a01b0390921691637e2d14d9916024808301926020929190829003018186803b15801561275457600080fd5b505afa158015612768573d6000803e3d6000fd5b505050506040513d602081101561277e57600080fd5b505160408051600160e01b6370a0823102815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d60208110156127f957600080fd5b505111156129005760408051600160e01b6370a0823102815230600482015290516001600160a01b0383169163a9059cbb91859184916370a0823191602480820192602092909190829003018186803b15801561285557600080fd5b505afa158015612869573d6000803e3d6000fd5b505050506040513d602081101561287f57600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050506040513d60208110156128f557600080fd5b505161290057600080fd5b505050565b600080821161291357600080fd5b600082848161291e57fe5b04949350505050565b60008282111561293657600080fd5b50900390565b6000806000806000600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d60208110156129bc57600080fd5b505190506001600160e01b03198881169088161415612a685760035460408051600160e21b6307eb102d0281526001600160e01b03198b1660048201526024810189905290516001600160a01b0390921691631fac40b4916044808201926020929091908290030181600087803b158015612a3657600080fd5b505af1158015612a4a573d6000803e3d6000fd5b505050506040513d6020811015612a6057600080fd5b50613a3f9050565b600160eb1b6208aa89026001600160e01b03198916148015612a9d5750600160eb1b6208aa89026001600160e01b0319881614155b15612d8e576005546004805460408051600160e01b637e2d14d90281526001600160e01b03198c1693810193909352516001600160a01b03938416936306f2bf6293921691637e2d14d9916024808301926020929190829003018186803b158015612b0757600080fd5b505afa158015612b1b573d6000803e3d6000fd5b505050506040513d6020811015612b3157600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b158015612b7357600080fd5b505afa158015612b87573d6000803e3d6000fd5b505050506040513d6020811015612b9d57600080fd5b50519250612bc060646115256001600160a01b038616318463ffffffff61164316565b861115612bed57612be660646115256001600160a01b038616318463ffffffff61164316565b9550600194505b60035460408051600160e21b6307eb102d0281526001600160e01b03198b1660048201526024810189905290516001600160a01b0390921691631fac40b4916044808201926020929091908290030181600087803b158015612c4e57600080fd5b505af1158015612c62573d6000803e3d6000fd5b505050506040513d6020811015612c7857600080fd5b505060408051600160e01b63cd7724c30281526004810188905290516001600160a01b0385169163f39b5b9b918991612cdf916103e891611525916103e391889163cd7724c391602480820192602092909190829003018186803b15801561234c57600080fd5b6004805460408051600160e01b6339d2ad290281529051612d279342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b6040518463ffffffff1660e01b815260040180838152602001828152602001925050506020604051808303818588803b158015612d6357600080fd5b505af1158015612d77573d6000803e3d6000fd5b50505050506040513d6020811015612a6057600080fd5b600160eb1b6208aa89026001600160e01b0319891614801590612dc35750600160eb1b6208aa89026001600160e01b03198816145b156132c3576005546004805460408051600160e01b63e3dee2390281526001600160e01b03198d1693810193909352516001600160a01b03938416936306f2bf629392169163e3dee239916024808301926020929190829003018186803b158015612e2d57600080fd5b505afa158015612e41573d6000803e3d6000fd5b505050506040513d6020811015612e5757600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b158015612e9957600080fd5b505afa158015612ead573d6000803e3d6000fd5b505050506040513d6020811015612ec357600080fd5b50516004805460408051600160e01b63e3dee2390281526001600160e01b03198d1693810193909352519295506001600160a01b03169163e3dee23991602480820192602092909190829003018186803b158015612f2057600080fd5b505afa158015612f34573d6000803e3d6000fd5b505050506040513d6020811015612f4a57600080fd5b505160408051600160e01b6395b68fe70281526004810189905290519193506001600160a01b038516916395b68fe791602480820192602092909190829003018186803b158015612f9a57600080fd5b505afa158015612fae573d6000803e3d6000fd5b505050506040513d6020811015612fc457600080fd5b50519350612fe760646115256001600160a01b038616318463ffffffff61164316565b8411156131005761300d60646115256001600160a01b038616318463ffffffff61164316565b9350826001600160a01b031663cd7724c3856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561305357600080fd5b505afa158015613067573d6000803e3d6000fd5b505050506040513d602081101561307d57600080fd5b505160408051600160e01b6395b68fe70281526004810183905290519197506001600160a01b038516916395b68fe791602480820192602092909190829003018186803b1580156130cd57600080fd5b505afa1580156130e1573d6000803e3d6000fd5b505050506040513d60208110156130f757600080fd5b50516001955093505b60035460408051600160e21b6307eb102d0281526001600160e01b03198b1660048201526024810189905290516001600160a01b0390921691631fac40b4916044808201926020929091908290030181600087803b15801561316157600080fd5b505af1158015613175573d6000803e3d6000fd5b505050506040513d602081101561318b57600080fd5b505060408051600160e01b63095ea7b30281526001600160a01b0385811660048301526024820189905291519184169163095ea7b3916044808201926020929091908290030181600087803b1580156131e357600080fd5b505af11580156131f7573d6000803e3d6000fd5b505050506040513d602081101561320d57600080fd5b50506001600160a01b0383166395e3c50b876132376103e8611525896103e363ffffffff61164316565b6004805460408051600160e01b6339d2ad29028152905161327f9342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050602060405180830381600087803b158015612a3657600080fd5b6005546004805460408051600160e01b63e3dee2390281526001600160e01b03198d1693810193909352516001600160a01b03938416936306f2bf629392169163e3dee239916024808301926020929190829003018186803b15801561332857600080fd5b505afa15801561333c573d6000803e3d6000fd5b505050506040513d602081101561335257600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b15801561339457600080fd5b505afa1580156133a8573d6000803e3d6000fd5b505050506040513d60208110156133be57600080fd5b505160408051600160e01b6395b68fe70281526004810189905290519194506001600160a01b038516916395b68fe791602480820192602092909190829003018186803b15801561340e57600080fd5b505afa158015613422573d6000803e3d6000fd5b505050506040513d602081101561343857600080fd5b5051935061345b60646115256001600160a01b038616318463ffffffff61164316565b8411156134fa5761348160646115256001600160a01b038616318463ffffffff61164316565b9350826001600160a01b031663cd7724c3856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156134c757600080fd5b505afa1580156134db573d6000803e3d6000fd5b505050506040513d60208110156134f157600080fd5b50519550600194505b6005546004805460408051600160e01b637e2d14d90281526001600160e01b03198c1693810193909352516000936001600160a01b03908116936306f2bf629390911691637e2d14d991602480820192602092909190829003018186803b15801561356457600080fd5b505afa158015613578573d6000803e3d6000fd5b505050506040513d602081101561358e57600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b1580156135d057600080fd5b505afa1580156135e4573d6000803e3d6000fd5b505050506040513d60208110156135fa57600080fd5b5051905061361d60646115256001600160a01b038416318563ffffffff61164316565b8511156136bc5761364360646115256001600160a01b038416318563ffffffff61164316565b9450836001600160a01b031663cd7724c3866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561368957600080fd5b505afa15801561369d573d6000803e3d6000fd5b505050506040513d60208110156136b357600080fd5b50519650600195505b60035460408051600160e21b6307eb102d0281526001600160e01b03198c166004820152602481018a905290516001600160a01b0390921691631fac40b4916044808201926020929091908290030181600087803b15801561371d57600080fd5b505af1158015613731573d6000803e3d6000fd5b505050506040513d602081101561374757600080fd5b50506004805460408051600160e01b63e3dee2390281526001600160e01b03198d1693810193909352516001600160a01b039091169163e3dee239916024808301926020929190829003018186803b1580156137a257600080fd5b505afa1580156137b6573d6000803e3d6000fd5b505050506040513d60208110156137cc57600080fd5b505160408051600160e01b63095ea7b30281526001600160a01b038781166004830152602482018b905291519295509085169163095ea7b3916044808201926020929091908290030181600087803b15801561382757600080fd5b505af115801561383b573d6000803e3d6000fd5b505050506040513d602081101561385157600080fd5b505060408051600160e01b63cd7724c30281526004810187905290516001600160a01b038087169263ddf7e1a7928b926138bb926103e892611525926103e392908a169163cd7724c391602480820192602092909190829003018186803b15801561234c57600080fd5b6138d36103e86115258b6103e363ffffffff61164316565b6004805460408051600160e01b6339d2ad29028152905161391b9342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b600460009054906101000a90046001600160a01b03166001600160a01b0316637e2d14d98f6040518263ffffffff1660e01b815260040180826001600160e01b0319166001600160e01b031916815260200191505060206040518083038186803b15801561398857600080fd5b505afa15801561399c573d6000803e3d6000fd5b505050506040513d60208110156139b257600080fd5b50516040805163ffffffff881660e01b815260048101969096526024860194909452604485019290925260648401526001600160a01b031660848301525160a48083019260209291908290030181600087803b158015613a1157600080fd5b505af1158015613a25573d6000803e3d6000fd5b505050506040513d6020811015613a3b57600080fd5b5050505b505050509392505050565b60008080806001600160e01b03198781169087161415613ac45760005460408051600160e31b6227050b028152600160f01b6150310260048201529051613abf928a926001600160a01b0390911691630138285891602480820192602092909190829003018186803b15801561267857600080fd5b614d2e565b600160eb1b6208aa89026001600160e01b03198816148015613af95750600160eb1b6208aa89026001600160e01b0319871614155b15614121576005546004805460408051600160e01b637e2d14d90281526001600160e01b03198b1693810193909352516001600160a01b03938416936306f2bf6293921691637e2d14d9916024808301926020929190829003018186803b158015613b6357600080fd5b505afa158015613b77573d6000803e3d6000fd5b505050506040513d6020811015613b8d57600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b158015613bcf57600080fd5b505afa158015613be3573d6000803e3d6000fd5b505050506040513d6020811015613bf957600080fd5b505160408051600160e01b63cd7724c30281526004810188905290519194506001600160a01b0385169163cd7724c391602480820192602092909190829003018186803b158015613c4957600080fd5b505afa158015613c5d573d6000803e3d6000fd5b505050506040513d6020811015613c7357600080fd5b50516004805460408051600160e11b6371283da50281529051939450613d0893606493611525936001600160a01b03169263e2507b4a9281830192602092829003018186803b158015613cc557600080fd5b505afa158015613cd9573d6000803e3d6000fd5b505050506040513d6020811015613cef57600080fd5b50516001600160a01b038716319063ffffffff61164316565b851115613dde57613d656064611525600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cc557600080fd5b9450826001600160a01b031663cd7724c3866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613dab57600080fd5b505afa158015613dbf573d6000803e3d6000fd5b505050506040513d6020811015613dd557600080fd5b50516001945090505b6004805460408051600160e01b63e3dee2390281526001600160e01b03198a1693810193909352516001600160a01b039091169163e3dee239916024808301926020929190829003018186803b158015613e3757600080fd5b505afa158015613e4b573d6000803e3d6000fd5b505050506040513d6020811015613e6157600080fd5b505160408051600160e01b6370a0823102815230600482015290519193506001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015613eb057600080fd5b505afa158015613ec4573d6000803e3d6000fd5b505050506040513d6020811015613eda57600080fd5b5051811115613f5b5760408051600160e01b6370a0823102815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015613f2c57600080fd5b505afa158015613f40573d6000803e3d6000fd5b505050506040513d6020811015613f5657600080fd5b505190505b816001600160a01b031663095ea7b384836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613fbb57600080fd5b505af1158015613fcf573d6000803e3d6000fd5b505050506040513d6020811015613fe557600080fd5b505060408051600160e01b6395b68fe70281526004810183905290516001600160a01b03851691637237e03191849161404c916103e891611525916103e39188916395b68fe791602480820192602092909190829003018186803b15801561234c57600080fd5b6004805460408051600160e01b6339d2ad2902815290516140949342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b6003546040805163ffffffff871660e01b81526004810195909552602485019390935260448401919091526001600160a01b031660648301525160848083019260209291908290030181600087803b1580156140ef57600080fd5b505af1158015614103573d6000803e3d6000fd5b505050506040513d602081101561411957600080fd5b50614d2e9050565b600160eb1b6208aa89026001600160e01b03198816148015906141565750600160eb1b6208aa89026001600160e01b03198716145b156144c0576005546004805460408051600160e01b63e3dee2390281526001600160e01b03198c1693810193909352516001600160a01b03938416936306f2bf629392169163e3dee239916024808301926020929190829003018186803b1580156141c057600080fd5b505afa1580156141d4573d6000803e3d6000fd5b505050506040513d60208110156141ea57600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b15801561422c57600080fd5b505afa158015614240573d6000803e3d6000fd5b505050506040513d602081101561425657600080fd5b505160408051600160e01b6395b68fe70281526004810188905290519194506001600160a01b038516916395b68fe791602480820192602092909190829003018186803b1580156142a657600080fd5b505afa1580156142ba573d6000803e3d6000fd5b505050506040513d60208110156142d057600080fd5b5051905030318111156142e1575030315b6143376064611525600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cc557600080fd5b81111561439b576143946064611525600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cc557600080fd5b9050600193505b826001600160a01b031663ad65d76d826143fb6103e86115256103e3896001600160a01b031663cd7724c3896040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561234c57600080fd5b6004805460408051600160e01b6339d2ad2902815290516144439342936001600160a01b0316926339d2ad299281830192602092829003018186803b15801561254157600080fd5b6003546040805163ffffffff871660e01b8152600481019490945260248401929092526001600160a01b0316604483015251606480830192602092919082900301818588803b15801561449557600080fd5b505af11580156144a9573d6000803e3d6000fd5b50505050506040513d602081101561411957600080fd5b6004805460408051600160e01b63e3dee2390281526001600160e01b03198b1693810193909352516000926001600160a01b039092169163e3dee239916024808301926020929190829003018186803b15801561451c57600080fd5b505afa158015614530573d6000803e3d6000fd5b505050506040513d602081101561454657600080fd5b505160055460408051600160e11b6303795fb10281526001600160a01b03808516600483015291519394509116916306f2bf6291602480820192602092909190829003018186803b15801561459a57600080fd5b505afa1580156145ae573d6000803e3d6000fd5b505050506040513d60208110156145c457600080fd5b505160408051600160e01b6395b68fe70281526004810189905290519195506001600160a01b038616916395b68fe791602480820192602092909190829003018186803b15801561461457600080fd5b505afa158015614628573d6000803e3d6000fd5b505050506040513d602081101561463e57600080fd5b50516004805460408051600160e11b6371283da502815290519395506146d393606493611525936001600160a01b03169263e2507b4a9281830192602092829003018186803b15801561469057600080fd5b505afa1580156146a4573d6000803e3d6000fd5b505050506040513d60208110156146ba57600080fd5b50516001600160a01b038816319063ffffffff61164316565b821115614737576147306064611525600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561469057600080fd5b9150600194505b6005546004805460408051600160e01b637e2d14d90281526001600160e01b03198c1693810193909352516000936001600160a01b03908116936306f2bf629390911691637e2d14d991602480820192602092909190829003018186803b1580156147a157600080fd5b505afa1580156147b5573d6000803e3d6000fd5b505050506040513d60208110156147cb57600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b15801561480d57600080fd5b505afa158015614821573d6000803e3d6000fd5b505050506040513d602081101561483757600080fd5b50516004805460408051600160e11b6371283da502815290519394506148cc93606493611525936001600160a01b03169263e2507b4a9281830192602092829003018186803b15801561488957600080fd5b505afa15801561489d573d6000803e3d6000fd5b505050506040513d60208110156148b357600080fd5b50516001600160a01b038516319063ffffffff61164316565b831115614930576149296064611525600460009054906101000a90046001600160a01b03166001600160a01b031663e2507b4a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561488957600080fd5b9250600195505b6000816001600160a01b031663cd7724c3856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561497657600080fd5b505afa15801561498a573d6000803e3d6000fd5b505050506040513d60208110156149a057600080fd5b50516004805460408051600160e01b637e2d14d90281526001600160e01b03198e1693810193909352519293506001600160a01b031691637e2d14d991602480820192602092909190829003018186803b1580156149fd57600080fd5b505afa158015614a11573d6000803e3d6000fd5b505050506040513d6020811015614a2757600080fd5b505160408051600160e01b6370a0823102815230600482015290519196506000916001600160a01b038816916370a08231916024808301926020929190829003018186803b158015614a7857600080fd5b505afa158015614a8c573d6000803e3d6000fd5b505050506040513d6020811015614aa257600080fd5b5051905080821115614b2457809150826001600160a01b03166395b68fe7836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614af557600080fd5b505afa158015614b09573d6000803e3d6000fd5b505050506040513d6020811015614b1f57600080fd5b505194505b866001600160a01b031663cd7724c3866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614b6857600080fd5b505afa158015614b7c573d6000803e3d6000fd5b505050506040513d6020811015614b9257600080fd5b505160408051600160e01b63095ea7b30281526001600160a01b038681166004830152602482018690529151929b509088169163095ea7b3916044808201926020929091908290030181600087803b158015614bed57600080fd5b505af1158015614c01573d6000803e3d6000fd5b505050506040513d6020811015614c1757600080fd5b50506001600160a01b03831663f552d91b83614c416103e86115258e6103e363ffffffff61164316565b88614c9442600460009054906101000a90046001600160a01b03166001600160a01b03166339d2ad296040518163ffffffff1660e01b815260040160206040518083038186803b15801561254157600080fd5b6003546040805163ffffffff881660e01b815260048101969096526024860194909452604485019290925260648401526001600160a01b039081166084840152881660a48301525160c48083019260209291908290030181600087803b158015614cfd57600080fd5b505af1158015614d11573d6000803e3d6000fd5b505050506040513d6020811015614d2757600080fd5b5050505050505b5050509392505050565b600160eb1b6208aa89026001600160e01b031984161415614dce573031811115614d60575030315b600360009054906101000a90046001600160a01b03166001600160a01b0316630e29df22826040518263ffffffff1660e01b81526004016000604051808303818588803b158015614db057600080fd5b505af1158015614dc4573d6000803e3d6000fd5b5050505050612900565b6004805460408051600160e01b637e2d14d90281526001600160e01b0319871693810193909352516000926001600160a01b0390921691637e2d14d9916024808301926020929190829003018186803b158015614e2a57600080fd5b505afa158015614e3e573d6000803e3d6000fd5b505050506040513d6020811015614e5457600080fd5b505160408051600160e01b6370a0823102815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015614ea357600080fd5b505afa158015614eb7573d6000803e3d6000fd5b505050506040513d6020811015614ecd57600080fd5b5051821115614f4e5760408051600160e01b6370a0823102815230600482015290516001600160a01b038316916370a08231916024808301926020929190829003018186803b158015614f1f57600080fd5b505afa158015614f33573d6000803e3d6000fd5b505050506040513d6020811015614f4957600080fd5b505191505b806001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015614fae57600080fd5b505af1158015614fc2573d6000803e3d6000fd5b505050506040513d6020811015614fd857600080fd5b5051614fe357600080fd5b50505050565b6000806000806000614ffa886152db565b6004805460408051600160e01b6395dcbd1f0281526001600160e01b03198d169381019390935280519394506001600160a01b03909116926395dcbd1f926024808201939291829003018186803b15801561505457600080fd5b505afa158015615068573d6000803e3d6000fd5b505050506040513d604081101561507e57600080fd5b5080516020909101516001600160401b03908116945090811692508716156150dd5760006150d16150be886001600160401b038b1663ffffffff61164316565b61152584620f424063ffffffff61164316565b84810396508390039450505b505050935093915050565b60006001600160401b038316156152d4576000615110670de0b6b3a7640000611525876152db565b90506000811180156151225750600083115b156152d2576004805460408051600160e01b6395dcbd1f0281526001600160e01b031989169381019390935280516000938493849384936001600160a01b03909216926395dcbd1f9260248083019392829003018186803b15801561518657600080fd5b505afa15801561519a573d6000803e3d6000fd5b505050506040513d60408110156151b057600080fd5b5080516020918201516004805460408051600160e21b63230fe3e902815290516001600160401b039485169a509390941697506001600160a01b031693638c3f8fa49380830193919290829003018186803b15801561520e57600080fd5b505afa158015615222573d6000803e3d6000fd5b505050506040513d602081101561523857600080fd5b5051905061526b615258886001600160401b038b1663ffffffff61164316565b611525876298968063ffffffff61164316565b91506152996064611525620186a061072561528c898763ffffffff61162816565b8c9063ffffffff61164316565b8211806152c357506152c06064611525620186a061072561528c888763ffffffff61292716565b82105b156152cd57600195505b505050505b505b9392505050565b6000600160eb1b6208aa89026001600160e01b03198316141561530057503031611037565b6004805460408051600160e01b637e2d14d90281526001600160e01b0319861693810193909352516000926001600160a01b0390921691637e2d14d9916024808301926020929190829003018186803b15801561535c57600080fd5b505afa158015615370573d6000803e3d6000fd5b505050506040513d602081101561538657600080fd5b505160408051600160e01b6370a0823102815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561100757600080fdfea165627a7a723058203d63fdcf20454ae17d76efceedddcc2feb6f7ff1496f08965836248f633d66360029000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95"
}