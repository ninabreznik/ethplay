{
  "address": "0x43ee79e379e7b78d871100ed696e803e7893b644",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "UGChain: Old Token",
  "contractName": "UGToken",
  "compilerVersion": "v0.4.10+commit.f0d539ae",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-27\n*/\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/issues/20\npragma solidity ^0.4.8;\n\ncontract Token {\n    /* This is a slight change to the ERC20 base standard.\n    function totalSupply() constant returns (uint256 supply);\n    is replaced with:\n    uint256 public totalSupply;\n    This automatically creates a getter function for the totalSupply.\n    This is moved to the base contract since public getter functions are not\n    currently recognised as an implementation of the matching abstract\n    function by the compiler.\n    */\n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract UGToken is StandardToken {\n\n    function () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\n    string public name = \"UG Token\";                   //fancy name: eg Simon Bucks\n    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol = \"UGT\";                 //An identifier: eg SBX\n    string public version = 'v0.1';       //ug 0.1 standard. Just an arbitrary versioning scheme.\n\n    address public founder; // The address of the founder\n    uint256 public allocateStartBlock; // The start block number that starts to allocate token to users.\n    uint256 public allocateEndBlock; // The end block nubmer that allocate token to users, lasted for a week.\n\n    // The nonce for avoid transfer replay attacks\n    mapping(address => uint256) nonces;\n\n    function UGToken() {\n        founder = msg.sender;\n        allocateStartBlock = block.number;\n        allocateEndBlock = allocateStartBlock + 5082; // about one day\n    }\n\n    /*\n     * Proxy transfer ug token. When some users of the ethereum account has no ether,\n     * he or she can authorize the agent for broadcast transactions, and agents may charge agency fees\n     * @param _from\n     * @param _to\n     * @param _value\n     * @param feeUgt\n     * @param _v\n     * @param _r\n     * @param _s\n     */\n    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeUgt,\n        uint8 _v,bytes32 _r, bytes32 _s) returns (bool){\n\n        if(balances[_from] < _feeUgt + _value) throw;\n\n        uint256 nonce = nonces[_from];\n        bytes32 h = sha3(_from,_to,_value,_feeUgt,nonce);\n        if(_from != ecrecover(h,_v,_r,_s)) throw;\n\n        if(balances[_to] + _value < balances[_to]\n            || balances[msg.sender] + _feeUgt < balances[msg.sender]) throw;\n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n\n        balances[msg.sender] += _feeUgt;\n        Transfer(_from, msg.sender, _feeUgt);\n\n        balances[_from] -= _value + _feeUgt;\n        nonces[_from] = nonce + 1;\n        return true;\n    }\n\n    /*\n     * Proxy approve that some one can authorize the agent for broadcast transaction\n     * which call approve method, and agents may charge agency fees\n     * @param _from The  address which should tranfer ugt to others\n     * @param _spender The spender who allowed by _from\n     * @param _value The value that should be tranfered.\n     * @param _v\n     * @param _r\n     * @param _s\n     */\n    function approveProxy(address _from, address _spender, uint256 _value,\n        uint8 _v,bytes32 _r, bytes32 _s) returns (bool success) {\n\n        uint256 nonce = nonces[_from];\n        bytes32 hash = sha3(_from,_spender,_value,nonce);\n        if(_from != ecrecover(hash,_v,_r,_s)) throw;\n        allowed[_from][_spender] = _value;\n        Approval(_from, _spender, _value);\n        nonces[_from] = nonce + 1;\n        return true;\n    }\n\n\n    /*\n     * Get the nonce\n     * @param _addr\n     */\n    function getNonce(address _addr) constant returns (uint256){\n        return nonces[_addr];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n\n    /* Approves and then calls the contract code*/\n    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //Call the contract code\n        if(!_spender.call(_extraData)) { throw; }\n        return true;\n    }\n\n    // Allocate tokens to the users\n    // @param _owners The owners list of the token\n    // @param _values The value list of the token\n    function allocateTokens(address[] _owners, uint256[] _values) {\n\n        if(msg.sender != founder) throw;\n        if(block.number < allocateStartBlock || block.number > allocateEndBlock) throw;\n        if(_owners.length != _values.length) throw;\n\n        for(uint256 i = 0; i < _owners.length ; i++){\n            address owner = _owners[i];\n            uint256 value = _values[i];\n            if(totalSupply + value <= totalSupply || balances[owner] + value <= balances[owner]) throw;\n            totalSupply += value;\n            balances[owner] += value;\n        }\n    }\n}",
  "bytecode": "6060604052604060405190810160405280600881526020017f554720546f6b656e000000000000000000000000000000000000000000000000815250600390805190602001906200005292919062000173565b506012600460006101000a81548160ff021916908360ff160217905550604060405190810160405280600381526020017f554754000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000bd92919062000173565b50604060405190810160405280600481526020017f76302e3100000000000000000000000000000000000000000000000000000000815250600690805190602001906200010c92919062000173565b5034156200011657fe5b5b33600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550436008819055506113da600854016009819055505b62000222565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b657805160ff1916838001178555620001e7565b82800160010185558215620001e7579182015b82811115620001e6578251825591602001919060010190620001c9565b5b509050620001f69190620001fa565b5090565b6200021f91905b808211156200021b57600081600090555060010162000201565b5090565b90565b61209080620002326000396000f30060606040523615610105576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011b578063095ea7b3146101b457806318160ddd1461020b57806323b872dd146102315780632d0335ab146102a7578063313ce567146102f15780634d853ee51461031d57806354fd4d501461036f578063698336681461040857806370a082311461042e5780637f5dfd161461047857806395d89b4114610514578063a7368afb146105ad578063a9059cbb14610644578063b11c4fd81461069b578063cae9ca5114610735578063dd62ed3e146107cf578063e11a5a4f14610838578063eb502d451461085e575b341561010d57fe5b6101195b60006000fd5b565b005b341561012357fe5b61012b610903565b604051808060200182810382528381815181526020019150805190602001908083836000831461017a575b80518252602083111561017a57602082019150602081019050602083039250610156565b505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bc57fe5b6101f1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a1565b604051808215151515815260200191505060405180910390f35b341561021357fe5b61021b610a94565b6040518082815260200191505060405180910390f35b341561023957fe5b61028d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a9a565b604051808215151515815260200191505060405180910390f35b34156102af57fe5b6102db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d9a565b6040518082815260200191505060405180910390f35b34156102f957fe5b610301610de4565b604051808260ff1660ff16815260200191505060405180910390f35b341561032557fe5b61032d610df7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037757fe5b61037f610e1d565b60405180806020018281038252838181518152602001915080519060200190808383600083146103ce575b8051825260208311156103ce576020820191506020810190506020830392506103aa565b505050905090810190601f1680156103fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041057fe5b610418610ebb565b6040518082815260200191505060405180910390f35b341561043657fe5b610462600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ec1565b6040518082815260200191505060405180910390f35b341561048057fe5b6104fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803560ff169060200190919080356000191690602001909190803560001916906020019091905050610f0b565b604051808215151515815260200191505060405180910390f35b341561051c57fe5b6105246111f5565b6040518080602001828103825283818151815260200191508051906020019080838360008314610573575b8051825260208311156105735760208201915060208101905060208303925061054f565b505050905090810190601f16801561059f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105b557fe5b61064260048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611293565b005b341561064c57fe5b610681600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611478565b604051808215151515815260200191505060405180910390f35b34156106a357fe5b61071b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611665565b604051808215151515815260200191505060405180910390f35b341561073d57fe5b6107b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506117fe565b604051808215151515815260200191505060405180910390f35b34156107d757fe5b610822600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aaf565b6040518082815260200191505060405180910390f35b341561084057fe5b610848611b37565b6040518082815260200191505060405180910390f35b341561086657fe5b6108e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190803560ff169060200190919080356000191690602001909190803560001916906020019091905050611b3d565b604051808215151515815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109995780601f1061096e57610100808354040283529160200191610999565b820191906000526020600020905b81548152906001019060200180831161097c57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b67575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610bf25750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610d895781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610d93565b60009050610d93565b5b9392505050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600460009054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eb35780601f10610e8857610100808354040283529160200191610eb3565b820191906000526020600020905b815481529060010190602001808311610e9657829003601f168201915b505050505081565b60095481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600060006000600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915088888884604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183815260200182815260200194505050505060405180910390209050600181878787604051806000526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000866161da5a03f1151561107457fe5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415156110b75760006000fd5b86600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925896040518082815260200191505060405180910390a360018201600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600192505b50509695505050505050565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561128b5780601f106112605761010080835404028352916020019161128b565b820191906000526020600020905b81548152906001019060200180831161126e57829003601f168201915b505050505081565b600060006000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112f65760006000fd5b600854431080611307575060095443115b156113125760006000fd5b835185511415156113235760006000fd5b600092505b845183101561147057848381518110151561133f57fe5b906020019060200201519150838381518110151561135957fe5b90602001906020020151905060005481600054011115806113fa5750600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111155b156114055760006000fd5b8060006000828254019250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8280600101935050611328565b5b5050505050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115485750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156116555781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061165f565b6000905061165f565b5b92915050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1682604051808280519060200190808383600083146117a1575b8051825260208311156117a15760208201915060208101905060208303925061177d565b505050905090810190601f1680156117cd5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000866161da5a03f191505015156117f25760006000fd5b600190505b9392505050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360008314611a4e575b805182526020831115611a4e57602082019150602081019050602083039250611a2a565b505050905090810190601f168015611a7a5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000876161da5a03f1925050501515611aa35760006000fd5b600190505b9392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60085481565b600060006000878701600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b925760006000fd5b600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508989898985604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019550505050505060405180910390209050600181878787604051806000526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000866161da5a03f11515611cfd57fe5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141515611d405760006000fd5b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205488600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011080611e4d5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401105b15611e585760006000fd5b87600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040518082815260200191505060405180910390a386600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef896040518082815260200191505060405180910390a3868801600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060018201600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600192505b50509796505050505050505600a165627a7a7230582056e00f535a38bcf0c1629c4e106cc9026dd774d69461d6784dd3da2bbb1477e10029"
}