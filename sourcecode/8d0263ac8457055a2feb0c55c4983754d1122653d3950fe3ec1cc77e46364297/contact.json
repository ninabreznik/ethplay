{
  "address": "0xfaa85a3ab6d12d5ab0b8aa55b6baadd9dc457abf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DelegatedTransferOperatorV5GasOptimized",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-28\n*/\n\npragma solidity 0.4.25;\n\n// File: contracts/ERC777/ERC777Token.sol\n\n/* This Source Code Form is subject to the terms of the Mozilla external\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This code has not been reviewed.\n * Do not use or deploy this code before reviewing it personally first.\n */\n\n\ninterface ERC777Token {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address owner) external view returns (uint256);\n  function granularity() external view returns (uint256);\n\n  function defaultOperators() external view returns (address[]);\n  function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n  function authorizeOperator(address operator) external;\n  function revokeOperator(address operator) external;\n\n  function send(address to, uint256 amount, bytes holderData) external;\n  function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) external;\n\n  function burn(uint256 amount, bytes holderData) external;\n  function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) external;\n\n  event Sent(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256 amount,\n    bytes holderData,\n    bytes operatorData\n  );\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\n  event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n  event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n\n// File: contracts/operators/DelegatedTransferOperatorV5GasOptimized.sol\n\n/// @title DelegatedTransferOperatorV5GasOptimized\n/// @author Roger Wu (Roger-Wu)\n/// @dev A DelegatedTransferOperator contract that has the following features:\n///   1. To prevent replay attack, we check if a _nonce has been used by a token holder.\n///   2. Minimize the gas by making functions inline and remove trivial event.\n///   3. Add `_userData`.\n///   4. Add function `batchTransferPreSigned` which does multiple delegated Transfers in one transaction.\n///   5. Support signature with \"\\x19Ethereum Signed Message:\\n32\" prefix\ncontract DelegatedTransferOperatorV5GasOptimized {\n  mapping(address => uint256) public usedNonce;\n  ERC777Token tokenContract = ERC777Token(0x67ab11058eF23D0a19178f61A050D3c38F81Ae21);\n\n  /**\n    * @notice Submit a presigned transfer\n    * @param _to address The address which you want to transfer to.\n    * @param _delegate address The address which is allowed to send this transaction.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    * @param _userData bytes Data generated by the user to be sent to the recipient.\n    * @param _signedWithPrefix bool Whether \"\\x19Ethereum Signed Message:\\n32\" is prefixed\n    * @param _sig_r bytes32 The r of the signature.\n    * @param _sig_s bytes32 The s of the signature.\n    * @param _sig_v uint8 The v of the signature.\n    * @dev some rules:\n    * 1. If _to is address(0), the tx will fail when doSend().\n    * 2. If _delegate == address(0), then anyone can be the delegate.\n    * 3. _nonce must be greater than the last used nonce by the token holder,\n    *    but nonces don't have to be serial numbers.\n    *    We recommend using unix time as nonce.\n    * 4. _sig_v should be 27 or 28.\n    */\n  function transferPreSigned(\n    address _to,\n    address _delegate,\n    uint256 _value,\n    uint256 _fee,\n    uint256 _nonce,\n    bytes _userData,\n    bool _signedWithPrefix,\n    bytes32 _sig_r,\n    bytes32 _sig_s,\n    uint8 _sig_v\n  )\n    public\n  {\n    require(\n      _delegate == address(0) || _delegate == msg.sender,\n      \"_delegate should be address(0) or msg.sender\"\n    );\n\n    // bytes32 _hash = transferPreSignedHashing(...);\n    bytes32 _hash = keccak256(\n      abi.encodePacked(\n        address(this),\n        _to,\n        _delegate,\n        _value,\n        _fee,\n        _nonce,\n        _userData\n      )\n    );\n    if (_signedWithPrefix) {\n      // _hash = toEthSignedMessageHash(_hash);\n      _hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\n    }\n\n    // address _signer = recoverVrs(_hash, _sig_v, _sig_r, _sig_s);\n    address _signer = (_sig_v != 27 && _sig_v != 28) ?\n      address(0) :\n      ecrecover(_hash, _sig_v, _sig_r, _sig_s);\n\n    require(\n      _signer != address(0),\n      \"_signature is invalid.\"\n    );\n\n    require(\n      _nonce > usedNonce[_signer],\n      \"_nonce must be greater than the last used nonce of the token holder.\"\n    );\n\n    usedNonce[_signer] = _nonce;\n\n    tokenContract.operatorSend(_signer, _to, _value, _userData, \"\");\n    if (_fee > 0) {\n      tokenContract.operatorSend(_signer, msg.sender, _fee, _userData, \"\");\n    }\n  }\n}",
  "bytecode": "608060405260018054600160a060020a0319167367ab11058ef23d0a19178f61a050d3c38f81ae2117905534801561003657600080fd5b5061085a806100466000396000f3006080604052600436106100325763ffffffff60e060020a6000350416633e61e9dc81146100375780637f3d64181461006a575b600080fd5b34801561004357600080fd5b50610058600160a060020a03600435166100ff565b60408051918252519081900360200190f35b34801561007657600080fd5b50604080516020600460a43581810135601f81018490048402850184019095528484526100fd948235600160a060020a039081169560248035909216956044359560643595608435953695929460c494909390920191819084018382808284375094975050505082351515935050506020810135906040810135906060013560ff16610111565b005b60006020819052908152604090205481565b600080600160a060020a038b1615806101325750600160a060020a038b1633145b15156101c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f5f64656c65676174652073686f756c642062652061646472657373283029206f60448201527f72206d73672e73656e6465720000000000000000000000000000000000000000606482015290519081900360840190fd5b308c8c8c8c8c8c6040516020018088600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140186600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185815260200184815260200183815260200182805190602001908083835b602083106102855780518252601f199092019160209182019101610266565b6001836020036101000a0380198251168184511680821785525050505050509050019750505050505050506040516020818303038152906040526040518082805190602001908083835b602083106102ee5780518252601f1990920191602091820191016102cf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915085156103c957604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830186905283518084039091018152605c90920192839052815191929182918401908083835b602083106103995780518252601f19909201916020918201910161037a565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091505b8260ff16601b141580156103e157508260ff16601c14155b61044e57604080516000808252602080830180855286905260ff8716838501526060830189905260808301889052925160019360a0808501949193601f19840193928390039091019190865af115801561043f573d6000803e3d6000fd5b50505060206040510351610451565b60005b9050600160a060020a03811615156104ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5f7369676e617475726520697320696e76616c69642e00000000000000000000604482015290519081900360640190fd5b600160a060020a038116600090815260208190526040902054881161059d57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f5f6e6f6e6365206d7573742062652067726561746572207468616e2074686520908201527f6c6173742075736564206e6f6e6365206f662074686520746f6b656e20686f6c60648201527f6465722e00000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b8760008083600160a060020a0316600160a060020a0316815260200190815260200160002081905550600160009054906101000a9004600160a060020a0316600160a060020a03166362ad1b83828e8d8b6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018381526020018060200180602001838103835284818151815260200191508051906020019080838360005b8381101561067757818101518382015260200161065f565b50505050905090810190601f1680156106a45780820380516001836020036101000a031916815260200191505b508381038252600081526020016020019650505050505050600060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b50505050600089111561082057600160009054906101000a9004600160a060020a0316600160a060020a03166362ad1b8382338c8b6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018381526020018060200180602001838103835284818151815260200191508051906020019080838360005b838110156107a8578181015183820152602001610790565b50505050905090810190601f1680156107d55780820380516001836020036101000a031916815260200191505b508381038252600081526020016020019650505050505050600060405180830381600087803b15801561080757600080fd5b505af115801561081b573d6000803e3d6000fd5b505050505b5050505050505050505050505600a165627a7a7230582096ff3bdbe678aaaf9a86f6283bb7ea2df6fe4181107707d4d8996c098149618f0029"
}