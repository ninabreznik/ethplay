{
  "address": "0xf5e911386b5c7629d835af70778527eedd6822fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Betting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity ^0.4.20;\n\npragma solidity ^0.4.21;\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface P3DTakeout {\n    function buyTokens() external payable;\n}\n\ncontract Betting{\n    using SafeMath for uint256; //using safemath\n\n    address public owner; //owner address\n    address house_takeout = 0xf783A81F046448c38f3c863885D9e99D10209779;\n    P3DTakeout P3DContract_;\n\n    uint public winnerPoolTotal;\n    string public constant version = \"0.2.4\";\n\n    struct chronus_info {\n        bool  betting_open; // boolean: check if betting is open\n        bool  race_start; //boolean: check if race has started\n        bool  race_end; //boolean: check if race has ended\n        bool  voided_bet; //boolean: check if race has been voided\n        uint32  starting_time; // timestamp of when the race starts\n        uint32  betting_duration;\n        uint32  race_duration; // duration of the race\n        uint32 voided_timestamp;\n    }\n\n    struct horses_info{\n        int64  BTC_delta; //horses.BTC delta value\n        int64  ETH_delta; //horses.ETH delta value\n        int64  LTC_delta; //horses.LTC delta value\n        bytes32 BTC; //32-bytes equivalent of horses.BTC\n        bytes32 ETH; //32-bytes equivalent of horses.ETH\n        bytes32 LTC;  //32-bytes equivalent of horses.LTC\n    }\n\n    struct bet_info{\n        bytes32 horse; // coin on which amount is bet on\n        uint amount; // amount bet by Bettor\n    }\n    struct coin_info{\n        uint256 pre; // locking price\n        uint256 post; // ending price\n        uint160 total; // total coin pool\n        uint32 count; // number of bets\n        bool price_check;\n    }\n    struct voter_info {\n        uint160 total_bet; //total amount of bet placed\n        bool rewarded; // boolean: check for double spending\n        mapping(bytes32=>uint) bets; //array of bets\n    }\n\n    mapping (bytes32 => coin_info) public coinIndex; // mapping coins with pool information\n    mapping (address => voter_info) voterIndex; // mapping voter address with Bettor information\n\n    uint public total_reward; // total reward to be awarded\n    uint32 total_bettors;\n    mapping (bytes32 => bool) public winner_horse;\n\n\n    // tracking events\n    event Deposit(address _from, uint256 _value, bytes32 _horse, uint256 _date);\n    event Withdraw(address _to, uint256 _value);\n    event PriceCallback(bytes32 coin_pointer, uint256 result, bool isPrePrice);\n    event RefundEnabled(string reason);\n\n    // constructor\n    constructor() public payable {\n        \n        owner = msg.sender;\n        \n        horses.BTC = bytes32(\"BTC\");\n        horses.ETH = bytes32(\"ETH\");\n        horses.LTC = bytes32(\"LTC\");\n        \n        P3DContract_ = P3DTakeout(0x72b2670e55139934D6445348DC6EaB4089B12576);\n    }\n\n    // data access structures\n    horses_info public horses;\n    chronus_info public chronus;\n\n    // modifiers for restricting access to methods\n    modifier onlyOwner {\n        require(owner == msg.sender);\n        _;\n    }\n\n    modifier duringBetting {\n        require(chronus.betting_open);\n        require(now < chronus.starting_time + chronus.betting_duration);\n        _;\n    }\n\n    modifier beforeBetting {\n        require(!chronus.betting_open && !chronus.race_start);\n        _;\n    }\n\n    modifier afterRace {\n        require(chronus.race_end);\n        _;\n    }\n\n    //function to change owner\n    function changeOwnership(address _newOwner) onlyOwner external {\n        require(now > chronus.starting_time + chronus.race_duration + 60 minutes);\n        owner = _newOwner;\n    }\n\n    function priceCallback (bytes32 coin_pointer, uint256 result, bool isPrePrice ) external onlyOwner {\n        require (!chronus.race_end);\n        emit PriceCallback(coin_pointer, result, isPrePrice);\n        chronus.race_start = true;\n        chronus.betting_open = false;\n        if (isPrePrice) {\n            if (now >= chronus.starting_time+chronus.betting_duration+ 60 minutes) {\n                emit RefundEnabled(\"Late start price\");\n                forceVoidRace();\n            } else {\n                coinIndex[coin_pointer].pre = result;\n            }\n        } else if (!isPrePrice){\n            if (coinIndex[coin_pointer].pre > 0 ){\n                if (now >= chronus.starting_time+chronus.race_duration+ 60 minutes) {\n                    emit RefundEnabled(\"Late end price\");\n                    forceVoidRace();\n                } else {\n                    coinIndex[coin_pointer].post = result;\n                    coinIndex[coin_pointer].price_check = true;\n\n                    if (coinIndex[horses.ETH].price_check && coinIndex[horses.BTC].price_check && coinIndex[horses.LTC].price_check) {\n                        reward();\n                    }\n                }\n            } else {\n                emit RefundEnabled(\"End price came before start price\");\n                forceVoidRace();\n            }\n        }\n    }\n\n    // place a bet on a coin(horse) lockBetting\n    function placeBet(bytes32 horse) external duringBetting payable  {\n        require(msg.value >= 0.01 ether);\n        if (voterIndex[msg.sender].total_bet==0) {\n            total_bettors+=1;\n        }\n        uint _newAmount = voterIndex[msg.sender].bets[horse] + msg.value;\n        voterIndex[msg.sender].bets[horse] = _newAmount;\n        voterIndex[msg.sender].total_bet += uint160(msg.value);\n        uint160 _newTotal = coinIndex[horse].total + uint160(msg.value);\n        uint32 _newCount = coinIndex[horse].count + 1;\n        coinIndex[horse].total = _newTotal;\n        coinIndex[horse].count = _newCount;\n        emit Deposit(msg.sender, msg.value, horse, now);\n    }\n\n    // fallback method for accepting payments\n    function () private payable {}\n\n    // method to place the oraclize queries\n    function setupRace(uint32 _bettingDuration, uint32 _raceDuration) onlyOwner beforeBetting external payable {\n            chronus.starting_time = uint32(block.timestamp);\n            chronus.betting_open = true;\n            chronus.betting_duration = _bettingDuration;\n            chronus.race_duration = _raceDuration;\n    }\n\n    // method to calculate reward (called internally by callback)\n    function reward() internal {\n        /*\n        calculating the difference in price with a precision of 5 digits\n        not using safemath since signed integers are handled\n        */\n        horses.BTC_delta = int64(coinIndex[horses.BTC].post - coinIndex[horses.BTC].pre)*100000/int64(coinIndex[horses.BTC].pre);\n        horses.ETH_delta = int64(coinIndex[horses.ETH].post - coinIndex[horses.ETH].pre)*100000/int64(coinIndex[horses.ETH].pre);\n        horses.LTC_delta = int64(coinIndex[horses.LTC].post - coinIndex[horses.LTC].pre)*100000/int64(coinIndex[horses.LTC].pre);\n\n        total_reward = (coinIndex[horses.BTC].total) + (coinIndex[horses.ETH].total) + (coinIndex[horses.LTC].total);\n        if (total_bettors <= 1) {\n            emit RefundEnabled(\"Not enough participants\");\n            forceVoidRace();\n        } else {\n            // house takeout\n            uint house_fee = total_reward.mul(5).div(100);\n            require(house_fee < address(this).balance);\n            total_reward = total_reward.sub(house_fee);\n            house_takeout.transfer(house_fee);\n            \n            // p3d takeout\n            uint p3d_fee = house_fee/2;\n            require(p3d_fee < address(this).balance);\n            total_reward = total_reward.sub(p3d_fee);\n            P3DContract_.buyTokens.value(p3d_fee)();\n        }\n\n        if (horses.BTC_delta > horses.ETH_delta) {\n            if (horses.BTC_delta > horses.LTC_delta) {\n                winner_horse[horses.BTC] = true;\n                winnerPoolTotal = coinIndex[horses.BTC].total;\n            }\n            else if(horses.LTC_delta > horses.BTC_delta) {\n                winner_horse[horses.LTC] = true;\n                winnerPoolTotal = coinIndex[horses.LTC].total;\n            } else {\n                winner_horse[horses.BTC] = true;\n                winner_horse[horses.LTC] = true;\n                winnerPoolTotal = coinIndex[horses.BTC].total + (coinIndex[horses.LTC].total);\n            }\n        } else if(horses.ETH_delta > horses.BTC_delta) {\n            if (horses.ETH_delta > horses.LTC_delta) {\n                winner_horse[horses.ETH] = true;\n                winnerPoolTotal = coinIndex[horses.ETH].total;\n            }\n            else if (horses.LTC_delta > horses.ETH_delta) {\n                winner_horse[horses.LTC] = true;\n                winnerPoolTotal = coinIndex[horses.LTC].total;\n            } else {\n                winner_horse[horses.ETH] = true;\n                winner_horse[horses.LTC] = true;\n                winnerPoolTotal = coinIndex[horses.ETH].total + (coinIndex[horses.LTC].total);\n            }\n        } else {\n            if (horses.LTC_delta > horses.ETH_delta) {\n                winner_horse[horses.LTC] = true;\n                winnerPoolTotal = coinIndex[horses.LTC].total;\n            } else if(horses.LTC_delta < horses.ETH_delta){\n                winner_horse[horses.ETH] = true;\n                winner_horse[horses.BTC] = true;\n                winnerPoolTotal = coinIndex[horses.ETH].total + (coinIndex[horses.BTC].total);\n            } else {\n                winner_horse[horses.LTC] = true;\n                winner_horse[horses.ETH] = true;\n                winner_horse[horses.BTC] = true;\n                winnerPoolTotal = coinIndex[horses.ETH].total + (coinIndex[horses.BTC].total) + (coinIndex[horses.LTC].total);\n            }\n        }\n        chronus.race_end = true;\n    }\n\n    // method to calculate an invidual's reward\n    function calculateReward(address candidate) internal afterRace constant returns(uint winner_reward) {\n        voter_info storage bettor = voterIndex[candidate];\n        if(chronus.voided_bet) {\n            winner_reward = bettor.total_bet;\n        } else {\n            uint winning_bet_total;\n            if(winner_horse[horses.BTC]) {\n                winning_bet_total += bettor.bets[horses.BTC];\n            } if(winner_horse[horses.ETH]) {\n                winning_bet_total += bettor.bets[horses.ETH];\n            } if(winner_horse[horses.LTC]) {\n                winning_bet_total += bettor.bets[horses.LTC];\n            }\n            winner_reward += (((total_reward.mul(10000000)).div(winnerPoolTotal)).mul(winning_bet_total)).div(10000000);\n        }\n    }\n\n    // method to just check the reward amount\n    function checkReward() afterRace external constant returns (uint) {\n        require(!voterIndex[msg.sender].rewarded);\n        return calculateReward(msg.sender);\n    }\n\n    // method to claim the reward amount\n    function claim_reward() afterRace external {\n        require(!voterIndex[msg.sender].rewarded);\n        uint transfer_amount = calculateReward(msg.sender);\n        require(address(this).balance >= transfer_amount);\n        voterIndex[msg.sender].rewarded = true;\n        msg.sender.transfer(transfer_amount);\n        emit Withdraw(msg.sender, transfer_amount);\n    }\n\n    function forceVoidRace() internal {\n        require(!chronus.voided_bet);\n        chronus.voided_bet=true;\n        chronus.race_end = true;\n        chronus.voided_timestamp=uint32(now);\n    }\n    \n    //this methohd can only be called by controller contract in case of timestamp errors\n    function forceVoidExternal() external onlyOwner {\n        forceVoidRace();\n        emit RefundEnabled(\"Inaccurate price timestamp\");\n    }\n\n    // exposing the coin pool details for DApp\n    function getCoinIndex(bytes32 index, address candidate) external constant returns (uint, uint, uint, bool, uint) {\n        uint256 coinPrePrice;\n        uint256 coinPostPrice;\n        if (coinIndex[horses.ETH].pre > 0 && coinIndex[horses.BTC].pre > 0 && coinIndex[horses.LTC].pre > 0) {\n            coinPrePrice = coinIndex[index].pre;\n        } \n        if (coinIndex[horses.ETH].post > 0 && coinIndex[horses.BTC].post > 0 && coinIndex[horses.LTC].post > 0) {\n            coinPostPrice = coinIndex[index].post;\n        }\n        return (coinIndex[index].total, coinPrePrice, coinPostPrice, coinIndex[index].price_check, voterIndex[candidate].bets[index]);\n    }\n\n    // exposing the total reward amount for DApp\n    function reward_total() external constant returns (uint) {\n        return ((coinIndex[horses.BTC].total) + (coinIndex[horses.ETH].total) + (coinIndex[horses.LTC].total));\n    }\n    \n    function getChronus() external view returns (uint32[]) {\n        uint32[] memory chronusData = new uint32[](3);\n        chronusData[0] = chronus.starting_time;\n        chronusData[1] = chronus.betting_duration;\n        chronusData[2] = chronus.race_duration;\n        return (chronusData);\n        // return (chronus.starting_time, chronus.betting_duration ,chronus.race_duration);\n    }\n\n    // in case of any errors in race, enable full refund for the Bettors to claim\n    function refund() external onlyOwner {\n        require(now > chronus.starting_time + chronus.race_duration + 60 minutes);\n        require((chronus.betting_open && !chronus.race_start)\n            || (chronus.race_start && !chronus.race_end));\n        chronus.voided_bet = true;\n        chronus.race_end = true;\n        chronus.voided_timestamp=uint32(now);\n    }\n\n    // method to claim unclaimed winnings after 30 day notice period\n    function recovery() external onlyOwner{\n        require((chronus.race_end && now > chronus.starting_time + chronus.race_duration + (30 days))\n            || (chronus.voided_bet && now > chronus.voided_timestamp + (30 days)));\n        house_takeout.transfer(address(this).balance);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031990811673f783a81f046448c38f3c863885d9e99d1020977917909155600080548216331790557f4254430000000000000000000000000000000000000000000000000000000000600a557f4554480000000000000000000000000000000000000000000000000000000000600b557f4c54430000000000000000000000000000000000000000000000000000000000600c55600280549091167372b2670e55139934d6445348dc6eab4089b12576179055611acc806100d16000396000f3006080604052600436106101115763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663042b5fed8114610113578063055ee2531461011e5780630f7696441461013357806311dcee2f1461015f57806329114d651461017f5780632af4c31e146101a657806343bddf40146101c75780634564ea361461021e57806354fd4d5014610233578063590e1ae3146102bd5780635ad6ba47146102d25780637274f35b1461033757806384304ee5146103885780638b63c86f146103eb5780638da5cb5b14610402578063aa93038b14610433578063c4b24a4614610448578063d2aed6d71461045d578063d3d2172e146104b0578063ddceafa9146104c5575b005b6101116004356104da565b34801561012a57600080fd5b50610111610675565b34801561013f57600080fd5b5061014b600435610765565b604080519115158252519081900360200190f35b34801561016b57600080fd5b50610111600435602435604435151561077a565b34801561018b57600080fd5b50610194610a7e565b60408051918252519081900360200190f35b3480156101b257600080fd5b50610111600160a060020a0360043516610a84565b3480156101d357600080fd5b506101dc610b04565b60408051600797880b880b815295870b870b602087015293860b90950b848401526060840191909152608083015260a082019290925290519081900360c00190f35b34801561022a57600080fd5b50610111610b36565b34801561023f57600080fd5b50610248610ba5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028257818101518382015260200161026a565b50505050905090810190601f1680156102af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c957600080fd5b50610111610bdc565b3480156102de57600080fd5b506102e7610cc2565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561032357818101518382015260200161030b565b505050509050019250505060405180910390f35b34801561034357600080fd5b5061035b600435600160a060020a0360243516610d8f565b60408051958652602086019490945284840192909252151560608401526080830152519081900360a00190f35b34801561039457600080fd5b5061039d610ebb565b604080519815158952961515602089015294151587870152921515606087015263ffffffff9182166080870152811660a086015290811660c08501521660e083015251908190036101000190f35b61011163ffffffff60043581169060243516610f1d565b34801561040e57600080fd5b50610417610fdb565b60408051600160a060020a039092168252519081900360200190f35b34801561043f57600080fd5b50610194610fea565b34801561045457600080fd5b5061019461102f565b34801561046957600080fd5b5061047560043561107b565b604080519586526020860194909452600160a060020a039092168484015263ffffffff16606084015215156080830152519081900360a00190f35b3480156104bc57600080fd5b506101946110bf565b3480156104d157600080fd5b506101116110c5565b600d546000908190819060ff1615156104f257600080fd5b600d54640100000000810463ffffffff9081166801000000000000000090920481169190910116421061052457600080fd5b662386f26fc1000034101561053857600080fd5b33600090815260056020526040902054600160a060020a03161515610574576007805463ffffffff8082166001011663ffffffff199091161790555b50503360008181526005602090815260408083208684526001808201845282852080543490810191829055835473ffffffffffffffffffffffffffffffffffffffff19808216600160a060020a0392831684018316179095556004875296859020600201805494851685891683019889161777ffffffff0000000000000000000000000000000000000000191660a060020a9586900463ffffffff90811690950194851690950294909417909355835196875293860191909152848201879052426060860152905191945091927f60452eb7177e8d41c9d9fbc4c6e9ccf55a4d44d412355fbf2f02668e0d1a0ce1916080918190039190910190a150505050565b600d5460009062010000900460ff16151561068f57600080fd5b3360009081526005602052604090205460a060020a900460ff16156106b357600080fd5b6106bc3361119f565b905030318111156106cc57600080fd5b33600081815260056020526040808220805474ff0000000000000000000000000000000000000000191660a060020a1790555183156108fc0291849190818181858888f19350505050158015610726573d6000803e3d6000fd5b50604080513381526020810183905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a150565b60086020526000908152604090205460ff1681565b600054600160a060020a0316331461079157600080fd5b600d5462010000900460ff16156107a757600080fd5b60408051848152602081018490528215158183015290517fde16ef9c49ad256644606beb97130511ba3d64bbd230380f8edd107527e5a9da9181900360600190a1600d805460ff1961ff00199091166101001716905580156108a657600d54610e10640100000000820463ffffffff908116680100000000000000009093048116929092010116421061088f576040805160208082526010908201527f4c61746520737461727420707269636500000000000000000000000000000000818301529051600080516020611a818339815191529181900360600190a161088a6112d9565b6108a1565b60008381526004602052604090208290555b610a79565b801515610a795760008381526004602052604081205411156109fd57600d54610e10640100000000820463ffffffff9081166c010000000000000000000000009093048116929092010116421061094d57604080516020808252600e908201527f4c61746520656e64207072696365000000000000000000000000000000000000818301529051600080516020611a818339815191529181900360600190a161088a6112d9565b600083815260046020526040808220600181018590556002908101805478ff000000000000000000000000000000000000000000000000191660c060020a908117909155600b54845291909220909101540460ff1680156109c95750600a5460009081526004602052604090206002015460c060020a900460ff165b80156109f05750600c5460009081526004602052604090206002015460c060020a900460ff165b156108a1576108a16112f0565b6040805160208082526021908201527f456e642070726963652063616d65206265666f72652073746172742070726963818301527f650000000000000000000000000000000000000000000000000000000000000060608201529051600080516020611a818339815191529181900360800190a1610a796112d9565b505050565b60035481565b600054600160a060020a03163314610a9b57600080fd5b600d54610e10640100000000820463ffffffff9081166c0100000000000000000000000090930481169290920101164211610ad557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600a54600b54600c54600784810b94680100000000000000008104820b94608060020a90910490910b92909186565b600054600160a060020a03163314610b4d57600080fd5b610b556112d9565b604080516020808252601a908201527f496e61636375726174652070726963652074696d657374616d70000000000000818301529051600080516020611a818339815191529181900360600190a1565b60408051808201909152600581527f302e322e34000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a03163314610bf357600080fd5b600d54610e10640100000000820463ffffffff9081166c0100000000000000000000000090930481169290920101164211610c2d57600080fd5b600d5460ff168015610c475750600d54610100900460ff16155b80610c6d5750600d54610100900460ff168015610c6d5750600d5462010000900460ff16155b1515610c7857600080fd5b600d805462010000630100000063ff000000199092169190911762ff000019161773ffffffff000000000000000000000000000000001916608060020a4263ffffffff1602179055565b604080516003808252608082019092526060918291906020820183803883395050600d548251929350640100000000900463ffffffff16918391506000908110610d0857fe5b63ffffffff92831660209182029092010152600d548251680100000000000000009091049091169082906001908110610d3d57fe5b63ffffffff92831660209182029092010152600d5482516c010000000000000000000000009091049091169082906002908110610d7657fe5b63ffffffff909216602092830290910190910152905090565b600b5460009081526004602052604081205481908190819081908190819081108015610dca5750600a54600090815260046020526040812054115b8015610de55750600c54600090815260046020526040812054115b15610dfc5760008981526004602052604090205491505b600b54600090815260046020526040812060010154118015610e305750600a54600090815260046020526040812060010154115b8015610e4e5750600c54600090815260046020526040812060010154115b15610e6757506000888152600460205260409020600101545b600089815260046020908152604080832060020154600160a060020a039b8c168452600583528184209c84526001909c01909152902054978916999198909760c060020a90910460ff169650945092505050565b600d5460ff808216916101008104821691620100008204811691630100000081049091169063ffffffff64010000000082048116916801000000000000000081048216916c010000000000000000000000008204811691608060020a90041688565b600054600160a060020a03163314610f3457600080fd5b600d5460ff16158015610f4f5750600d54610100900460ff16155b1515610f5a57600080fd5b600d805463ffffffff9283166c01000000000000000000000000026fffffffff0000000000000000000000001994841668010000000000000000026bffffffff00000000000000001960ff1942969096166401000000000267ffffffff00000000199094169390931794909416600117919091169290921792909216179055565b600054600160a060020a031681565b600c54600090815260046020526040808220600290810154600b548452828420820154600a548552929093200154600160a060020a0392831691831690831601011690565b600d5460009062010000900460ff16151561104957600080fd5b3360009081526005602052604090205460a060020a900460ff161561106d57600080fd5b6110763361119f565b905090565b600460205260009081526040902080546001820154600290920154909190600160a060020a0381169060a060020a810463ffffffff169060c060020a900460ff1685565b60065481565b600054600160a060020a031633146110dc57600080fd5b600d5462010000900460ff1680156111225750600d5462278d00640100000000820463ffffffff9081166c01000000000000000000000000909304811692909201011642115b806111575750600d546301000000900460ff1680156111575750600d5462278d0063ffffffff608060020a9092048216011642115b151561116257600080fd5b600154604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561119c573d6000803e3d6000fd5b50565b600d546000908190819062010000900460ff1615156111bd57600080fd5b600160a060020a0384166000908152600560205260409020600d549092506301000000900460ff16156111fc578154600160a060020a031692506112d2565b600a5460009081526008602052604090205460ff161561122c57600a546000908152600183016020526040902054015b600b5460009081526008602052604090205460ff161561125c57600b546000908152600183016020526040902054015b600c5460009081526008602052604090205460ff161561128c57600c546000908152600183016020526040902054015b6112cd629896806112b5836112c16003546112b562989680600654611a2c90919063ffffffff16565b9063ffffffff611a5716565b9063ffffffff611a2c16565b830192505b5050919050565b600d546301000000900460ff1615610c7857600080fd5b600a54600090815260046020526040812080546001909101548291600781810b9291909103620186a002900b81151561132557fe5b6009805467ffffffffffffffff191667ffffffffffffffff93909205600790810b93909316919091179055600b54600090815260046020526040902080546001919091015481830b92919003620186a002900b81151561138157fe5b6009805492909105600790810b67ffffffffffffffff1668010000000000000000026fffffffffffffffff000000000000000019909316929092179055600c54600090815260046020526040902080546001919091015481830b92620186a09290910391909102900b8115156113f357fe5b6009805477ffffffffffffffff000000000000000000000000000000001916608060020a67ffffffffffffffff94909305600790810b9490941692909202919091179055600c54600090815260046020526040808220600290810154600b548452828420820154600a548552929093200154600160a060020a0392831691831690831601011660065554600163ffffffff909116116114e7576040805160208082526017908201527f4e6f7420656e6f756768207061727469636970616e7473000000000000000000818301529051600080516020611a818339815191529181900360600190a16114e26112d9565b611604565b61150260646112b56005600654611a2c90919063ffffffff16565b91503031821061151157600080fd5b600654611524908363ffffffff611a6e16565b600655600154604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611561573d6000803e3d6000fd5b5050600281043031811061157457600080fd5b600654611587908263ffffffff611a6e16565b600655600254604080517fd0febe4c0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163d0febe4c918491600480830192600092919082900301818588803b1580156115ea57600080fd5b505af11580156115fe573d6000803e3d6000fd5b50505050505b600954680100000000000000008104600790810b810b91810b900b131561174257600954608060020a8104600790810b810b91810b900b131561167f57600a80546000908152600860209081526040808320805460ff1916600117905592548252600490522060020154600160a060020a031660035561173d565b600954600781810b810b608060020a909204810b900b13156116d957600c80546000908152600860209081526040808320805460ff1916600117905592548252600490522060020154600160a060020a031660035561173d565b600a805460009081526008602090815260408083208054600160ff199182168117909255600c805486528386208054909216909217905554835260049091528082206002908101549354835291200154600160a060020a0391821690821601166003555b611a17565b600954600781810b810b68010000000000000000909204810b900b131561189757600954608060020a8104600790810b810b68010000000000000000909204810b900b13156117c957600b80546000908152600860209081526040808320805460ff1916600117905592548252600490522060020154600160a060020a031660035561173d565b600954680100000000000000008104600790810b810b608060020a909204810b900b131561182f57600c80546000908152600860209081526040808320805460ff1916600117905592548252600490522060020154600160a060020a031660035561173d565b600b805460009081526008602090815260408083208054600160ff199182168117909255600c805486528386208054909216909217905554835260049091528082206002908101549354835291200154600160a060020a039182169082160116600355611a17565b600954680100000000000000008104600790810b810b608060020a909204810b900b13156118fd57600c80546000908152600860209081526040808320805460ff1916600117905592548252600490522060020154600160a060020a0316600355611a17565b600954680100000000000000008104600790810b810b608060020a909204810b900b121561198d57600b805460009081526008602090815260408083208054600160ff199182168117909255600a805486528386208054909216909217905554835260049091528082206002908101549354835291200154600160a060020a039182169082160116600355611a17565b600c805460009081526008602090815260408083208054600160ff199182168117909255600b805486528386208054831684179055600a8054875284872080549093169093179091559454845260049092528083206002908101549254845281842081015494548452922090910154600160a060020a039182169282169082160191909101166003555b5050600d805462ff0000191662010000179055565b6000828202831580611a485750828482811515611a4557fe5b04145b1515611a5057fe5b9392505050565b6000808284811515611a6557fe5b04949350505050565b600082821115611a7a57fe5b5090039056009267bd1e840f8c032ec399dab88550ddacce435477212b384a3d761f395efa7fa165627a7a723058201f3b20058944317c51c1cb504e8b999a681845a394959778778115fccfd9ece20029"
}