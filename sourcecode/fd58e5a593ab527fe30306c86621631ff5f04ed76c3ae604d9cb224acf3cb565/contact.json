{
  "address": "0xd84b6aec4985e68ef5882de0b5d0b30992bb5057",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthTokenToSmthSwaps",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// Safe maths from OpenZeppelin\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n    function transfer(address _to, uint256 _value) public;\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n}\n\ncontract EthTokenToSmthSwaps {\n\n  using SafeMath for uint;\n\n  address public owner;\n  uint256 SafeTime = 3 hours; // atomic swap timeOut\n\n  struct Swap {\n    address token;\n    address targetWallet;\n    bytes32 secret;\n    bytes20 secretHash;\n    uint256 createdAt;\n    uint256 balance;\n  }\n\n  // ETH Owner => BTC Owner => Swap\n  mapping(address => mapping(address => Swap)) public swaps;\n\n  // ETH Owner => BTC Owner => secretHash => Swap\n  // mapping(address => mapping(address => mapping(bytes20 => Swap))) public swaps;\n\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  event CreateSwap(address token, address _buyer, address _seller, uint256 _value, bytes20 _secretHash, uint256 createdAt);\n\n  // ETH Owner creates Swap with secretHash\n  // ETH Owner make token deposit\n  function createSwap(bytes20 _secretHash, address _participantAddress, uint256 _value, address _token) public {\n    require(_value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n    require(ERC20(_token).transferFrom(msg.sender, this, _value));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _token,\n      _participantAddress,\n      bytes32(0),\n      _secretHash,\n      now,\n      _value\n    );\n\n    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);\n  }\n  // ETH Owner creates Swap with secretHash and targetWallet\n  // ETH Owner make token deposit\n  function createSwapTarget(bytes20 _secretHash, address _participantAddress, address _targetWallet, uint256 _value, address _token) public {\n    require(_value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n    require(ERC20(_token).transferFrom(msg.sender, this, _value));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _token,\n      _targetWallet,\n      bytes32(0),\n      _secretHash,\n      now,\n      _value\n    );\n\n    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);\n  }\n  function getBalance(address _ownerAddress) public view returns (uint256) {\n    return swaps[_ownerAddress][msg.sender].balance;\n  }\n\n  event Withdraw(address _buyer, address _seller, uint256 withdrawnAt);\n  // Get target wallet (buyer check)\n  function getTargetWallet(address tokenOwnerAddress) public returns (address) {\n      return swaps[tokenOwnerAddress][msg.sender].targetWallet;\n  }\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    ERC20(swap.token).transfer(swap.targetWallet, swap.balance);\n\n    swaps[_ownerAddress][msg.sender].balance = 0;\n    swaps[_ownerAddress][msg.sender].secret = _secret;\n\n    Withdraw(msg.sender, _ownerAddress, now); \n  }\n  // Token Owner withdraw money when participan no money for gas and adds secret key to swap\n  // BTC Owner receive +1 reputation... may be\n  function withdrawNoMoney(bytes32 _secret, address participantAddress) public {\n    Swap memory swap = swaps[msg.sender][participantAddress];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    ERC20(swap.token).transfer(swap.targetWallet, swap.balance);\n\n    swaps[msg.sender][participantAddress].balance = 0;\n    swaps[msg.sender][participantAddress].secret = _secret;\n\n    Withdraw(participantAddress, msg.sender, now); \n  }\n\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {\n    Swap memory swap = swaps[_ownerAddress][participantAddress];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    ERC20(swap.token).transfer(swap.targetWallet, swap.balance);\n\n    swaps[_ownerAddress][participantAddress].balance = 0;\n    swaps[_ownerAddress][participantAddress].secret = _secret;\n\n    Withdraw(participantAddress, _ownerAddress, now); \n  }\n\n  // ETH Owner receive secret\n  function getSecret(address _participantAddress) public view returns (bytes32) {\n    return swaps[msg.sender][_participantAddress].secret;\n  }\n\n  event Refund();\n\n  // ETH Owner refund money\n  // BTC Owner gets -1 reputation\n  function refund(address _participantAddress) public {\n    Swap memory swap = swaps[msg.sender][_participantAddress];\n\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) < now);\n\n    ERC20(swap.token).transfer(msg.sender, swap.balance);\n    clean(msg.sender, _participantAddress);\n\n    Refund();\n  }\n\n  function clean(address _ownerAddress, address _participantAddress) internal {\n    delete swaps[_ownerAddress][_participantAddress];\n  }\n}",
  "bytecode": ""
}