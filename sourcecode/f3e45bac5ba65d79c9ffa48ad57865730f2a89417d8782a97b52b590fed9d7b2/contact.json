{
  "address": "0xf1d185bf90f83ee9a9c4bafb9182ca6051628fff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartDoubler",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity 0.4.25;\n\n/**\n *  - GAIN UP TO 200% IN 20 DAYS\n *\n *  - Minimal contribution 0.05 eth\n *  - Currency and payment - ETH\n *  - Contribution allocation schemes:\n *    -- 91 % payments (3 % for Referral Program)\n *    -- 6 % marketing\n *    -- 3 % administration fee\n *\n *\n *  Percentage of your profit depends on balance of the contract:\n *\n *              balance     |   %   |  profit\n *            -------------------------------\n *            <  500 ETH    |  6 %  |   120 %\n *            >  500 ETH    |  7 %  |   140 %\n *            > 1500 ETH    |  8 %  |   160 %\n *            > 2500 ETH    |  9 %  |   180 %\n *            > 5000 ETH    | 10 %  |   200 %\n *\n *\n *    Referral program:\n *    Add your referrer address to DATA field when you invest or reinvest ETH:\n *     - You will get instant cashback 1 % of your Deposit\n *     - Your referrer will get bonus 2 % while withdrawing Dividends\n *\n *     -- You can add new referrer every time you invest money\n *     -- Referrer MUST be a participant of the project\n *     -- You can't be referrer for yourself\n *     -- If you have no referrer 3 % goes to marketing expenses\n *\n *\n *  How to use:\n *  1. Send ETH (more than 0.05) to make an investment\n *  2a. Claim your profit at any time by sending 0 ether transaction\n *  Also you can send less than 0.05 ETH and you will get back your sended amount and dividends.\n *  OR\n *  2b. Send more ETH to reinvest AND get your profit at the same time\n *\n *  Any deposit brings money only 20 days from the time of investment.\n *\n *  RECOMMENDED GAS LIMIT: 250000\n *  RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n *\n *  Contract reviewed and approved by experts!\n *\n */\n\n\n\nlibrary SafeMath {\n\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0);\n        uint256 c = _a / _b;\n\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract SmartDoubler {\n    using SafeMath for uint;\n\n    address public owner;\n    address marketing;\n    address admin;\n\n    mapping (address => uint) index;\n    mapping (address => mapping (uint => uint)) deposit;\n    mapping (address => mapping (uint => uint)) finish;\n    mapping (address => uint) checkpoint;\n\n    mapping (address => uint) refBonus;\n\n    event LogInvestment(address indexed _addr, uint _value);\n    event LogPayment(address indexed _addr, uint _value);\n    event LogReferralInvestment(address indexed _referrer, address indexed _referral, uint _value);\n\n    constructor(address _marketing, address _admin) public {\n        owner = msg.sender;\n        marketing = _marketing;\n        admin = _admin;\n    }\n\n    function renounceOwnership() external {\n        require(msg.sender == owner);\n        owner = 0x0;\n    }\n\n    function bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\n        assembly {\n            parsedreferrer := mload(add(_source,0x14))\n        }\n        return parsedreferrer;\n    }\n\n    function refSystem() internal {\n        address _referrer = bytesToAddress(bytes(msg.data));\n        if (_referrer != msg.sender && getInfo3(_referrer) > 0) {\n            marketing.transfer(msg.value * 6 / 100);\n            msg.sender.transfer(msg.value * 1 / 100);\n            refBonus[_referrer] += msg.value * 2 / 100;\n\n            emit LogReferralInvestment(_referrer, msg.sender, msg.value);\n        } else {\n            marketing.transfer(msg.value * 9 / 100);\n        }\n    }\n\n    function getInterest() public view returns (uint) {\n\n        if (address(this).balance >= 5000e18) {\n            return 10;\n        }\n        if (address(this).balance >= 2500e18) {\n            return 9;\n        }\n        if (address(this).balance >= 1500e18) {\n            return 8;\n        }\n        if (address(this).balance >= 500e18) {\n            return 7;\n        } else {\n            return 6;\n        }\n    }\n\n    function() external payable {\n        if (msg.value < 50000000000000000) {\n            msg.sender.transfer(msg.value);\n            withdraw();\n        } else {\n            invest();\n        }\n    }\n\n    function invest() public payable {\n\n        require(msg.value >= 50000000000000000);\n        admin.transfer(msg.value * 3 / 100);\n\n        if (getInfo3(msg.sender) + getInfo4(msg.sender) > 0) {\n            withdraw();\n            if (deposit[msg.sender][0] > 0) {\n                index[msg.sender] += 1;\n            }\n        }\n\n        checkpoint[msg.sender] = block.timestamp;\n        finish[msg.sender][index[msg.sender]] = block.timestamp + (20 * 1 days);\n        deposit[msg.sender][index[msg.sender]] = msg.value;\n\n        if (msg.data.length != 0) {\n            refSystem();\n        } else {\n            marketing.transfer(msg.value * 9 / 100);\n        }\n\n        emit LogInvestment(msg.sender, msg.value);\n    }\n\n    function withdraw() public {\n\n        uint _payout = refBonus[msg.sender];\n        refBonus[msg.sender] = 0;\n\n        for (uint i = 0; i <= index[msg.sender]; i++) {\n            if (checkpoint[msg.sender] < finish[msg.sender][i]) {\n                if (block.timestamp > finish[msg.sender][i]) {\n                    _payout = _payout.add((deposit[msg.sender][i].mul(getInterest()).div(100)).mul(finish[msg.sender][i].sub(checkpoint[msg.sender])).div(1 days));\n                } else {\n                    _payout = _payout.add((deposit[msg.sender][i].mul(getInterest()).div(100)).mul(block.timestamp.sub(checkpoint[msg.sender])).div(1 days));\n                }\n            }\n        }\n\n        if (_payout > 0) {\n            checkpoint[msg.sender] = block.timestamp;\n            msg.sender.transfer(_payout);\n\n            emit LogPayment(msg.sender, _payout);\n        }\n    }\n\n    function getInfo1(address _address) public view returns(uint Invested) {\n        uint _sum;\n        for (uint i = 0; i <= index[_address]; i++) {\n            if (block.timestamp < finish[_address][i]) {\n                _sum += deposit[_address][i];\n            }\n        }\n        Invested = _sum;\n    }\n\n    function getInfo2(address _address, uint _number) public view returns(uint Deposit_N) {\n        if (block.timestamp < finish[_address][_number - 1]) {\n            Deposit_N = deposit[_address][_number - 1];\n        } else {\n            Deposit_N = 0;\n        }\n    }\n\n    function getInfo3(address _address) public view returns(uint Dividends) {\n        uint _payout;\n        for (uint i = 0; i <= index[_address]; i++) {\n            if (checkpoint[_address] < finish[_address][i]) {\n                if (block.timestamp > finish[_address][i]) {\n                    _payout = _payout.add((deposit[_address][i].mul(getInterest()).div(100)).mul(finish[_address][i].sub(checkpoint[_address])).div(1 days));\n                } else {\n                    _payout = _payout.add((deposit[_address][i].mul(getInterest()).div(100)).mul(block.timestamp.sub(checkpoint[_address])).div(1 days));\n                }\n            }\n        }\n        Dividends = _payout;\n    }\n\n    function getInfo4(address _address) public view returns(uint Bonuses) {\n        Bonuses = refBonus[_address];\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610b1a83398101604052805160209091015160008054600160a060020a0319908116331790915560018054600160a060020a0394851690831617905560028054939092169216919091179055610aa8806100726000396000f3006080604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663144f9cc681146100eb57806317f85470146101215780633ccfd60b14610142578063715018a6146101575780638da5cb5b1461016c578063abc8cddb1461019d578063cf70e27b146101be578063e5a4bed3146101df578063e8b5e51f146100e1575b66b1a2bc2ec500003410156100e15760405133903480156108fc02916000818181858888f193505050501580156100d3573d6000803e3d6000fd5b506100dc6101f4565b6100e9565b6100e96103d3565b005b3480156100f757600080fd5b5061010f600160a060020a036004351660243561055c565b60408051918252519081900360200190f35b34801561012d57600080fd5b5061010f600160a060020a03600435166105c3565b34801561014e57600080fd5b506100e96101f4565b34801561016357600080fd5b506100e96105de565b34801561017857600080fd5b50610181610614565b60408051600160a060020a039092168252519081900360200190f35b3480156101a957600080fd5b5061010f600160a060020a0360043516610623565b3480156101ca57600080fd5b5061010f600160a060020a03600435166106ab565b3480156101eb57600080fd5b5061010f610809565b336000908152600760205260408120805490829055905b336000908152600360205260409020548111610353573360008181526005602090815260408083208584528252808320549383526006909152902054101561034b573360009081526005602090815260408083208484529091529020544211156103165733600090815260066020908152604080832054600583528184208585529092529091205461030f916103029162015180916102ea916102b39163ffffffff61087716565b6102f660646102ea6102c3610809565b3360009081526004602090815260408083208d84529091529020549063ffffffff61088e16565b9063ffffffff6108c316565b9063ffffffff61088e16565b839063ffffffff6108e616565b915061034b565b33600090815260066020526040902054610348906103029062015180906102ea906102b390429063ffffffff61087716565b91505b60010161020b565b60008211156103cf57336000818152600660205260408082204290555184156108fc0291859190818181858888f19350505050158015610397573d6000803e3d6000fd5b5060408051838152905133917f27a391d95d67e3626574fb5fbe3532bb7366e9254957b1f0e840953c248b2aa8919081900360200190a25b5050565b66b1a2bc2ec500003410156103e757600080fd5b600254604051600160a060020a03909116906064346003020480156108fc02916000818181858888f19350505050158015610426573d6000803e3d6000fd5b506000610432336105c3565b61043b336106ab565b0111156104825761044a6101f4565b336000908152600460209081526040808320838052909152812054111561048257336000908152600360205260409020805460010190555b3360008181526006602090815260408083204290819055600583528184206003845282852080548652908452828520621a5e0090920190915593835260048252808320935483529290522034905536156104e3576104de6108f8565b610524565b600154604051600160a060020a03909116906064346009020480156108fc02916000818181858888f19350505050158015610522573d6000803e3d6000fd5b505b60408051348152905133917fc74590e3281392e897f5c0f45530951cfe0db0e86c76d65af861e80b925871a4919081900360200190a2565b600160a060020a0382166000908152600560209081526040808320600019850184529091528120544210156105b95750600160a060020a0382166000908152600460209081526040808320600019850184529091529020546105bd565b5060005b92915050565b600160a060020a031660009081526007602052604090205490565b600054600160a060020a031633146105f557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600080805b600160a060020a03841660009081526003602052604090205481116106a457600160a060020a038416600090815260056020908152604080832084845290915290205442101561069c57600160a060020a038416600090815260046020908152604080832084845290915290205491909101905b600101610628565b5092915050565b600080805b600160a060020a03841660009081526003602052604090205481116106a457600160a060020a03841660008181526005602090815260408083208584528252808320549383526006909152902054101561080157600160a060020a03841660009081526005602090815260408083208484529091529020544211156107c357600160a060020a03841660009081526006602090815260408083205460058352818420858552909252909120546107bc916103029162015180916102ea9161077c9163ffffffff61087716565b6102f660646102ea61078c610809565b600160a060020a038d1660009081526004602090815260408083208d84529091529020549063ffffffff61088e16565b9150610801565b600160a060020a0384166000908152600660205260409020546107fe906103029062015180906102ea9061077c90429063ffffffff61087716565b91505b6001016106b0565b600069010f0cf064dd592000003031106108255750600a610874565b68878678326eac90000030311061083e57506009610874565b685150ae84a8cdf0000030311061085757506008610874565b681b1ae4d6e2ef50000030311061087057506007610874565b5060065b90565b6000808383111561088757600080fd5b5050900390565b6000808315156108a157600091506106a4565b508282028284828115156108b157fe5b04146108bc57600080fd5b9392505050565b6000808083116108d257600080fd5b82848115156108dd57fe5b04949350505050565b6000828201838110156108bc57600080fd5b60006109346000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610a75945050505050565b9050600160a060020a038116331480159061095757506000610955826106ab565b115b15610a3357600154604051600160a060020a03909116906064346006020480156108fc02916000818181858888f1935050505015801561099b573d6000803e3d6000fd5b5060405133906064340480156108fc02916000818181858888f193505050501580156109cb573d6000803e3d6000fd5b50606460023402600160a060020a03831660008181526007602090815260409182902080549590940490940190925581513481529151339391927fa249146257bee059355926b54611f49f096a7b1ed415e8011b89838f96e5fc5192908290030190a3610a72565b600154604051600160a060020a03909116906064346009020480156108fc02916000818181858888f193505050501580156103cf573d6000803e3d6000fd5b50565b60140151905600a165627a7a72305820303f73c8b645fb20dcbd39e165f7ad2dde91a4624ceab75e117225b45058fc630029000000000000000000000000a5428fe2b921b3fe12dad26197a732448905117a0000000000000000000000003f28120c3f9960c8117ecd9ebf47f1143d584094",
  "constructorArguments": "000000000000000000000000a5428fe2b921b3fe12dad26197a732448905117a0000000000000000000000003f28120c3f9960c8117ecd9ebf47f1143d584094"
}