{
  "address": "0x1044d3EFaD9a9bAd4e77a1C0C86bc53636dA0345",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MSRiseTokenSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity ^0.4.18;\n\ncontract ERC20Token {\n\n  function totalSupply () constant returns (uint256 _totalSupply);\n\n  function balanceOf (address _owner) constant returns (uint256 balance);\n\n  function transfer (address _to, uint256 _value) returns (bool success);\n\n  function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\n\n  function approve (address _spender, uint256 _value) returns (bool success);\n\n  function allowance (address _owner, address _spender) constant returns (uint256 remaining);\n\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n  \n  \n   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  \n}\n\n\ncontract Token is ERC20Token, SafeMath {\n\n  function Token () {\n    // Do nothing\n  }\n \n  function balanceOf (address _owner) constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom (address _from, address _to, uint256 _value)  returns (bool success) {\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false;\n\n    allowances [_from][msg.sender] =\n      safeSub (allowances [_from][msg.sender], _value);\n\n    if (_value > 0 && _from != _to) {\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    Transfer (_from, _to, _value);\n    return true;\n  }\n\n \n  function approve (address _spender, uint256 _value) returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  \n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n}\n\n\ncontract MSRiseToken is Token {\n    \n    address public owner;\n    \n     \n    uint256 tokenCount = 0;\n    \n    uint256 public bounce_reserve = 0;\n    uint256 public partner_reserve = 0;\n    uint256 public sale_reserve = 0;\n     \n    bool frozen = false;\n     \n    uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n     \n\tuint public constant _decimals = (10**18);\n\t\n     \n    modifier onlyOwner() {\n\t    require(owner == msg.sender);\n\t    _;\n\t}\n     \n     function MSRiseToken() {\n         owner = msg.sender;\n         \n         createTokens(5 * (10**25)); // создание 50 млн токенов\n         \n         partner_reserve = 5 * (10**24); // резервация 5 млн токенов для 10% для инвесторов\n         bounce_reserve = 1 * (10**24); // резервация 1 млн токенов для бонусной программы\n         \n         // вычисления общего количества токенов для продажи (44 млн)\n         sale_reserve = safeSub(tokenCount, safeAdd(partner_reserve, bounce_reserve));  \n         \n         \n     }\n     \n    function totalSupply () constant returns (uint256 _totalSupply) {\n        return tokenCount;\n    }\n     \n    function name () constant returns (string result) {\n\t\treturn \"MSRiseToken\";\n\t}\n\t\n\tfunction symbol () constant returns (string result) {\n\t\treturn \"MSRise\";\n\t}\n\t\n\tfunction decimals () constant returns (uint result) {\n        return 18;\n    }\n    \n    function transfer (address _to, uint256 _value) returns (bool success) {\n        if (frozen) return false;\n        else return Token.transfer (_to, _value);\n    }\n\n  \n  function transferFrom (address _from, address _to, uint256 _value)\n    returns (bool success) {\n    if (frozen) return false;\n    else return Token.transferFrom (_from, _to, _value);\n  }\n\n  \n  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n    returns (bool success) {\n    if (allowance (msg.sender, _spender) == _currentValue)\n      return approve (_spender, _newValue);\n    else return false;\n  }\n\n  function burnTokens (uint256 _value) returns (bool success) {\n    if (_value > accounts [msg.sender]) return false;\n    else if (_value > 0) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      tokenCount = safeSub (tokenCount, _value);\n      return true;\n    } else return true;\n  }\n\n\n  function createTokens (uint256 _value) returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n    }\n\n    return true;\n  }\n\n\n // Установка нового владельца контракта \n // входной параметр адрес ETH кошелька \n\n  function setOwner (address _newOwner) {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  function freezeTransfers () {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n\n  function unfreezeTransfers () {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  event Freeze ();\n\n  event Unfreeze ();\n\n}\n\n\ncontract MSRiseTokenSale is MSRiseToken  {\n \n    address[] balancesKeys;\n    mapping (address => uint256) balances;\n \n    enum State { PRE_ICO, ICO, STOPPED }\n    \n    \n    // 0 , 1 , 2\n    \n    State public currentState = State.STOPPED;\n\n    uint public tokenPrice = 50000000000000000;\n    uint public _minAmount = 0.05 ether;\n\t\n\tmapping (address => uint256) wallets;\n\n    address public beneficiary;\n\n\tuint256 public totalSold = 0;\n\tuint256 public totalBounces = 0;\n\t\n\tuint public current_percent = 15;\n\tuint public current_discount = 0;\n\n\tbool private _allowedTransfers = true;\n\t\n\tmodifier minAmount() {\n        require(msg.value == _minAmount);\n        _;\n    }\n    \n    modifier saleIsOn() {\n        require(currentState != State.STOPPED && totalSold < sale_reserve);\n        _;\n    }\n    \n    modifier isAllowedBounce() {\n        require(totalBounces < bounce_reserve);\n        _;\n    }\n    \n\tfunction TokenSale() {\n\t    owner = msg.sender;\n\t    beneficiary = msg.sender;\n\t}\n\n\t\n\t// установка текущего бонуса за покупку\n\t\n\tfunction setBouncePercent(uint _percent) public onlyOwner {\n\t    current_percent = _percent;\n\t}\n\t\n\tfunction setDiscountPercent(uint _discount) public onlyOwner {\n\t    current_discount = _discount;\n\t}\n\t\n\t\n\t// установка текущей фазы продаж (pre-ico = 0, ico = 1, stopped = 3)\n\t\n\tfunction setState(State _newState) public onlyOwner {\n\t    currentState = _newState;\n\t}\n\t\n\t// установка минимальной суммы платежа в эфирах\n\t\n\tfunction setMinAmount(uint _new) public onlyOwner {\n\t    _minAmount = _new;\n\t}\n\t\n\t// возобновление переводов\n\t\n\tfunction allowTransfers() public onlyOwner {\n\t\t_allowedTransfers = true;\t\t\n\t}\n\t\n\t// заморозка всех переводов\n\t\n\tfunction stopTransfers() public onlyOwner {\n\t\t_allowedTransfers = false;\n\t}\n\t\n\t// функция смены адреса ETH куда будут поступать отправленные эфиры\n\t\n    function setBeneficiaryAddress(address _new) public onlyOwner {\n        beneficiary = _new;\n    }\n    \n    // функция установки стоимости одного токена в wei \n    \n    function setTokenPrice(uint _price) public onlyOwner {\n        tokenPrice = _price;\n    }\n    \n    // фукнция списания токенов с общего баланса на баланс отправителя\n    \n\tfunction transferPayable(address _address, uint _amount) private returns (bool) {\n\t    accounts[_address] = safeAdd(accounts[_address], _amount);\n\t    accounts[owner] = safeSub(accounts[owner], _amount);\n\t    totalSold = safeAdd(totalSold, _amount);\n\t    return true;\n\t}\n\t\n\t// вычисления количество токенов, равное количество отправленных эфиров\n\t// исходя из стоимости токена, бонуса и скидки\n\t\n\tfunction get_tokens_count(uint _amount) private returns (uint) {\n\t    \n\t     uint currentPrice = tokenPrice;\n\t     uint tokens = safeDiv( safeMul(_amount, _decimals), currentPrice ) ;\n\t     totalSold = safeAdd(totalSold, tokens);\n\t     \n\t     if(currentState == State.PRE_ICO) {\n\t         tokens = safeAdd(tokens, get_bounce_tokens(tokens)); // вызывается при PRE-ICO\n\t     } else if(currentState == State.ICO) {\n\t         tokens = safeAdd(tokens, get_discount_tokens(tokens)); // вызывается при ICO\n\t     }\n\t     \n\t     return tokens;\n\t}\n\t\n\t// вычисление текущей скидки\n\t\n\tfunction get_discount_tokens(uint _tokens) isAllowedBounce private returns (uint) {\n\t    \n\t    uint tokens = 0;\n\t    uint _current_percent = safeMul(current_discount, 100);\n\t    tokens = _tokens * _current_percent / 10000;\n\t    totalBounces = safeAdd(totalBounces, tokens);\n\t    return tokens;\n\t    \n\t}\n\t\n\t// вычисление бонусных токенов\n\t\n\tfunction get_bounce_tokens(uint _tokens) isAllowedBounce() private returns (uint) {\n\t    uint tokens = 0;\n\t    uint _current_percent = safeMul(current_percent, 100);\n\t    tokens = _tokens * _current_percent / 10000;\n\t    totalBounces = safeAdd(totalBounces, tokens);\n\t    return tokens;\n\t}\n\t\n\t// функция, которая вызывается при отправке эфира на контракт\n\t\n\tfunction buy() public saleIsOn() minAmount() payable {\n\t    uint tokens;\n\t    tokens = get_tokens_count(msg.value);\n\t\trequire(transferPayable(msg.sender , tokens));\n\t\tif(_allowedTransfers) {\n\t\t\tbeneficiary.transfer(msg.value);\n\t\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], msg.value);\n\t\t\tbalancesKeys.push(msg.sender);\n\t    }\n\t}\n\t\n\t// возврат средств, вызывается владельцем контракта,\n\t// для возврата на контракте должны присутствовать эфиры\n\t\n\tfunction refund() onlyOwner {\n      for(uint i = 0 ; i < balancesKeys.length ; i++) {\n          address addr = balancesKeys[i]; \n          uint value = balances[addr];\n          balances[addr] = 0; \n          accounts[addr] = 0;\n          addr.transfer(value); \n      }\n    }\n\t\n\t\n\tfunction() external payable {\n      buy();\n    }\n\t\n    \n}",
  "bytecode": "608060405260006003556000600455600060055560006006556000600760006101000a81548160ff0219169083151502179055506002600a60006101000a81548160ff021916908360028111156200005357fe5b021790555066b1a2bc2ec50000600b5566b1a2bc2ec50000600c556000600f556000601055600f60115560006012556001601360006101000a81548160ff02191690831515021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001036a295be96e640669720000006200016e640100000000026401000000009004565b506a0422ca8b0a00a42500000060058190555069d3c21bcecceda1000000600481905550620001626003546200014d600554600454620002ef640100000000026401000000009004565b6200032b640100000000026401000000009004565b60068190555062000345565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620001cd57600080fd5b6000821115620002e557620002147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6003546200032b640100000000026401000000009004565b821115620002265760009050620002ea565b6200027f6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483620002ef640100000000026401000000009004565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002de60035483620002ef640100000000026401000000009004565b6003819055505b600190505b919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383111515156200032057fe5b818301905092915050565b60008183101515156200033a57fe5b818303905092915050565b61249080620003556000396000f3006080604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146101ed578063064d4d7c1461020457806306fdde031461022f578063095ea7b3146102bf5780630c3f6acf1461032457806313af40351461035d578063154ec2db146103a057806318160ddd146103cd5780631feb4d52146103f85780632185810b1461042357806323b872dd1461043a57806331380c89146104bf578063313ce567146104d657806331c420d41461050157806332424aa31461051857806338af3eed14610543578063426a84931461059a57806356de96db14610609578063572960a114610639578063590e1ae3146106645780636a61e5fc1461067b5780636d1b229d146106a857806370a08231146106ed5780637adac0e6146107445780637e1f2bb81461075b5780637ff9b596146107a0578063897b0637146107cb5780638da5cb5b146107f85780639106d7ba1461084f57806395d89b411461087a578063a6f2ae3a1461090a578063a9059cbb14610914578063ca36c38c14610979578063d348ec77146109a4578063d943c702146109d1578063dd62ed3e146109fc578063e2fa046e14610a73578063e895cfef14610a9e578063ec6be06e14610ac9575b6101eb610b0c565b005b3480156101f957600080fd5b50610202610cf5565b005b34801561021057600080fd5b50610219610db1565b6040518082815260200191505060405180910390f35b34801561023b57600080fd5b50610244610db7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610284578082015181840152602081019050610269565b50505050905090810190601f1680156102b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102cb57600080fd5b5061030a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df4565b604051808215151515815260200191505060405180910390f35b34801561033057600080fd5b50610339610ee6565b6040518082600281111561034957fe5b60ff16815260200191505060405180910390f35b34801561036957600080fd5b5061039e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef9565b005b3480156103ac57600080fd5b506103cb60048036038101908080359060200190929190505050610f99565b005b3480156103d957600080fd5b506103e2610fff565b6040518082815260200191505060405180910390f35b34801561040457600080fd5b5061040d611009565b6040518082815260200191505060405180910390f35b34801561042f57600080fd5b5061043861100f565b005b34801561044657600080fd5b506104a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611088565b604051808215151515815260200191505060405180910390f35b3480156104cb57600080fd5b506104d46110bd565b005b3480156104e257600080fd5b506104eb611141565b6040518082815260200191505060405180910390f35b34801561050d57600080fd5b5061051661114a565b005b34801561052457600080fd5b5061052d611205565b6040518082815260200191505060405180910390f35b34801561054f57600080fd5b50610558611211565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a657600080fd5b506105ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611237565b604051808215151515815260200191505060405180910390f35b34801561061557600080fd5b50610637600480360381019080803560ff169060200190929190505050611267565b005b34801561064557600080fd5b5061064e6112e9565b6040518082815260200191505060405180910390f35b34801561067057600080fd5b506106796112ef565b005b34801561068757600080fd5b506106a6600480360381019080803590602001909291905050506114c2565b005b3480156106b457600080fd5b506106d360048036038101908080359060200190929190505050611528565b604051808215151515815260200191505060405180910390f35b3480156106f957600080fd5b5061072e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611631565b6040518082815260200191505060405180910390f35b34801561075057600080fd5b50610759611679565b005b34801561076757600080fd5b50610786600480360381019080803590602001909291905050506116f2565b604051808215151515815260200191505060405180910390f35b3480156107ac57600080fd5b506107b561183c565b6040518082815260200191505060405180910390f35b3480156107d757600080fd5b506107f660048036038101908080359060200190929190505050611842565b005b34801561080457600080fd5b5061080d6118a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085b57600080fd5b506108646118ce565b6040518082815260200191505060405180910390f35b34801561088657600080fd5b5061088f6118d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108cf5780820151818401526020810190506108b4565b50505050905090810190601f1680156108fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610912610b0c565b005b34801561092057600080fd5b5061095f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611911565b604051808215151515815260200191505060405180910390f35b34801561098557600080fd5b5061098e611944565b6040518082815260200191505060405180910390f35b3480156109b057600080fd5b506109cf6004803603810190808035906020019092919050505061194a565b005b3480156109dd57600080fd5b506109e66119b0565b6040518082815260200191505060405180910390f35b348015610a0857600080fd5b50610a5d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119b6565b6040518082815260200191505060405180910390f35b348015610a7f57600080fd5b50610a88611a3d565b6040518082815260200191505060405180910390f35b348015610aaa57600080fd5b50610ab3611a43565b6040518082815260200191505060405180910390f35b348015610ad557600080fd5b50610b0a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a49565b005b6000600280811115610b1a57fe5b600a60009054906101000a900460ff166002811115610b3557fe5b14158015610b465750600654600f54105b1515610b5157600080fd5b600c5434141515610b6157600080fd5b610b6a34611ae9565b9050610b763382611bb7565b1515610b8157600080fd5b601360009054906101000a900460ff1615610cf257600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610bfe573d6000803e3d6000fd5b50610c48600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434611d2d565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060083390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5157600080fd5b600760009054906101000a900460ff161515610daf576001600760006101000a81548160ff0219169083151502179055507f615acbaede366d76a8b8cb2a9ada6a71495f0786513d71aa97aaf0c3910b78de60405160405180910390a15b565b600c5481565b60606040805190810160405280600b81526020017f4d5352697365546f6b656e000000000000000000000000000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600a60009054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5557600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ff557600080fd5b8060128190555050565b6000600354905090565b60115481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561106b57600080fd5b6001601360006101000a81548160ff021916908315150217905550565b6000600760009054906101000a900460ff16156110a857600090506110b6565b6110b3848484611d68565b90505b9392505050565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006012905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a657600080fd5b600760009054906101000a900460ff1615611203576000600760006101000a81548160ff0219169083151502179055507f2f05ba71d0df11bf5fa562a6569d70c4f80da84284badbe015ce1456063d0ded60405160405180910390a15b565b670de0b6b3a764000081565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008261124433866119b6565b141561125b576112548483610df4565b9050611260565b600090505b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156112c357600080fd5b80600a60006101000a81548160ff021916908360028111156112e157fe5b021790555050565b60065481565b60008060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561135057600080fd5b600092505b6008805490508310156114bd5760088381548110151561137157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114af573d6000803e3d6000fd5b508280600101935050611355565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561151e57600080fd5b80600b8190555050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115611579576000905061162c565b6000821115611627576115ca6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612113565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161860035483612113565b6003819055506001905061162c565b600190505b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156116d557600080fd5b6000601360006101000a81548160ff021916908315150217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175057600080fd5b6000821115611832576117857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600354612113565b8211156117955760009050611837565b6117dd6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611d2d565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061182b60035483611d2d565b6003819055505b600190505b919050565b600b5481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561189e57600080fd5b80600c8190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60606040805190810160405280600681526020017f4d53526973650000000000000000000000000000000000000000000000000000815250905090565b6000600760009054906101000a900460ff1615611931576000905061193e565b61193b838361212c565b90505b92915050565b60105481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119a657600080fd5b8060118190555050565b60125481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60055481565b60045481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611aa557600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600b549150611b0e611b0885670de0b6b3a7640000612343565b83612399565b9050611b1c600f5482611d2d565b600f8190555060006002811115611b2f57fe5b600a60009054906101000a900460ff166002811115611b4a57fe5b1415611b6957611b6281611b5d836123b4565b611d2d565b9050611bad565b60016002811115611b7657fe5b600a60009054906101000a900460ff166002811115611b9157fe5b1415611bac57611ba981611ba48361240c565b611d2d565b90505b5b8092505050919050565b6000611c016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611d2d565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cad600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612113565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d1d600f5483611d2d565b600f819055506001905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311151515611d5d57fe5b818301905092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611df7576000905061210c565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611e46576000905061210c565b611ecc600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612113565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600082118015611f8857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156120a257611fd56000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612113565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061205f6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611d2d565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600081831015151561212157fe5b818303905092915050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561217d576000905061233d565b6000821180156121b957508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156122d3576122066000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612113565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122906000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611d2d565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000808214156123565760009050612393565b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81151561238157fe5b04831115151561238d57fe5b81830290505b92915050565b60008082848115156123a757fe5b0490508091505092915050565b60008060006004546010541015156123cb57600080fd5b600091506123dc6011546064612343565b90506127108185028115156123ed57fe5b0491506123fc60105483611d2d565b6010819055508192505050919050565b600080600060045460105410151561242357600080fd5b600091506124346012546064612343565b905061271081850281151561244557fe5b04915061245460105483611d2d565b60108190555081925050509190505600a165627a7a723058201807d4bdf036f2ee93822dbd99e7fad958334392cd145e109867c4a8907b010a0029"
}