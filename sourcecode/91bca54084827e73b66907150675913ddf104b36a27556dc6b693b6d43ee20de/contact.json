{
  "address": "0x979ebc09e55ea0ab563cf7175e4c4b1a03afc19a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "UTEMIS Token",
  "contractName": "UTEMIS",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-05\n*/\n\npragma solidity ^0.4.24;\ncontract ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf( address _owner ) public view returns (uint balance);\n    function allowance( address _owner, address _spender ) public view returns (uint allowance_);\n\n    function transfer( address _to, uint _value)public returns (bool success);\n    function transferFrom( address _from, address _to, uint _value)public returns (bool success);\n    function approve( address _spender, uint _value )public returns (bool success);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed _owner, address indexed _spender, uint value);\n}\n\n\ncontract UTEMIS is ERC20{            \n\n        uint8 public constant TOKEN_DECIMAL     = 18;        \n        uint256 public constant TOKEN_ESCALE    = 1 * 10 ** uint256(TOKEN_DECIMAL); \n                                              \n        uint256 public constant INITIAL_SUPPLY  = 1000000000 * TOKEN_ESCALE; // 1000000000000000000000 Smart contract UNITS | 1.000.000.000,000000000000 Ethereum representation\n        uint256 public constant TGE_SUPPLY      = 1000000000 * TOKEN_ESCALE;  // 1000000000000000000000 Smart contract UNITS  |  1.000.000.000,000000000000 Ethereum representation\n\n        uint public constant MIN_ACCEPTED_VALUE = 250000000000000000 wei;\n        uint public constant VALUE_OF_UTS       = 25000000000000 wei;        // 0.000025 ETH = 1 UTS\n\n        uint public constant START_TGE          = 1537110000; // 16 SEPT 2018 15:00:00 GMT | 16 SEPT 2018 17:00:00 GMT+2\n\n        string public constant TOKEN_NAME       = \"UTEMIS\";\n        string public constant TOKEN_SYMBOL     = \"UTS\";\n\n    /*------------------- Finish public constants -------------------*/\n\n\n    /******************** Start private NO-Constants variables ********************/\n    \n        uint[4]  private bonusTime             = [7 days     , 14 days     , 21 days   , 28 days];        \n        uint8[4] private bonusBenefit          = [uint8(25)  , uint8(15)   , uint8(10) , uint8(5)];\n        uint8[4] private bonusPerInvestion_10  = [uint8(2)   , uint8(2)    , uint8(2)  , uint8(2)];\n        uint8[4] private bonusPerInvestion_20  = [uint8(4)   , uint8(4)    , uint8(4)  , uint8(4)];\n    \n    /*------------------- Finish private NO-Constants variables -------------------*/\n\n\n    /******************** Start public NO-Constants variables ********************/        \n       \n        address public owner;\n        address public beneficiary;            \n        uint public ethersCollecteds;\n        uint public tokensSold;\n        uint256 public totalSupply = INITIAL_SUPPLY;\n        bool public tgeStarted;            \n        mapping(address => uint256) public balances;    \n        mapping(address => Investors) public investorsList;\n        mapping(address => mapping (address => uint256)) public allowed;\n        address[] public investorsAddress;    \n        string public name     = TOKEN_NAME;\n        uint8 public decimals  = TOKEN_DECIMAL;\n        string public symbol   = TOKEN_SYMBOL;\n   \n    /*------------------- Finish public NO-Constants variables -------------------*/    \n\n    struct Investors{\n        uint256 amount;\n        uint when;\n    }\n\n    event Transfer(address indexed from , address indexed to , uint256 value);\n    event Approval(address indexed _owner , address indexed _spender , uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    event FundTransfer(address backer , uint amount , address investor);\n\n    //Safe math\n    function safeSub(uint a , uint b) internal pure returns (uint){assert(b <= a);return a - b;}  \n    function safeAdd(uint a , uint b) internal pure returns (uint){uint c = a + b;assert(c>=a && c>=b);return c;}\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier tgeIsStarted(){\n        require(tgeStarted == true);        \n        require(now >= START_TGE);      \n        _;\n    }\n\n    modifier tgeIsStopped(){\n        require(tgeStarted == false); \n        _;\n    }\n\n    modifier minValue(){\n        require(msg.value >= MIN_ACCEPTED_VALUE);\n        _;\n    }\n\n    constructor() public{\n        balances[msg.sender] = totalSupply;\n        owner                = msg.sender;        \n        tgeStarted           = true;\n        beneficiary          = 0x1F3fd98152f978f74349Fe2a25730Fe73e431BD8;\n    }\n\n\n    /**\n     * ERC20\n     */\n    function balanceOf(address _owner) public view returns(uint256 balance){\n        return balances[_owner];\n    }\n\n    /**\n     * ERC20\n     */\n    function totalSupply() constant public returns(uint256 supply){\n        return totalSupply;\n    }\n\n\n\n    /**\n     * For transfer tokens. Internal use, only can executed by this contract ERC20\n     * ERC20\n     * @param  _from         Source address\n     * @param  _to           Destination address\n     * @param  _value        Amount of tokens to send\n     */\n    function _transfer(address _from , address _to , uint _value) internal{        \n        require(_to != 0x0);                                                          //Prevent send tokens to 0x0 address        \n        require(balances[_from] >= _value);                                           //Check if the sender have enough tokens        \n        require(balances[_to] + _value > balances[_to]);                              //Check for overflows        \n        balances[_from]         = safeSub(balances[_from] , _value);                  //Subtract from the source ( sender )        \n        balances[_to]           = safeAdd(balances[_to]   , _value);                  //Add tokens to destination        \n        uint previousBalance    = balances[_from] + balances[_to];                    //To make assert        \n        emit Transfer(_from , _to , _value);                                               //Fire event for clients        \n        assert(balances[_from] + balances[_to] == previousBalance);                   //Check the assert\n    }\n\n\n    /**\n     * Commonly transfer tokens \n     * ERC20\n     * @param  _to           Destination address\n     * @param  _value        Amount of tokens to send\n     */\n    function transfer(address _to , uint _value) public returns (bool success){        \n        _transfer(msg.sender , _to , _value);\n        return true;\n    }\n\n\n    /**\n     * Transfer token from address to another address that's allowed to. \n     * ERC20\n     * @param _from          Source address\n     * @param _to            Destination address\n     * @param _value         Amount of tokens to send\n     */   \n    function transferFrom(address _from , address _to , uint256 _value) public returns (bool success){\n        if(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            _transfer(_from , _to , _value);\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender] , _value);\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * Approve spender to transfer amount of tokens from your address ERC20\n     * ERC20\n     * @param _spender       Address that can transfer tokens from your address\n     * @param _value         Amount of tokens that can be sended by spender\n     */   \n    function approve(address _spender , uint256 _value) public returns (bool success){\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender , _spender , _value);\n        return true;\n    }\n\n    /**\n     * Returns the amount of tokens allowed by owner to spender ERC20\n     * ERC20\n     * @param _owner         Source address that allow's spend tokens\n     * @param _spender       Address that can transfer tokens form allowed     \n     */   \n    function allowance(address _owner , address _spender) public view returns(uint256 allowance_){\n        return allowed[_owner][_spender];\n    }\n\n\n    /**\n     * Get investors info\n     *\n     * @return []                Returns an array with address of investors, amount invested and when invested\n     */\n    function getInvestors() constant public returns(address[] , uint[] , uint[]){\n        uint length = investorsAddress.length;                                             //Length of array\n        address[] memory addr = new address[](length);\n        uint[] memory amount  = new uint[](length);\n        uint[] memory when    = new uint[](length);\n        for(uint i = 0; i < length; i++){\n            address key = investorsAddress[i];\n            addr[i]     = key;\n            amount[i]   = investorsList[key].amount;\n            when[i]     = investorsList[key].when;\n        }\n        return (addr , amount , when);        \n    }\n\n\n    /**\n     * Get amount of bonus to apply\n     *\n     * @param _ethers              Amount of ethers invested, for calculation the bonus     \n     * @return uint                Returns a % of bonification to apply\n     */\n    function getBonus(uint _ethers) public view returns(uint8){        \n        uint8 _bonus  = 0;                                                          //Assign bonus to \n        uint8 _bonusPerInvestion = 0;\n        uint  starter = now - START_TGE;                                            //To control end time of bonus\n        for(uint i = 0; i < bonusTime.length; i++){                                 //For loop\n            if(starter <= bonusTime[i]){                                            //If the starter are greater than bonusTime, the bonus will be 0                \n                if(_ethers > 10 ether && _ethers <= 20 ether){\n                    _bonusPerInvestion = bonusPerInvestion_10[i];\n                }\n                if(_ethers > 20 ether){\n                    _bonusPerInvestion = bonusPerInvestion_20[i];\n                }\n                _bonus = bonusBenefit[i];                                           //Asign amount of bonus to bonus_ variable                                \n                break;                                                              //Break the loop\n\n            }\n        }        \n        return _bonus + _bonusPerInvestion;\n    }\n\n    /**\n     * Calculate the amount of tokens to sends depeding on the amount of ethers received\n     *\n     * @param  _ethers              Amount of ethers for convert to tokens\n     * @return uint                 Returns the amount of tokens to send\n     */\n    function getTokensToSend(uint _ethers) public view returns (uint){\n        uint tokensToSend  = 0;                                                     //Assign tokens to send to 0                                            \n        uint8 bonus        = getBonus(_ethers);                                     //Get amount of bonification                                    \n        uint ethToTokens   = (_ethers * 10 ** uint256(TOKEN_DECIMAL)) / VALUE_OF_UTS;                                //Make the conversion, divide amount of ethers by value of each UTS                \n        uint amountBonus   = ethToTokens / 100 * bonus;\n             tokensToSend  = ethToTokens + amountBonus;\n        return tokensToSend;\n    }\n    \n    /**\n     * Increase the total supply of tokens\n     *\n     * @param amount                Amount of tokens to add\n     */\n    function inflateSupply(uint amount) public onlyOwner returns (bool success){\n        require(amount > 0);        \n        totalSupply+= amount;        \n        balances[owner] = safeAdd(balances[owner]   , amount);                  //Add tokens to destination               \n        emit Transfer(0x0 , owner , amount);                                    //Fire event for clients        \n        return true;\n    }\n\n    /**\n     * Destroy amount of tokens\n     *\n     * @param amount                Amount of tokens to destroy\n     */\n    function burn(uint amount) public onlyOwner returns (bool success){\n        require(balances[owner] >= amount);\n        totalSupply-= amount;\n        balances[owner] = safeSub(balances[owner] , amount);\n        emit Burn(owner , amount);\n        emit Transfer(owner , 0x0 , amount);\n        return true;\n    }\n\n    /**\n     * Fallback when the contract receives ethers\n     *\n     */\n    function () payable public tgeIsStarted minValue{                              \n        uint amount_actually_invested = investorsList[msg.sender].amount;           //Get the actually amount invested\n        \n        if(amount_actually_invested == 0){                                          //If amount invested are equal to 0, will add like new investor\n            uint index                = investorsAddress.length++;\n            investorsAddress[index]   = msg.sender;\n            investorsList[msg.sender] = Investors(msg.value , now);                 //Store investors info        \n        }\n        \n        if(amount_actually_invested > 0){                                           //If amount invested are greater than 0\n            investorsList[msg.sender].amount += msg.value;                          //Increase the amount invested\n            investorsList[msg.sender].when    = now;                                //Change the last time invested\n        }\n        \n        uint tokensToSend = getTokensToSend(msg.value);                             //Calc the tokens to send depending on ethers received\n        tokensSold += tokensToSend;             \n\n        require(balances[owner] >= tokensToSend);\n        _transfer(owner , msg.sender , tokensToSend);        \n        ethersCollecteds   += msg.value;\n        if(beneficiary == address(0)){\n            beneficiary = owner;\n        }\n        beneficiary.transfer(msg.value);            \n        emit FundTransfer(owner , msg.value , msg.sender);                          //Fire events for clients\n    }\n\n\n    /**\n     * Start the TGE manually\n     *     \n     */\n    function startTge() public onlyOwner{\n        tgeStarted = true;                                                         //Set the TGE started\n    }\n\n    /**\n     * Stop the TGE manually\n     *\n     */\n    function stopTge() public onlyOwner{\n        tgeStarted = false;                                                        //Set the TGE stopped\n    }\n\n\n    function setBeneficiary(address _beneficiary) public onlyOwner{\n        beneficiary = _beneficiary;\n    }\n    \n    function destroyContract()external onlyOwner{\n        selfdestruct(owner);\n    }\n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"stopTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethers\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ESCALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TGE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethers\",\"type\":\"uint256\"}],\"name\":\"getTokensToSend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VALUE_OF_UTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethersCollecteds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ACCEPTED_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"allowance_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorsList\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"when\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inflateSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]",
  "bytecode": "61010060405262093a8060809081526212750060a052621baf8060c0526224ea0060e05262000033906000906004620001e6565b506040805160808101825260198152600f6020820152600a918101919091526005606082015262000068906004908162000230565b506040805160808101825260028082526020820181905291810182905260608101919091526200009d90600590600462000230565b506040805160808101825260048082526020820181905291810182905260608101829052620000d0916006919062000230565b506b033b2e3c9fd0803ce8000000600b556040805180820190915260068082527f5554454d4953000000000000000000000000000000000000000000000000000060209092019182526200012791601191620002c6565b506012805460ff1916811790556040805180820190915260038082527f555453000000000000000000000000000000000000000000000000000000000060209092019182526200017a91601391620002c6565b503480156200018857600080fd5b50600b54336000818152600d602052604090209190915560078054600160a060020a03199081169092179055600c805460ff1916600117905560088054909116731f3fd98152f978f74349fe2a25730fe73e431bd81790556200037a565b82600481019282156200021e579160200282015b828111156200021e578251829062ffffff16905591602001919060010190620001fa565b506200022c92915062000339565b5090565b600183019183908215620002b85791602002820160005b838211156200028757835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000247565b8015620002b65782816101000a81549060ff021916905560010160208160000104928301926001030262000287565b505b506200022c92915062000359565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200030957805160ff19168380011785556200021e565b828001600101855582156200021e579182015b828111156200021e5782518255916020019190600101906200031c565b6200035691905b808211156200022c576000815560010162000340565b90565b6200035691905b808211156200022c57805460ff1916815560010162000360565b611404806200038a6000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303d83c4d81146103ef57806306fdde0314610406578063092a5cce14610490578063095ea7b3146104a55780630a834ac0146104dd5780630cb6b5771461050457806318160ddd1461052f57806318821400146105445780631c31f7101461055957806323b872dd1461057a57806327e235e3146105a45780632a905318146105c55780632ff2e9dc146105da578063313ce567146105ef57806338af3eed1461060457806342966c68146106355780634aa66b281461064d578063518ab2a8146106655780635c6581651461067a5780635cf858aa146106a157806370a08231146106b65780637c81ff56146105da5780637de06cfc146106d757806389fe5273146106ec5780638da5cb5b1461070457806395d89b4114610719578063a9059cbb1461072e578063b2d5e8b114610752578063b2f5a54c14610767578063cc7a060f1461085a578063d6ad5e5e1461086f578063dce5f27714610884578063dd62ed3e1461089c578063de622de4146108c3578063e38dd396146108d8578063ff05edd814610912575b600c546000908190819060ff1615156001146101dc57600080fd5b635b9e6ff04210156101ed57600080fd5b6703782dace9d9000034101561020257600080fd5b336000908152600e602052604090205492508215156102a457601080549061022d9060018301611391565b91503360108381548110151561023f57fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925560408051808201825234815242818501908152338452600e9094529120905181559051600191909101555b60008311156102ca57336000908152600e60205260409020805434018155426001909101555b6102d33461092a565b600a805482019055600754600160a060020a03166000908152600d602052604090205490915081111561030557600080fd5b60075461031c90600160a060020a03163383610966565b6009805434019055600854600160a060020a03161515610366576007546008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b600854604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561039f573d6000803e3d6000fd5b5060075460408051600160a060020a0390921682523460208301523382820152517fdb7d26657bad04f5270bef503c2972e950b9fb1d237504a895bdb6e2ee1179289181900360600190a1505050005b3480156103fb57600080fd5b50610404610aae565b005b34801561041257600080fd5b5061041b610ad1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561045557818101518382015260200161043d565b50505050905090810190601f1680156104825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049c57600080fd5b50610404610b5f565b3480156104b157600080fd5b506104c9600160a060020a0360043516602435610b84565b604080519115158252519081900360200190f35b3480156104e957600080fd5b506104f2610bea565b60408051918252519081900360200190f35b34801561051057600080fd5b50610519610bf2565b6040805160ff9092168252519081900360200190f35b34801561053b57600080fd5b506104f2610bf7565b34801561055057600080fd5b5061041b610bfe565b34801561056557600080fd5b50610404600160a060020a0360043516610c35565b34801561058657600080fd5b506104c9600160a060020a0360043581169060243516604435610c7b565b3480156105b057600080fd5b506104f2600160a060020a0360043516610d47565b3480156105d157600080fd5b5061041b610d59565b3480156105e657600080fd5b506104f2610d90565b3480156105fb57600080fd5b50610519610da0565b34801561061057600080fd5b50610619610da9565b60408051600160a060020a039092168252519081900360200190f35b34801561064157600080fd5b506104c9600435610db8565b34801561065957600080fd5b50610519600435610ecc565b34801561067157600080fd5b506104f2610fb4565b34801561068657600080fd5b506104f2600160a060020a0360043581169060243516610fba565b3480156106ad57600080fd5b506104f2610fd7565b3480156106c257600080fd5b506104f2600160a060020a0360043516610fe3565b3480156106e357600080fd5b50610404610ffe565b3480156106f857600080fd5b506104f260043561092a565b34801561071057600080fd5b50610619611024565b34801561072557600080fd5b5061041b611033565b34801561073a57600080fd5b506104c9600160a060020a036004351660243561108e565b34801561075e57600080fd5b506104f26110a4565b34801561077357600080fd5b5061077c6110ae565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156107c45781810151838201526020016107ac565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156108035781810151838201526020016107eb565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561084257818101518382015260200161082a565b50505050905001965050505050505060405180910390f35b34801561086657600080fd5b506104f2611224565b34801561087b57600080fd5b506104f261122a565b34801561089057600080fd5b50610619600435611236565b3480156108a857600080fd5b506104f2600160a060020a036004358116906024351661125e565b3480156108cf57600080fd5b506104c9611289565b3480156108e457600080fd5b506108f9600160a060020a0360043516611292565b6040805192835260208301919091528051918290030190f35b34801561091e57600080fd5b506104c96004356112ab565b60008080808061093986610ecc565b92506516bcc41e9000670de0b6b3a7640000870204915060ff831660648304029190910195945050505050565b6000600160a060020a038316151561097d57600080fd5b600160a060020a0384166000908152600d60205260409020548211156109a257600080fd5b600160a060020a0383166000908152600d6020526040902054828101116109c857600080fd5b600160a060020a0384166000908152600d60205260409020546109eb9083611362565b600160a060020a038086166000908152600d60205260408082209390935590851681522054610a1a9083611374565b600160a060020a038085166000818152600d6020908152604080832086905593891680835291849020548451888152945195019550919390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a3600160a060020a038084166000908152600d6020526040808220549287168252902054018114610aa857fe5b50505050565b600754600160a060020a03163314610ac557600080fd5b600c805460ff19169055565b6011805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b575780601f10610b2c57610100808354040283529160200191610b57565b820191906000526020600020905b815481529060010190602001808311610b3a57829003601f168201915b505050505081565b600754600160a060020a03163314610b7657600080fd5b600754600160a060020a0316ff5b336000818152600f60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b635b9e6ff081565b601281565b600b545b90565b60408051808201909152600681527f5554454d49530000000000000000000000000000000000000000000000000000602082015281565b600754600160a060020a03163314610c4c57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0383166000908152600d60205260408120548211801590610cc65750600160a060020a0384166000908152600f602090815260408083203384529091529020548211155b8015610cd25750600082115b15610d3c57610ce2848484610966565b600160a060020a0384166000908152600f60209081526040808320338452909152902054610d109083611362565b600160a060020a0385166000908152600f60209081526040808320338452909152902055506001610d40565b5060005b9392505050565b600d6020526000908152604090205481565b60408051808201909152600381527f5554530000000000000000000000000000000000000000000000000000000000602082015281565b6b033b2e3c9fd0803ce800000081565b60125460ff1681565b600854600160a060020a031681565b600754600090600160a060020a03163314610dd257600080fd5b600754600160a060020a03166000908152600d6020526040902054821115610df957600080fd5b600b80548390039055600754600160a060020a03166000908152600d6020526040902054610e279083611362565b60078054600160a060020a039081166000908152600d6020908152604091829020949094559154825186815292519116927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5928290030190a2600754604080518481529051600092600160a060020a0316917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a3506001919050565b60008080635b9e6fef194201815b6004811015610fab5760008160048110610ef057fe5b01548211610fa357678ac7230489e8000086118015610f1857506801158e460913d000008611155b15610f435760058160048110610f2a57fe5b602081049091015460ff601f9092166101000a90041692505b6801158e460913d00000861115610f7a5760068160048110610f6157fe5b602081049091015460ff601f9092166101000a90041692505b600481818110610f8657fe5b602081049091015460ff601f9092166101000a9004169350610fab565b600101610eda565b50500192915050565b600a5481565b600f60209081526000928352604080842090915290825290205481565b670de0b6b3a764000081565b600160a060020a03166000908152600d602052604090205490565b600754600160a060020a0316331461101557600080fd5b600c805460ff19166001179055565b600754600160a060020a031681565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b575780601f10610b2c57610100808354040283529160200191610b57565b600061109b338484610966565b50600192915050565b6516bcc41e900081565b6060806060600060608060606000806010805490509550856040519080825280602002602001820160405280156110ef578160200160208202803883390190505b5094508560405190808252806020026020018201604052801561111c578160200160208202803883390190505b50935085604051908082528060200260200182016040528015611149578160200160208202803883390190505b509250600091505b8582101561121657601080548390811061116757fe5b6000918252602090912001548551600160a060020a039091169150819086908490811061119057fe5b600160a060020a0392831660209182029092018101919091529082166000908152600e909152604090205484518590849081106111c957fe5b6020908102909101810191909152600160a060020a0382166000908152600e9091526040902060010154835184908490811061120157fe5b60209081029091010152600190910190611151565b509297919650945092505050565b60095481565b6703782dace9d9000081565b601080548290811061124457fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a039182166000908152600f6020908152604080832093909416825291909152205490565b600c5460ff1681565b600e602052600090815260409020805460019091015482565b600754600090600160a060020a031633146112c557600080fd5b600082116112d257600080fd5b600b805483019055600754600160a060020a03166000908152600d60205260409020546112ff9083611374565b60078054600160a060020a039081166000908152600d602090815260408083209590955592548451878152945192169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001919050565b60008282111561136e57fe5b50900390565b60008282018381108015906113895750828110155b1515610d4057fe5b8154818355818111156113b5576000838152602090206113b59181019083016113ba565b505050565b610bfb91905b808211156113d457600081556001016113c0565b50905600a165627a7a7230582019f572ef89b01cb9ef4994b1e4865b1880c27aa2dfbdbe50c0d8da8e680f333d0029"
}