{
  "address": "0x9cae1356c507df324de90e87cbcbfbce95d9bc33",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MainToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-15\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n\ncontract ERC223Basic is ERC20Basic {\n    function transfer(address to, uint value, bytes data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint indexed value, bytes data);\n}\n\n\n\n/**\n* @title Contract that will work with ERC223 tokens.\n*/\ncontract ERC223Receiver {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title Reference implementation of the ERC223 standard token.\n */\ncontract ERC223Token is ERC223Basic, BasicToken, ERC223Receiver {\n    using SafeMath for uint;\n    using AddressUtils for address;\n\n    /**\n     * @dev Token should not accept tokens\n     */\n    function tokenFallback(address, uint, bytes) public {\n        revert();\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (_to.isContract()) {\n            ERC223Receiver receiver = ERC223Receiver(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        bytes memory empty;\n        return transfer(_to, _value, empty);\n    }\n}\n\n\ncontract FreezableToken is StandardToken {\n    // freezing chains\n    mapping (bytes32 => uint64) internal chains;\n    // freezing amounts for each chain\n    mapping (bytes32 => uint) internal freezings;\n    // total freezing balance per address\n    mapping (address => uint) internal freezingBalance;\n\n    event Freezed(address indexed to, uint64 release, uint amount);\n    event Released(address indexed owner, uint amount);\n\n    /**\n     * @dev Gets the balance of the specified address include freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner) + freezingBalance[_owner];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address without freezing tokens.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n        return super.balanceOf(_owner);\n    }\n\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n        return freezingBalance[_owner];\n    }\n\n    /**\n     * @dev gets freezing count\n     * @param _addr Address of freeze tokens owner.\n     */\n    function freezingCount(address _addr) public view returns (uint count) {\n        uint64 release = chains[toKey(_addr, 0)];\n        while (release != 0) {\n            count++;\n            release = chains[toKey(_addr, release)];\n        }\n    }\n\n    /**\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\n     * @param _addr Address of freeze tokens owner.\n     * @param _index Freezing portion index. It ordered by release date descending.\n     */\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n        for (uint i = 0; i < _index + 1; i++) {\n            _release = chains[toKey(_addr, _release)];\n            if (_release == 0) {\n                return;\n            }\n        }\n        _balance = freezings[toKey(_addr, _release)];\n    }\n\n    /**\n     * @dev freeze your tokens to the specified address.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to freeze.\n     * @param _until Release date, must be in future.\n     */\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        emit Transfer(msg.sender, _to, _amount);\n        emit Freezed(_to, _until, _amount);\n    }\n\n    /**\n     * @dev release first available freezing tokens.\n     */\n    function releaseOnce() public {\n        bytes32 headKey = toKey(msg.sender, 0);\n        uint64 head = chains[headKey];\n        require(head != 0);\n        require(uint64(block.timestamp) > head);\n        bytes32 currentKey = toKey(msg.sender, head);\n\n        uint64 next = chains[currentKey];\n\n        uint amount = freezings[currentKey];\n        delete freezings[currentKey];\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\n        if (next == 0) {\n            delete chains[headKey];\n        } else {\n            chains[headKey] = next;\n            delete chains[currentKey];\n        }\n        emit Released(msg.sender, amount);\n    }\n\n    /**\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\n     * @return how many tokens was released\n     */\n    function releaseAll() public returns (uint tokens) {\n        uint release;\n        uint balance;\n        (release, balance) = getFreezing(msg.sender, 0);\n        while (release != 0 && block.timestamp > release) {\n            releaseOnce();\n            tokens += balance;\n            (release, balance) = getFreezing(msg.sender, 0);\n        }\n    }\n\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n        // WISH masc to increase entropy\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n        assembly {\n            result := or(result, mul(_addr, 0x10000000000000000))\n            result := or(result, _release)\n        }\n    }\n\n    function freeze(address _to, uint64 _until) internal {\n        require(_until > block.timestamp);\n        bytes32 key = toKey(_to, _until);\n        bytes32 parentKey = toKey(_to, uint64(0));\n        uint64 next = chains[parentKey];\n\n        if (next == 0) {\n            chains[parentKey] = _until;\n            return;\n        }\n\n        bytes32 nextKey = toKey(_to, next);\n        uint parent;\n\n        while (next != 0 && _until > next) {\n            parent = next;\n            parentKey = nextKey;\n\n            next = chains[nextKey];\n            nextKey = toKey(_to, next);\n        }\n\n        if (_until == next) {\n            return;\n        }\n\n        if (next != 0) {\n            chains[key] = next;\n        }\n\n        chains[parentKey] = _until;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\ncontract ERC223MintableToken is MintableToken, ERC223Token {\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n        hasMintPermission\n        canMint\n        public\n        returns (bool)\n    {\n        bytes memory empty;\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        if (_to.isContract()) {\n            ERC223Receiver receiver = ERC223Receiver(_to);\n            receiver.tokenFallback(address(this), _amount, empty);\n        }\n        emit Mint(_to, _amount);\n        emit Transfer(msg.sender, _to, _amount, empty);\n        return true;\n    }\n}\n\n\ncontract FreezableMintableToken is FreezableToken, MintableToken {\n    /**\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\n     *      Be careful, gas usage is not deterministic,\n     *      and depends on how many freezes _to address already has.\n     * @param _to Address to which token will be freeze.\n     * @param _amount Amount of token to mint and freeze.\n     * @param _until Release date, must be in future.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n\n        bytes32 currentKey = toKey(_to, _until);\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freeze(_to, _until);\n        emit Mint(_to, _amount);\n        emit Freezed(_to, _until, _amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n}\n\n\n\ncontract Consts {\n    uint public constant TOKEN_DECIMALS = 18;\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 18;\n    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n    string public constant TOKEN_NAME = \"Squirrex\";\n    string public constant TOKEN_SYMBOL = \"SQRX\";\n    bool public constant PAUSED = false;\n    address public constant TARGET_USER = 0xb3938B5A09386a941C52E70C9B575C7b236805b7;\n    \n    bool public constant CONTINUE_MINTING = true;\n}\n\n\n\n\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\n    \n    , ERC223MintableToken\n    \n{\n    \n    event Initialized();\n    bool public initialized = false;\n\n    constructor() public {\n        init();\n        transferOwnership(TARGET_USER);\n    }\n    \n\n    function name() public pure returns (string _name) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() public pure returns (string _symbol) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() public pure returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\n        require(!paused);\n        return super.transfer(_to, _value);\n    }\n\n    \n    function init() private {\n        require(!initialized);\n        initialized = true;\n\n        if (PAUSED) {\n            pause();\n        }\n\n        \n        address[1] memory addresses = [address(0xb3938b5a09386a941c52e70c9b575c7b236805b7)];\n        uint[1] memory amounts = [uint(1000000000000000000000000000)];\n        uint64[1] memory freezes = [uint64(0)];\n\n        for (uint i = 0; i < addresses.length; i++) {\n            if (freezes[i] == 0) {\n                mint(addresses[i], amounts[i]);\n            } else {\n                mintAndFreeze(addresses[i], amounts[i], freezes[i]);\n            }\n        }\n        \n\n        if (!CONTINUE_MINTING) {\n            finishMinting();\n        }\n\n        emit Initialized();\n    }\n    \n}",
  "bytecode": "60806040526006805460a060020a62ffffff02191690553480156200002357600080fd5b5060068054600160a060020a031916331790556200004964010000000062000077810204565b6200007173b3938b5a09386a941c52e70c9b575c7b236805b764010000000062000227810204565b6200098e565b620000816200096f565b6200008b6200096f565b620000956200096f565b600654600090760100000000000000000000000000000000000000000000900460ff1615620000c357600080fd5b6006805460b060020a60ff0219167601000000000000000000000000000000000000000000001790555050604080516020818101835273b3938b5a09386a941c52e70c9b575c7b236805b78252825180820184526b033b2e3c9fd0803ce80000008152835191820190935260008082529194509192505b6001811015620001f8578181600181106200015157fe5b60200201516001604060020a03161515620001a4576200019d8482600181106200017757fe5b60200201518483600181106200018957fe5b602002015164010000000062000256810204565b50620001ef565b620001ed848260018110620001b557fe5b6020020151848360018110620001c757fe5b6020020151848460018110620001d957fe5b60200201516401000000006200050b810204565b505b6001016200013a565b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050565b600654600160a060020a031633146200023f57600080fd5b6200025381640100000000620006ef810204565b50565b6006546000906060908290600160a060020a031633146200027657600080fd5b60065474010000000000000000000000000000000000000000900460ff16156200029f57600080fd5b600154620002bc9085640100000000620018dc6200076182021704565b600155600160a060020a038516600090815260208190526040902054620002f29085640100000000620018dc6200076182021704565b600160a060020a038616600081815260208190526040902091909155620003279064010000000062001c156200077582021704565b156200042157506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523060048201818152602483018690526060604484019081528451606485015284518894600160a060020a0386169463c0ee0b8a9490938a93899360840190602085019080838360005b83811015620003b75781810151838201526020016200039d565b50505050905090810190601f168015620003e55780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156200040757600080fd5b505af11580156200041c573d6000803e3d6000fd5b505050505b604080518581529051600160a060020a0387169160008051602062002783833981519152919081900360200190a28385600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16856040518080602001828103825283818151815260200191508051906020019080838360005b83811015620004c5578181015183820152602001620004ab565b50505050905090810190601f168015620004f35780820380516001836020036101000a031916815260200191505b509250505060405180910390a4506001949350505050565b6006546000908190600160a060020a031633146200052857600080fd5b60065474010000000000000000000000000000000000000000900460ff16156200055157600080fd5b6001546200056e9085640100000000620018dc6200076182021704565b6001556200058f856001604060020a0385166401000000006200077d810204565b600081815260046020526040902054909150620005bb9085640100000000620018dc6200076182021704565b600082815260046020908152604080832093909355600160a060020a0388168252600590522054620005fc9085640100000000620018dc6200076182021704565b600160a060020a0386166000908152600560205260409020556200062a8584640100000000620007b1810204565b604080518581529051600160a060020a0387169160008051602062002783833981519152919081900360200190a2604080516001604060020a0385168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a0387169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b600160a060020a03811615156200070557600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360068054600160a060020a031916600160a060020a0392909216919091179055565b818101828110156200076f57fe5b92915050565b6000903b1190565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b600080808080426001604060020a03871611620007cd57600080fd5b620007eb876001604060020a0388166401000000006200077d810204565b9450620008038760006401000000006200077d810204565b6000818152600360205260409020549094506001604060020a031692508215156200085557600084815260036020526040902080546001604060020a0319166001604060020a03881617905562000966565b62000873876001604060020a0385166401000000006200077d810204565b91505b6001604060020a03831615801590620008a05750826001604060020a0316866001604060020a0316115b15620008e557506000818152600360205260409020549092506001604060020a0390811691839116620008dd87846401000000006200077d810204565b915062000876565b826001604060020a0316866001604060020a03161415620009065762000966565b6001604060020a038316156200093e57600085815260036020526040902080546001604060020a0319166001604060020a0385161790555b600084815260036020526040902080546001604060020a0319166001604060020a0388161790555b50505050505050565b6020604051908101604052806001906020820280388339509192915050565b611de5806200099e6000396000f3006080604052600436106101ec5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416623fd35a81146101f157806302d6f7301461021a57806305d2035b1461026257806306fdde0314610277578063095ea7b3146103015780630bb2cd6b14610325578063158ef93e1461035657806317a950ac1461036b57806318160ddd1461039e57806318821400146103b357806323b872dd146103c85780632a905318146103f2578063313ce567146104075780633be1e952146104325780633f4ba83a1461046557806340c10f191461047a57806342966c681461049e57806356780085146104b65780635b7f415c146104cb5780635be7fde8146104e05780635c975abb146104f5578063661884631461050a57806366a92cda1461052e57806370a0823114610543578063715018a614610564578063726a431a146105795780637d64bcb4146105aa5780638456cb59146105bf5780638da5cb5b146105d457806395d89b41146105e9578063a9059cbb146105fe578063a9aad58c14610622578063be45fd6214610637578063c0ee0b8a146106a0578063ca63b5b814610709578063cf3b19671461072a578063d73dd6231461073f578063d8aeedf514610763578063dd62ed3e14610784578063f2fde38b146107ab575b600080fd5b3480156101fd57600080fd5b506102066107cc565b604080519115158252519081900360200190f35b34801561022657600080fd5b5061023e600160a060020a03600435166024356107d1565b6040805167ffffffffffffffff909316835260208301919091528051918290030190f35b34801561026e57600080fd5b5061020661085e565b34801561028357600080fd5b5061028c61086e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c65781810151838201526020016102ae565b50505050905090810190601f1680156102f35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030d57600080fd5b50610206600160a060020a03600435166024356108a5565b34801561033157600080fd5b50610206600160a060020a036004351660243567ffffffffffffffff6044351661090b565b34801561036257600080fd5b50610206610aa9565b34801561037757600080fd5b5061038c600160a060020a0360043516610acc565b60408051918252519081900360200190f35b3480156103aa57600080fd5b5061038c610add565b3480156103bf57600080fd5b5061028c610ae3565b3480156103d457600080fd5b50610206600160a060020a0360043581169060243516604435610b1a565b3480156103fe57600080fd5b5061028c610b47565b34801561041357600080fd5b5061041c610b7e565b6040805160ff9092168252519081900360200190f35b34801561043e57600080fd5b50610463600160a060020a036004351660243567ffffffffffffffff60443516610b83565b005b34801561047157600080fd5b50610463610cf7565b34801561048657600080fd5b50610206600160a060020a0360043516602435610d70565b3480156104aa57600080fd5b50610463600435610ff6565b3480156104c257600080fd5b5061038c611003565b3480156104d757600080fd5b5061038c61100f565b3480156104ec57600080fd5b5061038c611014565b34801561050157600080fd5b50610206611079565b34801561051657600080fd5b50610206600160a060020a0360043516602435611089565b34801561053a57600080fd5b50610463611179565b34801561054f57600080fd5b5061038c600160a060020a036004351661131c565b34801561057057600080fd5b50610463611345565b34801561058557600080fd5b5061058e6113b3565b60408051600160a060020a039092168252519081900360200190f35b3480156105b657600080fd5b506102066113cb565b3480156105cb57600080fd5b5061046361144f565b3480156105e057600080fd5b5061058e6114cd565b3480156105f557600080fd5b5061028c6114dc565b34801561060a57600080fd5b50610206600160a060020a0360043516602435611513565b34801561062e57600080fd5b5061020661153e565b34801561064357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610206948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506115439650505050505050565b3480156106ac57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610463948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506101ec9650505050505050565b34801561071557600080fd5b5061038c600160a060020a0360043516611723565b34801561073657600080fd5b5061041c61100f565b34801561074b57600080fd5b50610206600160a060020a03600435166024356117a9565b34801561076f57600080fd5b5061038c600160a060020a0360043516611842565b34801561079057600080fd5b5061038c600160a060020a036004358116906024351661185d565b3480156107b757600080fd5b50610463600160a060020a0360043516611888565b600181565b600080805b8360010181101561082a57600360006107f9878667ffffffffffffffff166118a8565b815260208101919091526040016000205467ffffffffffffffff16925082151561082257610856565b6001016107d6565b60046000610842878667ffffffffffffffff166118a8565b815260208101919091526040016000205491505b509250929050565b60065460a060020a900460ff1681565b60408051808201909152600881527f5371756972726578000000000000000000000000000000000000000000000000602082015290565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6006546000908190600160a060020a0316331461092757600080fd5b60065460a060020a900460ff161561093e57600080fd5b600154610951908563ffffffff6118dc16565b6001556109688567ffffffffffffffff85166118a8565b60008181526004602052604090205490915061098a908563ffffffff6118dc16565b600082815260046020908152604080832093909355600160a060020a03881682526005905220546109c1908563ffffffff6118dc16565b600160a060020a0386166000908152600560205260409020556109e485846118e9565b604080518581529051600160a060020a038716917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a26040805167ffffffffffffffff85168152602081018690528151600160a060020a038816927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a2604080518581529051600160a060020a038716913391600080516020611d9a8339815191529181900360200190a3506001949350505050565b600654760100000000000000000000000000000000000000000000900460ff1681565b6000610ad782611a83565b92915050565b60015490565b60408051808201909152600881527f5371756972726578000000000000000000000000000000000000000000000000602082015281565b60065460009060a860020a900460ff1615610b3457600080fd5b610b3f848484611a9e565b949350505050565b60408051808201909152600481527f5351525800000000000000000000000000000000000000000000000000000000602082015281565b601290565b6000600160a060020a0384161515610b9a57600080fd5b33600090815260208190526040902054831115610bb657600080fd5b33600090815260208190526040902054610bd6908463ffffffff611c0316565b33600090815260208190526040902055610bfa8467ffffffffffffffff84166118a8565b600081815260046020526040902054909150610c1c908463ffffffff6118dc16565b600082815260046020908152604080832093909355600160a060020a0387168252600590522054610c53908463ffffffff6118dc16565b600160a060020a038516600090815260056020526040902055610c7684836118e9565b604080518481529051600160a060020a038616913391600080516020611d9a8339815191529181900360200190a36040805167ffffffffffffffff84168152602081018590528151600160a060020a038716927f2ecd071e4d10ed2221b04636ed0724cce66a873aa98c1a31b4bb0e6846d3aab4928290030190a250505050565b600654600160a060020a03163314610d0e57600080fd5b60065460a860020a900460ff161515610d2657600080fd5b6006805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6006546000906060908290600160a060020a03163314610d8f57600080fd5b60065460a060020a900460ff1615610da657600080fd5b600154610db9908563ffffffff6118dc16565b600155600160a060020a038516600090815260208190526040902054610de5908563ffffffff6118dc16565b600160a060020a038616600081815260208190526040902091909155610e0a90611c15565b15610efe57506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523060048201818152602483018690526060604484019081528451606485015284518894600160a060020a0386169463c0ee0b8a9490938a93899360840190602085019080838360005b83811015610e97578181015183820152602001610e7f565b50505050905090810190601f168015610ec45780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050505b604080518581529051600160a060020a038716917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a28385600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16856040518080602001828103825283818151815260200191508051906020019080838360005b83811015610fb1578181015183820152602001610f99565b50505050905090810190601f168015610fde5780820380516001836020036101000a031916815260200191505b509250505060405180910390a4506001949350505050565b6110003382611c1d565b50565b670de0b6b3a764000081565b601281565b60008060006110243360006107d1565b67ffffffffffffffff909116925090505b811580159061104357508142115b1561107457611050611179565b9182019161105f3360006107d1565b67ffffffffffffffff90911692509050611035565b505090565b60065460a860020a900460ff1681565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156110de57336000908152600260209081526040808320600160a060020a0388168452909152812055611113565b6110ee818463ffffffff611c0316565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080600080600061118c3360006118a8565b60008181526003602052604090205490955067ffffffffffffffff1693508315156111b657600080fd5b8367ffffffffffffffff164267ffffffffffffffff161115156111d857600080fd5b6111ec338567ffffffffffffffff166118a8565b600081815260036020908152604080832054600483528184208054908590553385529284905292205492955067ffffffffffffffff90911693509150611238908263ffffffff6118dc16565b3360009081526020818152604080832093909355600590522054611262908263ffffffff611c0316565b3360009081526005602052604090205567ffffffffffffffff821615156112a5576000858152600360205260409020805467ffffffffffffffff191690556112df565b600085815260036020526040808220805467ffffffffffffffff861667ffffffffffffffff19918216179091558583529120805490911690555b60408051828152905133917fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e919081900360200190a25050505050565b600160a060020a03811660009081526005602052604081205461133e83611a83565b0192915050565b600654600160a060020a0316331461135c57600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b73b3938b5a09386a941c52e70c9b575c7b236805b781565b600654600090600160a060020a031633146113e557600080fd5b60065460a060020a900460ff16156113fc57600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600654600160a060020a0316331461146657600080fd5b60065460a860020a900460ff161561147d57600080fd5b6006805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600654600160a060020a031681565b60408051808201909152600481527f5351525800000000000000000000000000000000000000000000000000000000602082015290565b60065460009060a860020a900460ff161561152d57600080fd5b6115378383611d0c565b9392505050565b600081565b336000908152602081905260408120548190611565908563ffffffff611c0316565b3360009081526020819052604080822092909255600160a060020a03871681522054611597908563ffffffff6118dc16565b600160a060020a0386166000818152602081905260409020919091556115bc90611c15565b156116b057506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a9360840190602085019080838360005b83811015611649578181015183820152602001611631565b50505050905090810190601f1680156116765780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b505050505b8385600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405180806020018281038252838181518152602001915080519060200190808383600083811015610fb1578181015183820152602001610f99565b600080600360006117358560006118a8565b815260208101919091526040016000205467ffffffffffffffff1690505b67ffffffffffffffff8116156117a357600190910190600360006117818567ffffffffffffffff85166118a8565b815260208101919091526040016000205467ffffffffffffffff169050611753565b50919050565b336000908152600260209081526040808320600160a060020a03861684529091528120546117dd908363ffffffff6118dc16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600654600160a060020a0316331461189f57600080fd5b61100081611d1b565b6801000000000000000091909102177f57495348000000000000000000000000000000000000000000000000000000001790565b81810182811015610ad757fe5b6000808080804267ffffffffffffffff87161161190557600080fd5b611919878767ffffffffffffffff166118a8565b94506119268760006118a8565b60008181526003602052604090205490945067ffffffffffffffff169250821515611979576000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff8816179055611a7a565b61198d878467ffffffffffffffff166118a8565b91505b67ffffffffffffffff8316158015906119bc57508267ffffffffffffffff168667ffffffffffffffff16115b156119f5575060008181526003602052604090205490925067ffffffffffffffff908116918391166119ee87846118a8565b9150611990565b8267ffffffffffffffff168667ffffffffffffffff161415611a1657611a7a565b67ffffffffffffffff831615611a50576000858152600360205260409020805467ffffffffffffffff191667ffffffffffffffff85161790555b6000848152600360205260409020805467ffffffffffffffff191667ffffffffffffffff88161790555b50505050505050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a0383161515611ab557600080fd5b600160a060020a038416600090815260208190526040902054821115611ada57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115611b0a57600080fd5b600160a060020a038416600090815260208190526040902054611b33908363ffffffff611c0316565b600160a060020a038086166000908152602081905260408082209390935590851681522054611b68908363ffffffff6118dc16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611baa908363ffffffff611c0316565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611d9a833981519152929181900390910190a35060019392505050565b600082821115611c0f57fe5b50900390565b6000903b1190565b600160a060020a038216600090815260208190526040902054811115611c4257600080fd5b600160a060020a038216600090815260208190526040902054611c6b908263ffffffff611c0316565b600160a060020a038316600090815260208190526040902055600154611c97908263ffffffff611c0316565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611d9a8339815191529181900360200190a35050565b60006060610b3f848483611543565b600160a060020a0381161515611d3057600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820420947b604e95caa20cde4a43bebaec7d26d74152b083b11f4a56b70c6519e1c00290f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",
  "constructorArguments": "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"
}