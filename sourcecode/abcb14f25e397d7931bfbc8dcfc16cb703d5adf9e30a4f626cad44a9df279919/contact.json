{
  "address": "0x16af5bfb4ae7e475b9adc3bf5cb2f1e6a50d7940",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fanship",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.23;\n\n// SafeMath Library By OpenZepplin\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract Fanship is StandardToken\n{\n  string public name = \"Fanship\"; \n  string public symbol = \"XFS\";\n  uint public decimals = 8;\n  uint public INITIAL_SUPPLY = 10000000000 * (10 ** decimals);\n\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[0xf6928f41c0d15631C0F2998747548a3eb126F0b6] = INITIAL_SUPPLY;\n    emit Transfer(0, 0xf6928f41c0d15631C0F2998747548a3eb126F0b6, INITIAL_SUPPLY);\n  }\n}",
  "bytecode": "60c0604052600760808190527f46616e736869700000000000000000000000000000000000000000000000000060a090815261003e9160039190610128565b506040805180820190915260038082527f5846530000000000000000000000000000000000000000000000000000000000602090920191825261008391600491610128565b506008600555670de0b6b3a76400006006553480156100a157600080fd5b50600654600181905573f6928f41c0d15631c0f2998747548a3eb126f0b6600081815260208181527f8f89ea1a1580cd9338e28d0b4687b6b23f5831fb153d04e485e7a59f06fcc5cf8490556040805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101c3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016957805160ff1916838001178555610196565b82800160010185558215610196579182015b8281111561019657825182559160200191906001019061017b565b506101a29291506101a6565b5090565b6101c091905b808211156101a257600081556001016101ac565b90565b6108d4806101d26000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a75780632ff2e9dc146101d1578063313ce567146101e657806366188463146101fb57806370a082311461021f57806395d89b4114610240578063a9059cbb14610255578063d73dd62314610279578063dd62ed3e1461029d575b600080fd5b3480156100ca57600080fd5b506100d36102c4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610352565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103bc565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103c2565b3480156101dd57600080fd5b50610195610542565b3480156101f257600080fd5b50610195610548565b34801561020757600080fd5b5061016c600160a060020a036004351660243561054e565b34801561022b57600080fd5b50610195600160a060020a0360043516610647565b34801561024c57600080fd5b506100d3610662565b34801561026157600080fd5b5061016c600160a060020a03600435166024356106bd565b34801561028557600080fd5b5061016c600160a060020a03600435166024356107b6565b3480156102a957600080fd5b50610195600160a060020a0360043581169060243516610858565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015490565b6000600160a060020a03831615156103d957600080fd5b600160a060020a0384166000908152602081905260409020548211156103fe57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561043157600080fd5b600160a060020a03841660009081526020819052604090205461045a908363ffffffff61088316565b600160a060020a03808616600090815260208190526040808220939093559085168152205461048f908363ffffffff61089516565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546104d5908363ffffffff61088316565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60065481565b60055481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105ab57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105e2565b6105bb818463ffffffff61088316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034a5780601f1061031f5761010080835404028352916020019161034a565b6000600160a060020a03831615156106d457600080fd5b600160a060020a0333166000908152602081905260409020548211156106f957600080fd5b600160a060020a033316600090815260208190526040902054610722908363ffffffff61088316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610757908363ffffffff61089516565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546107ee908363ffffffff61089516565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561088f57fe5b50900390565b818101828110156108a257fe5b929150505600a165627a7a7230582068db292523dec6169dbba110434c3120a6c68d0fb701653643e2b84401bdbb780029"
}