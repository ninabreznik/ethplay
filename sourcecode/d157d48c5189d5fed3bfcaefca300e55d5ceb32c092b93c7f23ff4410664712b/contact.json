{
  "address": "0x3cd9024168e6240b4f18b466d9bea9f8efc66004",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AirDropContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-02\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract Erc20Token {\n    function balanceOf(address _owner) constant public returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract AirDropContract is Ownable {\n\n    using SafeMath for uint256;\n\n    Erc20Token public tokenRewardContract;\n\n    uint256 public totalAirDropToken;\n\n    address public collectorAddress;\n\n    mapping(address => uint256) public balanceOf;\n\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event Additional(uint amount);\n    event Burn(uint amount);\n    event CollectAirDropTokenBack(address collectorAddress,uint256 airDropTokenNum);\n\n    /**\n     * Constructor function\n     */\n    constructor(\n        address _tokenRewardContract,\n        address _collectorAddress\n    ) public {\n        totalAirDropToken = 2e7;\n        tokenRewardContract = Erc20Token(_tokenRewardContract);\n        collectorAddress = _collectorAddress;\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function() payable public {\n        require(totalAirDropToken > 0);\n        require(balanceOf[msg.sender] == 0);\n        uint256 amount = getCurrentCandyAmount();\n        require(amount > 0);\n\n        totalAirDropToken = totalAirDropToken.sub(amount);\n        balanceOf[msg.sender] = amount;\n\n        tokenRewardContract.transfer(msg.sender, amount * 1e18);\n        emit FundTransfer(msg.sender, amount, true);\n    }\n\n    function getCurrentCandyAmount() private view returns (uint256 amount){\n        if (totalAirDropToken >= 10e6) {\n            return 200;\n        } else if (totalAirDropToken >= 2.5e6) {\n            return 150;\n        } else if (totalAirDropToken >= 0.5e6) {\n            return 100;\n        } else if (totalAirDropToken >= 50) {\n            return 50;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     *  Add airdrop tokens\n     */\n    function additional(uint256 amount) public onlyOwner {\n        require(amount > 0);\n\n        totalAirDropToken = totalAirDropToken.add(amount);\n        emit Additional(amount);\n    }\n\n    /**\n    *  burn airdrop tokens\n    */\n    function burn(uint256 amount) public onlyOwner {\n        require(amount > 0);\n\n        totalAirDropToken = totalAirDropToken.sub(amount);\n        emit Burn(amount);\n    }\n\n\n    /**\n     *  The owner of the contract modifies the recovery address of the token\n     */\n    function modifyCollectorAddress(address newCollectorAddress) public onlyOwner returns (bool) {\n        collectorAddress = newCollectorAddress;\n    }\n\n    /**\n     *  Recovery of remaining tokens\n     */\n    function collectAirDropTokenBack(uint256 airDropTokenNum) public onlyOwner {\n        require(totalAirDropToken > 0);\n        require(collectorAddress != 0x0);\n\n        if (airDropTokenNum > 0) {\n            tokenRewardContract.transfer(collectorAddress, airDropTokenNum * 1e18);\n        } else {\n            tokenRewardContract.transfer(collectorAddress, totalAirDropToken * 1e18);\n            totalAirDropToken = 0;\n        }\n        emit CollectAirDropTokenBack(collectorAddress, airDropTokenNum);\n    }\n\n    /**\n     *  Recovery donated ether\n     */\n    function collectEtherBack() public onlyOwner {\n        uint256 b = address(this).balance;\n        require(b > 0);\n        require(collectorAddress != 0x0);\n\n        collectorAddress.transfer(b);\n    }\n\n    /**\n     *  Get the tokenAddress token balance of someone\n     */\n    function getTokenBalance(address tokenAddress, address who) view public returns (uint){\n        Erc20Token t = Erc20Token(tokenAddress);\n        return t.balanceOf(who);\n    }\n\n    /**\n     *  Recycle other ERC20 tokens\n     */\n    function collectOtherTokens(address tokenContract) onlyOwner public returns (bool) {\n        Erc20Token t = Erc20Token(tokenContract);\n\n        uint256 b = t.balanceOf(address(this));\n        return t.transfer(collectorAddress, b);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610a6883398101604052805160209091015160008054600160a060020a031990811633179091556301312d0060025560018054600160a060020a03948516908316179055600380549390921692169190911790556109ee8061007a6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166319583b0581146101f957806333caaa431461022e57806342966c681461025f57806364e2ec50146102795780636e56dce51461029a57806370a08231146102af5780638da5cb5b146102e2578063c489744b146102f7578063c973c2e31461031e578063dcaf391e14610333578063e2edfc2014610348578063f2fde38b14610360578063fea7bcfb14610381575b6000806002541115156100d657600080fd5b33600090815260046020526040902054156100f057600080fd5b6100f8610399565b90506000811161010757600080fd5b60025461011a908263ffffffff6103f216565b600255336000818152600460208181526040808420869055600154815160e060020a63a9059cbb02815293840195909552670de0b6b3a76400008602602484015251600160a060020a039094169363a9059cbb936044808501948390030190829087803b15801561018a57600080fd5b505af115801561019e573d6000803e3d6000fd5b505050506040513d60208110156101b457600080fd5b5050604080513381526020810183905260018183015290517fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf69181900360600190a150005b34801561020557600080fd5b5061021a600160a060020a0360043516610404565b604080519115158252519081900360200190f35b34801561023a57600080fd5b5061024361044d565b60408051600160a060020a039092168252519081900360200190f35b34801561026b57600080fd5b5061027760043561045c565b005b34801561028557600080fd5b5061021a600160a060020a03600435166104cc565b3480156102a657600080fd5b50610277610608565b3480156102bb57600080fd5b506102d0600160a060020a0360043516610685565b60408051918252519081900360200190f35b3480156102ee57600080fd5b50610243610697565b34801561030357600080fd5b506102d0600160a060020a03600435811690602435166106a6565b34801561032a57600080fd5b50610243610720565b34801561033f57600080fd5b506102d061072f565b34801561035457600080fd5b50610277600435610735565b34801561036c57600080fd5b50610277600160a060020a03600435166108f6565b34801561038d57600080fd5b5061027760043561093c565b6000629896806002541015156103b1575060c86103ef565b600254622625a0116103c5575060966103ef565b6002546207a120116103d9575060646103ef565b6002546032116103eb575060326103ef565b5060005b90565b6000828211156103fe57fe5b50900390565b60008054600160a060020a0316331461041c57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915590565b600154600160a060020a031681565b600054600160a060020a0316331461047357600080fd5b6000811161048057600080fd5b600254610493908263ffffffff6103f216565b6002556040805182815290517fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9181900360200190a150565b6000805481908190600160a060020a031633146104e857600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b50516003546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b505050506040513d60208110156105fe57600080fd5b5051949350505050565b60008054600160a060020a0316331461062057600080fd5b5030316000811161063057600080fd5b600354600160a060020a0316151561064757600080fd5b600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610681573d6000803e3d6000fd5b5050565b60046020526000908152604090205481565b600054600160a060020a031681565b60008083905080600160a060020a03166370a08231846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156105d457600080fd5b600354600160a060020a031681565b60025481565b600054600160a060020a0316331461074c57600080fd5b60025460001061075b57600080fd5b600354600160a060020a0316151561077257600080fd5b6000811115610812576001546003546040805160e060020a63a9059cbb028152600160a060020a039283166004820152670de0b6b3a7640000850260248201529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b505050506040513d602081101561080a57600080fd5b506108ac9050565b6001546003546002546040805160e060020a63a9059cbb028152600160a060020a039384166004820152670de0b6b3a7640000909202602483015251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561087a57600080fd5b505af115801561088e573d6000803e3d6000fd5b505050506040513d60208110156108a457600080fd5b505060006002555b60035460408051600160a060020a0390921682526020820183905280517f5bb2088db384b9cb55b46f8d45bfc9bd6e9ea7c868e8ec19e1228866b9b44dc49281900390910190a150565b600054600160a060020a0316331461090d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461095357600080fd5b6000811161096057600080fd5b600254610973908263ffffffff6109ac16565b6002556040805182815290517f964b22b433d65756b36336984502590cccf56c5721696fa141842ea2058d0f0e9181900360200190a150565b6000828201838110156109bb57fe5b93925050505600a165627a7a72305820b8e9c885dbec7876474abe98f18601adf2456174746e612bc96913417750742d0029000000000000000000000000420a43153da24b9e2aedcec2b8158a8653a3317e0000000000000000000000004bf7cfdb499f77688ae96914a1207ad3c2e973f9",
  "constructorArguments": "000000000000000000000000420a43153da24b9e2aedcec2b8158a8653a3317e0000000000000000000000004bf7cfdb499f77688ae96914a1207ad3c2e973f9"
}