{
  "address": "0xeeb69fca351cfd49a8b977b28868d7e6edb9cd02",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ApolloSeptemToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public{\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _who The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _who) public constant returns (uint256 balance) {\n    return balances[_who];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    public\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    public\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n\n/**\n * @title ApolloSeptemToken\n * @dev ApolloSeptem ERC20 Token with a fixed supply, no posibility to mint token in the future.\n * It is meant to be used in ApolloSeptem crowdsale + in Apollo Platform.\n */\ncontract ApolloSeptemToken is StandardToken, Ownable {\n\n    string public constant name = \"ApolloSeptem\";\n    string public constant symbol = \"APO\";\n    uint8 public constant decimals = 18; \n\n\tfunction ApolloSeptemToken() public {\n\t\ttotalSupply = 300 * 10**6 * 10**18;   // 100% \t=> 300.000.000 APO\n\t\t\t\t\t\t\t\t\t\t\t  //  60% \t=> 180.000.000 APO presale + ICO \n\t\t\t\t\t\t\t\t\t\t\t  //  20%  \t=>  60.000.000 APO fuel for platform\n\t\t\t\t\t\t\t\t\t\t\t  //  15%  \t=>  45.000.000 APO team & advisors\n\t\t\t\t\t\t\t\t\t\t\t  // 4.5%   =>  13.500.000 APO donations\n\t\t\t\t\t\t\t\t\t\t\t  // 0.5%   =>   1.500.000 APO bounty & giveaway\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tbalances[owner] = totalSupply; // put all the tokens on the owner address\n\t}\n\n    function getTotalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03338116600160a060020a031990921691909117918290556af8277896582678ac000000600081815592909116825260016020526040909120556108f7806100636000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b9578063313ce567146101e1578063661884631461020a57806370a082311461022c5780638da5cb5b1461024b57806395d89b411461027a578063a9059cbb1461028d578063c4e41b22146102af578063d73dd623146102c2578063dd62ed3e146102e4578063f2fde38b14610309575b600080fd5b34156100df57600080fd5b6100e761032a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a0360043516602435610361565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a76103cd565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a03600435811690602435166044356103d3565b34156101ec57600080fd5b6101f46104fd565b60405160ff909116815260200160405180910390f35b341561021557600080fd5b610180600160a060020a0360043516602435610502565b341561023757600080fd5b6101a7600160a060020a03600435166105fc565b341561025657600080fd5b61025e610617565b604051600160a060020a03909116815260200160405180910390f35b341561028557600080fd5b6100e7610626565b341561029857600080fd5b610180600160a060020a036004351660243561065d565b34156102ba57600080fd5b6101a7610733565b34156102cd57600080fd5b610180600160a060020a0360043516602435610739565b34156102ef57600080fd5b6101a7600160a060020a03600435811690602435166107dd565b341561031457600080fd5b610328600160a060020a0360043516610808565b005b60408051908101604052600c81527f41706f6c6c6f53657074656d0000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600080600160a060020a03841615156103eb57600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610431908463ffffffff6108a316565b600160a060020a038087166000908152600160205260408082209390935590861681522054610466908463ffffffff6108b516565b600160a060020a03851660009081526001602052604090205561048f818463ffffffff6108a316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561055f57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610596565b61056f818463ffffffff6108a316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600381527f41504f0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561067457600080fd5b600160a060020a03331660009081526001602052604090205461069d908363ffffffff6108a316565b600160a060020a0333811660009081526001602052604080822093909355908516815220546106d2908363ffffffff6108b516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005490565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610771908363ffffffff6108b516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461082357600080fd5b600160a060020a038116151561083857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156108af57fe5b50900390565b6000828201838110156108c457fe5b93925050505600a165627a7a72305820181ca3b45a8184b7331eeeb7a442f434b5a44982ad9e8ecb540f1c01fd24a2560029"
}