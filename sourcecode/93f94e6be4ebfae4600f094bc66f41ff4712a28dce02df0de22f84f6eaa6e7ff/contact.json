{
  "address": "0xc00b89fc3a7ee7043629d8f9a79abfef55634960",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UnicornCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-31\n*/\n\npragma solidity ^0.4.19;\n\ncontract SafeMath {\n\nfunction safeAdd(uint256 x, uint256 y) internal returns(uint256) {\nuint256 z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n      assert(x >= y);\n      uint256 z = x - y;\n      return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n      uint256 z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is ERC20 {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n      if (balances[msg.sender] >= _value && _value > 0) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract UnicornCoin is StandardToken, SafeMath {\n\n    // metadata\n    uint256 public totalSupply;\n    string public constant name = \"Unicorn Coin\";\n    string public constant symbol = \"UCC\";\n    uint256 public constant decimals = 18;\n    string public version = \"1.0\";\n    \n    /* 1ETH = 500 UCC */\n    uint256 public constant rate= 500;\n    address public owner;\n    uint256 public totalEth;\n    \n    function UnicornCoin(){\n        balances[msg.sender] = 30000000000000000000000000;\n        totalSupply = 30000000000000000000000000;\n        owner = msg.sender;\n    }\n    \n    function () payable {\n        sendTokens();\n    }\n    \n    function sendTokens() payable {\n        require(msg.value > 0);\n        totalEth = safeAdd(totalEth, msg.value);\n        uint256 tokens = safeMult(msg.value, rate);\n        \n        if (balances[owner] < tokens) {\n            return;\n        }\n\n        balances[owner] = safeSubtract(balances[owner], tokens);\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n\n        Transfer(owner, msg.sender, tokens); \n\n        owner.transfer(msg.value);    \n        \n    }\n}",
  "bytecode": "60606040526040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506004908051906020019061004f929190610102565b50341561005b57600080fd5b6a18d0bf423c03d8de000000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a18d0bf423c03d8de00000060038190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101a7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014357805160ff1916838001178555610171565b82800160010185558215610171579182015b82811115610170578251825591602001919060010190610155565b5b50905061017e9190610182565b5090565b6101a491905b808211156101a0576000816000905550600101610188565b5090565b90565b610fef806101b66000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100da578063095ea7b31461016857806318160ddd146101c257806323b872dd146101eb5780632c4e722e14610264578063313ce5671461028d5780633c3c9c23146102b657806354fd4d50146102df57806370a082311461036d5780638da5cb5b146103ba57806395d89b411461040f578063a9059cbb1461049d578063dd62ed3e146104f7578063e47112bd14610563575b6100d861056d565b005b34156100e557600080fd5b6100ed610854565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012d578082015181840152602081019050610112565b50505050905090810190601f16801561015a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017357600080fd5b6101a8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061088d565b604051808215151515815260200191505060405180910390f35b34156101cd57600080fd5b6101d561097f565b6040518082815260200191505060405180910390f35b34156101f657600080fd5b61024a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610985565b604051808215151515815260200191505060405180910390f35b341561026f57600080fd5b610277610c01565b6040518082815260200191505060405180910390f35b341561029857600080fd5b6102a0610c07565b6040518082815260200191505060405180910390f35b34156102c157600080fd5b6102c9610c0c565b6040518082815260200191505060405180910390f35b34156102ea57600080fd5b6102f2610c12565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610332578082015181840152602081019050610317565b50505050905090810190601f16801561035f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037857600080fd5b6103a4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cb0565b6040518082815260200191505060405180910390f35b34156103c557600080fd5b6103cd610cf9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041a57600080fd5b610422610d1f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610462578082015181840152602081019050610447565b50505050905090810190601f16801561048f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a857600080fd5b6104dd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d58565b604051808215151515815260200191505060405180910390f35b341561050257600080fd5b61054d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ec1565b6040518082815260200191505060405180910390f35b61056b61056d565b005b6000803411151561057d57600080fd5b61058960065434610f48565b60068190555061059b346101f4610f72565b90508060016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561060b57610851565b61067660016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610fa5565b60016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610724600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610f48565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561085057600080fd5b5b50565b6040805190810160405280600c81526020017f556e69636f726e20436f696e000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a52575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610a5e5750600082115b15610bf55781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610bfa565b600090505b9392505050565b6101f481565b601281565b60065481565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ca85780601f10610c7d57610100808354040283529160200191610ca8565b820191906000526020600020905b815481529060010190602001808311610c8b57829003601f168201915b505050505081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f554343000000000000000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610da95750600082115b15610eb65781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610ebb565b600090505b92915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808284019050838110158015610f605750828110155b1515610f6857fe5b8091505092915050565b60008082840290506000841480610f935750828482811515610f9057fe5b04145b1515610f9b57fe5b8091505092915050565b600080828410151515610fb457fe5b828403905080915050929150505600a165627a7a72305820d202f622bde044414c64a3b46e1f7a7235a51fb53096a971cad5f80ae2a1f77d0029"
}