{
  "address": "0xa5629861c9c345f50221996ef852fd9665eb1c05",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IronHands",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-27\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * \n * \n *                \n *\n * ATTENTION!\n * \n * This code? IS NOT DESIGNED FOR ACTUAL USE.\n * \n * The author of this code really wishes you wouldn't send your ETH to it, but it's been\n * done with P3D and there are very happy users because of it.\n * \n * No, seriously. It's probablly illegal anyway. So don't do it.\n * \n * Let me repeat that: Don't actually send money to this contract. You are \n * likely breaking several local and national laws in doing so.\n * \n * This code is intended to educate. Nothing else. If you use it, expect S.W.A.T \n * teams at your door. I wrote this code because I wanted to experiment\n * with smart contracts, and I think code should be open source. So consider\n * it public domain, No Rights Reserved. Participating in pyramid schemes\n * is genuinely illegal so just don't even think about going beyond\n * reading the code and understanding how it works.\n * \n * Seriously. I'm not kidding. It's probablly broken in some critical way anyway\n * and will suck all your money out your wallet, install a virus on your computer\n * sleep with your wife, kidnap your children and sell them into slavery,\n * make you forget to file your taxes, and give you cancer.\n * \n * \n * What it does:\n * \n * It takes 50% of the ETH in it and buys tokens.\n * It takes 50% of the ETH in it and pays back depositors.\n * Depositors get in line and are paid out in order of deposit, plus the deposit\n * percent.\n * The tokens collect dividends, which in turn pay into the payout pool\n * to be split 50/50.\n * \n * If you're seeing this contract in it's initial configuration, it should be\n * set to 200% (double deposits), and pointed at PoWH:\n * 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe\n * \n * But you should verify this for yourself.\n *  \n *  \n */\n\ncontract ERC20Interface {\n    function transfer(address to, uint256 tokens) public returns (bool success);\n}\n\ncontract REV {\n    \n    function buy(address) public payable returns(uint256);\n    function withdraw() public;\n    function myTokens() public view returns(uint256);\n    function myDividends(bool) public view returns(uint256);\n}\n\ncontract Owned {\n    address public owner;\n    address public ownerCandidate;\n\n    constructor() public {\n        owner = 0xc42559F88481e1Df90f64e5E9f7d7C6A34da5691;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        ownerCandidate = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == ownerCandidate);  \n        owner = ownerCandidate;\n    }\n    \n}\n\ncontract IronHands is Owned {\n    \n    /**\n     * Modifiers\n     */\n     \n    /**\n     * Only owners are allowed.\n     */\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n     * The tokens can never be stolen.\n     */\n    modifier notPooh(address aContract){\n        require(aContract != address(weak_hands));\n        _;\n    }\n\n    modifier limitBuy() { \n        if(msg.value > limit) { // check if the transaction is over limit eth (1000 finney = 1 eth)\n            revert(); // if so : revert the transaction\n            \n        }\n        _;\n    }\n   \n    /**\n     * Events\n     */\n    event Deposit(uint256 amount, address depositer);\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\n    event Payout(uint256 amount, address creditor);\n    event Dividends(uint256 amount);\n   \n    /**\n     * Structs\n     */\n    struct Participant {\n        address etherAddress;\n        uint256 payout;\n    }\n\n    //Total ETH managed over the lifetime of the contract\n    uint256 throughput;\n    //Total ETH received from dividends\n    uint256 dividends;\n    //The percent to return to depositers. 100 for 00%, 200 to double, etc.\n    uint256 public multiplier;\n    //Where in the line we are with creditors\n    uint256 public payoutOrder = 0;\n    //How much is owed to people\n    uint256 public backlog = 0;\n    //The creditor line\n    Participant[] public participants;\n    //How much each person is owed\n    mapping(address => uint256) public creditRemaining;\n    //What we will be buying\n    REV weak_hands;\n    // Limitation\n    uint256 public limit = 50 finney; // 1000 = 1eth, 100 = 0,1 eth | 50 finney = 0.05 eth\n\n    /**\n     * Constructor\n     */\n     /*  */\n    constructor() public {\n        address cntrct = 0x05215FCE25902366480696F38C3093e31DBCE69A; // contract address\n        multiplier = 125; // 200 to double | 125 = 25% more\n        weak_hands = REV(cntrct);\n    }\n    \n    \n    /**\n     * Fallback function allows anyone to send money for the cost of gas which\n     * goes into the pool. Used by withdraw/dividend payouts so it has to be cheap.\n     */\n    function() payable public {\n    }\n    \n    /**\n     * Deposit ETH to get in line to be credited back the multiplier as a percent,\n     * add that ETH to the pool, get the dividends and put them in the pool,\n     * then pay out who we owe and buy more tokens.\n     */ \n    function deposit() payable public limitBuy() {\n        //You have to send more than 1000000 wei.\n        require(msg.value > 1000000);\n        //Compute how much to pay them\n        uint256 amountCredited = (msg.value * multiplier) / 100;\n        //Get in line to be paid back.\n        participants.push(Participant(msg.sender, amountCredited));\n        //Increase the backlog by the amount owed\n        backlog += amountCredited;\n        //Increase the amount owed to this address\n        creditRemaining[msg.sender] += amountCredited;\n        //Emit a deposit event.\n        emit Deposit(msg.value, msg.sender);\n        //If I have dividends\n        if(myDividends() > 0){\n            //Withdraw dividends\n            withdraw();\n        }\n        //Pay people out and buy more tokens.\n        payout();\n    }\n    \n    /**\n     * Take 25% of the money and spend it on tokens, which will pay dividends later.\n     * Take the other 75%, and use it to pay off depositors.\n     */\n    function payout() public {\n        //Take everything in the pool\n        uint balance = address(this).balance;\n        //It needs to be something worth splitting up\n        require(balance > 1);\n        //Increase our total throughput\n        throughput += balance;\n        //calculate 25% of investment\n        uint256 investment = balance / 4;\n        //Take away the amount we are investing(25%) from the amount to send(75%)\n        balance -= investment;\n        //Invest it in more tokens.\n        uint256 tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender);\n        //Record that tokens were purchased\n        emit Purchase(investment, tokens);\n        //While we still have money to send\n        while (balance > 0) {\n            //Either pay them what they are owed or however much we have, whichever is lower.\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n            //if we have something to pay them\n            if(payoutToSend > 0){\n                //subtract how much we've spent\n                balance -= payoutToSend;\n                //subtract the amount paid from the amount owed\n                backlog -= payoutToSend;\n                //subtract the amount remaining they are owed\n                creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend;\n                //credit their account the amount they are being paid\n                participants[payoutOrder].payout -= payoutToSend;\n                //Try and pay them, making best effort. But if we fail? Run out of gas? That's not our problem any more.\n                if(participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)()){\n                    //Record that they were paid\n                    emit Payout(payoutToSend, participants[payoutOrder].etherAddress);\n                }else{\n                    //undo the accounting, they are being skipped because they are not payable.\n                    balance += payoutToSend;\n                    backlog += payoutToSend;\n                    creditRemaining[participants[payoutOrder].etherAddress] += payoutToSend;\n                    participants[payoutOrder].payout += payoutToSend;\n                }\n\n            }\n            //If we still have balance left over\n            if(balance > 0){\n                // go to the next person in line\n                payoutOrder += 1;\n            }\n            //If we've run out of people to pay, stop\n            if(payoutOrder >= participants.length){\n                return;\n            }\n        }\n    }\n    \n    /**\n     * Number of tokens the contract owns.\n     */\n    function myTokens() public view returns(uint256){\n        return weak_hands.myTokens();\n    }\n    \n    /**\n     * Number of dividends owed to the contract.\n     */\n    function myDividends() public view returns(uint256){\n        return weak_hands.myDividends(true);\n    }\n    \n    /**\n     * Number of dividends received by the contract.\n     */\n    function totalDividends() public view returns(uint256){\n        return dividends;\n    }\n    \n    \n    /**\n     * Request dividends be paid out and added to the pool.\n     */\n    function withdraw() public {\n        uint256 balance = address(this).balance;\n        weak_hands.withdraw.gas(1000000)();\n        uint256 dividendsPaid = address(this).balance - balance;\n        dividends += dividendsPaid;\n        emit Dividends(dividendsPaid);\n    }\n    \n    /**\n     * Number of participants who are still owed.\n     */\n    function backlogLength() public view returns (uint256){\n        return participants.length - payoutOrder;\n    }\n    \n    /**\n     * Total amount still owed in credit to depositors.\n     */\n    function backlogAmount() public view returns (uint256){\n        return backlog;\n    } \n    \n    /**\n     * Total number of deposits in the lifetime of the contract.\n     */\n    function totalParticipants() public view returns (uint256){\n        return participants.length;\n    }\n    \n    /**\n     * Total amount of ETH that the contract has delt with so far.\n     */\n    function totalSpent() public view returns (uint256){\n        return throughput;\n    }\n    \n    /**\n     * Amount still owed to an individual address\n     */\n    function amountOwed(address anAddress) public view returns (uint256) {\n        return creditRemaining[anAddress];\n    }\n     \n     /**\n      * Amount owed to this person.\n      */\n    function amountIAmOwed() public view returns (uint256){\n        return amountOwed(msg.sender);\n    }\n    \n    /**\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\n     */\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public onlyOwner notPooh(tokenAddress) returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n    }\n    \n    function changeLimit(uint256 newLimit) public onlyOwner returns (uint256) {\n        limit = newLimit * 1 finney;\n        return limit;\n    }\n}",
  "bytecode": "60806040526000600555600060065566b1a2bc2ec50000600a5534801561002557600080fd5b50600073c42559f88481e1df90f64e5e9f7d7c6a34da56916000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507305215fce25902366480696f38c3093e31dbce69a9050607d60048190555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611514806100ec6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a44b9cf146101405780631b3ed7221461016b5780633151ecfc1461019657806335c1d349146101c157806339af0513146102355780633ccfd60b146102605780633febb070146102775780635f504a82146102a257806363bd1d4a146102f95780636cff6f9d146103105780636d33b42b1461033b57806379ba50971461037c5780638da5cb5b14610393578063949e8acd146103ea578063997664d714610415578063a0ca0a5714610440578063a26dbf261461046b578063a4d66daf14610496578063a6f9dae1146104c1578063d0e30db014610504578063d493b9ac1461050e578063e5cf229714610593578063fb346eab146105ea578063ff5d18ca14610615575b005b34801561014c57600080fd5b5061015561066c565b6040518082815260200191505060405180910390f35b34801561017757600080fd5b5061018061067c565b6040518082815260200191505060405180910390f35b3480156101a257600080fd5b506101ab610682565b6040518082815260200191505060405180910390f35b3480156101cd57600080fd5b506101ec6004803603810190808035906020019092919050505061075a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561024157600080fd5b5061024a6107ad565b6040518082815260200191505060405180910390f35b34801561026c57600080fd5b506102756107b3565b005b34801561028357600080fd5b5061028c6108da565b6040518082815260200191505060405180910390f35b3480156102ae57600080fd5b506102b76108e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030557600080fd5b5061030e61090a565b005b34801561031c57600080fd5b50610325610e16565b6040518082815260200191505060405180910390f35b34801561034757600080fd5b5061036660048036038101908080359060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b34801561038857600080fd5b50610391610e93565b005b34801561039f57600080fd5b506103a8610f53565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f657600080fd5b506103ff610f78565b6040518082815260200191505060405180910390f35b34801561042157600080fd5b5061042a611040565b6040518082815260200191505060405180910390f35b34801561044c57600080fd5b5061045561104a565b6040518082815260200191505060405180910390f35b34801561047757600080fd5b5061048061105b565b6040518082815260200191505060405180910390f35b3480156104a257600080fd5b506104ab611068565b6040518082815260200191505060405180910390f35b3480156104cd57600080fd5b50610502600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061106e565b005b61050c61110d565b005b34801561051a57600080fd5b50610579600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112da565b604051808215151515815260200191505060405180910390f35b34801561059f57600080fd5b506105d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061147d565b6040518082815260200191505060405180910390f35b3480156105f657600080fd5b506105ff6114c6565b6040518082815260200191505060405180910390f35b34801561062157600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114d0565b6040518082815260200191505060405180910390f35b60006106773361147d565b905090565b60045481565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663688abbf760016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082151515158152602001915050602060405180830381600087803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b505050506040513d602081101561074457600080fd5b8101908080519060200190929190505050905090565b60078181548110151561076957fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60065481565b6000803073ffffffffffffffffffffffffffffffffffffffff16319150600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b620f42406040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600088803b15801561085a57600080fd5b5087f115801561086e573d6000803e3d6000fd5b5050505050813073ffffffffffffffffffffffffffffffffffffffff1631039050806003600082825401925050819055507fd7cefab74b4b11d01e168f9d1e2a28e7bf8263c3acf9b9fdb802fa666a49455b816040518082815260200191505060405180910390a15050565b6000600654905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000803073ffffffffffffffffffffffffffffffffffffffff1631935060018411151561093957600080fd5b8360026000828254019250508190555060048481151561095557fe5b0492508284039350600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f088d54784620f424090336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818589803b158015610a1f57600080fd5b5088f1158015610a33573d6000803e3d6000fd5b5050505050506040513d6020811015610a4b57600080fd5b810190808051906020019092919050505091507f350df6fcc944b226b77efc36902e19b43c566d75173622086e809d46dfbc22208383604051808381526020018281526020019250505060405180910390a15b6000841115610e0f576007600554815481101515610ab857fe5b9060005260206000209060020201600101548410610af8576007600554815481101515610ae157fe5b906000526020600020906002020160010154610afa565b835b90506000811115610dda5780840393508060066000828254039250508190555080600860006007600554815481101515610b3057fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806007600554815481101515610bbb57fe5b9060005260206000209060020201600101600082825403925050819055506007600554815481101515610bea57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681620f424090604051600060405180830381858888f1935050505015610d04577f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d76490816007600554815481101515610c8557fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1610dd9565b80840193508060066000828254019250508190555080600860006007600554815481101515610d2f57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806007600554815481101515610dba57fe5b9060005260206000209060020201600101600082825401925050819055505b5b6000841115610df55760016005600082825401925050819055505b600780549050600554101515610e0a57610e10565b610a9e565b5b50505050565b60055481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7957600080fd5b66038d7ea4c680008202600a81905550600a549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eef57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663949e8acd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b8101908080519060200190929190505050905090565b6000600354905090565b600060055460078054905003905090565b6000600780549050905090565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a5434111561111e57600080fd5b620f42403411151561112f57600080fd5b6064600454340281151561113f57fe5b049050600760408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050508060066000828254019250508190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a533433604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160006112c0610682565b11156112cf576112ce6107b3565b5b6112d761090a565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133757600080fd5b83600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561139557600080fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561143857600080fd5b505af115801561144c573d6000803e3d6000fd5b505050506040513d602081101561146257600080fd5b81019080805190602001909291905050509150509392505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600254905090565b600860205280600052604060002060009150905054815600a165627a7a723058205c947a730011b9e923f81ed5cb17de3c229115fa28442f3f23da01093a74f6410029"
}