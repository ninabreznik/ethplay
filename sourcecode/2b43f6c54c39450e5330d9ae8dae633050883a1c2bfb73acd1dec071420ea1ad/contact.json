{
  "address": "0x21d281d3b296cfe0ba581d09d995ae6b23b0cafb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CIC",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity ^0.4.13;\n\n// ©COALCOIN TOKEN\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract Ownable {\n    address public owner;\n    function Ownable() {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n/* ©Total supply ‎10000000000 COALCOIN TOKENS (CIC)\n  @notice see https://github.com/ethereum/EIPs/issues/20\n */\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract COALCOIN is ERC20Basic {\n \n  using SafeMath for uint;\n \n  mapping(address => uint) balances;\n \n\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\ncontract StandardToken is COALCOIN, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n  function approve(address _spender, uint _value) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract CIC is StandardToken, Ownable {\n  string public constant name = \"COALCOIN\";\n  string public constant symbol = \"CIC\";\n  uint public constant decimals = 10;\n  // Constructor\n  function CIC() {\n      totalSupply = 10000000000 * 10 ** decimals;\n      balances[msg.sender] = totalSupply;\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b68056bc75e2d631000006000818155600160a060020a0333168152600160205260409020555b5b61076a806100636000396000f300606060405236156100ac5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b1578063095ea7b31461013c57806318160ddd1461016057806323b872dd14610185578063313ce567146101af57806370a08231146101d45780638da5cb5b1461020557806395d89b4114610234578063a9059cbb146102bf578063dd62ed3e146102e3578063f2fde38b1461031a575b600080fd5b34156100bc57600080fd5b6100c461033b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101015780820151818401525b6020016100e8565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014757600080fd5b61015e600160a060020a0360043516602435610372565b005b341561016b57600080fd5b610173610414565b60405190815260200160405180910390f35b341561019057600080fd5b61015e600160a060020a036004358116906024351660443561041a565b005b34156101ba57600080fd5b61017361053d565b60405190815260200160405180910390f35b34156101df57600080fd5b610173600160a060020a0360043516610542565b60405190815260200160405180910390f35b341561021057600080fd5b610218610561565b604051600160a060020a03909116815260200160405180910390f35b341561023f57600080fd5b6100c4610570565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101015780820151818401525b6020016100e8565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ca57600080fd5b61015e600160a060020a03600435166024356105a7565b005b34156102ee57600080fd5b610173600160a060020a0360043581169060243516610674565b60405190815260200160405180910390f35b341561032557600080fd5b61015e600160a060020a03600435166106a1565b005b60408051908101604052600881527f434f414c434f494e000000000000000000000000000000000000000000000000602082015281565b80158015906103a55750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156103af57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b60005481565b60006060606436101561042c57600080fd5b600160a060020a038086166000908152600260209081526040808320338516845282528083205493881683526001909152902054909250610473908463ffffffff6106f916565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104a8908463ffffffff61071516565b600160a060020a0386166000908152600160205260409020556104d1828463ffffffff61071516565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b5050505050565b600a81565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600381527f4349430000000000000000000000000000000000000000000000000000000000602082015281565b604060443610156105b757600080fd5b600160a060020a0333166000908152600160205260409020546105e0908363ffffffff61071516565b600160a060020a033381166000908152600160205260408082209390935590851681522054610615908363ffffffff6106f916565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146106bc57600080fd5b600160a060020a038116156106f4576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600082820161070a8482101561072e565b8091505b5092915050565b60006107238383111561072e565b508082035b92915050565b8015156106f457600080fd5b5b505600a165627a7a72305820efd654a799cd6abb359c0ae04c4d80cb563b18583bd442c9a32775c61572d6870029"
}