{
  "address": "0xb49e984a83d7a638e7f2889fc8328952ba951abe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MON",
  "compilerVersion": "v0.4.20-nightly.2018.1.6+commit.2548228b",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-17\n*/\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) constant public returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) constant public returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) constant public returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) constant public returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if(msg.sender == owner){\n      _;\n    }\n    else{\n      revert();\n    }\n  }\n\n}\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant public returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant public returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  using SafeMath for uint128;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    if(!mintingFinished){\n      _;\n    }\n    else{\n      revert();\n    }\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0),_to,_amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\ncontract MON is MintableToken{\n    \n    event BuyStatus(uint256 status);\n    struct Buy{\n        uint128 amountOfEth;\n        uint128 stage;\n    }\n    \n    struct StageData{\n        uint128 stageTime;\n        uint64 stageSum;\n        uint64 stagePrice;\n    }\n    \n\tstring public constant name = \"MillionCoin\";\n\tstring public constant symbol = \"MON\";\n\tuint256 public constant DECIMALS = 8;\n\tuint256 public constant decimals = 8;\n\taddress public beneficiary ;\n    uint256 private alreadyRunned \t= 0;\n    uint256 internal _now =0;\n    uint256 public stageIndex = 0;\n    StageData[] public stageDataStore;\n    uint256 public period = 3600*24; //1 day\n    uint256 public start = 0;\n    uint256 public sumMultiplayer = 100000;\n    mapping(address => Buy) public stageBuys;\n \n modifier runOnce(uint256 bit){\n     if((alreadyRunned & bit)==0){\n        alreadyRunned = alreadyRunned | bit;   \n         _;   \n     }\n     else{\n         revert();\n     }\n }\n \n \n function MON(address _benef,uint256 _start,uint256 _sumMul,uint256 _period) public{\n     beneficiary = _benef;\n     if(_start==0){\n         start = GetNow();\n     }\n     else{\n         start = _start;\n     }\n     if(_period!=0){\n         period = _period;\n     }\n     if(_sumMul!=0){\n         sumMultiplayer = _sumMul;\n     }\n     stageDataStore.push(StageData(uint128(start+period*151),uint64(50*sumMultiplayer),uint64(5000)));\n     stageDataStore.push(StageData(uint128(start+period*243),uint64(60*sumMultiplayer),uint64(3000)));\n     stageDataStore.push(StageData(uint128(start+period*334),uint64(50*sumMultiplayer),uint64(1666)));\n     stageDataStore.push(StageData(uint128(start+period*455),uint64(60*sumMultiplayer),uint64(1500)));\n     stageDataStore.push(StageData(uint128(start+period*548),uint64(65*sumMultiplayer),uint64(1444)));\n     stageDataStore.push(StageData(uint128(start+period*641),uint64(55*sumMultiplayer),uint64(1000)));\n     \n }\n \n \n function GetMaxStageEthAmount() public constant returns(uint256){\n     StageData memory currS = stageDataStore[stageIndex];\n     uint256 retVal = currS.stageSum;\n     retVal = retVal*(10**18);\n     retVal = retVal/currS.stagePrice;\n     retVal = retVal.sub(this.balance);\n     return retVal;\n }\n \n \n function () public payable {\n     uint256  status = 0;\n     status = 0;\n     bool transferToBenef = false;\n     uint256  amountOfEthBeforeBuy = 0;\n     uint256  stageMaxEthAmount = 0;\n     uint128 _n = uint128(GetNow());\n     StageData memory currS = stageDataStore[stageIndex] ;\n     if(_n<start){\n         revert();\n     }\n     if(this.balance <msg.value){\n        amountOfEthBeforeBuy =0 ;\n     }\n     else{\n        amountOfEthBeforeBuy = this.balance - msg.value;\n     }\n     stageMaxEthAmount = uint256(currS.stageSum)*(10**18)/currS.stagePrice;\n         uint256 amountToReturn =0;\n         uint256 amountToMint =0;\n         Buy memory b = stageBuys[msg.sender];\n     if(currS.stageTime<_n && amountOfEthBeforeBuy<stageMaxEthAmount){\n         status = 1;\n         //current stage is unsuccessful money send in transaction should be returned plus \n         // all money spent in current round \n         amountToReturn = msg.value;\n         if(b.stage==stageIndex){\n             amountToReturn = amountToReturn.add(b.amountOfEth);\n             if(b.amountOfEth>0){\n                burn(msg.sender,b.amountOfEth.mul(currS.stagePrice));\n             }\n         }\n         b.amountOfEth=0;\n         mintingFinished = true;\n         msg.sender.transfer(amountToReturn);\n     }\n     else{\n         status = 2;\n         \n         if(b.stage!=stageIndex){\n             b.stage = uint128(stageIndex);\n             b.amountOfEth = 0;\n             status = status*10+3;\n         }\n         \n         if(currS.stageTime>_n &&  this.balance < stageMaxEthAmount){\n            //nothing special normal buy \n             b.amountOfEth = uint128(b.amountOfEth.add(uint128(msg.value)));\n            amountToMint = msg.value*currS.stagePrice;\n            status = status*10+4;\n            mintCoins(msg.sender,amountToMint);\n         }else{\n             if( this.balance >=stageMaxEthAmount){\n                 //we exceed stage limit\n                status = status*10+5;\n                 transferToBenef = true;\n                amountToMint = (stageMaxEthAmount - amountOfEthBeforeBuy)*(currS.stagePrice);\n                mintCoins(msg.sender,amountToMint);\n                stageIndex = stageIndex+1;\n                beneficiary.transfer(stageMaxEthAmount);\n                stageMaxEthAmount =  GetMaxStageEthAmount();\n                if(stageIndex<5 && stageMaxEthAmount>this.balance){\n                 //   status = status*10+7;\n                    //buys for rest of eth tokens in new prices\n                    currS = stageDataStore[stageIndex] ;\n                    amountToMint = this.balance*(currS.stagePrice);\n                    b.stage = uint128(stageIndex);\n                    b.amountOfEth =uint128(this.balance);\n                    mintCoins(msg.sender,amountToMint);\n                }\n                else{\n                    status = status*10+8;\n                    //returns rest of money if during buy hardcap is reached\n                    amountToReturn = this.balance;\n                    msg.sender.transfer(amountToReturn);\n                }\n             }else{\n                status = status*10+6;\n           //     revert() ;// not implemented, should not happend\n             }\n         }\n         \n     }\n     stageBuys[msg.sender] = b;\n     BuyStatus(status);\n }\n \n \n function GetBalance() public constant returns(uint256){\n     return this.balance;\n }\n\n  uint256 public constant maxTokenSupply = (10**(18-DECIMALS))*(10**6)*34 ;  \n  \n  function burn(address _from, uint256 _amount) private returns (bool){\n      _amount = _amount.div(10**10);\n      balances[_from] = balances[_from].sub(_amount);\n      totalSupply = totalSupply.sub(_amount);\n      Transfer(_from,address(0),_amount);\n  }\n  \n  function GetStats()public constant returns (uint256,uint256,uint256,uint256){\n      uint256 timeToEnd = 0;\n      uint256 round =0;\n      StageData memory _s = stageDataStore[stageIndex];\n      if(GetNow()>=start){\n        round = stageIndex+1;\n        if(_s.stageTime>GetNow())\n        {\n            timeToEnd = _s.stageTime-GetNow();\n        }\n        else{\n            return(0,0,0,0);\n        }\n      }\n      else{\n        timeToEnd = start-GetNow();\n      }\n      return(timeToEnd,\n       round,\n       _s.stageSum*1000/_s.stagePrice,\n       GetMaxStageEthAmount().div(10**15));\n  }\n  \n  function mintCoins(address _to, uint256 _amount)  canMint internal returns (bool) {\n      \n    _amount = _amount.div(10**10);\n  \tif(totalSupply.add(_amount)<maxTokenSupply){\n  \t  super.mint(_to,_amount.mul(75).div(100));\n  \t  super.mint(address(beneficiary),_amount.mul(25).div(100));\n  \t  \n  \t  return true;\n  \t}\n  \telse{\n  \t\treturn false; \n  \t}\n  \t\n  \treturn true;\n  }\n  \n  \n function GetNow() public constant returns(uint256){\n    return now; \n }\n  \n  \n}",
  "bytecode": "60606040526003805460a060020a60ff0219169055600060058190556006819055600781905562015180600955600a55620186a0600b5534156200004257600080fd5b6040516080806200224e8339810160405280805191906020018051919060200180519190602001805160038054600160a060020a03338116600160a060020a0319928316179092556004805492891692909116919091179055915050821515620000c757620000be64010000000062000b1e620006ba82021704565b600a55620000cd565b600a8390555b8015620000da5760098190555b8115620000e757600b8290555b6008805460018101620000fb8382620006bf565b9160005260206000209001600060606040519081016040908152600954600a546097909102016001608060020a03168252600b546032026001604060020a0316602083015261138890820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550506008805460018101620001f18382620006bf565b9160005260206000209001600060606040519081016040908152600954600a5460f3909102016001608060020a03168252600b54603c026001604060020a03166020830152610bb890820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550506008805460018101620002e78382620006bf565b9160005260206000209001600060606040519081016040908152600954600a5461014e909102016001608060020a03168252600b546032026001604060020a0316602083015261068290820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550506008805460018101620003de8382620006bf565b9160005260206000209001600060606040519081016040908152600954600a546101c7909102016001608060020a03168252600b54603c026001604060020a031660208301526105dc90820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550506008805460018101620004d58382620006bf565b9160005260206000209001600060606040519081016040908152600954600a54610224909102016001608060020a03168252600b546041026001604060020a031660208301526105a490820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a0390911617905550506008805460018101620005cc8382620006bf565b9160005260206000209001600060606040519081016040908152600954600a54610281909102016001608060020a03168252600b546037026001604060020a031660208301526103e890820152919050815181546001608060020a0319166001608060020a0391909116178155602082015181546001604060020a039190911670010000000000000000000000000000000002608060020a60c060020a0319909116178155604082015181546001604060020a0391909116780100000000000000000000000000000000000000000000000002600160c060020a03909116179055506200070c945050505050565b425b90565b815481835581811511620006e657600083815260209020620006e6918101908301620006eb565b505050565b620006bc91905b80821115620007085760008155600101620006f2565b5090565b611b32806200071c6000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166305d2035b81146107b657806306fdde03146107dd5780630729820314610867578063095ea7b3146108a557806318160ddd146108c757806323b872dd146108ec578063243af82d146109145780632e0f262514610957578063313ce5671461095757806338af3eed1461096a57806350f7c2041461099957806360e794de146109ac57806370a08231146109fa5780637d64bcb414610a1957806383c7d7c114610a2c5780638da5cb5b14610a3f57806395d89b4114610a52578063a9059cbb14610a65578063b56ebf4214610a87578063be9a655514610a9a578063dc97e36614610aad578063dd62ed3e14610ac0578063e4454fdc14610ae5578063ef78d4fd14610af8578063f8f8a91214610b0b575b600080600080600061013f611aaf565b60008061014a611acf565b6000985088975087965086955061015f610b1e565b9450600860075481548110151561017257fe5b90600052602060002090016060604051908101604090815291546001608060020a03808216835267ffffffffffffffff608060020a83048116602085015260c060020a90920490911692820192909252600a5490955090861610156101d657600080fd5b3430600160a060020a03163110156101f15760009650610201565b3430600160a060020a0316310396505b836040015167ffffffffffffffff16846020015167ffffffffffffffff16670de0b6b3a76400000281151561023257fe5b600160a060020a0333166000908152600c60205260408082209390920498509450849350805190810160405290546001608060020a038082168352608060020a90910481166020830152909150851684516001608060020a031610801561029857508587105b1561044f576001985034925060075481602001516001608060020a031614156103f157732d5626eff21cc9795fd49e2df2aab3af69a7296d63771602f784835160006040516020015260405160e060020a63ffffffff851602815260048101929092526001608060020a0316602482015260440160206040518083038186803b151561032357600080fd5b6102c65a03f4151561033457600080fd5b505050604051805193506000905081516001608060020a031611156103f1576103ef3382516001608060020a0316732d5626eff21cc9795fd49e2df2aab3af69a7296d63c8a4ac9c9091886040015160006040516020015260405160e060020a63ffffffff8516028152600481019290925267ffffffffffffffff16602482015260440160206040518083038186803b15156103cf57600080fd5b6102c65a03f415156103e057600080fd5b50505060405180519050610b23565b505b600081526003805474ff0000000000000000000000000000000000000000191660a060020a179055600160a060020a03331683156108fc0284604051600060405180830381858888f19350505050151561044a57600080fd5b61071a565b6002985060075481602001516001608060020a031614610489576007546001608060020a0316602082015260008152600a98909802600301975b6001608060020a03851684516001608060020a03161180156104b457508530600160a060020a031631105b1561057d5780516001608060020a0316732d5626eff21cc9795fd49e2df2aab3af69a7296d63771602f790913460006040516020015260405160e060020a63ffffffff851602815260048101929092526001608060020a0316602482015260440160206040518083038186803b151561052c57600080fd5b6102c65a03f4151561053d57600080fd5b50505060405180516001608060020a0316825250604084015167ffffffffffffffff163402915088600a0260040198506105773383610d03565b5061071a565b600160a060020a033016318690106107105788600a02600501985060019750836040015167ffffffffffffffff168787030291506105bb3383610d03565b50600780546001019055600454600160a060020a031686156108fc0287604051600060405180830381858888f1935050505015156105f857600080fd5b610600610fb1565b9550600560075410801561061d575030600160a060020a03163186115b156106c757600860075481548110151561063357fe5b90600052602060002090016060604051908101604090815291546001608060020a038116825267ffffffffffffffff608060020a82048116602084015260c060020a909104169181019182529450516007546001608060020a039081166020840152600160a060020a033016803190911683523167ffffffffffffffff919091160291506106c13383610d03565b5061044a565b88600a02600801985030600160a060020a031631925033600160a060020a03166108fc849081150290604051600060405180830381858888f19350505050151561044a57600080fd5b88600a0260060198505b600160a060020a0333166000908152600c602052604090208190815181546fffffffffffffffffffffffffffffffff19166001608060020a0391909116178155602082015181546001608060020a03918216608060020a029116179055507f69a26fb801dab2f7407c356e2e6fb94dadee97ed2eb5b3a269f935cc898dba708960405190815260200160405180910390a1505050505050505050005b34156107c157600080fd5b6107c96110de565b604051901515815260200160405180910390f35b34156107e857600080fd5b6107f06110ee565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561082c578082015183820152602001610814565b50505050905090810190601f1680156108595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561087257600080fd5b61087a611125565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34156108b057600080fd5b6107c9600160a060020a03600435166024356112e6565b34156108d257600080fd5b6108da61138c565b60405190815260200160405180910390f35b34156108f757600080fd5b6107c9600160a060020a0360043581169060243516604435611392565b341561091f57600080fd5b610933600160a060020a03600435166115d4565b6040516001608060020a039283168152911660208201526040908101905180910390f35b341561096257600080fd5b6108da6115fa565b341561097557600080fd5b61097d6115ff565b604051600160a060020a03909116815260200160405180910390f35b34156109a457600080fd5b6108da61160e565b34156109b757600080fd5b6109c260043561161a565b6040516001608060020a03909316835267ffffffffffffffff9182166020840152166040808301919091526060909101905180910390f35b3415610a0557600080fd5b6108da600160a060020a036004351661165e565b3415610a2457600080fd5b6107c9611679565b3415610a3757600080fd5b6108da6116eb565b3415610a4a57600080fd5b61097d6116f1565b3415610a5d57600080fd5b6107f0611700565b3415610a7057600080fd5b6107c9600160a060020a0360043516602435611737565b3415610a9257600080fd5b6108da610b1e565b3415610aa557600080fd5b6108da6118b6565b3415610ab857600080fd5b6108da6118bc565b3415610acb57600080fd5b6108da600160a060020a03600435811690602435166118c2565b3415610af057600080fd5b6108da610fb1565b3415610b0357600080fd5b6108da6118ed565b3415610b1657600080fd5b6108da6118f3565b425b90565b6000732d5626eff21cc9795fd49e2df2aab3af69a7296d63a391c15b836402540be400846040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610b8757600080fd5b6102c65a03f41515610b9857600080fd5b5050506040518051600160a060020a03851660009081526001602052604080822054929550732d5626eff21cc9795fd49e2df2aab3af69a7296d935063b67d77c592918691516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610c1b57600080fd5b6102c65a03f41515610c2c57600080fd5b5050506040518051600160a060020a038516600090815260016020526040808220929092558054732d5626eff21cc9795fd49e2df2aab3af69a7296d935063b67d77c59290918691516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610cb257600080fd5b6102c65a03f41515610cc357600080fd5b505050604051805160009081559050600160a060020a038416600080516020611ae78339815191528460405190815260200160405180910390a392915050565b60035460009060a060020a900460ff161515610fa657732d5626eff21cc9795fd49e2df2aab3af69a7296d63a391c15b836402540be40060006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610d7c57600080fd5b6102c65a03f41515610d8d57600080fd5b5050506040518051600080549194506704b7ec32d7a200009250732d5626eff21cc9795fd49e2df2aab3af69a7296d9163771602f79186906040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610e0557600080fd5b6102c65a03f41515610e1657600080fd5b505050604051805190501015610f9d57610f2383732d5626eff21cc9795fd49e2df2aab3af69a7296d63c8a4ac9c85604b60006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610e8957600080fd5b6102c65a03f41515610e9a57600080fd5b5050506040518051732d5626eff21cc9795fd49e2df2aab3af69a7296d915063a391c15b90606460006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610f0357600080fd5b6102c65a03f41515610f1457600080fd5b50505060405180519050611901565b50600454610f9390600160a060020a0316732d5626eff21cc9795fd49e2df2aab3af69a7296d63c8a4ac9c85601960006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610e8957600080fd5b5060019050610fa1565b5060005b610fab565b600080fd5b92915050565b6000610fbb611aaf565b60006008600754815481101515610fce57fe5b90600052602060002090016060604051908101604090815291546001608060020a038116825267ffffffffffffffff608060020a820481166020840190815260c060020a909204169282019290925292505167ffffffffffffffff16905080670de0b6b3a7640000029050816040015167ffffffffffffffff168181151561105257fe5b049050732d5626eff21cc9795fd49e2df2aab3af69a7296d63b67d77c582600160a060020a0330163160006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156110bd57600080fd5b6102c65a03f415156110ce57600080fd5b5050506040518051949350505050565b60035460a060020a900460ff1681565b60408051908101604052600b81527f4d696c6c696f6e436f696e000000000000000000000000000000000000000000602082015281565b600080600080600080611136611aaf565b6000925060009150600860075481548110151561114f57fe5b90600052602060002090016060604051908101604090815291546001608060020a038116825267ffffffffffffffff608060020a82048116602084015260c060020a9091041691810191909152600a549091506111aa610b1e565b106112025760075460010191506111bf610b1e565b81516001608060020a031611156111eb576111d8610b1e565b81516001608060020a03160392506111fd565b600096508695508594508493506112dd565b611211565b61120a610b1e565b600a540392505b8282826040015167ffffffffffffffff1683602001516103e80267ffffffffffffffff1681151561123e57fe5b04611247610fb1565b732d5626eff21cc9795fd49e2df2aab3af69a7296d63a391c15b909166038d7ea4c6800060006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156112ad57600080fd5b6102c65a03f415156112be57600080fd5b5050506040518051939a5091985067ffffffffffffffff169650909450505b50505090919293565b60008115806113185750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561132357600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915280822054919291732d5626eff21cc9795fd49e2df2aab3af69a7296d9163771602f7919086908690516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561142957600080fd5b6102c65a03f4151561143a57600080fd5b5050506040518051600160a060020a0380871660009081526001602052604080822093909355908816815281812054732d5626eff21cc9795fd49e2df2aab3af69a7296d935063b67d77c59290918791516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156114c857600080fd5b6102c65a03f415156114d957600080fd5b5050506040518051600160a060020a03871660009081526001602052604080822092909255732d5626eff21cc9795fd49e2df2aab3af69a7296d925063b67d77c59184918791516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561155d57600080fd5b6102c65a03f4151561156e57600080fd5b5050506040518051600160a060020a03808816600081815260026020908152604080832033861684529091529081902093909355908716925090600080516020611ae78339815191529086905190815260200160405180910390a3506001949350505050565b600c602052600090815260409020546001608060020a0380821691608060020a90041682565b600881565b600454600160a060020a031681565b6704b7ec32d7a2000081565b600880548290811061162857fe5b6000918252602090912001546001608060020a038116915067ffffffffffffffff608060020a820481169160c060020a90041683565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161415610fa6576003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1506001610b20565b600b5481565b600354600160a060020a031681565b60408051908101604052600381527f4d4f4e0000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526001602052604080822054732d5626eff21cc9795fd49e2df2aab3af69a7296d9163b67d77c5919085908590516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b15156117b057600080fd5b6102c65a03f415156117c157600080fd5b5050506040518051600160a060020a0333811660009081526001602052604080822093909355908616815281812054732d5626eff21cc9795fd49e2df2aab3af69a7296d935063771602f79290918691516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561184f57600080fd5b6102c65a03f4151561186057600080fd5b5050506040518051600160a060020a0380861660008181526001602052604090819020939093559250331690600080516020611ae78339815191529085905190815260200160405180910390a350600192915050565b600a5481565b60075481565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60095481565b600160a060020a0330163190565b60035460009060a060020a900460ff161515610fa657600054732d5626eff21cc9795fd49e2df2aab3af69a7296d63771602f790918460006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561197957600080fd5b6102c65a03f4151561198a57600080fd5b50505060405180516000908155600160a060020a03851681526001602052604080822054732d5626eff21cc9795fd49e2df2aab3af69a7296d935063771602f7929091869190516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515611a0e57600080fd5b6102c65a03f41515611a1f57600080fd5b5050506040518051600160a060020a038516600081815260016020526040908190209290925591507f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020611ae78339815191528460405190815260200160405180910390a3506001610fab565b606060405190810160409081526000808352602083018190529082015290565b6040805190810160405260008082526020820152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820542640f4a3b1c937dfbbb16d5266822d91852cafa6e2869b972769ad4f229b8b0029000000000000000000000000678c66747e96258efcde4af5f6b408dc00d68c42000000000000000000000000000000000000000000000000000000005a88b3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000678c66747e96258efcde4af5f6b408dc00d68c42000000000000000000000000000000000000000000000000000000005a88b3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "SafeMath",
      "address": "0x2d5626eff21cc9795fd49e2df2aab3af69a7296d"
    }
  ]
}