{
  "address": "0x359ba0f75b39e2f28199e28b830f08f5e88d091f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HBCCCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-01\n*/\n\npragma solidity ^0.4.20;\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract HBCCCoin is ERC20 {\n    using SafeMath for uint256; \n    mapping (address => uint256) balances; \n    mapping (address => mapping (address => uint256)) allowed;\n    string public constant name = \"HummingbirdCoin\";\n    string public constant symbol = \"HBCC\";\n    uint public constant decimals = 18;\n    uint256 _Rate = 10 ** decimals; \n    uint256 public totalSupply = 880000000 * _Rate;\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n     function HBCCCoin () public {\n        balances[msg.sender] = totalSupply;\n    }\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        uint previousBalances = balances[msg.sender].add(balances[_to]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        assert(balances[msg.sender].add(balances[_to])== previousBalances);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "6080604052670de0b6b3a76400006003556b02d7eb3f96e070d97000000060045534801561002c57600080fd5b50600454336000908152600160205260409020556109138061004f6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806342966c68146101db57806370a08231146101f357806379cc67901461021457806395d89b4114610238578063a9059cbb1461024d578063dd62ed3e14610271575b600080fd5b3480156100bf57600080fd5b506100c8610298565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a03600435166024356102cf565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a610377565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a036004358116906024351660443561037d565b3480156101d257600080fd5b5061018a610502565b3480156101e757600080fd5b50610161600435610507565b3480156101ff57600080fd5b5061018a600160a060020a03600435166105a7565b34801561022057600080fd5b50610161600160a060020a03600435166024356105c2565b34801561024457600080fd5b506100c86106ff565b34801561025957600080fd5b50610161600160a060020a0360043516602435610736565b34801561027d57600080fd5b5061018a600160a060020a0360043581169060243516610894565b60408051808201909152600f81527f48756d6d696e6762697264436f696e0000000000000000000000000000000000602082015281565b600081158015906103025750336000908152600260209081526040808320600160a060020a038716845290915290205415155b1561030f57506000610371565b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045481565b60006060606436101561038c57fe5b600160a060020a03841615156103a157600080fd5b600160a060020a0385166000908152600160205260409020548311156103c657600080fd5b600160a060020a03851660009081526002602090815260408083203384529091529020548311156103f657600080fd5b600160a060020a03851660009081526001602052604090205461041f908463ffffffff6108bf16565b600160a060020a038616600090815260016020908152604080832093909355600281528282203383529052205461045c908463ffffffff6108bf16565b600160a060020a0380871660009081526002602090815260408083203384528252808320949094559187168152600190915220546104a0908463ffffffff6108d116565b600160a060020a0380861660008181526001602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b601281565b3360009081526001602052604081205482111561052357600080fd5b33600090815260016020526040902054610543908363ffffffff6108bf16565b33600090815260016020526040902055600454610566908363ffffffff6108bf16565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600160a060020a031660009081526001602052604090205490565b600160a060020a0382166000908152600160205260408120548211156105e757600080fd5b600160a060020a038316600090815260026020908152604080832033845290915290205482111561061757600080fd5b600160a060020a038316600090815260016020526040902054610640908363ffffffff6108bf16565b600160a060020a038416600090815260016020908152604080832093909355600281528282203383529052205461067d908363ffffffff6108bf16565b600160a060020a03841660009081526002602090815260408083203384529091529020556004546106b4908363ffffffff6108bf16565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b60408051808201909152600481527f4842434300000000000000000000000000000000000000000000000000000000602082015281565b6000806040604436101561074657fe5b600160a060020a038516151561075b57600080fd5b3360009081526001602052604090205484111561077757600080fd5b600160a060020a038516600090815260016020526040808220543383529120546107a69163ffffffff6108d116565b336000908152600160205260409020549092506107c9908563ffffffff6108bf16565b3360009081526001602052604080822092909255600160a060020a038716815220546107fb908563ffffffff6108d116565b600160a060020a0386166000818152600160209081526040918290209390935580518781529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600160a060020a038516600090815260016020526040808220543383529120548391610882919063ffffffff6108d116565b1461088957fe5b506001949350505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828211156108cb57fe5b50900390565b6000828201838110156108e057fe5b93925050505600a165627a7a72305820bee54b4ea043714b85bcbad6213d89a5fd47562d0d1c74b6745a3d9ecf2119ec0029"
}