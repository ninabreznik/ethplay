{
  "address": "0xb77e343e66f192f0685ac4f351228e0de14440ec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VedioheadCoin",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * The Vediohead Coin Contract\n * by Vediohead dev team (May 2019)\n * adapted from OpenZeppelin @ 2.2.0\n */\n\n\n/**\n * -------------   IERC20 start   -------------\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * -------------   IERC20 end   -------------\n */\n\n\n/**\n * -------------   SafeMath start   -------------\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * -------------   SafeMath end   -------------\n */\n\n\n/**\n * -------------   Roles start   -------------\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n   struct Role {\n       mapping (address => bool) bearer;\n   }\n\n   /**\n    * @dev give an account access to this role\n    */\n   function add(Role storage role, address account) internal {\n       require(account != address(0));\n       require(!has(role, account));\n\n       role.bearer[account] = true;\n   }\n\n   /**\n    * @dev remove an account's access to this role\n    */\n   function remove(Role storage role, address account) internal {\n       require(account != address(0));\n       require(has(role, account));\n\n       role.bearer[account] = false;\n   }\n\n   /**\n    * @dev check if an account has this role\n    * @return bool\n    */\n   function has(Role storage role, address account) internal view returns (bool) {\n       require(account != address(0));\n       return role.bearer[account];\n   }\n}\n/**\n * -------------   Roles end   -------------\n */\n\n\n/**\n * -------------   PauserRole start   -------------\n * @title PauserRole\n * @dev .\n */\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor() internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n/**\n * -------------   PauserRole end   -------------\n */\n\n\n/**\n * -------------   Pausable start   -------------\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor() internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n/**\n * -------------   Pausable end   -------------\n */\n\n\n/**\n * -------------   ERC20 start   -------------\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n/**\n * -------------   ERC20 end   -------------\n */\n\n\n/**\n * -------------   ERC20Pausable start   -------------\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n/**\n * -------------   ERC20Pausable end   -------------\n */\n\n\n/**\n * -------------   Vediohead start   -------------\n * @title Vediohead Coin Contract\n * @dev Base contract with a simple transfer function.\n */\ncontract VedioheadCoin is ERC20Pausable {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    string public version;\n    uint256 _totalSupply;\n\n    mapping(address => uint256) _balances;\n\n    /**\n     * Constructor\n     */\n    constructor() public {\n        name = \"Vediohead Coin\";\n        symbol = \"VHD\";\n        decimals = 0;\n        version = \"1.0.0\";\n        _totalSupply = 800000000;\n\n        _mint(msg.sender, _totalSupply);\n    }\n\n    /**\n     * @notice Total supply\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply.sub(_balances[address(0)]);\n    }\n}\n/**\n * -------------   Vediohead end   -------------\n */",
  "bytecode": "60806040523480156200001157600080fd5b5062000023336200013160201b60201c565b6004805460ff1916905560408051808201909152600e8082527f566564696f6865616420436f696e00000000000000000000000000000000000060209092019182526200007391600591620002e2565b506040805180820190915260038082527f56484400000000000000000000000000000000000000000000000000000000006020909201918252620000ba91600691620002e2565b506007805460ff191690556040805180820190915260058082527f312e302e3000000000000000000000000000000000000000000000000000000060209092019182526200010b91600891620002e2565b50632faf08006009819055506200012b336009546200018360201b60201c565b62000387565b6200014c8160036200023c60201b62000a9b1790919060201c565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6001600160a01b0382166200019757600080fd5b620001b3816002546200029260201b62000a411790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001e691839062000a4162000292821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0381166200025057600080fd5b620002628282620002ac60201b60201c565b156200026d57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600082820183811015620002a557600080fd5b9392505050565b60006001600160a01b038216620002c257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032557805160ff191683800117855562000355565b8280016001018555821562000355579182015b828111156200035557825182559160200191906001019062000338565b506200036392915062000367565b5090565b6200038491905b808211156200036357600081556001016200036e565b90565b610b1380620003976000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635c975abb116100a25780638456cb59116100715780638456cb591461030657806395d89b411461030e578063a457c2d714610316578063a9059cbb14610342578063dd62ed3e1461036e57610116565b80635c975abb146102aa5780636ef8d66d146102b257806370a08231146102ba57806382dc1ec4146102e057610116565b8063313ce567116100e9578063313ce5671461022857806339509351146102465780633f4ba83a1461027257806346fbf68e1461027c57806354fd4d50146102a257610116565b806306fdde031461011b578063095ea7b31461019857806318160ddd146101d857806323b872dd146101f2575b600080fd5b61012361039c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015d578181015183820152602001610145565b50505050905090810190601f16801561018a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101c4600480360360408110156101ae57600080fd5b506001600160a01b03813516906020013561042a565b604080519115158252519081900360200190f35b6101e061044e565b60408051918252519081900360200190f35b6101c46004803603606081101561020857600080fd5b506001600160a01b03813581169160208101359091169060400135610491565b6102306104b7565b6040805160ff9092168252519081900360200190f35b6101c46004803603604081101561025c57600080fd5b506001600160a01b0381351690602001356104c0565b61027a6104dd565b005b6101c46004803603602081101561029257600080fd5b50356001600160a01b031661053d565b610123610556565b6101c46105b1565b61027a6105ba565b6101e0600480360360208110156102d057600080fd5b50356001600160a01b03166105c5565b61027a600480360360208110156102f657600080fd5b50356001600160a01b03166105e0565b61027a6105fe565b610123610662565b6101c46004803603604081101561032c57600080fd5b506001600160a01b0381351690602001356106bd565b6101c46004803603604081101561035857600080fd5b506001600160a01b0381351690602001356106da565b6101e06004803603604081101561038457600080fd5b506001600160a01b03813581169160200135166106f7565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104225780601f106103f757610100808354040283529160200191610422565b820191906000526020600020905b81548152906001019060200180831161040557829003601f168201915b505050505081565b60045460009060ff161561043d57600080fd5b6104478383610722565b9392505050565b6000808052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35460095461048c9163ffffffff61073816565b905090565b60045460009060ff16156104a457600080fd5b6104af84848461074d565b949350505050565b60075460ff1681565b60045460009060ff16156104d357600080fd5b61044783836107a4565b6104e63361053d565b6104ef57600080fd5b60045460ff166104fe57600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061055060038363ffffffff6107e016565b92915050565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104225780601f106103f757610100808354040283529160200191610422565b60045460ff1690565b6105c333610815565b565b6001600160a01b031660009081526020819052604090205490565b6105e93361053d565b6105f257600080fd5b6105fb8161085d565b50565b6106073361053d565b61061057600080fd5b60045460ff161561062057600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104225780601f106103f757610100808354040283529160200191610422565b60045460009060ff16156106d057600080fd5b61044783836108a5565b60045460009060ff16156106ed57600080fd5b61044783836108e1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600061072f3384846108ee565b50600192915050565b60008282111561074757600080fd5b50900390565b600061075a848484610976565b6001600160a01b03841660009081526001602090815260408083203380855292529091205461079a918691610795908663ffffffff61073816565b6108ee565b5060019392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161072f918590610795908663ffffffff610a4116565b60006001600160a01b0382166107f557600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61082660038263ffffffff610a5316565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61086e60038263ffffffff610a9b16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161072f918590610795908663ffffffff61073816565b600061072f338484610976565b6001600160a01b03821661090157600080fd5b6001600160a01b03831661091457600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03821661098957600080fd5b6001600160a01b0383166000908152602081905260409020546109b2908263ffffffff61073816565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546109e7908263ffffffff610a4116565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561044757600080fd5b6001600160a01b038116610a6657600080fd5b610a7082826107e0565b610a7957600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b038116610aae57600080fd5b610ab882826107e0565b15610ac257600080fd5b6001600160a01b0316600090815260209190915260409020805460ff1916600117905556fea165627a7a72305820b77bcf0052cd18f72e957efbc43adba0f6bee26676c486373c07ce1e796f26de0029"
}