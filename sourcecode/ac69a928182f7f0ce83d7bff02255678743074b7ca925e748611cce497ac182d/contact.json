{
  "address": "0x737242fc5d432fc40f59bb1aa049436b6183f4f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PresalePool",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-03\n*/\n\npragma solidity ^0.4.19;\n\n// Wolf Crypto pooling contract for Fintrux\n// written by @iamdefinitelyahuman\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20 {\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n}\n\n\ncontract WhiteList {\n   function checkMemberLevel (address addr) view public returns (uint) {}\n}\n\n\ncontract PresalePool {\n\n  // SafeMath is a library to ensure that math operations do not have overflow errors\n  // https://zeppelin-solidity.readthedocs.io/en/latest/safemath.html\n  using SafeMath for uint;\n  \n  // The contract has 3 stages:\n  // 1 - The initial state. The owner is able to add addresses to the whitelist, and any whitelisted addresses can deposit or withdraw eth to the contract.\n  // 2 - The owner has closed the contract for further deposits. Whitelisted addresses can still withdraw eth from the contract.\n  // 3 - The eth is sent from the contract to the receiver. Unused eth can be claimed by contributors immediately. Once tokens are sent to the contract,\n  //     the owner enables withdrawals and contributors can withdraw their tokens.\n  uint8 public contractStage = 1;\n  \n  // These variables are set at the time of contract creation\n  // the address that creates the contract\n  address public owner;\n  // the addresses of all administrators\n  address[] public admins;\n  // the minimum eth amount (in wei) that can be sent by a whitelisted address\n  uint public contributionMin;\n  // the maximum eth amount (in wei) that can be sent by a whitelisted address\n  uint[] public contributionCaps;\n  // the % of tokens kept by the contract owner\n  uint public feePct;\n  // the maximum gas price allowed for deposits in stage 1\n  uint constant public maxGasPrice = 50000000000;\n  // the whitelisting contract\n  WhiteList public whitelistContract;\n  \n  // These variables are all initially set to 0 and will be set at some point during the contract\n  // the amount of eth (in wei) present in the contract when it was submitted\n  uint public finalBalance;\n  // an array containing eth amounts to be refunded in stage 3\n  uint[] public ethRefundAmount;\n  // the default token contract to be used for withdrawing tokens in stage 3\n  address public activeToken;\n  \n  // a data structure for holding the contribution amount, cap, eth refund status, and token withdrawal status for each whitelisted address\n  struct Contributor {\n    bool authorized;\n    uint ethRefund;\n    uint balance;\n    uint cap;\n    mapping (address => uint) tokensClaimed;\n  }\n  // a mapping that holds the contributor struct for each whitelisted address\n  mapping (address => Contributor) whitelist;\n  \n  // a data structure for holding information related to token withdrawals.\n  struct TokenAllocation {\n    ERC20 token;\n    uint[] pct;\n    uint balanceRemaining;\n  }\n  // a mapping that holds the token allocation struct for each token address\n  mapping (address => TokenAllocation) distribution;\n  \n  \n  // this modifier is used for functions that can only be accessed by the contract creator\n  modifier onlyAdmins () {\n    for (uint8 i=0; i<admins.length; i++) {\n      if (msg.sender==admins[i]) {\n        _;\n        return;\n      }\n    }\n    revert();\n  }\n  \n  // this modifier is used to prevent re-entrancy exploits during contract > contract interaction\n  bool locked;\n  modifier noReentrancy() {\n    require(!locked);\n    locked = true;\n    _;\n    locked = false;\n  }\n  \n  // Events triggered throughout contract execution\n  // These can be watched via geth filters to keep up-to-date with the contract\n  event ContributorBalanceChanged (address contributor, uint totalBalance);\n  event ReceiverAddressChanged ( address _addr);\n  event TokensWithdrawn (address receiver, uint amount);\n  event EthRefunded (address receiver, uint amount);\n  event WithdrawalsOpen (address tokenAddr);\n  event ERC223Received (address token, uint value);\n  event EthRefundReceived (address sender, uint amount);\n   \n  // These are internal functions used for calculating fees, eth and token allocations as %\n  // returns a value as a % accurate to 20 decimal points\n  function _toPct (uint numerator, uint denominator ) internal pure returns (uint) {\n    return numerator.mul(10 ** 20) / denominator;\n  }\n  \n  // returns % of any number, where % given was generated with toPct\n  function _applyPct (uint numerator, uint pct) internal pure returns (uint) {\n    return numerator.mul(pct) / (10 ** 20);\n  }\n  \n  // This function is called at the time of contract creation,\n  // it sets the initial variables and whitelists the contract owner.\n  function PresalePool(address[] adminList, address whitelistAddr, uint individualMin, uint[] capAmounts, uint fee) public {\n    require (fee < 100);\n    require (100000000000000000 <= individualMin);\n    require (capAmounts.length>1 && capAmounts.length<256);\n    for (uint8 i=1; i<capAmounts.length; i++) {\n      require (capAmounts[i] <= capAmounts[0]);\n    }\n    owner = msg.sender;\n    admins = adminList;\n    admins.push(msg.sender);\n    contributionMin = individualMin;\n    contributionCaps = capAmounts;\n    feePct = _toPct(fee,100);\n    whitelistContract = WhiteList(whitelistAddr);\n    whitelist[msg.sender].authorized = true;\n  }\n  \n  // This function is called whenever eth is sent into the contract.\n  // The send will fail unless the contract is in stage one and the sender has been whitelisted.\n  // The amount sent is added to the balance in the Contributor struct associated with the sending address.\n  function () payable public {\n    if (contractStage == 1) {\n      _ethDeposit();\n    } else if (contractStage == 3) {\n      _ethRefund();\n    } else revert();\n  }\n  \n  // Internal function for handling eth deposits during contract stage one.\n  function _ethDeposit () internal {\n    assert (contractStage == 1);\n    require (tx.gasprice <= maxGasPrice);\n    require (this.balance <= contributionCaps[0]);\n    var c = whitelist[msg.sender];\n    uint newBalance = c.balance.add(msg.value);\n    require (newBalance >= contributionMin);\n    require (newBalance <= _checkCap(msg.sender));\n    c.balance = newBalance;\n    ContributorBalanceChanged(msg.sender, newBalance);\n  }\n  \n  // Internal function for handling eth refunds during stage three.\n  function _ethRefund () internal {\n    assert (contractStage == 3);\n    require (msg.sender == owner);\n    require (msg.value >= contributionMin);\n    ethRefundAmount.push(msg.value);\n    EthRefundReceived(msg.sender, msg.value);\n  }\n  \n  // This function is called to withdraw eth or tokens from the contract.\n  // It can only be called by addresses that are whitelisted and show a balance greater than 0.\n  // If called during contract stages one or two, the full eth balance deposited into the contract will be returned and the contributor's balance will be reset to 0.\n  // If called during stage three, the contributor's unused eth will be returned, as well as any available tokens.\n  // The token address may be provided optionally to withdraw tokens that are not currently the default token (airdrops).\n  function withdraw (address tokenAddr) public {\n    var c = whitelist[msg.sender];\n    require (c.balance > 0);\n    if (contractStage < 3) {\n      uint amountToTransfer = c.balance;\n      c.balance = 0;\n      msg.sender.transfer(amountToTransfer);\n      ContributorBalanceChanged(msg.sender, 0);\n    } else {\n      _withdraw(msg.sender,tokenAddr);\n    }  \n  }\n  \n  // This function allows the contract owner to force a withdrawal to any contributor.\n  function withdrawFor (address contributor, address tokenAddr) public onlyAdmins {\n    require (contractStage == 3);\n    require (whitelist[contributor].balance > 0);\n    _withdraw(contributor,tokenAddr);\n  }\n  \n  // This internal function handles withdrawals during stage three.\n  // The associated events will fire to notify when a refund or token allocation is claimed.\n  function _withdraw (address receiver, address tokenAddr) internal {\n    assert (contractStage == 3);\n    var c = whitelist[receiver];\n    if (tokenAddr == 0x00) {\n      tokenAddr = activeToken;\n    }\n    var d = distribution[tokenAddr];\n    require ( (ethRefundAmount.length > c.ethRefund) || d.pct.length > c.tokensClaimed[tokenAddr] );\n    if (ethRefundAmount.length > c.ethRefund) {\n      uint pct = _toPct(c.balance,finalBalance);\n      uint ethAmount = 0;\n      for (uint i=c.ethRefund; i<ethRefundAmount.length; i++) {\n        ethAmount = ethAmount.add(_applyPct(ethRefundAmount[i],pct));\n      }\n      c.ethRefund = ethRefundAmount.length;\n      if (ethAmount > 0) {\n        receiver.transfer(ethAmount);\n        EthRefunded(receiver,ethAmount);\n      }\n    }\n    if (d.pct.length > c.tokensClaimed[tokenAddr]) {\n      uint tokenAmount = 0;\n      for (i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\n        tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\n      }\n      c.tokensClaimed[tokenAddr] = d.pct.length;\n      if (tokenAmount > 0) {\n        require(d.token.transfer(receiver,tokenAmount));\n        d.balanceRemaining = d.balanceRemaining.sub(tokenAmount);\n        TokensWithdrawn(receiver,tokenAmount);\n      }  \n    }\n    \n  }\n  \n  // This function can only be executed by the owner, it adds an address to the whitelist.\n  // To execute, the contract must be in stage 1, the address cannot already be whitelisted, and the address cannot be a contract itself.\n  // Blocking contracts from being whitelisted prevents attacks from unexpected contract to contract interaction - very important!\n  function authorize (address addr, uint cap) public onlyAdmins {\n    require (contractStage == 1);\n    _checkWhitelistContract(addr);\n    require (!whitelist[addr].authorized);\n    require ((cap > 0 && cap < contributionCaps.length) || (cap >= contributionMin && cap <= contributionCaps[0]) );\n    uint size;\n    assembly { size := extcodesize(addr) }\n    require (size == 0);\n    whitelist[addr].cap = cap;\n    whitelist[addr].authorized = true;\n  }\n  \n  // This function is used by the owner to authorize many addresses in a single call.\n  // Each address will be given the same cap, and the cap must be one of the standard levels.\n  function authorizeMany (address[] addr, uint cap) public onlyAdmins {\n    require (addr.length < 255);\n    require (cap > 0 && cap < contributionCaps.length);\n    for (uint8 i=0; i<addr.length; i++) {\n      authorize(addr[i], cap);\n    }\n  }\n  \n  // This function is called by the owner to remove an address from the whitelist.\n  // It may only be executed during stages 1 and 2.  Any eth sent by the address is refunded and their personal cap is set to 0.\n  // It will throw if the address is still authorised in the whitelist contract.\n  function revoke (address addr) public onlyAdmins {\n    require (contractStage < 3);\n    require (whitelist[addr].authorized);\n    require (whitelistContract.checkMemberLevel(addr) == 0);\n    whitelist[addr].authorized = false;\n    if (whitelist[addr].balance > 0) {\n      uint amountToTransfer = whitelist[addr].balance;\n      whitelist[addr].balance = 0;\n      addr.transfer(amountToTransfer);\n      ContributorBalanceChanged(addr, 0);\n    }\n  }\n  \n  // This function is called by the owner to modify the contribution cap of a whitelisted address.\n  // If the current contribution balance exceeds the new cap, the excess balance is refunded.\n  function modifyIndividualCap (address addr, uint cap) public onlyAdmins {\n    require (contractStage < 3);\n    require (cap < contributionCaps.length || (cap >= contributionMin && cap <= contributionCaps[0]) );\n    _checkWhitelistContract(addr);\n    var c = whitelist[addr];\n    require (c.authorized);\n    uint amount = c.balance;\n    c.cap = cap;\n    uint capAmount = _checkCap(addr);\n    if (amount > capAmount) {\n      c.balance = capAmount;\n      addr.transfer(amount.sub(capAmount));\n      ContributorBalanceChanged(addr, capAmount);\n    }\n  }\n  \n  // This function is called by the owner to modify the cap for a contribution level.\n  // The cap can only be increased, not decreased, and cannot exceed the contract limit.\n  function modifyLevelCap (uint level, uint cap) public onlyAdmins {\n    require (contractStage < 3);\n    require (level > 0 && level < contributionCaps.length);\n    require (contributionCaps[level] < cap && contributionCaps[0] >= cap);\n    contributionCaps[level] = cap;\n  }\n  \n  // This function can be called during stages one or two to modify the maximum balance of the contract.\n  // It can only be called by the owner. The amount cannot be set to lower than the current balance of the contract.\n  function modifyMaxContractBalance (uint amount) public onlyAdmins {\n    require (contractStage < 3);\n    require (amount >= contributionMin);\n    require (amount >= this.balance);\n    contributionCaps[0] = amount;\n    for (uint8 i=1; i<contributionCaps.length; i++) {\n      if (contributionCaps[i]>amount) contributionCaps[i]=amount;\n    }\n  }\n  \n  // This internal function returns the cap amount of a whitelisted address.\n  function _checkCap (address addr) internal returns (uint) {\n    _checkWhitelistContract(addr);\n    var c = whitelist[addr];\n    if (!c.authorized) return 0;\n    if (c.cap<contributionCaps.length) return contributionCaps[c.cap];\n    return c.cap; \n  }\n  \n  // This internal function checks if an address is whitelisted in the whitelist contract.\n  function _checkWhitelistContract (address addr) internal {\n    var c = whitelist[addr];\n    if (!c.authorized) {\n      var level = whitelistContract.checkMemberLevel(addr);\n      if (level == 0 || level >= contributionCaps.length) return;\n      c.cap = level;\n      c.authorized = true;\n    }\n  }\n  \n  // This callable function returns the total pool cap, current balance and remaining balance to be filled.\n  function checkPoolBalance () view public returns (uint poolCap, uint balance, uint remaining) {\n    if (contractStage == 1) {\n      remaining = contributionCaps[0].sub(this.balance);\n    } else {\n      remaining = 0;\n    }\n    return (contributionCaps[0],this.balance,remaining);\n  }\n  \n  // This callable function returns the balance, contribution cap, and remaining available balance of any contributor.\n  function checkContributorBalance (address addr) view public returns (uint balance, uint cap, uint remaining) {\n    var c = whitelist[addr];\n    if (!c.authorized) {\n      cap = whitelistContract.checkMemberLevel(addr);\n      if (cap == 0) return (0,0,0);\n    } else {\n      cap = c.cap;\n    }\n    balance = c.balance;\n    if (contractStage == 1) {\n      if (cap<contributionCaps.length) {\n        cap = contributionCaps[cap];\n      }\n      remaining = cap.sub(balance);\n      if (contributionCaps[0].sub(this.balance) < remaining) remaining = contributionCaps[0].sub(this.balance);\n    } else {\n      remaining = 0;\n    }\n    return (balance, cap, remaining);\n  }\n  \n  // This callable function returns the token balance that a contributor can currently claim.\n  function checkAvailableTokens (address addr, address tokenAddr) view public returns (uint tokenAmount) {\n    var c = whitelist[addr];\n    var d = distribution[tokenAddr];\n    for (uint i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\n      tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\n    }\n    return tokenAmount;\n  }\n  \n  // This function closes further contributions to the contract, advancing it to stage two.\n  // It can only be called by the owner.  After this call has been made, whitelisted addresses\n  // can still remove their eth from the contract but cannot contribute any more.\n  function closeContributions () public onlyAdmins {\n    require (contractStage == 1);\n    contractStage = 2;\n  }\n  \n  // This function reopens the contract to contributions and further whitelisting, returning it to stage one.\n  // It can only be called by the owner during stage two.\n  function reopenContributions () public onlyAdmins {\n    require (contractStage == 2);\n    contractStage = 1;\n  }\n  \n  // This function sends the pooled eth to the receiving address, calculates the % of unused eth to be returned,\n  // and advances the contract to stage three. It can only be called by the contract owner during stages one or two.\n  // The amount to send (given in wei) must be specified during the call. As this function can only be executed once,\n  // it is VERY IMPORTANT not to get the amount wrong.\n  function submitPool (address receiverAddr, uint amountInWei) public onlyAdmins noReentrancy {\n    require (contractStage < 3);\n    require (receiverAddr != 0x00);\n    require (contributionMin <= amountInWei && amountInWei <= this.balance);\n    finalBalance = this.balance;\n    require (receiverAddr.call.value(amountInWei).gas(msg.gas.sub(5000))());\n    ethRefundAmount.push(this.balance);\n    contractStage = 3;\n  }\n  \n  // This function opens the contract up for token withdrawals.\n  // It can only be called by the owner during stage 3.  The owner specifies the address of an ERC20 token\n  // contract that this contract has a balance in, and optionally a bool to prevent this token from being\n  // the default withdrawal (in the event of an airdrop, for example).\n  // The function can only be called if there is not currently a token distribution \n  function enableTokenWithdrawals (address tokenAddr, bool notDefault) public onlyAdmins noReentrancy {\n    require (contractStage == 3);\n    if (notDefault) {\n      require (activeToken != 0x00);\n    } else {\n      activeToken = tokenAddr;\n    }\n    var d = distribution[tokenAddr];    \n    if (d.pct.length==0) d.token = ERC20(tokenAddr);\n    uint amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    require (amount > 0);\n    if (feePct > 0) {\n      require (d.token.transfer(owner,_applyPct(amount,feePct)));\n    }\n    amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    d.balanceRemaining = d.token.balanceOf(this);\n    d.pct.push(_toPct(amount,finalBalance));\n  }\n  \n  // This is a standard function required for ERC223 compatibility.\n  function tokenFallback (address from, uint value, bytes data) public {\n    ERC223Received (from, value);\n  }\n  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"checkPoolBalance\",\"outputs\":[{\"name\":\"poolCap\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"notDefault\",\"type\":\"bool\"}],\"name\":\"enableTokenWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethRefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributionCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAvailableTokens\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyLevelCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyMaxContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"authorizeMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverAddr\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"submitPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkContributorBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyIndividualCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reopenContributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"adminList\",\"type\":\"address[]\"},{\"name\":\"whitelistAddr\",\"type\":\"address\"},{\"name\":\"individualMin\",\"type\":\"uint256\"},{\"name\":\"capAmounts\",\"type\":\"uint256[]\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"ContributorBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ReceiverAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"WithdrawalsOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC223Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefundReceived\",\"type\":\"event\"}]",
  "bytecode": "606060405260016000806101000a81548160ff021916908360ff16021790555034156200002b57600080fd5b60405162003840380380620038408339810160405280805182019190602001805190602001909190805190602001909190805182019190602001805190602001909190505060006064821015156200008257600080fd5b8367016345785d8a0000111515156200009a57600080fd5b60018351118015620000ae57506101008351105b1515620000ba57600080fd5b600190505b82518160ff1610156200011e57826000815181101515620000dc57fe5b90602001906020020151838260ff16815181101515620000f857fe5b90602001906020020151111515156200011057600080fd5b8080600101915050620000bf565b33600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560019080519060200190620001779291906200034d565b50600180548060010182816200018e9190620003dc565b9160005260206000209001600033909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050836002819055508260039080519060200190620001fc9291906200040b565b506200021e826064620002cc6401000000000262002b84176401000000009004565b60048190555084600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050505050620004cb565b600081620002fb68056bc75e2d63100000856200030e64010000000002620032ad179091906401000000009004565b8115156200030557fe5b04905092915050565b600080600084141562000325576000915062000346565b82840290508284828115156200033757fe5b041415156200034257fe5b8091505b5092915050565b828054828255906000526020600020908101928215620003c9579160200282015b82811115620003c85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906200036e565b5b509050620003d891906200045d565b5090565b8154818355818115116200040657818360005260206000209182019101620004059190620004a3565b5b505050565b8280548282559060005260206000209081019282156200044a579160200282015b82811115620004495782518255916020019190600101906200042c565b5b509050620004599190620004a3565b5090565b620004a091905b808211156200049c57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010162000464565b5090565b90565b620004c891905b80821115620004c4576000816000905550600101620004aa565b5090565b90565b61336580620004db6000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063021bc974146101b55780630370ca41146101ec57806314bfd6d01461021b5780632129e25a1461027e5780633de39c11146102a75780634fbc7e11146102d057806351cff8d91461031457806352f1e07b1461034d578063732c227f14610384578063737c2d8c146103bb57806374a8f1031461042757806384900b041461046057806386a17f29146104b55780638796d43d146104e15780638c60e806146105365780638da5cb5b1461054b578063a02cf937146105a0578063abccb043146105c9578063adb5735c146105ec578063aee0abaa14610644578063b17d5938146106a7578063b9c009f0146106e9578063bcc13d1d14610744578063be1890351461076d578063c0ee0b8a146107af578063c1dbd9b214610834578063cd33670714610876575b60016000809054906101000a900460ff1660ff1614156101865761018161088b565b6101b3565b60036000809054906101000a900460ff1660ff1614156101ad576101a86109fa565b6101b2565b600080fd5b5b005b34156101c057600080fd5b6101c8610b1a565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156101f757600080fd5b6101ff610bca565b604051808260ff1660ff16815260200191505060405180910390f35b341561022657600080fd5b61023c6004808035906020019091905050610bdc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561028957600080fd5b610291610c1b565b6040518082815260200191505060405180910390f35b34156102b257600080fd5b6102ba610c21565b6040518082815260200191505060405180910390f35b34156102db57600080fd5b610312600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610c2a565b005b341561031f57600080fd5b61034b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112bf565b005b341561035857600080fd5b61036e6004808035906020019091905050611402565b6040518082815260200191505060405180910390f35b341561038f57600080fd5b6103a56004808035906020019091905050611426565b6040518082815260200191505060405180910390f35b34156103c657600080fd5b610411600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061144a565b6040518082815260200191505060405180910390f35b341561043257600080fd5b61045e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061157d565b005b341561046b57600080fd5b61047361196b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104c057600080fd5b6104df6004808035906020019091908035906020019091905050611991565b005b34156104ec57600080fd5b6104f4611ae1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561054157600080fd5b610549611b07565b005b341561055657600080fd5b61055e611be3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105ab57600080fd5b6105b3611c09565b6040518082815260200191505060405180910390f35b34156105d457600080fd5b6105ea6004808035906020019091905050611c0f565b005b34156105f757600080fd5b610642600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d95565b005b341561064f57600080fd5b6106a5600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611eb3565b005b34156106b257600080fd5b6106e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611fca565b005b34156106f457600080fd5b610720600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612200565b60405180848152602001838152602001828152602001935050505060405180910390f35b341561074f57600080fd5b610757612481565b6040518082815260200191505060405180910390f35b341561077857600080fd5b6107ad600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612487565b005b34156107ba57600080fd5b610832600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506126ea565b005b341561083f57600080fd5b610874600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061275a565b005b341561088157600080fd5b61088961298d565b005b60008060016000809054906101000a900460ff1660ff161415156108ab57fe5b640ba43b74003a111515156108bf57600080fd5b600360008154811015156108cf57fe5b9060005260206000209001543073ffffffffffffffffffffffffffffffffffffffff16311115151561090057600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150610958348360020154612a6990919063ffffffff16565b9050600254811015151561096b57600080fd5b61097433612a87565b811115151561098257600080fd5b8082600201819055507fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f43382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60036000809054906101000a900460ff1660ff16141515610a1757fe5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7357600080fd5b6002543410151515610a8457600080fd5b60078054806001018281610a9891906132e8565b9160005260206000209001600034909190915055507fa6b266978e1d6bcae9b5baa4078b3b92fc622b302cca549cf2ebf2e4723aca3c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1565b600080600060016000809054906101000a900460ff1660ff161415610b8557610b7e3073ffffffffffffffffffffffffffffffffffffffff163160036000815481101515610b6457fe5b906000526020600020900154612b3a90919063ffffffff16565b9050610b8a565b600090505b60036000815481101515610b9a57fe5b9060005260206000209001543073ffffffffffffffffffffffffffffffffffffffff163182925092509250909192565b6000809054906101000a900460ff1681565b600181815481101515610beb57fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b640ba43b740081565b60008060008090505b6001805490508160ff1610156112b35760018160ff16815481101515610c5557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112a657600b60009054906101000a900460ff16151515610cd057600080fd5b6001600b60006101000a81548160ff02191690831515021790555060036000809054906101000a900460ff1660ff16141515610d0b57600080fd5b8315610d5e576000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610d5957600080fd5b610da0565b84600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600083600101805490501415610e3557848360000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610f2d83600201548460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610f0457600080fd5b6102c65a03f11515610f1557600080fd5b50505060405180519050612b3a90919063ffffffff16565b9150600082111515610f3e57600080fd5b6000600454111561106c578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610fb885600454612b53565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561104557600080fd5b6102c65a03f1151561105657600080fd5b50505060405180519050151561106b57600080fd5b5b61116483600201548460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561113b57600080fd5b6102c65a03f1151561114c57600080fd5b50505060405180519050612b3a90919063ffffffff16565b91508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561122d57600080fd5b6102c65a03f1151561123e57600080fd5b50505060405180519050836002018190555082600101805480600101828161126691906132e8565b9160005260206000209001600061127f85600654612b84565b909190915055506000600b60006101000a81548160ff0219169083151502179055506112b8565b8080600101915050610c33565b600080fd5b5050505050565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506000826002015411151561131657600080fd5b60036000809054906101000a900460ff1660ff1610156113f25781600201549050600082600201819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561138157600080fd5b7fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f4336000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16113fd565b6113fc3384612bb5565b5b505050565b60078181548110151561141157fe5b90600052602060002090016000915090505481565b60038181548110151561143557fe5b90600052602060002090016000915090505481565b600080600080600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508260040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b8160010180549050811015611571576115626115538460020154846001018481548110151561154257fe5b906000526020600020900154612b53565b85612a6990919063ffffffff16565b93508080600101915050611517565b83935050505092915050565b600080600090505b6001805490508160ff1610156119615760018160ff168154811015156115a757fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156119545760036000809054906101000a900460ff1660ff1610151561162657600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561168157600080fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663417ba840856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561174857600080fd5b6102c65a03f1151561175957600080fd5b5050506040518051905014151561176f57600080fd5b6000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154111561194f57600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156118e257600080fd5b7fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f4836000604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b611966565b8080600101915050611585565b600080fd5b505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008090505b6001805490508160ff161015611ad75760018160ff168154811015156119b957fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611aca5760036000809054906101000a900460ff1660ff16101515611a3857600080fd5b600083118015611a4c575060038054905083105b1515611a5757600080fd5b81600384815481101515611a6757fe5b906000526020600020900154108015611a9b57508160036000815481101515611a8c57fe5b90600052602060002090015410155b1515611aa657600080fd5b81600384815481101515611ab657fe5b906000526020600020900181905550611adc565b8080600101915050611997565b600080fd5b505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008090505b6001805490508160ff161015611bdb5760018160ff16815481101515611b2f57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611bce5760016000809054906101000a900460ff1660ff16141515611bae57600080fd5b60026000806101000a81548160ff021916908360ff160217905550611be0565b8080600101915050611b0d565b600080fd5b50565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600080600090505b6001805490508160ff161015611d8b5760018160ff16815481101515611c3957fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d7e5760036000809054906101000a900460ff1660ff16101515611cb857600080fd5b6002548310151515611cc957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16318310151515611cef57600080fd5b8260036000815481101515611d0057fe5b906000526020600020900181905550600191505b6003805490508260ff161015611d79578260038360ff16815481101515611d3757fe5b9060005260206000209001541115611d6c578260038360ff16815481101515611d5c57fe5b9060005260206000209001819055505b8180600101925050611d14565b611d90565b8080600101915050611c17565b600080fd5b505050565b60008090505b6001805490508160ff161015611ea95760018160ff16815481101515611dbd57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611e9c5760036000809054906101000a900460ff1660ff16141515611e3c57600080fd5b6000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154111515611e8d57600080fd5b611e978383612bb5565b611eae565b8080600101915050611d9b565b600080fd5b505050565b600080600090505b6001805490508160ff161015611fbf5760018160ff16815481101515611edd57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611fb25760ff8451101515611f4c57600080fd5b600083118015611f60575060038054905083105b1515611f6b57600080fd5b600091505b83518260ff161015611fad57611fa0848360ff16815181101515611f9057fe5b906020019060200201518461275a565b8180600101925050611f70565b611fc4565b8080600101915050611ebb565b600080fd5b50505050565b60008090505b6001805490508160ff1610156121f65760018160ff16815481101515611ff257fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156121e957600b60009054906101000a900460ff1615151561206d57600080fd5b6001600b60006101000a81548160ff02191690831515021790555060036000809054906101000a900460ff1660ff161015156120a857600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156120ce57600080fd5b81600254111580156120f757503073ffffffffffffffffffffffffffffffffffffffff16318211155b151561210257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16316006819055508273ffffffffffffffffffffffffffffffffffffffff168261214d6113885a612b3a90919063ffffffff16565b90604051600060405180830381858888f19350505050151561216e57600080fd5b6007805480600101828161218291906132e8565b916000526020600020900160003073ffffffffffffffffffffffffffffffffffffffff16319091909150555060036000806101000a81548160ff021916908360ff1602179055506000600b60006101000a81548160ff0219169083151502179055506121fb565b8080600101915050611fd0565b600080fd5b505050565b600080600080600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff16151561236857600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663417ba840866000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561232457600080fd5b6102c65a03f1151561233557600080fd5b5050506040518051905092506000831415612363576000806000829250819150809050935093509350612479565b612370565b806003015492505b8060020154935060016000809054906101000a900460ff1660ff16141561246a576003805490508310156123bc576003838154811015156123ad57fe5b90600052602060002090015492505b6123cf8484612b3a90919063ffffffff16565b9150816124173073ffffffffffffffffffffffffffffffffffffffff1631600360008154811015156123fd57fe5b906000526020600020900154612b3a90919063ffffffff16565b1015612465576124623073ffffffffffffffffffffffffffffffffffffffff16316003600081548110151561244857fe5b906000526020600020900154612b3a90919063ffffffff16565b91505b61246f565b600091505b8383839350935093505b509193909250565b60025481565b600080600080600090505b6001805490508160ff1610156126dd5760018160ff168154811015156124b457fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156126d05760036000809054906101000a900460ff1660ff1610151561253357600080fd5b60038054905085108061256f5750600254851015801561256e57506003600081548110151561255e57fe5b9060005260206000209001548511155b5b151561257a57600080fd5b61258386613124565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002093508360000160009054906101000a900460ff1615156125e157600080fd5b836002015492508484600301819055506125fa86612a87565b9150818311156126cb578184600201819055508573ffffffffffffffffffffffffffffffffffffffff166108fc61263a8486612b3a90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050151561265f57600080fd5b7fbd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f48683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6126e2565b8080600101915050612492565b600080fd5b505050505050565b7f121b68c1c3978d37f853f81c5ba5a0d2d36bb308e0765a3d6eb906c01ebdfe888383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b600080600090505b6001805490508160ff1610156129825760018160ff1681548110151561278457fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156129755760016000809054906101000a900460ff1660ff1614151561280357600080fd5b61280c84613124565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151561286857600080fd5b60008311801561287c575060038054905083105b806128b0575060025483101580156128af57506003600081548110151561289f57fe5b9060005260206000209001548311155b5b15156128bb57600080fd5b833b91506000821415156128ce57600080fd5b82600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506001600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550612987565b8080600101915050612762565b600080fd5b50505050565b60008090505b6001805490508160ff161015612a615760018160ff168154811015156129b557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612a545760026000809054906101000a900460ff1660ff16141515612a3457600080fd5b60016000806101000a81548160ff021916908360ff160217905550612a66565b8080600101915050612993565b600080fd5b50565b6000808284019050838110151515612a7d57fe5b8091505092915050565b600080612a9383613124565b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff161515612af55760009150612b34565b60038054905081600301541015612b2c5760038160030154815481101515612b1957fe5b9060005260206000209001549150612b34565b806003015491505b50919050565b6000828211151515612b4857fe5b818303905092915050565b600068056bc75e2d63100000612b7283856132ad90919063ffffffff16565b811515612b7b57fe5b04905092915050565b600081612ba368056bc75e2d63100000856132ad90919063ffffffff16565b811515612bac57fe5b04905092915050565b60008060008060008060036000809054906101000a900460ff1660ff16141515612bdb57fe5b600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020955060008773ffffffffffffffffffffffffffffffffffffffff161415612c6157600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696505b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020945085600101546007805490501180612d0057508560040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560010180549050115b1515612d0b57600080fd5b85600101546007805490501115612e5057612d2c8660020154600654612b84565b935060009250856001015491505b600780549050821015612d8c57612d7d612d6e600784815481101515612d5c57fe5b90600052602060002090015486612b53565b84612a6990919063ffffffff16565b92508180600101925050612d3a565b60078054905086600101819055506000831115612e4f578773ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501515612de357600080fd5b7fffab3269bdaceca4d1bbc53e74b982ac2b306687e17e21f1e499e7fdf6751ac88884604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b8560040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560010180549050111561311a57600090508560040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505b8460010180549050821015612f4357612f34612f2587600201548760010185815481101515612f1457fe5b906000526020600020900154612b53565b82612a6990919063ffffffff16565b90508180600101925050612ee9565b84600101805490508660040160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000811115613119578460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561306857600080fd5b6102c65a03f1151561307957600080fd5b50505060405180519050151561308e57600080fd5b6130a5818660020154612b3a90919063ffffffff16565b85600201819055507f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b8882604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050505050565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160000160009054906101000a900460ff1615156132a757600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663417ba840846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561324557600080fd5b6102c65a03f1151561325657600080fd5b505050604051805190509050600081148061327657506003805490508110155b15613280576132a8565b80826003018190555060018260000160006101000a81548160ff0219169083151502179055505b5b505050565b60008060008414156132c257600091506132e1565b82840290508284828115156132d357fe5b041415156132dd57fe5b8091505b5092915050565b81548183558181151161330f5781836000526020600020918201910161330e9190613314565b5b505050565b61333691905b8082111561333257600081600090555060010161331a565b5090565b905600a165627a7a723058206d01681805704a4236d487d235b8ca414c3af6b481a6e96167233edef9b35c10002900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008d95b038ca80a986425fa240c3c17fb2b6e9bc63000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000040000000000000000000000009df06c3a6afdc579b82123266962edd3bffdaf72000000000000000000000000153964859ed04716ed08629920eec6fcb4b43422000000000000000000000000385f8dba055b2cde0ed284e7bdb2091636d84049000000000000000000000000ab83f8788d0d4852ad490db5af7999bae7cd004a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea00000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008d95b038ca80a986425fa240c3c17fb2b6e9bc63000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000040000000000000000000000009df06c3a6afdc579b82123266962edd3bffdaf72000000000000000000000000153964859ed04716ed08629920eec6fcb4b43422000000000000000000000000385f8dba055b2cde0ed284e7bdb2091636d84049000000000000000000000000ab83f8788d0d4852ad490db5af7999bae7cd004a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000003635c9adc5dea00000"
}