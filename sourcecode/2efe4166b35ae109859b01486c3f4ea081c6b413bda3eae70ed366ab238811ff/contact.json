{
  "address": "0x0675daa94725a528b05a3a88635c03ea964bfa7e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Taklimakan: Old Token",
  "contractName": "TKLNToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-08\n*/\n\npragma solidity 0.4.18;\n\n\ncontract CrowdsaleParameters {\n    // Vesting time stamps:\n    // 1534672800 = August 19, 2018. 180 days from February 20, 2018. 10:00:00 GMT\n    // 1526896800 = May 21, 2018. 90 days from February 20, 2018. 10:00:00 GMT\n    uint32 internal vestingTime90Days = 1526896800;\n    uint32 internal vestingTime180Days = 1534672800;\n\n    uint256 internal constant presaleStartDate = 1513072800; // Dec-12-2017 10:00:00 GMT\n    uint256 internal constant presaleEndDate = 1515751200; // Jan-12-2018 10:00:00 GMT\n    uint256 internal constant generalSaleStartDate = 1516442400; // Jan-20-2018 00:00:00 GMT\n    uint256 internal constant generalSaleEndDate = 1519120800; // Feb-20-2018 00:00:00 GMT\n\n    struct AddressTokenAllocation {\n        address addr;\n        uint256 amount;\n        uint256 vestingTS;\n    }\n\n    AddressTokenAllocation internal presaleWallet       = AddressTokenAllocation(0x43C5FB6b419E6dF1a021B9Ad205A18369c19F57F, 100e6, 0);\n    AddressTokenAllocation internal generalSaleWallet   = AddressTokenAllocation(0x0635c57CD62dA489f05c3dC755bAF1B148FeEdb0, 550e6, 0);\n    AddressTokenAllocation internal wallet1             = AddressTokenAllocation(0xae46bae68D0a884812bD20A241b6707F313Cb03a,  20e6, vestingTime180Days);\n    AddressTokenAllocation internal wallet2             = AddressTokenAllocation(0xfe472389F3311e5ea19B4Cd2c9945b6D64732F13,  20e6, vestingTime180Days);\n    AddressTokenAllocation internal wallet3             = AddressTokenAllocation(0xE37dfF409AF16B7358Fae98D2223459b17be0B0B,  20e6, vestingTime180Days);\n    AddressTokenAllocation internal wallet4             = AddressTokenAllocation(0x39482f4cd374D0deDD68b93eB7F3fc29ae7105db,  10e6, vestingTime180Days);\n    AddressTokenAllocation internal wallet5             = AddressTokenAllocation(0x03736d5B560fE0784b0F5c2D0eA76A7F15E5b99e,   5e6, vestingTime180Days);\n    AddressTokenAllocation internal wallet6             = AddressTokenAllocation(0xD21726226c32570Ab88E12A9ac0fb2ed20BE88B9,   5e6, vestingTime180Days);\n    AddressTokenAllocation internal foundersWallet      = AddressTokenAllocation(0xC66Cbb7Ba88F120E86920C0f85A97B2c68784755,  30e6, vestingTime90Days);\n    AddressTokenAllocation internal wallet7             = AddressTokenAllocation(0x24ce108d1975f79B57c6790B9d4D91fC20DEaf2d,   6e6, 0);\n    AddressTokenAllocation internal wallet8genesis      = AddressTokenAllocation(0x0125c6Be773bd90C0747012f051b15692Cd6Df31,   5e6, 0);\n    AddressTokenAllocation internal wallet9             = AddressTokenAllocation(0xFCF0589B6fa8A3f262C4B0350215f6f0ed2F630D,   5e6, 0);\n    AddressTokenAllocation internal wallet10            = AddressTokenAllocation(0x0D016B233e305f889BC5E8A0fd6A5f99B07F8ece,   4e6, 0);\n    AddressTokenAllocation internal wallet11bounty      = AddressTokenAllocation(0x68433cFb33A7Fdbfa74Ea5ECad0Bc8b1D97d82E9,  19e6, 0);\n    AddressTokenAllocation internal wallet12            = AddressTokenAllocation(0xd620A688adA6c7833F0edF48a45F3e39480149A6,   4e6, 0);\n    AddressTokenAllocation internal wallet13rsv         = AddressTokenAllocation(0x8C393F520f75ec0F3e14d87d67E95adE4E8b16B1, 100e6, 0);\n    AddressTokenAllocation internal wallet14partners    = AddressTokenAllocation(0x6F842b971F0076C4eEA83b051523d76F098Ffa52,  96e6, 0);\n    AddressTokenAllocation internal wallet15lottery     = AddressTokenAllocation(0xcaA48d91D49f5363B2974bb4B2DBB36F0852cf83,   1e6, 0);\n\n    uint256 public minimumICOCap = 3333;\n}\n\ncontract Owned {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    *  Constructor\n    *\n    *  Sets contract owner to address of constructor caller\n    */\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    *  Change Owner\n    *\n    *  Changes ownership of this contract. Only owner can call this method.\n    *\n    * @param newOwner - new owner's address\n    */\n    function changeOwner(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        require(newOwner != owner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract TKLNToken is Owned, CrowdsaleParameters {\n    /* Public variables of the token */\n    string public standard = 'Token 0.1';\n    string public name = 'Taklimakan';\n    string public symbol = 'TKLN';\n    uint8 public decimals = 18;\n\n    /* Arrays of all balances, vesting, approvals, and approval uses */\n    mapping (address => uint256) private balances;              // Total token balances\n    mapping (address => uint256) private balances90dayFreeze;   // Balances frozen for 90 days after ICO end\n    mapping (address => uint256) private balances180dayFreeze;  // Balances frozen for 180 days after ICO end\n    mapping (address => uint) private vestingTimesForPools;\n    mapping (address => mapping (address => uint256)) private allowed;\n    mapping (address => mapping (address => bool)) private allowanceUsed;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed spender, address indexed from, address indexed to, uint256 value);\n    event VestingTransfer(address indexed from, address indexed to, uint256 value, uint256 vestingTime);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Issuance(uint256 _amount); // triggered when the total supply is increased\n    event Destruction(uint256 _amount); // triggered when the total supply is decreased\n    event NewTKLNToken(address _token);\n\n    /* Miscellaneous */\n    uint256 public totalSupply = 0;\n    bool public transfersEnabled = true;\n\n    /**\n    *  Constructor\n    *\n    *  Initializes contract with initial supply tokens to the creator of the contract\n    */\n    function TKLNToken() public {\n        owner = msg.sender;\n\n        mintToken(presaleWallet);\n        mintToken(generalSaleWallet);\n        mintToken(wallet1);\n        mintToken(wallet2);\n        mintToken(wallet3);\n        mintToken(wallet4);\n        mintToken(wallet5);\n        mintToken(wallet6);\n        mintToken(foundersWallet);\n        mintToken(wallet7);\n        mintToken(wallet8genesis);\n        mintToken(wallet9);\n        mintToken(wallet10);\n        mintToken(wallet11bounty);\n        mintToken(wallet12);\n        mintToken(wallet13rsv);\n        mintToken(wallet14partners);\n        mintToken(wallet15lottery);\n\n        NewTKLNToken(address(this));\n    }\n\n    modifier transfersAllowed {\n        require(transfersEnabled);\n        _;\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    /**\n    *  1. Associate crowdsale contract address with this Token\n    *  2. Allocate general sale amount\n    *\n    * @param _crowdsaleAddress - crowdsale contract address\n    */\n    function approveCrowdsale(address _crowdsaleAddress) external onlyOwner {\n        approveAllocation(generalSaleWallet, _crowdsaleAddress);\n    }\n\n    /**\n    *  1. Associate pre-sale contract address with this Token\n    *  2. Allocate presale amount\n    *\n    * @param _presaleAddress - pre-sale contract address\n    */\n    function approvePresale(address _presaleAddress) external onlyOwner {\n        approveAllocation(presaleWallet, _presaleAddress);\n    }\n\n    function approveAllocation(AddressTokenAllocation tokenAllocation, address _crowdsaleAddress) internal {\n        uint uintDecimals = decimals;\n        uint exponent = 10**uintDecimals;\n        uint amount = tokenAllocation.amount * exponent;\n\n        allowed[tokenAllocation.addr][_crowdsaleAddress] = amount;\n        Approval(tokenAllocation.addr, _crowdsaleAddress, amount);\n    }\n\n    /**\n    *  Get token balance of an address\n    *\n    * @param _address - address to query\n    * @return Token balance of _address\n    */\n    function balanceOf(address _address) public constant returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    /**\n    *  Get vested token balance of an address\n    *\n    * @param _address - address to query\n    * @return balance that has vested\n    */\n    function vestedBalanceOf(address _address) public constant returns (uint256 balance) {\n        return balances[_address] - balances90dayFreeze[_address] - balances180dayFreeze[_address];\n    }\n\n    /**\n    *  Get token amount allocated for a transaction from _owner to _spender addresses\n    *\n    * @param _owner - owner address, i.e. address to transfer from\n    * @param _spender - spender address, i.e. address to transfer to\n    * @return Remaining amount allowed to be transferred\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    *  Send coins from sender's address to address specified in parameters\n    *\n    * @param _to - address to send to\n    * @param _value - amount to send in Wei\n    */\n    function transfer(address _to, uint256 _value) public transfersAllowed onlyPayloadSize(2*32) returns (bool success) {\n        updateVesting(msg.sender);\n\n        require(vestedBalanceOf(msg.sender) >= _value);\n\n        // Subtract from the sender\n        // _value is never greater than balance of input validation above\n        balances[msg.sender] -= _value;\n\n        // If tokens issued from this address need to vest (i.e. this address is a pool), freeze them here\n        if (vestingTimesForPools[msg.sender] > 0) {\n            addToVesting(msg.sender, _to, vestingTimesForPools[msg.sender], _value);\n        }\n\n        // Overflow is never possible due to input validation above\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    *  Create token and credit it to target address\n    *  Created tokens need to vest\n    *\n    */\n    function mintToken(AddressTokenAllocation tokenAllocation) internal {\n        // Add vesting time for this pool\n        vestingTimesForPools[tokenAllocation.addr] = tokenAllocation.vestingTS;\n\n        uint uintDecimals = decimals;\n        uint exponent = 10**uintDecimals;\n        uint mintedAmount = tokenAllocation.amount * exponent;\n\n        // Mint happens right here: Balance becomes non-zero from zero\n        balances[tokenAllocation.addr] += mintedAmount;\n        totalSupply += mintedAmount;\n\n        // Emit Issue and Transfer events\n        Issuance(mintedAmount);\n        Transfer(address(this), tokenAllocation.addr, mintedAmount);\n    }\n\n    /**\n    *  Allow another contract to spend some tokens on your behalf\n    *\n    * @param _spender - address to allocate tokens for\n    * @param _value - number of tokens to allocate\n    * @return True in case of success, otherwise false\n    */\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2*32) returns (bool success) {\n        require(_value == 0 || allowanceUsed[msg.sender][_spender] == false);\n\n        allowed[msg.sender][_spender] = _value;\n        allowanceUsed[msg.sender][_spender] = false;\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n    *  Allow another contract to spend some tokens on your behalf\n    *\n    * @param _spender - address to allocate tokens for\n    * @param _currentValue - current number of tokens approved for allocation\n    * @param _value - number of tokens to allocate\n    * @return True in case of success, otherwise false\n    */\n    function approve(address _spender, uint256 _currentValue, uint256 _value) public onlyPayloadSize(3*32) returns (bool success) {\n        require(allowed[msg.sender][_spender] == _currentValue);\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    *  A contract attempts to get the coins. Tokens should be previously allocated\n    *\n    * @param _to - address to transfer tokens to\n    * @param _from - address to transfer tokens from\n    * @param _value - number of tokens to transfer\n    * @return True in case of success, otherwise false\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed onlyPayloadSize(3*32) returns (bool success) {\n        updateVesting(_from);\n\n        // Check if the sender has enough\n        require(vestedBalanceOf(_from) >= _value);\n\n        // Check allowed\n        require(_value <= allowed[_from][msg.sender]);\n\n        // Subtract from the sender\n        // _value is never greater than balance because of input validation above\n        balances[_from] -= _value;\n        // Add the same to the recipient\n        // Overflow is not possible because of input validation above\n        balances[_to] += _value;\n\n        // Deduct allocation\n        // _value is never greater than allowed amount because of input validation above\n        allowed[_from][msg.sender] -= _value;\n\n        // If tokens issued from this address need to vest (i.e. this address is a pool), freeze them here\n        if (vestingTimesForPools[_from] > 0) {\n            addToVesting(_from, _to, vestingTimesForPools[_from], _value);\n        }\n\n        Transfer(msg.sender, _from, _to, _value);\n        allowanceUsed[_from][msg.sender] = true;\n\n        return true;\n    }\n\n    /**\n    *  Default method\n    *\n    *  This unnamed function is called whenever someone tries to send ether to\n    *  it. Just revert transaction because there is nothing that Token can do\n    *  with incoming ether.\n    *\n    *  Missing payable modifier prevents accidental sending of ether\n    */\n    function() public {\n    }\n\n    /**\n    *  Enable or disable transfers\n    *\n    * @param _enable - True = enable, False = disable\n    */\n    function toggleTransfers(bool _enable) external onlyOwner {\n        transfersEnabled = _enable;\n    }\n\n    /**\n    *  Destroy unsold preICO tokens\n    *\n    */\n    function closePresale() external onlyOwner {\n        // Destroyed amount is never greater than total supply,\n        // so no underflow possible here\n        uint destroyedAmount = balances[presaleWallet.addr];\n        totalSupply -= destroyedAmount;\n        balances[presaleWallet.addr] = 0;\n        Destruction(destroyedAmount);\n        Transfer(presaleWallet.addr, 0x0, destroyedAmount);\n    }\n\n    /**\n    *  Destroy unsold general sale tokens\n    *\n    */\n    function closeGeneralSale() external onlyOwner {\n        // Destroyed amount is never greater than total supply,\n        // so no underflow possible here\n        uint destroyedAmount = balances[generalSaleWallet.addr];\n        totalSupply -= destroyedAmount;\n        balances[generalSaleWallet.addr] = 0;\n        Destruction(destroyedAmount);\n        Transfer(generalSaleWallet.addr, 0x0, destroyedAmount);\n    }\n\n    function addToVesting(address _from, address _target, uint256 _vestingTime, uint256 _amount) internal {\n        if (CrowdsaleParameters.vestingTime90Days == _vestingTime) {\n            balances90dayFreeze[_target] += _amount;\n            VestingTransfer(_from, _target, _amount, _vestingTime);\n        } else if (CrowdsaleParameters.vestingTime180Days == _vestingTime) {\n            balances180dayFreeze[_target] += _amount;\n            VestingTransfer(_from, _target, _amount, _vestingTime);\n        }\n    }\n\n    function updateVesting(address sender) internal {\n        if (CrowdsaleParameters.vestingTime90Days < now) {\n            balances90dayFreeze[sender] = 0;\n        }\n        if (CrowdsaleParameters.vestingTime180Days < now) {\n            balances180dayFreeze[sender] = 0;\n        }\n    }\n}",
  "bytecode": "6060604052635b0298a0600060146101000a81548163ffffffff021916908363ffffffff160217905550635b793fa0600060186101000a81548163ffffffff021916908363ffffffff1602179055506060604051908101604052807343c5fb6b419e6df1a021b9ad205a18369c19f57f73ffffffffffffffffffffffffffffffffffffffff1681526020016305f5e10081526020016000815250600160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050606060405190810160405280730635c57cd62da489f05c3dc755baf1b148feedb073ffffffffffffffffffffffffffffffffffffffff1681526020016320c8558081526020016000815250600460008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073ae46bae68d0a884812bd20a241b6707f313cb03a73ffffffffffffffffffffffffffffffffffffffff1681526020016301312d008152602001600060189054906101000a900463ffffffff1663ffffffff16815250600760008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073fe472389f3311e5ea19b4cd2c9945b6d64732f1373ffffffffffffffffffffffffffffffffffffffff1681526020016301312d008152602001600060189054906101000a900463ffffffff1663ffffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073e37dff409af16b7358fae98d2223459b17be0b0b73ffffffffffffffffffffffffffffffffffffffff1681526020016301312d008152602001600060189054906101000a900463ffffffff1663ffffffff16815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506060604051908101604052807339482f4cd374d0dedd68b93eb7f3fc29ae7105db73ffffffffffffffffffffffffffffffffffffffff168152602001629896808152602001600060189054906101000a900463ffffffff1663ffffffff16815250601060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506060604051908101604052807303736d5b560fe0784b0f5c2d0ea76a7f15e5b99e73ffffffffffffffffffffffffffffffffffffffff168152602001624c4b408152602001600060189054906101000a900463ffffffff1663ffffffff16815250601360008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073d21726226c32570ab88e12a9ac0fb2ed20be88b973ffffffffffffffffffffffffffffffffffffffff168152602001624c4b408152602001600060189054906101000a900463ffffffff1663ffffffff16815250601660008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073c66cbb7ba88f120e86920c0f85a97b2c6878475573ffffffffffffffffffffffffffffffffffffffff1681526020016301c9c3808152602001600060149054906101000a900463ffffffff1663ffffffff16815250601960008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506060604051908101604052807324ce108d1975f79b57c6790b9d4d91fc20deaf2d73ffffffffffffffffffffffffffffffffffffffff168152602001625b8d8081526020016000815250601c60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050606060405190810160405280730125c6be773bd90c0747012f051b15692cd6df3173ffffffffffffffffffffffffffffffffffffffff168152602001624c4b4081526020016000815250601f60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073fcf0589b6fa8a3f262c4b0350215f6f0ed2f630d73ffffffffffffffffffffffffffffffffffffffff168152602001624c4b4081526020016000815250602260008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050606060405190810160405280730d016b233e305f889bc5e8a0fd6a5f99b07f8ece73ffffffffffffffffffffffffffffffffffffffff168152602001623d090081526020016000815250602560008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506060604051908101604052807368433cfb33a7fdbfa74ea5ecad0bc8b1d97d82e973ffffffffffffffffffffffffffffffffffffffff168152602001630121eac081526020016000815250602860008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073d620a688ada6c7833f0edf48a45f3e39480149a673ffffffffffffffffffffffffffffffffffffffff168152602001623d090081526020016000815250602b60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050606060405190810160405280738c393f520f75ec0f3e14d87d67e95ade4e8b16b173ffffffffffffffffffffffffffffffffffffffff1681526020016305f5e10081526020016000815250602e60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050606060405190810160405280736f842b971f0076c4eea83b051523d76f098ffa5273ffffffffffffffffffffffffffffffffffffffff1681526020016305b8d80081526020016000815250603160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060606040519081016040528073caa48d91d49f5363b2974bb4b2dbb36f0852cf8373ffffffffffffffffffffffffffffffffffffffff168152602001620f424081526020016000815250603460008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050610d056037556040805190810160405280600981526020017f546f6b656e20302e3100000000000000000000000000000000000000000000008152506038908051906020019062000d2d92919062001b03565b506040805190810160405280600a81526020017f54616b6c696d616b616e000000000000000000000000000000000000000000008152506039908051906020019062000d7b92919062001b03565b506040805190810160405280600481526020017f544b4c4e00000000000000000000000000000000000000000000000000000000815250603a908051906020019062000dc992919062001b03565b506012603b60006101000a81548160ff021916908360ff16021790555060006042556001604360006101000a81548160ff021916908315150217905550341562000e1257600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000f286001606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b62000fbe6004606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620010546007606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620010ea600a606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b62001180600d606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620012166010606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620012ac6013606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620013426016606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620013d86019606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b6200146e601c606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b62001504601f606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b6200159a6022606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620016306025606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620016c66028606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b6200175c602b606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620017f2602e606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b620018886031606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b6200191e6034606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505062001987640100000000026200201b176401000000009004565b7f7bc8649fe0277963487bc14380c1148958d426e912b8f5dde4aba958dd01e54930604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a162001bb2565b60008060008360400151603f6000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550603b60009054906101000a900460ff1660ff16925082600a0a915081846020015102905080603c6000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806042600082825401925050819055507f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3816040518082815260200191505060405180910390a1836000015173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062001b4657805160ff191683800117855562001b77565b8280016001018555821562001b77579182015b8281111562001b7657825182559160200191906001019062001b59565b5b50905062001b86919062001b8a565b5090565b62001baf91905b8082111562001bab57600081600090555060010162001b91565b5090565b90565b6121c38062001bc26000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012a578063095ea7b3146101b85780630e2d1a2a1461021257806318160ddd1461025f57806323b872dd1461028857806326f1069f14610301578063313ce5671461033a578063426a8493146103695780635a3b7e42146103cc5780635f452df11461045a57806363cea4501461049357806368504158146104a857806370a08231146104cd57806380af60021461051a5780638da5cb5b1461054357806395d89b4114610598578063a6f9dae114610626578063a9059cbb1461065f578063b0eb5162146106b9578063bef97c87146106ce578063dd62ed3e146106fb575b341561012857600080fd5b005b341561013557600080fd5b61013d610767565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017d578082015181840152602081019050610162565b50505050905090810190601f1680156101aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c357600080fd5b6101f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610805565b604051808215151515815260200191505060405180910390f35b341561021d57600080fd5b610249600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a49565b6040518082815260200191505060405180910390f35b341561026a57600080fd5b610272610b14565b6040518082815260200191505060405180910390f35b341561029357600080fd5b6102e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b1a565b604051808215151515815260200191505060405180910390f35b341561030c57600080fd5b610338600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ecc565b005b341561034557600080fd5b61034d610fab565b604051808260ff1660ff16815260200191505060405180910390f35b341561037457600080fd5b6103b2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610fbe565b604051808215151515815260200191505060405180910390f35b34156103d757600080fd5b6103df611151565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561041f578082015181840152602081019050610404565b50505050905090810190601f16801561044c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561046557600080fd5b610491600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ef565b005b341561049e57600080fd5b6104a66112ce565b005b34156104b357600080fd5b6104cb600480803515159060200190919050506114bb565b005b34156104d857600080fd5b610504600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611533565b6040518082815260200191505060405180910390f35b341561052557600080fd5b61052d61157c565b6040518082815260200191505060405180910390f35b341561054e57600080fd5b610556611582565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a357600080fd5b6105ab6115a7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105eb5780820151818401526020810190506105d0565b50505050905090810190601f1680156106185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063157600080fd5b61065d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611645565b005b341561066a57600080fd5b61069f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117f6565b604051808215151515815260200191505060405180910390f35b34156106c457600080fd5b6106cc6119e6565b005b34156106d957600080fd5b6106e1611bd3565b604051808215151515815260200191505060405180910390f35b341561070657600080fd5b610751600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611be6565b6040518082815260200191505060405180910390f35b60398054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b505050505081565b600060406004810160003690501015151561081c57fe5b60008314806108b8575060001515604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15156108c357600080fd5b82604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000604160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054603d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054603c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403039050919050565b60425481565b6000604360009054906101000a900460ff161515610b3757600080fd5b606060048101600036905010151515610b4c57fe5b610b5585611c6d565b82610b5f86610a49565b10151515610b6c57600080fd5b604060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515610bf757600080fd5b82603c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082603c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082604060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000603f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610daf57610dae8585603f60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611d3c565b5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f866040518082815260200191505060405180910390a46001604160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019150509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2757600080fd5b610fa86001606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505082611efd565b50565b603b60009054906101000a900460ff1681565b6000606060048101600036905010151515610fd557fe5b83604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561105f57600080fd5b82604060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a360019150509392505050565b60388054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111e75780601f106111bc576101008083540402835291602001916111e7565b820191906000526020600020905b8154815290600101906020018083116111ca57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124a57600080fd5b6112cb6004606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505082611efd565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132b57600080fd5b603c6000600160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050806042600082825403925050819055506000603c6000600160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453816040518082815260200191505060405180910390a16000600160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151657600080fd5b80604360006101000a81548160ff02191690831515021790555050565b6000603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60375481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163d5780601f106116125761010080835404028352916020019161163d565b820191906000526020600020905b81548152906001019060200180831161162057829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116a057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116dc57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561173857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000604360009054906101000a900460ff16151561181357600080fd5b60406004810160003690501015151561182857fe5b61183133611c6d565b8261183b33610a49565b1015151561184857600080fd5b82603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000603f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611929576119283385603f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611d3c565b5b82603c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a4357600080fd5b603c6000600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050806042600082825403925050819055506000603c6000600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453816040518082815260200191505060405180910390a16000600460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b604360009054906101000a900460ff1681565b6000604060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b42600060149054906101000a900463ffffffff1663ffffffff161015611cd3576000603d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b42600060189054906101000a900463ffffffff1663ffffffff161015611d39576000603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b81600060149054906101000a900463ffffffff1663ffffffff161415611e1b5780603d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5075049792a88eedfe4e60bb3ffeac77b4fa7f03108b81fb0b460161b983e2008385604051808381526020018281526020019250505060405180910390a3611ef7565b81600060189054906101000a900463ffffffff1663ffffffff161415611ef65780603e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5075049792a88eedfe4e60bb3ffeac77b4fa7f03108b81fb0b460161b983e2008385604051808381526020018281526020019250505060405180910390a35b5b50505050565b6000806000603b60009054906101000a900460ff1660ff16925082600a0a91508185602001510290508060406000876000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050505050565b60008060008360400151603f6000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550603b60009054906101000a900460ff1660ff16925082600a0a915081846020015102905080603c6000866000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806042600082825401925050819055507f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3816040518082815260200191505060405180910390a1836000015173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050505600a165627a7a72305820169bb9f0ac7b5d92c0bf592abd4690bea78a0218c5bb0e21cdda1ac3711aab1e0029"
}