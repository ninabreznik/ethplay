{
  "address": "0x18293de649fb8d8e1c8824abd214f7480c61e4a4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ShroomeryFarmer",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.19;\n\ncontract ShroomeryFarmer{\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryShrimp;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    function ShroomeryFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){\n        return hatcheryShrimp[msg.sender];\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "6060604052620151806000556127106001556113886002556003805460ff19169055341561002c57600080fd5b6003805461010060a860020a03191661010033600160a060020a0316021790556109148061005b6000396000f30060606040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a0f8168811461012157806312065fe014610150578063158ef93e14610175578063229824c41461019c57806326fd8422146101b85780632e9392bb146101d15780633955f0fe146101e45780633b653755146101f95780633bc0461a146102045780633ec862a81461021a57806343ce742214610239578063467ece791461024c5780634f74acfe1461026b5780637267036114610273578063732e77d0146102925780637e2cb974146102a55780637e56fde5146102c45780638e316327146102da5780639ca423b3146102f0578063c2127e031461030f578063d7c8843b14610322575b600080fd5b341561012c57600080fd5b610134610341565b604051600160a060020a03909116815260200160405180910390f35b341561015b57600080fd5b610163610355565b60405190815260200160405180910390f35b341561018057600080fd5b610188610363565b604051901515815260200160405180910390f35b34156101a757600080fd5b61016360043560243560443561036c565b34156101c357600080fd5b6101636004356024356103b9565b34156101dc57600080fd5b6101636103cf565b34156101ef57600080fd5b6101f76103d5565b005b6101f76004356104bf565b341561020f57600080fd5b6101636004356104de565b341561022557600080fd5b6101f7600160a060020a03600435166104fb565b341561024457600080fd5b61016361066d565b341561025757600080fd5b610163600160a060020a03600435166106a6565b6101f76106b8565b341561027e57600080fd5b610163600160a060020a0360043516610781565b341561029d57600080fd5b610163610793565b34156102b057600080fd5b610163600160a060020a0360043516610799565b34156102cf57600080fd5b6101636004356107ab565b34156102e557600080fd5b6101636004356107c1565b34156102fb57600080fd5b610134600160a060020a03600435166107da565b341561031a57600080fd5b6101636107f5565b341561032d57600080fd5b610163600160a060020a0360043516610811565b6003546101009004600160a060020a031681565b600160a060020a0330163190565b60035460ff1681565b60006103b161037d60015484610864565b6103ac6002546103a16103a66103956001548a610864565b6103a16002548c610864565b61089a565b896108a9565b6108a9565b949350505050565b60006103c8838360085461036c565b9392505050565b60085481565b6003546000908190819060ff1615156103ed57600080fd5b6103f561066d565b9250610400836107c1565b915061040b826104de565b600160a060020a033316600090815260056020908152604080832083905560069091529020429055600854909150610443908461089a565b6008556003546101009004600160a060020a03166108fc82150282604051600060405180830381858888f19350505050151561047e57600080fd5b33600160a060020a03166108fc61049584846108c0565b9081150290604051600060405180830381858888f1935050505015156104ba57600080fd5b505050565b600854156104cc57600080fd5b6003805460ff19166001179055600855565b60006104f56104ee836004610864565b60646108a9565b92915050565b600354600090819060ff16151561051157600080fd5b600160a060020a03338116600090815260076020526040902054161580156105545750600160a060020a0333811660008181526007602052604090205490911614155b156105965733600160a060020a039081166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff19169185169190911790555b61059e61066d565b91506105ac826000546108a9565b600160a060020a0333166000908152600460205260409020549091506105d2908261089a565b600160a060020a0333811660009081526004602090815260408083209490945560058082528483208390556006825284832042905560078252848320549093168252829052919091205461062b916103a19085906108a9565b600160a060020a033381166000908152600760209081526040808320549093168252600590522055600854610665906103a184600a6108a9565b600855505050565b60006106a16005600033600160a060020a0316600160a060020a03168152602001908152602001600020546103a133610811565b905090565b60066020526000908152604090205481565b60035460009060ff1615156106cc57600080fd5b6106e9346106e430600160a060020a031631346108c0565b6103b9565b90506106fd816106f8836104de565b6108c0565b6003549091506101009004600160a060020a03166108fc61071d346104de565b9081150290604051600060405180830381858888f19350505050151561074257600080fd5b600160a060020a033316600090815260056020526040902054610765908261089a565b600160a060020a03331660009081526005602052604090205550565b60056020526000908152604090205481565b60005481565b60046020526000908152604090205481565b60006104f58230600160a060020a0316316103b9565b60006104f58260085430600160a060020a03163161036c565b600760205260009081526040902054600160a060020a031681565b600160a060020a03331660009081526004602052604090205490565b60008054600160a060020a03831682526006602052604082205482916108419161083c9042906108c0565b6108d2565b600160a060020a0384166000908152600460205260409020549091506103c89082905b6000808315156108775760009150610893565b5082820282848281151561088757fe5b041461088f57fe5b8091505b5092915050565b60008282018381101561088f57fe5b60008082848115156108b757fe5b04949350505050565b6000828211156108cc57fe5b50900390565b60008183106108e157816103c8565b50909190505600a165627a7a72305820ee34fd4df4468423abb25bc345b9be5c2b40fdb6b3065cff0842421a499f227c0029"
}