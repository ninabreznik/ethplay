{
  "address": "0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSender",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-08\n*/\n\npragma solidity ^0.4.18;\n\ncontract ERC20 {\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n}\n\n\ncontract MultiSender {\n  function tokenFallback(address /*_from*/, uint _value, bytes /*_data*/) public {\n    require(false);\n  }\n\n  function multisendToken(address tokAddress, address[] _dests, uint256[] _amounts) public {\n    ERC20 tok = ERC20(tokAddress);\n    for (uint i = 0; i < _dests.length; i++){\n        tok.transferFrom(msg.sender, _dests[i], _amounts[i]);\n    }\n  }\n\n  function multisendEth(address[] _dests, uint256[] _amounts) public payable {\n    for (uint i = 0; i < _dests.length; i++){\n        _dests[i].transfer(_amounts[i]);\n    }\n    require(this.balance == 0);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6103bf8061001e6000396000f3006060604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b66f3f5811461005b578063106524a514610107578063c0ee0b8a1461018b575b600080fd5b341561006657600080fd5b6101056004803573ffffffffffffffffffffffffffffffffffffffff16906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506101fd95505050505050565b005b6101056004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506102ee95505050505050565b341561019657600080fd5b6101056004803573ffffffffffffffffffffffffffffffffffffffff169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061005695505050505050565b8260005b83518110156102e7578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3386848151811061023357fe5b9060200190602002015186858151811061024957fe5b906020019060200201516040517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815273ffffffffffffffffffffffffffffffffffffffff93841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156102c857600080fd5b5af115156102d557600080fd5b50505060405180515050600101610201565b5050505050565b60005b825181101561036c5782818151811061030657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc83838151811061033557fe5b906020019060200201519081150290604051600060405180830381858888f19350505050151561036457600080fd5b6001016102f1565b73ffffffffffffffffffffffffffffffffffffffff3016311561038e57600080fd5b5050505600a165627a7a72305820d39c709e6fcfb5c0adf34b6b61323f468d55142353a7df0223c4d1189956421d0029"
}