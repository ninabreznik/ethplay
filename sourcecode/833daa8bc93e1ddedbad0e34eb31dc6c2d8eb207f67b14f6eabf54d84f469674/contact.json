{
  "address": "0x2acb0bb95063756d66f67d0c9624b12cac529fb3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BoomstarterToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-08\n*/\n\npragma solidity 0.4.23;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/token/BurnableToken.sol\n\n/**\n * @title Token which could be burned by any holder.\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed from, uint256 amount);\n\n    /**\n     * Function to burn msg.sender's tokens.\n     *\n     * @param _amount amount of tokens to burn\n     *\n     * @return boolean that indicates if the operation was successful\n     */\n    function burn(uint256 _amount)\n        public\n        returns (bool)\n    {\n        address from = msg.sender;\n\n        require(_amount > 0);\n        require(_amount <= balances[from]);\n\n        totalSupply = totalSupply.sub(_amount);\n        balances[from] = balances[from].sub(_amount);\n        Burn(from, _amount);\n        Transfer(from, address(0), _amount);\n\n        return true;\n    }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n// File: contracts/token/TokenWithApproveAndCallMethod.sol\n\n/// @title Utility interface for approveAndCall token function.\ninterface IApprovalRecipient {\n    /**\n     * @notice Signals that token holder approved spending of tokens and some action should be taken.\n     *\n     * @param _sender token holder which approved spending of his tokens\n     * @param _value amount of tokens approved to be spent\n     * @param _extraData any extra data token holder provided to the call\n     *\n     * @dev warning: implementors should validate sender of this message (it should be the token) and make no further\n     *      assumptions unless validated them via ERC20 methods.\n     */\n    function receiveApproval(address _sender, uint256 _value, bytes _extraData) public;\n}\n\n\n/**\n * @title Mixin adds approveAndCall token function.\n */\ncontract TokenWithApproveAndCallMethod is StandardToken {\n\n    /**\n     * @notice Approves spending tokens and immediately triggers token recipient logic.\n     *\n     * @param _spender contract which supports IApprovalRecipient and allowed to receive tokens\n     * @param _value amount of tokens approved to be spent\n     * @param _extraData any extra data which to be provided to the _spender\n     *\n     * By invoking this utility function token holder could do two things in one transaction: approve spending his\n     * tokens and execute some external contract which spends them on token holder's behalf.\n     * It can't be known if _spender's invocation succeed or not.\n     * This function will throw if approval failed.\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public {\n        require(approve(_spender, _value));\n        IApprovalRecipient(_spender).receiveApproval(msg.sender, _value, _extraData);\n    }\n}\n\n// File: mixbytes-solidity/contracts/ownership/multiowned.sol\n\n// Copyright (C) 2017  MixBytes, LLC\n\n// Licensed under the Apache License, Version 2.0 (the \"License\").\n// You may not use this file except in compliance with the License.\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\n// Audit, refactoring and improvements by github.com/Eenae\n\n// @authors:\n// Gav Wood <[emailÂ protected]>\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\n// single, or, crucially, each of a number of, designated owners.\n// usage:\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\n// interior is executed.\n\npragma solidity ^0.4.15;\n\n\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\n// TODO acceptOwnership\ncontract multiowned {\n\n\t// TYPES\n\n    // struct for the status of a pending operation.\n    struct MultiOwnedOperationPendingState {\n        // count of confirmations needed\n        uint yetNeeded;\n\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\n        uint ownersDone;\n\n        // position of this operation key in m_multiOwnedPendingIndex\n        uint index;\n    }\n\n\t// EVENTS\n\n    event Confirmation(address owner, bytes32 operation);\n    event Revoke(address owner, bytes32 operation);\n    event FinalConfirmation(address owner, bytes32 operation);\n\n    // some others are in the case of an owner changing.\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerAdded(address newOwner);\n    event OwnerRemoved(address oldOwner);\n\n    // the last one is emitted if the required signatures change\n    event RequirementChanged(uint newRequirement);\n\n\t// MODIFIERS\n\n    // simple single-sig function modifier.\n    modifier onlyowner {\n        require(isOwner(msg.sender));\n        _;\n    }\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\n    // that later attempts can be realised as the same underlying operation and\n    // thus count as confirmations.\n    modifier onlymanyowners(bytes32 _operation) {\n        if (confirmAndCheck(_operation)) {\n            _;\n        }\n        // Even if required number of confirmations has't been collected yet,\n        // we can't throw here - because changes to the state have to be preserved.\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\n    }\n\n    modifier validNumOwners(uint _numOwners) {\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\n        _;\n    }\n\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\n        require(_required > 0 && _required <= _numOwners);\n        _;\n    }\n\n    modifier ownerExists(address _address) {\n        require(isOwner(_address));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address _address) {\n        require(!isOwner(_address));\n        _;\n    }\n\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\n        require(isOperationActive(_operation));\n        _;\n    }\n\n\t// METHODS\n\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\n    function multiowned(address[] _owners, uint _required)\n        public\n        validNumOwners(_owners.length)\n        multiOwnedValidRequirement(_required, _owners.length)\n    {\n        assert(c_maxOwners <= 255);\n\n        m_numOwners = _owners.length;\n        m_multiOwnedRequired = _required;\n\n        for (uint i = 0; i < _owners.length; ++i)\n        {\n            address owner = _owners[i];\n            // invalid and duplicate addresses are not allowed\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\n\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\n            m_owners[currentOwnerIndex] = owner;\n            m_ownerIndex[owner] = currentOwnerIndex;\n        }\n\n        assertOwnersAreConsistent();\n    }\n\n    /// @notice replaces an owner `_from` with another `_to`.\n    /// @param _from address of owner to replace\n    /// @param _to address of new owner\n    // All pending operations will be canceled!\n    function changeOwner(address _from, address _to)\n        external\n        ownerExists(_from)\n        ownerDoesNotExist(_to)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\n        m_owners[ownerIndex] = _to;\n        m_ownerIndex[_from] = 0;\n        m_ownerIndex[_to] = ownerIndex;\n\n        assertOwnersAreConsistent();\n        OwnerChanged(_from, _to);\n    }\n\n    /// @notice adds an owner\n    /// @param _owner address of new owner\n    // All pending operations will be canceled!\n    function addOwner(address _owner)\n        external\n        ownerDoesNotExist(_owner)\n        validNumOwners(m_numOwners + 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        m_numOwners++;\n        m_owners[m_numOwners] = _owner;\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\n\n        assertOwnersAreConsistent();\n        OwnerAdded(_owner);\n    }\n\n    /// @notice removes an owner\n    /// @param _owner address of owner to remove\n    // All pending operations will be canceled!\n    function removeOwner(address _owner)\n        external\n        ownerExists(_owner)\n        validNumOwners(m_numOwners - 1)\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\n        m_owners[ownerIndex] = 0;\n        m_ownerIndex[_owner] = 0;\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\n        reorganizeOwners();\n\n        assertOwnersAreConsistent();\n        OwnerRemoved(_owner);\n    }\n\n    /// @notice changes the required number of owner signatures\n    /// @param _newRequired new number of signatures required\n    // All pending operations will be canceled!\n    function changeRequirement(uint _newRequired)\n        external\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_multiOwnedRequired = _newRequired;\n        clearPending();\n        RequirementChanged(_newRequired);\n    }\n\n    /// @notice Gets an owner by 0-indexed position\n    /// @param ownerIndex 0-indexed owner position\n    function getOwner(uint ownerIndex) public constant returns (address) {\n        return m_owners[ownerIndex + 1];\n    }\n\n    /// @notice Gets owners\n    /// @return memory array of owners\n    function getOwners() public constant returns (address[]) {\n        address[] memory result = new address[](m_numOwners);\n        for (uint i = 0; i < m_numOwners; i++)\n            result[i] = getOwner(i);\n\n        return result;\n    }\n\n    /// @notice checks if provided address is an owner address\n    /// @param _addr address to check\n    /// @return true if it's an owner\n    function isOwner(address _addr) public constant returns (bool) {\n        return m_ownerIndex[_addr] > 0;\n    }\n\n    /// @notice Tests ownership of the current caller.\n    /// @return true if it's an owner\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n    // addOwner/changeOwner and to isOwner.\n    function amIOwner() external constant onlyowner returns (bool) {\n        return true;\n    }\n\n    /// @notice Revokes a prior confirmation of the given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    function revoke(bytes32 _operation)\n        external\n        multiOwnedOperationIsActive(_operation)\n        onlyowner\n    {\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        var pending = m_multiOwnedPending[_operation];\n        require(pending.ownersDone & ownerIndexBit > 0);\n\n        assertOperationIsConsistent(_operation);\n\n        pending.yetNeeded++;\n        pending.ownersDone -= ownerIndexBit;\n\n        assertOperationIsConsistent(_operation);\n        Revoke(msg.sender, _operation);\n    }\n\n    /// @notice Checks if owner confirmed given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    /// @param _owner an owner address\n    function hasConfirmed(bytes32 _operation, address _owner)\n        external\n        constant\n        multiOwnedOperationIsActive(_operation)\n        ownerExists(_owner)\n        returns (bool)\n    {\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\n    }\n\n    // INTERNAL METHODS\n\n    function confirmAndCheck(bytes32 _operation)\n        private\n        onlyowner\n        returns (bool)\n    {\n        if (512 == m_multiOwnedPendingIndex.length)\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\n            // we won't be able to do it because of block gas limit.\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\n            // TODO use more graceful approach like compact or removal of clearPending completely\n            clearPending();\n\n        var pending = m_multiOwnedPending[_operation];\n\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\n        if (! isOperationActive(_operation)) {\n            // reset count of confirmations needed.\n            pending.yetNeeded = m_multiOwnedRequired;\n            // reset which owners have confirmed (none) - set our bitmap to 0.\n            pending.ownersDone = 0;\n            pending.index = m_multiOwnedPendingIndex.length++;\n            m_multiOwnedPendingIndex[pending.index] = _operation;\n            assertOperationIsConsistent(_operation);\n        }\n\n        // determine the bit to set for this owner.\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        // make sure we (the message sender) haven't confirmed this operation previously.\n        if (pending.ownersDone & ownerIndexBit == 0) {\n            // ok - check if count is enough to go ahead.\n            assert(pending.yetNeeded > 0);\n            if (pending.yetNeeded == 1) {\n                // enough confirmations: reset and run interior.\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\n                delete m_multiOwnedPending[_operation];\n                FinalConfirmation(msg.sender, _operation);\n                return true;\n            }\n            else\n            {\n                // not enough: record that this owner in particular confirmed.\n                pending.yetNeeded--;\n                pending.ownersDone |= ownerIndexBit;\n                assertOperationIsConsistent(_operation);\n                Confirmation(msg.sender, _operation);\n            }\n        }\n    }\n\n    // Reclaims free slots between valid owners in m_owners.\n    // TODO given that its called after each removal, it could be simplified.\n    function reorganizeOwners() private {\n        uint free = 1;\n        while (free < m_numOwners)\n        {\n            // iterating to the first free slot from the beginning\n            while (free < m_numOwners && m_owners[free] != 0) free++;\n\n            // iterating to the first occupied slot from the end\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n\n            // swap, if possible, so free slot is located at the end after the swap\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n            {\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\n                m_owners[free] = m_owners[m_numOwners];\n                m_ownerIndex[m_owners[free]] = free;\n                m_owners[m_numOwners] = 0;\n            }\n        }\n    }\n\n    function clearPending() private onlyowner {\n        uint length = m_multiOwnedPendingIndex.length;\n        // TODO block gas limit\n        for (uint i = 0; i < length; ++i) {\n            if (m_multiOwnedPendingIndex[i] != 0)\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\n        }\n        delete m_multiOwnedPendingIndex;\n    }\n\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\n        return ownerIndex;\n    }\n\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\n        return 2 ** ownerIndex;\n    }\n\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\n    }\n\n\n    function assertOwnersAreConsistent() private constant {\n        assert(m_numOwners > 0);\n        assert(m_numOwners <= c_maxOwners);\n        assert(m_owners[0] == 0);\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\n    }\n\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\n        var pending = m_multiOwnedPending[_operation];\n        assert(0 != pending.yetNeeded);\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\n    }\n\n\n   \t// FIELDS\n\n    uint constant c_maxOwners = 250;\n\n    // the number of owners that must confirm the same operation before it is run.\n    uint public m_multiOwnedRequired;\n\n\n    // pointer used to find a free slot in m_owners\n    uint public m_numOwners;\n\n    // list of owners (addresses),\n    // slot 0 is unused so there are no owner which index is 0.\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\n    address[256] internal m_owners;\n\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\n    mapping(address => uint) internal m_ownerIndex;\n\n\n    // the ongoing operations.\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\n    bytes32[] internal m_multiOwnedPendingIndex;\n}\n\n// File: mixbytes-solidity/contracts/security/ArgumentsChecker.sol\n\n// Copyright (C) 2017  MixBytes, LLC\n\n// Licensed under the Apache License, Version 2.0 (the \"License\").\n// You may not use this file except in compliance with the License.\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n\npragma solidity ^0.4.15;\n\n\n/// @title utility methods and modifiers of arguments validation\ncontract ArgumentsChecker {\n\n    /// @dev check which prevents short address attack\n    modifier payloadSizeIs(uint size) {\n       require(msg.data.length == size + 4 /* function selector */);\n       _;\n    }\n\n    /// @dev check that address is valid\n    modifier validAddress(address addr) {\n        require(addr != address(0));\n        _;\n    }\n}\n\n// File: contracts/BoomstarterToken.sol\n\n/**\n * @title Boomstarter project token.\n *\n * Standard ERC20 burnable token plus logic to support token freezing for crowdsales.\n */\ncontract BoomstarterToken is ArgumentsChecker, multiowned, BurnableToken, StandardToken, TokenWithApproveAndCallMethod {\n\n    // MODIFIERS\n\n    /// @dev makes transfer possible if tokens are unfrozen OR if the caller is a sale account\n    modifier saleOrUnfrozen(address account) {\n        require( (m_frozen == false) || isSale(account) );\n        _;\n    }\n\n    modifier onlySale(address account) {\n        require(isSale(account));\n        _;\n    }\n\n    modifier privilegedAllowed {\n        require(m_allowPrivileged);\n        _;\n    }\n\n\n    // PUBLIC FUNCTIONS\n\n    /**\n     * @notice Constructs token.\n     *\n     * @param _initialOwners initial multi-signatures, see comment below\n     * @param _signaturesRequired quorum of multi-signatures\n     *\n     * Initial owners have power over the token contract only during bootstrap phase (early investments and token\n     * sales). To be precise, the owners can set sales (which can transfer frozen tokens) during\n     * bootstrap phase. After final token sale any control over the token removed by issuing disablePrivileged call.\n     * For lifecycle example please see test/BootstarterTokenTest.js, 'test full lifecycle'.\n     */\n    function BoomstarterToken(address[] _initialOwners, uint _signaturesRequired)\n        public\n        multiowned(_initialOwners, _signaturesRequired)\n    {\n        totalSupply = MAX_SUPPLY;\n        balances[msg.sender] = totalSupply;\n        // mark initial owner as a sale to enable frozen transfer for them\n        // as well as the option to set next sale without multi-signature\n        m_sales[msg.sender] = true;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n     * @notice Standard transfer() but with check of frozen status\n     *\n     * @param _to the address to transfer to\n     * @param _value the amount to be transferred\n     *\n     * @return true iff operation was successfully completed\n     */\n    function transfer(address _to, uint256 _value)\n        public\n        saleOrUnfrozen(msg.sender)\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @notice Standard transferFrom but incorporating frozen tokens logic\n     *\n     * @param _from address the address which you want to send tokens from\n     * @param _to address the address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     *\n     * @return true iff operation was successfully completed\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        saleOrUnfrozen(msg.sender)\n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * Function to burn msg.sender's tokens. Overridden to prohibit burning frozen tokens\n     *\n     * @param _amount amount of tokens to burn\n     *\n     * @return boolean that indicates if the operation was successful\n     */\n    function burn(uint256 _amount)\n        public\n        saleOrUnfrozen(msg.sender)\n        returns (bool)\n    {\n        return super.burn(_amount);\n    }\n\n    // ADMINISTRATIVE FUNCTIONS\n\n    /**\n     * @notice Sets sale status of an account.\n     *\n     * @param account account address\n     * @param isSale enables this account to transfer tokens in frozen state\n     *\n     * Function is used only during token sale phase, before disablePrivileged() is called.\n     */\n    function setSale(address account, bool isSale)\n        external\n        validAddress(account)\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_sales[account] = isSale;\n    }\n\n    /**\n     * @notice Same as setSale, but must be called from the current active sale and\n     *         doesn't need multisigning (it's done in the finishSale call anyway)\n     */\n    function switchToNextSale(address _nextSale)\n        external\n        validAddress(_nextSale)\n        onlySale(msg.sender)\n    {\n        m_sales[msg.sender] = false;\n        m_sales[_nextSale] = true;\n    }\n\n    /// @notice Make transfer of tokens available to everyone\n    function thaw()\n        external\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_frozen = false;\n    }\n\n    /// @notice Disables further use of privileged functions: setSale, thaw\n    function disablePrivileged()\n        external\n        privilegedAllowed\n        onlymanyowners(keccak256(msg.data))\n    {\n        // shouldn't be frozen otherwise will be impossible to unfreeze\n        require( false == m_frozen );\n        m_allowPrivileged = false;\n    }\n\n\n    // INTERNAL FUNCTIONS\n\n    function isSale(address account) private view returns (bool) {\n        return m_sales[account];\n    }\n\n\n    // FIELDS\n\n    /// @notice set of sale accounts which can freeze tokens\n    mapping (address => bool) public m_sales;\n\n    /// @notice allows privileged functions (token sale phase)\n    bool public m_allowPrivileged = true;\n\n    /// @notice when true - all tokens are frozen and only sales can move their tokens\n    ///         when false - all tokens are unfrozen and can be moved by their owners\n    bool public m_frozen = true;\n\n    // CONSTANTS\n\n    string public constant name = \"BoomstarterCoin\";\n    string public constant symbol = \"BC\";\n    uint8 public constant decimals = 18;\n\n    uint public constant MAX_SUPPLY = uint(36) * uint(1000000) * uint(10) ** uint(decimals);\n}",
  "bytecode": "6080604052610109805461ff001960ff19909116600117166101001790553480156200002a57600080fd5b5060405162001d0f38038062001d0f833981016040528051602082015191018051909190829082906000908190819081811180156200006a575060fa8111155b15156200007657600080fd5b8486516000821180156200008a5750808211155b15156200009657600080fd5b8751600155600087815595505b875186101562000165578786815181101515620000bc57fe5b90602001906020020151945084600160a060020a0316600014158015620000f45750620000f28564010000000062000203810204565b155b15156200010057600080fd5b620001176001870164010000000062000220810204565b93508460028561010081106200012957fe5b018054600160a060020a031916600160a060020a03928316179055851660009081526101026020526040902084905560019590950194620000a3565b6200017864010000000062000240810204565b50506a1dc74be914d16aa4000000610105818155600160a060020a033316600081815261010660209081526040808320959095556101088152848220805460ff1916600117905592548451908152935191995097507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef965091829003019350915050a3505062000290565b600160a060020a0316600090815261010260205260408120541190565b6000811580159062000233575060fa8211155b15156200023c57fe5b5090565b6001546000106200024d57fe5b60015460fa10156200025b57fe5b600254600160a060020a0316156200026f57fe5b6000541580159062000285575060015460005411155b15156200028e57fe5b565b611a6f80620002a06000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461018f578063095ea7b3146102195780631019dc591461025157806311a1050814610279578063162255e11461029a578063173825d9146102af57806318160ddd146102d05780632090b0a8146102f757806323b872dd1461030c5780632f54bf6e14610336578063313ce5671461035757806332cb6b0c146103825780634123cb6b1461039757806342966c68146103ac5780634e4ab830146103c45780635920375c146103d95780637065cb48146103ee57806370a082311461040f578063787d64e41461043057806395d89b4114610445578063a0e67e2b1461045a578063a9059cbb146104bf578063b51fdb9a146104e3578063b75c7dc614610504578063ba51a6df1461051c578063c2cf732614610534578063c41a360a14610558578063cae9ca511461058c578063dd62ed3e146105f5578063f00d4b5d1461061c578063f450cfee14610643575b600080fd5b34801561019b57600080fd5b506101a4610658565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061023d600160a060020a036004351660243561068f565b604080519115158252519081900360200190f35b34801561025d57600080fd5b50610277600160a060020a03600435166024351515610734565b005b34801561028557600080fd5b50610277600160a060020a03600435166107b4565b3480156102a657600080fd5b5061023d61081a565b3480156102bb57600080fd5b50610277600160a060020a0360043516610829565b3480156102dc57600080fd5b506102e5610985565b60408051918252519081900360200190f35b34801561030357600080fd5b5061023d61098c565b34801561031857600080fd5b5061023d600160a060020a0360043581169060243516604435610996565b34801561034257600080fd5b5061023d600160a060020a03600435166109d6565b34801561036357600080fd5b5061036c6109f3565b6040805160ff9092168252519081900360200190f35b34801561038e57600080fd5b506102e56109f8565b3480156103a357600080fd5b506102e5610a07565b3480156103b857600080fd5b5061023d600435610a0d565b3480156103d057600080fd5b5061023d610a49565b3480156103e557600080fd5b50610277610a66565b3480156103fa57600080fd5b50610277600160a060020a0360043516610ab4565b34801561041b57600080fd5b506102e5600160a060020a0360043516610bdc565b34801561043c57600080fd5b506102e5610bf8565b34801561045157600080fd5b506101a4610bfe565b34801561046657600080fd5b5061046f610c35565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104ab578181015183820152602001610493565b505050509050019250505060405180910390f35b3480156104cb57600080fd5b5061023d600160a060020a0360043516602435610cb4565b3480156104ef57600080fd5b5061023d600160a060020a0360043516610cf2565b34801561051057600080fd5b50610277600435610d08565b34801561052857600080fd5b50610277600435610dd1565b34801561054057600080fd5b5061023d600435600160a060020a0360243516610e62565b34801561056457600080fd5b50610570600435610eb7565b60408051600160a060020a039092168252519081900360200190f35b34801561059857600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610277948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610edb9650505050505050565b34801561060157600080fd5b506102e5600160a060020a0360043581169060243516610fea565b34801561062857600080fd5b50610277600160a060020a0360043581169060243516611016565b34801561064f57600080fd5b5061027761114e565b60408051808201909152600f81527f426f6f6d73746172746572436f696e0000000000000000000000000000000000602082015281565b60008115806106c25750600160a060020a0333811660009081526101076020908152604080832093871683529290522054155b15156106cd57600080fd5b600160a060020a0333811660008181526101076020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b81600160a060020a038116151561074a57600080fd5b6101095460ff16151561075c57600080fd5b600036604051808383808284378201915050925050506040518091039020610783816111b0565b156107ae57600160a060020a038416600090815261010860205260409020805460ff19168415151790555b50505050565b80600160a060020a03811615156107ca57600080fd5b336107d48161137c565b15156107df57600080fd5b5050600160a060020a0333811660009081526101086020526040808220805460ff199081169091559390921681522080549091166001179055565b61010954610100900460ff1681565b600081610835816109d6565b151561084057600080fd5b6001805403600081118015610856575060fa8111155b151561086157600080fd5b60005460018054036000821180156108795750808211155b151561088457600080fd5b6000366040518083838082843782019150509250505060405180910390206108ab816111b0565b1561097c576108b861139b565b6108c06113e6565b600160a060020a038716600090815261010260205260409020546108e390611486565b9550600060028761010081106108f557fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790558716600090815261010260205260408120556109376114a4565b61093f61139b565b60408051600160a060020a038916815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a15b50505050505050565b6101055481565b6101095460ff1681565b610109546000903390610100900460ff1615806109b757506109b78161137c565b15156109c257600080fd5b6109cd858585611645565b95945050505050565b600160a060020a0316600090815261010260205260408120541190565b601281565b6a1dc74be914d16aa400000081565b60015481565b610109546000903390610100900460ff161580610a2e5750610a2e8161137c565b1515610a3957600080fd5b610a428361175d565b9392505050565b6000610a54336109d6565b1515610a5f57600080fd5b5060015b90565b6101095460ff161515610a7857600080fd5b600036604051808383808284378201915050925050506040518091039020610a9f816111b0565b15610ab157610109805461ff00191690555b50565b80610abe816109d6565b15610ac857600080fd5b600154600101600081118015610adf575060fa8111155b1515610aea57600080fd5b600036604051808383808284378201915050925050506040518091039020610b11816111b0565b156107ae57610b1e61139b565b610b266113e6565b6001805481019081905584906002906101008110610b4057fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600154610b7890611486565b600160a060020a03851660009081526101026020526040902055610b9a61139b565b60408051600160a060020a038616815290517f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c39181900360200190a150505050565b600160a060020a03166000908152610106602052604090205490565b60005481565b60408051808201909152600281527f4243000000000000000000000000000000000000000000000000000000000000602082015281565b6060806000600154604051908082528060200260200182016040528015610c66578160200160208202803883390190505b509150600090505b600154811015610cae57610c8181610eb7565b8282815181101515610c8f57fe5b600160a060020a03909216602092830290910190910152600101610c6e565b50919050565b610109546000903390610100900460ff161580610cd55750610cd58161137c565b1515610ce057600080fd5b610cea8484611871565b949350505050565b6101086020526000908152604090205460ff1681565b60008082610d1581611933565b1515610d2057600080fd5b610d29336109d6565b1515610d3457600080fd5b610d3d33611948565b6000858152610103602052604081206001810154929550935090841611610d6357600080fd5b610d6c84611977565b815460019081018355820180548490039055610d8784611977565b60408051600160a060020a03331681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a150505050565b80600154600082118015610de55750808211155b1515610df057600080fd5b600036604051808383808284378201915050925050506040518091039020610e17816111b0565b156107ae576000849055610e296113e6565b6040805185815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a150505050565b600082610e6e81611933565b1515610e7957600080fd5b82610e83816109d6565b1515610e8e57600080fd5b610e9784611948565b600086815261010360205260409020600101541615159250505092915050565b60006002600183016101008110610eca57fe5b0154600160a060020a031692915050565b610ee5838361068f565b1515610ef057600080fd5b82600160a060020a031663a2d578533384846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f88578181015183820152602001610f70565b50505050905090810190601f168015610fb55780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610fd657600080fd5b505af115801561097c573d6000803e3d6000fd5b600160a060020a0391821660009081526101076020908152604080832093909416825291909152205490565b600082611022816109d6565b151561102d57600080fd5b82611037816109d6565b1561104157600080fd5b600036604051808383808284378201915050925050506040518091039020611068816111b0565b156111465761107561139b565b61107d6113e6565b600160a060020a038616600090815261010260205260409020546110a090611486565b93508460028561010081106110b157fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790558681166000908152610102602052604080822082905591871681522084905561110061139b565b60408051600160a060020a0380891682528716602082015281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a15b505050505050565b6101095460ff16151561116057600080fd5b600036604051808383808284378201915050925050506040518091039020611187816111b0565b15610ab15761010954610100900460ff16156111a257600080fd5b610109805460ff1916905550565b60008060006111be336109d6565b15156111c957600080fd5b6101045461020014156111de576111de6113e6565b60008481526101036020526040902091506111f884611933565b151561124b5760008054835560018084019190915561010480549161121f919083016119e6565b600283018190556101048054869290811061123657fe5b60009182526020909120015561124b84611977565b61125433611948565b9050808260010154166000141561137557815460001061127057fe5b81546001141561131557600084815261010360205260409020600201546101048054909190811061129d57fe5b600091825260208083209091018290558582526101038152604080832083815560018101849055600201929092558151600160a060020a033316815290810186905281517f367569357efc39b74a025c4ba1d64068b2b574e3b0d081c48d42f7feeca4cd16929181900390910190a160019250611375565b81546000190182556001820180548217905561133084611977565b60408051600160a060020a03331681526020810186905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a15b5050919050565b600160a060020a03166000908152610108602052604090205460ff1690565b6001546000106113a757fe5b60015460fa10156113b457fe5b600254600160a060020a0316156113c757fe5b600054158015906113dc575060015460005411155b15156113e457fe5b565b6000806113f2336109d6565b15156113fd57600080fd5b50506101045460005b818110156114755761010480548290811061141d57fe5b6000918252602090912001541561146d5761010360006101048381548110151561144357fe5b60009182526020808320909101548352820192909252604001812081815560018101829055600201555b600101611406565b6114826101046000611a0f565b5050565b60008115801590611498575060fa8211155b15156114a057fe5b5090565b60015b600154811015610ab1575b600154811080156114da575060028161010081106114cc57fe5b0154600160a060020a031615155b156114e7576001016114b2565b600180541180156115115750600154600290610100811061150457fe5b0154600160a060020a0316155b1561152557600180546000190190556114e7565b600154811080156115505750600154600290610100811061154257fe5b0154600160a060020a031615155b80156115725750600281610100811061156557fe5b0154600160a060020a0316155b1561164057600154600290610100811061158857fe5b0154600160a060020a031660028261010081106115a157fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905580610102600060028361010081106115e157fe5b0154600160a060020a031681526020810191909152604001600090812091909155600154600290610100811061161357fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555b6114a7565b600160a060020a038084166000908152610107602090815260408083203385168452825280832054938616835261010690915281205490919061168e908463ffffffff6119c516565b600160a060020a038086166000908152610106602052604080822093909355908716815220546116c4908463ffffffff6119d416565b600160a060020a038616600090815261010660205260409020556116ee818463ffffffff6119d416565b600160a060020a03808716600081815261010760209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60003381831161176c57600080fd5b600160a060020a0381166000908152610106602052604090205483111561179257600080fd5b610105546117a6908463ffffffff6119d416565b61010555600160a060020a038116600090815261010660205260409020546117d4908463ffffffff6119d416565b600160a060020a03821660008181526101066020908152604091829020939093558051868152905191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592918290030190a2604080518481529051600091600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600160a060020a0333166000908152610106602052604081205461189b908363ffffffff6119d416565b600160a060020a033381166000908152610106602052604080822093909355908516815220546118d1908363ffffffff6119c516565b600160a060020a03808516600081815261010660209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60009081526101036020526040902054151590565b600160a060020a03811660009081526101026020526040812054819061196d90611486565b60020a9392505050565b6000818152610103602052604090208054151561199057fe5b6002810154610104805484929081106119a557fe5b600091825260209091200154146119b857fe5b6000548154111561148257fe5b600082820183811015610a4257fe5b6000828211156119e057fe5b50900390565b815481835581811115611a0a57600083815260209020611a0a918101908301611a29565b505050565b5080546000825590600052602060002090810190610ab191905b610a6391905b808211156114a05760008155600101611a2f5600a165627a7a72305820a7a4edbfb2960ee15625189fc922c6ff955a9b81fc166c8d7bda314fd712bf0700290000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000007bfe571d5a5ae244b5212f69952f3b19ff1b7e54000000000000000000000000386f2bd2808e96c8a23f698765dcdbe10d08f201000000000000000000000000b22d86aac527a68327ecc99667e98429c2d4e2eb",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000007bfe571d5a5ae244b5212f69952f3b19ff1b7e54000000000000000000000000386f2bd2808e96c8a23f698765dcdbe10d08f201000000000000000000000000b22d86aac527a68327ecc99667e98429c2d4e2eb"
}