{
  "address": "0x6fc21092da55b392b045ed78f4732bff3c580e2c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FireflyRegistrar",
  "compilerVersion": "v0.4.10+commit.f0d539ae",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-31\n*/\n\npragma solidity ^0.4.0;\n\ncontract AbstractENS {\n    function owner(bytes32 node) constant returns(address);\n    function resolver(bytes32 node) constant returns(address);\n    function setOwner(bytes32 node, address owner);\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n    function setResolver(bytes32 node, address resolver);\n}\n\ncontract Resolver {\n    function setAddr(bytes32 nodeHash, address addr);\n}\ncontract ReverseRegistrar {\n    function claim(address owner) returns (bytes32 node);\n}\n\n\n/**\n *  FireflyRegistrar\n *\n *  This registrar allows arbitrary labels below the root node for a fixed minimum fee.\n *  Labels must conform to the regex /^[a-z0-9-]{4, 20}$/.\n *\n *  Admin priviledges:\n *    - change the admin\n *    - change the fee\n *    - change the default resolver\n *    - withdrawl funds\n *\n *  This resolver should is designed to be self-contained, so that in the future\n *  switching to a new Resolver should not impact this one.\n *\n */\ncontract FireflyRegistrar {\n     // namehash('addr.reverse')\n     bytes32 constant RR_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    // Admin triggered events\n    event adminChanged(address oldAdmin, address newAdmin);\n    event feeChanged(uint256 oldFee, uint256 newFee);\n    event defaultResolverChanged(address oldResolver, address newResolver);\n    event didWithdraw(address target, uint256 amount);\n\n    // Registration\n    event nameRegistered(bytes32 indexed nodeHash, address owner, uint256 fee);\n\n    // Donations\n    event donation(bytes32 indexed nodeHash, uint256 amount);\n\n    AbstractENS _ens;\n    Resolver _defaultResolver;\n\n    address _admin;\n    bytes32 _nodeHash;\n\n    uint256 _fee;\n\n    uint256 _totalPaid = 0;\n    uint256 _nameCount = 0;\n\n    mapping (bytes32 => uint256) _donations;\n\n    function FireflyRegistrar(address ens, bytes32 nodeHash, address defaultResolver) {\n        _ens = AbstractENS(ens);\n        _nodeHash = nodeHash;\n        _defaultResolver = Resolver(defaultResolver);\n\n        _admin = msg.sender;\n\n        _fee = 0.1 ether;\n\n        // Give the admin access to the reverse entry\n        ReverseRegistrar(_ens.owner(RR_NODE)).claim(_admin);\n    }\n\n    /**\n     *  setAdmin(admin)\n     *\n     *  Change the admin of this contract. This should be used shortly after\n     *  deployment and live testing to switch to a multi-sig contract.\n     */\n    function setAdmin(address admin) {\n        if (msg.sender != _admin) { throw; }\n\n        adminChanged(_admin, admin);\n        _admin = admin;\n\n        // Give the admin access to the reverse entry\n        ReverseRegistrar(_ens.owner(RR_NODE)).claim(admin);\n\n        // Point the resolved addr to the new admin\n        Resolver(_ens.resolver(_nodeHash)).setAddr(_nodeHash, _admin);\n    }\n\n    /**\n     *  setFee(fee)\n     *\n     *  This is useful if the price of ether sky-rockets or plummets, but\n     *  for the most part should remain unused\n     */\n    function setFee(uint256 fee) {\n        if (msg.sender != _admin) { throw; }\n        feeChanged(_fee, fee);\n        _fee = fee;\n    }\n\n    /**\n     *  setDefaultResolver(resolver)\n     *\n     *  Allow the admin to change the default resolver that is setup with\n     *  new name registrations.\n     */\n    function setDefaultResolver(address defaultResolver) {\n        if (msg.sender != _admin) { throw; }\n        defaultResolverChanged(_defaultResolver, defaultResolver);\n        _defaultResolver = Resolver(defaultResolver);\n    }\n\n    /**\n     *  withdraw(target, amount)\n     *\n     *  Allow the admin to withdrawl funds.\n     */\n    function withdraw(address target, uint256 amount) {\n        if (msg.sender != _admin) { throw; }\n        if (!target.send(amount)) { throw; }\n        didWithdraw(target, amount);\n    }\n\n    /**\n     *  register(label)\n     *\n     *  Allows anyone to send *fee* ether to the contract with a name to register.\n     *\n     *  Note: A name must match the regex /^[a-z0-9-]{4,20}$/\n     */\n    function register(string label) payable {\n\n        // Check the label is legal\n        uint256 position;\n        uint256 length;\n        assembly {\n            // The first word of a string is its length\n            length := mload(label)\n\n            // The first character position is the beginning of the second word\n            position := add(label, 1)\n        }\n\n        // Labels must be at least 4 characters and at most 20 characters\n        if (length < 4 || length > 20) { throw; }\n\n        // Only allow /^[a-z0-9-]*$/\n        for (uint256 i = 0; i < length; i++) {\n            uint8 c;\n            assembly { c := and(mload(position), 0xFF) }\n            //       'a'         'z'           '0'         '9'           '-'\n            if ((c < 0x61 || c > 0x7a) && (c < 0x30 || c > 0x39) && c != 0x2d) {\n                throw;\n            }\n            position++;\n        }\n\n        // Paid too little; participants may pay more (as a donation)\n        if (msg.value < _fee) { throw; }\n\n        // Compute the label and node hash\n        var labelHash = sha3(label);\n        var nodeHash = sha3(_nodeHash, labelHash);\n\n        // This is already owned in ENS\n        if (_ens.owner(nodeHash) != address(0)) { throw; }\n\n        // Make this registrar the owner (so we can set it up before giving it away)\n        _ens.setSubnodeOwner(_nodeHash, labelHash, this);\n\n        // Set up the default resolver and point to the sender\n        _ens.setResolver(nodeHash, _defaultResolver);\n        _defaultResolver.setAddr(nodeHash, msg.sender);\n\n        // Now give it to the sender\n        _ens.setOwner(nodeHash, msg.sender);\n\n        _totalPaid += msg.value;\n        _nameCount++;\n\n        _donations[nodeHash] += msg.value;\n\n        nameRegistered(nodeHash, msg.sender, msg.value);\n        donation(nodeHash, msg.value);\n    }\n\n    /**\n     *  donate(nodeHash)\n     *\n     *  Allow a registered name to donate more and get attribution. This may\n     *  be useful if special limited edition Firefly devices are awarded to\n     *  certain tiers of donors or such.\n     */\n    function donate(bytes32 nodeHash) payable {\n        _donations[nodeHash] += msg.value;\n        donation(nodeHash, msg.value);\n    }\n\n    /**\n     *  config()\n     *\n     *  Get the configuration of this registrar.\n     */\n    function config() constant returns (address ens, bytes32 nodeHash, address admin, uint256 fee, address defaultResolver) {\n        ens = _ens;\n        nodeHash = _nodeHash;\n        admin = _admin;\n        fee = _fee;\n        defaultResolver = _defaultResolver;\n    }\n\n    /**\n     *  stats()\n     *\n     *  Get some statistics for this registrar.\n     */\n    function stats() constant returns (uint256 nameCount, uint256 totalPaid, uint256 balance) {\n        nameCount = _nameCount;\n        totalPaid = _totalPaid;\n        balance = this.balance;\n    }\n\n    /**\n     *  donations(nodeHash)\n     *\n     *  Returns the amount of donations a nodeHash has provided.\n     */\n    function donations(bytes32 nodeHash) constant returns (uint256 donation) {\n        return _donations[nodeHash];\n    }\n\n    /**\n     *  fee()\n     *\n     *  The current fee forregistering a name.\n     */\n    function fee() constant returns (uint256 fee) {\n        return _fee;\n    }\n\n    /**\n     *  Allow anonymous donations.\n     */\n    function () payable {\n        _donations[0] += msg.value;\n        donation(0, msg.value);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"ens\",\"type\":\"address\"},{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"donations\",\"outputs\":[{\"name\":\"donation\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"name\":\"nameCount\",\"type\":\"uint256\"},{\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ens\",\"type\":\"address\"},{\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"name\":\"defaultResolver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"adminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"feeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldResolver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"defaultResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"didWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"nameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donation\",\"type\":\"event\"}]",
  "bytecode": "606060405260006005556000600655341561001657fe5b604051606080610d1d8339810160409081528151602083015191909201515b60008054600160a060020a03808616600160a060020a0319928316178084556003869055600180548684169085161790556002805433841694169390931790925567016345785d8a0000600490815560408051602090810186905281517f02571be30000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e293810193909352905193909216936302571be393602480840194939192918390030190829087803b151561010657fe5b60325a03f1151561011357fe5b50506040805180516002546000602093840181905284517f1e83409a000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529451919092169450631e83409a9360248082019493918390030190829087803b151561018557fe5b60325a03f1151561019257fe5b5050505b5050505b610b74806101a96000396000f300606060405236156100885763ffffffff60e060020a60003504166369fe0e2d81146100fa578063704b6c021461010f57806379502c551461012d578063bed866f614610179578063c37067fa1461019e578063c66485b2146101ab578063d80528ae146101c9578063ddca3f43146101f7578063f2c298be14610219578063f3fef3a314610269575b6100f85b6000808052600760209081527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df80543490810190915560408051918252517fdb7750418f9fa390aaf85d881770065aa4adbe46343bcff4ae573754c829d9af929181900390910190a25b565b005b341561010257fe5b6100f860043561028a565b005b341561011757fe5b6100f8600160a060020a03600435166102ec565b005b341561013557fe5b61013d610558565b60408051600160a060020a0396871681526020810195909552928516848401526060840191909152909216608082015290519081900360a00190f35b341561018157fe5b61018c600435610580565b60408051918252519081900360200190f35b6100f8600435610595565b005b34156101b357fe5b6100f8600160a060020a03600435166105e6565b005b34156101d157fe5b6101d9610676565b60408051938452602084019290925282820152519081900360600190f35b34156101ff57fe5b61018c61068d565b60408051918252519081900360200190f35b6100f8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061069495505050505050565b005b341561027157fe5b6100f8600160a060020a0360043516602435610ab2565b005b60025433600160a060020a039081169116146102a65760006000fd5b600454604080519182526020820183905280517f854231545a00e13c316c82155f2b8610d638e9ff6ebc4930676f84a5af08a49a9281900390910190a160048190555b50565b60025433600160a060020a039081169116146103085760006000fd5b60025460408051600160a060020a039283168152918316602083015280517fbadc9a52979e89f78b7c58309537410c5e51d0f63a0a455efe8d61d2b474e6989281900390910190a16002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911790915560008054604080516020908101849052815160e060020a6302571be30281527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152915192909416936302571be39360248084019492938390030190829087803b15156103e957fe5b60325a03f115156103f657fe5b50505060405180519050600160a060020a0316631e83409a826000604051602001526040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b151561045f57fe5b60325a03f1151561046c57fe5b50506040805160008054600354602093840183905284517f0178b8bf00000000000000000000000000000000000000000000000000000000815260048101919091529351600160a060020a039091169450630178b8bf9360248082019493918390030190829087803b15156104dd57fe5b60325a03f115156104ea57fe5b505060408051805160035460025460e860020a62d5fa2b0284526004840191909152600160a060020a03908116602484015292519216925063d5fa2b0091604480830192600092919082900301818387803b151561054457fe5b60325a03f1151561055157fe5b5050505b50565b600054600354600254600454600154600160a060020a039485169492831692165b9091929394565b6000818152600760205260409020545b919050565b6000818152600760209081526040918290208054349081019091558251908152915183927fdb7750418f9fa390aaf85d881770065aa4adbe46343bcff4ae573754c829d9af92908290030190a25b50565b60025433600160a060020a039081169116146106025760006000fd5b60015460408051600160a060020a039283168152918316602083015280517f279875333405c968e401e3bc4e71d5f8e48728c90f4e8180ce28f74efb5669209281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600654600554600160a060020a033016315b909192565b6004545b90565b80516001820190600080808060048510806106af5750601485115b156106ba5760006000fd5b600093505b8484101561072a57855160ff16925060618310806106e05750607a8360ff16115b80156106fc575060308360ff1610806106fc575060398360ff16115b5b801561070d57508260ff16602d14155b156107185760006000fd5b6001909501945b6001909301926106bf565b60045434101561073a5760006000fd5b866040518082805190602001908083835b6020831061076a5780518252601f19909201916020918201910161074b565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060035483528282018190528451928390038501832060008054948401819052865160e060020a6302571be3028152600481018390529651929a509098509650600160a060020a0390921694506302571be393602480820194509192919082900301818787803b15156107ff57fe5b60325a03f1151561080c57fe5b505060405151600160a060020a031691909114905061082b5760006000fd5b60008054600354604080517f06ab5923000000000000000000000000000000000000000000000000000000008152600481019290925260248201869052600160a060020a03308116604484015290519216926306ab59239260648084019382900301818387803b151561089a57fe5b60325a03f115156108a757fe5b505060008054600154604080517f1896f70a00000000000000000000000000000000000000000000000000000000815260048101879052600160a060020a0392831660248201529051919092169350631896f70a9260448084019391929182900301818387803b151561091657fe5b60325a03f1151561092357fe5b50506001546040805160e860020a62d5fa2b02815260048101859052600160a060020a033381166024830152915191909216925063d5fa2b009160448082019260009290919082900301818387803b151561097a57fe5b60325a03f1151561098757fe5b505060008054604080517f5b0fc9c300000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a0333811660248301529151919092169350635b0fc9c39260448084019391929182900301818387803b15156109f357fe5b60325a03f11515610a0057fe5b505060058054349081019091556006805460010190556000838152600760209081526040918290208054840190558151600160a060020a03331681529081019290925280518493507f179ef3319e6587f6efd3157b34c8b357141528074bcb03f9903589876168fa149281900390910190a260408051348152905182917fdb7750418f9fa390aaf85d881770065aa4adbe46343bcff4ae573754c829d9af919081900360200190a25b50505050505050565b60025433600160a060020a03908116911614610ace5760006000fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501515610aff5760006000fd5b60408051600160a060020a03841681526020810183905281517fac375770417e1cb46c89436efcf586a74d0298fee9838f66a38d40c65959ffda929181900390910190a15b50505600a165627a7a723058205c3628c01dc80233f51979d91a76cec2a25d84e86c9838d34672734ca2232b640029000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b2cb4cccf14a67aaaa2681ac6672fdf0074d7128cfbf2cfcab889ff4623125e490000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4",
  "constructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b2cb4cccf14a67aaaa2681ac6672fdf0074d7128cfbf2cfcab889ff4623125e490000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4"
}