{
  "address": "0xe27ff63923385f9aa5c9fbaf072d223aa3883a32",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GanapatiToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-17\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/GanapatiToken.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n        return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    * @notice Renouncing to ownership will leave the contract without an owner.\n    * It will not be possible to call the functions with the `onlyOwner`\n    * modifier anymore.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    uint public totalSupply;\n\n    // ERC223 and ERC20 functions and events\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\n    // ERC20 functions and events\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n\n/**\n * @title GanapatiToken\n * @dev GanapatiToken is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract GanapatiToken is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string public constant name = \"G8C\";\n    string public constant symbol = \"GAEC\";\n    uint8 public constant decimals = 8;\n    uint256 public totalSupply = 7000000000000 * 10 ** 8;\n\n    // This token is locked on the initial condition\n    // bool public locked = true;\n    bool public mintingFinished = false;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n        \n    // This is the mapping of locked validAddress\n    mapping( address => bool ) public banAddresses;\n\n    event Mint(address indexed to, uint256 amount);\n    event BanAddresses(address indexed to, bool lock);\n    event MintFinished();\n\n    // This is a modifier whether transfering token is available or not\n    modifier isValidTransfer() {\n        require(!banAddresses[msg.sender]);\n        _;\n    }\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n    * @dev constructor\n    */\n    constructor(address _owner) public {\n\n        // set the owner address\n        owner = _owner;\n\n        // the tokens of 60% of the totalSupply is set to the sale address\n        address sale = 0x0301e60b967A088aAd7b6a0Dd3745608068c2574;\n        balanceOf[sale] = totalSupply.mul(60).div(100);\n        emit Transfer(0x0, sale, balanceOf[sale]);\n\n        // the tokens of 15% of the totalSupply is set to the team address\n        address team = 0x2EeF18D08B3278f7d9C76Ffb50C279490f54c6B3;\n        balanceOf[team] = totalSupply.mul(15).div(100);\n        emit Transfer(0x0, team, balanceOf[team]);\n\n        // the tokens of 12% of the totalSupply is set to the marketor address\n        address marketor = 0x76FA8c2952CcA46f874a598A6064C699C634CdAA;\n        balanceOf[marketor] = totalSupply.mul(12).div(100);\n        emit Transfer(0x0, marketor, balanceOf[marketor]);\n        \n        // the tokens of 10% of the totalSupply is set to the advisor address\n        address advisor = 0xCCbc32321baeBa72f35590B084D38adC77e74123;\n        balanceOf[advisor] = totalSupply.mul(10).div(100);\n        emit Transfer(0x0, advisor, balanceOf[advisor]);\n\n        // the tokens of 3% of the totalSupply is set to the developer address\n        address developer = 0x80459F7e1139d4cc97673131f2986000C024248e;\n        balanceOf[developer] = totalSupply.mul(3).div(100);\n        emit Transfer(0x0, developer, balanceOf[developer]);\n    }\n\n    /**\n    * @dev Owner can lock the feature to transfer token\n    */\n    function setLocked(address _to, bool _locked) onlyOwner public {\n        banAddresses[_to] = _locked;\n        BanAddresses(_to, _locked);\n    }\n\n   /**\n     * @dev Standard function transfer based on ERC223\n     */\n    function transfer(address _to, uint _value, bytes _data) public isValidTransfer returns (bool success) {\n        require(_value > 0 && _to != address(0));\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public isValidTransfer returns (bool success) {\n        require(_value > 0 && _to != address(0));\n\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public isValidTransfer returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balanceOf[_from] >= _value\n                && allowance[_from][msg.sender] >= _value);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allows _spender to spend no more than _value tokens in your behalf\n     *      Added due to backwards compatibility with ERC20\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     *      Added due to backwards compatibility with ERC20\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n        require(_unitAmount > 0);\n\n        totalSupply = totalSupply.add(_unitAmount);\n        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n        emit Mint(_to, _unitAmount);\n        emit Transfer(address(0), _to, _unitAmount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}",
  "bytecode": "60806040526825f273933db57000006002556003805460ff191690553480156200002857600080fd5b506040516020806200128b83398101604052516001805433600160a060020a03199182161716600160a060020a038316179055600254730301e60b967a088aad7b6a0dd3745608068c257490600090819081908190620000b590606490620000a090603c640100000000620002fa810262000e8e1704565b9064010000000062000eb76200032d82021704565b600160a060020a0386166000818152600460209081526040808320859055805194855251929391926000805160206200126b8339815191529281900390910190a3600254732eef18d08b3278f7d9c76ffb50c279490f54c6b394506200013390606490620000a090600f64010000000062000e8e620002fa82021704565b600160a060020a0385166000818152600460209081526040808320859055805194855251929391926000805160206200126b8339815191529281900390910190a36002547376fa8c2952cca46f874a598a6064c699c634cdaa9350620001b190606490620000a090600c64010000000062000e8e620002fa82021704565b600160a060020a0384166000818152600460209081526040808320859055805194855251929391926000805160206200126b8339815191529281900390910190a360025473ccbc32321baeba72f35590b084d38adc77e7412392506200022f90606490620000a090600a64010000000062000e8e620002fa82021704565b600160a060020a0383166000818152600460209081526040808320859055805194855251929391926000805160206200126b8339815191529281900390910190a3506002547380459f7e1139d4cc97673131f2986000c024248e90620002ad90606490620000a090600364010000000062000e8e620002fa82021704565b600160a060020a0382166000818152600460209081526040808320859055805194855251929391926000805160206200126b8339815191529281900390910190a350505050505062000343565b60008215156200030d5750600062000327565b508181028183828115156200031e57fe5b04146200032757fe5b92915050565b600081838115156200033b57fe5b049392505050565b610f1880620003536000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010057806306fdde0314610129578063095ea7b3146101b357806318160ddd146101d757806323b872dd146101fe578063313ce5671461022857806340c10f191461025357806370a0823114610277578063715018a6146102985780637d64bcb4146102af57806389ad0a34146102c45780638da5cb5b146102ea57806395d89b411461031b578063a478fa8d14610330578063a9059cbb14610351578063be45fd6214610375578063dd62ed3e146103de578063f2fde38b14610405575b600080fd5b34801561010c57600080fd5b50610115610426565b604080519115158252519081900360200190f35b34801561013557600080fd5b5061013e61042f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bf57600080fd5b50610115600160a060020a0360043516602435610466565b3480156101e357600080fd5b506101ec6104cd565b60408051918252519081900360200190f35b34801561020a57600080fd5b50610115600160a060020a03600435811690602435166044356104d3565b34801561023457600080fd5b5061023d610662565b6040805160ff9092168252519081900360200190f35b34801561025f57600080fd5b50610115600160a060020a0360043516602435610667565b34801561028357600080fd5b506101ec600160a060020a0360043516610767565b3480156102a457600080fd5b506102ad610779565b005b3480156102bb57600080fd5b506101156107e7565b3480156102d057600080fd5b506102ad600160a060020a0360043516602435151561084d565b3480156102f657600080fd5b506102ff6108c4565b60408051600160a060020a039092168252519081900360200190f35b34801561032757600080fd5b5061013e6108d3565b34801561033c57600080fd5b50610115600160a060020a036004351661090a565b34801561035d57600080fd5b50610115600160a060020a036004351660243561091f565b34801561038157600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610115948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506109949650505050505050565b3480156103ea57600080fd5b506101ec600160a060020a03600435811690602435166109ff565b34801561041157600080fd5b506102ad600160a060020a0360043516610a2a565b60035460ff1681565b60408051808201909152600381527f4738430000000000000000000000000000000000000000000000000000000000602082015281565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60025481565b3360009081526006602052604081205460ff16156104f057600080fd5b600160a060020a038316158015906105085750600082115b801561052c5750600160a060020a0384166000908152600460205260409020548211155b801561055b5750600160a060020a03841660009081526005602090815260408083203384529091529020548211155b151561056657600080fd5b600160a060020a03841660009081526004602052604090205461058f908363ffffffff610a4d16565b600160a060020a0380861660009081526004602052604080822093909355908516815220546105c4908363ffffffff610a5f16565b600160a060020a038085166000908152600460209081526040808320949094559187168152600582528281203382529091522054610608908363ffffffff610a4d16565b600160a060020a0380861660008181526005602090815260408083203384528252918290209490945580518681529051928716939192600080516020610ecd833981519152929181900390910190a35060015b9392505050565b600881565b600154600090600160a060020a0316331461068157600080fd5b60035460ff161561069157600080fd5b6000821161069e57600080fd5b6002546106b1908363ffffffff610a5f16565b600255600160a060020a0383166000908152600460205260409020546106dd908363ffffffff610a5f16565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610ecd8339815191529181900360200190a350600192915050565b60046020526000908152604090205481565b600154600160a060020a0316331461079057600080fd5b600154604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26001805473ffffffffffffffffffffffffffffffffffffffff19169055565b600154600090600160a060020a0316331461080157600080fd5b60035460ff161561081157600080fd5b6003805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600154600160a060020a0316331461086457600080fd5b600160a060020a038216600081815260066020908152604091829020805460ff1916851515908117909155825190815291517f94df21d8fc66ce6637dd6413a5fe0c476830ececa529dfe78105a779b8243cad9281900390910190a25050565b600154600160a060020a031681565b60408051808201909152600481527f4741454300000000000000000000000000000000000000000000000000000000602082015281565b60066020526000908152604090205460ff1681565b3360009081526006602052604081205460609060ff161561093f57600080fd5b6000831180156109575750600160a060020a03841615155b151561096257600080fd5b61096b84610a6c565b156109825761097b848483610a74565b915061098d565b61097b848483610cb5565b5092915050565b3360009081526006602052604081205460ff16156109b157600080fd5b6000831180156109c95750600160a060020a03841615155b15156109d457600080fd5b6109dd84610a6c565b156109f4576109ed848484610a74565b905061065b565b6109ed848484610cb5565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600154600160a060020a03163314610a4157600080fd5b610a4a81610e10565b50565b600082821115610a5957fe5b50900390565b818101828110156104c757fe5b6000903b1190565b336000908152600460205260408120548190841115610a9257600080fd5b33600090815260046020526040902054610ab2908563ffffffff610a4d16565b3360009081526004602052604080822092909255600160a060020a03871681522054610ae4908563ffffffff610a5f16565b600160a060020a03861660008181526004602081815260408084209590955593517fc0ee0b8a00000000000000000000000000000000000000000000000000000000815233918101828152602482018a90526060604483019081528951606484015289518c9850959663c0ee0b8a9694958c958c95608401928601918190849084905b83811015610b7f578181015183820152602001610b67565b50505050905090810190601f168015610bac5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b50505050826040518082805190602001908083835b60208310610c155780518252601f199092019160209182019101610bf6565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518581529051600160a060020a038716913391600080516020610ecd8339815191529181900360200190a3506001949350505050565b33600090815260046020526040812054831115610cd157600080fd5b33600090815260046020526040902054610cf1908463ffffffff610a4d16565b3360009081526004602052604080822092909255600160a060020a03861681522054610d23908463ffffffff610a5f16565b600160a060020a0385166000908152600460209081526040918290209290925551835184928291908401908083835b60208310610d715780518252601f199092019160209182019101610d52565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529351939550600160a060020a038a16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a4604080518481529051600160a060020a038616913391600080516020610ecd8339815191529181900360200190a35060019392505050565b600160a060020a0381161515610e2557600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515610e9f575060006104c7565b50818102818382811515610eaf57fe5b04146104c757fe5b60008183811515610ec457fe5b0493925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820428c9526d3571001bba7a91379acc2c8140fbc1b5fd7dcf2a38563330271d6260029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000007534e39dc1dc8482ff47640d863c7c85e9d07ec1",
  "constructorArguments": "0000000000000000000000007534e39dc1dc8482ff47640d863c7c85e9d07ec1"
}