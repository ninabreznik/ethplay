{
  "address": "0xd89098a767a3fe39410d6fa7d72b6ebc5eaae247",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LockingContract",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-03\n*/\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract LockingContract is Ownable {\n    using SafeMath for uint256;\n\n    event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\n    event ReleasedTokens(address indexed _beneficiary);\n    event ReducedLockingTime(uint256 _newUnlockTime);\n\n    ERC20 public tokenContract;\n    mapping(address => uint256) public tokens;\n    uint256 public totalTokens;\n    uint256 public unlockTime;\n\n    function isLocked() public view returns(bool) {\n        return now < unlockTime;\n    }\n\n    modifier onlyWhenUnlocked() {\n        require(!isLocked());\n        _;\n    }\n\n    modifier onlyWhenLocked() {\n        require(isLocked());\n        _;\n    }\n\n    function LockingContract(ERC20 _tokenContract, uint256 _unlockTime) public {\n        require(_unlockTime > now);\n        require(address(_tokenContract) != 0x0);\n        unlockTime = _unlockTime;\n        tokenContract = _tokenContract;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return tokens[_owner];\n    }\n\n    // Should only be done from another contract.\n    // To ensure that the LockingContract can release all noted tokens later,\n    // one should mint/transfer tokens to the LockingContract's account prior to noting\n    function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\n        uint256 tokenBalance = tokenContract.balanceOf(this);\n        require(tokenBalance >= totalTokens.add(_tokenAmount));\n\n        tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\n        totalTokens = totalTokens.add(_tokenAmount);\n        emit NotedTokens(_beneficiary, _tokenAmount);\n    }\n\n    function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\n        require(msg.sender == owner || msg.sender == _beneficiary);\n        uint256 amount = tokens[_beneficiary];\n        tokens[_beneficiary] = 0;\n        require(tokenContract.transfer(_beneficiary, amount)); \n        totalTokens = totalTokens.sub(amount);\n        emit ReleasedTokens(_beneficiary);\n    }\n\n    function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\n        require(_newUnlockTime >= now);\n        require(_newUnlockTime < unlockTime);\n        unlockTime = _newUnlockTime;\n        emit ReducedLockingTime(_newUnlockTime);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051604080610c7a83398101604052808051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428111151561008257600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16141515156100a857600080fd5b8060048190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610b79806101016000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063251c1aa3146100b457806355a373d6146100dd57806370a08231146101325780637e1c0c091461017f57806387b0be48146101a85780638da5cb5b146101e1578063a4e2d63414610236578063b288d74814610263578063b7381a2c14610286578063e4860339146102c8578063f2fde38b14610315575b600080fd5b34156100bf57600080fd5b6100c761034e565b6040518082815260200191505060405180910390f35b34156100e857600080fd5b6100f0610354565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013d57600080fd5b610169600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061037a565b6040518082815260200191505060405180910390f35b341561018a57600080fd5b6101926103c3565b6040518082815260200191505060405180910390f35b34156101b357600080fd5b6101df600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103c9565b005b34156101ec57600080fd5b6101f461063f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561024157600080fd5b610249610664565b604051808215151515815260200191505060405180910390f35b341561026e57600080fd5b6102846004808035906020019091905050610670565b005b341561029157600080fd5b6102c6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061073e565b005b34156102d357600080fd5b6102ff600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109a9565b6040518082815260200191505060405180910390f35b341561032057600080fd5b61034c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109c1565b005b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60035481565b60006103d3610664565b1515156103df57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061046557508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561047057600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156105bb57600080fd5b5af115156105c857600080fd5b5050506040518051905015156105dd57600080fd5b6105f281600354610b1690919063ffffffff16565b6003819055508173ffffffffffffffffffffffffffffffffffffffff167f2b8b030b466a28f569a1aaf32d403aa99d8aaf8d915b06b75a607c2089eae50760405160405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006004544210905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106cb57600080fd5b6106d3610664565b15156106de57600080fd5b4281101515156106ed57600080fd5b600454811015156106fd57600080fd5b806004819055507fab9dfa812e732099fc613eefa5a007277fefe6b8379746e62819c7d23fecfd4c816040518082815260200191505060405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079b57600080fd5b6107a3610664565b15156107ae57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561086a57600080fd5b5af1151561087757600080fd5b50505060405180519050905061089882600354610b2f90919063ffffffff16565b81101515156108a657600080fd5b6108f882600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2f90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061095082600354610b2f90919063ffffffff16565b6003819055508273ffffffffffffffffffffffffffffffffffffffff167fe85617309c545775050fc95def797667e0f38b475c28e6596dbb9515fc726230836040518082815260200191505060405180910390a2505050565b60026020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a5857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610b2457fe5b818303905092915050565b6000808284019050838110151515610b4357fe5b80915050929150505600a165627a7a72305820ac3928b0982681bbec479b396f29cba742ae9c18a0d2f7923b1afbf6d55cece300290000000000000000000000006288014d6ba425d71f5fdc1dbfb01378241d78db000000000000000000000000000000000000000000000000000000005c490e10",
  "constructorArguments": "0000000000000000000000006288014d6ba425d71f5fdc1dbfb01378241d78db000000000000000000000000000000000000000000000000000000005c490e10"
}