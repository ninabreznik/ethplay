{
  "address": "0x5b53f9755f82439cba66007ec7073c59e0da4a7d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FlowchainToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-02\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * Copyright 2018, Flowchain.co\n *\n * The Flowchain tokens smart contract\n */\n \ncontract Mintable {\n    function mintToken(address to, uint amount) external returns (bool success);  \n    function setupMintableAddress(address _mintable) public returns (bool success);\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData);    \n}\n\ncontract Token {\n\n    /// The total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract StandardToken is Token {\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        // Not overflow\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        // Not overflow\n        require(balances[_to] + _value >= balances[_to]);          \n        balances[_to] += _value;    \n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }  \n\n        Transfer(_from, _to, _value);\n        return true; \n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n}\n\n\n//name this contract whatever you'd like\ncontract FlowchainToken is StandardToken, Mintable {\n\n    /* Public variables of the token */\n    string public name = \"FlowchainCoin\";\n    string public symbol = \"FLC\";    \n    uint8 public decimals = 18;\n    string public version = \"1.0\";\n    address public mintableAddress;\n    address public multiSigWallet;    \n    address public creator;\n\n    function() payable { revert(); }\n\n    function FlowchainToken() public {\n        // 1 billion tokens + 18 decimals\n        totalSupply = 10**27;                   \n        creator = msg.sender;\n        mintableAddress = 0x9581973c54fce63d0f5c4c706020028af20ff723;\n        multiSigWallet = 0x9581973c54fce63d0f5c4c706020028af20ff723;        \n        // Give the multisig wallet all initial tokens\n        balances[multiSigWallet] = totalSupply;  \n        Transfer(0x0, multiSigWallet, totalSupply);\n    }\n\n    function setupMintableAddress(address _mintable) public returns (bool success) {\n        require(msg.sender == creator);    \n        mintableAddress = _mintable;\n        return true;\n    }\n\n    /// @dev Mint an amount of tokens and transfer to the backer\n    /// @param to The address of the backer who will receive the tokens\n    /// @param amount The amount of rewarded tokens\n    /// @return The result of token transfer\n    function mintToken(address to, uint256 amount) external returns (bool success) {\n        require(msg.sender == mintableAddress);\n        require(balances[multiSigWallet] >= amount);\n        balances[multiSigWallet] -= amount;\n        balances[to] += amount;\n        Transfer(multiSigWallet, to, amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the creator of the tokens\n    /// @return The address of token creator\n    function getCreator() constant returns (address) {\n        return creator;\n    }\n\n    /// @dev This function makes it easy to get the mintableAddress\n    /// @return The address of token creator\n    function getMintableAddress() constant returns (address) {\n        return mintableAddress;\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n\n        ApproveAndCallReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n\n        return true;\n    }\n}",
  "bytecode": "606060405260408051908101604052600d81527f466c6f77636861696e436f696e000000000000000000000000000000000000006020820152600390805161004b92916020019061019e565b5060408051908101604052600381527f464c4300000000000000000000000000000000000000000000000000000000006020820152600490805161009392916020019061019e565b506005805460ff1916601217905560408051908101604052600381527f312e300000000000000000000000000000000000000000000000000000000000602082015260069080516100e892916020019061019e565b5034156100f457600080fd5b6b033b2e3c9fd0803ce8000000600081815560098054600160a060020a03338116600160a060020a031992831617909255600780548216739581973c54fce63d0f5c4c706020028af20ff723908117909155600880549092161780825582168352600160205260408084208590559054909116927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610239565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101df57805160ff191683800117855561020c565b8280016001018555821561020c579182015b8281111561020c5782518255916020019190600101906101f1565b5061021892915061021c565b5090565b61023691905b808211156102185760008155600101610222565b90565b610afb806102486000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461011657806306fdde0314610145578063095ea7b3146101cf5780630ee2cb101461020557806318160ddd1461021857806323b872dd1461023d57806327e235e314610265578063313ce567146102845780634b8feb4f146102ad57806354fd4d50146102c05780635c658165146102d357806370a08231146102f857806379c65068146103175780638d734b301461033957806395d89b41146103585780639646b85d1461036b578063a9059cbb1461037e578063cae9ca51146103a0578063dd62ed3e146103cf578063df4c2164146103f4575b600080fd5b341561012157600080fd5b610129610407565b604051600160a060020a03909116815260200160405180910390f35b341561015057600080fd5b610158610416565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019457808201518382015260200161017c565b50505050905090810190601f1680156101c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101da57600080fd5b6101f1600160a060020a03600435166024356104b4565b604051901515815260200160405180910390f35b341561021057600080fd5b610129610520565b341561022357600080fd5b61022b61052f565b60405190815260200160405180910390f35b341561024857600080fd5b6101f1600160a060020a0360043581169060243516604435610535565b341561027057600080fd5b61022b600160a060020a0360043516610662565b341561028f57600080fd5b610297610674565b60405160ff909116815260200160405180910390f35b34156102b857600080fd5b61012961067d565b34156102cb57600080fd5b61015861068c565b34156102de57600080fd5b61022b600160a060020a03600435811690602435166106f7565b341561030357600080fd5b61022b600160a060020a0360043516610714565b341561032257600080fd5b6101f1600160a060020a036004351660243561072f565b341561034457600080fd5b6101f1600160a060020a03600435166107ed565b341561036357600080fd5b61015861083d565b341561037657600080fd5b6101296108a8565b341561038957600080fd5b6101f1600160a060020a03600435166024356108b7565b34156103ab57600080fd5b6101f160048035600160a060020a0316906024803591604435918201910135610972565b34156103da57600080fd5b61022b600160a060020a0360043581169060243516610a95565b34156103ff57600080fd5b610129610ac0565b600954600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ac5780601f10610481576101008083540402835291602001916104ac565b820191906000526020600020905b81548152906001019060200180831161048f57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600954600160a060020a031690565b60005481565b600160a060020a0380841660008181526002602090815260408083203390951683529381528382205492825260019052918220548390108015906105795750828110155b151561058457600080fd5b600160a060020a03841660009081526001602052604090205483810110156105ab57600080fd5b600160a060020a038085166000908152600160205260408082208054870190559187168152208054849003905560001981101561061057600160a060020a03808616600090815260026020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3506001949350505050565b60016020526000908152604090205481565b60055460ff1681565b600854600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ac5780601f10610481576101008083540402835291602001916104ac565b600260209081526000928352604080842090915290825290205481565b600160a060020a031660009081526001602052604090205490565b60075460009033600160a060020a0390811691161461074d57600080fd5b600854600160a060020a03166000908152600160205260409020548290101561077557600080fd5b60088054600160a060020a039081166000908152600160205260408082208054879003905586831680835291819020805487019055925490929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60095460009033600160a060020a0390811691161461080b57600080fd5b5060078054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ac5780601f10610481576101008083540402835291602001916104ac565b600754600160a060020a031690565b600160a060020a033316600090815260016020526040812054829010156108dd57600080fd5b600160a060020a038316600090815260016020526040902054828101101561090457600080fd5b600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03338116600081815260026020908152604080832094891680845294909152808220879055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259087905190815260200160405180910390a384600160a060020a0316638f4ffcb133863087876040517c010000000000000000000000000000000000000000000000000000000063ffffffff8816028152600160a060020a038087166004830190815260248301879052908516604483015260806064830190815260848301849052909160a40184848082843782019150509650505050505050600060405180830381600087803b1515610a7657600080fd5b6102c65a03f11515610a8757600080fd5b506001979650505050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600754600160a060020a0316815600a165627a7a72305820f00be67b4add3120b08f68c1b95e004ebfbd5b68c241c7806ce5fda0d08a468d0029"
}