{
  "address": "0x9a03c4d95a8e31e1e11a4319066475cd12b22dee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bithemoth Token",
  "contractName": "Bithemoth",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-22\n*/\n\npragma solidity ^0.4.11;\n\ncontract Bithemoth {\n\n    string public name = \"Bithemoth\";      //  token name\n    string public symbol = \"BHM\";           //  token symbol\n    uint256 public decimals = 18;            //  token digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 200000000000000000000000000;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function Bithemoth(address _addressFounder) {\n        owner = msg.sender;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        Transfer(0x0, _addressFounder, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner {\n        stopped = true;\n    }\n\n    function start() isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner {\n        name = _name;\n    }\n\n    function burn(uint256 _value) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "606060405260408051908101604052600981527f42697468656d6f746800000000000000000000000000000000000000000000006020820152600090805161004b92916020019061015a565b5060408051908101604052600381527f42484d00000000000000000000000000000000000000000000000000000000006020820152600190805161009392916020019061015a565b506012600255600060055560068054600160a860020a031916905534156100b957600080fd5b604051602080610c69833981016040528080519150505b60068054600160a060020a033381166101000261010060a860020a0319909216919091179091556aa56fa5b99019a5c80000006005819055908216600081815260036020526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a35b506101fa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019b57805160ff19168380011785556101c8565b828001600101855582156101c8579182015b828111156101c85782518255916020019190600101906101ad565b5b506101d59291506101d9565b5090565b6101f791905b808211156101d557600081556001016101df565b5090565b90565b610a60806102096000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d257806307da68f51461015d578063095ea7b31461017257806318160ddd146101a857806323b872dd146101cd578063313ce5671461020957806342966c681461022e57806370a082311461024657806375f12b211461027757806395d89b411461029e578063a9059cbb14610329578063be9a65551461035f578063c47f002714610374578063dd62ed3e146103c7575b600080fd5b34156100dd57600080fd5b6100e56103fe565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016857600080fd5b61017061049c565b005b341561017d57600080fd5b610194600160a060020a03600435166024356104ca565b604051901515815260200160405180910390f35b34156101b357600080fd5b6101bb610593565b60405190815260200160405180910390f35b34156101d857600080fd5b610194600160a060020a0360043581169060243516604435610599565b604051901515815260200160405180910390f35b341561021457600080fd5b6101bb6106cd565b60405190815260200160405180910390f35b341561023957600080fd5b6101706004356106d3565b005b341561025157600080fd5b6101bb600160a060020a036004351661077d565b60405190815260200160405180910390f35b341561028257600080fd5b61019461078f565b604051901515815260200160405180910390f35b34156102a957600080fd5b6100e5610798565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033457600080fd5b610194600160a060020a0360043516602435610836565b604051901515815260200160405180910390f35b341561036a57600080fd5b610170610916565b005b341561037f57600080fd5b61017060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061094195505050505050565b005b34156103d257600080fd5b6101bb600160a060020a0360043581169060243516610977565b60405190815260200160405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b505050505081565b60065433600160a060020a0390811661010090920416146104b957fe5b6006805460ff191660011790555b5b565b60065460009060ff16156104da57fe5b600160a060020a03331615156104ec57fe5b81158061051c5750600160a060020a03338116600090815260046020908152604080832093871683529290522054155b151561052757600080fd5b600160a060020a03338116600081815260046020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b5b5b92915050565b60055481565b60065460009060ff16156105a957fe5b600160a060020a03331615156105bb57fe5b600160a060020a038416600090815260036020526040902054829010156105e157600080fd5b600160a060020a038316600090815260036020526040902054828101101561060857600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220548290101561063c57600080fd5b600160a060020a03808416600081815260036020908152604080832080548801905588851680845281842080548990039055600483528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b5b9392505050565b60025481565b600160a060020a033316600090815260036020526040902054819010156106f957600080fd5b600160a060020a033316600081815260036020526040808220805485900390558180527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff8054850190559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b50565b60036020526000908152604090205481565b60065460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b505050505081565b60065460009060ff161561084657fe5b600160a060020a033316151561085857fe5b600160a060020a0333166000908152600360205260409020548290101561087e57600080fd5b600160a060020a03831660009081526003602052604090205482810110156108a557600080fd5b600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b5b92915050565b60065433600160a060020a03908116610100909204161461093357fe5b6006805460ff191690555b5b565b60065433600160a060020a03908116610100909204161461095e57fe5b6000818051610971929160200190610994565b505b5b50565b600460209081526000928352604080842090915290825290205481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109d557805160ff1916838001178555610a02565b82800160010185558215610a02579182015b82811115610a025782518255916020019190600101906109e7565b5b50610a0f929150610a13565b5090565b610a3191905b80821115610a0f5760008155600101610a19565b5090565b905600a165627a7a72305820d0de9787d06e6882368faa5000c1e4914adb66b09c18753cfeb80006c0c4f32e00290000000000000000000000004b2f31b3aca80e1c9886bb6c303c97925026db07",
  "constructorArguments": "0000000000000000000000004b2f31b3aca80e1c9886bb6c303c97925026db07"
}