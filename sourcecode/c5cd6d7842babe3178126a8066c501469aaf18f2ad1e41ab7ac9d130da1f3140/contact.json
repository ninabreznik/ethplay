{
  "address": "0x9e2b71e87d9304c4773674584eb9d0c838643568",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Shopiblock",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-16\n*/\n\npragma solidity ^0.4.16;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract Pausable is owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\n\ncontract TokenERC20 is Pausable {\n    using SafeMath for uint256;\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n    // total no of tokens for sale\n    uint256 public TokenForSale;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol,\n        uint256 TokenSale\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        TokenForSale =  TokenSale * 10 ** uint256(decimals);\n\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] =  allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n    returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n    public\n    returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}\n\ncontract Sale is owned, TokenERC20 {\n\n    // total token which is sold\n    uint256 public soldTokens;\n\n    modifier CheckSaleStatus() {\n        require (TokenForSale >= soldTokens);\n        _;\n    }\n\n}\n\n\ncontract Shopiblock is TokenERC20, Sale {\n    using SafeMath for uint256;\n    uint256 public  unitsOneEthCanBuy;\n    uint256 public  minPurchaseQty;\n\n    mapping (address => bool) public airdrops;\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Shopiblock()\n    TokenERC20(1000000000, 'Shopiblock', 'SHB', 100000) public {\n        unitsOneEthCanBuy = 80000;\n        soldTokens = 0;\n        minPurchaseQty = 16000 * 10 ** uint256(decimals);\n    }\n\n    function changeOwnerWithTokens(address newOwner) onlyOwner public {\n        uint previousBalances = balanceOf[owner] + balanceOf[newOwner];\n        balanceOf[newOwner] += balanceOf[owner];\n        balanceOf[owner] = 0;\n        assert(balanceOf[owner] + balanceOf[newOwner] == previousBalances);\n        owner = newOwner;\n    }\n\n    function changePrice(uint256 _newAmount) onlyOwner public {\n        unitsOneEthCanBuy = _newAmount;\n    }\n\n    function startSale() onlyOwner public {\n        soldTokens = 0;\n    }\n\n    function increaseSaleLimit(uint256 TokenSale)  onlyOwner public {\n        TokenForSale = TokenSale * 10 ** uint256(decimals);\n    }\n\n    function increaseMinPurchaseQty(uint256 newQty) onlyOwner public {\n        minPurchaseQty = newQty * 10 ** uint256(decimals);\n    }\n    \n    function airDrop(address[] _recipient, uint _totalTokensToDistribute) onlyOwner public {\n        uint256 total_token_to_transfer = (_totalTokensToDistribute * 10 ** uint256(decimals)).mul(_recipient.length); \n        require(balanceOf[owner] >=  total_token_to_transfer);\n        for(uint256 i = 0; i< _recipient.length; i++)\n        {\n            if (!airdrops[_recipient[i]]) {\n              airdrops[_recipient[i]] = true;\n              _transfer(owner, _recipient[i], _totalTokensToDistribute * 10 ** uint256(decimals));\n            }\n        }\n    }\n    function() public payable whenNotPaused CheckSaleStatus {\n        uint256 eth_amount = msg.value;\n        uint256 amount = eth_amount.mul(unitsOneEthCanBuy);\n        soldTokens = soldTokens.add(amount);\n        require(amount >= minPurchaseQty );\n        require(balanceOf[owner] >= amount );\n        _transfer(owner, msg.sender, amount);\n        //Transfer ether to fundsWallet\n        owner.transfer(msg.value);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548160ff0219169083151502179055506012600360006101000a81548160ff021916908360ff16021790555034156200004657600080fd5b633b9aca006040805190810160405280600a81526020017f53686f7069626c6f636b000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f5348420000000000000000000000000000000000000000000000000000000000815250620186a0336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff1660ff16600a0a8402600481905550600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826001908051906020019062000177929190620001eb565b50816002908051906020019062000190929190620001eb565b50600360009054906101000a900460ff1660ff16600a0a810260058190555050505050620138806009819055506000600881905550600360009054906101000a900460ff1660ff16600a0a613e8002600a819055506200029a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022e57805160ff19168380011785556200025f565b828001600101855582156200025f579182015b828111156200025e57825182559160200191906001019062000241565b5b5090506200026e919062000272565b5090565b6200029791905b808211156200029357600081600090555060010162000279565b5090565b90565b611cd680620002aa6000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102cc578063095ea7b31461035a57806318160ddd146103b457806323b872dd146103dd5780632ebeee0f14610456578063313ce567146104795780633a9588ba146104a85780633f4ba83a146104e15780634f0f97ab146104f65780635c975abb1461051f5780635ed9ebfc1461054c57806365f2bc2e1461057557806370a082311461059e5780638456cb59146105eb5780638c86f0a7146106005780638da5cb5b1461065157806395d89b41146106a6578063a2b40d1914610734578063a9059cbb14610757578063b66a0e5d14610799578063c030f3e2146107ae578063cae9ca51146107d1578063dd62ed3e1461086e578063ee2b78a1146108da578063f2fde38b14610903578063fd1fc4a01461093c575b600080600060149054906101000a900460ff1615151561017357600080fd5b6008546005541015151561018657600080fd5b34915061019e6009548361099f90919063ffffffff16565b90506101b5816008546109d290919063ffffffff16565b600881905550600a5481101515156101cc57600080fd5b80600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561023b57600080fd5b6102676000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836109f0565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156102c857600080fd5b5050005b34156102d757600080fd5b6102df610d96565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031f578082015181840152602081019050610304565b50505050905090810190601f16801561034c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036557600080fd5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e34565b604051808215151515815260200191505060405180910390f35b34156103bf57600080fd5b6103c7610ec1565b6040518082815260200191505060405180910390f35b34156103e857600080fd5b61043c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ec7565b604051808215151515815260200191505060405180910390f35b341561046157600080fd5b6104776004808035906020019091905050611079565b005b341561048457600080fd5b61048c6110f5565b604051808260ff1660ff16815260200191505060405180910390f35b34156104b357600080fd5b6104df600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611108565b005b34156104ec57600080fd5b6104f461140c565b005b341561050157600080fd5b6105096114ca565b6040518082815260200191505060405180910390f35b341561052a57600080fd5b6105326114d0565b604051808215151515815260200191505060405180910390f35b341561055757600080fd5b61055f6114e3565b6040518082815260200191505060405180910390f35b341561058057600080fd5b6105886114e9565b6040518082815260200191505060405180910390f35b34156105a957600080fd5b6105d5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114ef565b6040518082815260200191505060405180910390f35b34156105f657600080fd5b6105fe611507565b005b341561060b57600080fd5b610637600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115c7565b604051808215151515815260200191505060405180910390f35b341561065c57600080fd5b6106646115e7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106b157600080fd5b6106b961160c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f95780820151818401526020810190506106de565b50505050905090810190601f1680156107265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073f57600080fd5b61075560048080359060200190919050506116aa565b005b341561076257600080fd5b610797600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061170f565b005b34156107a457600080fd5b6107ac61171e565b005b34156107b957600080fd5b6107cf6004808035906020019091905050611783565b005b34156107dc57600080fd5b610854600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506117ff565b604051808215151515815260200191505060405180910390f35b341561087957600080fd5b6108c4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611979565b6040518082815260200191505060405180910390f35b34156108e557600080fd5b6108ed61199e565b6040518082815260200191505060405180910390f35b341561090e57600080fd5b61093a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119a4565b005b341561094757600080fd5b61099d600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611a42565b005b600080828402905060008414806109c057508284828115156109bd57fe5b04145b15156109c857fe5b8091505092915050565b60008082840190508381101515156109e657fe5b8091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610a1757600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a6557600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610af357600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050610bc882600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9190919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c5d82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109d290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610d9057fe5b50505050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e2c5780601f10610e0157610100808354040283529160200191610e2c565b820191906000526020600020905b815481529060010190602001808311610e0f57829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f5457600080fd5b610fe382600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9190919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061106e8484846109f0565b600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d457600080fd5b600360009054906101000a900460ff1660ff16600a0a8102600a8190555050565b600360009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561116557600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011415156113c857fe5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146757600080fd5b600060149054906101000a900460ff16151561148257600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055481565b600060149054906101000a900460ff1681565b60085481565b60095481565b60066020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561156257600080fd5b600060149054906101000a900460ff1615151561157e57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116a25780601f10611677576101008083540402835291602001916116a2565b820191906000526020600020905b81548152906001019060200180831161168557829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170557600080fd5b8060098190555050565b61171a3383836109f0565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177957600080fd5b6000600881905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117de57600080fd5b600360009054906101000a900460ff1660ff16600a0a810260058190555050565b60008084905061180f8585610e34565b15611970578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119095780820151818401526020810190506118ee565b50505050905090810190601f1680156119365780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561195757600080fd5b5af1151561196457600080fd5b50505060019150611971565b5b509392505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ff57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aa057600080fd5b611acb8451600360009054906101000a900460ff1660ff16600a0a850261099f90919063ffffffff16565b915081600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611b3c57600080fd5b600090505b8351811015611c8b57600b60008583815181101515611b5c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c7e576001600b60008684815181101515611bc857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c7d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168583815181101515611c5657fe5b90602001906020020151600360009054906101000a900460ff1660ff16600a0a86026109f0565b5b8080600101915050611b41565b50505050565b6000828211151515611c9f57fe5b8183039050929150505600a165627a7a72305820db179582f62c58db8dd5849c8e7925dbd0d7859d64137525181f8832de9449b90029"
}