{
  "address": "0x172f20402afc807c8a5566bceed00831adb938ca",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WarfieldToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\ncontract TokenRecoverable is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    function recoverTokens(ERC20Basic token, address to, uint256 amount) public onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        require(balance >= amount);\n        token.safeTransfer(to, amount);\n    }\n}\n\ncontract WarfieldToken is CappedToken, TokenRecoverable {\n    uint256 internal constant TOTAL_TOKENS = 2571428571e18; // 2,571,428,571 tokens \n\n    string public constant name = \"GOLDER COIN\";\n    string public constant symbol = \"GLDR\";\n    uint8 public constant decimals = 18;\n\n    address public tokenMinter;\n\n    modifier canTransfer() {\n        require(mintingFinished, \"Cannot transfer until minting is not finished\");\n        _;\n    }\n\n    modifier hasMintPermission() {\n        require(msg.sender == owner || msg.sender == tokenMinter, \"Only owner or token minter can mint tokens\");\n        _;\n    }\n\n    constructor() public CappedToken(TOTAL_TOKENS) {\n    }\n\n    function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n        require(_to != address(this), \"Tokens cannot be sent to token contract address\");\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n        require(_to != address(this), \"Tokens cannot be sent to token contract address\");\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function mint(address _to, uint256 _amount) public hasMintPermission canMint returns (bool) {\n        require(_to != address(0), \"Token receiver must not be address(0)\");\n        return super.mint(_to, _amount);\n    }\n\n    function mintTokens(address[] _receivers, uint256[] _amounts) external hasMintPermission canMint returns (bool) {\n        require(_receivers.length > 0 && _receivers.length <= 100, \"Receivers count must be in [1, 100] range\");\n        require(_receivers.length == _amounts.length, \"Receivers and amount count must be equal\");\n\n        for (uint256 i = 0; i < _receivers.length; i++) {\n            mint(_receivers[i], _amounts[i]);\n        }\n        return true;\n    }\n\n    function setTokenMinter(address _tokenMinter) public onlyOwner {\n        require(_tokenMinter != address(0), \"Token minter cannot be set to address(0)\");\n        tokenMinter = _tokenMinter;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenMinter\",\"type\":\"address\"}],\"name\":\"setTokenMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b5060038054600160a060020a031916331790556b084f092e274a20067a8c0000600455611571806100526000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012c57806306fdde0314610155578063095ea7b3146101df57806318160ddd1461020357806323b872dd1461022a578063313ce56714610254578063355274ea1461027f57806340c10f19146102945780635f3e849f146102b857806366188463146102e457806370a0823114610308578063715018a61461032957806378533e901461033e5780637d64bcb41461035f5780638da5cb5b1461037457806395d89b41146103a5578063a9059cbb146103ba578063c2acc5cf146103de578063cfb3647b1461040a578063d73dd6231461041f578063dd62ed3e14610443578063f2fde38b1461046a575b600080fd5b34801561013857600080fd5b5061014161048b565b604080519115158252519081900360200190f35b34801561016157600080fd5b5061016a61049b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b50610141600160a060020a03600435166024356104d2565b34801561020f57600080fd5b50610218610538565b60408051918252519081900360200190f35b34801561023657600080fd5b50610141600160a060020a036004358116906024351660443561053e565b34801561026057600080fd5b50610269610664565b6040805160ff9092168252519081900360200190f35b34801561028b57600080fd5b50610218610669565b3480156102a057600080fd5b50610141600160a060020a036004351660243561066f565b3480156102c457600080fd5b506102e2600160a060020a03600435811690602435166044356107bf565b005b3480156102f057600080fd5b50610141600160a060020a0360043516602435610895565b34801561031457600080fd5b50610218600160a060020a0360043516610984565b34801561033557600080fd5b506102e261099f565b34801561034a57600080fd5b506102e2600160a060020a0360043516610a0d565b34801561036b57600080fd5b50610141610ad9565b34801561038057600080fd5b50610389610b5d565b60408051600160a060020a039092168252519081900360200190f35b3480156103b157600080fd5b5061016a610b6c565b3480156103c657600080fd5b50610141600160a060020a0360043516602435610ba3565b3480156103ea57600080fd5b506101416024600480358281019290820135918135918201910135610cc0565b34801561041657600080fd5b50610389610edf565b34801561042b57600080fd5b50610141600160a060020a0360043516602435610eee565b34801561044f57600080fd5b50610218600160a060020a0360043581169060243516610f87565b34801561047657600080fd5b506102e2600160a060020a0360043516610fb2565b60035460a060020a900460ff1681565b60408051808201909152600b81527f474f4c44455220434f494e000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60035460009060a060020a900460ff1615156105ca576040805160e560020a62461bcd02815260206004820152602d60248201527f43616e6e6f74207472616e7366657220756e74696c206d696e74696e6720697360448201527f206e6f742066696e697368656400000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316301415610651576040805160e560020a62461bcd02815260206004820152602f60248201527f546f6b656e732063616e6e6f742062652073656e7420746f20746f6b656e206360448201527f6f6e747261637420616464726573730000000000000000000000000000000000606482015290519081900360840190fd5b61065c848484610fd5565b949350505050565b601281565b60045481565b600354600090600160a060020a03163314806106955750600554600160a060020a031633145b1515610711576040805160e560020a62461bcd02815260206004820152602a60248201527f4f6e6c79206f776e6572206f7220746f6b656e206d696e7465722063616e206d60448201527f696e7420746f6b656e7300000000000000000000000000000000000000000000606482015290519081900360840190fd5b60035460a060020a900460ff161561072857600080fd5b600160a060020a03831615156107ae576040805160e560020a62461bcd02815260206004820152602560248201527f546f6b656e207265636569766572206d757374206e6f7420626520616464726560448201527f7373283029000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6107b8838361114a565b9392505050565b600354600090600160a060020a031633146107d957600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b505190508181101561087557600080fd5b61088f600160a060020a038516848463ffffffff61117916565b50505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106108e957336000908152600260209081526040808320600160a060020a038816845290915281205561091e565b6108f9818463ffffffff61123116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146109b657600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a03163314610a2457600080fd5b600160a060020a0381161515610aaa576040805160e560020a62461bcd02815260206004820152602860248201527f546f6b656e206d696e7465722063616e6e6f742062652073657420746f20616460448201527f6472657373283029000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090600160a060020a03163314610af357600080fd5b60035460a060020a900460ff1615610b0a57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b60408051808201909152600481527f474c445200000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161515610c2f576040805160e560020a62461bcd02815260206004820152602d60248201527f43616e6e6f74207472616e7366657220756e74696c206d696e74696e6720697360448201527f206e6f742066696e697368656400000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038316301415610cb6576040805160e560020a62461bcd02815260206004820152602f60248201527f546f6b656e732063616e6e6f742062652073656e7420746f20746f6b656e206360448201527f6f6e747261637420616464726573730000000000000000000000000000000000606482015290519081900360840190fd5b6107b88383611243565b6003546000908190600160a060020a0316331480610ce85750600554600160a060020a031633145b1515610d64576040805160e560020a62461bcd02815260206004820152602a60248201527f4f6e6c79206f776e6572206f7220746f6b656e206d696e7465722063616e206d60448201527f696e7420746f6b656e7300000000000000000000000000000000000000000000606482015290519081900360840190fd5b60035460a060020a900460ff1615610d7b57600080fd5b600085118015610d8c575060648511155b1515610e08576040805160e560020a62461bcd02815260206004820152602960248201527f52656365697665727320636f756e74206d75737420626520696e205b312c203160448201527f30305d2072616e67650000000000000000000000000000000000000000000000606482015290519081900360840190fd5b848314610e85576040805160e560020a62461bcd02815260206004820152602860248201527f52656365697665727320616e6420616d6f756e7420636f756e74206d7573742060448201527f626520657175616c000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b84811015610ed357610eca868683818110610ea057fe5b90506020020135600160a060020a03168585848181101515610ebe57fe5b9050602002013561066f565b50600101610e89565b50600195945050505050565b600554600160a060020a031681565b336000908152600260209081526040808320600160a060020a0386168452909152812054610f22908363ffffffff61132216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610fc957600080fd5b610fd281611335565b50565b600160a060020a038316600090815260208190526040812054821115610ffa57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561102a57600080fd5b600160a060020a038316151561103f57600080fd5b600160a060020a038416600090815260208190526040902054611068908363ffffffff61123116565b600160a060020a03808616600090815260208190526040808220939093559085168152205461109d908363ffffffff61132216565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546110df908363ffffffff61123116565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60006004546111648360015461132290919063ffffffff16565b111561116f57600080fd5b6107b883836113b3565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156111f557600080fd5b505af1158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b5051151561122c57600080fd5b505050565b60008282111561123d57fe5b50900390565b3360009081526020819052604081205482111561125f57600080fd5b600160a060020a038316151561127457600080fd5b33600090815260208190526040902054611294908363ffffffff61123116565b3360009081526020819052604080822092909255600160a060020a038516815220546112c6908363ffffffff61132216565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b8181018281101561132f57fe5b92915050565b600160a060020a038116151561134a57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090600160a060020a03163314806113d95750600554600160a060020a031633145b1515611455576040805160e560020a62461bcd02815260206004820152602a60248201527f4f6e6c79206f776e6572206f7220746f6b656e206d696e7465722063616e206d60448201527f696e7420746f6b656e7300000000000000000000000000000000000000000000606482015290519081900360840190fd5b60035460a060020a900460ff161561146c57600080fd5b60015461147f908363ffffffff61132216565b600155600160a060020a0383166000908152602081905260409020546114ab908363ffffffff61132216565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001929150505600a165627a7a72305820bfe6cebdd83ce18d5015660bcfff9c6a8d0f18bc51f07e617f2149878b1358c80029"
}