{
  "address": "0x16b87ca39b3501f3f318f65780a305e20d6fcd52",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LAAR",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath \n{\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n\n  function mul(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     if (a == 0) \n     {\n     \treturn 0;\n     }\n     c = a * b;\n     assert(c / a == b);\n     return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     assert(b <= a);\n     return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     c = a + b;\n     assert(c >= a);\n     return c;\n  }\n}\n\ncontract ERC20Interface\n{\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n/**\n * @title Basic token\n */\n\ncontract LAAR is ERC20Interface\n{\n    using SafeMath for uint256;\n   \n    uint256 constant public TOKEN_DECIMALS = 10 ** 18;\n    string public constant name            = \"LaariCoin\";\n    string public constant symbol          = \"LAAR\";\n    uint256 public totalTokenSupply        = 42000000 * TOKEN_DECIMALS;\n    uint256 public totalSaleSupply         = 21000000 * TOKEN_DECIMALS;\n    uint256 public totalReserveSupply      = 21000000 * TOKEN_DECIMALS;\n\n    uint8 public constant decimals         = 18;\n    address public owner;\n    uint256 public totalBurned;\n    bool public stopped = false;\n\n    event Burn(address indexed _burner, uint256 _value);\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n\n    struct ClaimLimit \n    {\n       uint256 time_limit_epoch;\n       bool    limitSet;\n    }\n\n    /** mappings **/ \n    mapping(address => ClaimLimit) public claimLimits;\n    mapping(address => uint256) public  balances;\n    mapping(address => mapping(address => uint256)) internal  allowed;\n \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n\n    modifier onlyOwner() \n    {\n       require(msg.sender == owner);\n       _;\n    }\n    \n    /** constructor **/\n\n    constructor() public\n    {\n       owner = msg.sender;\n       balances[address(this)] = totalSaleSupply;\n\n       emit Transfer(address(0x0), address(this), balances[address(this)]);\n    }\n\n\n    /**\n     * @dev To pause CrowdSale\n     */\n\n    function pauseCrowdSale() external onlyOwner\n    {\n        stopped = true;\n    }\n\n    /**\n     * @dev To resume CrowdSale\n     */\n\n    function resumeCrowdSale() external onlyOwner\n    {\n        stopped = false;\n    }\n\n    /**\n     * @dev    initialize reserveWallet to store LAAR reserve tokens for future use\n     * @param  _reserveWallet  Address of reserve Wallet \n     */\n\n    function initReserveWallet(address _reserveWallet) onlyOwner public \n    {\n       require(!stopped);\n       require( _reserveWallet != address(0x0)); \n\n       balances[_reserveWallet] = totalReserveSupply;\n\n       emit Transfer(address(0x0), _reserveWallet, balances[_reserveWallet]);\n    }\n\n    /**\n     * @dev Burn specified number of LAAR tokens\n     * @param _value The amount of tokens to be burned\n     */\n\n     function burn(uint256 _value) onlyOwner public returns (bool) \n     {\n        require(!stopped);\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n        totalTokenSupply = totalTokenSupply.sub(_value);\n        totalBurned      = totalBurned.add(_value);\n\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0x0), _value);\n        return true;\n     }     \n\n     /**\n      * @dev total number of tokens in existence\n      * @return An uint256 representing the total number of tokens in existence\n      */\n\n     function totalSupply() public view returns(uint256 _totalSupply) \n     {\n        _totalSupply = totalTokenSupply;\n        return _totalSupply;\n     }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner The address to query the the balance of\n     * @return An uint256 representing the amount owned by the passed address\n     */\n\n    function balanceOf(address _owner) public view returns (uint256) \n    {\n       return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)     \n    {\n       require(!stopped);\n\n       if (_value == 0) \n       {\n           emit Transfer(_from, _to, _value);  // Follow the spec to launch the event when value is equal to 0\n           return true;\n       }\n\n       require(!claimLimits[msg.sender].limitSet, \"Limit is set and use claim\");\n       require(_to != address(0x0));\n       require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\n\n       balances[_from] = balances[_from].sub(_value);\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n       balances[_to] = balances[_to].add(_value);\n\n       emit Transfer(_from, _to, _value);\n       return true;\n    }\n\n    /**\n     * @dev transfer tokens from smart contract to another account, only by owner\n     * @param _address The address to transfer to\n     * @param _tokens The amount to be transferred\n     */\n\n    function transferTo(address _address, uint256 _tokens) external onlyOwner returns(bool) \n    {\n       require( _address != address(0x0)); \n       require( balances[address(this)] >= _tokens.mul(TOKEN_DECIMALS) && _tokens.mul(TOKEN_DECIMALS) > 0);\n\n       balances[address(this)] = ( balances[address(this)]).sub(_tokens.mul(TOKEN_DECIMALS));\n       balances[_address] = (balances[_address]).add(_tokens.mul(TOKEN_DECIMALS));\n\n       emit Transfer(address(this), _address, _tokens.mul(TOKEN_DECIMALS));\n       return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds\n     * @param _tokens The amount of tokens to be spent\n     */\n\n    function approve(address _spender, uint256 _tokens) public returns(bool)\n    {\n       require(!stopped);\n       require(_spender != address(0x0));\n\n       allowed[msg.sender][_spender] = _tokens;\n\n       emit Approval(msg.sender, _spender, _tokens);\n       return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     * @return A uint256 specifing the amount of tokens still avaible for the spender\n     */\n\n    function allowance(address _owner, address _spender) public view returns(uint256)\n    {\n       require(!stopped);\n       require(_owner != address(0x0) && _spender != address(0x0));\n\n       return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _address The address to transfer to\n     * @param _tokens The amount to be transferred\n     */\n\n    function transfer(address _address, uint256 _tokens) public returns(bool)\n    {\n       require(!stopped);\n\n       if (_tokens == 0) \n       {\n           emit Transfer(msg.sender, _address, _tokens);  // Follow the spec to launch the event when tokens are equal to 0\n           return true;\n       }\n\n       require(!claimLimits[msg.sender].limitSet, \"Limit is set and use claim\");\n       require(_address != address(0x0));\n       require(balances[msg.sender] >= _tokens);\n\n       balances[msg.sender] = (balances[msg.sender]).sub(_tokens);\n       balances[_address] = (balances[_address]).add(_tokens);\n\n       emit Transfer(msg.sender, _address, _tokens);\n       return true;\n    }\n\n    /**\n     * @dev transfer ownership of this contract, only by owner\n     * @param _newOwner The address of the new owner to transfer ownership\n     */\n\n    function transferOwnership(address _newOwner)public onlyOwner\n    {\n       require(!stopped);\n       require( _newOwner != address(0x0));\n\n       balances[_newOwner] = (balances[_newOwner]).add(balances[owner]);\n       balances[owner] = 0;\n       owner = _newOwner;\n\n       emit Transfer(msg.sender, _newOwner, balances[_newOwner]);\n   }\n\n   /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds\n    * @param _addedValue The amount of tokens to increase the allowance by\n    */\n\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) \n   {\n      require(!stopped);\n\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds\n    * @param _subtractedValue The amount of tokens to decrease the allowance by\n    */\n\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) \n   {\n      uint256 oldValue = allowed[msg.sender][_spender];\n\n      require(!stopped);\n\n      if (_subtractedValue > oldValue) \n      {\n         allowed[msg.sender][_spender] = 0;\n      }\n      else \n      {\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   /**\n    * @dev Transfer tokens to another account, time limit apply\n    */\n\n   function claim(address _recipient) public\n   {\n      require(_recipient != address(0x0), \"Invalid recipient\");\n      require(msg.sender != _recipient, \"Self transfer\");\n      require(claimLimits[msg.sender].limitSet, \"Limit not set\");\n\n      require (now > claimLimits[msg.sender].time_limit_epoch, \"Time limit\");\n       \n      uint256 tokens = balances[msg.sender];\n       \n      balances[msg.sender] = (balances[msg.sender]).sub(tokens);\n      balances[_recipient] = (balances[_recipient]).add(tokens);\n       \n      emit Transfer(msg.sender, _recipient, tokens);\n   }\n \n   /**\n    * @dev Set limit on a claim per address\n    */\n\n   function setClaimLimit(address _address, uint256 _days) public onlyOwner\n   {\n      require(balances[_address] > 0, \"No tokens\");\n\n      claimLimits[_address].time_limit_epoch = (now + ((_days).mul(1 days)));\n   \t\t\n      claimLimits[_address].limitSet = true;\n   }\n\n   /**\n    * @dev reset limit on address\n    */\n\n   function resetClaimLimit(address _address) public onlyOwner\n   {\n      claimLimits[_address].limitSet = false;\n   }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"initReserveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"resetClaimLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setClaimLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimLimits\",\"outputs\":[{\"name\":\"time_limit_epoch\",\"type\":\"uint256\"},{\"name\":\"limitSet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6080604052670de0b6b3a7640000630280de8002600055670de0b6b3a76400006301406f4002600155670de0b6b3a76400006301406f40026002556000600560006101000a81548160ff02191690831515021790555034801561006157600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600154600760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3612e0e8061019d6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063037c983a1461017a57806306fdde0314610191578063095ea7b31461022157806318160ddd146102865780631addc780146102b15780631ca8b6cb146102f45780631e83409a1461031f57806323b872dd1461036257806326ed4c0a146103e757806327e235e31461042a5780632ccb1b3014610481578063313ce567146104e657806342966c68146105175780635b7f415c1461055c578063661884631461058757806370a08231146105ec57806375f12b211461064357806378231978146106725780637c65a48d1461069d5780638da5cb5b146106ea57806391f4f96c1461074157806395d89b411461076c578063a9059cbb146107fc578063bd7d383614610861578063d73dd62314610878578063d89135cd146108dd578063dd62ed3e14610908578063f2fde38b1461097f578063f653cd6b146109c2575b600080fd5b34801561018657600080fd5b5061018f610a24565b005b34801561019d57600080fd5b506101a6610a9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e65780820151818401526020810190506101cb565b50505050905090810190601f1680156102135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022d57600080fd5b5061026c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ad6565b604051808215151515815260200191505060405180910390f35b34801561029257600080fd5b5061029b610c20565b6040518082815260200191505060405180910390f35b3480156102bd57600080fd5b506102f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c2c565b005b34801561030057600080fd5b50610309610dce565b6040518082815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dd4565b005b34801561036e57600080fd5b506103cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611270565b604051808215151515815260200191505060405180910390f35b3480156103f357600080fd5b50610428600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611793565b005b34801561043657600080fd5b5061046b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061184d565b6040518082815260200191505060405180910390f35b34801561048d57600080fd5b506104cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611865565b604051808215151515815260200191505060405180910390f35b3480156104f257600080fd5b506104fb611b74565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052357600080fd5b5061054260048036038101908080359060200190929190505050611b79565b604051808215151515815260200191505060405180910390f35b34801561056857600080fd5b50610571611dce565b6040518082815260200191505060405180910390f35b34801561059357600080fd5b506105d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dda565b604051808215151515815260200191505060405180910390f35b3480156105f857600080fd5b5061062d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612087565b6040518082815260200191505060405180910390f35b34801561064f57600080fd5b506106586120d0565b604051808215151515815260200191505060405180910390f35b34801561067e57600080fd5b506106876120e3565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506106e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120e9565b005b3480156106f657600080fd5b506106ff6122b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074d57600080fd5b506107566122df565b6040518082815260200191505060405180910390f35b34801561077857600080fd5b506107816122e5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c15780820151818401526020810190506107a6565b50505050905090810190601f1680156107ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080857600080fd5b50610847600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061231e565b604051808215151515815260200191505060405180910390f35b34801561086d57600080fd5b5061087661269c565b005b34801561088457600080fd5b506108c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612715565b604051808215151515815260200191505060405180910390f35b3480156108e957600080fd5b506108f261292d565b6040518082815260200191505060405180910390f35b34801561091457600080fd5b50610969600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612933565b6040518082815260200191505060405180910390f35b34801561098b57600080fd5b506109c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a4b565b005b3480156109ce57600080fd5b50610a03600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d44565b60405180838152602001821515151581526020019250505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8057600080fd5b6000600560006101000a81548160ff021916908315150217905550565b6040805190810160405280600981526020017f4c61617269436f696e000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff16151515610af457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b3057600080fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905080905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c8857600080fd5b600560009054906101000a900460ff16151515610ca457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ce057600080fd5b600254600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610e7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c696420726563697069656e7400000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610f1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f53656c66207472616e736665720000000000000000000000000000000000000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161515610fe2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4c696d6974206e6f74207365740000000000000000000000000000000000000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001544211151561109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f54696d65206c696d69740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061112f81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600560009054906101000a900460ff1615151561128e57600080fd5b6000821415611305578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061178c565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161515156113ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4c696d69742069732073657420616e642075736520636c61696d00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561140657600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156114d1575081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156114de575060008210155b15156114e957600080fd5b61153b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061160d82600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116df82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117ef57600080fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555050565b60076020528060005260406000206000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118c357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118ff57600080fd5b61191a670de0b6b3a764000083612daa90919063ffffffff16565b600760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561198257506000611980670de0b6b3a764000084612daa90919063ffffffff16565b115b151561198d57600080fd5b6119f96119ab670de0b6b3a764000084612daa90919063ffffffff16565b600760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611aa8611a5a670de0b6b3a764000084612daa90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611b55670de0b6b3a764000086612daa90919063ffffffff16565b6040518082815260200191505060405180910390a36001905092915050565b601281565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bd857600080fd5b600560009054906101000a900460ff16151515611bf457600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611c4257600080fd5b339050611c9783600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cef83600054612d7590919063ffffffff16565b600081905550611d0a83600454612d8e90919063ffffffff16565b6004819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36001915050919050565b670de0b6b3a764000081565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600560009054906101000a900460ff16151515611e7857600080fd5b80831115611f07576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f9b565b611f1a8382612d7590919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900460ff1681565b60015481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561214557600080fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f20746f6b656e73000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6122126201518082612daa90919063ffffffff16565b4201600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6040805190810160405280600481526020017f4c4141520000000000000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff1615151561233c57600080fd5b60008214156123b3578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050612696565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16151515612478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4c696d69742069732073657420616e642075736520636c61696d00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156124b457600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561250257600080fd5b61255482600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d7590919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125e982600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126f857600080fd5b6001600560006101000a81548160ff021916908315150217905550565b6000600560009054906101000a900460ff1615151561273357600080fd5b6127c282600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60045481565b6000600560009054906101000a900460ff1615151561295157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156129bb5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15156129c657600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aa757600080fd5b600560009054906101000a900460ff16151515612ac357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612aff57600080fd5b612bb260076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d8e90919063ffffffff16565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6000828211151515612d8357fe5b818303905092915050565b60008183019050828110151515612da157fe5b80905092915050565b600080831415612dbd5760009050612ddc565b8183029050818382811515612dce57fe5b04141515612dd857fe5b8090505b929150505600a165627a7a72305820ccb0cb99a44d866c391bf39928309ad7bc8a549dfa327fbca0d0049496c646990029"
}