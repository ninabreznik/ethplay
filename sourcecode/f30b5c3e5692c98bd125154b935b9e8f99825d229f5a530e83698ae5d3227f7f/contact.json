{
  "address": "0x2f23228b905ceb4734eb42d9b42805296667c93b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Coinchangex",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-08\n*/\n\npragma solidity ^0.4.23;\npragma solidity ^0.4.17;\n\n\n/**\n * @title Token\n * @dev Token interface necessary for working with tokens within the exchange contract.\n */\ncontract IToken {\n    /// @return total amount of tokens\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    uint public decimals;\n    string public name;\n}\n\npragma solidity ^0.4.17;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary LSafeMath {\n\n    uint256 constant WAD = 1 ether;\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a == b)\n            return c;\n        revert();\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b > 0) { \n            uint256 c = a / b;\n            return c;\n        }\n        revert();\n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b <= a)\n            return a - b;\n        revert();\n    }\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        if (c >= a) \n            return c;\n        revert();\n    }\n\n    function wmul(uint a, uint b) internal pure returns (uint256) {\n        return add(mul(a, b), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint a, uint b) internal pure returns (uint256) {\n        return add(mul(a, WAD), b / 2) / b;\n    }\n}\n\n/**\n * @title Coinchangex\n * @dev This is the main contract for the Coinchangex exchange.\n */\ncontract Coinchangex {\n  \n  using LSafeMath for uint;\n  \n  struct SpecialTokenBalanceFeeTake {\n      bool exist;\n      address token;\n      uint256 balance;\n      uint256 feeTake;\n  }\n  \n  uint constant private MAX_SPECIALS = 10;\n\n  /// Variables\n  address public admin; // the admin address\n  address public feeAccount; // the account that will receive fees\n  uint public feeTake; // percentage times (1 ether)\n  bool private depositingTokenFlag; // True when Token.transferFrom is being called from depositToken\n  mapping (address => mapping (address => uint)) public tokens; // mapping of token addresses to mapping of account balances (token=0 means Ether)\n  mapping (address => mapping (bytes32 => uint)) public orderFills; // mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n  SpecialTokenBalanceFeeTake[] public specialFees;\n  \n\n  /// Logging Events\n  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\n  event Deposit(address token, address user, uint amount, uint balance);\n  event Withdraw(address token, address user, uint amount, uint balance);\n\n  /// This is a modifier for functions to check if the sending user address is the same as the admin user address.\n  modifier isAdmin() {\n      require(msg.sender == admin);\n      _;\n  }\n\n  /// Constructor function. This is only called on contract creation.\n  function Coinchangex(address admin_, address feeAccount_, uint feeTake_) public {\n    admin = admin_;\n    feeAccount = feeAccount_;\n    feeTake = feeTake_;\n    depositingTokenFlag = false;\n  }\n\n  /// The fallback function. Ether transfered into the contract is not accepted.\n  function() public {\n    revert();\n  }\n\n  /// Changes the official admin user address. Accepts Ethereum address.\n  function changeAdmin(address admin_) public isAdmin {\n    require(admin_ != address(0));\n    admin = admin_;\n  }\n\n  /// Changes the account address that receives trading fees. Accepts Ethereum address.\n  function changeFeeAccount(address feeAccount_) public isAdmin {\n    feeAccount = feeAccount_;\n  }\n\n  /// Changes the fee on takes. Can only be changed to a value less than it is currently set at.\n  function changeFeeTake(uint feeTake_) public isAdmin {\n    // require(feeTake_ <= feeTake);\n    feeTake = feeTake_;\n  }\n  \n  // add special promotion fee\n  function addSpecialFeeTake(address token, uint256 balance, uint256 feeTake) public isAdmin {\n      uint id = specialFees.push(SpecialTokenBalanceFeeTake(\n          true,\n          token,\n          balance,\n          feeTake\n      ));\n  }\n  \n  // chnage special promotion fee\n  function chnageSpecialFeeTake(uint id, address token, uint256 balance, uint256 feeTake) public isAdmin {\n      require(id < specialFees.length);\n      specialFees[id] = SpecialTokenBalanceFeeTake(\n          true,\n          token,\n          balance,\n          feeTake\n      );\n  }\n  \n    // remove special promotion fee\n   function removeSpecialFeeTake(uint id) public isAdmin {\n       if (id >= specialFees.length) revert();\n\n        uint last = specialFees.length-1;\n        for (uint i = id; i<last; i++){\n            specialFees[i] = specialFees[i+1];\n        }\n        \n        delete specialFees[last];\n        specialFees.length--;\n  } \n  \n  //return total count promotion fees\n  function TotalSpecialFeeTakes() public constant returns(uint)  {\n      return specialFees.length;\n  }\n  \n  \n  ////////////////////////////////////////////////////////////////////////////////\n  // Deposits, Withdrawals, Balances\n  ////////////////////////////////////////////////////////////////////////////////\n\n  /**\n  * This function handles deposits of Ether into the contract.\n  * Emits a Deposit event.\n  * Note: With the payable modifier, this function accepts Ether.\n  */\n  function deposit() public payable {\n    tokens[0][msg.sender] = tokens[0][msg.sender].add(msg.value);\n    Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n  }\n\n  /**\n  * This function handles withdrawals of Ether from the contract.\n  * Verifies that the user has enough funds to cover the withdrawal.\n  * Emits a Withdraw event.\n  * @param amount uint of the amount of Ether the user wishes to withdraw\n  */\n  function withdraw(uint amount) public {\n    require(tokens[0][msg.sender] >= amount);\n    tokens[0][msg.sender] = tokens[0][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\n  }\n\n  /**\n  * This function handles deposits of Ethereum based tokens to the contract.\n  * Does not allow Ether.\n  * If token transfer fails, transaction is reverted and remaining gas is refunded.\n  * Emits a Deposit event.\n  * Note: Remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n  * @param token Ethereum contract address of the token or 0 for Ether\n  * @param amount uint of the amount of the token the user wishes to deposit\n  */\n  function depositToken(address token, uint amount) public {\n    require(token != 0);\n    depositingTokenFlag = true;\n    require(IToken(token).transferFrom(msg.sender, this, amount));\n    depositingTokenFlag = false;\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n }\n\n  /**\n  * This function provides a fallback solution as outlined in ERC223.\n  * If tokens are deposited through depositToken(), the transaction will continue.\n  * If tokens are sent directly to this contract, the transaction is reverted.\n  * @param sender Ethereum address of the sender of the token\n  * @param amount amount of the incoming tokens\n  * @param data attached data similar to msg.data of Ether transactions\n  */\n  function tokenFallback( address sender, uint amount, bytes data) public returns (bool ok) {\n      if (depositingTokenFlag) {\n        // Transfer was initiated from depositToken(). User token balance will be updated there.\n        return true;\n      } else {\n        // Direct ECR223 Token.transfer into this contract not allowed, to keep it consistent\n        // with direct transfers of ECR20 and ETH.\n        revert();\n      }\n  }\n  \n  /**\n  * This function handles withdrawals of Ethereum based tokens from the contract.\n  * Does not allow Ether.\n  * If token transfer fails, transaction is reverted and remaining gas is refunded.\n  * Emits a Withdraw event.\n  * @param token Ethereum contract address of the token or 0 for Ether\n  * @param amount uint of the amount of the token the user wishes to withdraw\n  */\n  function withdrawToken(address token, uint amount) public {\n    require(token != 0);\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n    require(IToken(token).transfer(msg.sender, amount));\n    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  /**\n  * Retrieves the balance of a token based on a user address and token address.\n  * @param token Ethereum contract address of the token or 0 for Ether\n  * @param user Ethereum address of the user\n  * @return the amount of tokens on the exchange for a given user address\n  */\n  function balanceOf(address token, address user) public constant returns (uint) {\n    return tokens[token][user];\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Trading\n  ////////////////////////////////////////////////////////////////////////////////\n\n  /**\n  * Facilitates a trade from one user to another.\n  * Requires that the transaction is signed properly, the trade isn't past its expiration, and all funds are present to fill the trade.\n  * Calls tradeBalances().\n  * Updates orderFills with the amount traded.\n  * Emits a Trade event.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * Note: amount is in amountGet / tokenGet terms.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param expires uint of block number when this order should expire\n  * @param nonce arbitrary random number\n  * @param user Ethereum address of the user who placed the order\n  * @param v part of signature for the order hash as signed by user\n  * @param r part of signature for the order hash as signed by user\n  * @param s part of signature for the order hash as signed by user\n  * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n  */\n  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    require((\n      (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    Trade(tokenGet, amount, tokenGive, amountGive.mul(amount) / amountGet, user, msg.sender);\n  }\n\n  /**\n  * This is a private function and is only being called from trade().\n  * Handles the movement of funds when a trade occurs.\n  * Takes fees.\n  * Updates token balances for both buyer and seller.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * Note: amount is in amountGet / tokenGet terms.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param user Ethereum address of the user who placed the order\n  * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n  */\n  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\n    \n    uint256 feeTakeXfer = calculateFee(amount);\n    \n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(feeTakeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount);\n    tokens[tokenGet][feeAccount] = tokens[tokenGet][feeAccount].add(feeTakeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount).div(amountGet));\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount).div(amountGet));\n  }\n  \n  //calculate fee including special promotions\n  function calculateFee(uint amount) private constant returns(uint256)  {\n    uint256 feeTakeXfer = 0;\n    \n    uint length = specialFees.length;\n    bool applied = false;\n    for(uint i = 0; length > 0 && i < length; i++) {\n        SpecialTokenBalanceFeeTake memory special = specialFees[i];\n        if(special.exist && special.balance <= tokens[special.token][msg.sender]) {\n            applied = true;\n            feeTakeXfer = amount.mul(special.feeTake).div(1 ether);\n            break;\n        }\n        if(i >= MAX_SPECIALS)\n            break;\n    }\n    \n    if(!applied)\n        feeTakeXfer = amount.mul(feeTake).div(1 ether);\n    \n    \n    return feeTakeXfer;\n  }\n\n  /**\n  * This function is to test if a trade would go through.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * Note: amount is in amountGet / tokenGet terms.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param expires uint of block number when this order should expire\n  * @param nonce arbitrary random number\n  * @param user Ethereum address of the user who placed the order\n  * @param v part of signature for the order hash as signed by user\n  * @param r part of signature for the order hash as signed by user\n  * @param s part of signature for the order hash as signed by user\n  * @param amount uint amount in terms of tokenGet that will be \"buy\" in the trade\n  * @param sender Ethereum address of the user taking the order\n  * @return bool: true if the trade would be successful, false otherwise\n  */\n  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public constant returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n      )) { \n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n  * This function checks the available volume for a given order.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param expires uint of block number when this order should expire\n  * @param nonce arbitrary random number\n  * @param user Ethereum address of the user who placed the order\n  * @param v part of signature for the order hash as signed by user\n  * @param r part of signature for the order hash as signed by user\n  * @param s part of signature for the order hash as signed by user\n  * @return uint: amount of volume available for the given order in terms of amountGet / tokenGet\n  */\n  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public constant returns(uint) {\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    if (!(\n      (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user) &&\n      block.number <= expires\n      )) {\n      return 0;\n    }\n    uint[2] memory available;\n    available[0] = amountGet.sub(orderFills[user][hash]);\n    available[1] = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (available[0] < available[1]) {\n      return available[0];\n    } else {\n      return available[1];\n    }\n  }\n\n  /**\n  * This function checks the amount of an order that has already been filled.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param expires uint of block number when this order should expire\n  * @param nonce arbitrary random number\n  * @param user Ethereum address of the user who placed the order\n  * @param v part of signature for the order hash as signed by user\n  * @param r part of signature for the order hash as signed by user\n  * @param s part of signature for the order hash as signed by user\n  * @return uint: amount of the given order that has already been filled in terms of amountGet / tokenGet\n  */\n  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public constant returns(uint) {\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    return orderFills[user][hash];\n  }\n\n  /**\n  * This function cancels a given order by editing its fill data to the full amount.\n  * Requires that the transaction is signed properly.\n  * Updates orderFills to the full amountGet\n  * Emits a Cancel event.\n  * Note: tokenGet & tokenGive can be the Ethereum contract address.\n  * @param tokenGet Ethereum contract address of the token to receive\n  * @param amountGet uint amount of tokens being received\n  * @param tokenGive Ethereum contract address of the token to give\n  * @param amountGive uint amount of tokens being given\n  * @param expires uint of block number when this order should expire\n  * @param nonce arbitrary random number\n  * @param v part of signature for the order hash as signed by user\n  * @param r part of signature for the order hash as signed by user\n  * @param s part of signature for the order hash as signed by user\n  * @return uint: amount of the given order that has already been filled in terms of amountGet / tokenGet\n  */\n  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    require ((ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n\n  \n  /**\n  * This function handles deposits of Ether into the contract, but allows specification of a user.\n  * Note: This is generally used in migration of funds.\n  * Note: With the payable modifier, this function accepts Ether.\n  */\n  function depositForUser(address user) public payable {\n    require(user != address(0));\n    require(msg.value > 0);\n    tokens[0][user] = tokens[0][user].add(msg.value);\n  }\n  \n  /**\n  * This function handles deposits of Ethereum based tokens into the contract, but allows specification of a user.\n  * Does not allow Ether.\n  * If token transfer fails, transaction is reverted and remaining gas is refunded.\n  * Note: This is generally used in migration of funds.\n  * Note: Remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n  * @param token Ethereum contract address of the token\n  * @param amount uint of the amount of the token the user wishes to deposit\n  */\n  function depositTokenForUser(address token, uint amount, address user) public {\n    require(token != address(0));\n    require(user != address(0));\n    require(amount > 0);\n    depositingTokenFlag = true;\n    require(IToken(token).transferFrom(msg.sender, this, amount));\n    depositingTokenFlag = false;\n    tokens[token][user] = tokens[token][user].add(amount);\n  }\n  \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSpecialFeeTakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositTokenForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeSpecialFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"name\":\"changeFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialFees\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"addSpecialFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"chnageSpecialFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051606080613ea2833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055506000600360006101000a81548160ff021916908315150217905550505050613da6806100fc6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a19b14a1461016657806314143c911461024457806319774d431461026f578063278b8c0e146102d45780632e1a7d4d14610388578063338b5dea146103b55780633c2e2a751461040257806346be96c31461046f5780634a180cb314610557578063508493bc1461058457806365e17c9d146105fb5780636a523c5e146106525780636c86888b1461068857806371ffcb161461079e5780638823a9c0146107e15780638f2839701461080e5780639e281a9814610851578063ab6db7241461089e578063c0ee0b8a14610924578063c281309e146109cf578063cf478921146109fa578063d0e30db014610a51578063f7888aec14610a5b578063f851a44014610ad2578063fb6e155f14610b29578063fba9dbbb14610c11575b34801561016057600080fd5b50600080fd5b34801561017257600080fd5b50610242600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050610c72565b005b34801561025057600080fd5b5061025961113c565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050611149565b6040518082815260200191505060405180910390f35b3480156102e057600080fd5b50610386600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919050505061116e565b005b34801561039457600080fd5b506103b360048036038101908080359060200190929190505050611529565b005b3480156103c157600080fd5b50610400600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117c3565b005b34801561040e57600080fd5b5061046d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b72565b005b34801561047b57600080fd5b50610541600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611e60565b6040518082815260200191505060405180910390f35b34801561056357600080fd5b5061058260048036038101908080359060200190929190505050612005565b005b34801561059057600080fd5b506105e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612208565b6040518082815260200191505060405180910390f35b34801561060757600080fd5b5061061061222d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610686600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612253565b005b34801561069457600080fd5b50610784600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612384565b604051808215151515815260200191505060405180910390f35b3480156107aa57600080fd5b506107df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612447565b005b3480156107ed57600080fd5b5061080c600480360381019080803590602001909291905050506124e6565b005b34801561081a57600080fd5b5061084f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061254b565b005b34801561085d57600080fd5b5061089c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612625565b005b3480156108aa57600080fd5b506108c9600480360381019080803590602001909291905050506129f5565b60405180851515151581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390f35b34801561093057600080fd5b506109b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612a61565b604051808215151515815260200191505060405180910390f35b3480156109db57600080fd5b506109e4612a8d565b6040518082815260200191505060405180910390f35b348015610a0657600080fd5b50610a4f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612a93565b005b610a59612bdd565b005b348015610a6757600080fd5b50610abc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dba565b6040518082815260200191505060405180910390f35b348015610ade57600080fd5b50610ae7612e41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b3557600080fd5b50610bfb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050612e66565b6040518082815260200191505060405180910390f35b348015610c1d57600080fd5b50610c7060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061325d565b005b60006002308d8d8d8d8d8d604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019750505050505050506020604051808303816000865af1158015610d84573d6000803e3d6000fd5b5050506040513d6020811015610d9957600080fd5b810190808051906020019092919050505090508573ffffffffffffffffffffffffffffffffffffffff1660018260405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610e7f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16148015610eac5750874311155b8015610f2257508a610f1f83600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560001916600019168152602001908152602001600020546133a790919063ffffffff16565b11155b1515610f2d57600080fd5b610f3b8c8c8c8c8a876133cc565b610fa682600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460001916600019168152602001908152602001600020546133a790919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055507f6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d8c838c8e61103a878f6139cb90919063ffffffff16565b81151561104357fe5b048a33604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390a1505050505050505050505050565b6000600680549050905090565b6005602052816000526040600020602052806000526040600020600091509150505481565b60006002308b8b8b8b8b8b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019750505050505050506020604051808303816000865af1158015611280573d6000803e3d6000fd5b5050506040513d602081101561129557600080fd5b810190808051906020019092919050505090503373ffffffffffffffffffffffffffffffffffffffff1660018260405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561137b573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161415156113a757600080fd5b88600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055507f1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b08a8a8a8a8a8a338b8b8b604051808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1660ff168152602001836000191660001916815260200182600019166000191681526020019a505050505050505050505060405180910390a150505050505050505050565b80600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561159e57600080fd5b61161781600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a0c90919063ffffffff16565b600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116c7573d6000803e3d6000fd5b507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb56760003383600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156117e957600080fd5b6001600360006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156118db57600080fd5b505af11580156118ef573d6000803e3d6000fd5b505050506040513d602081101561190557600080fd5b8101908080519060200190929190505050151561192157600080fd5b6000600360006101000a81548160ff0219169083151502179055506119cb81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611bae57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611bea57600080fd5b600082111515611bf957600080fd5b6001600360006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611ceb57600080fd5b505af1158015611cff573d6000803e3d6000fd5b505050506040513d6020811015611d1557600080fd5b81019080805190602001909291905050501515611d3157600080fd5b6000600360006101000a81548160ff021916908315150217905550611ddb82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000806002308d8d8d8d8d8d604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019750505050505050506020604051808303816000865af1158015611f73573d6000803e3d6000fd5b5050506040513d6020811015611f8857600080fd5b81019080805190602001909291905050509050600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008260001916600019168152602001908152602001600020549150509a9950505050505050505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561206357600080fd5b6006805490508310151561207657600080fd5b60016006805490500391508290505b818110156121825760066001820181548110151561209f57fe5b90600052602060002090600302016006828154811015156120bc57fe5b90600052602060002090600302016000820160009054906101000a900460ff168160000160006101000a81548160ff0219169083151502179055506000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201548160010155600282015481600201559050508080600101915050612085565b60068281548110151561219157fe5b9060005260206000209060030201600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055505060068054809190600190036122029190613c7b565b50505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561228f57600080fd5b60003411151561229e57600080fd5b61231734600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600082600460008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156124235750826124208e8e8e8e8e8e8e8e8e8e612e66565b10155b15156124325760009050612437565b600190505b9c9b505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124a257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561254157600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125a657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156125e257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561264b57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156126d657600080fd5b61276581600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a0c90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561288857600080fd5b505af115801561289c573d6000803e3d6000fd5b505050506040513d60208110156128b257600080fd5b810190808051906020019092919050505015156128ce57600080fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b600681815481101515612a0457fe5b90600052602060002090600302016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905084565b6000600360009054906101000a900460ff1615612a815760019050612a86565b600080fd5b9392505050565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612af057600080fd5b60066080604051908101604052806001151581526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201555050905050505050565b612c5634600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d760003334600460008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080612e71613cad565b6002308e8e8e8e8e8e604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019750505050505050506020604051808303816000865af1158015612f81573d6000803e3d6000fd5b5050506040513d6020811015612f9657600080fd5b810190808051906020019092919050505091508673ffffffffffffffffffffffffffffffffffffffff1660018360405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020888888604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561307c573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161480156130a95750884311155b15156130b8576000925061324d565b613123600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460001916600019168152602001908152602001600020548d613a0c90919063ffffffff16565b81600060028110151561313257fe5b602002018181525050896131cb8d600460008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139cb90919063ffffffff16565b8115156131d457fe5b048160016002811015156131e457fe5b6020020181815250508060016002811015156131fc57fe5b602002015181600060028110151561321057fe5b602002015110156132365780600060028110151561322a57fe5b6020020151925061324d565b80600160028110151561324557fe5b602002015192505b50509a9950505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156132b857600080fd5b600680549050841015156132cb57600080fd5b6080604051908101604052806001151581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281525060068581548110151561331557fe5b906000526020600020906003020160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101556060820151816002015590505050505050565b600080828401905083811015156133c0578091506133c5565b600080fd5b5092915050565b60006133d782613a2c565b905061347a6133ef82846133a790919063ffffffff16565b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a0c90919063ffffffff16565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061358982600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136ba81600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061380f6137848761377685886139cb90919063ffffffff16565b613c4d90919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a0c90919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506139426138b7876138a985886139cb90919063ffffffff16565b613c4d90919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133a790919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b60008060008414156139e05760009150613a05565b82840290508284828115156139f157fe5b041415613a0057809150613a05565b600080fd5b5092915050565b60008282111515613a21578183039050613a26565b600080fd5b92915050565b6000806000806000613a3c613ccf565b60009450600680549050935060009250600091505b600084118015613a6057508382105b15613c0757600682815481101515613a7457fe5b9060005260206000209060030201608060405190810160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050905080600001518015613baa575060046000826020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816040015111155b15613beb5760019250613be4670de0b6b3a7640000613bd683606001518a6139cb90919063ffffffff16565b613c4d90919063ffffffff16565b9450613c07565b600a82101515613bfa57613c07565b8180600101925050613a51565b821515613c4057613c3d670de0b6b3a7640000613c2f6002548a6139cb90919063ffffffff16565b613c4d90919063ffffffff16565b94505b8495505050505050919050565b6000806000831115613c6f578284811515613c6457fe5b049050809150613c74565b600080fd5b5092915050565b815481835581811115613ca857600302816003028360005260206000209182019101613ca79190613d10565b5b505050565b6040805190810160405280600290602082028038833980820191505090505090565b608060405190810160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b613d7791905b80821115613d7357600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905550600301613d16565b5090565b905600a165627a7a72305820872c5e1b2f7c754220377902cbd06f0cfc037d030add88748b2e33f1eea444fb0029000000000000000000000000b2d2e17addbf654f7a9e4d65975ab715d3022355000000000000000000000000b2d2e17addbf654f7a9e4d65975ab715d30223550000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000b2d2e17addbf654f7a9e4d65975ab715d3022355000000000000000000000000b2d2e17addbf654f7a9e4d65975ab715d30223550000000000000000000000000000000000000000000000000000000000000000"
}