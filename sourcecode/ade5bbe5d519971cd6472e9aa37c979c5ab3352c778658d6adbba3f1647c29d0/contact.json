{
  "address": "0x5129bdff6b065ce57cc7e7349ba681a0ac1d00cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BNCXToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity ^0.4.24;\n\ncontract BNCXToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 8;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor() public {\n        totalSupply = 50000000 * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = totalSupply;\n        name = \"BNLimited Coin\";\n        symbol = \"BNCX\";\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \n        balanceOf[msg.sender] -= _value;            \n        totalSupply -= _value;                      \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                \n        require(_value <= allowance[_from][msg.sender]);    \n        balanceOf[_from] -= _value;                         \n        allowance[_from][msg.sender] -= _value;             \n        totalSupply -= _value;                              \n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526002805460ff1916600817905534801561001d57600080fd5b5060025460ff16600a0a6302faf080026003819055336000908152600460209081526040808320939093558251808401909352600e8084527f424e4c696d6974656420436f696e0000000000000000000000000000000000009390910192835261008792906100d2565b506040805180820190915260048082527f424e43580000000000000000000000000000000000000000000000000000000060209092019182526100cc916001916100d2565b5061016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011357805160ff1916838001178555610140565b82800160010185558215610140579182015b82811115610140578251825591602001919060010190610125565b5061014c929150610150565b5090565b61016a91905b8082111561014c5760008155600101610156565b90565b6106fd8061017c6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806342966c68146101f157806370a082311461020957806379cc67901461022a57806395d89b411461024e578063a9059cbb14610263578063dd62ed3e14610289575b600080fd5b3480156100bf57600080fd5b506100c86102b0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561033e565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a61036b565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a0360043581169060243516604435610371565b3480156101d257600080fd5b506101db6103e0565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b506101616004356103e9565b34801561021557600080fd5b5061018a600160a060020a0360043516610461565b34801561023657600080fd5b50610161600160a060020a0360043516602435610473565b34801561025a57600080fd5b506100c8610544565b34801561026f57600080fd5b50610287600160a060020a036004351660243561059e565b005b34801561029557600080fd5b5061018a600160a060020a03600435811690602435166105ad565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b505050505081565b336000908152600560209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b600160a060020a03831660009081526005602090815260408083203384529091528120548211156103a157600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020805483900390556103d68484846105ca565b5060019392505050565b60025460ff1681565b3360009081526004602052604081205482111561040557600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561049857600080fd5b600160a060020a03831660009081526005602090815260408083203384529091529020548211156104c857600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103365780601f1061030b57610100808354040283529160200191610336565b6105a93383836105ca565b5050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156105e157600080fd5b600160a060020a03841660009081526004602052604090205482111561060657600080fd5b600160a060020a0383166000908152600460205260409020548281011161062c57600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a038084166000908152600460205260408082205492871682529020540181146106cb57fe5b505050505600a165627a7a723058201563f71e614bc6a4cb7bd81a478942f7ecdbef8e7ee3d264b9230b25a007fd7c0029"
}