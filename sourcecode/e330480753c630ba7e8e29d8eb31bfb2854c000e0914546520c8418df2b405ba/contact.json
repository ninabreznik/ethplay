{
  "address": "0x36108dc5f46c2630db44a1d645876ea04aa61f9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DestructibleMiniMeToken",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity 0.4.22;\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n}\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            require(allowed[_from][msg.sender] >= _amount);\n            allowed[_from][msg.sender] -= _amount;\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal {\n\n           if (_amount == 0) {\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n               return;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer throws\n           uint previousBalanceFrom = balanceOfAt(_from, block.number);\n\n           require(previousBalanceFrom >= _amount);\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           uint previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           emit Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        emit Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        emit Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () public payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyController {\n        if (_token == 0x0) {\n            controller.transfer(address(this).balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        emit ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n/*\n    Copyright 2017, Will Harborne (Ethfinex)\n*/\n\ncontract DestructibleMiniMeToken is MiniMeToken {\n\n  address terminator;\n\n  function DestructibleMiniMeToken(\n      address _tokenFactory,\n      address _parentToken,\n      uint _parentSnapShotBlock,\n      string _tokenName,\n      uint8 _decimalUnits,\n      string _tokenSymbol,\n      bool _transfersEnabled,\n      address _terminator\n  ) public MiniMeToken(\n      _tokenFactory,\n      _parentToken,\n      _parentSnapShotBlock,\n      _tokenName,\n      _decimalUnits,\n      _tokenSymbol,\n      _transfersEnabled\n    ) {\n        terminator = _terminator;\n      }\n\n  function recycle() public {\n    require(msg.sender == terminator);\n    selfdestruct(terminator);\n  }\n}\n\ncontract DestructibleMiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createDestructibleCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (DestructibleMiniMeToken) {\n        DestructibleMiniMeToken newToken = new DestructibleMiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled,\n            msg.sender\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}",
  "bytecode": "60c0604052600760808190527f4d4d545f302e320000000000000000000000000000000000000000000000000060a090815262000040916004919062000184565b503480156200004e57600080fd5b5060405162001bcf38038062001bcf8339810160409081528151602080840151928401516060850151608086015160a087015160c088015160e089015160008054600160a060020a03338116600160a060020a031990921691909117909155600b8054918a166101000261010060a860020a0319909216919091179055938901805197999597909693959290920193909290918991899189918991899189918991620001009160019187019062000184565b506002805460ff191660ff851617905581516200012590600390602085019062000184565b5060058054600160a060020a0319908116600160a060020a0398891617909155600695909555600b805460ff191691151591909117905550504360075550600c8054909116939091169290921790915550620002299650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c757805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f7578251825591602001919060010190620001da565b506200020592915062000209565b5090565b6200022691905b8082111562000205576000815560010162000210565b90565b61199680620002396000396000f30060806040526004361061013a5763ffffffff60e060020a60003504166306fdde0381146101fe578063095ea7b3146102885780630f23cbaa146102c057806317634514146102d557806318160ddd146102fc57806323b872dd14610311578063313ce5671461033b5780633cebb823146103665780634ee2cd7e1461038757806354fd4d50146103ab5780636638c087146103c057806370a082311461048357806380a54001146104a4578063827f32c0146104b957806395d89b41146104dd578063981b24d0146104f2578063a9059cbb1461050a578063bef97c871461052e578063c5bcc4f114610543578063cae9ca5114610558578063d3ce77fe146105c1578063dd62ed3e146105e5578063df8de3e71461060c578063e77772fe1461062d578063f41e60c514610642578063f77c47911461065c575b60005461014f90600160a060020a0316610671565b151561015a57600080fd5b600054604080517ff48c3054000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301529151919092169163f48c305491349160248082019260209290919082900301818588803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b50505050506040513d60208110156101ef57600080fd5b505115156101fc57600080fd5b005b34801561020a57600080fd5b5061021361069e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024d578181015183820152602001610235565b50505050905090810190601f16801561027a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029457600080fd5b506102ac600160a060020a036004351660243561072b565b604080519115158252519081900360200190f35b3480156102cc57600080fd5b506101fc6108ac565b3480156102e157600080fd5b506102ea6108d5565b60408051918252519081900360200190f35b34801561030857600080fd5b506102ea6108db565b34801561031d57600080fd5b506102ac600160a060020a03600435811690602435166044356108ec565b34801561034757600080fd5b5061035061098a565b6040805160ff9092168252519081900360200190f35b34801561037257600080fd5b506101fc600160a060020a0360043516610993565b34801561039357600080fd5b506102ea600160a060020a03600435166024356109dd565b3480156103b757600080fd5b50610213610b2a565b3480156103cc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261046794369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a909994019750919550918201935091508190840183828082843750949750508435955050505050602001351515610b85565b60408051600160a060020a039092168252519081900360200190f35b34801561048f57600080fd5b506102ea600160a060020a0360043516610de7565b3480156104b057600080fd5b50610467610dfb565b3480156104c557600080fd5b506102ac600160a060020a0360043516602435610e0a565b3480156104e957600080fd5b50610213610ec8565b3480156104fe57600080fd5b506102ea600435610f23565b34801561051657600080fd5b506102ac600160a060020a0360043516602435611017565b34801561053a57600080fd5b506102ac61103f565b34801561054f57600080fd5b506102ea611048565b34801561056457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102ac948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061104e9650505050505050565b3480156105cd57600080fd5b506102ac600160a060020a036004351660243561116e565b3480156105f157600080fd5b506102ea600160a060020a0360043581169060243516611228565b34801561061857600080fd5b506101fc600160a060020a0360043516611253565b34801561063957600080fd5b5061046761143c565b34801561064e57600080fd5b506101fc6004351515611450565b34801561066857600080fd5b5061046761147e565b600080600160a060020a038316151561068d5760009150610698565b823b90506000811191505b50919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b600b5460009060ff16151561073f57600080fd5b81158061076f5750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561077a57600080fd5b60005461078f90600160a060020a0316610671565b156108455760008054604080517fda682aeb000000000000000000000000000000000000000000000000000000008152600160a060020a0333811660048301528781166024830152604482018790529151919092169263da682aeb92606480820193602093909283900390910190829087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b5051151561084557600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b600c5433600160a060020a039081169116146108c757600080fd5b600c54600160a060020a0316ff5b60075481565b60006108e643610f23565b90505b90565b6000805433600160a060020a0390811691161461097557600b5460ff16151561091457600080fd5b600160a060020a038085166000908152600960209081526040808320339094168352929052205482111561094757600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b61098084848461148d565b5060019392505050565b60025460ff1681565b60005433600160a060020a039081169116146109ae57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600860205260408120541580610a395750600160a060020a038316600090815260086020526040812080548492908110610a2257fe5b6000918252602090912001546001608060020a0316115b15610b0157600554600160a060020a031615610af957600554600654600160a060020a0390911690634ee2cd7e908590610a749086906116a0565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610ac657600080fd5b505af1158015610ada573d6000803e3d6000fd5b505050506040513d6020811015610af057600080fd5b505190506108a6565b5060006108a6565b600160a060020a0383166000908152600860205260409020610b2390836116b8565b90506108a6565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107235780601f106106f857610100808354040283529160200191610723565b600080831515610b93574393505b600b546040517f5b7b72c100000000000000000000000000000000000000000000000000000000815230600160a060020a03818116600484019081526024840189905260ff8b16606485015287151560a485015260c0604485019081528c5160c48601528c516101009096049290921694635b7b72c1948a938e938e938e938d9391608482019160e40190602089019080838360005b83811015610c41578181015183820152602001610c29565b50505050905090810190601f168015610c6e5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610ca1578181015183820152602001610c89565b50505050905090810190601f168015610cce5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015610cf357600080fd5b505af1158015610d07573d6000803e3d6000fd5b505050506040513d6020811015610d1d57600080fd5b5051604080517f3cebb823000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152915192935090831691633cebb8239160248082019260009290919082900301818387803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b5050604080518781529051600160a060020a03851693507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade92509081900360200190a29695505050505050565b6000610df382436109dd565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610e2a57600080fd5b610e326108db565b9150838201821115610e4357600080fd5b610e4c85610de7565b9050838101811115610e5d57600080fd5b610e6a600a858401611817565b600160a060020a0385166000908152600860205260409020610e8e90828601611817565b604080518581529051600160a060020a0387169160009160008051602061194b8339815191529181900360200190a3506001949350505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107235780601f106106f857610100808354040283529160200191610723565b600a546000901580610f58575081600a6000815481101515610f4157fe5b6000918252602090912001546001608060020a0316115b1561100557600554600160a060020a031615610ffd57600554600654600160a060020a039091169063981b24d090610f919085906116a0565b6040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b505050506040513d6020811015610ff457600080fd5b50519050610df6565b506000610df6565b611010600a836116b8565b9050610df6565b600b5460009060ff16151561102b57600080fd5b61103633848461148d565b50600192915050565b600b5460ff1681565b60065481565b600061105a848461072b565b151561106557600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110fd5781810151838201526020016110e5565b50505050905090810190601f16801561112a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b506001979650505050505050565b600080548190819033600160a060020a0390811691161461118e57600080fd5b6111966108db565b9150838210156111a557600080fd5b6111ae85610de7565b9050838110156111bd57600080fd5b6111ca600a858403611817565b600160a060020a03851660009081526008602052604090206111ee90858303611817565b604080518581529051600091600160a060020a0388169160008051602061194b8339815191529181900360200190a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461127157600080fd5b600160a060020a03831615156112c65760008054604051600160a060020a0391821692309092163180156108fc0292909190818181858888f193505050501580156112c0573d6000803e3d6000fd5b50611437565b82915081600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561132457600080fd5b505af1158015611338573d6000803e3d6000fd5b505050506040513d602081101561134e57600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b1580156113c457600080fd5b505af11580156113d8573d6000803e3d6000fd5b505050506040513d60208110156113ee57600080fd5b5050600054604080518381529051600160a060020a03928316928616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c919081900360200190a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461146b57600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808215156114d55783600160a060020a031685600160a060020a031660008051602061194b833981519152856040518082815260200191505060405180910390a3611699565b60065443116114e357600080fd5b600160a060020a0384161580159061150d575030600160a060020a031684600160a060020a031614155b151561151857600080fd5b61152285436109dd565b91508282101561153157600080fd5b60005461154690600160a060020a0316610671565b156115fc5760008054604080517f4a393149000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015288811660248301526044820188905291519190921692634a39314992606480820193602093909283900390910190829087803b1580156115c557600080fd5b505af11580156115d9573d6000803e3d6000fd5b505050506040513d60208110156115ef57600080fd5b505115156115fc57600080fd5b600160a060020a038516600090815260086020526040902061162090848403611817565b61162a84436109dd565b905082810181111561163b57600080fd5b600160a060020a038416600090815260086020526040902061165f90828501611817565b83600160a060020a031685600160a060020a031660008051602061194b833981519152856040518082815260200191505060405180910390a35b5050505050565b60008183106116af57816116b1565b825b9392505050565b6000806000808580549050600014156116d4576000935061180e565b8554869060001981019081106116e657fe5b6000918252602090912001546001608060020a031685106117435785548690600019810190811061171357fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a0316935061180e565b85600081548110151561175257fe5b6000918252602090912001546001608060020a0316851015611777576000935061180e565b8554600093506000190191505b828211156117d45760026001838501010490508486828154811015156117a657fe5b6000918252602090912001546001608060020a0316116117c8578092506117cf565b6001810391505b611784565b85838154811015156117e257fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b8154600090819015806118505750835443908590600019810190811061183957fe5b6000918252602090912001546001608060020a0316105b156118c25783548490611866826001830161190d565b8154811061187057fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150611907565b8354849060001981019081106118d457fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b815481835581811115611437576000838152602090206114379181019083016108e991905b808211156119465760008155600101611932565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b68789fe3d3d0ea5d527ea468bdda0f626b13a1bd51da6f852f89120b716569800290000000000000000000000006eb97237b8bc26e8057793200207bb0a2a83c347000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e000000000000000000000000000000000000000000000000000000000055bae6000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000064575dc58f1927dbf5633b3168d55a0012da340c000000000000000000000000000000000000000000000000000000000000000f456678546f6b656e566f7465732d310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f456678546f6b656e566f7465732d310000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000006eb97237b8bc26e8057793200207bb0a2a83c347000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e000000000000000000000000000000000000000000000000000000000055bae6000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000064575dc58f1927dbf5633b3168d55a0012da340c000000000000000000000000000000000000000000000000000000000000000f456678546f6b656e566f7465732d310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f456678546f6b656e566f7465732d310000000000000000000000000000000000"
}