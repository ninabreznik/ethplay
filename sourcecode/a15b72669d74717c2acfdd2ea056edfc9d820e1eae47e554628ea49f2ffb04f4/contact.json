{
  "address": "0xcd73a4f17b8dc56958409ad76994504e3c89da1e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DPTICO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\n// hevm: flattened sources of src/DPTICO.sol\npragma solidity >=0.4.8 <0.5.0 >=0.4.13 <0.5.0 >=0.4.23 <0.5.0;\n\n////// lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n////// lib/ds-stop/src/stop.sol\n/// stop.sol -- mixin for enable/disable functionality\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n////// lib/ds-token/lib/erc20/src/erc20.sol\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\n/* pragma solidity ^0.4.8; */\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\n////// lib/ds-token/src/base.sol\n/// base.sol -- basic ERC20 implementation\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"erc20/erc20.sol\"; */\n/* import \"ds-math/math.sol\"; */\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    constructor(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"ds-stop/stop.sol\"; */\n\n/* import \"./base.sol\"; */\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    constructor(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        emit Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        emit Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\n////// src/DPTICO.sol\n/* pragma solidity ^0.4.23; */\n\n/* import \"ds-math/math.sol\"; */\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-token/token.sol\"; */\n/* import \"ds-stop/stop.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract MedianizerLike {\n    function peek() external view returns (bytes32, bool);\n}\n\n/**\n * @title DPT\n * @dev DPTICO contract.\n */\ncontract DPTICOEvents {\n    event LogBuyToken(\n        address owner,\n        address sender,\n        uint ethValue,\n        uint dptValue,\n        uint ethUsdRate,\n        uint dptUsdRate\n    );\n    event LogFeedValid(bool feedValid);\n}\n\ncontract DPTICO is DSAuth, DSStop, DSMath, DPTICOEvents {\n    uint public dptUsdRate;              //usd price of 1 DPT token. 18 digit precision\n    uint public ethUsdRate;              //price of ETH in USD. 18 digit precision\n    MedianizerLike public priceFeed;     //address of the Makerdao price feed\n    bool public feedValid;               //if true feed has valid USD/ETH rate\n    ERC20 public dpt;                    //DPT token contract\n    bool public manualUsdRate = true;    //if true enables token buy even if priceFeed does not provide valid data\n    uint public minDptInvestmentAmount = 0; //minimal amount of DPT to buy, if equal with 0 than validation is disabled\n\n    /**\n    * @dev Constructor\n    */\n    constructor(address dpt_, address priceFeed_, uint dptUsdRate_, uint ethUsdRate_) public {\n        dpt = ERC20(dpt_);\n        priceFeed = MedianizerLike(priceFeed_);\n        dptUsdRate = dptUsdRate_;\n        ethUsdRate = ethUsdRate_;\n    }\n\n    /**\n    * @dev Fallback function is used to buy tokens.\n    */\n    function () external payable {\n        buyTokens();\n    }\n\n    /**\n    * @dev Low level token purchase function.\n    */\n    function buyTokens() public payable stoppable {\n        uint tokens;\n        bool feedValidSave = feedValid;\n        bytes32 ethUsdRateB;\n\n        require(msg.value != 0, \"Invalid amount\");\n\n        // receive ETH/USD price from external feed\n        (ethUsdRateB, feedValid) = priceFeed.peek();\n\n        // emit LogFeedValid event if validity of feed changes\n        if (feedValidSave != feedValid) {\n            emit LogFeedValid(feedValid);\n        }\n\n        // if feed is valid, load ETH/USD rate from it\n        if (feedValid) {\n            ethUsdRate = uint(ethUsdRateB);\n        } else {\n            // if feed invalid revert if manualUSDRate_ is NOT allowed\n            require(manualUsdRate, \"Manual rate not allowed\");\n        }\n\n        tokens = wdiv(wmul(ethUsdRate, msg.value), dptUsdRate);\n\n        // Validate invest amount, skip if minDptInvestmentAmount setted to 0\n        require(tokens >= minDptInvestmentAmount, \"Token amount must be greater or equal than minimal investment amount\");\n\n        address(owner).transfer(msg.value);\n        dpt.transferFrom(owner, msg.sender, tokens);\n        emit LogBuyToken(owner, msg.sender, msg.value, tokens, ethUsdRate, dptUsdRate);\n    }\n\n    /**\n    * @dev Get tokenAmount price in ETH\n    */\n    function getPrice(uint tokenAmount) public view returns (uint) {\n        bool feedValid_;\n        uint ethUsdRate_;\n        bytes32 ethUsdRateB;\n        require(tokenAmount > 0, \"Invalid amount\");\n\n        // receive ETH/USD price from external feed\n        (ethUsdRateB, feedValid_) = priceFeed.peek();\n\n        if (feedValid_) {\n            ethUsdRate_ = uint(ethUsdRateB);\n        } else {\n            // load manual ETH/USD rate if enabled\n            require(manualUsdRate, \"Manual rate not allowed\");\n            ethUsdRate_ = ethUsdRate;\n        }\n\n        return wdiv(wmul(tokenAmount, dptUsdRate), ethUsdRate_);\n    }\n\n    /**\n    * @dev Set exchange rate DPT/USD value.\n    */\n    function setDptRate(uint dptUsdRate_) public auth note {\n        require(dptUsdRate_ > 0, \"Invalid amount\");\n        dptUsdRate = dptUsdRate_;\n    }\n\n    /**\n    * @dev Set exchange rate DPT/ETH value manually.\n    *\n    * This function should only be used if the priceFeed does not return\n    * valid price data.\n    *\n    */\n    function setEthRate(uint ethUsdRate_) public auth note {\n        require(manualUsdRate, \"Manual rate not allowed\");\n        ethUsdRate = ethUsdRate_;\n    }\n\n    /**\n    * @dev Set the price feed\n    */\n    function setPriceFeed(address priceFeed_) public auth note {\n        require(priceFeed_ != 0x0, \"Wrong PriceFeed address\");\n        priceFeed = MedianizerLike(priceFeed_);\n    }\n\n    /**\n    * @dev Set manual feed update\n    *\n    * If `manualUsdRate` is true, then `buyTokens()` will calculate the DPT amount based on latest valid `ethUsdRate`,\n    * so `ethUsdRate` must be updated by admins if priceFeed fails to provide valid price data.\n    *\n    * If manualUsdRate is false, then buyTokens() will simply revert if priceFeed does not provide valid price data.\n    */\n    function setManualUsdRate(bool manualUsdRate_) public auth note {\n        manualUsdRate = manualUsdRate_;\n    }\n\n    /**\n    * @dev Set mininimal amount to buy\n    *\n    */\n    function setMinDptInvestmentAmount(uint minDptInvestmentAmount_) public auth note {\n        minDptInvestmentAmount = minDptInvestmentAmount_;\n    }\n}",
  "bytecode": "60806040526005805460a060020a60ff02191674010000000000000000000000000000000000000000179055600060065534801561003c57600080fd5b50604051608080611203833981016040818152825160208401519184015160609094015160018054600160a060020a03191633908117909155919492939091907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a260058054600160a060020a03958616600160a060020a0319918216179091556004805494909516931692909217909255600291909155600355611119806100ea6000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166307da68f5811461012657806313af40351461013b5780631ca6954d1461015c57806321baf5a5146101745780633b478fc5146101a557806347cbc3a8146101cc5780636f4215b1146101f5578063724e78da1461020d578063741bef1a1461022e57806375f12b21146102435780637a9e5e4b146102585780638da5cb5b14610279578063b76a12941461028e578063b7739b93146102a3578063be9a6555146102b8578063bec5a5f5146102cd578063bf7e214f146102e2578063d0febe4c1461011c578063e409de6f146102f7578063e75722301461030f578063f1fb22ad14610327575b610124610341565b005b34801561013257600080fd5b5061012461075c565b34801561014757600080fd5b50610124600160a060020a03600435166107f6565b34801561016857600080fd5b50610124600435610874565b34801561018057600080fd5b506101896108ed565b60408051600160a060020a039092168252519081900360200190f35b3480156101b157600080fd5b506101ba6108fc565b60408051918252519081900360200190f35b3480156101d857600080fd5b506101e1610902565b604080519115158252519081900360200190f35b34801561020157600080fd5b50610124600435610912565b34801561021957600080fd5b50610124600160a060020a03600435166109ee565b34801561023a57600080fd5b50610189610af1565b34801561024f57600080fd5b506101e1610b00565b34801561026457600080fd5b50610124600160a060020a0360043516610b10565b34801561028557600080fd5b50610189610b8a565b34801561029a57600080fd5b506101e1610b99565b3480156102af57600080fd5b506101ba610ba9565b3480156102c457600080fd5b50610124610baf565b3480156102d957600080fd5b506101ba610c43565b3480156102ee57600080fd5b50610189610c49565b34801561030357600080fd5b50610124600435610c58565b34801561031b57600080fd5b506101ba600435610d29565b34801561033357600080fd5b506101246004351515610eae565b6001546000908190819060a060020a900460ff161561035f57600080fd5b60045460a060020a900460ff1691503415156103c5576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517f59e02dd70000000000000000000000000000000000000000000000000000000081528151600160a060020a03909316936359e02dd79382820193929091908290030181600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d604081101561044c57600080fd5b5080516020909101516004805474ff0000000000000000000000000000000000000000191660a060020a9215158302179081905591925060ff9104161515821515146104d5576004546040805160a060020a90920460ff1615158252517f223720647635dce711d5385f7690db125f97b76987ab1935d1c23bc329ec9b84916020908290030190a15b60045460a060020a900460ff16156104f1576003819055610554565b60055460a060020a900460ff161515610554576040805160e560020a62461bcd02815260206004820152601760248201527f4d616e75616c2072617465206e6f7420616c6c6f776564000000000000000000604482015290519081900360640190fd5b61056b61056360035434610f51565b600254610f8c565b600654909350831015610615576040805160e560020a62461bcd028152602060048201526044602482018190527f546f6b656e20616d6f756e74206d7573742062652067726561746572206f7220908201527f657175616c207468616e206d696e696d616c20696e766573746d656e7420616d60648201527f6f756e7400000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600154604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015801561064e573d6000803e3d6000fd5b50600554600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015233602482015260448101879052905191909216916323b872dd9160648083019260209291908290030181600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b505050506040513d60208110156106f157600080fd5b505060015460035460025460408051600160a060020a039094168452336020850152348482015260608401879052608084019290925260a0830152517fee27f18c6d01ba9b3590a32dc15a65ef88a1113a2a9af8c94f1a3846770647d39181900360c00190a1505050565b61077233600035600160e060020a031916610fac565b151561077d57600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff0000000000000000000000000000000000000000191660a060020a179055565b61080c33600035600160e060020a031916610fac565b151561081757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b61088a33600035600160e060020a031916610fac565b151561089557600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a45050600655565b600554600160a060020a031681565b60035481565b60055460a060020a900460ff1681565b61092833600035600160e060020a031916610fac565b151561093357600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a460055460a060020a900460ff1615156109e7576040805160e560020a62461bcd02815260206004820152601760248201527f4d616e75616c2072617465206e6f7420616c6c6f776564000000000000000000604482015290519081900360640190fd5b5050600355565b610a0433600035600160e060020a031916610fac565b1515610a0f57600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a4600160a060020a0383161515610ac0576040805160e560020a62461bcd02815260206004820152601760248201527f57726f6e67205072696365466565642061646472657373000000000000000000604482015290519081900360640190fd5b50506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600160a060020a031681565b60015460a060020a900460ff1681565b610b2633600035600160e060020a031916610fac565b1515610b3157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600154600160a060020a031681565b60045460a060020a900460ff1681565b60025481565b610bc533600035600160e060020a031916610fac565b1515610bd057600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506001805474ff000000000000000000000000000000000000000019169055565b60065481565b600054600160a060020a031681565b610c6e33600035600160e060020a031916610fac565b1515610c7957600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a460008311610d22576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b5050600255565b6000808080808511610d85576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517f59e02dd70000000000000000000000000000000000000000000000000000000081528151600160a060020a03909316936359e02dd79382820193929091908290030181600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050506040513d6040811015610e0c57600080fd5b508051602090910151935090508215610e2757905080610e90565b60055460a060020a900460ff161515610e8a576040805160e560020a62461bcd02815260206004820152601760248201527f4d616e75616c2072617465206e6f7420616c6c6f776564000000000000000000604482015290519081900360640190fd5b60035491505b610ea5610e9f86600254610f51565b83610f8c565b95945050505050565b610ec433600035600160e060020a031916610fac565b1515610ecf57600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506005805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b6000670de0b6b3a7640000610f7b610f6985856110b5565b6002670de0b6b3a76400005b046110dd565b811515610f8457fe5b049392505050565b600081610f7b610fa485670de0b6b3a76400006110b5565b600285610f75565b6000600160a060020a038316301415610fc7575060016110af565b600154600160a060020a0384811691161415610fe5575060016110af565b600054600160a060020a03161515610fff575060006110af565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505050506040513d60208110156110aa57600080fd5b505190505b92915050565b60008115806110d25750508082028282828115156110cf57fe5b04145b15156110af57600080fd5b808201828110156110af57600080fd00a165627a7a72305820b957af7d412773bc5db721b67935111762f797985cf4391fecf1300946d216e5002900000000000000000000000010c71515602429c19d53011ea7040b87a4894838000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b00000000000000000000000000000000000000000000000030927f74c9de000000000000000000000000000000000000000000000000000c03df75b371940000",
  "constructorArguments": "00000000000000000000000010c71515602429c19d53011ea7040b87a4894838000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b00000000000000000000000000000000000000000000000030927f74c9de000000000000000000000000000000000000000000000000000c03df75b371940000"
}