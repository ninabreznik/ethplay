{
  "address": "0x5b6c4eb6e7f90b2ce53176c779c072d95f2535c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ViariumToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-06\n*/\n\npragma solidity ^0.4.25;\n\n/// @title Role based access control mixin for Viarium Platform\n/// @author Mai Abha <[emailÂ protected]>\n/// @dev Ignore DRY approach to achieve readability\ncontract RBACMixin {\n  /// @notice Constant string message to throw on lack of access\n  string constant FORBIDDEN = \"Haven't enough right to access\";\n  /// @notice Public map of owners\n  mapping (address => bool) public owners;\n  /// @notice Public map of minters\n  mapping (address => bool) public minters;\n\n  /// @notice The event indicates the addition of a new owner\n  /// @param who is address of added owner\n  event AddOwner(address indexed who);\n  /// @notice The event indicates the deletion of an owner\n  /// @param who is address of deleted owner\n  event DeleteOwner(address indexed who);\n\n  /// @notice The event indicates the addition of a new minter\n  /// @param who is address of added minter\n  event AddMinter(address indexed who);\n  /// @notice The event indicates the deletion of a minter\n  /// @param who is address of deleted minter\n  event DeleteMinter(address indexed who);\n\n  constructor () public {\n    _setOwner(msg.sender, true);\n  }\n\n  /// @notice The functional modifier rejects the interaction of senders who are not owners\n  modifier onlyOwner() {\n    require(isOwner(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\n  modifier onlyMinter() {\n    require(isMinter(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Look up for the owner role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of owner role\n  function isOwner(address _who) public view returns (bool) {\n    return owners[_who];\n  }\n\n  /// @notice Look up for the minter role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of minter role\n  function isMinter(address _who) public view returns (bool) {\n    return minters[_who];\n  }\n\n  /// @notice Adds the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addOwner(address _who) public onlyOwner returns (bool) {\n    _setOwner(_who, true);\n  }\n\n  /// @notice Deletes the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteOwner(address _who) public onlyOwner returns (bool) {\n    _setOwner(_who, false);\n  }\n\n  /// @notice Adds the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, true);\n  }\n\n  /// @notice Deletes the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, false);\n  }\n\n  /// @notice Changes the owner role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setOwner(address _who, bool _flag) private returns (bool) {\n    require(owners[_who] != _flag);\n    owners[_who] = _flag;\n    if (_flag) {\n      emit AddOwner(_who);\n    } else {\n      emit DeleteOwner(_who);\n    }\n    return true;\n  }\n\n  /// @notice Changes the minter role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setMinter(address _who, bool _flag) private returns (bool) {\n    require(minters[_who] != _flag);\n    minters[_who] = _flag;\n    if (_flag) {\n      emit AddMinter(_who);\n    } else {\n      emit DeleteMinter(_who);\n    }\n    return true;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract RBACMintableTokenMixin is StandardToken, RBACMixin {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyMinter\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint internal returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract ERC223ReceiverMixin {\n  function tokenFallback(address _from, uint256 _value, bytes _data) public;\n}\n\n/// @title Custom implementation of ERC223 \n/// @author Mai Abha <[emailÂ protected]>\ncontract ERC223Mixin is StandardToken {\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public returns (bool) \n  {\n    bytes memory empty;\n    return transferFrom(\n      _from, \n      _to,\n      _value,\n      empty);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) public returns (bool)\n  {\n    require(_value <= allowed[_from][msg.sender]);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    if (isContract(_to)) {\n      return transferToContract(\n        _from, \n        _to, \n        _value, \n        _data);\n    } else {\n      return transferToAddress(\n        _from, \n        _to, \n        _value, \n        _data); \n    }\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n    if (isContract(_to)) {\n      return transferToContract(\n        msg.sender,\n        _to,\n        _value,\n        _data); \n    } else {\n      return transferToAddress(\n        msg.sender,\n        _to,\n        _value,\n        _data);\n    }\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    bytes memory empty;\n    return transfer(_to, _value, empty);\n  }\n\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 length;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    }  \n    return (length>0);\n  }\n\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\n    if (balanceOf(_from) < _value) {\n      revert();\n    }\n    balances[_from] = balanceOf(_from).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    return true;\n  }\n\n  function transferToAddress(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value));\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value));\n    ERC223ReceiverMixin(_to).tokenFallback(_from, _value, _data);\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n}\n\n/// @title Role based token finalization mixin\n/// @author Mai Abha <[emailÂ protected]>\ncontract RBACERC223TokenFinalization is ERC223Mixin, RBACMixin {\n  event Finalize();\n  /// @notice Public field inicates the finalization state of smart-contract\n  bool public finalized;\n\n  /// @notice The functional modifier rejects the interaction if contract isn't finalized\n  modifier isFinalized() {\n    require(finalized);\n    _;\n  }\n\n  /// @notice The functional modifier rejects the interaction if contract is finalized\n  modifier notFinalized() {\n    require(!finalized);\n    _;\n  }\n\n  /// @notice Finalizes contract\n  /// @dev Requires owner role to interact\n  /// @return A boolean that indicates if the operation was successful.\n  function finalize() public notFinalized onlyOwner returns (bool) {\n    finalized = true;\n    emit Finalize();\n    return true;\n  }\n\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\n  function transferFrom(address _from, address _to, uint256 _value) public isFinalized returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /// @dev Overrides ERC223 interface to prevent interaction before finalization\n  // solium-disable-next-line arg-overflow\n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public isFinalized returns (bool) {\n    return super.transferFrom(_from, _to, _value, _data); // solium-disable-line arg-overflow\n  }\n\n  /// @dev Overrides ERC223 interface to prevent interaction before finalization\n  function transfer(address _to, uint256 _value, bytes _data) public isFinalized returns (bool) {\n    return super.transfer(_to, _value, _data);\n  }\n\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\n  function transfer(address _to, uint256 _value) public isFinalized returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\n  function approve(address _spender, uint256 _value) public isFinalized returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\n  function increaseApproval(address _spender, uint256 _addedValue) public isFinalized returns (bool) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public isFinalized returns (bool) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n/// @title Viarium Platform token implementation\n/// @author Mai Abha <[emailÂ protected]>\n/// @dev Implements ERC20, ERC223 and MintableToken interfaces as well as capped and finalization logic\ncontract ViariumToken is StandardBurnableToken, RBACERC223TokenFinalization, RBACMintableTokenMixin {\n  /// @notice Constant field with token full name\n  // solium-disable-next-line uppercase\n  string constant public name = \"VIARIUM\"; \n  /// @notice Constant field with token symbol\n  string constant public symbol = \"VRX\"; // solium-disable-line uppercase\n  /// @notice Constant field with token precision depth\n  uint256 constant public decimals = 18; // solium-disable-line uppercase\n  /// @notice Constant field with token cap (total supply limit)\n  uint256 constant public cap = 250 * (10 ** 6) * (10 ** decimals); // solium-disable-line uppercase\n\n  /// @notice Overrides original mint function from MintableToken to limit minting over cap\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _amount The amount of tokens to mint.\n  /// @return A boolean that indicates if the operation was successful.\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool) \n  {\n    require(totalSupply().add(_amount) <= cap);\n    return super.mint(_to, _amount);\n  }\n\n  /// @notice Overrides finalize function from RBACERC223TokenFinalization to prevent future minting after finalization\n  /// @return A boolean that indicates if the operation was successful.\n  function finalize() public returns (bool) {\n    require(super.finalize());\n    require(finishMinting());\n    return true;\n  }\n\n  /// @notice Overrides finishMinting function from RBACMintableTokenMixin to prevent finishing minting before finalization\n  /// @return A boolean that indicates if the operation was successful.\n  function finishMinting() internal returns (bool) {\n    require(finalized == true);\n    require(super.finishMinting());\n    return true;\n  }\n}",
  "bytecode": "60806040526005805461ff0019169055610023336001640100000000610029810204565b506100f9565b600160a060020a03821660009081526003602052604081205460ff161515821515141561005557600080fd5b600160a060020a0383166000908152600360205260409020805460ff191683158015919091179091556100bb57604051600160a060020a038416907fac1e9ef41b54c676ccf449d83ae6f2624bcdce8f5b93a6b48ce95874c332693d90600090a26100f0565b604051600160a060020a038416907fbaefbfc44c4c937d4905d8a50bef95643f586e33d78f3d1998a10b992b68bdcc90600090a25b50600192915050565b611825806101086000396000f3006080604052600436106101695763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663022914a7811461016e57806305d2035b146101a357806306fdde03146101b8578063095ea7b31461024257806318160ddd1461026657806323b872dd1461028d5780632f54bf6e146102b7578063313ce567146102d8578063355274ea146102ed57806340c10f191461030257806342966c68146103265780634bb278f31461034057806366188463146103555780637065cb481461037957806370a082311461039a57806379cc6790146103bb57806395d89b41146103df578063983b2d56146103f4578063a9059cbb14610415578063aa271e1a14610439578063ab67aa581461045a578063b3f05b97146104c9578063be45fd62146104de578063cd5c4c7014610547578063d73dd62314610568578063d82f94a31461058c578063dd62ed3e146105ad578063f46eccc4146105d4575b600080fd5b34801561017a57600080fd5b5061018f600160a060020a03600435166105f5565b604080519115158252519081900360200190f35b3480156101af57600080fd5b5061018f61060a565b3480156101c457600080fd5b506101cd610618565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102075781810151838201526020016101ef565b50505050905090810190601f1680156102345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024e57600080fd5b5061018f600160a060020a036004351660243561064f565b34801561027257600080fd5b5061027b610674565b60408051918252519081900360200190f35b34801561029957600080fd5b5061018f600160a060020a036004358116906024351660443561067a565b3480156102c357600080fd5b5061018f600160a060020a03600435166106a1565b3480156102e457600080fd5b5061027b6106bf565b3480156102f957600080fd5b5061027b6106c4565b34801561030e57600080fd5b5061018f600160a060020a03600435166024356106d3565b34801561033257600080fd5b5061033e60043561070e565b005b34801561034c57600080fd5b5061018f61071b565b34801561036157600080fd5b5061018f600160a060020a0360043516602435610749565b34801561038557600080fd5b5061018f600160a060020a0360043516610767565b3480156103a657600080fd5b5061027b600160a060020a0360043516610834565b3480156103c757600080fd5b5061033e600160a060020a036004351660243561084f565b3480156103eb57600080fd5b506101cd6108e5565b34801561040057600080fd5b5061018f600160a060020a036004351661091c565b34801561042157600080fd5b5061018f600160a060020a03600435166024356109a7565b34801561044557600080fd5b5061018f600160a060020a03600435166109c5565b34801561046657600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261018f94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506109e39650505050505050565b3480156104d557600080fd5b5061018f610a0c565b3480156104ea57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261018f948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610a159650505050505050565b34801561055357600080fd5b5061018f600160a060020a0360043516610a34565b34801561057457600080fd5b5061018f600160a060020a0360043516602435610abf565b34801561059857600080fd5b5061018f600160a060020a0360043516610add565b3480156105b957600080fd5b5061027b600160a060020a0360043581169060243516610b68565b3480156105e057600080fd5b5061018f600160a060020a0360043516610b93565b60036020526000908152604090205460ff1681565b600554610100900460ff1681565b60408051808201909152600781527f5649415249554d00000000000000000000000000000000000000000000000000602082015281565b60055460009060ff16151561066357600080fd5b61066d8383610ba8565b9392505050565b60015490565b60055460009060ff16151561068e57600080fd5b610699848484610c0e565b949350505050565b600160a060020a031660009081526003602052604090205460ff1690565b601281565b6acecb8f27f4200f3a00000081565b60006acecb8f27f4200f3a0000006106f9836106ed610674565b9063ffffffff610c1e16565b111561070457600080fd5b61066d8383610c31565b6107183382610d8d565b50565b6000610725610e7c565b151561073057600080fd5b610738610f49565b151561074357600080fd5b50600190565b60055460009060ff16151561075d57600080fd5b61066d8383610f68565b6000610772336106a1565b60408051808201909152601e81526000805160206117ba83398151915260208201529015156108225760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107e75781810151838201526020016107cf565b50505050905090810190601f1680156108145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061082e826001611058565b50919050565b600160a060020a031660009081526020819052604090205490565b600160a060020a038216600090815260026020908152604080832033845290915290205481111561087f57600080fd5b600160a060020a03821660009081526002602090815260408083203384529091529020546108b3908263ffffffff61112816565b600160a060020a03831660009081526002602090815260408083203384529091529020556108e18282610d8d565b5050565b60408051808201909152600381527f5652580000000000000000000000000000000000000000000000000000000000602082015281565b6000610927336106a1565b60408051808201909152601e81526000805160206117ba833981519152602082015290151561099b5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b5061082e82600161113a565b60055460009060ff1615156109bb57600080fd5b61066d8383611209565b600160a060020a031660009081526004602052604090205460ff1690565b60055460009060ff1615156109f757600080fd5b610a0385858585611218565b95945050505050565b60055460ff1681565b60055460009060ff161515610a2957600080fd5b6106998484846112cd565b6000610a3f336106a1565b60408051808201909152601e81526000805160206117ba8339815191526020820152901515610ab35760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b5061082e826000611058565b60055460009060ff161515610ad357600080fd5b61066d83836112fc565b6000610ae8336106a1565b60408051808201909152601e81526000805160206117ba8339815191526020820152901515610b5c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b5061082e82600061113a565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60046020526000908152604090205460ff1681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60006060610a03858585846109e3565b81810182811015610c2b57fe5b92915050565b6000610c3c336109c5565b60408051808201909152601e81526000805160206117ba8339815191526020820152901515610cb05760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b50600554610100900460ff1615610cc657600080fd5b600154610cd9908363ffffffff610c1e16565b600155600160a060020a038316600090815260208190526040902054610d05908363ffffffff610c1e16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206117da8339815191529181900360200190a350600192915050565b600160a060020a038216600090815260208190526040902054811115610db257600080fd5b600160a060020a038216600090815260208190526040902054610ddb908263ffffffff61112816565b600160a060020a038316600090815260208190526040902055600154610e07908263ffffffff61112816565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206117da8339815191529181900360200190a35050565b60055460009060ff1615610e8f57600080fd5b610e98336106a1565b60408051808201909152601e81526000805160206117ba8339815191526020820152901515610f0c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b506005805460ff191660011790556040517fc5454d111913d0c92fa9088b73be5c3fc91d1eb84db52a8a8485154f05d73f2e90600090a150600190565b60055460009060ff161515600114610f6057600080fd5b610738611395565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610fbd57336000908152600260209081526040808320600160a060020a0388168452909152812055610ff2565b610fcd818463ffffffff61112816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a03821660009081526003602052604081205460ff161515821515141561108457600080fd5b600160a060020a0383166000908152600360205260409020805460ff191683158015919091179091556110ea57604051600160a060020a038416907fac1e9ef41b54c676ccf449d83ae6f2624bcdce8f5b93a6b48ce95874c332693d90600090a261111f565b604051600160a060020a038416907fbaefbfc44c4c937d4905d8a50bef95643f586e33d78f3d1998a10b992b68bdcc90600090a25b50600192915050565b60008282111561113457fe5b50900390565b600160a060020a03821660009081526004602052604081205460ff161515821515141561116657600080fd5b600160a060020a0383166000908152600460205260409020805460ff191683158015919091179091556111cc57604051600160a060020a038416907f16baa937b08d58713325f93ac58b8a9369a4359bbefb4957d6d9b402735722ab90600090a261111f565b604051600160a060020a038416907f4a59e6ea1f075b8fb09f3b05c8b3e9c68b31683a887a4d692078957c58a12be390600090a250600192915050565b60006060610699848483610a15565b600160a060020a038416600090815260026020908152604080832033845290915281205483111561124857600080fd5b600160a060020a038516600090815260026020908152604080832033845290915290205461127c908463ffffffff61112816565b600160a060020a03861660009081526002602090815260408083203384529091529020556112a984611468565b156112c1576112ba85858585611470565b9050610699565b6112ba85858585611676565b60006112d884611468565b156112f0576112e933858585611470565b905061066d565b6112e933858585611676565b336000908152600260209081526040808320600160a060020a0386168452909152812054611330908363ffffffff610c1e16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006113a0336106a1565b60408051808201909152601e81526000805160206117ba83398151915260208201529015156114145760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107e75781810151838201526020016107cf565b50600554610100900460ff161561142a57600080fd5b6005805461ff0019166101001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6000903b1190565b600061147d858585611740565b151561148857600080fd5b83600160a060020a031663c0ee0b8a8685856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611520578181015183820152602001611508565b50505050905090810190601f16801561154d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561156e57600080fd5b505af1158015611582573d6000803e3d6000fd5b5050604080518681529051600160a060020a038089169450891692506000805160206117da8339815191529181900360200190a383600160a060020a031685600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611630578181015183820152602001611618565b50505050905090810190601f16801561165d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b6000611683858585611740565b151561168e57600080fd5b83600160a060020a031685600160a060020a03166000805160206117da833981519152856040518082815260200191505060405180910390a383600160a060020a031685600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16858560405180838152602001806020018281038252838181518152602001915080519060200190808383600083811015611630578181015183820152602001611618565b60008161174c85610834565b101561175757600080fd5b6117708261176486610834565b9063ffffffff61112816565b600160a060020a038516600090815260208190526040902055611796826106ed85610834565b600160a060020a03841660009081526020819052604090205550600193925050505600486176656e277420656e6f75676820726967687420746f206163636573730000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820962c9ed746cc03fedc396a535e2cc122adb9beb8364dcf79f4c98e89b2ac363c0029"
}