{
  "address": "0x42bedd647e387dabec65a7dc3a3babcc68bb664d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BLINKToken",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-18\n*/\n\npragma solidity 0.5.4;\n\n\ncontract BLINKToken {\n    // Override due to ERC20 specification requirement\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant decimals = 18;\n\n    // Override due to ERC20 specification requirement\n    // solhint-disable-next-line const-name-snakecase\n    string public constant name = \"BLOCKMASON LINK TOKEN\";\n\n    // Override due to ERC20 specification requirement\n    // solhint-disable-next-line const-name-snakecase\n    string public constant symbol = \"BLINK\";\n\n    bool public mintingFinished = false;\n    address public owner;\n    uint256 public totalSupply;\n\n    mapping (address => mapping (address => uint256)) private allowed;\n    mapping (address => uint256) private balances;\n\n    event Approval(address indexed tokenholder, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function () external payable {\n        revert();\n    }\n\n    function allowance(address _tokenholder, address _spender) public view returns (uint256 remaining) {\n        return allowed[_tokenholder][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n        require(_spender != msg.sender);\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function balanceOf(address _tokenholder) public view returns (uint256 balance) {\n        return balances[_tokenholder];\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        require(_spender != address(0));\n        require(_spender != msg.sender);\n\n        if (allowed[msg.sender][_spender] <= _subtractedValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender] - _subtractedValue;\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function finishMinting() public returns (bool) {\n        require(msg.sender == owner);\n        require(!mintingFinished);\n\n        mintingFinished = true;\n\n        emit MintFinished();\n\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        require(_spender != address(0));\n        require(_spender != msg.sender);\n        require(allowed[msg.sender][_spender] <= allowed[msg.sender][_spender] + _addedValue);\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    // Override for consistency with #transfer()\n    // solhint-disable-next-line no-simple-event-func-name\n    function mint(address _to, uint256 _amount) public returns (bool) {\n        require(msg.sender == owner);\n        require(!mintingFinished);\n        require(_to != address(0));\n        require(_to != address(this));\n        require(totalSupply <= totalSupply + _amount);\n        require(balances[_to] <= balances[_to] + _amount);\n\n        totalSupply = totalSupply + _amount;\n        balances[_to] = balances[_to] + _amount;\n\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n\n    // Override due to ERC20 specification requirement\n    // solhint-disable-next-line no-simple-event-func-name\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != msg.sender);\n        require(_to != address(0));\n        require(_to != address(this));\n        require(balances[msg.sender] - _value <= balances[msg.sender]);\n        require(balances[_to] <= balances[_to] + _value);\n        require(_value <= transferableTokens(msg.sender));\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_from != address(0));\n        require(_from != address(this));\n        require(_to != _from);\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_value <= transferableTokens(_from));\n        require(allowed[_from][msg.sender] - _value <= allowed[_from][msg.sender]);\n        require(balances[_from] - _value <= balances[_from]);\n        require(balances[_to] <= balances[_to] + _value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner);\n        require(_newOwner != address(0));\n        require(_newOwner != address(this));\n        require(_newOwner != owner);\n\n        address previousOwner = owner;\n        owner = _newOwner;\n\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function transferableTokens(address holder) public view returns (uint256) {\n        if (mintingFinished) {\n            return balanceOf(holder);\n        }\n        return 0;\n    }\n}",
  "bytecode": "60806040526000805460ff1916905534801561001a57600080fd5b5060008054610100330261010060a860020a0319909116179055610d59806100436000396000f3fe60806040526004361061011b576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100b257806395d89b411161008157806395d89b41146103bf578063a9059cbb146103d4578063d73dd6231461040d578063dd62ed3e14610446578063f2fde38b146104815761011b565b806370a0823114610313578063772fe14e146103465780637d64bcb4146103795780638da5cb5b1461038e5761011b565b806323b872dd116100ee57806323b872dd14610233578063313ce5671461027657806340c10f19146102a157806366188463146102da5761011b565b806305d2035b1461012057806306fdde0314610149578063095ea7b3146101d357806318160ddd1461020c575b600080fd5b34801561012c57600080fd5b506101356104b6565b604080519115158252519081900360200190f35b34801561015557600080fd5b5061015e6104bf565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b50610135600480360360408110156101f657600080fd5b50600160a060020a0381351690602001356104f6565b34801561021857600080fd5b5061022161058a565b60408051918252519081900360200190f35b34801561023f57600080fd5b506101356004803603606081101561025657600080fd5b50600160a060020a03813581169160208101359091169060400135610590565b34801561028257600080fd5b5061028b610720565b6040805160ff9092168252519081900360200190f35b3480156102ad57600080fd5b50610135600480360360408110156102c457600080fd5b50600160a060020a038135169060200135610725565b3480156102e657600080fd5b50610135600480360360408110156102fd57600080fd5b50600160a060020a03813516906020013561085a565b34801561031f57600080fd5b506102216004803603602081101561033657600080fd5b5035600160a060020a031661096a565b34801561035257600080fd5b506102216004803603602081101561036957600080fd5b5035600160a060020a0316610989565b34801561038557600080fd5b506101356109ad565b34801561039a57600080fd5b506103a3610a14565b60408051600160a060020a039092168252519081900360200190f35b3480156103cb57600080fd5b5061015e610a28565b3480156103e057600080fd5b50610135600480360360408110156103f757600080fd5b50600160a060020a038135169060200135610a5f565b34801561041957600080fd5b506101356004803603604081101561043057600080fd5b50600160a060020a038135169060200135610b6a565b34801561045257600080fd5b506102216004803603604081101561046957600080fd5b50600160a060020a0381358116916020013516610c35565b34801561048d57600080fd5b506104b4600480360360208110156104a457600080fd5b5035600160a060020a0316610c60565b005b60005460ff1681565b60408051808201909152601581527f424c4f434b4d41534f4e204c494e4b20544f4b454e0000000000000000000000602082015281565b6000600160a060020a038316151561050d57600080fd5b600160a060020a03831633141561052357600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015481565b6000600160a060020a03841615156105a757600080fd5b600160a060020a0384163014156105bd57600080fd5b600160a060020a0383811690851614156105d657600080fd5b600160a060020a03831615156105eb57600080fd5b600160a060020a03831630141561060157600080fd5b61060a84610989565b82111561061657600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054828103111561064857600080fd5b600160a060020a038416600090815260036020526040902054828103111561066f57600080fd5b600160a060020a038316600090815260036020526040902054808301101561069657600080fd5b600160a060020a0380851660008181526002602090815260408083203384528252808320805488900390558383526003825280832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b601281565b600080546101009004600160a060020a0316331461074257600080fd5b60005460ff161561075257600080fd5b600160a060020a038316151561076757600080fd5b600160a060020a03831630141561077d57600080fd5b600154808301101561078e57600080fd5b600160a060020a03831660009081526003602052604090205480830110156107b557600080fd5b6001805483019055600160a060020a038316600081815260036020908152604091829020805486019055815185815291517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859281900390910190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b6000600160a060020a038316151561087157600080fd5b600160a060020a03831633141561088757600080fd5b336000908152600260209081526040808320600160a060020a038716845290915290205482106108da57336000908152600260209081526040808320600160a060020a0387168452909152812055610905565b336000908152600260209081526040808320600160a060020a03871684529091529020805483900390555b336000818152600260209081526040808320600160a060020a0388168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a0381166000908152600360205260409020545b919050565b6000805460ff16156109a55761099e8261096a565b9050610984565b506000919050565b600080546101009004600160a060020a031633146109ca57600080fd5b60005460ff16156109da57600080fd5b6000805460ff191660011781556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa089190a150600190565b6000546101009004600160a060020a031681565b60408051808201909152600581527f424c494e4b000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316331415610a7757600080fd5b600160a060020a0383161515610a8c57600080fd5b600160a060020a038316301415610aa257600080fd5b336000908152600360205260409020548281031115610ac057600080fd5b600160a060020a0383166000908152600360205260409020548083011015610ae757600080fd5b610af033610989565b821115610afc57600080fd5b33600081815260036020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6000600160a060020a0383161515610b8157600080fd5b600160a060020a038316331415610b9757600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020548281011015610bc957600080fd5b336000818152600260209081526040808320600160a060020a038816808552908352928190208054870190819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000546101009004600160a060020a03163314610c7c57600080fd5b600160a060020a0381161515610c9157600080fd5b600160a060020a038116301415610ca757600080fd5b600054600160a060020a03828116610100909204161415610cc757600080fd5b60008054600160a060020a0383811661010081810274ffffffffffffffffffffffffffffffffffffffff0019851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3505056fea165627a7a723058203bbc3c5a459732c9626a0d52e644157f7dd0845baa74859893237b8673b6128f0029"
}