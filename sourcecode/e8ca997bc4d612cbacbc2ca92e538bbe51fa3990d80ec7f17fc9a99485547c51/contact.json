{
  "address": "0x3fd2371b53f2db38765220c90f2ffd4ddbe8afd1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MonethaUsersClaimHandler",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity ^0.4.23;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\n// File: contracts/MonethaUsersClaimStorage.sol\n\n/**\n *  @title MonethaUsersClaimStorage\n *\n *  MonethaUsersClaimStorage is a storage contract. \n *  It will be used by MonethaUsersClaimHandler to update and delete user claim. \n */\ncontract MonethaUsersClaimStorage is Contactable {\n\n    string constant VERSION = \"0.1\";\n    \n    // claimedTokens stores tokens claimed by the user.\n    mapping (address => uint256) public claimedTokens;\n\n    event UpdatedClaim(address indexed _userAddress, uint256 _claimedTokens, bool _isDeleted);\n    event DeletedClaim(address indexed _userAddress, uint256 _unclaimedTokens, bool _isDeleted);\n\n    /**\n     *  updateUserClaim updates user claim status and adds token to his wallet\n     *  @param _userAddress address of user's wallet\n     *  @param _tokens corresponds to user's token that is to be claimed.\n     */\n    function updateUserClaim(address _userAddress, uint256 _tokens)\n        external onlyOwner returns (bool)\n    {\n        claimedTokens[_userAddress] = claimedTokens[_userAddress] + _tokens;\n\n        emit UpdatedClaim(_userAddress, _tokens, false);\n        \n        return true;\n    }\n    \n    /**\n     *  updateUserClaimInBulk updates multiple users claim status and adds token to their wallet\n     */\n    function updateUserClaimInBulk(address[] _userAddresses, uint256[] _tokens)\n        external onlyOwner returns (bool)\n    {\n        require(_userAddresses.length == _tokens.length);\n\n        for (uint16 i = 0; i < _userAddresses.length; i++) {\n            claimedTokens[_userAddresses[i]] = claimedTokens[_userAddresses[i]] + _tokens[i];\n\n            emit UpdatedClaim(_userAddresses[i], _tokens[i], false);\n        }\n\n        return true;\n    }\n\n    /**\n     *  deleteUserClaim deletes user account\n     *  @param _userAddress corresponds to address of user's wallet\n     */\n    function deleteUserClaim(address _userAddress)\n        external onlyOwner returns (bool)\n    {\n        delete claimedTokens[_userAddress];\n\n        emit DeletedClaim(_userAddress, 0, true);\n\n        return true;\n    }\n\n    /**\n     *  deleteUserClaimInBulk deletes user account in bulk\n     */\n    function deleteUserClaimInBulk(address[] _userAddresses)\n        external onlyOwner returns (bool)\n    {\n        for (uint16 i = 0; i < _userAddresses.length; i++) {\n            delete claimedTokens[_userAddresses[i]];\n\n            emit DeletedClaim(_userAddresses[i], 0, true);\n        }\n\n        return true;\n    }\n}\n\n// File: contracts/MonethaUsersClaimHandler.sol\n\n/**\n *  @title MonethaUsersClaimHandler\n *\n *  MonethaUsersClaimHandler contract is a calling contract,\n *  which is used to update the storage contract MonethaUsersClaimStorage.\n */\ncontract MonethaUsersClaimHandler is Contactable {\n\n    string constant VERSION = \"0.1\";\n    \n    MonethaUsersClaimStorage public storageContract;\n\n    event StorageContractOwnerChanged(address indexed _newOwner);\n\n    constructor(address _storageAddr) public {\n        storageContract = MonethaUsersClaimStorage(_storageAddr);\n    }\n\n    /**\n     *  claimTokens calls updateUserClaim function of MonethaUsersClaimStorage contract to update user's token claim status and assign tokens to user.\n     *  @param _monethaUser address of user's wallet\n     *  @param _tokens corresponds to user's token that is to be claimed.\n     */\n    function claimTokens(address _monethaUser, uint256 _tokens) external onlyOwner {\n        require(storageContract.updateUserClaim(_monethaUser, _tokens));\n    }\n\n    /**\n     *  claimTokensInBulk calls updateUserClaim function of MonethaUsersClaimStorage contract to update multiple users token claim status and assign tokens to user.\n     */\n    function claimTokensInBulk(address[] _monethaUsers, uint256[] _tokens) external onlyOwner {\n        require(storageContract.updateUserClaimInBulk(_monethaUsers, _tokens));\n    }\n\n    /**\n     *  deleteAccount deletes user's claimed token\n     *  @param _monethaUser address of users wallet\n     */\n    function deleteAccount(address _monethaUser) external onlyOwner {\n        require(storageContract.deleteUserClaim(_monethaUser));\n    }\n\n    /**\n     *  deleteAccountsInBulk deletes user account in bulk.\n     */\n    function deleteAccountsInBulk(address[] _monethaUsers) external onlyOwner {\n        require(storageContract.deleteUserClaimInBulk(_monethaUsers));\n    }\n\n    /**\n     *  changeOwnerOfMonethaUsersClaimStorage changes ownership\n     *  @param _newOwner address of new owner\n     */\n    function changeOwnerOfMonethaUsersClaimStorage(address _newOwner) external onlyOwner {\n        storageContract.transferOwnership(_newOwner);\n\n        emit StorageContractOwnerChanged(_newOwner);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610912833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a03909316929091169190911790556108b38061005f6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166311ce026781146100a857806312bcc858146100d957806336f7ab5e146101075780634c1b64cb1461019157806370269774146101b25780638da5cb5b146101d3578063b967a52e146101e8578063eadb6fa914610241578063f2fde38b14610261578063fe417fa514610282575b600080fd5b3480156100b457600080fd5b506100bd6102a6565b60408051600160a060020a039092168252519081900360200190f35b3480156100e557600080fd5b5061010560246004803582810192908201359181359182019101356102b5565b005b34801561011357600080fd5b5061011c6103b0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015657818101518382015260200161013e565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019d57600080fd5b50610105600160a060020a036004351661043d565b3480156101be57600080fd5b50610105600160a060020a03600435166104f6565b3480156101df57600080fd5b506100bd6105c3565b3480156101f457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101059436949293602493928401919081908401838280828437509497506105d29650505050505050565b34801561024d57600080fd5b506101056004803560248101910135610600565b34801561026d57600080fd5b50610105600160a060020a03600435166106d2565b34801561028e57600080fd5b50610105600160a060020a0360043516602435610766565b600254600160a060020a031681565b600054600160a060020a031633146102cc57600080fd5b600254604080517fee2eba5b0000000000000000000000000000000000000000000000000000000081526004810191825260448101869052600160a060020a039092169163ee2eba5b9187918791879187919081906024810190606401876020880280828437909101848103835285815260209081019150869086028082843782019150509650505050505050602060405180830381600087803b15801561037357600080fd5b505af1158015610387573d6000803e3d6000fd5b505050506040513d602081101561039d57600080fd5b505115156103aa57600080fd5b50505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b505050505081565b600054600160a060020a0316331461045457600080fd5b600254604080517f64100038000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163641000389160248083019260209291908290030181600087803b1580156104bc57600080fd5b505af11580156104d0573d6000803e3d6000fd5b505050506040513d60208110156104e657600080fd5b505115156104f357600080fd5b50565b600054600160a060020a0316331461050d57600080fd5b600254604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b5050604051600160a060020a03841692507fec3a47b01c1882d34b4d79717433a1075a7d707e8e2b1b0f1f1e73d63fc7f0679150600090a250565b600054600160a060020a031681565b600054600160a060020a031633146105e957600080fd5b80516105fc9060019060208401906107ec565b5050565b600054600160a060020a0316331461061757600080fd5b6002546040517f1481d43900000000000000000000000000000000000000000000000000000000815260206004820181815260248301859052600160a060020a0390931692631481d4399286928692918291604490910190859085028082843782019150509350505050602060405180830381600087803b15801561069b57600080fd5b505af11580156106af573d6000803e3d6000fd5b505050506040513d60208110156106c557600080fd5b505115156105fc57600080fd5b600054600160a060020a031633146106e957600080fd5b600160a060020a03811615156106fe57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461077d57600080fd5b600254604080517f61f66dc4000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916361f66dc49160448083019260209291908290030181600087803b15801561069b57600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061082d57805160ff191683800117855561085a565b8280016001018555821561085a579182015b8281111561085a57825182559160200191906001019061083f565b5061086692915061086a565b5090565b61088491905b808211156108665760008155600101610870565b905600a165627a7a72305820ae8bb992d1afe38db7a90ffcd56713b5ce37ed564b95042e7c66ffbd9430af710029000000000000000000000000c0fb2271061d0a8b61f72512e90c8114350b17e1",
  "constructorArguments": "000000000000000000000000c0fb2271061d0a8b61f72512e90c8114350b17e1"
}