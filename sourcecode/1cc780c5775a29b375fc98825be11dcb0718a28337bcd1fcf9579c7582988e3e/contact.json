{
  "address": "0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoMiningWar",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Blockchain-based strategy game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send or transfer.\n */\ncontract PullPayment {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n  * @dev Withdraw accumulated balance, called by payee.\n  */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    payee.transfer(payment);\n  }\n\n  /**\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\n  * @param dest The destination address of the funds.\n  * @param amount The amount to transfer.\n  */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n}\ninterface MiniGameInterface {\n     function setupMiniGame(uint256 _miningWarRoundNumber, uint256 _miningWarDeadline) external;\n     function isContractMiniGame() external pure returns( bool _isContractMiniGame );\n}\ncontract CryptoEngineerInterface {\n    address public gameSponsor;\n    function isEngineerContract() external pure returns(bool) {}\n    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ ) {}\n}\n\n\ncontract CryptoMiningWar is PullPayment {\n    bool public initialized = false;\n    uint256 public roundNumber = 0;\n    uint256 public deadline;\n    uint256 public CRTSTAL_MINING_PERIOD = 86400; \n    uint256 public HALF_TIME = 8 hours;\n    uint256 public ROUND_TIME = 86400 * 7;\n\tuint256 public prizePool = 0;\n    uint256 BASE_PRICE = 0.005 ether;\n    uint256 RANK_LIST_LIMIT = 10000;\n    uint256 public totalMiniGame = 0;\n\n    uint256 private numberOfMiners = 8;\n    uint256 private numberOfBoosts = 5;\n    uint256 private numberOfRank   = 21;\n    \n    CryptoEngineerInterface  public Engineer;\n    \n    mapping(uint256 => address) public miniGameAddress;\n    //miner info\n    mapping(uint256 => MinerData) private minerData;\n    \n    // plyer info\n    mapping(address => Player) public players;\n    mapping(address => uint256) public boosterReward;\n    //booster info\n    mapping(uint256 => BoostData) private boostData;\n    //mini game contract info\n    mapping(address => bool) public miniGames;   \n    \n    \n    address[21] rankList;\n    address public administrator;\n    /*** DATATYPES ***/\n    struct Player {\n        uint256 roundNumber;\n        mapping(uint256 => uint256) minerCount;\n        uint256 hashrate;\n        uint256 crystals;\n        uint256 lastUpdateTime;\n    }\n    struct MinerData {\n        uint256 basePrice;\n        uint256 baseProduct;\n        uint256 limit;\n    }\n    struct BoostData {\n        address owner;\n        uint256 boostRate;\n        uint256 startingLevel;\n        uint256 startingTime;\n        uint256 halfLife;\n    }\n    modifier isNotOver() \n    {\n        require(now <= deadline);\n        _;\n    }\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier isCurrentRound(address _addr) \n    {\n        require(players[_addr].roundNumber == roundNumber);\n        _;\n    }\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n    modifier onlyContractsMiniGame() \n    {\n        require(miniGames[msg.sender] == true);\n        _;\n    }\n    event GetFreeMiner(address _addr, uint256 _miningWarRound, uint256 _deadline);\n    event BuyMiner(address _addr, uint256[8] minerNumbers, uint256 _crystalsPrice, uint256 _hashrateBuy, uint256 _miningWarRound);\n    event ChangeHasrate(address _addr, uint256 _hashrate, uint256 _miningWarRound);\n    event ChangeCrystal(address _addr, uint256 _crystal, uint256 _type, uint256 _miningWarRound); //_type: 1 add crystal , 2: sub crystal\n    event BuyBooster(address _addr, uint256 _miningWarRound, uint256 _boosterId, uint256 _price, address beneficiary, uint256 refundPrize);\n    event Lottery(address[10] _topAddr, uint256[10] _reward, uint256 _miningWarRound);\n    event WithdrawReward(address _addr, uint256 _reward);\n    constructor() public {\n        administrator = msg.sender;\n        initMinerData();\n    }\n    function initMinerData() private \n    {\n         //                      price,          prod.     limit\n        minerData[0] = MinerData(10,            10,         10);   //lv1\n        minerData[1] = MinerData(100,           200,        2);    //lv2\n        minerData[2] = MinerData(400,           800,        4);    //lv3\n        minerData[3] = MinerData(1600,          3200,       8);    //lv4 \n        minerData[4] = MinerData(6400,          9600,       16);   //lv5 \n        minerData[5] = MinerData(25600,         38400,      32);   //lv6 \n        minerData[6] = MinerData(204800,        204800,     64);   //lv7 \n        minerData[7] = MinerData(1638400,       819200,     65536); //lv8   \n    }\n    function () public payable\n    {\n\t\tprizePool = SafeMath.add(prizePool, msg.value);\n    }\n\n    function isMiningWarContract() public pure returns(bool)\n    {\n        return true;\n    }\n\n    function startGame() public isAdministrator\n    {\n        require(!initialized);\n        \n        startNewRound();\n        initialized = true;\n    }\n    function addMiner(address _addr, uint256 idx, uint256 _value) public isNotOver isCurrentRound(_addr) isAdministrator\n    {\n        require(idx < numberOfMiners);\n        require(_value != 0);\n\n        Player storage p = players[_addr];\n        MinerData memory m = minerData[idx];\n\n        if (SafeMath.add(p.minerCount[idx], _value) > m.limit) revert();\n\n        updateCrystal( _addr );\n\n        p.minerCount[idx] = SafeMath.add(p.minerCount[idx], _value);\n\n        updateHashrate(_addr, SafeMath.mul(_value, m.baseProduct));\n    }\n    /**\n    * @dev add crystals to a player\n    * msg.sender should be in the list of mini game\n    * @param _addr player address \n    */\n    function addCrystal( address _addr, uint256 _value ) public onlyContractsMiniGame isNotOver isCurrentRound(_addr)\n    {\n        uint256 crystals = SafeMath.mul(_value, CRTSTAL_MINING_PERIOD);\n        Player storage p = players[_addr];\n        p.crystals =  SafeMath.add( p.crystals, crystals ); \n\n        emit ChangeCrystal(_addr, _value, 1, roundNumber);\n    }\n    /**\n    * @dev sub player's crystals\n    * msg.sender should be in the list of mini game\n    * @param _addr player address\n    */\n    function subCrystal( address _addr, uint256 _value ) public onlyContractsMiniGame isNotOver isCurrentRound(_addr)\n    {\n        updateCrystal( _addr );\n        uint256 crystals = SafeMath.mul(_value,CRTSTAL_MINING_PERIOD);\n        require(crystals <= players[_addr].crystals);\n\n        Player storage p = players[_addr];\n        p.crystals =  SafeMath.sub( p.crystals, crystals ); \n\n         emit ChangeCrystal(_addr, _value, 2, roundNumber);\n    }\n    /**\n    * @dev add hashrate to a player.\n    * msg.sender should be in the list of mini game\n    */\n    function addHashrate( address _addr, uint256 _value ) public onlyContractsMiniGame isNotOver isCurrentRound(_addr)\n    {\n        Player storage p = players[_addr];\n        p.hashrate =  SafeMath.add( p.hashrate, _value );\n\n        emit ChangeHasrate(_addr, p.hashrate, roundNumber); \n    }\n    /**\n    * @dev sub player's hashrate\n    * msg.sender should be in the list of mini game\n    */\n    function subHashrate( address _addr, uint256 _value ) public onlyContractsMiniGame isNotOver isCurrentRound(_addr)\n    {\n        require(players[_addr].hashrate >= _value);\n\n        Player storage p = players[_addr];\n        \n        p.hashrate = SafeMath.sub( p.hashrate, _value ); \n\n        emit ChangeHasrate(_addr, p.hashrate, roundNumber);\n    }\n    function setEngineerInterface(address _addr) public isAdministrator\n    {\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n        \n        require(engineerInterface.isEngineerContract() == true);\n\n        Engineer = engineerInterface;\n    }   \n    function setRoundNumber(uint256 _value) public isAdministrator\n    {\n        roundNumber = _value;\n    } \n    function setContractsMiniGame( address _addr ) public  isAdministrator\n    {\n        require(miniGames[_addr] == false);\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n        require(MiniGame.isContractMiniGame() == true );\n\n        miniGames[_addr] = true;\n        miniGameAddress[totalMiniGame] = _addr;\n        totalMiniGame = totalMiniGame + 1;\n    }\n    /**\n    * @dev remove mini game contract from main contract\n    * @param _addr mini game contract address\n    */\n    function removeContractMiniGame(address _addr) public isAdministrator\n    {\n        miniGames[_addr] = false;\n    }\n\n    function startNewRound() private \n    {\n        deadline = SafeMath.add(now, ROUND_TIME);\n        roundNumber = SafeMath.add(roundNumber, 1);\n        initBoostData();\n        setupMiniGame();\n    }\n    function setupMiniGame() private \n    {\n        for ( uint256 index = 0; index < totalMiniGame; index++ ) {\n            if (miniGames[miniGameAddress[index]] == true) {\n                MiniGameInterface MiniGame = MiniGameInterface( miniGameAddress[index] );\n                MiniGame.setupMiniGame(roundNumber,deadline);\n            }   \n        }\n    }\n    function initBoostData() private\n    {\n        //init booster data\n        boostData[0] = BoostData(0, 150, 1, now, HALF_TIME);\n        boostData[1] = BoostData(0, 175, 1, now, HALF_TIME);\n        boostData[2] = BoostData(0, 200, 1, now, HALF_TIME);\n        boostData[3] = BoostData(0, 225, 1, now, HALF_TIME);\n        boostData[4] = BoostData(msg.sender, 250, 2, now, HALF_TIME);\n        for (uint256 idx = 0; idx < numberOfRank; idx++) {\n            rankList[idx] = 0;\n        }\n    }\n    function lottery() public disableContract\n    {\n        require(now > deadline);\n        uint256 balance = SafeMath.div(SafeMath.mul(prizePool, 90), 100);\n\t\tuint256 devFee = SafeMath.div(SafeMath.mul(prizePool, 5), 100);\n        administrator.transfer(devFee);\n        uint8[10] memory profit = [30,20,10,8,7,5,5,5,5,5];\n\t\tuint256 totalPayment = 0;\n\t\tuint256 rankPayment = 0;\n        address[10] memory _topAddr;\n        uint256[10] memory _reward;\n        for(uint256 idx = 0; idx < 10; idx++){\n            if(rankList[idx] != 0){\n\n\t\t\t\trankPayment = SafeMath.div(SafeMath.mul(balance, profit[idx]),100);\n\t\t\t\tasyncSend(rankList[idx], rankPayment);\n\t\t\t\ttotalPayment = SafeMath.add(totalPayment, rankPayment);\n\n                _topAddr[idx] = rankList[idx];\n                _reward[idx] = rankPayment;\n            }\n        }\n\t\tprizePool = SafeMath.add(devFee, SafeMath.sub(balance, totalPayment));\n        \n        emit Lottery(_topAddr, _reward, roundNumber);\n\n        startNewRound();\n    }\n    function getRankList() public view returns(address[21])\n    {\n        return rankList;\n    }\n    //--------------------------------------------------------------------------\n    // Miner \n    //--------------------------------------------------------------------------\n    /**\n    * @dev get a free miner\n    */\n    function getFreeMiner(address _addr) public isNotOver disableContract\n    {\n        require(msg.sender == _addr);\n        require(players[_addr].roundNumber != roundNumber);\n        Player storage p = players[_addr];\n        //reset player data\n        if(p.hashrate > 0){\n            for (uint idx = 1; idx < numberOfMiners; idx++) {\n                p.minerCount[idx] = 0;\n            }\n        }\n        MinerData storage m0 = minerData[0];\n        p.crystals = 0;\n        p.roundNumber = roundNumber;\n        //free miner\n        p.lastUpdateTime = now;\n        p.minerCount[0] = 1;\n        p.hashrate = m0.baseProduct;\n\n        emit GetFreeMiner(_addr, roundNumber, deadline);\n    }\n    function getFreeMinerForMiniGame(address _addr) public isNotOver onlyContractsMiniGame\n    {\n        require(players[_addr].roundNumber != roundNumber);\n        Player storage p = players[_addr];\n        //reset player data\n        if(p.hashrate > 0){\n            for (uint idx = 1; idx < numberOfMiners; idx++) {\n                p.minerCount[idx] = 0;\n            }\n        }\n        MinerData storage m0 = minerData[0];\n        p.crystals = 0;\n        p.roundNumber = roundNumber;\n        //free miner\n        p.lastUpdateTime = now;\n        p.minerCount[0] = 1;\n        p.hashrate = m0.baseProduct;\n\n        emit GetFreeMiner(_addr, roundNumber, deadline);\n    }\n    function buyMiner(uint256[8] minerNumbers) public isNotOver isCurrentRound(msg.sender)\n    {           \n        updateCrystal(msg.sender);\n\n        Player storage p = players[msg.sender];\n        uint256 price = 0;\n        uint256 hashrate = 0;\n\n        for (uint256 minerIdx = 0; minerIdx < numberOfMiners; minerIdx++) {\n            MinerData memory m = minerData[minerIdx];\n            uint256 minerNumber = minerNumbers[minerIdx];\n           \n            if(minerNumbers[minerIdx] > m.limit || minerNumbers[minerIdx] < 0) revert();\n           \n            if (minerNumber > 0) {\n                price = SafeMath.add(price, SafeMath.mul(m.basePrice, minerNumber));\n\n                uint256 currentMinerCount = p.minerCount[minerIdx];\n                p.minerCount[minerIdx] = SafeMath.min(m.limit, SafeMath.add(p.minerCount[minerIdx], minerNumber));\n                // calculate no hashrate you want buy\n                hashrate = SafeMath.add(hashrate, SafeMath.mul(SafeMath.sub(p.minerCount[minerIdx],currentMinerCount), m.baseProduct));\n            }\n        }\n        \n        price = SafeMath.mul(price, CRTSTAL_MINING_PERIOD);\n        if(p.crystals < price) revert();\n        \n        p.crystals = SafeMath.sub(p.crystals, price);\n\n        updateHashrate(msg.sender, hashrate);\n\n        emit BuyMiner(msg.sender, minerNumbers, SafeMath.div(price, CRTSTAL_MINING_PERIOD), hashrate, roundNumber);\n    }\n    function getPlayerData(address addr) public view\n    returns (uint256 crystals, uint256 lastupdate, uint256 hashratePerDay, uint256[8] miners, uint256 hasBoost, uint256 playerBalance )\n    {\n        Player storage p = players[addr];\n\n        if(p.roundNumber != roundNumber) p = players[0x0];\n        \n        crystals   = SafeMath.div(p.crystals, CRTSTAL_MINING_PERIOD);\n        lastupdate = p.lastUpdateTime;\n        hashratePerDay = p.hashrate;\n        uint256 i = 0;\n        for(i = 0; i < numberOfMiners; i++)\n        {\n            miners[i] = p.minerCount[i];\n        }\n        hasBoost = hasBooster(addr);\n\t\tplayerBalance = payments[addr];\n    }\n    function getData(address _addr) \n    public \n    view \n    returns (\n        uint256 crystals, \n        uint256 lastupdate, \n        uint256 hashratePerDay, \n        uint256[8] miners, \n        uint256 hasBoost, \n        uint256 playerBalance, \n\n        uint256 _miningWarRound,\n        uint256 _miningWarDeadline,\n        uint256 _miningWarPrizePool \n    ){\n        (, lastupdate, hashratePerDay, miners, hasBoost, playerBalance) = getPlayerData(_addr);\n        crystals = SafeMath.div(calCurrentCrystals(_addr), CRTSTAL_MINING_PERIOD);\n        _miningWarRound     = roundNumber;\n        _miningWarDeadline  = deadline;\n        _miningWarPrizePool = prizePool;\n    }\n    function getHashratePerDay(address _addr) public view returns (uint256 personalProduction)\n    {\n        Player memory p = players[_addr];\n        personalProduction =  p.hashrate;\n        uint256 boosterIdx = hasBooster(_addr);\n        if (boosterIdx != 999) {\n            BoostData memory b = boostData[boosterIdx];\n            personalProduction = SafeMath.div(SafeMath.mul(personalProduction, b.boostRate), 100);\n        } \n    }\n    function getCurrentReward(address _addr) public view returns(uint256)\n    {\n        return payments[_addr];\n    }\n    function withdrawReward(address _addr) public \n    {\n        uint256 currentReward = payments[_addr];\n        if (address(this).balance >= currentReward && currentReward > 0) {\n            _addr.transfer(currentReward);\n            payments[_addr]      = 0;\n            boosterReward[_addr] = 0;\n            emit WithdrawReward(_addr, currentReward);\n        }\n    } \n    //--------------------------------------------------------------------------\n    // BOOSTER \n    //--------------------------------------------------------------------------\n    function buyBooster(uint256 idx) public isNotOver isCurrentRound(msg.sender) payable \n    {\n        require(idx < numberOfBoosts);\n        BoostData storage b = boostData[idx];\n        if(msg.value < getBoosterPrice(idx) || msg.sender == b.owner){\n            revert();\n        }\n        address beneficiary = b.owner;\n\t\tuint256 devFeePrize = devFee(getBoosterPrice(idx));\n        address gameSponsor = Engineer.gameSponsor();\n        gameSponsor.transfer(devFeePrize);\n\t\tuint256 refundPrize = 0;\n        if(beneficiary != 0){\n\t\t\trefundPrize = SafeMath.div(SafeMath.mul(getBoosterPrice(idx), 55), 100);\n\t\t\tasyncSend(beneficiary, refundPrize);\n            boosterReward[beneficiary] = SafeMath.add(boosterReward[beneficiary], refundPrize);\n        }\n\t\tprizePool = SafeMath.add(prizePool, SafeMath.sub(msg.value, SafeMath.add(devFeePrize, refundPrize)));\n        updateCrystal(msg.sender);\n        updateCrystal(beneficiary);\n        uint256 level   = getCurrentLevel(b.startingLevel, b.startingTime, b.halfLife);\n        b.startingLevel = SafeMath.add(level, 1);\n        b.startingTime = now;\n        // transfer ownership    \n        b.owner = msg.sender;\n\n        emit BuyBooster(msg.sender, roundNumber, idx, msg.value, beneficiary, refundPrize);\n    }\n    function getBoosterData(uint256 idx) public view returns (address owner,uint256 boostRate, uint256 startingLevel, \n        uint256 startingTime, uint256 currentPrice, uint256 halfLife)\n    {\n        require(idx < numberOfBoosts);\n        owner            = boostData[idx].owner;\n        boostRate        = boostData[idx].boostRate; \n        startingLevel    = boostData[idx].startingLevel;\n        startingTime     = boostData[idx].startingTime;\n        currentPrice     = getBoosterPrice(idx);\n        halfLife         = boostData[idx].halfLife;\n    }\n    function getBoosterPrice(uint256 index) public view returns (uint256)\n    {\n        BoostData storage booster = boostData[index];\n        return getCurrentPrice(getCurrentLevel(booster.startingLevel, booster.startingTime, booster.halfLife));\n    }\n    function hasBooster(address addr) public view returns (uint256 boostIdx)\n    {         \n        boostIdx = 999;\n        for(uint256 i = 0; i < numberOfBoosts; i++){\n            uint256 revert_i = numberOfBoosts - i - 1;\n            if(boostData[revert_i].owner == addr){\n                boostIdx = revert_i;\n                break;\n            }\n        }\n    }\n    //--------------------------------------------------------------------------\n    // Other \n    //--------------------------------------------------------------------------\n    function devFee(uint256 amount) public pure returns(uint256)\n    {\n        return SafeMath.div(SafeMath.mul(amount, 5), 100);\n    }\n    function getBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    }\n\t//@dev use this function in case of bug\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private \n    //--------------------------------------------------------------------------\n    /**\n    * @param addr is player address you want add hash rate\n    * @param _hashrate is no hashrate you want add for this player\n    */\n    function updateHashrate(address addr, uint256 _hashrate) private\n    {\n        Player storage p = players[addr];\n       \n        p.hashrate = SafeMath.add(p.hashrate, _hashrate);\n       \n        if(p.hashrate > RANK_LIST_LIMIT) updateRankList(addr);\n        \n        emit ChangeHasrate(addr, p.hashrate, roundNumber);\n    }\n    function updateCrystal(address _addr) private\n    {\n        require(now > players[_addr].lastUpdateTime);\n\n        Player storage p = players[_addr]; \n        p.crystals = calCurrentCrystals(_addr);\n        p.lastUpdateTime = now;\n    }\n     /**\n    * @dev calculate current crystals of player\n    * @param _addr player address\n    */\n    function calCurrentCrystals(address _addr) public view returns(uint256 _currentCrystals)\n    {\n        Player memory p = players[_addr];\n\n        if(p.roundNumber != roundNumber) p = players[0x0];\n\n        uint256 hashratePerDay = getHashratePerDay(_addr);     \n        uint256 secondsPassed = SafeMath.sub(now, p.lastUpdateTime);      \n        \n        if (hashratePerDay > 0) _currentCrystals = SafeMath.add(p.crystals, SafeMath.mul(hashratePerDay, secondsPassed));\n    }\n    function getCurrentLevel(uint256 startingLevel, uint256 startingTime, uint256 halfLife) private view returns(uint256) \n    {\n        uint256 timePassed=SafeMath.sub(now, startingTime);\n        uint256 levelsPassed=SafeMath.div(timePassed, halfLife);\n        if (startingLevel < levelsPassed) {\n            return 0;\n        }\n        return SafeMath.sub(startingLevel, levelsPassed);\n    }\n    function getCurrentPrice(uint256 currentLevel) private view returns(uint256) \n    {\n        return SafeMath.mul(BASE_PRICE, 2**currentLevel);\n    }\n    function updateRankList(address addr) private returns(bool)\n    {\n        uint256 idx = 0;\n        Player storage insert = players[addr];\n        Player storage lastOne = players[rankList[19]];\n        if(insert.hashrate < lastOne.hashrate) {\n            return false;\n        }\n        address[21] memory tempList = rankList;\n        if(!inRankList(addr)){\n            tempList[20] = addr;\n            quickSort(tempList, 0, 20);\n        }else{\n            quickSort(tempList, 0, 19);\n        }\n        for(idx = 0;idx < 21; idx++){\n            if(tempList[idx] != rankList[idx]){\n                rankList[idx] = tempList[idx];\n            }\n        }\n        \n        return true;\n    }\n    function inRankList(address addr) internal view returns(bool)\n    {\n        for(uint256 idx = 0;idx < 20; idx++){\n            if(addr == rankList[idx]){\n                return true;\n            }\n        }\n        return false;\n    }\n    function quickSort(address[21] list, int left, int right) internal\n    {\n        int i = left;\n        int j = right;\n        if(i == j) return;\n        address addr = list[uint(left + (right - left) / 2)];\n        Player storage p = players[addr];\n        while (i <= j) {\n            while (players[list[uint(i)]].hashrate > p.hashrate) i++;\n            while (p.hashrate > players[list[uint(j)]].hashrate) j--;\n            if (i <= j) {\n                (list[uint(i)], list[uint(j)]) = (list[uint(j)], list[uint(i)]);\n                i++;\n                j--;\n            }\n        }\n        if (left < j)\n            quickSort(list, left, j);\n        if (i < right)\n            quickSort(list, i, right);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getFreeMinerForMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getHashratePerDay\",\"outputs\":[{\"name\":\"personalProduction\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBoosterPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPlayerData\",\"outputs\":[{\"name\":\"crystals\",\"type\":\"uint256\"},{\"name\":\"lastupdate\",\"type\":\"uint256\"},{\"name\":\"hashratePerDay\",\"type\":\"uint256\"},{\"name\":\"miners\",\"type\":\"uint256[8]\"},{\"name\":\"hasBoost\",\"type\":\"uint256\"},{\"name\":\"playerBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"crystals\",\"type\":\"uint256\"},{\"name\":\"lastupdate\",\"type\":\"uint256\"},{\"name\":\"hashratePerDay\",\"type\":\"uint256\"},{\"name\":\"miners\",\"type\":\"uint256[8]\"},{\"name\":\"hasBoost\",\"type\":\"uint256\"},{\"name\":\"playerBalance\",\"type\":\"uint256\"},{\"name\":\"_miningWarRound\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"},{\"name\":\"_miningWarPrizePool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBoosterData\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boostRate\",\"type\":\"uint256\"},{\"name\":\"startingLevel\",\"type\":\"uint256\"},{\"name\":\"startingTime\",\"type\":\"uint256\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"halfLife\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subHashrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minerNumbers\",\"type\":\"uint256[8]\"}],\"name\":\"buyMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALF_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMiniGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMiningWarContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosterReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractsMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getFreeMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miniGameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calCurrentCrystals\",\"outputs\":[{\"name\":\"_currentCrystals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRankList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[21]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasBooster\",\"outputs\":[{\"name\":\"boostIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subCrystal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRTSTAL_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"buyBooster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"roundNumber\",\"type\":\"uint256\"},{\"name\":\"hashrate\",\"type\":\"uint256\"},{\"name\":\"crystals\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addHashrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addCrystal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoundNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"GetFreeMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minerNumbers\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"_crystalsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hashrateBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"}],\"name\":\"BuyMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_hashrate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"}],\"name\":\"ChangeHasrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_crystal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"}],\"name\":\"ChangeCrystal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_boosterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundPrize\",\"type\":\"uint256\"}],\"name\":\"BuyBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_topAddr\",\"type\":\"address[10]\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"name\":\"_miningWarRound\",\"type\":\"uint256\"}],\"name\":\"Lottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"}]",
  "bytecode": ""
}