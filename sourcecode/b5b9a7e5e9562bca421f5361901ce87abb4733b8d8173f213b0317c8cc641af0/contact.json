{
  "address": "0x0d5516103752b3954d95621f470a8261151da2e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-19\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Pausable is Ownable {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    modifier whenNotPaused() { require(!paused); _; }\n    modifier whenPaused() { require(paused); _; }\n\n    function pause() onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n    \n    function unpause() onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function allowance(address owner, address spender) constant returns (uint256);\n    function approve(address spender, uint256 value) returns (bool);\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) returns(bool success) {\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool success) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) returns(bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) returns(bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if(_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n}\n\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() { require(!mintingFinished); _; }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool success) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        Mint(_to, _amount);\n        Transfer(address(0), _to, _amount);\n\n        return true;\n    }\n\n    function finishMinting() onlyOwner public returns(bool success) {\n        mintingFinished = true;\n\n        MintFinished();\n\n        return true;\n    }\n}\n\n/*\n    ICO Bloomzed Token\n    - Эмиссия токенов ограничена (всего 100 000 000 токенов, токены выпускаются во время ICO и PreICO)\n    - Цена токена фиксированная: 1 ETH = 500 токенов\n    - Токенов на продажу 50 000 000 (50%)\n    - 50 000 000 (50%) токенов передается команде во время создания токена\n    - Бонусы на PreICO: +50% токенов\n    - Бонусы на ICO: +25% первый день, +20% с 2 по 3 день, +15% с 4 по 5 день, +10% с 6 по 7 день, +7% с 8 по 9 день, +5% с 10 по 11 день\n    - Бонусы на ICO: +3% при покупке >= 3 000 токенов, +5% при покупке > 5 000 токенов, +7% при покупке > 10 000 токенов, +10% при покупке > 15 000 токенов\n    - Бонусы расчитываются на начальную сумму, бонусы сумируются\n    - Минимальная и максимальная сумма покупки: 0.5 ETH и 10000 ETH\n    - Средства от покупки токенов передаются бенефициару\n    - Crowdsale ограничен по времени\n    - Закрытие Crowdsale происходит с помощью функции \"withdraw()\", минтинг закрывается, управление токеном передаются бенефициару\n*/\ncontract Token is BurnableToken, MintableToken {\n    string public name = \"Bloomzed Token\";\n    string public symbol = \"BZT\";\n    uint256 public decimals = 18;\n\n    function Token() {\n        mint(0x3c64B86cEE4E60EDdA517521b46Ac74134442058, 50000000 * 1 ether);       // Command mint\n    }\n}\n\ncontract Crowdsale is Pausable {\n    using SafeMath for uint;\n\n    Token public token;\n    address public beneficiary = 0x86fABfdBB9B5BFDbec3975aECdDee54b28bDeA45;        // Beneficiary\n    address public manager = 0xD9e4a8fCb4357Dfd14861Bc9E4170e43C14062A4;            // Manager\n\n    uint public collectedWei;\n    uint public tokensSold;\n\n    uint public priceTokenWei = 1 ether / 500;\n\n    uint public piTokensForSale = 5000000 * 1 ether;                                // Amount tokens for sale on PreICO\n    uint public tokensForSale = 50000000 * 1 ether;                                 // Amount tokens for sale\n\n    uint public piStartTime = 1513674000;                                           // Date start   19.12.2017 12:00 +03\n    uint public piEndTime = 1514278800;                                             // Date end     26.12.2017 12:00 +03\n    uint public startTime = 1516179600;                                             // Date start   17.01.2018 12:00 +03\n    uint public endTime = 1518858000;                                               // Date end     17.02.2018 12:00 +03\n    bool public crowdsaleFinished = false;\n\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n    event Withdraw();\n\n    modifier onlyManager() { require(msg.sender == manager); _; }\n\n    function Crowdsale() {\n        token = new Token();\n    }\n\n    function() payable {\n        purchase();\n    }\n    \n    function purchase() whenNotPaused payable {\n        require(!crowdsaleFinished);\n        require((now >= piStartTime && now < piEndTime && tokensSold < piTokensForSale) || (now >= startTime && now < endTime));\n        require(tokensSold < tokensForSale);\n        require(msg.value >= 0.5 * 1 ether && msg.value <= 10000 * 1 ether);\n\n        uint sum = msg.value;\n        uint amount = sum.div(priceTokenWei).mul(1 ether);\n        uint retSum = 0;\n\n        // ICO\n        if(now > piEndTime) {\n            uint bonus = 0;\n\n            // Day bonus\n            if(tokensSold.add(amount) < piTokensForSale) {\n                bonus.add(\n                    now < startTime + 1 days ? 25\n                        : (now < startTime + 3 days ? 20\n                            : (now < startTime + 5 days ? 15\n                                : (now < startTime + 7 days ? 10\n                                    : (now < startTime + 9 days ? 7\n                                        : (now < startTime + 11 days ? 5 : 0\n                ))))));\n\n                // Amount bonus\n                if(amount >= 3000 * 1 ether) {\n                    bonus.add(\n                        amount > 15000 * 1 ether ? 10 : \n                            (amount > 10000 * 1 ether ? 7 : \n                                (amount > 5000 * 1 ether ? 5 : 3\n                    )));\n                }\n            }\n\n            if(bonus > 0) {\n                amount = amount.add(amount.div(100).mul(bonus));\n            }\n\n            if(tokensSold.add(amount) > piTokensForSale) {\n                uint retAmount = tokensSold.add(amount).sub(piTokensForSale);\n                retSum = retAmount.mul(price).div(1 ether);\n\n                amount = amount.sub(retAmount);\n                sum = sum.sub(retSum);\n            }\n        }\n        // PreICO\n        else {\n            uint price = priceTokenWei.mul(100).div(150);\n            amount = sum.div(price).mul(1 ether);\n            \n            if(tokensSold.add(amount) > piTokensForSale) {\n                retAmount = tokensSold.add(amount).sub(piTokensForSale);\n                retSum = retAmount.mul(price).div(1 ether);\n\n                amount = amount.sub(retAmount);\n                sum = sum.sub(retSum);\n            }\n        }\n\n        tokensSold = tokensSold.add(amount);\n        collectedWei = collectedWei.add(sum);\n\n        beneficiary.transfer(sum);\n        token.mint(msg.sender, amount);\n\n        if(retSum > 0) {\n            msg.sender.transfer(retSum);\n        }\n\n        NewContribution(msg.sender, amount, sum);\n    }\n\n    function externalPurchase(address _to, uint _value) whenNotPaused onlyManager {\n        require(!crowdsaleFinished);\n        require(tokensSold < tokensForSale);\n\n        uint amount = _value.mul(1 ether);\n\n        tokensSold = tokensSold.add(amount);\n\n        token.mint(_to, amount);\n\n        NewContribution(_to, amount, 0);\n    }\n\n    function withdraw() onlyOwner {\n        require(!crowdsaleFinished);\n        \n        token.finishMinting();\n        token.transferOwnership(beneficiary);\n\n        crowdsaleFinished = true;\n\n        Withdraw();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280600e81526020017f426c6f6f6d7a656420546f6b656e000000000000000000000000000000000000815250600490805190602001906200006c9291906200037c565b506040805190810160405280600381526020017f425a54000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba9291906200037c565b5060126006553415620000cc57600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200014c733c64b86cee4e60edda517521b46ac741344420586a295be96e64066972000000620001536401000000000262000b93176401000000009004565b506200042b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620001b257600080fd5b600360149054906101000a900460ff16151515620001cf57600080fd5b620001f4826000546200035d64010000000002620018a4179091906401000000009004565b6000819055506200025c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200035d64010000000002620018a4179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082840190508381101515156200037257fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003bf57805160ff1916838001178555620003f0565b82800160010185558215620003f0579182015b82811115620003ef578251825591602001919060010190620003d2565b5b509050620003ff919062000403565b5090565b6200042891905b80821115620004245760008160009055506001016200040a565b5090565b90565b6118ee806200043b6000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146100f657806306fdde0314610123578063095ea7b3146101b157806318160ddd1461020b57806323b872dd14610234578063313ce567146102ad57806340c10f19146102d657806342966c6814610330578063661884631461035357806370a08231146103ad5780637d64bcb4146103fa5780638da5cb5b1461042757806395d89b411461047c578063a9059cbb1461050a578063d73dd62314610564578063dd62ed3e146105be578063f2fde38b1461062a575b600080fd5b341561010157600080fd5b610109610663565b604051808215151515815260200191505060405180910390f35b341561012e57600080fd5b610136610676565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017657808201518184015260208101905061015b565b50505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bc57600080fd5b6101f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610714565b604051808215151515815260200191505060405180910390f35b341561021657600080fd5b61021e61089b565b6040518082815260200191505060405180910390f35b341561023f57600080fd5b610293600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108a1565b604051808215151515815260200191505060405180910390f35b34156102b857600080fd5b6102c0610b8d565b6040518082815260200191505060405180910390f35b34156102e157600080fd5b610316600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b93565b604051808215151515815260200191505060405180910390f35b341561033b57600080fd5b6103516004808035906020019091905050610d7b565b005b341561035e57600080fd5b610393600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e90565b604051808215151515815260200191505060405180910390f35b34156103b857600080fd5b6103e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611121565b6040518082815260200191505060405180910390f35b341561040557600080fd5b61040d61116a565b604051808215151515815260200191505060405180910390f35b341561043257600080fd5b61043a611216565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048757600080fd5b61048f61123c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104cf5780820151818401526020810190506104b4565b50505050905090810190601f1680156104fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051557600080fd5b61054a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112da565b604051808215151515815260200191505060405180910390f35b341561056f57600080fd5b6105a4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114b0565b604051808215151515815260200191505060405180910390f35b34156105c957600080fd5b610614600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116ac565b6040518082815260200191505060405180910390f35b341561063557600080fd5b610661600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611733565b005b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b505050505081565b6000808214806107a057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156107ab57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156108e057600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109b183600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461188b90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a4683600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118a490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9c838261188b90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bf157600080fd5b600360149054906101000a900460ff16151515610c0d57600080fd5b610c22826000546118a490919063ffffffff16565b600081905550610c7a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118a490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082111515610d8b57600080fd5b339050610de082600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461188b90919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e388260005461188b90919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610fa1576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611035565b610fb4838261188b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c857600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d25780601f106112a7576101008083540402835291602001916112d2565b820191906000526020600020905b8154815290600101906020018083116112b557829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561131757600080fd5b61136982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461188b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113fe82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118a490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061154182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118a490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561178f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117cb57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561189957fe5b818303905092915050565b60008082840190508381101515156118b857fe5b80915050929150505600a165627a7a723058200b8c3f7f87a5047f234c322d7d7504a6c87bf56dee544a28f1a90c1d604a7c430029"
}