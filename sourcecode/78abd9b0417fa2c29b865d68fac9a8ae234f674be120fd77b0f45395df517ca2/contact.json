{
  "address": "0x032ef0359eb068d3dddd6e91021c02f397afce5a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DeveryERC721Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n// ----------------------------------------------------------------------------\n// Devery Contracts - The Monolithic Registry\n//\n// Deployed to Ropsten Testnet at 0x654f4a3e3B7573D6b4bB7201AB70d718961765CD\n//\n// Enjoy.\n//\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// Administrators\n// ----------------------------------------------------------------------------\ncontract Admined is Owned {\n\n    mapping (address => bool) public admins;\n\n    event AdminAdded(address addr);\n    event AdminRemoved(address addr);\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    function isAdmin(address addr) public constant returns (bool) {\n        return (admins[addr] || owner == addr);\n    }\n    function addAdmin(address addr) public onlyOwner {\n        require(!admins[addr] && addr != owner);\n        admins[addr] = true;\n        AdminAdded(addr);\n    }\n    function removeAdmin(address addr) public onlyOwner {\n        require(admins[addr]);\n        delete admins[addr];\n        AdminRemoved(addr);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// Devery Registry\n// ----------------------------------------------------------------------------\ncontract DeveryRegistry is Admined {\n\n    struct App {\n        address appAccount;\n        string appName;\n        address feeAccount;\n        uint fee;\n        bool active;\n    }\n    struct Brand {\n        address brandAccount;\n        address appAccount;\n        string brandName;\n        bool active;\n    }\n    struct Product {\n        address productAccount;\n        address brandAccount;\n        string description;\n        string details;\n        uint year;\n        string origin;\n        bool active;\n    }\n\n    ERC20Interface public token;\n    address public feeAccount;\n    uint public fee;\n    mapping(address => App) public apps;\n    mapping(address => Brand) public brands;\n    mapping(address => Product) public products;\n    mapping(address => mapping(address => bool)) permissions;\n    mapping(bytes32 => address) markings;\n    address[] public appAccounts;\n    address[] public brandAccounts;\n    address[] public productAccounts;\n\n    event TokenUpdated(address indexed oldToken, address indexed newToken);\n    event FeeUpdated(address indexed oldFeeAccount, address indexed newFeeAccount, uint oldFee, uint newFee);\n    event AppAdded(address indexed appAccount, string appName, address feeAccount, uint fee, bool active);\n    event AppUpdated(address indexed appAccount, string appName, address feeAccount, uint fee, bool active);\n    event BrandAdded(address indexed brandAccount, address indexed appAccount, string brandName, bool active);\n    event BrandUpdated(address indexed brandAccount, address indexed appAccount, string brandName, bool active);\n    event ProductAdded(address indexed productAccount, address indexed brandAccount, address indexed appAccount, string description, bool active);\n    event ProductUpdated(address indexed productAccount, address indexed brandAccount, address indexed appAccount, string description, bool active);\n    event Permissioned(address indexed marker, address indexed brandAccount, bool permission);\n    event Marked(address indexed marker, address indexed productAccount, address appFeeAccount, address feeAccount, uint appFee, uint fee, bytes32 itemHash);\n\n\n    // ------------------------------------------------------------------------\n    // Token, fee account and fee\n    // ------------------------------------------------------------------------\n    function setToken(address _token) public onlyAdmin {\n        TokenUpdated(address(token), _token);\n        token = ERC20Interface(_token);\n    }\n    function setFee(address _feeAccount, uint _fee) public onlyAdmin {\n        FeeUpdated(feeAccount, _feeAccount, fee, _fee);\n        feeAccount = _feeAccount;\n        fee = _fee;\n    }\n\n    // ------------------------------------------------------------------------\n    // Account can add itself as an App account\n    // ------------------------------------------------------------------------\n    function addApp(string appName, address _feeAccount, uint _fee) public {\n        App storage e = apps[msg.sender];\n        require(e.appAccount == address(0));\n        apps[msg.sender] = App({\n            appAccount: msg.sender,\n            appName: appName,\n            feeAccount: _feeAccount,\n            fee: _fee,\n            active: true\n        });\n        appAccounts.push(msg.sender);\n        AppAdded(msg.sender, appName, _feeAccount, _fee, true);\n    }\n    function updateApp(string appName, address _feeAccount, uint _fee, bool active) public {\n        App storage e = apps[msg.sender];\n        require(msg.sender == e.appAccount);\n        e.appName = appName;\n        e.feeAccount = _feeAccount;\n        e.fee = _fee;\n        e.active = active;\n        AppUpdated(msg.sender, appName, _feeAccount, _fee, active);\n    }\n    function getApp(address appAccount) public constant returns (App app) {\n        app = apps[appAccount];\n    }\n    function getAppData(address appAccount) public constant returns (address _feeAccount, uint _fee, bool active) {\n        App storage e = apps[appAccount];\n        _feeAccount = e.feeAccount;\n        _fee = e.fee;\n        active = e.active;\n    }\n    function appAccountsLength() public constant returns (uint) {\n        return appAccounts.length;\n    }\n\n    // ------------------------------------------------------------------------\n    // App account can add Brand account\n    // ------------------------------------------------------------------------\n    function addBrand(address brandAccount, string brandName) public {\n        App storage app = apps[msg.sender];\n        require(app.appAccount != address(0));\n        Brand storage brand = brands[brandAccount];\n        require(brand.brandAccount == address(0));\n        brands[brandAccount] = Brand({\n            brandAccount: brandAccount,\n            appAccount: msg.sender,\n            brandName: brandName,\n            active: true\n        });\n        brandAccounts.push(brandAccount);\n        BrandAdded(brandAccount, msg.sender, brandName, true);\n    }\n    function updateBrand(address brandAccount, string brandName, bool active) public {\n        Brand storage brand = brands[brandAccount];\n        require(brand.appAccount == msg.sender);\n        brand.brandName = brandName;\n        brand.active = active;\n\n        BrandUpdated(brandAccount, msg.sender, brandName, active);\n    }\n    function getBrand(address brandAccount) public constant returns (Brand brand) {\n        brand = brands[brandAccount];\n    }\n    function getBrandData(address brandAccount) public constant returns (address appAccount, address appFeeAccount, bool active) {\n        Brand storage brand = brands[brandAccount];\n        require(brand.appAccount != address(0));\n        App storage app = apps[brand.appAccount];\n        require(app.appAccount != address(0));\n        appAccount = app.appAccount;\n        appFeeAccount = app.feeAccount;\n        active = app.active && brand.active;\n    }\n    function brandAccountsLength() public constant returns (uint) {\n        return brandAccounts.length;\n    }\n\n    // ------------------------------------------------------------------------\n    // Brand account can add Product account\n    // ------------------------------------------------------------------------\n    function addProduct(address productAccount, string description, string details, uint year, string origin) public {\n        Brand storage brand = brands[msg.sender];\n        require(brand.brandAccount != address(0));\n        App storage app = apps[brand.appAccount];\n        require(app.appAccount != address(0));\n        Product storage product = products[productAccount];\n        require(product.productAccount == address(0));\n        products[productAccount] = Product({\n            productAccount: productAccount,\n            brandAccount: msg.sender,\n            description: description,\n            details: details,\n            year: year,\n            origin: origin,\n            active: true\n        });\n        productAccounts.push(productAccount);\n        ProductAdded(productAccount, msg.sender, app.appAccount, description, true);\n    }\n    function updateProduct(address productAccount, string description, string details, uint year, string origin, bool active) public {\n        Product storage product = products[productAccount];\n        require(product.brandAccount == msg.sender);\n        Brand storage brand = brands[msg.sender];\n        require(brand.brandAccount == msg.sender);\n        App storage app = apps[brand.appAccount];\n        product.description = description;\n        product.details = details;\n        product.year = year;\n        product.origin = origin;\n        product.active = active;\n        ProductUpdated(productAccount, product.brandAccount, app.appAccount, description, active);\n    }\n    function getProduct(address productAccount) public constant returns (Product product) {\n        product = products[productAccount];\n    }\n    function getProductData(address productAccount) public constant returns (address brandAccount, address appAccount, address appFeeAccount, bool active) {\n        Product storage product = products[productAccount];\n        require(product.brandAccount != address(0));\n        Brand storage brand = brands[brandAccount];\n        require(brand.appAccount != address(0));\n        App storage app = apps[brand.appAccount];\n        require(app.appAccount != address(0));\n        brandAccount = product.brandAccount;\n        appAccount = app.appAccount;\n        appFeeAccount = app.feeAccount;\n        active = app.active && brand.active && brand.active;\n    }\n    function productAccountsLength() public constant returns (uint) {\n        return productAccounts.length;\n    }\n\n    // ------------------------------------------------------------------------\n    // Brand account can permission accounts as markers\n    // ------------------------------------------------------------------------\n    function permissionMarker(address marker, bool permission) public {\n        Brand storage brand = brands[msg.sender];\n        require(brand.brandAccount != address(0));\n        permissions[marker][msg.sender] = permission;\n        Permissioned(marker, msg.sender, permission);\n    }\n\n    // ------------------------------------------------------------------------\n    // Compute item hash from the public key\n    // ------------------------------------------------------------------------\n    function addressHash(address item) public pure returns (bytes32 hash) {\n        hash = keccak256(item);\n    }\n\n    // ------------------------------------------------------------------------\n    // Markers can add [productAccount, sha3(itemPublicKey)]\n    // ------------------------------------------------------------------------\n    function mark(address productAccount, bytes32 itemHash) public {\n        Product storage product = products[productAccount];\n        require(product.brandAccount != address(0) && product.active);\n        Brand storage brand = brands[product.brandAccount];\n        require(brand.brandAccount != address(0) && brand.active);\n        App storage app = apps[brand.appAccount];\n        require(app.appAccount != address(0) && app.active);\n        bool permissioned = permissions[msg.sender][brand.brandAccount];\n        require(permissioned);\n        markings[itemHash] = productAccount;\n        Marked(msg.sender, productAccount, app.feeAccount, feeAccount, app.fee, fee, itemHash);\n        if (app.fee > 0) {\n            token.transferFrom(brand.brandAccount, app.feeAccount, app.fee);\n        }\n        if (fee > 0) {\n            token.transferFrom(brand.brandAccount, feeAccount, fee);\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Check itemPublicKey has been registered\n    // ------------------------------------------------------------------------\n    function check(address item) public constant returns (address productAccount, address brandAccount, address appAccount) {\n        bytes32 hash = keccak256(item);\n        productAccount = markings[hash];\n        // require(productAccount != address(0));\n        Product storage product = products[productAccount];\n        // require(product.brandAccount != address(0));\n        Brand storage brand = brands[product.brandAccount];\n        // require(brand.brandAccount != address(0));\n        brandAccount = product.brandAccount;\n        appAccount = brand.appAccount;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n\n\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 {\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_InterfaceId_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) public returns (bytes4);\n}\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721Enumerable {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address.\n     * The call is not executed if the target address is not a contract.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n    internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Constructor function.\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721Enumerable via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        _addTokenToAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n        _ownedTokensIndex[tokenId] = 0;\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Gets the list of token IDs of the requested owner.\n     * @param owner address owning the tokens\n     * @return uint256[] List of token IDs owned by the requested address\n     */\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n        // lastTokenId, or just over the end of the array if the token was the last one).\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n}\n\n\n/**\n * @dev Manages Devery specific ERC721 functionality. We are going to control the ownership of products through the\n * ERC721 specification, so every product ownership can be represented as a non fungible token. Brands\n * might choose to create, mark and mint a ERC721 for every physical unit of a product or create and mark a single\n * product and then mint multiple units of it. This flexibility will make the process of marking low ticket items\n * expenentially cheaper without compromise the security that you get by creating and marking every single product in case\n * of higher ticket items\n *\n * @title DeveryERC721Token\n * @author victor eloy\n */\ncontract DeveryERC721Token is ERC721Enumerable,Admined {\n\n\n    address[] public tokenIdToProduct;\n    mapping(address => uint) public totalAllowedProducts;\n    mapping(address => uint) public totalMintedProducts;\n    DeveryRegistry deveryRegistry;\n    ERC20Interface public token;\n    \n    event TokenUpdated(address indexed oldToken, address indexed newToken);\n\n\n    function setToken(address _token) public onlyAdmin {\n        TokenUpdated(address(token), _token);\n        token = ERC20Interface(_token);\n    }\n\n    /**\n      * @dev modifier to enforce that only the brand that created a given product can change it\n      * this modifier will check the core devery registry to fetch the brand address.\n      */\n    modifier brandOwnerOnly(address _productAddress){\n        address productBrandAddress;\n        (,productBrandAddress,,,,,) = deveryRegistry.products(_productAddress);\n        require(productBrandAddress == msg.sender);\n        _;\n    }\n\n    /**\n      * @dev Allow contract admins to set the address of Core Devery Registry contract\n      */\n    function setDeveryRegistryAddress(address _deveryRegistryAddress) external onlyAdmin {\n        deveryRegistry = DeveryRegistry(_deveryRegistryAddress);\n    }\n\n    /**\n      * @dev adjusts the maximum mintable amount of a certain product\n      */\n    function setMaximumMintableQuantity(address _productAddress, uint _quantity) external payable brandOwnerOnly(_productAddress){\n        require(_quantity >= totalMintedProducts[_productAddress] || _quantity == 0);\n        totalAllowedProducts[_productAddress] = _quantity;\n    }\n\n    /**\n      * @dev mint a new ERC721 token for a given product and assing it to the original product brand;\n      */\n    function claimProduct(address _productAddress,uint _quantity) external payable  brandOwnerOnly(_productAddress) {\n        require(totalAllowedProducts[_productAddress] == 0 || totalAllowedProducts[_productAddress] >= totalMintedProducts[_productAddress] + _quantity);\n        //********************************************************************charges the fee****************************************\n        address productBrandAddress;\n        address appAccountAddress;\n        address appFeeAccount;\n        address deveryFeeAccount;\n        uint appFee;\n        uint deveryFee;\n        (,productBrandAddress,,,,,) = deveryRegistry.products(_productAddress);\n        (,appAccountAddress,,) = deveryRegistry.brands(productBrandAddress);\n        (,,appFeeAccount,appFee,) = deveryRegistry.apps(appAccountAddress);\n        deveryFee = deveryRegistry.fee();\n        deveryFeeAccount = deveryRegistry.feeAccount();\n        if (appFee > 0) {\n            token.transferFrom(productBrandAddress, appFeeAccount, appFee*_quantity);\n        }\n        if (deveryFee > 0) {\n            token.transferFrom(productBrandAddress, deveryFeeAccount, deveryFee*_quantity);\n        }\n        //********************************************************************charges the fee****************************************\n        for(uint i = 0;i<_quantity;i++){\n            uint nextId = tokenIdToProduct.push(_productAddress) - 1;\n            _mint(msg.sender,nextId);\n        }\n        \n        totalMintedProducts[_productAddress]+=_quantity;\n    }\n\n    /**\n      * @dev returns the products owned by a given ethereum address\n      */\n    function getProductsByOwner(address _owner) external view returns (address[]){\n        address[] memory products = new address[](balanceOf(_owner));\n        uint counter = 0;\n        for(uint i = 0; i < tokenIdToProduct.length;i++){\n            if(ownerOf(i) == _owner){\n                products[counter] = tokenIdToProduct[i];\n                counter++;\n            }\n        }\n        return products;\n    }\n}",
  "bytecode": ""
}