{
  "address": "0xdd5cec9019ec8449a5d01d0d8175e6519530d276",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title Ownership interface\n *\n * Perminent ownership\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract IOwnership {\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) constant returns (bool);\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() constant returns (address);\n}\n\n\n/**\n * @title Ownership\n *\n * Perminent ownership\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract Ownership is IOwnership {\n\n    // Owner\n    address internal owner;\n\n\n    /**\n     * The publisher is the inital owner\n     */\n    function Ownership() {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * Access is restricted to the current owner\n     */\n    modifier only_owner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * Returns true if `_account` is the current owner\n     *\n     * @param _account The address to test against\n     */\n    function isOwner(address _account) public constant returns (bool) {\n        return _account == owner;\n    }\n\n\n    /**\n     * Gets the current owner\n     *\n     * @return address The current owner\n     */\n    function getOwner() public constant returns (address) {\n        return owner;\n    }\n}\n\n\n/**\n * @title Transferable ownership interface\n *\n * Enhances ownership by allowing the current owner to \n * transfer ownership to a new owner\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract ITransferableOwnership {\n    \n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner);\n}\n\n\n/**\n * @title Transferable ownership\n *\n * Enhances ownership by allowing the current owner to \n * transfer ownership to a new owner\n *\n * #created 01/10/2017\n * #author Frank Bonnet\n */\ncontract TransferableOwnership is ITransferableOwnership, Ownership {\n\n\n    /**\n     * Transfer ownership to `_newOwner`\n     *\n     * @param _newOwner The address of the account that will become the new owner \n     */\n    function transferOwnership(address _newOwner) public only_owner {\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title IAuthenticator \n *\n * Authenticator interface\n *\n * #created 15/10/2017\n * #author Frank Bonnet\n */\ncontract IAuthenticator {\n    \n\n    /**\n     * Authenticate \n     *\n     * Returns whether `_account` is authenticated or not\n     *\n     * @param _account The account to authenticate\n     * @return whether `_account` is successfully authenticated\n     */\n    function authenticate(address _account) constant returns (bool);\n}\n\n\n/**\n * @title IWhitelist \n *\n * Whitelist authentication interface\n *\n * #created 04/10/2017\n * #author Frank Bonnet\n */\ncontract IWhitelist is IAuthenticator {\n    \n\n    /**\n     * Returns whether an entry exists for `_account`\n     *\n     * @param _account The account to check\n     * @return whether `_account` is has an entry in the whitelist\n     */\n    function hasEntry(address _account) constant returns (bool);\n\n\n    /**\n     * Add `_account` to the whitelist\n     *\n     * If an account is currently disabled, the account is reenabled, otherwise \n     * a new entry is created\n     *\n     * @param _account The account to add\n     */\n    function add(address _account);\n\n\n    /**\n     * Remove `_account` from the whitelist\n     *\n     * Will not actually remove the entry but disable it by updating\n     * the accepted record\n     *\n     * @param _account The account to remove\n     */\n    function remove(address _account);\n}\n\n\n/**\n * @title Whitelist \n *\n * Whitelist authentication list\n *\n * #created 04/10/2017\n * #author Frank Bonnet\n */\ncontract Whitelist is IWhitelist, TransferableOwnership {\n\n    struct Entry {\n        uint datetime;\n        bool accepted;\n        uint index;\n    }\n\n    mapping (address => Entry) internal list;\n    address[] internal listIndex;\n\n\n    /**\n     * Returns whether an entry exists for `_account`\n     *\n     * @param _account The account to check\n     * @return whether `_account` is has an entry in the whitelist\n     */\n    function hasEntry(address _account) public constant returns (bool) {\n        return listIndex.length > 0 && _account == listIndex[list[_account].index];\n    }\n\n\n    /**\n     * Add `_account` to the whitelist\n     *\n     * If an account is currently disabled, the account is reenabled, otherwise \n     * a new entry is created\n     *\n     * @param _account The account to add\n     */\n    function add(address _account) public only_owner {\n        if (!hasEntry(_account)) {\n            list[_account] = Entry(\n                now, true, listIndex.push(_account) - 1);\n        } else {\n            Entry storage entry = list[_account];\n            if (!entry.accepted) {\n                entry.accepted = true;\n                entry.datetime = now;\n            }\n        }\n    }\n\n\n    /**\n     * Remove `_account` from the whitelist\n     *\n     * Will not acctually remove the entry but disable it by updating\n     * the accepted record\n     *\n     * @param _account The account to remove\n     */\n    function remove(address _account) public only_owner {\n        if (hasEntry(_account)) {\n            Entry storage entry = list[_account];\n            entry.accepted = false;\n            entry.datetime = now;\n        }\n    }\n\n\n    /**\n     * Authenticate \n     *\n     * Returns whether `_account` is on the whitelist\n     *\n     * @param _account The account to authenticate\n     * @return whether `_account` is successfully authenticated\n     */\n    function authenticate(address _account) public constant returns (bool) {\n        return list[_account].accepted;\n    }\n}",
  "bytecode": "60606040525b60008054600160a060020a03191633600160a060020a03161790555b5b61049c806100316000396000f300606060405236156100805763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308e0d29d81146100855780630a3b0a4f146100b857806329092d0e146100d95780632f54bf6e146100fa578063893d20e81461012d578063a25047a21461015c578063f2fde38b1461018f575b600080fd5b341561009057600080fd5b6100a4600160a060020a03600435166101b0565b604051901515815260200160405180910390f35b34156100c357600080fd5b6100d7600160a060020a03600435166101d6565b005b34156100e457600080fd5b6100d7600160a060020a03600435166102e6565b005b341561010557600080fd5b6100a4600160a060020a0360043516610341565b604051901515815260200160405180910390f35b341561013857600080fd5b610140610358565b604051600160a060020a03909116815260200160405180910390f35b341561016757600080fd5b6100a4600160a060020a0360043516610368565b604051901515815260200160405180910390f35b341561019a57600080fd5b6100d7600160a060020a03600435166103dd565b005b600160a060020a0381166000908152600160208190526040909120015460ff165b919050565b6000805433600160a060020a039081169116146101f257600080fd5b6101fb82610368565b15156102a2576060604051908101604052804281526020016001151581526020016001600280548060010182816102329190610425565b916000526020600020900160005b8154600160a060020a03808a166101009390930a83810291021990911617909155919003909152600090815260016020526040902081518155602082015160018201805460ff19169115159190911790556040820151600290910155506102df565b50600160a060020a03811660009081526001602081905260409091209081015460ff1615156102df576001818101805460ff191690911790554281555b5b5b5b5050565b6000805433600160a060020a0390811691161461030257600080fd5b61030b82610368565b156102df5750600160a060020a0381166000908152600160208190526040909120908101805460ff191690554281555b5b5b5050565b600054600160a060020a038281169116145b919050565b600054600160a060020a03165b90565b60025460009081901180156103d55750600160a060020a0382166000908152600160205260409020600290810154815481106103a057fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031682600160a060020a0316145b90505b919050565b60005433600160a060020a039081169116146103f857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b8154818355818115116104495760008381526020902061044991810190830161044f565b5b505050565b61036591905b808211156104695760008155600101610455565b5090565b905600a165627a7a723058207c6b9c715f95ffd648ce18d972c6ea89b3a75b6bd5d347b5fda9f5dd6d7ca0330029"
}