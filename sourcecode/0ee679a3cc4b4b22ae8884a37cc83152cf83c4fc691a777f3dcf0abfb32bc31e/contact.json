{
  "address": "0x0d5f8a079042d5071220498fa0f0d7fd2c5fffbe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WalletSimple",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-07\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * Contract that exposes the needed erc20 token functions\n */\n\ncontract ERC20Interface {\n  // Send _value amount of tokens to address _to\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  // Get the account balance of another account with address _owner\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n}\n\n/**\n * Contract that will forward any incoming Ether to the creator of the contract\n */\ncontract Forwarder {\n  // Address to which any funds sent to this contract will be forwarded\n  address public parentAddress;\n  event ForwarderDeposited(address from, uint value, bytes data);\n\n  /**\n   * Create the contract, and sets the destination address to that of the creator\n   */\n  function Forwarder() public {\n    parentAddress = msg.sender;\n  }\n\n  /**\n   * Modifier that will execute internal code block only if the sender is the parent address\n   */\n  modifier onlyParent {\n    if (msg.sender != parentAddress) {\n      revert();\n    }\n    _;\n  }\n\n  /**\n   * Default function; Gets called when Ether is deposited, and forwards it to the parent address\n   */\n  function() public payable {\n    // throws on failure\n    parentAddress.transfer(msg.value);\n    // Fire off the deposited event if we can forward it\n    ForwarderDeposited(msg.sender, msg.value, msg.data);\n  }\n\n  /**\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\n   * @param tokenContractAddress the address of the erc20 token contract\n   */\n  function flushTokens(address tokenContractAddress) public onlyParent {\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n    var forwarderAddress = address(this);\n    var forwarderBalance = instance.balanceOf(forwarderAddress);\n    if (forwarderBalance == 0) {\n      return;\n    }\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\n      revert();\n    }\n  }\n\n  /**\n   * It is possible that funds were sent to this address before the contract was deployed.\n   * We can flush those funds to the parent address.\n   */\n  function flush() public {\n    // throws on failure\n    parentAddress.transfer(this.balance);\n  }\n}\n\n/**\n *\n * WalletSimple\n * ============\n *\n * Basic multi-signer wallet designed for use in a co-signing environment where 2 signatures are required to move funds.\n * Typically used in a 2-of-3 signing configuration. Uses ecrecover to allow for 2 signatures in a single transaction.\n *\n * The first signature is created on the operation hash (see Data Formats) and passed to sendMultiSig/sendMultiSigToken\n * The signer is determined by verifyMultiSig().\n *\n * The second signature is created by the submitter of the transaction and determined by msg.signer.\n *\n * Data Formats\n * ============\n *\n * The signature is created with ethereumjs-util.ecsign(operationHash).\n * Like the eth_sign RPC call, it packs the values as a 65-byte array of [r, s, v].\n * Unlike eth_sign, the message is not prefixed.\n *\n * The operationHash the result of keccak256(prefix, toAddress, value, data, expireTime).\n * For ether transactions, `prefix` is \"ETHER\".\n * For token transaction, `prefix` is \"ERC20\" and `data` is the tokenContractAddress.\n *\n *\n */\ncontract WalletSimple {\n  // Events\n  event Deposited(address from, uint value, bytes data);\n  event SafeModeActivated(address msgSender);\n  event Transacted(\n    address msgSender, // Address of the sender of the message initiating the transaction\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\n    bytes32 operation, // Operation hash (see Data Formats)\n    address toAddress, // The address the transaction was sent to\n    uint value, // Amount of Wei sent to the address\n    bytes data // Data sent when invoking the transaction\n  );\n\n  // Public fields\n  address[] public signers; // The addresses that can co-sign transactions on the wallet\n  bool public safeMode = false; // When active, wallet may only send to signer addresses\n\n  // Internal fields\n  uint constant SEQUENCE_ID_WINDOW_SIZE = 10;\n  uint[10] recentSequenceIds;\n\n  /**\n   * Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\n   * 2 signers will be required to send a transaction from this wallet.\n   * Note: The sender is NOT automatically added to the list of signers.\n   * Signers CANNOT be changed once they are set\n   *\n   * @param allowedSigners An array of signers on the wallet\n   */\n  function WalletSimple(address[] allowedSigners) public {\n    if (allowedSigners.length != 3) {\n      // Invalid number of signers\n      revert();\n    }\n    signers = allowedSigners;\n  }\n\n  /**\n   * Determine if an address is a signer on this wallet\n   * @param signer address to check\n   * returns boolean indicating whether address is signer or not\n   */\n  function isSigner(address signer) public view returns (bool) {\n    // Iterate through all signers on the wallet and\n    for (uint i = 0; i < signers.length; i++) {\n      if (signers[i] == signer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Modifier that will execute internal code block only if the sender is an authorized signer on this wallet\n   */\n  modifier onlySigner {\n    if (!isSigner(msg.sender)) {\n      revert();\n    }\n    _;\n  }\n\n  /**\n   * Gets called when a transaction is received without calling a method\n   */\n  function() public payable {\n    if (msg.value > 0) {\n      // Fire deposited event if we are receiving funds\n      Deposited(msg.sender, msg.value, msg.data);\n    }\n  }\n\n  /**\n   * Create a new contract (and also address) that forwards funds to this contract\n   * returns address of newly created forwarder address\n   */\n  function createForwarder() public returns (address) {\n    return new Forwarder();\n  }\n\n  /**\n   * Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param value the amount in Wei to be sent\n   * @param data the data to send to the toAddress when invoking the transaction\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * @param signature see Data Formats\n   */\n  function sendMultiSig(\n      address toAddress,\n      uint value,\n      bytes data,\n      uint expireTime,\n      uint sequenceId,\n      bytes signature\n  ) public onlySigner {\n    // Verify the other signer\n    var operationHash = keccak256(\"ETHER\", toAddress, value, data, expireTime, sequenceId);\n    \n    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n\n    // Success, send the transaction\n    if (!(toAddress.call.value(value)(data))) {\n      // Failed executing transaction\n      revert();\n    }\n    Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n  }\n  \n  /**\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param value the amount in tokens to be sent\n   * @param tokenContractAddress the address of the erc20 token contract\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * @param signature see Data Formats\n   */\n  function sendMultiSigToken(\n      address toAddress,\n      uint value,\n      address tokenContractAddress,\n      uint expireTime,\n      uint sequenceId,\n      bytes signature\n  ) public onlySigner {\n    // Verify the other signer\n    var operationHash = keccak256(\"ERC20\", toAddress, value, tokenContractAddress, expireTime, sequenceId);\n    \n    verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n    \n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n    if (!instance.transfer(toAddress, value)) {\n        revert();\n    }\n  }\n  \n  /**\n   * Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\n   *\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\n   * @param tokenContractAddress the address of the erc20 token contract\n   */\n  function flushForwarderTokens(\n    address forwarderAddress, \n    address tokenContractAddress\n  ) public onlySigner {\n    Forwarder forwarder = Forwarder(forwarderAddress);\n    forwarder.flushTokens(tokenContractAddress);\n  }\n\n  /**\n   * Do common multisig verification for both eth sends and erc20token transfers\n   *\n   * @param toAddress the destination address to send an outgoing transaction\n   * @param operationHash see Data Formats\n   * @param signature see Data Formats\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n   * returns address that has created the signature\n   */\n  function verifyMultiSig(\n      address toAddress,\n      bytes32 operationHash,\n      bytes signature,\n      uint expireTime,\n      uint sequenceId\n  ) private returns (address) {\n\n    var otherSigner = recoverAddressFromSignature(operationHash, signature);\n\n    // Verify if we are in safe mode. In safe mode, the wallet can only send to signers\n    if (safeMode && !isSigner(toAddress)) {\n      // We are in safe mode and the toAddress is not a signer. Disallow!\n      revert();\n    }\n    // Verify that the transaction has not expired\n    if (expireTime < block.timestamp) {\n      // Transaction expired\n      revert();\n    }\n\n    // Try to insert the sequence ID. Will revert if the sequence id was invalid\n    tryInsertSequenceId(sequenceId);\n\n    if (!isSigner(otherSigner)) {\n      // Other signer not on this wallet or operation does not match arguments\n      revert();\n    }\n    if (otherSigner == msg.sender) {\n      // Cannot approve own transaction\n      revert();\n    }\n\n    return otherSigner;\n  }\n\n  /**\n   * Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses.\n   */\n  function activateSafeMode() public onlySigner {\n    safeMode = true;\n    SafeModeActivated(msg.sender);\n  }\n\n  /**\n   * Gets signer's address using ecrecover\n   * @param operationHash see Data Formats\n   * @param signature see Data Formats\n   * returns address recovered from the signature\n   */\n  function recoverAddressFromSignature(\n    bytes32 operationHash,\n    bytes signature\n  ) private pure returns (address) {\n    if (signature.length != 65) {\n      revert();\n    }\n    // We need to unpack the signature, which is given as an array of 65 bytes (like eth.sign)\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    assembly {\n      r := mload(add(signature, 32))\n      s := mload(add(signature, 64))\n      v := and(mload(add(signature, 65)), 255)\n    }\n    if (v < 27) {\n      v += 27; // Ethereum versions are 27 or 28 as opposed to 0 or 1 which is submitted by some signing libs\n    }\n    return ecrecover(operationHash, v, r, s);\n  }\n\n  /**\n   * Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\n   * We collect a window of up to 10 recent sequence ids, and allow any sequence id that is not in the window and\n   * greater than the minimum element in the window.\n   * @param sequenceId to insert into array of stored ids\n   */\n  function tryInsertSequenceId(uint sequenceId) private onlySigner {\n    // Keep a pointer to the lowest value element in the window\n    uint lowestValueIndex = 0;\n    for (uint i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\n      if (recentSequenceIds[i] == sequenceId) {\n        // This sequence ID has been used before. Disallow!\n        revert();\n      }\n      if (recentSequenceIds[i] < recentSequenceIds[lowestValueIndex]) {\n        lowestValueIndex = i;\n      }\n    }\n    if (sequenceId < recentSequenceIds[lowestValueIndex]) {\n      // The sequence ID being used is lower than the lowest value in the window\n      // so we cannot accept it as it may have been used before\n      revert();\n    }\n    if (sequenceId > (recentSequenceIds[lowestValueIndex] + 10000)) {\n      // Block sequence IDs which are much higher than the lowest value\n      // This prevents people blocking the contract by using very large sequence IDs quickly\n      revert();\n    }\n    recentSequenceIds[lowestValueIndex] = sequenceId;\n  }\n\n  /**\n   * Gets the next available sequence ID for signing when using executeAndConfirm\n   * returns the sequenceId one higher than the highest currently stored\n   */\n  function getNextSequenceId() public view returns (uint) {\n    uint highestSequenceId = 0;\n    for (uint i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\n      if (recentSequenceIds[i] > highestSequenceId) {\n        highestSequenceId = recentSequenceIds[i];\n      }\n    }\n    return highestSequenceId + 1;\n  }\n}",
  "bytecode": "60606040526001805460ff19169055341561001957600080fd5b604051610e9f380380610e9f833981016040528080519091019050805160031461004257600080fd5b600081805161005592916020019061005c565b50506100ea565b8280548282559060005260206000209081019282156100b3579160200282015b828111156100b35782518254600160a060020a031916600160a060020a03919091161782556020929092019160019091019061007c565b506100bf9291506100c3565b5090565b6100e791905b808211156100bf578054600160a060020a03191681556001016100c9565b90565b610da6806100f96000396000f30060606040526004361061007f5763ffffffff60e060020a6000350416630dcd7a6c81146100f45780632079fb9a146101685780632da034091461019a57806339125215146101bf5780637df73e271461026f578063a0b7967b146102a2578063a68a76cc146102c7578063abe3219c146102da578063fc0f392d146102ed575b60003411156100f2577f6e89d517057028190560dd200cf6bf792842861353d1173761dfa362e1c133f03334600036604051600160a060020a0385168152602081018490526060604082018181529082018390526080820184848082843782019150509550505050505060405180910390a15b005b34156100ff57600080fd5b6100f260048035600160a060020a03908116916024803592604435169160643591608435919060c49060a43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061030095505050505050565b341561017357600080fd5b61017e600435610431565b604051600160a060020a03909116815260200160405180910390f35b34156101a557600080fd5b6100f2600160a060020a0360043581169060243516610459565b34156101ca57600080fd5b6100f260048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094968635966020808201359750919550606081019450604090810135860180830194503592508291601f8301819004810201905190810160405281815292919060208401838380828437509496506104d895505050505050565b341561027a57600080fd5b61028e600160a060020a0360043516610718565b604051901515815260200160405180910390f35b34156102ad57600080fd5b6102b5610776565b60405190815260200160405180910390f35b34156102d257600080fd5b61017e6107bd565b34156102e557600080fd5b61028e6107e2565b34156102f857600080fd5b6100f26107eb565b60008061030c33610718565b151561031757600080fd5b87878787876040517f455243323000000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a03968716810260058301526019820195909552929094169092026039820152604d810191909152606d810191909152608d01604051809103902091506103a0888385888861084a565b5085905080600160a060020a031663a9059cbb898960006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561040157600080fd5b6102c65a03f1151561041257600080fd5b50505060405180519050151561042757600080fd5b5050505050505050565b600080548290811061043f57fe5b600091825260209091200154600160a060020a0316905081565b600061046433610718565b151561046f57600080fd5b5081600160a060020a038116633ef133678360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156104bf57600080fd5b6102c65a03f115156104d057600080fd5b505050505050565b6000806104e433610718565b15156104ef57600080fd5b87878787876040517f455448455200000000000000000000000000000000000000000000000000000081526c01000000000000000000000000600160a060020a038716026005820152601981018590526039810184805190602001908083835b6020831061056e5780518252601f19909201916020918201910161054f565b6001836020036101000a038019825116818451161790925250505091909101938452505060208201526040908101935091505051809103902091506105b6888385888861084a565b905087600160a060020a0316878760405180828051906020019080838360005b838110156105ee5780820151838201526020016105d6565b50505050905090810190601f16801561061b5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050151561063f57600080fd5b7f59bed9ab5d78073465dd642a9e3e76dfdb7d53bcae9d09df7d0b8f5234d5a8063382848b8b8b604051600160a060020a038088168252868116602083015260408201869052841660608201526080810183905260c060a0820181815290820183818151815260200191508051906020019080838360005b838110156106cf5780820151838201526020016106b7565b50505050905090810190601f1680156106fc5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a15050505050505050565b6000805b60005481101561076b5782600160a060020a031660008281548110151561073f57fe5b600091825260209091200154600160a060020a031614156107635760019150610770565b60010161071c565b600091505b50919050565b600080805b600a8110156107b45781600282600a811061079257fe5b015411156107ac57600281600a81106107a757fe5b015491505b60010161077b565b50600101919050565b60006107c7610a44565b604051809103906000f08015156107dd57600080fd5b905090565b60015460ff1681565b6107f433610718565b15156107ff57600080fd5b6001805460ff1916811790557f0909e8f76a4fd3e970f2eaef56c0ee6dfaf8b87c5b8d3f56ffce78e825a9115733604051600160a060020a03909116815260200160405180910390a1565b60008061085786866108cf565b60015490915060ff168015610872575061087087610718565b155b1561087c57600080fd5b4284101561088957600080fd5b61089283610983565b61089b81610718565b15156108a657600080fd5b33600160a060020a031681600160a060020a031614156108c557600080fd5b9695505050505050565b60008060008084516041146108e357600080fd5b602085015192506040850151915060ff6041860151169050601b8160ff16101561090b57601b015b6001868285856040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561097057600080fd5b5050602060405103519695505050505050565b60008061098f33610718565b151561099a57600080fd5b5060009050805b600a8110156109f55782600282600a81106109b857fe5b015414156109c557600080fd5b600282600a81106109d257fe5b0154600282600a81106109e157fe5b015410156109ed578091505b6001016109a1565b600282600a8110610a0257fe5b0154831015610a1057600080fd5b600282600a8110610a1d57fe5b015461271001831115610a2f57600080fd5b82600283600a8110610a3d57fe5b0155505050565b60405161032680610a558339019056006060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556102eb8061003b6000396000f30060606040526004361061003c5763ffffffff60e060020a600035041662821de381146100db5780633ef133671461010a5780636b9f96ea1461012b575b600054600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561007057600080fd5b7f69b31548dea9b3b707b4dff357d326e3e9348b24e7a6080a218a6edeeec48f9b3334600036604051600160a060020a0385168152602081018490526060604082018181529082018390526080820184848082843782019150509550505050505060405180910390a1005b34156100e657600080fd5b6100ee61013e565b604051600160a060020a03909116815260200160405180910390f35b341561011557600080fd5b610129600160a060020a036004351661014d565b005b341561013657600080fd5b610129610284565b600054600160a060020a031681565b600080548190819033600160a060020a0390811691161461016d57600080fd5b83925030915082600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156101ca57600080fd5b6102c65a03f115156101db57600080fd5b50505060405180519150508015156101f25761027e565b60008054600160a060020a038086169263a9059cbb929091169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561025857600080fd5b6102c65a03f1151561026957600080fd5b50505060405180519050151561027e57600080fd5b50505050565b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156102bd57600080fd5b5600a165627a7a723058209a2cf7a2a794466fa3ad969b8641159fda77ab165d960506da9a4de1eb5d69bd0029a165627a7a723058206e3ac5a1fd4df7d84c4e98a943ef3b0b42863540d98c4a3171c3223484253fbc00290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000053f7b277ad149ca04f9ff3cc9c7560baff29ef7c000000000000000000000000dee96872ac8662bb07d7dd549c0c1ee34aa2dd4400000000000000000000000089f8c40b6bd047404cc693fd795ed7002602be89",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000053f7b277ad149ca04f9ff3cc9c7560baff29ef7c000000000000000000000000dee96872ac8662bb07d7dd549c0c1ee34aa2dd4400000000000000000000000089f8c40b6bd047404cc693fd795ed7002602be89"
}