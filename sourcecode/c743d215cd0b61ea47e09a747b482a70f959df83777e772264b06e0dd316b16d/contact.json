{
  "address": "0x26de40bffafe73ff4e37089b2c71e35fd02eb1a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Uulala Token",
  "contractName": "eUULATokenCoin",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-22\n*/\n\npragma solidity ^0.5.2;\n\ncontract Ownable {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract eUULATokenCoin is Ownable {\n    using SafeMath for uint256; // use SafeMath for uint256 variables\n\n    string public constant name = \"EUULA\";\n    string public constant symbol = \"EUULA\";\n    uint32 public constant decimals = 2;\n    uint public constant INITIAL_SUPPLY = 75000000000;\n    uint public totalSupply = 0;\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor () public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] < _value || balances[msg.sender].add(_value) < balances[msg.sender]) {\n            return false;\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (allowed[_from][msg.sender] < _value || balances[_from] < _value && balances[_to].add(_value) >= balances[_to]) {\n            return false;\n        }\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function transferWise(address[] memory recipients, uint256[] memory values) public {\n        require(recipients.length == values.length);\n\n        uint256 sum = 0;\n        uint256 i = 0;\n\n        for (i = 0; i < recipients.length; i++) {\n            sum = sum.add(values[i]);\n        }\n        require(sum <= balances[msg.sender]);\n\n        for (i = 0; i < recipients.length; i++) {\n            transfer(recipients[i], values[i]);\n        }\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "bytecode": "6080604052600060015534801561001557600080fd5b5060008054600160a060020a031916339081178255641176592e0060018190559082526002602052604090912055610901806100526000396000f3fe608060405234801561001057600080fd5b50600436106100ec576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100a9578063a9059cbb11610083578063a9059cbb14610271578063cdf972761461029d578063dd62ed3e146103c6578063f2fde38b146103f4576100ec565b806370a08231146102275780638da5cb5b1461024d57806395d89b41146100f1576100ec565b806306fdde03146100f1578063095ea7b31461016e57806318160ddd146101ae57806323b872dd146101c85780632ff2e9dc146101fe578063313ce56714610206575b600080fd5b6100f961041a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013357818101518382015260200161011b565b50505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019a6004803603604081101561018457600080fd5b50600160a060020a038135169060200135610451565b604080519115158252519081900360200190f35b6101b66104b8565b60408051918252519081900360200190f35b61019a600480360360608110156101de57600080fd5b50600160a060020a038135811691602081013590911690604001356104be565b6101b6610651565b61020e61065a565b6040805163ffffffff9092168252519081900360200190f35b6101b66004803603602081101561023d57600080fd5b5035600160a060020a031661065f565b61025561067a565b60408051600160a060020a039092168252519081900360200190f35b61019a6004803603604081101561028757600080fd5b50600160a060020a038135169060200135610689565b6103c4600480360360408110156102b357600080fd5b8101906020810181356401000000008111156102ce57600080fd5b8201836020820111156102e057600080fd5b8035906020019184602083028401116401000000008311171561030257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561035257600080fd5b82018360208201111561036457600080fd5b8035906020019184602083028401116401000000008311171561038657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610780945050505050565b005b6101b6600480360360408110156103dc57600080fd5b50600160a060020a038135811691602001351661083d565b6103c46004803603602081101561040a57600080fd5b5035600160a060020a0316610868565b60408051808201909152600581527f4555554c41000000000000000000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60015481565b600160a060020a03831660009081526003602090815260408083203384529091528120548211806105385750600160a060020a038416600090815260026020526040902054821180156105385750600160a060020a038316600090815260026020526040902054610535818463ffffffff6108ae16565b10155b156105455750600061064a565b600160a060020a0384166000908152600360209081526040808320338452909152902054610579908363ffffffff6108c016565b600160a060020a0385166000818152600360209081526040808320338452825280832094909455918152600290915220546105ba908363ffffffff6108c016565b600160a060020a0380861660009081526002602052604080822093909355908516815220546105ef908363ffffffff6108ae16565b600160a060020a0380851660008181526002602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060015b9392505050565b641176592e0081565b600281565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b336000908152600260205260408120548211806106c35750336000908152600260205260409020546106c1818463ffffffff6108ae16565b105b156106d0575060006104b2565b336000908152600260205260409020546106f0908363ffffffff6108c016565b3360009081526002602052604080822092909255600160a060020a03851681522054610722908363ffffffff6108ae16565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b805182511461078e57600080fd5b6000805b83518110156107cd576107c383828151811015156107ac57fe5b60209081029091010151839063ffffffff6108ae16565b9150600101610792565b336000908152600260205260409020548211156107e957600080fd5b5060005b83518110156108375761082e848281518110151561080757fe5b90602001906020020151848381518110151561081f57fe5b90602001906020020151610689565b506001016107ed565b50505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a0316331461087f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561064a57600080fd5b6000828211156108cf57600080fd5b5090039056fea165627a7a72305820d839fa63c049e5d98626a38b0f3ed88222e2e371f48d6a9ec173bb55c1c892c00029"
}