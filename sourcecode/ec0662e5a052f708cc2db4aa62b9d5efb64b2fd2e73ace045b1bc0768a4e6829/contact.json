{
  "address": "0x587c549c4113127340ac0f5e996cab7a4f35bb49",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SocialX Token",
  "contractName": "Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-11\n*/\n\npragma solidity ^0.4.17;\n\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure  returns(uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure  returns(uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure  returns(uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n}\n\ncontract ERC20 {\n    uint public totalSupply;\n\n    function balanceOf(address who) public view returns(uint);\n\n    function allowance(address owner, address spender) public view returns(uint);\n\n    function transfer(address to, uint value) public returns(bool ok);\n\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\n\n    function approve(address spender, uint value) public returns(bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\n\n/// @title Migration Agent interface\ncontract MigrationAgent {\n\n    function migrateFrom(address _from, uint256 _value) public;\n}\n\n\n// Crowdsale Smart Contract\n// This smart contract collects ETH and in return sends tokens to the Backers\ncontract Crowdsale is Pausable {\n\n    using SafeMath for uint;\n\n    struct Backer {\n        uint weiReceived; // amount of ETH contributed\n        uint tokensSent; // amount of tokens  sent  \n        bool refunded; // true if user has been refunded       \n    }\n\n    Token public token; // Token contract reference   \n    address public multisig; // Multisig contract that will receive the ETH    \n    address public team; // Address to which the team tokens will be sent   \n    address public zen; // Address to which zen team tokens will be sent\n    uint public ethReceived; // Number of ETH received\n    uint public totalTokensSent; // Number of tokens sent to ETH contributors\n    uint public startBlock; // Crowdsale start block\n    uint public endBlock; // Crowdsale end block\n    uint public maxCap; // Maximum number of tokens to sell\n    uint public minCap; // Minimum number of tokens to sell    \n    bool public crowdsaleClosed; // Is crowdsale still in progress\n    uint public refundCount;  // number of refunds\n    uint public totalRefunded; // total amount of refunds in wei\n    uint public tokenPriceWei; // tokn price in wei\n    uint public minInvestETH; // Minimum amount to invest\n    uint public presaleTokens;\n    uint public totalWhiteListed; \n    uint public claimCount;\n    uint public totalClaimed;\n    uint public numOfBlocksInMinute; // number of blocks in one minute * 100. eg. \n                                     // if one block takes 13.34 seconds, the number will be 60/13.34* 100= 449\n\n    mapping(address => Backer) public backers; //backer list\n    address[] public backersIndex; // to be able to itarate through backers for verification.  \n    mapping(address => bool) public whiteList;\n\n    // @notice to verify if action is not performed out of the campaing range\n    modifier respectTimeFrame() {\n\n        require(block.number >= startBlock && block.number <= endBlock);           \n        _;\n    }\n\n    // Events\n    event LogReceivedETH(address backer, uint amount, uint tokenAmount);\n    event LogRefundETH(address backer, uint amount);\n    event LogWhiteListed(address user, uint whiteListedNum);\n    event LogWhiteListedMultiple(uint whiteListedNum);   \n\n    // Crowdsale  {constructor}\n    // @notice fired when contract is crated. Initilizes all constant and initial variables.\n    function Crowdsale() public {\n\n        multisig = 0xE804Ad72e60503eD47d267351Bdd3441aC1ccb03; \n        team = 0x86Ab6dB9932332e3350141c1D2E343C478157d04; \n        zen = 0x3334f1fBf78e4f0CFE0f5025410326Fe0262ede9; \n        presaleTokens = 4692000e8;      //TODO: ensure that this is correct amount\n        totalTokensSent = presaleTokens;  \n        minInvestETH = 1 ether/10; // 0.1 eth\n        startBlock = 0; // ICO start block\n        endBlock = 0; // ICO end block                    \n        maxCap = 42000000e8; // takes into consideration zen team tokens and team tokens.   \n        minCap = 8442000e8;        \n        tokenPriceWei = 80000000000000;  // Price is 0.00008 eth    \n        numOfBlocksInMinute = 400;  //  TODO: updte this value before deploying. E.g. 4.00 block/per minute wold be entered as 400           \n    }\n\n     // @notice to populate website with status of the sale \n    function returnWebsiteData() external view returns(uint, uint, uint, uint, uint, uint, uint, uint, bool, bool) {\n    \n        return (startBlock, endBlock, numberOfBackers(), ethReceived, maxCap, minCap, totalTokensSent, tokenPriceWei, paused, crowdsaleClosed);\n    }\n\n    // @notice in case refunds are needed, money can be returned to the contract\n    function fundContract() external payable onlyOwner() returns (bool) {\n        return true;\n    }\n\n    function addToWhiteList(address _user) external onlyOwner() returns (bool) {\n\n        if (whiteList[_user] != true) {\n            whiteList[_user] = true;\n            totalWhiteListed++;\n            LogWhiteListed(_user, totalWhiteListed);            \n        }\n        return true;\n    }\n\n    function addToWhiteListMultiple(address[] _users) external onlyOwner()  returns (bool) {\n\n        for (uint i = 0; i < _users.length; ++i) {\n\n            if (whiteList[_users[i]] != true) {\n                whiteList[_users[i]] = true;\n                totalWhiteListed++;                          \n            }           \n        }\n        LogWhiteListedMultiple(totalWhiteListed); \n        return true;\n    }\n\n    // @notice Move funds from pre ICO sale if needed. \n    function transferPreICOFunds() external payable onlyOwner() returns (bool) {\n        ethReceived = ethReceived.add(msg.value);\n        return true;\n    }\n\n    // @notice Specify address of token contract\n    // @param _tokenAddress {address} address of the token contract\n    // @return res {bool}\n    function updateTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\n        token = _tokenAddress;\n        return true;\n    }\n\n    // {fallback function}\n    // @notice It will call internal function which handels allocation of Ether and calculates amout of tokens.\n    function () external payable {           \n        contribute(msg.sender);\n    }\n\n    // @notice It will be called by owner to start the sale    \n    function start(uint _block) external onlyOwner() {   \n\n        require(_block < (numOfBlocksInMinute * 60 * 24 * 60)/100);  // allow max 60 days for campaign\n                                                         \n        startBlock = block.number;\n        endBlock = startBlock.add(_block); \n    }\n\n    // @notice Due to changing average of block time\n    // this function will allow on adjusting duration of campaign closer to the end \n    function adjustDuration(uint _block) external onlyOwner() {\n\n        require(_block < (numOfBlocksInMinute * 60 * 24 * 80)/100); // allow for max of 80 days for campaign\n        require(_block > block.number.sub(startBlock)); // ensure that endBlock is not set in the past\n        endBlock = startBlock.add(_block); \n    }\n    \n    // @notice This function will finalize the sale.\n    // It will only execute if predetermined sale time passed or all tokens are sold.\n    function finalize() external onlyOwner() {\n\n        require(!crowdsaleClosed);        \n        // purchasing precise number of tokens might be impractical, \n        //thus subtract 1000 tokens so finalizition is possible near the end \n        require(block.number > endBlock || totalTokensSent >= maxCap - 1000); \n        require(totalTokensSent >= minCap);  // ensure that campaign was successful         \n        crowdsaleClosed = true; \n\n        if (!token.transfer(team, 45000000e8 + presaleTokens))\n            revert();\n        if (!token.transfer(zen, 3000000e8)) \n            revert();\n        token.unlock();                       \n    }\n\n    // @notice\n    // This function will allow to transfer unsold tokens to a new\n    // contract/wallet address to start new ICO in the future\n    function transferRemainingTokens(address _newAddress) external onlyOwner() returns (bool) {\n\n        require(_newAddress != address(0));\n        // 180 days after ICO ends   \n        assert(block.number > endBlock + (numOfBlocksInMinute * 60 * 24 * 180)/100);         \n        if (!token.transfer(_newAddress, token.balanceOf(this))) \n            revert(); // transfer tokens to admin account or multisig wallet\n        return true;\n    }\n\n    // @notice Failsafe drain\n    function drain() external onlyOwner() {\n        multisig.transfer(this.balance);      \n    }\n\n    // @notice it will allow contributors to get refund in case campaign failed\n    function refund()  external whenNotPaused returns (bool) {\n\n\n        require(block.number > endBlock); // ensure that campaign is over\n        require(totalTokensSent < minCap); // ensure that campaign failed\n        require(this.balance > 0);  // contract will hold 0 ether at the end of the campaign.                                  \n                                    // contract needs to be funded through fundContract() for this action\n\n        Backer storage backer = backers[msg.sender];\n\n        require(backer.weiReceived > 0);           \n        require(!backer.refunded);      \n\n        backer.refunded = true;      \n        refundCount++;\n        totalRefunded = totalRefunded + backer.weiReceived;\n\n        if (!token.burn(msg.sender, backer.tokensSent))\n            revert();\n        msg.sender.transfer(backer.weiReceived);\n        LogRefundETH(msg.sender, backer.weiReceived);\n        return true;\n    }\n   \n\n    // @notice return number of contributors\n    // @return  {uint} number of contributors\n    function numberOfBackers() public view returns(uint) {\n        return backersIndex.length;\n    }\n\n    // @notice It will be called by fallback function whenever ether is sent to it\n    // @param  _backer {address} address of beneficiary\n    // @return res {bool} true if transaction was successful\n    function contribute(address _backer) internal whenNotPaused respectTimeFrame returns(bool res) {\n\n        require(msg.value >= minInvestETH);   // stop when required minimum is not sent\n        require(whiteList[_backer]);\n        uint tokensToSend = calculateNoOfTokensToSend();\n        require(totalTokensSent.add(tokensToSend) <= maxCap);  // Ensure that max cap hasn't been reached\n           \n        Backer storage backer = backers[_backer];\n\n        if (backer.weiReceived == 0)\n            backersIndex.push(_backer);\n        \n        backer.tokensSent = backer.tokensSent.add(tokensToSend);\n        backer.weiReceived = backer.weiReceived.add(msg.value);\n        ethReceived = ethReceived.add(msg.value); // Update the total Ether recived\n        totalTokensSent = totalTokensSent.add(tokensToSend);\n\n        if (!token.transfer(_backer, tokensToSend)) \n            revert(); // Transfer SOCX tokens\n\n        multisig.transfer(msg.value);  // send money to multisignature wallet\n        LogReceivedETH(_backer, msg.value, tokensToSend); // Register event\n        return true;\n    }\n\n    // @notice This function will return number of tokens based on time intervals in the campaign\n    function calculateNoOfTokensToSend() internal constant  returns (uint) {\n\n        uint tokenAmount = msg.value.mul(1e8) / tokenPriceWei;        \n\n        if (block.number <= startBlock + (numOfBlocksInMinute * 60) / 100)  // less then one hour\n            return  tokenAmount + (tokenAmount * 50) / 100;\n        else if (block.number <= startBlock + (numOfBlocksInMinute * 60 * 24) / 100)  // less than one day\n            return  tokenAmount + (tokenAmount * 25) / 100; \n        else if (block.number <= startBlock + (numOfBlocksInMinute * 60 * 24 * 2) / 100)  // less than two days\n            return  tokenAmount + (tokenAmount * 10) / 100; \n        else if (block.number <= startBlock + (numOfBlocksInMinute * 60 * 24 * 3) / 100)  // less than three days\n            return  tokenAmount + (tokenAmount * 5) / 100;\n        else                                                                // after 3 days\n            return  tokenAmount;     \n    }\n}\n\n\n\n// The SOCX token\ncontract Token is ERC20, Ownable {\n    \n    using SafeMath for uint;\n    \n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals; // How many decimals to show.\n    string public version = \"v0.1\";\n    uint public initialSupply;\n    uint public totalSupply;\n    bool public locked;           \n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    address public migrationMaster;\n    address public migrationAgent;\n    address public crowdSaleAddress;\n    uint256 public totalMigrated;\n\n    // Lock transfer for contributors during the ICO \n    modifier onlyUnlocked() {\n        if (msg.sender != crowdSaleAddress && locked) \n            revert();\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        if (msg.sender != owner && msg.sender != crowdSaleAddress) \n            revert();\n        _;\n    }\n\n    // The SOCX Token created with the time at which the crowdsale ends\n    function Token(address _crowdSaleAddress, address _migrationMaster) public {\n        // Lock the transfCrowdsaleer function during the crowdsale\n        locked = true; // Lock the transfer of tokens during the crowdsale\n        initialSupply = 90000000e8;\n        totalSupply = initialSupply;\n        name = \"SocialX\"; // Set the name for display purposes\n        symbol = \"SOCX\"; // Set the symbol for display purposes\n        decimals = 8; // Amount of decimals for display purposes\n        crowdSaleAddress = _crowdSaleAddress;              \n        balances[crowdSaleAddress] = totalSupply;\n        migrationMaster = _migrationMaster;\n    }\n\n    function unlock() public onlyAuthorized {\n        locked = false;\n    }\n\n    function lock() public onlyAuthorized {\n        locked = true;\n    }\n\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n\n    // Token migration support:\n\n    /// @notice Migrate tokens to the new token contract.\n    /// @dev Required state: Operational Migration\n    /// @param _value The amount of token to be migrated\n    function migrate(uint256 _value) external onlyUnlocked() {\n        // Abort if not in Operational Migration state.\n        \n        if (migrationAgent == 0) \n            revert();\n        \n        // Validate input value.\n        if (_value == 0) \n            revert();\n        if (_value > balances[msg.sender]) \n            revert();\n\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        totalMigrated += _value;\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n        Migrate(msg.sender, migrationAgent, _value);\n    }\n\n    /// @notice Set address of migration target contract and enable migration\n    /// process.\n    /// @dev Required state: Operational Normal\n    /// @dev State transition: -> Operational Migration\n    /// @param _agent The address of the MigrationAgent contract\n    function setMigrationAgent(address _agent) external onlyUnlocked() {\n        // Abort if not in Operational Normal state.\n        \n        require(migrationAgent == 0);\n        require(msg.sender == migrationMaster);\n        migrationAgent = _agent;\n    }\n\n    function resetCrowdSaleAddress(address _newCrowdSaleAddress) external onlyAuthorized() {\n        crowdSaleAddress = _newCrowdSaleAddress;\n    }\n    \n    function setMigrationMaster(address _master) external {       \n        require(msg.sender == migrationMaster);\n        require(_master != 0);\n        migrationMaster = _master;\n    }\n\n   // @notice burn tokens in case campaign failed\n    // @param _member {address} of member\n    // @param _value {uint} amount of tokens to burn\n    // @return  {bool} true if successful\n    function burn( address _member, uint256 _value) public onlyAuthorized returns(bool) {\n        balances[_member] = balances[_member].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Transfer(_member, 0x0, _value);\n        return true;\n    }\n\n    // @notice transfer tokens to given address \n    // @param _to {address} address or recipient\n    // @param _value {uint} amount to transfer\n    // @return  {bool} true if successful  \n    function transfer(address _to, uint _value) public onlyUnlocked returns(bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // @notice transfer tokens from given address to another address\n    // @param _from {address} from whom tokens are transferred \n    // @param _to {address} to whom tokens are transferred\n    // @parm _value {uint} amount of tokens to transfer\n    // @return  {bool} true if successful   \n    function transferFrom(address _from, address _to, uint256 _value) public onlyUnlocked returns(bool success) {\n        require(balances[_from] >= _value); // Check if the sender has enough                            \n        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal        \n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // @notice to query balance of account\n    // @return _owner {address} address of user to query balance \n    function balanceOf(address _owner) public view returns(uint balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // @notice to query of allowance of one user to the other\n    // @param _owner {address} of the owner of the account\n    // @param _spender {address} of the spender of the account\n    // @return remaining {uint} amount of remaining allowance\n    function allowance(address _owner, address _spender) public view returns(uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMigrationMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCrowdSaleAddress\",\"type\":\"address\"}],\"name\":\"resetCrowdSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdSaleAddress\",\"type\":\"address\"},{\"name\":\"_migrationMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600481526020017f76302e31000000000000000000000000000000000000000000000000000000008152506005908051906020019062000051929190620002a1565b5034156200005e57600080fd5b604051604080620026eb8339810160405280805190602001909190805190602001909190505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860006101000a81548160ff021916908315150217905550661ff973cafa80006006819055506006546007819055506040805190810160405280600781526020017f536f6369616c58000000000000000000000000000000000000000000000000008152506002908051906020019062000144929190620002a1565b506040805190810160405280600481526020017f534f4358000000000000000000000000000000000000000000000000000000008152506003908051906020019062000192929190620002a1565b506008600460006101000a81548160ff021916908360ff16021790555081600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060075460096000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000350565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e457805160ff191683800117855562000315565b8280016001018555821562000315579182015b8281111562000314578251825591602001919060010190620002f7565b5b50905062000324919062000328565b5090565b6200034d91905b80821115620003495760008160009055506001016200032f565b5090565b90565b61238b80620003606000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630184fc351461016457806306fdde03146101b9578063095ea7b31461024757806318160ddd146102a157806323b872dd146102ca57806326316e5814610343578063313ce5671461037c578063378dc3dc146103ab578063454b0608146103d457806354fd4d50146103f7578063637461131461048557806366188463146104be578063676d2e621461051857806370a082311461056d57806375e2ff65146105ba5780638328dbcd146105f35780638da5cb5b1461064857806395a0f5eb1461069d57806395d89b41146106c65780639dc29fac14610754578063a69df4b5146107ae578063a9059cbb146107c3578063cf3090121461081d578063d73dd6231461084a578063dd62ed3e146108a4578063f2fde38b14610910578063f83d08ba14610949575b600080fd5b341561016f57600080fd5b61017761095e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101c457600080fd5b6101cc610984565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020c5780820151818401526020810190506101f1565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025257600080fd5b610287600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a22565b604051808215151515815260200191505060405180910390f35b34156102ac57600080fd5b6102b4610b14565b6040518082815260200191505060405180910390f35b34156102d557600080fd5b610329600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b1a565b604051808215151515815260200191505060405180910390f35b341561034e57600080fd5b61037a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f12565b005b341561038757600080fd5b61038f610fd8565b604051808260ff1660ff16815260200191505060405180910390f35b34156103b657600080fd5b6103be610feb565b6040518082815260200191505060405180910390f35b34156103df57600080fd5b6103f56004808035906020019091905050610ff1565b005b341561040257600080fd5b61040a6112d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561044a57808201518184015260208101905061042f565b50505050905090810190601f1680156104775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049057600080fd5b6104bc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611372565b005b34156104c957600080fd5b6104fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061146c565b604051808215151515815260200191505060405180910390f35b341561052357600080fd5b61052b6116fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057857600080fd5b6105a4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611723565b6040518082815260200191505060405180910390f35b34156105c557600080fd5b6105f1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061176c565b005b34156105fe57600080fd5b6106066118c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561065357600080fd5b61065b6118ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106a857600080fd5b6106b0611913565b6040518082815260200191505060405180910390f35b34156106d157600080fd5b6106d9611919565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107195780820151818401526020810190506106fe565b50505050905090810190601f1680156107465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561075f57600080fd5b610794600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119b7565b604051808215151515815260200191505060405180910390f35b34156107b957600080fd5b6107c1611b79565b005b34156107ce57600080fd5b610803600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c4c565b604051808215151515815260200191505060405180910390f35b341561082857600080fd5b610830611e5b565b604051808215151515815260200191505060405180910390f35b341561085557600080fd5b61088a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611e6e565b604051808215151515815260200191505060405180910390f35b34156108af57600080fd5b6108fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061206a565b6040518082815260200191505060405180910390f35b341561091b57600080fd5b610947600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506120f1565b005b341561095457600080fd5b61095c612249565b005b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b505050505081565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b865750600860009054906101000a900460ff165b15610b9057600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610bde57600080fd5b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c6957600080fd5b610cbb82600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461231c90919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d5082600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233590919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e2282600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461231c90919063ffffffff16565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6e57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515610f9457600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900460ff1681565b60065481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561105b5750600860009054906101000a900460ff165b1561106557600080fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110ab57600080fd5b60008114156110b957600080fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561110557600080fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508060076000828254039250508190555080600e60008282540192505081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a3130e333836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561123657600080fd5b6102c65a03f1151561124757600080fd5b505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a836040518082815260200191505060405180910390a350565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561141e5750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561142857600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561157d576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611611565b611590838261231c90919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156117d65750600860009054906101000a900460ff165b156117e057600080fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561182757600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188357600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119af5780601f10611984576101008083540402835291602001916119af565b820191906000526020600020905b81548152906001019060200180831161199257829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611a655750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611a6f57600080fd5b611ac182600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461231c90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b198260075461231c90919063ffffffff16565b60078190555060008373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611c255750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611c2f57600080fd5b6000600860006101000a81548160ff021916908315150217905550565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611cb85750600860009054906101000a900460ff165b15611cc257600080fd5b611d1482600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461231c90919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611da982600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233590919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600860009054906101000a900460ff1681565b6000611eff82600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233590919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561214d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561218957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156122f55750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156122ff57600080fd5b6001600860006101000a81548160ff021916908315150217905550565b600082821115151561232a57fe5b818303905092915050565b600080828401905083811015801561234d5750828110155b151561235557fe5b80915050929150505600a165627a7a72305820239d0bc09be53a3fe74b7bcd6936352aa95102774eb91efab802cbb3836139790029000000000000000000000000bd59ed7c40f4df71d4638ea192411edc2c925a1b000000000000000000000000ca764d267f93b74bfb50dad271fab9f797c77656",
  "constructorArguments": "000000000000000000000000bd59ed7c40f4df71d4638ea192411edc2c925a1b000000000000000000000000ca764d267f93b74bfb50dad271fab9f797c77656"
}