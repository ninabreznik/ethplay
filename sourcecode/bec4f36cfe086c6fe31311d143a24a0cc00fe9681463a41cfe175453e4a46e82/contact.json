{
  "address": "0xf6676db7ff69dac982512ef752594fb86b4fa727",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WWGPreLaunch",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-14\n*/\n\npragma solidity ^0.4.25;\n\ncontract WWGPreLaunch {\n    \n    /**\n     * \n     * WORLD WAR GOO (BETA LAUNCHING SOONISH)\n     * \n     * PRELAUNCH EVENT CONTRACT FOR LIMITED CLANS & PREMIUM FACTORIES!\n     *\n     * FOR MORE DETAILS VISIT: \n     * \n     * https://ethergoo.io\n     * https://discord.gg/ajsz8tn\n     * \n     */\n    \n    uint256 constant SUPPORTER_PACK_PRICE = 0.1 ether;\n    uint256 constant CRYPTO_CLAN_PRICE = 1 ether;\n    uint256 constant PREMIUM_FACTORY_PRICE = 0.5 ether;\n    uint256 constant GAS_LIMIT = 0.05 szabo; // 50 gwei\n    \n    uint256 public startTime = 1544832000; // Friday evening (00:00 UTC)\n    \n    uint256 clanIdStart; // Can release in waves\n    uint256 clanIdEnd;\n    uint256 factoryIdStart;\n    uint256 factoryIdEnd;\n    \n    address owner;\n    address holdee;\n    \n    mapping(address => bool) public supporters; // Public to grant access to beta & lootcrate etc.\n    mapping(uint256 => address) public factoryOwner; // Public to credit once minigame launched.\n    mapping(address => bool) private boughtFactory; // Limit 1 per player\n\n    WWGClanCoupon clanCoupons = WWGClanCoupon(0xe9fe4e530ebae235877289bd978f207ae0c8bb25); // Redeemable for clan on launch\n    \n    constructor() public {\n        owner = msg.sender;\n        holdee = address(0xf6fF7aD69aF2F8655Ff1863BEc350093880e03E7);\n    }\n    \n    function buySupporterPack() payable external {\n        require(msg.value >= SUPPORTER_PACK_PRICE);\n        require(now >= startTime);\n        require(!supporters[msg.sender]); // Once only\n        \n        supporters[msg.sender] = true;\n        owner.transfer(SUPPORTER_PACK_PRICE);\n        \n        // Refund extra sent\n        if (msg.value > SUPPORTER_PACK_PRICE) {\n            msg.sender.transfer(msg.value - SUPPORTER_PACK_PRICE);\n        }\n    }\n    \n    function buyCryptoClan(uint256 clanId) payable external {\n        require(msg.value >= CRYPTO_CLAN_PRICE);\n        require(tx.gasprice <= GAS_LIMIT);\n        require(msg.sender == tx.origin);\n        require(now >= startTime);\n        require(validClanId(clanId));\n       \n        clanCoupons.mintClan(clanId, msg.sender);\n        holdee.transfer(CRYPTO_CLAN_PRICE);\n        \n        // Refund extra sent\n        if (msg.value > CRYPTO_CLAN_PRICE) {\n            msg.sender.transfer(msg.value - CRYPTO_CLAN_PRICE);\n        }\n    }\n    \n    function buyPremiumFactory(uint256 factoryId) payable external {\n        require(msg.value >= PREMIUM_FACTORY_PRICE);\n        require(tx.gasprice <= GAS_LIMIT);\n        require(msg.sender == tx.origin);\n        require(now >= startTime);\n        require(factoryOwner[factoryId] == address(0));\n        require(!boughtFactory[msg.sender]);\n        require(validFactoryId(factoryId));\n        \n        factoryOwner[factoryId] = msg.sender;\n        boughtFactory[msg.sender] = true;\n        holdee.transfer(PREMIUM_FACTORY_PRICE);\n        \n         // Refund extra sent\n        if (msg.value > PREMIUM_FACTORY_PRICE) {\n            msg.sender.transfer(msg.value - PREMIUM_FACTORY_PRICE);\n        }\n    }\n    \n    function validClanId(uint256 id) private view returns (bool) {\n        return (id > 0 && clanIdStart <= id && id <= clanIdEnd);\n    }\n    \n    function validFactoryId(uint256 id) private view returns (bool) {\n        return (id > 0 && factoryIdStart <= id && id <= factoryIdEnd);\n    }\n    \n    function getClanOwners() public view returns (address[]) {\n        if (clanIdEnd - clanIdStart == 0) {\n            return;\n        }\n        \n        uint256 size = 1 + clanIdEnd - clanIdStart;\n        address[] memory clanOwners = new address[](size);\n\n        uint256 clanId = clanIdStart;\n        for (uint256 i = 0; i < size; i++) {\n            clanOwners[i] = clanCoupons.ownerOf(clanId);\n            clanId++;\n        }\n        return clanOwners;\n    }\n    \n    function getFactoryOwners() public view returns (address[]) {\n        if (factoryIdEnd - factoryIdStart == 0) {\n            return;\n        }\n        \n        uint256 size = 1 + factoryIdEnd - factoryIdStart;\n        address[] memory factoryOwners = new address[](size);\n\n        uint256 factoryId = factoryIdStart;\n        for (uint256 i = 0; i < size; i++) {\n            factoryOwners[i] = address(factoryOwner[factoryId]);\n            factoryId++;\n        }\n        return factoryOwners;\n    }\n    \n    // Unlock the clans/factories, ready for timer\n    function setValidIds(uint256 clanStart, uint256 clanEnd, uint256 factoryStart, uint256 factoryEnd) external {\n        require(msg.sender == owner);\n        clanIdStart = clanStart;\n        clanIdEnd = clanEnd;\n        factoryIdStart = factoryStart;\n        factoryIdEnd = factoryEnd;\n    }\n\n    // Just incase\n    function delay(uint256 newTime) external {\n        require(msg.sender == owner);\n        require(newTime >= startTime);\n        startTime = newTime;\n    }\n}\n\ninterface WWGClanCoupon {\n    function mintClan(uint256 clanId, address clanOwner) external;\n    function ownerOf(uint256 clanId) external view returns (address);\n}",
  "bytecode": "6080604052635c144400600055600a8054600160a060020a03191673e9fe4e530ebae235877289bd978f207ae0c8bb2517905534801561003e57600080fd5b5060058054600160a060020a031990811633179091556006805490911673f6ff7ad69af2f8655ff1863bec350093880e03e717905561089b806100826000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306867e0181146100a8578063199197dc146100cb57806325cd653e146100ff578063647c75e21461010a57806372fe92be1461013f57806378e97925146101475780638e4279921461016e578063b3a86b2b146101d3578063c092f7bf146101de578063f330ec32146101f3575b600080fd5b3480156100b457600080fd5b506100c960043560243560443560643561020b565b005b3480156100d757600080fd5b506100e3600435610236565b60408051600160a060020a039092168252519081900360200190f35b6100c9600435610251565b34801561011657600080fd5b5061012b600160a060020a03600435166103b4565b604080519115158252519081900360200190f35b6100c96103c9565b34801561015357600080fd5b5061015c6104aa565b60408051918252519081900360200190f35b34801561017a57600080fd5b506101836104b0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101bf5781810151838201526020016101a7565b505050509050019250505060405180910390f35b6100c960043561056f565b3480156101ea57600080fd5b506101836106ce565b3480156101ff57600080fd5b506100c96004356107fa565b600554600160a060020a0316331461022257600080fd5b600193909355600291909155600355600455565b600860205260009081526040902054600160a060020a031681565b6706f05b59d3b2000034101561026657600080fd5b640ba43b74003a111561027857600080fd5b33321461028457600080fd5b60005442101561029357600080fd5b600081815260086020526040902054600160a060020a0316156102b557600080fd5b3360009081526009602052604090205460ff16156102d257600080fd5b6102db81610825565b15156102e657600080fd5b6000818152600860209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19163390811790915583526009909152808220805460ff191660011790556006549051600160a060020a039190911691906706f05b59d3b200009082818181858883f19350505050158015610367573d6000803e3d6000fd5b506706f05b59d3b200003411156103b15760405133906706f05b59d3b1ffff19340180156108fc02916000818181858888f193505050501580156103af573d6000803e3d6000fd5b505b50565b60076020526000908152604090205460ff1681565b67016345785d8a00003410156103de57600080fd5b6000544210156103ed57600080fd5b3360009081526007602052604090205460ff161561040a57600080fd5b33600090815260076020526040808220805460ff191660011790556005549051600160a060020a0391909116919067016345785d8a00009082818181858883f19350505050158015610460573d6000803e3d6000fd5b5067016345785d8a00003411156104a857604051339067016345785d89ffff19340180156108fc02916000818181858888f193505050501580156103b1573d6000803e3d6000fd5b565b60005481565b60606000606060008060035460045403600014156104cd57610568565b60035460045460010103935083604051908082528060200260200182016040528015610503578160200160208202803883390190505b5092506003549150600090505b83811015610564576000828152600860205260409020548351600160a060020a039091169084908390811061054157fe5b600160a060020a0390921660209283029091019091015260019182019101610510565b8294505b5050505090565b670de0b6b3a764000034101561058457600080fd5b640ba43b74003a111561059657600080fd5b3332146105a257600080fd5b6000544210156105b157600080fd5b6105ba8161084c565b15156105c557600080fd5b600a54604080517f12c5a0e0000000000000000000000000000000000000000000000000000000008152600481018490523360248201529051600160a060020a03909216916312c5a0e09160448082019260009290919082900301818387803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b5050600654604051600160a060020a03909116925060009150670de0b6b3a76400009082818181858883f19350505050158015610686573d6000803e3d6000fd5b50670de0b6b3a76400003411156103b1576040513390670de0b6b3a763ffff19340180156108fc02916000818181858888f193505050501580156103af573d6000803e3d6000fd5b60606000606060008060015460025403600014156106eb57610568565b60015460025460010103935083604051908082528060200260200182016040528015610721578160200160208202803883390190505b5092506001549150600090505b8381101561056457600a54604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d60208110156107c757600080fd5b505183518490839081106107d757fe5b600160a060020a039092166020928302909101909101526001918201910161072e565b600554600160a060020a0316331461081157600080fd5b60005481101561082057600080fd5b600055565b6000808211801561083857508160035411155b801561084657506004548211155b92915050565b6000808211801561085f57508160015411155b80156108465750506002541015905600a165627a7a72305820f61eac6d9372451019ed99f6bea09bcc27edc4730bbc180707ebd818652dd2e60029"
}