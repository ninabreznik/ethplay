{
  "address": "0x0ab2c9e20aa31fd3a3728a86f2526cca06a2b76d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RussianRoulette",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.25;\n\n\n/** \nRussian Roulette: the fair game for ether on smart contract.\n\nYou and 4 other people place their bets. Placing\nthe bet you load a cartridge into the revolver cylinder -\ncurrently unknown whether it is blank or live.\n\nThe cylinder revolves, the revolver shoots players one\nby one and the unlucky one who gets live cartridge gets killed,\nothers win 120% of their bets.\n\nStill the unlucky one has a chance for a jackpot.\n\nThe game uses fair random number generator based on \nfuture block, so nobody, nor players nor developers can guess its results.\n\nJoin the game and win: https://multi.today\n*/\n\n\nlibrary Random {\n    struct Data {\n        uint blockNumber;\n        bytes32 hash;\n    }\n\n    function random(Data memory d, uint max) internal view returns (uint) {\n        if(d.hash == 0){\n            //Use simplified entropy\n            d.hash = keccak256(abi.encodePacked(now, block.difficulty, block.number, blockhash(block.number - 1)));\n        }else{\n            //Use entropy based on blockhash at which transaction has been confirmed\n            d.hash = keccak256(abi.encodePacked(d.hash));\n        }\n\n        return uint(d.hash)%max;\n    }\n\n    function init(Data memory d, uint blockNumber) internal view {\n        if(blockNumber != d.blockNumber){\n            //We have Random for different block. So we must reinit it\n            //If, in the unlikely case, the block is too far away, then the blockhash\n            //will return 0 and we will use simplified entropy.\n            //It is highly unlikely because nor players, nor administration are interested in it\n            d.hash = blockhash(blockNumber);\n            d.blockNumber = blockNumber;\n        }\n    }\n}\n\n\nlibrary Cylinder {\n    using Random for Random.Data;\n\n    uint constant CYLINDER_CAPACITY = 5;\n    uint constant MULTIPLIER_PERCENT = 120;\n    uint constant WITHDRAW_PERCENT = 99;\n    uint constant JACKPOT_PERCENT = 2;\n    uint constant SERVICE_PERCENT = 1;\n    uint constant PROMO_PERCENT = 1;\n\n    //Jackpot chances - once in a number of games\n    uint constant HALF_JACKPOT_CHANCE = 100;\n    uint constant FULL_JACKPOT_CHANCE = 1000;\n\n    address constant SERVICE = 0xDb058D036768Cfa9a94963f99161e3c94aD6f5dA;\n    address constant PROMO = 0xdA149b17C154e964456553C749B7B4998c152c9E;\n\n    //The deposit structure holds all the info about the deposit made\n    struct Deposit {\n        address depositor; //The depositor address\n        uint64 timeAt; //When the deposit was made\n    }\n\n    //The result of the game. Always stored at height%CYLINDER_CAPACITY index\n    struct GameResult{\n        uint48 timeAt;  //Time of finalization\n        uint48 blockAt;  //Block number of finalization\n        uint48 height;  //Height of the cylinder slots\n        uint8 unlucky;  //index of the unlucky one in slots relative to height\n        uint96 jackpot; //The jackpot won (if not 0)\n        bool full;      //Full jackpot won\n    }\n\n    struct Data{\n        uint dep;\n        Deposit[] slots;\n        GameResult[] results;\n        uint currentCylinderHeight;\n        uint jackpot;\n    }\n\n    function checkPercentConsistency() pure internal {\n        //All the percent should be consistent with each other\n        assert(100 * CYLINDER_CAPACITY == MULTIPLIER_PERCENT * (CYLINDER_CAPACITY-1) + (JACKPOT_PERCENT + SERVICE_PERCENT + PROMO_PERCENT)*CYLINDER_CAPACITY);\n        assert(WITHDRAW_PERCENT <= 100);\n    }\n\n    function addDep(Cylinder.Data storage c, address depositor) internal returns (bool){\n        c.slots.push(Deposit(depositor, uint64(now)));\n        if(c.slots.length % CYLINDER_CAPACITY == 0) {\n            //Indicate that we need to put the game to the list of ready to finish games\n            c.currentCylinderHeight += CYLINDER_CAPACITY;\n            return true; //The game should be finished\n        }else{\n            return false; //The game continues\n        }\n    }\n\n    function finish(Cylinder.Data storage c, uint height, Random.Data memory r) internal {\n        GameResult memory gr = computeGameResult(c, height, r);\n\n        uint dep = c.dep;\n        uint unlucky = gr.unlucky; //The loser index\n        uint reward = dep*MULTIPLIER_PERCENT/100;\n        uint length = height + CYLINDER_CAPACITY;\n\n        uint total = dep*CYLINDER_CAPACITY;\n        uint jackAmount = c.jackpot;\n        uint jackWon = gr.jackpot;\n\n        for(uint i=height; i<length; ++i){\n            if(i-height != unlucky){ //Winners\n                Deposit storage d = c.slots[i];\n                if(!d.depositor.send(reward)) //If we can not send the money (it may be malicious contract)\n                    jackAmount += reward;     //add it to jackpot\n            }\n        }\n\n        if(jackWon > 0){\n            //Jackpot won!!! Send it to (un)lucky one\n            Deposit storage win = c.slots[height + unlucky];\n            if(win.depositor.send(jackWon))\n                jackAmount -= jackWon; //jackWon is always <= jackAmount\n        }\n\n        c.jackpot = jackAmount + total*JACKPOT_PERCENT/100;\n\n        c.results.push(gr);\n\n        SERVICE.transfer(total*(SERVICE_PERCENT)/100);\n        PROMO.transfer(total*PROMO_PERCENT/100);\n    }\n\n    function computeGameResult(Cylinder.Data storage c, uint height, Random.Data memory r) internal view returns (GameResult memory) {\n        assert(height + CYLINDER_CAPACITY <= c.currentCylinderHeight);\n\n        uint unlucky = r.random(CYLINDER_CAPACITY); //The loser index\n        uint jackAmount = c.jackpot;\n        uint jackWon = 0;\n        bool fullJack = false;\n\n        uint jpchance = r.random(FULL_JACKPOT_CHANCE);\n        if(jpchance % HALF_JACKPOT_CHANCE == 0){\n            //Jackpot won!!!\n            if(jpchance == 0){\n                //Once in FULL_JACKPOT_CHANCE the unlucky one gets full jackpot\n                fullJack = true;\n                jackWon = jackAmount;\n            }else{\n                //Once in HALF_JACKPOT_CHANCE the unlucky one gets half of jackpot\n                jackWon = jackAmount/2;\n            }\n            //jackWon is always not more than c.jackpot\n        }\n\n        return GameResult(uint48(now), uint48(block.number), uint48(height), uint8(unlucky), uint96(jackWon), fullJack);\n    }\n\n    function withdraw(Cylinder.Data storage c, address addr) internal returns (bool){\n        uint length = c.slots.length;\n        uint dep = c.dep;\n        for(uint i=c.currentCylinderHeight; i<length; ++i){\n            Deposit storage deposit = c.slots[i];\n            if(deposit.depositor == addr){ //Return dep\n                uint ret = dep*WITHDRAW_PERCENT/100;\n                deposit.depositor.transfer(msg.value + ret);\n                SERVICE.transfer(dep - ret);\n\n                --length; //We need only length-1 further on\n                if(i < length){\n                    c.slots[i] = c.slots[length];\n                }\n\n                c.slots.length = length;\n                return true;\n            }\n        }\n    }\n\n    function getCylinder(Cylinder.Data storage c, uint idx) internal view returns (uint96 dep, uint64 index, address[] deps, uint8 unlucky, int96 jackpot, uint64 lastDepTime){\n        dep = uint96(c.dep);\n        index = uint64(idx);\n        require(idx <= c.slots.length/CYLINDER_CAPACITY, \"Wrong cylinder index\");\n\n        if(uint(index) >= c.results.length){\n            uint size = c.slots.length - index*CYLINDER_CAPACITY;\n            if(size > CYLINDER_CAPACITY)\n                size = CYLINDER_CAPACITY;\n\n            deps = new address[](size);\n        }else{\n            deps = new address[](CYLINDER_CAPACITY);\n\n            Cylinder.GameResult storage gr = c.results[index];\n            unlucky = gr.unlucky;\n            jackpot = gr.full ? -int96(gr.jackpot) : int96(gr.jackpot);\n            lastDepTime = gr.timeAt;\n        }\n\n        for(uint i=0; i<deps.length; ++i){\n            Deposit storage d = c.slots[index*CYLINDER_CAPACITY + i];\n            deps[i] = d.depositor;\n            if(lastDepTime < uint(d.timeAt))\n                lastDepTime = d.timeAt;\n        }\n    }\n\n    function getCapacity() internal pure returns (uint) {\n        return CYLINDER_CAPACITY;\n    }\n}\n\n\ncontract RussianRoulette {\n    using Cylinder for Cylinder.Data;\n    using Random for Random.Data;\n\n    uint[14] public BETS = [\n        0.01 ether,\n        0.05 ether,\n        0.1  ether,\n        0.2  ether,\n        0.3  ether,\n        0.5  ether,\n        0.7  ether,\n        1    ether,\n        1.5  ether,\n        2    ether,\n        3    ether,\n        5    ether,\n        7    ether,\n        10   ether\n    ];\n\n    struct GameToFinish{\n        uint8 game;\n        uint64 blockNumber;\n        uint64 height;\n    }\n\n    Cylinder.Data[] private games;\n    GameToFinish[] private gtf; //Games that are waiting to be finished\n    uint private gtfStart = 0; //Starting index of games to finish queue\n\n    constructor() public {\n        Cylinder.checkPercentConsistency();\n        //Initialize games for different bets\n        games.length = BETS.length;\n    }\n\n    function() public payable {\n        //first choose the game on the basis of the bets table\n        for(int i=int(BETS.length)-1; i>=0; i--){\n            uint bet = BETS[uint(i)];\n            if(msg.value >= bet){\n                //Finish the games if there are any waiting\n                finishGames();\n\n                if(msg.value > bet) //return change\n                    msg.sender.transfer(msg.value - bet);\n\n                Cylinder.Data storage game = games[uint(i)];\n                if(game.dep == 0){ //Initialize game data on first deposit\n                    game.dep = bet;\n                }\n\n                uint height = game.currentCylinderHeight;\n                if(game.addDep(msg.sender)){\n                    //The game is ready to be finished\n                    //Put it to finish queue\n                    gtf.push(GameToFinish(uint8(i), uint64(block.number), uint64(height)));\n                }\n                return;\n            }\n        }\n\n        if(msg.value == 0.00000112 ether){\n            withdraw();\n            return;\n        }\n\n        if(msg.value == 0){\n            finishGames();\n            return;\n        }\n\n        revert(\"Deposit is too small\");\n    }\n\n    function withdrawFrom(uint game) public {\n        require(game < BETS.length);\n        require(games[game].withdraw(msg.sender), \"You are not betting in this game\");\n\n        //Finish the games if there are any waiting\n        finishGames();\n    }\n\n    function withdraw() public {\n        uint length = BETS.length;\n        for(uint i=0; i<length; ++i){\n            if(games[i].withdraw(msg.sender)){\n                //Finish the games if there are any waiting\n                finishGames();\n                return;\n            }\n        }\n\n        revert(\"You are not betting in any game\");\n    }\n\n    function finishGames() private {\n        Random.Data memory r;\n        uint length = gtf.length;\n        for(uint i=gtfStart; i<length; ++i){\n            GameToFinish memory g = gtf[i];\n            uint bn = g.blockNumber;\n            if(bn == block.number)\n                break; //We can not finish the game in the same block\n\n            r.init(bn);\n\n            Cylinder.Data storage c = games[g.game];\n            c.finish(g.height, r);\n\n            delete gtf[i];\n        }\n\n        if(i > gtfStart)\n            gtfStart = i;\n    }\n\n    function getGameState(uint game) public view returns (uint64 blockNumber, bytes32 blockHash, uint96 dep, uint64 slotsCount, uint64 resultsCount, uint64 currentCylinderIndex, uint96 jackpot){\n        Cylinder.Data storage c = games[game];\n        dep = uint96(c.dep);\n        slotsCount = uint64(c.slots.length);\n        resultsCount = uint64(c.results.length);\n        currentCylinderIndex = uint64(c.currentCylinderHeight/Cylinder.getCapacity());\n        jackpot = uint96(c.jackpot);\n        blockNumber = uint64(block.number-1);\n        blockHash = blockhash(block.number-1);\n    }\n\n    function getGameStates() public view returns (uint64 blockNumber, bytes32 blockHash, uint96[] dep, uint64[] slotsCount, uint64[] resultsCount, uint64[] currentCylinderIndex, uint96[] jackpot){\n        dep = new uint96[](BETS.length);\n        slotsCount = new uint64[](BETS.length);\n        resultsCount = new uint64[](BETS.length);\n        currentCylinderIndex = new uint64[](BETS.length);\n        jackpot = new uint96[](BETS.length);\n\n        for(uint i=0; i<BETS.length; ++i){\n            (blockNumber, blockHash, dep[i], slotsCount[i], resultsCount[i], currentCylinderIndex[i], jackpot[i]) = getGameState(i);\n        }\n    }\n\n    function getCylinder(uint game, int _idx) public view returns (uint64 blockNumber, bytes32 blockHash, uint96 dep, uint64 index, address[] deps, uint8 unlucky, int96 jackpot, uint64 lastDepTime, uint8 status){\n        Cylinder.Data storage c = games[game];\n        index = uint64(_idx < 0 ? c.slots.length/Cylinder.getCapacity() : uint(_idx));\n\n        (dep, index, deps, unlucky, jackpot, lastDepTime) = c.getCylinder(index);\n        blockNumber = uint64(block.number-1);\n        blockHash = blockhash(block.number-1);\n        //status = 0; //The game is running\n\n        uint8 _unlucky;\n        int96 _jackpot;\n\n        //We will try to get preliminary results of the ready to be finished game\n        (_unlucky, _jackpot, status) = _getGameResults(game, index);\n        if(status == 2){\n            unlucky = _unlucky;\n            jackpot = _jackpot;\n        }\n    }\n\n    function _getGameResults(uint game, uint index) private view returns (uint8 unlucky, int96 jackpot, uint8 status){\n        Cylinder.Data storage c = games[game];\n        if(index < c.results.length){\n            status = 3; //Finished and has finalized results\n        }else if(c.slots.length >= (index+1)*Cylinder.getCapacity()){\n            status = 1; //Closed, but no results yet\n            //This game needs finishing, so try to find out who wins\n            Random.Data memory r;\n            uint length = gtf.length;\n            for(uint i=gtfStart; i<length; ++i){\n                GameToFinish memory g = gtf[i];\n                uint bn = g.blockNumber;\n                if(blockhash(bn) == 0)\n                    break; //We either on the same block or too far from this block\n\n                r.init(bn);\n\n                Cylinder.GameResult memory gr = games[g.game].computeGameResult(g.height, r);\n\n                if(uint(g.height) == index*Cylinder.getCapacity() && uint(g.game) == game){\n                    //We have found our game so just fill the results\n                    unlucky = gr.unlucky;\n                    jackpot = gr.full ? -int96(gr.jackpot) : int96(gr.jackpot); //The jackpot amount may be inaccurate\n                    status = 2; //Closed and has preliminary results\n                    break;\n                }\n            }\n        }\n    }\n\n    function getCylinders(uint game, uint idxFrom, uint idxTo) public view returns (uint blockNumber, bytes32 blockHash, uint96 dep, uint64[] index, address[] deps, uint8[] unlucky, int96[] jackpot, uint64[] lastDepTime, uint8[] status){\n        Cylinder.Data storage c = games[game];\n        uint lastCylinderIndex = c.slots.length/Cylinder.getCapacity();\n        blockNumber = block.number-1;\n        blockHash = blockhash(block.number-1);\n        dep = uint96(c.dep);\n\n        require(idxFrom <= lastCylinderIndex && idxFrom <= idxTo, \"Wrong cylinder index range\");\n\n        if(idxTo > lastCylinderIndex)\n            idxTo = lastCylinderIndex;\n\n        uint count = idxTo - idxFrom + 1;\n\n        index = new uint64[](count);\n        deps = new address[](count*Cylinder.getCapacity());\n        unlucky = new uint8[](count);\n        jackpot = new int96[](count);\n        lastDepTime = new uint64[](count);\n        status = new uint8[](count);\n\n        _putCylindersToArrays(game, idxFrom, count, index, deps, unlucky, jackpot, lastDepTime, status);\n    }\n\n    function _putCylindersToArrays(uint game, uint idxFrom, uint count, uint64[] index, address[] deps, uint8[] unlucky, int96[] jackpot, uint64[] lastDepTime, uint8[] status) private view {\n        for(uint i=0; i<count; ++i){\n            address[] memory _deps;\n            (, , , index[i], _deps, unlucky[i], jackpot[i], lastDepTime[i], status[i]) = getCylinder(game, int(idxFrom + i));\n            _copyDeps(i*Cylinder.getCapacity(), deps, _deps);\n        }\n    }\n\n    function _copyDeps(uint start, address[] deps, address[] memory _deps) private pure {\n        for(uint j=0; j<_deps.length; ++j){\n            deps[start + j] = _deps[j];\n        }\n    }\n\n    function getUnfinishedCount() public view returns (uint) {\n        return gtf.length - gtfStart;\n    }\n\n    function getUnfinished(uint i) public view returns (uint game, uint blockNumber, uint cylinder) {\n        game = gtf[gtfStart + i].game;\n        blockNumber = gtf[gtfStart + i].blockNumber;\n        cylinder = gtf[gtfStart + i].height/Cylinder.getCapacity();\n    }\n\n    function getTotalCylindersCount() public view returns (uint) {\n        return gtf.length;\n    }\n\n    function testRandom() public view returns (uint[] numbers) {\n        numbers = new uint[](32);\n        Random.Data memory r;\n        for(uint i=0; i<256; i+=8){\n            numbers[i/8] = Random.random(r, 10);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getGameStates\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"dep\",\"type\":\"uint96[]\"},{\"name\":\"slotsCount\",\"type\":\"uint64[]\"},{\"name\":\"resultsCount\",\"type\":\"uint64[]\"},{\"name\":\"currentCylinderIndex\",\"type\":\"uint64[]\"},{\"name\":\"jackpot\",\"type\":\"uint96[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getUnfinished\",\"outputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"cylinder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCylindersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BETS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnfinishedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"idxFrom\",\"type\":\"uint256\"},{\"name\":\"idxTo\",\"type\":\"uint256\"}],\"name\":\"getCylinders\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"dep\",\"type\":\"uint96\"},{\"name\":\"index\",\"type\":\"uint64[]\"},{\"name\":\"deps\",\"type\":\"address[]\"},{\"name\":\"unlucky\",\"type\":\"uint8[]\"},{\"name\":\"jackpot\",\"type\":\"int96[]\"},{\"name\":\"lastDepTime\",\"type\":\"uint64[]\"},{\"name\":\"status\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"int256\"}],\"name\":\"getCylinder\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"dep\",\"type\":\"uint96\"},{\"name\":\"index\",\"type\":\"uint64\"},{\"name\":\"deps\",\"type\":\"address[]\"},{\"name\":\"unlucky\",\"type\":\"uint8\"},{\"name\":\"jackpot\",\"type\":\"int96\"},{\"name\":\"lastDepTime\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testRandom\",\"outputs\":[{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"}],\"name\":\"getGameState\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"dep\",\"type\":\"uint96\"},{\"name\":\"slotsCount\",\"type\":\"uint64\"},{\"name\":\"resultsCount\",\"type\":\"uint64\"},{\"name\":\"currentCylinderIndex\",\"type\":\"uint64\"},{\"name\":\"jackpot\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "610240604052662386f26fc10000608090815266b1a2bc2ec5000060a05267016345785d8a000060c0526702c68af0bb14000060e052670429d069189e0000610100526706f05b59d3b20000610120526709b6e64a8ec6000061014052670de0b6b3a7640000610160526714d1120d7b16000061018052671bc16d674ec800006101a0526729a2241af62c00006101c052674563918244f400006101e052676124fee993bc000061020052678ac7230489e8000061022052620000c790600090600e6200010a565b506000601055348015620000da57600080fd5b50620000f364010000000062001fda6200010882021704565b600e62000101818062000159565b506200027b565b565b82600e810192821562000147579160200282015b8281111562000147578251829067ffffffffffffffff169055916020019190600101906200011e565b50620001559291506200018d565b5090565b8154818355818111156200018857600502816005028360005260206000209182019101620001889190620001ad565b505050565b620001aa91905b8082111562000155576000815560010162000194565b90565b620001aa91905b8082111562000155576000808255620001d16001830182620001f9565b620001e16002830160006200021c565b506000600382018190556004820155600501620001b4565b50805460008255906000526020600020908101906200021991906200023c565b50565b50805460008255906000526020600020908101906200021991906200018d565b620001aa91905b80821115620001555780547fffffffff0000000000000000000000000000000000000000000000000000000016815560010162000243565b612008806200028b6000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630abcdf9481146102aa5780633c7af096146104515780633ccfd60b1461048757806364ed74cf1461049e57806392d5a1ae146104c5578063adcbafe7146104dd578063d34dfc68146104f2578063e6dad824146106f6578063ec284e0a1461070e578063fbddd14b146107e5578063ffde0c741461084a575b600d600080805b6000841261022f57600084600e81106100ca57fe5b01549250348311610223576100dd6108bb565b823411156101165760405133903485900380156108fc02916000818181858888f19350505050158015610114573d6000803e3d6000fd5b505b600e80548590811061012457fe5b90600052602060002090600502019150816000015460001415610145578282555b50600381015461015b823363ffffffff6109f916565b1561021e576040805160608101825260ff808716825267ffffffffffffffff43811660208401908152858216948401948552600f805460018101825560009190915293517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802909401805491519551831669010000000000000000000270ffffffffffffffff00000000000000000019969093166101000268ffffffffffffffff00199590941660ff19909216919091179390931691909117929092169190911790555b6102a4565b600019909301926100b5565b34650104c533c00014156102455761021e610acd565b3415156102545761021e6108bb565b6040805160e560020a62461bcd02815260206004820152601460248201527f4465706f73697420697320746f6f20736d616c6c000000000000000000000000604482015290519081900360640190fd5b50505050005b3480156102b657600080fd5b506102bf610b77565b604051808867ffffffffffffffff1667ffffffffffffffff1681526020018760001916600019168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561033757818101518382015260200161031f565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561037657818101518382015260200161035e565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156103b557818101518382015260200161039d565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156103f45781810151838201526020016103dc565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561043357818101518382015260200161041b565b505050509050019c5050505050505050505050505060405180910390f35b34801561045d57600080fd5b50610469600435610d11565b60408051938452602084019290925282820152519081900360600190f35b34801561049357600080fd5b5061049c610acd565b005b3480156104aa57600080fd5b506104b3610dbe565b60408051918252519081900360200190f35b3480156104d157600080fd5b506104b3600435610dc5565b3480156104e957600080fd5b506104b3610dd9565b3480156104fe57600080fd5b50610510600435602435604435610de3565b604051808a81526020018960001916600019168152602001886bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200180602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561059a578181015183820152602001610582565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b838110156105d95781810151838201526020016105c1565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610618578181015183820152602001610600565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561065757818101518382015260200161063f565b50505050905001878103835289818151815260200191508051906020019060200280838360005b8381101561069657818101518382015260200161067e565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156106d55781810151838201526020016106bd565b505050509050019f5050505050505050505050505050505060405180910390f35b34801561070257600080fd5b5061049c600435610ff1565b34801561071a57600080fd5b50610729600435602435611072565b6040805167ffffffffffffffff808c16825260208083018c90526bffffffffffffffffffffffff8b1693830193909352888116606083015260ff80881660a0840152600b87810b900b60c084015290851660e0830152831661010082015261012060808201818152885191830191909152875191929091610140840191898101910280838360005b838110156107c95781810151838201526020016107b1565b505050509050019a505050505050505050505060405180910390f35b3480156107f157600080fd5b506107fa611149565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561083657818101518382015260200161081e565b505050509050019250505060405180910390f35b34801561085657600080fd5b506108626004356111b9565b6040805167ffffffffffffffff988916815260208101979097526bffffffffffffffffffffffff958616878201529387166060870152918616608086015290941660a0840152921660c082015290519081900360e00190f35b6108c3611f05565b6000806108ce611f1c565b600f5460105490935091506000805b848410156109e157600f8054859081106108f357fe5b600091825260209182902060408051606081018252929091015460ff8116835267ffffffffffffffff6101008204811694840185905269010000000000000000009091041690820152935091504382141561094d576109e1565b61095d868363ffffffff61123116565b8251600e8054909160ff1690811061097157fe5b906000526020600020906005020190506109a4836040015167ffffffffffffffff1687836112449092919063ffffffff16565b600f8054859081106109b257fe5b6000918252602090912001805470ffffffffffffffffffffffffffffffffff19169055600193909301926108dd565b6010548411156109f15760108490555b505050505050565b60408051808201909152600160a060020a03808316825267ffffffffffffffff428116602080850191825260018088018054918201815560008181529283209651969091018054935190941674010000000000000000000000000000000000000000027bffffffffffffffff0000000000000000000000000000000000000000199690951673ffffffffffffffffffffffffffffffffffffffff19909316929092179490941692909217905554600590061515610ac3575060038201805460050190556001610ac7565b5060005b92915050565b600e60005b81811015610b2357610b0933600e83815481101515610aed57fe5b906000526020600020906005020161155590919063ffffffff16565b15610b1b57610b166108bb565b610b73565b600101610ad2565b6040805160e560020a62461bcd02815260206004820152601f60248201527f596f7520617265206e6f742062657474696e6720696e20616e792067616d6500604482015290519081900360640190fd5b5050565b60008060608060608060606000600e604051908082528060200260200182016040528015610baf578160200160208202803883390190505b5060408051600e8082526101e08201909252919750602082016101c080388339505060408051600e8082526101e082019092529297509050602082016101c080388339505060408051600e8082526101e082019092529296509050602082016101c080388339505060408051600e8082526101e082019092529295509050602082016101c080388339019050509150600090505b600e811015610d0757610c55816111b9565b8c88815181101515610c6357fe5b9060200190602002018c89815181101515610c7a57fe5b9060200190602002018c8a815181101515610c9157fe5b9060200190602002018c8b815181101515610ca857fe5b9060200190602002018c8c815181101515610cbf57fe5b6bffffffffffffffffffffffff9687166020918202909201015267ffffffffffffffff9586169052948416909452939091169091529190911690529098509650600101610c43565b5090919293949596565b6000806000600f8460105401815481101515610d2957fe5b600091825260209091200154601054600f805460ff909316955091908601908110610d5057fe5b600091825260209091200154610100900467ffffffffffffffff169150610d7561171c565b600f8560105401815481101515610d8857fe5b6000918252602090912001546901000000000000000000900467ffffffffffffffff16811515610db457fe5b0490509193909250565b600f545b90565b600081600e8110610dd257fe5b0154905081565b601054600f540390565b60008060006060806060806060806000806000600e8f815481101515610e0557fe5b90600052602060002090600502019250610e1d61171c565b6001840154811515610e2b57fe5b845460001943019e508e409d509b50049150818e11801590610e4d57508c8e11155b1515610ea3576040805160e560020a62461bcd02815260206004820152601a60248201527f57726f6e672063796c696e64657220696e6465782072616e6765000000000000604482015290519081900360640190fd5b818d1115610eaf57819c505b8d8d03600101905080604051908082528060200260200182016040528015610ee1578160200160208202803883390190505b509850610eec61171c565b8102604051908082528060200260200182016040528015610f17578160200160208202803883390190505b50975080604051908082528060200260200182016040528015610f44578160200160208202803883390190505b50965080604051908082528060200260200182016040528015610f71578160200160208202803883390190505b50955080604051908082528060200260200182016040528015610f9e578160200160208202803883390190505b50945080604051908082528060200260200182016040528015610fcb578160200160208202803883390190505b509350610fdf8f8f838c8c8c8c8c8c611721565b50505093979b92969a50939750939750565b600e8110610ffe57600080fd5b61101133600e83815481101515610aed57fe5b1515611067576040805160e560020a62461bcd02815260206004820181905260248201527f596f7520617265206e6f742062657474696e6720696e20746869732067616d65604482015290519081900360640190fd5b61106f6108bb565b50565b60008060008060606000806000806000806000600e8e81548110151561109457fe5b9060005260206000209060050201925060008d126110b2578c6110ca565b6110ba61171c565b60018401548115156110c857fe5b045b98506110e68367ffffffffffffffff8b1663ffffffff61181e16565b809a50819b50829c50839d50849e50859f50505050505050600143039b5060014303409a5061111f8e8a67ffffffffffffffff16611ad4565b95509092509050600260ff85161415611139578196508095505b5050509295985092959850929598565b6060611153611f05565b604080516020808252610420820190925260009180820161040080388339019050509250600090505b6101008110156111b45761119182600a611c96565b83600883048151811015156111a257fe5b6020908102909101015260080161117c565b505090565b600080600080600080600080600e898154811015156111d457fe5b6000918252602090912060059091020180546001820154600283015491985096509450905061120161171c565b816003015481151561120f57fe5b60049092015460001943019b8c409b5097995095975093959390049392915050565b81518114610b7357804060208301529052565b61124c611f3c565b6000806000806000806000806000806112668e8e8e611ddb565b8e546060820151919c509a5060ff169850606460788b0204975060058d01965060058a0295508d6004015494508a608001516bffffffffffffffffffffffff1693508c92505b86831015611314578c830389146113095760018e018054849081106112cd57fe5b600091825260208220018054604051919450600160a060020a0316918a156108fc02918b91818181858888f19350505050151561130957938701935b8260010192506112ac565b600084111561136b5760018e0180548e8b0190811061132f57fe5b600091825260208220018054604051919350600160a060020a03169186156108fc02918791818181858888f193505050501561136b5783850394505b6064600287020485018e600401819055508d6002018b90806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548160ff021916908360ff16021790555060808201518160000160136101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600001601f6101000a81548160ff02191690831515021790555050505073db058d036768cfa9a94963f99161e3c94ad6f5da600160a060020a03166108fc6064600189028115156114d457fe5b049081150290604051600060405180830381858888f19350505050158015611500573d6000803e3d6000fd5b5060405173da149b17c154e964456553c749b7b4998c152c9e906064880480156108fc02916000818181858888f19350505050158015611544573d6000803e3d6000fd5b505050505050505050505050505050565b600182015482546003840154600092919083805b84831015611711576001880180548490811061158157fe5b60009182526020909120018054909250600160a060020a0388811691161415611706576064606385028354604051929091049250600160a060020a03169034830180156108fc02916000818181858888f193505050501580156115e8573d6000803e3d6000fd5b5060405173db058d036768cfa9a94963f99161e3c94ad6f5da9082860380156108fc02916000818181858888f1935050505015801561162b573d6000803e3d6000fd5b5060001990940193848310156116ee576001880180548690811061164b57fe5b90600052602060002001886001018481548110151561166657fe5b6000918252602090912082549101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117808255915467ffffffffffffffff740100000000000000000000000000000000000000009182900416027bffffffffffffffff0000000000000000000000000000000000000000199092169190911790555b846116fc60018a0182611f71565b5060019550611711565b826001019250611569565b505050505092915050565b600590565b600060605b888210156118115761173a8b838c01611072565b9091929394959697509091929394959650909192939495508d8881518110151561176057fe5b9060200190602002018c8981518110151561177757fe5b9060200190602002018c8a81518110151561178e57fe5b9060200190602002018c8b8151811015156117a557fe5b9060200190602002018c8c8151811015156117bc57fe5b60ff9687166020918202909201015267ffffffffffffffff9586169052600b95860b90950b90945293169091529290921690915290506118066117fd61171c565b83028883611eac565b816001019150611726565b5050505050505050505050565b815460018301548290606090600090819081908190819081908190600590048b1115611894576040805160e560020a62461bcd02815260206004820152601460248201527f57726f6e672063796c696e64657220696e646578000000000000000000000000604482015290519081900360640190fd5b60028c015467ffffffffffffffff8a16106119025760058967ffffffffffffffff16028c6001018054905003935060058411156118d057600593505b836040519080825280602002602001820160405280156118fa578160200160208202803883390190505b5097506119f9565b60408051600580825260c08201909252906020820160a0803883390190505097508b6002018967ffffffffffffffff1681548110151561193e57fe5b6000918252602090912001805460ff72010000000000000000000000000000000000008204811699509194507f01000000000000000000000000000000000000000000000000000000000000009004166119be57825473010000000000000000000000000000000000000090046bffffffffffffffffffffffff166119e9565b825473010000000000000000000000000000000000000090046bffffffffffffffffffffffff166000035b835490965065ffffffffffff1694505b600091505b8751821015611ac65760018c01805467ffffffffffffffff8b166005028401908110611a2657fe5b600091825260209091200180548951919250600160a060020a031690899084908110611a4e57fe5b600160a060020a03909216602092830290910190910152805467ffffffffffffffff7401000000000000000000000000000000000000000090910481169086161015611abb57805474010000000000000000000000000000000000000000900467ffffffffffffffff1694505b8160010191506119fe565b505050509295509295509295565b600080600080611ae2611f05565b600080611aed611f1c565b6000611af7611f3c565b600e80548d908110611b0557fe5b9060005260206000209060050201965086600201805490508b1015611b2d5760039750611c88565b611b3561171c565b8b600101028760010180549050101515611c8857600f546010546001995090955093505b84841015611c8857600f805485908110611b6f57fe5b600091825260209182902060408051606081018252929091015460ff8116835267ffffffffffffffff61010082048116948401859052690100000000000000000090910416908201529350915081401515611bc957611c88565b611bd9868363ffffffff61123116565b611c1f836040015167ffffffffffffffff1687600e866000015160ff16815481101515611c0257fe5b9060005260206000209060050201611ddb9092919063ffffffff16565b9050611c2961171c565b8b02836040015167ffffffffffffffff16148015611c4a5750825160ff168c145b15611c7d57806060015199508060a00151611c69578060800151611c72565b80608001516000035b985060029750611c88565b836001019350611b59565b505050505050509250925092565b60208201516000901515611d435760408051426020808301919091524482840152436060830181905260001901406080808401919091528351808403909101815260a090920192839052815191929182918401908083835b60208310611d0d5780518252601f199092019160209182019101611cee565b51815160209384036101000a60001901801990921691161790526040519190930181900390209187019190915250611dc3915050565b60208084015160408051808401929092528051808303840181529181019081905281519192909182918401908083835b60208310611d925780518252601f199092019160209182019101611d73565b51815160209384036101000a6000190180199092169116179052604051919093018190039020918701919091525050505b60208301518290811515611dd357fe5b069392505050565b611de3611f3c565b600080600080600088600301546005890111151515611dfe57fe5b611e0f87600563ffffffff611c9616565b60048a0154909550935060009250829150611e32876103e863ffffffff611c9616565b9050606481061515611e5857801515611e515760019150839250611e58565b6002840492505b506040805160c08101825265ffffffffffff42811682524381166020830152989098169088015260ff90931660608701526bffffffffffffffffffffffff16608086015250151560a0840152509092915050565b60005b8151811015611eff578181815181101515611ec657fe5b9060200190602002015183828601815181101515611ee057fe5b600160a060020a03909216602092830290910190910152600101611eaf565b50505050565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b815481835581811115611f9557600083815260209020611f95918101908301611f9a565b505050565b610dc291905b80821115611fd65780547fffffffff00000000000000000000000000000000000000000000000000000000168155600101611fa0565b5090565b5600a165627a7a72305820b0c2318bd4c59f0cc84cf9fa99a529d5ed876c17e49a3df7c8948b852ae607360029"
}