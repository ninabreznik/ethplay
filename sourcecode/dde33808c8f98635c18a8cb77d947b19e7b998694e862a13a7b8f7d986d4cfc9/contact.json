{
  "address": "0x1b5848a7e7d05daee72db4fa78901fe8b7725e9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DaoIdentity",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\n// Full Contract Sources : https://github.com/DigixGlobal/dao-contracts\n// File: @digix/cacp-contracts-dao/contracts/ACOwned.sol\npragma solidity ^0.4.25;\n/// @title Owner based access control\n/// @author DigixGlobal\ncontract ACOwned {\n\n  address public owner;\n  address public new_owner;\n  bool is_ac_owned_init;\n\n  /// @dev Modifier to check if msg.sender is the contract owner\n  modifier if_owner() {\n    require(is_owner());\n    _;\n  }\n\n  function init_ac_owned()\n           internal\n           returns (bool _success)\n  {\n    if (is_ac_owned_init == false) {\n      owner = msg.sender;\n      is_ac_owned_init = true;\n    }\n    _success = true;\n  }\n\n  function is_owner()\n           private\n           constant\n           returns (bool _is_owner)\n  {\n    _is_owner = (msg.sender == owner);\n  }\n\n  function change_owner(address _new_owner)\n           if_owner()\n           public\n           returns (bool _success)\n  {\n    new_owner = _new_owner;\n    _success = true;\n  }\n\n  function claim_ownership()\n           public\n           returns (bool _success)\n  {\n    require(msg.sender == new_owner);\n    owner = new_owner;\n    _success = true;\n  }\n}\n\n// File: @digix/cacp-contracts-dao/contracts/Constants.sol\n/// @title Some useful constants\n/// @author DigixGlobal\ncontract Constants {\n  address constant NULL_ADDRESS = address(0x0);\n  uint256 constant ZERO = uint256(0);\n  bytes32 constant EMPTY = bytes32(0x0);\n}\n\n// File: @digix/cacp-contracts-dao/contracts/ContractResolver.sol\n/// @title Contract Name Registry\n/// @author DigixGlobal\ncontract ContractResolver is ACOwned, Constants {\n\n  mapping (bytes32 => address) contracts;\n  bool public locked_forever;\n\n  modifier unless_registered(bytes32 _key) {\n    require(contracts[_key] == NULL_ADDRESS);\n    _;\n  }\n\n  modifier if_owner_origin() {\n    require(tx.origin == owner);\n    _;\n  }\n\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n  /// @param _contract The resolver key\n  modifier if_sender_is(bytes32 _contract) {\n    require(msg.sender == get_contract(_contract));\n    _;\n  }\n\n  modifier if_not_locked() {\n    require(locked_forever == false);\n    _;\n  }\n\n  /// @dev ContractResolver constructor will perform the following: 1. Set msg.sender as the contract owner.\n  constructor() public\n  {\n    require(init_ac_owned());\n    locked_forever = false;\n  }\n\n  /// @dev Called at contract initialization\n  /// @param _key bytestring for CACP name\n  /// @param _contract_address The address of the contract to be registered\n  /// @return _success if the operation is successful\n  function init_register_contract(bytes32 _key, address _contract_address)\n           if_owner_origin()\n           if_not_locked()\n           unless_registered(_key)\n           public\n           returns (bool _success)\n  {\n    require(_contract_address != NULL_ADDRESS);\n    contracts[_key] = _contract_address;\n    _success = true;\n  }\n\n  /// @dev Lock the resolver from any further modifications.  This can only be called from the owner\n  /// @return _success if the operation is successful\n  function lock_resolver_forever()\n           if_owner\n           public\n           returns (bool _success)\n  {\n    locked_forever = true;\n    _success = true;\n  }\n\n  /// @dev Get address of a contract\n  /// @param _key the bytestring name of the contract to look up\n  /// @return _contract the address of the contract\n  function get_contract(bytes32 _key)\n           public\n           view\n           returns (address _contract)\n  {\n    require(contracts[_key] != NULL_ADDRESS);\n    _contract = contracts[_key];\n  }\n}\n\n// File: @digix/cacp-contracts-dao/contracts/ResolverClient.sol\n/// @title Contract Resolver Interface\n/// @author DigixGlobal\ncontract ResolverClient {\n\n  /// The address of the resolver contract for this project\n  address public resolver;\n  bytes32 public key;\n\n  /// Make our own address available to us as a constant\n  address public CONTRACT_ADDRESS;\n\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n  /// @param _contract The resolver key\n  modifier if_sender_is(bytes32 _contract) {\n    require(sender_is(_contract));\n    _;\n  }\n\n  function sender_is(bytes32 _contract) internal view returns (bool _isFrom) {\n    _isFrom = msg.sender == ContractResolver(resolver).get_contract(_contract);\n  }\n\n  modifier if_sender_is_from(bytes32[3] _contracts) {\n    require(sender_is_from(_contracts));\n    _;\n  }\n\n  function sender_is_from(bytes32[3] _contracts) internal view returns (bool _isFrom) {\n    uint256 _n = _contracts.length;\n    for (uint256 i = 0; i < _n; i++) {\n      if (_contracts[i] == bytes32(0x0)) continue;\n      if (msg.sender == ContractResolver(resolver).get_contract(_contracts[i])) {\n        _isFrom = true;\n        break;\n      }\n    }\n  }\n\n  /// Function modifier to check resolver's locking status.\n  modifier unless_resolver_is_locked() {\n    require(is_locked() == false);\n    _;\n  }\n\n  /// @dev Initialize new contract\n  /// @param _key the resolver key for this contract\n  /// @return _success if the initialization is successful\n  function init(bytes32 _key, address _resolver)\n           internal\n           returns (bool _success)\n  {\n    bool _is_locked = ContractResolver(_resolver).locked_forever();\n    if (_is_locked == false) {\n      CONTRACT_ADDRESS = address(this);\n      resolver = _resolver;\n      key = _key;\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n      _success = true;\n    }  else {\n      _success = false;\n    }\n  }\n\n  /// @dev Check if resolver is locked\n  /// @return _locked if the resolver is currently locked\n  function is_locked()\n           private\n           view\n           returns (bool _locked)\n  {\n    _locked = ContractResolver(resolver).locked_forever();\n  }\n\n  /// @dev Get the address of a contract\n  /// @param _key the resolver key to look up\n  /// @return _contract the address of the contract\n  function get_contract(bytes32 _key)\n           public\n           view\n           returns (address _contract)\n  {\n    _contract = ContractResolver(resolver).get_contract(_key);\n  }\n}\n\n// File: @digix/solidity-collections/contracts/lib/DoublyLinkedList.sol\nlibrary DoublyLinkedList {\n\n  struct Item {\n    bytes32 item;\n    uint256 previous_index;\n    uint256 next_index;\n  }\n\n  struct Data {\n    uint256 first_index;\n    uint256 last_index;\n    uint256 count;\n    mapping(bytes32 => uint256) item_index;\n    mapping(uint256 => bool) valid_indexes;\n    Item[] collection;\n  }\n\n  struct IndexedUint {\n    mapping(bytes32 => Data) data;\n  }\n\n  struct IndexedAddress {\n    mapping(bytes32 => Data) data;\n  }\n\n  struct IndexedBytes {\n    mapping(bytes32 => Data) data;\n  }\n\n  struct Address {\n    Data data;\n  }\n\n  struct Bytes {\n    Data data;\n  }\n\n  struct Uint {\n    Data data;\n  }\n\n  uint256 constant NONE = uint256(0);\n  bytes32 constant EMPTY_BYTES = bytes32(0x0);\n  address constant NULL_ADDRESS = address(0x0);\n\n  function find(Data storage self, bytes32 _item)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    if ((self.item_index[_item] == NONE) && (self.count == NONE)) {\n      _item_index = NONE;\n    } else {\n      _item_index = self.item_index[_item];\n    }\n  }\n\n  function get(Data storage self, uint256 _item_index)\n           public\n           constant\n           returns (bytes32 _item)\n  {\n    if (self.valid_indexes[_item_index] == true) {\n      _item = self.collection[_item_index - 1].item;\n    } else {\n      _item = EMPTY_BYTES;\n    }\n  }\n\n  function append(Data storage self, bytes32 _data)\n           internal\n           returns (bool _success)\n  {\n    if (find(self, _data) != NONE || _data == bytes32(\"\")) { // rejects addition of empty values\n      _success = false;\n    } else {\n      uint256 _index = uint256(self.collection.push(Item({item: _data, previous_index: self.last_index, next_index: NONE})));\n      if (self.last_index == NONE) {\n        if ((self.first_index != NONE) || (self.count != NONE)) {\n          revert();\n        } else {\n          self.first_index = self.last_index = _index;\n          self.count = 1;\n        }\n      } else {\n        self.collection[self.last_index - 1].next_index = _index;\n        self.last_index = _index;\n        self.count++;\n      }\n      self.valid_indexes[_index] = true;\n      self.item_index[_data] = _index;\n      _success = true;\n    }\n  }\n\n  function remove(Data storage self, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    if (self.valid_indexes[_index] == true) {\n      Item memory item = self.collection[_index - 1];\n      if (item.previous_index == NONE) {\n        self.first_index = item.next_index;\n      } else {\n        self.collection[item.previous_index - 1].next_index = item.next_index;\n      }\n\n      if (item.next_index == NONE) {\n        self.last_index = item.previous_index;\n      } else {\n        self.collection[item.next_index - 1].previous_index = item.previous_index;\n      }\n      delete self.collection[_index - 1];\n      self.valid_indexes[_index] = false;\n      delete self.item_index[item.item];\n      self.count--;\n      _success = true;\n    } else {\n      _success = false;\n    }\n  }\n\n  function remove_item(Data storage self, bytes32 _item)\n           internal\n           returns (bool _success)\n  {\n    uint256 _item_index = find(self, _item);\n    if (_item_index != NONE) {\n      require(remove(self, _item_index));\n      _success = true;\n    } else {\n      _success = false;\n    }\n    return _success;\n  }\n\n  function total(Data storage self)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = self.count;\n  }\n\n  function start(Data storage self)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = self.first_index;\n    return _item_index;\n  }\n\n  function start_item(Data storage self)\n           public\n           constant\n           returns (bytes32 _item)\n  {\n    uint256 _item_index = start(self);\n    if (_item_index != NONE) {\n      _item = get(self, _item_index);\n    } else {\n      _item = EMPTY_BYTES;\n    }\n  }\n\n  function end(Data storage self)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = self.last_index;\n    return _item_index;\n  }\n\n  function end_item(Data storage self)\n           public\n           constant\n           returns (bytes32 _item)\n  {\n    uint256 _item_index = end(self);\n    if (_item_index != NONE) {\n      _item = get(self, _item_index);\n    } else {\n      _item = EMPTY_BYTES;\n    }\n  }\n\n  function valid(Data storage self, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = self.valid_indexes[_item_index];\n    //_yes = ((_item_index - 1) < self.collection.length);\n  }\n\n  function valid_item(Data storage self, bytes32 _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    uint256 _item_index = self.item_index[_item];\n    _yes = self.valid_indexes[_item_index];\n  }\n\n  function previous(Data storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    if (self.valid_indexes[_current_index] == true) {\n      _previous_index = self.collection[_current_index - 1].previous_index;\n    } else {\n      _previous_index = NONE;\n    }\n  }\n\n  function previous_item(Data storage self, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _previous_item)\n  {\n    uint256 _current_index = find(self, _current_item);\n    if (_current_index != NONE) {\n      uint256 _previous_index = previous(self, _current_index);\n      _previous_item = get(self, _previous_index);\n    } else {\n      _previous_item = EMPTY_BYTES;\n    }\n  }\n\n  function next(Data storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    if (self.valid_indexes[_current_index] == true) {\n      _next_index = self.collection[_current_index - 1].next_index;\n    } else {\n      _next_index = NONE;\n    }\n  }\n\n  function next_item(Data storage self, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _next_item)\n  {\n    uint256 _current_index = find(self, _current_item);\n    if (_current_index != NONE) {\n      uint256 _next_index = next(self, _current_index);\n      _next_item = get(self, _next_index);\n    } else {\n      _next_item = EMPTY_BYTES;\n    }\n  }\n\n  function find(Uint storage self, uint256 _item)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = find(self.data, bytes32(_item));\n  }\n\n  function get(Uint storage self, uint256 _item_index)\n           public\n           constant\n           returns (uint256 _item)\n  {\n    _item = uint256(get(self.data, _item_index));\n  }\n\n\n  function append(Uint storage self, uint256 _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data, bytes32(_data));\n  }\n\n  function remove(Uint storage self, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data, _index);\n  }\n\n  function remove_item(Uint storage self, uint256 _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data, bytes32(_item));\n  }\n\n  function total(Uint storage self)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data);\n  }\n\n  function start(Uint storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data);\n  }\n\n  function start_item(Uint storage self)\n           public\n           constant\n           returns (uint256 _start_item)\n  {\n    _start_item = uint256(start_item(self.data));\n  }\n\n\n  function end(Uint storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data);\n  }\n\n  function end_item(Uint storage self)\n           public\n           constant\n           returns (uint256 _end_item)\n  {\n    _end_item = uint256(end_item(self.data));\n  }\n\n  function valid(Uint storage self, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data, _item_index);\n  }\n\n  function valid_item(Uint storage self, uint256 _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data, bytes32(_item));\n  }\n\n  function previous(Uint storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data, _current_index);\n  }\n\n  function previous_item(Uint storage self, uint256 _current_item)\n           public\n           constant\n           returns (uint256 _previous_item)\n  {\n    _previous_item = uint256(previous_item(self.data, bytes32(_current_item)));\n  }\n\n  function next(Uint storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data, _current_index);\n  }\n\n  function next_item(Uint storage self, uint256 _current_item)\n           public\n           constant\n           returns (uint256 _next_item)\n  {\n    _next_item = uint256(next_item(self.data, bytes32(_current_item)));\n  }\n\n  function find(Address storage self, address _item)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = find(self.data, bytes32(_item));\n  }\n\n  function get(Address storage self, uint256 _item_index)\n           public\n           constant\n           returns (address _item)\n  {\n    _item = address(get(self.data, _item_index));\n  }\n\n\n  function find(IndexedUint storage self, bytes32 _collection_index, uint256 _item)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = find(self.data[_collection_index], bytes32(_item));\n  }\n\n  function get(IndexedUint storage self, bytes32 _collection_index, uint256 _item_index)\n           public\n           constant\n           returns (uint256 _item)\n  {\n    _item = uint256(get(self.data[_collection_index], _item_index));\n  }\n\n\n  function append(IndexedUint storage self, bytes32 _collection_index, uint256 _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data[_collection_index], bytes32(_data));\n  }\n\n  function remove(IndexedUint storage self, bytes32 _collection_index, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data[_collection_index], _index);\n  }\n\n  function remove_item(IndexedUint storage self, bytes32 _collection_index, uint256 _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function total(IndexedUint storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data[_collection_index]);\n  }\n\n  function start(IndexedUint storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data[_collection_index]);\n  }\n\n  function start_item(IndexedUint storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _start_item)\n  {\n    _start_item = uint256(start_item(self.data[_collection_index]));\n  }\n\n\n  function end(IndexedUint storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data[_collection_index]);\n  }\n\n  function end_item(IndexedUint storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _end_item)\n  {\n    _end_item = uint256(end_item(self.data[_collection_index]));\n  }\n\n  function valid(IndexedUint storage self, bytes32 _collection_index, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data[_collection_index], _item_index);\n  }\n\n  function valid_item(IndexedUint storage self, bytes32 _collection_index, uint256 _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function previous(IndexedUint storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data[_collection_index], _current_index);\n  }\n\n  function previous_item(IndexedUint storage self, bytes32 _collection_index, uint256 _current_item)\n           public\n           constant\n           returns (uint256 _previous_item)\n  {\n    _previous_item = uint256(previous_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n\n  function next(IndexedUint storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data[_collection_index], _current_index);\n  }\n\n  function next_item(IndexedUint storage self, bytes32 _collection_index, uint256 _current_item)\n           public\n           constant\n           returns (uint256 _next_item)\n  {\n    _next_item = uint256(next_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n\n  function append(Address storage self, address _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data, bytes32(_data));\n  }\n\n  function remove(Address storage self, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data, _index);\n  }\n\n\n  function remove_item(Address storage self, address _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data, bytes32(_item));\n  }\n\n  function total(Address storage self)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data);\n  }\n\n  function start(Address storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data);\n  }\n\n  function start_item(Address storage self)\n           public\n           constant\n           returns (address _start_item)\n  {\n    _start_item = address(start_item(self.data));\n  }\n\n\n  function end(Address storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data);\n  }\n\n  function end_item(Address storage self)\n           public\n           constant\n           returns (address _end_item)\n  {\n    _end_item = address(end_item(self.data));\n  }\n\n  function valid(Address storage self, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data, _item_index);\n  }\n\n  function valid_item(Address storage self, address _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data, bytes32(_item));\n  }\n\n  function previous(Address storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data, _current_index);\n  }\n\n  function previous_item(Address storage self, address _current_item)\n           public\n           constant\n           returns (address _previous_item)\n  {\n    _previous_item = address(previous_item(self.data, bytes32(_current_item)));\n  }\n\n  function next(Address storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data, _current_index);\n  }\n\n  function next_item(Address storage self, address _current_item)\n           public\n           constant\n           returns (address _next_item)\n  {\n    _next_item = address(next_item(self.data, bytes32(_current_item)));\n  }\n\n  function append(IndexedAddress storage self, bytes32 _collection_index, address _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data[_collection_index], bytes32(_data));\n  }\n\n  function remove(IndexedAddress storage self, bytes32 _collection_index, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data[_collection_index], _index);\n  }\n\n\n  function remove_item(IndexedAddress storage self, bytes32 _collection_index, address _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function total(IndexedAddress storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data[_collection_index]);\n  }\n\n  function start(IndexedAddress storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data[_collection_index]);\n  }\n\n  function start_item(IndexedAddress storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (address _start_item)\n  {\n    _start_item = address(start_item(self.data[_collection_index]));\n  }\n\n\n  function end(IndexedAddress storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data[_collection_index]);\n  }\n\n  function end_item(IndexedAddress storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (address _end_item)\n  {\n    _end_item = address(end_item(self.data[_collection_index]));\n  }\n\n  function valid(IndexedAddress storage self, bytes32 _collection_index, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data[_collection_index], _item_index);\n  }\n\n  function valid_item(IndexedAddress storage self, bytes32 _collection_index, address _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function previous(IndexedAddress storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data[_collection_index], _current_index);\n  }\n\n  function previous_item(IndexedAddress storage self, bytes32 _collection_index, address _current_item)\n           public\n           constant\n           returns (address _previous_item)\n  {\n    _previous_item = address(previous_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n\n  function next(IndexedAddress storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data[_collection_index], _current_index);\n  }\n\n  function next_item(IndexedAddress storage self, bytes32 _collection_index, address _current_item)\n           public\n           constant\n           returns (address _next_item)\n  {\n    _next_item = address(next_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n\n\n  function find(Bytes storage self, bytes32 _item)\n           public\n           constant\n           returns (uint256 _item_index)\n  {\n    _item_index = find(self.data, _item);\n  }\n\n  function get(Bytes storage self, uint256 _item_index)\n           public\n           constant\n           returns (bytes32 _item)\n  {\n    _item = get(self.data, _item_index);\n  }\n\n\n  function append(Bytes storage self, bytes32 _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data, _data);\n  }\n\n  function remove(Bytes storage self, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data, _index);\n  }\n\n\n  function remove_item(Bytes storage self, bytes32 _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data, _item);\n  }\n\n  function total(Bytes storage self)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data);\n  }\n\n  function start(Bytes storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data);\n  }\n\n  function start_item(Bytes storage self)\n           public\n           constant\n           returns (bytes32 _start_item)\n  {\n    _start_item = start_item(self.data);\n  }\n\n\n  function end(Bytes storage self)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data);\n  }\n\n  function end_item(Bytes storage self)\n           public\n           constant\n           returns (bytes32 _end_item)\n  {\n    _end_item = end_item(self.data);\n  }\n\n  function valid(Bytes storage self, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data, _item_index);\n  }\n\n  function valid_item(Bytes storage self, bytes32 _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data, _item);\n  }\n\n  function previous(Bytes storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data, _current_index);\n  }\n\n  function previous_item(Bytes storage self, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _previous_item)\n  {\n    _previous_item = previous_item(self.data, _current_item);\n  }\n\n  function next(Bytes storage self, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data, _current_index);\n  }\n\n  function next_item(Bytes storage self, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _next_item)\n  {\n    _next_item = next_item(self.data, _current_item);\n  }\n\n  function append(IndexedBytes storage self, bytes32 _collection_index, bytes32 _data)\n           public\n           returns (bool _success)\n  {\n    _success = append(self.data[_collection_index], bytes32(_data));\n  }\n\n  function remove(IndexedBytes storage self, bytes32 _collection_index, uint256 _index)\n           internal\n           returns (bool _success)\n  {\n    _success = remove(self.data[_collection_index], _index);\n  }\n\n\n  function remove_item(IndexedBytes storage self, bytes32 _collection_index, bytes32 _item)\n           public\n           returns (bool _success)\n  {\n    _success = remove_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function total(IndexedBytes storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _total_count)\n  {\n    _total_count = total(self.data[_collection_index]);\n  }\n\n  function start(IndexedBytes storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = start(self.data[_collection_index]);\n  }\n\n  function start_item(IndexedBytes storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (bytes32 _start_item)\n  {\n    _start_item = bytes32(start_item(self.data[_collection_index]));\n  }\n\n\n  function end(IndexedBytes storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (uint256 _index)\n  {\n    _index = end(self.data[_collection_index]);\n  }\n\n  function end_item(IndexedBytes storage self, bytes32 _collection_index)\n           public\n           constant\n           returns (bytes32 _end_item)\n  {\n    _end_item = bytes32(end_item(self.data[_collection_index]));\n  }\n\n  function valid(IndexedBytes storage self, bytes32 _collection_index, uint256 _item_index)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid(self.data[_collection_index], _item_index);\n  }\n\n  function valid_item(IndexedBytes storage self, bytes32 _collection_index, bytes32 _item)\n           public\n           constant\n           returns (bool _yes)\n  {\n    _yes = valid_item(self.data[_collection_index], bytes32(_item));\n  }\n\n  function previous(IndexedBytes storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _previous_index)\n  {\n    _previous_index = previous(self.data[_collection_index], _current_index);\n  }\n\n  function previous_item(IndexedBytes storage self, bytes32 _collection_index, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _previous_item)\n  {\n    _previous_item = bytes32(previous_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n\n  function next(IndexedBytes storage self, bytes32 _collection_index, uint256 _current_index)\n           public\n           constant\n           returns (uint256 _next_index)\n  {\n    _next_index = next(self.data[_collection_index], _current_index);\n  }\n\n  function next_item(IndexedBytes storage self, bytes32 _collection_index, bytes32 _current_item)\n           public\n           constant\n           returns (bytes32 _next_item)\n  {\n    _next_item = bytes32(next_item(self.data[_collection_index], bytes32(_current_item)));\n  }\n}\n\n// File: @digix/solidity-collections/contracts/abstract/IndexedAddressIteratorStorage.sol\n/**\n  @title Indexed Address IteratorStorage\n  @author DigixGlobal Pte Ltd\n  @notice This contract utilizes: [Doubly Linked List](/DoublyLinkedList)\n*/\ncontract IndexedAddressIteratorStorage {\n\n  using DoublyLinkedList for DoublyLinkedList.IndexedAddress;\n  /**\n    @notice Reads the first item from an Indexed Address Doubly Linked List\n    @param _list The source list\n    @param _collection_index Index of the Collection to evaluate\n    @return {\"_item\" : \"First item on the list\"}\n  */\n  function read_first_from_indexed_addresses(DoublyLinkedList.IndexedAddress storage _list, bytes32 _collection_index)\n           internal\n           constant\n           returns (address _item)\n  {\n    _item = _list.start_item(_collection_index);\n  }\n\n  /**\n    @notice Reads the last item from an Indexed Address Doubly Linked list\n    @param _list The source list\n    @param _collection_index Index of the Collection to evaluate\n    @return {\"_item\" : \"First item on the list\"}\n  */\n  function read_last_from_indexed_addresses(DoublyLinkedList.IndexedAddress storage _list, bytes32 _collection_index)\n           internal\n           constant\n           returns (address _item)\n  {\n    _item = _list.end_item(_collection_index);\n  }\n\n  /**\n    @notice Reads the next item from an Indexed Address Doubly Linked List based on the specified `_current_item`\n    @param _list The source list\n    @param _collection_index Index of the Collection to evaluate\n    @param _current_item The current item to use as base line\n    @return {\"_item\": \"The next item on the list\"}\n  */\n  function read_next_from_indexed_addresses(DoublyLinkedList.IndexedAddress storage _list, bytes32 _collection_index, address _current_item)\n           internal\n           constant\n           returns (address _item)\n  {\n    _item = _list.next_item(_collection_index, _current_item);\n  }\n\n  /**\n    @notice Reads the previous item from an Index Address Doubly Linked List based on the specified `_current_item`\n    @param _list The source list\n    @param _collection_index Index of the Collection to evaluate\n    @param _current_item The current item to use as base line\n    @return {\"_item\" : \"The previous item on the list\"}\n  */\n  function read_previous_from_indexed_addresses(DoublyLinkedList.IndexedAddress storage _list, bytes32 _collection_index, address _current_item)\n           internal\n           constant\n           returns (address _item)\n  {\n    _item = _list.previous_item(_collection_index, _current_item);\n  }\n\n\n  /**\n    @notice Reads the total number of items in an Indexed Address Doubly Linked List\n    @param _list  The source list\n    @param _collection_index Index of the Collection to evaluate\n    @return {\"_count\": \"Length of the Doubly Linked list\"}\n  */\n  function read_total_indexed_addresses(DoublyLinkedList.IndexedAddress storage _list, bytes32 _collection_index)\n           internal\n           constant\n           returns (uint256 _count)\n  {\n    _count = _list.total(_collection_index);\n  }\n}\n\n// File: @digix/solidity-collections/contracts/abstract/UintIteratorStorage.sol\n/**\n  @title Uint Iterator Storage\n  @author DigixGlobal Pte Ltd\n*/\ncontract UintIteratorStorage {\n\n  using DoublyLinkedList for DoublyLinkedList.Uint;\n\n  /**\n    @notice Returns the first item from a `DoublyLinkedList.Uint` list\n    @param _list The DoublyLinkedList.Uint list\n    @return {\"_item\": \"The first item\"}\n  */\n  function read_first_from_uints(DoublyLinkedList.Uint storage _list)\n           internal\n           constant\n           returns (uint256 _item)\n  {\n    _item = _list.start_item();\n  }\n\n  /**\n    @notice Returns the last item from a `DoublyLinkedList.Uint` list\n    @param _list The DoublyLinkedList.Uint list\n    @return {\"_item\": \"The last item\"}\n  */\n  function read_last_from_uints(DoublyLinkedList.Uint storage _list)\n           internal\n           constant\n           returns (uint256 _item)\n  {\n    _item = _list.end_item();\n  }\n\n  /**\n    @notice Returns the next item from a `DoublyLinkedList.Uint` list based on the specified `_current_item`\n    @param _list The DoublyLinkedList.Uint list\n    @param _current_item The current item\n    @return {\"_item\": \"The next item\"}\n  */\n  function read_next_from_uints(DoublyLinkedList.Uint storage _list, uint256 _current_item)\n           internal\n           constant\n           returns (uint256 _item)\n  {\n    _item = _list.next_item(_current_item);\n  }\n\n  /**\n    @notice Returns the previous item from a `DoublyLinkedList.Uint` list based on the specified `_current_item`\n    @param _list The DoublyLinkedList.Uint list\n    @param _current_item The current item\n    @return {\"_item\": \"The previous item\"}\n  */\n  function read_previous_from_uints(DoublyLinkedList.Uint storage _list, uint256 _current_item)\n           internal\n           constant\n           returns (uint256 _item)\n  {\n    _item = _list.previous_item(_current_item);\n  }\n\n  /**\n    @notice Returns the total count of itemsfrom a `DoublyLinkedList.Uint` list\n    @param _list The DoublyLinkedList.Uint list\n    @return {\"_count\": \"The total count of items\"}\n  */\n  function read_total_uints(DoublyLinkedList.Uint storage _list)\n           internal\n           constant\n           returns (uint256 _count)\n  {\n    _count = _list.total();\n  }\n}\n\n// File: @digix/cdap/contracts/storage/DirectoryStorage.sol\n/**\n@title Directory Storage contains information of a directory\n@author DigixGlobal\n*/\ncontract DirectoryStorage is IndexedAddressIteratorStorage, UintIteratorStorage {\n\n  using DoublyLinkedList for DoublyLinkedList.IndexedAddress;\n  using DoublyLinkedList for DoublyLinkedList.Uint;\n\n  struct User {\n    bytes32 document;\n    bool active;\n  }\n\n  struct Group {\n    bytes32 name;\n    bytes32 document;\n    uint256 role_id;\n    mapping(address => User) members_by_address;\n  }\n\n  struct System {\n    DoublyLinkedList.Uint groups;\n    DoublyLinkedList.IndexedAddress groups_collection;\n    mapping (uint256 => Group) groups_by_id;\n    mapping (address => uint256) group_ids_by_address;\n    mapping (uint256 => bytes32) roles_by_id;\n    bool initialized;\n    uint256 total_groups;\n  }\n\n  System system;\n\n  /**\n  @notice Initializes directory settings\n  @return _success If directory initialization is successful\n  */\n  function initialize_directory()\n           internal\n           returns (bool _success)\n  {\n    require(system.initialized == false);\n    system.total_groups = 0;\n    system.initialized = true;\n    internal_create_role(1, \"root\");\n    internal_create_group(1, \"root\", \"\");\n    _success = internal_update_add_user_to_group(1, tx.origin, \"\");\n  }\n\n  /**\n  @notice Creates a new role with the given information\n  @param _role_id Id of the new role\n  @param _name Name of the new role\n  @return {\"_success\": \"If creation of new role is successful\"}\n  */\n  function internal_create_role(uint256 _role_id, bytes32 _name)\n           internal\n           returns (bool _success)\n  {\n    require(_role_id > 0);\n    require(_name != bytes32(0x0));\n    system.roles_by_id[_role_id] = _name;\n    _success = true;\n  }\n\n  /**\n  @notice Returns the role's name of a role id\n  @param _role_id Id of the role\n  @return {\"_name\": \"Name of the role\"}\n  */\n  function read_role(uint256 _role_id)\n           public\n           constant\n           returns (bytes32 _name)\n  {\n    _name = system.roles_by_id[_role_id];\n  }\n\n  /**\n  @notice Creates a new group with the given information\n  @param _role_id Role id of the new group\n  @param _name Name of the new group\n  @param _document Document of the new group\n  @return {\n    \"_success\": \"If creation of the new group is successful\",\n    \"_group_id: \"Id of the new group\"\n  }\n  */\n  function internal_create_group(uint256 _role_id, bytes32 _name, bytes32 _document)\n           internal\n           returns (bool _success, uint256 _group_id)\n  {\n    require(_role_id > 0);\n    require(read_role(_role_id) != bytes32(0x0));\n    _group_id = ++system.total_groups;\n    system.groups.append(_group_id);\n    system.groups_by_id[_group_id].role_id = _role_id;\n    system.groups_by_id[_group_id].name = _name;\n    system.groups_by_id[_group_id].document = _document;\n    _success = true;\n  }\n\n  /**\n  @notice Returns the group's information\n  @param _group_id Id of the group\n  @return {\n    \"_role_id\": \"Role id of the group\",\n    \"_name: \"Name of the group\",\n    \"_document: \"Document of the group\"\n  }\n  */\n  function read_group(uint256 _group_id)\n           public\n           constant\n           returns (uint256 _role_id, bytes32 _name, bytes32 _document, uint256 _members_count)\n  {\n    if (system.groups.valid_item(_group_id)) {\n      _role_id = system.groups_by_id[_group_id].role_id;\n      _name = system.groups_by_id[_group_id].name;\n      _document = system.groups_by_id[_group_id].document;\n      _members_count = read_total_indexed_addresses(system.groups_collection, bytes32(_group_id));\n    } else {\n      _role_id = 0;\n      _name = \"invalid\";\n      _document = \"\";\n      _members_count = 0;\n    }\n  }\n\n  /**\n  @notice Adds new user with the given information to a group\n  @param _group_id Id of the group\n  @param _user Address of the new user\n  @param _document Information of the new user\n  @return {\"_success\": \"If adding new user to a group is successful\"}\n  */\n  function internal_update_add_user_to_group(uint256 _group_id, address _user, bytes32 _document)\n           internal\n           returns (bool _success)\n  {\n    if (system.groups_by_id[_group_id].members_by_address[_user].active == false && system.group_ids_by_address[_user] == 0 && system.groups_by_id[_group_id].role_id != 0) {\n\n      system.groups_by_id[_group_id].members_by_address[_user].active = true;\n      system.group_ids_by_address[_user] = _group_id;\n      system.groups_collection.append(bytes32(_group_id), _user);\n      system.groups_by_id[_group_id].members_by_address[_user].document = _document;\n      _success = true;\n    } else {\n      _success = false;\n    }\n  }\n\n  /**\n  @notice Removes user from its group\n  @param _user Address of the user\n  @return {\"_success\": \"If removing of user is successful\"}\n  */\n  function internal_destroy_group_user(address _user)\n           internal\n           returns (bool _success)\n  {\n    uint256 _group_id = system.group_ids_by_address[_user];\n    if ((_group_id == 1) && (system.groups_collection.total(bytes32(_group_id)) == 1)) {\n      _success = false;\n    } else {\n      system.groups_by_id[_group_id].members_by_address[_user].active = false;\n      system.group_ids_by_address[_user] = 0;\n      delete system.groups_by_id[_group_id].members_by_address[_user];\n      _success = system.groups_collection.remove_item(bytes32(_group_id), _user);\n    }\n  }\n\n  /**\n  @notice Returns the role id of a user\n  @param _user Address of a user\n  @return {\"_role_id\": \"Role id of the user\"}\n  */\n  function read_user_role_id(address _user)\n           constant\n           public\n           returns (uint256 _role_id)\n  {\n    uint256 _group_id = system.group_ids_by_address[_user];\n    _role_id = system.groups_by_id[_group_id].role_id;\n  }\n\n  /**\n  @notice Returns the user's information\n  @param _user Address of the user\n  @return {\n    \"_group_id\": \"Group id of the user\",\n    \"_role_id\": \"Role id of the user\",\n    \"_document\": \"Information of the user\"\n  }\n  */\n  function read_user(address _user)\n           public\n           constant\n           returns (uint256 _group_id, uint256 _role_id, bytes32 _document)\n  {\n    _group_id = system.group_ids_by_address[_user];\n    _role_id = system.groups_by_id[_group_id].role_id;\n    _document = system.groups_by_id[_group_id].members_by_address[_user].document;\n  }\n\n  /**\n  @notice Returns the id of the first group\n  @return {\"_group_id\": \"Id of the first group\"}\n  */\n  function read_first_group()\n           view\n           external\n           returns (uint256 _group_id)\n  {\n    _group_id = read_first_from_uints(system.groups);\n  }\n\n  /**\n  @notice Returns the id of the last group\n  @return {\"_group_id\": \"Id of the last group\"}\n  */\n  function read_last_group()\n           view\n           external\n           returns (uint256 _group_id)\n  {\n    _group_id = read_last_from_uints(system.groups);\n  }\n\n  /**\n  @notice Returns the id of the previous group depending on the given current group\n  @param _current_group_id Id of the current group\n  @return {\"_group_id\": \"Id of the previous group\"}\n  */\n  function read_previous_group_from_group(uint256 _current_group_id)\n           view\n           external\n           returns (uint256 _group_id)\n  {\n    _group_id = read_previous_from_uints(system.groups, _current_group_id);\n  }\n\n  /**\n  @notice Returns the id of the next group depending on the given current group\n  @param _current_group_id Id of the current group\n  @return {\"_group_id\": \"Id of the next group\"}\n  */\n  function read_next_group_from_group(uint256 _current_group_id)\n           view\n           external\n           returns (uint256 _group_id)\n  {\n    _group_id = read_next_from_uints(system.groups, _current_group_id);\n  }\n\n  /**\n  @notice Returns the total number of groups\n  @return {\"_total_groups\": \"Total number of groups\"}\n  */\n  function read_total_groups()\n           view\n           external\n           returns (uint256 _total_groups)\n  {\n    _total_groups = read_total_uints(system.groups);\n  }\n\n  /**\n  @notice Returns the first user of a group\n  @param _group_id Id of the group\n  @return {\"_user\": \"Address of the user\"}\n  */\n  function read_first_user_in_group(bytes32 _group_id)\n           view\n           external\n           returns (address _user)\n  {\n    _user = read_first_from_indexed_addresses(system.groups_collection, bytes32(_group_id));\n  }\n\n  /**\n  @notice Returns the last user of a group\n  @param _group_id Id of the group\n  @return {\"_user\": \"Address of the user\"}\n  */\n  function read_last_user_in_group(bytes32 _group_id)\n           view\n           external\n           returns (address _user)\n  {\n    _user = read_last_from_indexed_addresses(system.groups_collection, bytes32(_group_id));\n  }\n\n  /**\n  @notice Returns the next user of a group depending on the given current user\n  @param _group_id Id of the group\n  @param _current_user Address of the current user\n  @return {\"_user\": \"Address of the next user\"}\n  */\n  function read_next_user_in_group(bytes32 _group_id, address _current_user)\n           view\n           external\n           returns (address _user)\n  {\n    _user = read_next_from_indexed_addresses(system.groups_collection, bytes32(_group_id), _current_user);\n  }\n\n  /**\n  @notice Returns the previous user of a group depending on the given current user\n  @param _group_id Id of the group\n  @param _current_user Address of the current user\n  @return {\"_user\": \"Address of the last user\"}\n  */\n  function read_previous_user_in_group(bytes32 _group_id, address _current_user)\n           view\n           external\n           returns (address _user)\n  {\n    _user = read_previous_from_indexed_addresses(system.groups_collection, bytes32(_group_id), _current_user);\n  }\n\n  /**\n  @notice Returns the total number of users of a group\n  @param _group_id Id of the group\n  @return {\"_total_users\": \"Total number of users\"}\n  */\n  function read_total_users_in_group(bytes32 _group_id)\n           view\n           external\n           returns (uint256 _total_users)\n  {\n    _total_users = read_total_indexed_addresses(system.groups_collection, bytes32(_group_id));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/common/DaoConstants.sol\ncontract DaoConstants {\n    using SafeMath for uint256;\n    bytes32 EMPTY_BYTES = bytes32(0x0);\n    address EMPTY_ADDRESS = address(0x0);\n\n\n    bytes32 PROPOSAL_STATE_PREPROPOSAL = \"proposal_state_preproposal\";\n    bytes32 PROPOSAL_STATE_DRAFT = \"proposal_state_draft\";\n    bytes32 PROPOSAL_STATE_MODERATED = \"proposal_state_moderated\";\n    bytes32 PROPOSAL_STATE_ONGOING = \"proposal_state_ongoing\";\n    bytes32 PROPOSAL_STATE_CLOSED = \"proposal_state_closed\";\n    bytes32 PROPOSAL_STATE_ARCHIVED = \"proposal_state_archived\";\n\n    uint256 PRL_ACTION_STOP = 1;\n    uint256 PRL_ACTION_PAUSE = 2;\n    uint256 PRL_ACTION_UNPAUSE = 3;\n\n    uint256 COLLATERAL_STATUS_UNLOCKED = 1;\n    uint256 COLLATERAL_STATUS_LOCKED = 2;\n    uint256 COLLATERAL_STATUS_CLAIMED = 3;\n\n    bytes32 INTERMEDIATE_DGD_IDENTIFIER = \"inter_dgd_id\";\n    bytes32 INTERMEDIATE_MODERATOR_DGD_IDENTIFIER = \"inter_mod_dgd_id\";\n    bytes32 INTERMEDIATE_BONUS_CALCULATION_IDENTIFIER = \"inter_bonus_calculation_id\";\n\n    // interactive contracts\n    bytes32 CONTRACT_DAO = \"dao\";\n    bytes32 CONTRACT_DAO_SPECIAL_PROPOSAL = \"dao:special:proposal\";\n    bytes32 CONTRACT_DAO_STAKE_LOCKING = \"dao:stake-locking\";\n    bytes32 CONTRACT_DAO_VOTING = \"dao:voting\";\n    bytes32 CONTRACT_DAO_VOTING_CLAIMS = \"dao:voting:claims\";\n    bytes32 CONTRACT_DAO_SPECIAL_VOTING_CLAIMS = \"dao:svoting:claims\";\n    bytes32 CONTRACT_DAO_IDENTITY = \"dao:identity\";\n    bytes32 CONTRACT_DAO_REWARDS_MANAGER = \"dao:rewards-manager\";\n    bytes32 CONTRACT_DAO_REWARDS_MANAGER_EXTRAS = \"dao:rewards-extras\";\n    bytes32 CONTRACT_DAO_ROLES = \"dao:roles\";\n    bytes32 CONTRACT_DAO_FUNDING_MANAGER = \"dao:funding-manager\";\n    bytes32 CONTRACT_DAO_WHITELISTING = \"dao:whitelisting\";\n    bytes32 CONTRACT_DAO_INFORMATION = \"dao:information\";\n\n    // service contracts\n    bytes32 CONTRACT_SERVICE_ROLE = \"service:role\";\n    bytes32 CONTRACT_SERVICE_DAO_INFO = \"service:dao:info\";\n    bytes32 CONTRACT_SERVICE_DAO_LISTING = \"service:dao:listing\";\n    bytes32 CONTRACT_SERVICE_DAO_CALCULATOR = \"service:dao:calculator\";\n\n    // storage contracts\n    bytes32 CONTRACT_STORAGE_DAO = \"storage:dao\";\n    bytes32 CONTRACT_STORAGE_DAO_COUNTER = \"storage:dao:counter\";\n    bytes32 CONTRACT_STORAGE_DAO_UPGRADE = \"storage:dao:upgrade\";\n    bytes32 CONTRACT_STORAGE_DAO_IDENTITY = \"storage:dao:identity\";\n    bytes32 CONTRACT_STORAGE_DAO_POINTS = \"storage:dao:points\";\n    bytes32 CONTRACT_STORAGE_DAO_SPECIAL = \"storage:dao:special\";\n    bytes32 CONTRACT_STORAGE_DAO_CONFIG = \"storage:dao:config\";\n    bytes32 CONTRACT_STORAGE_DAO_STAKE = \"storage:dao:stake\";\n    bytes32 CONTRACT_STORAGE_DAO_REWARDS = \"storage:dao:rewards\";\n    bytes32 CONTRACT_STORAGE_DAO_WHITELISTING = \"storage:dao:whitelisting\";\n    bytes32 CONTRACT_STORAGE_INTERMEDIATE_RESULTS = \"storage:intermediate:results\";\n\n    bytes32 CONTRACT_DGD_TOKEN = \"t:dgd\";\n    bytes32 CONTRACT_DGX_TOKEN = \"t:dgx\";\n    bytes32 CONTRACT_BADGE_TOKEN = \"t:badge\";\n\n    uint8 ROLES_ROOT = 1;\n    uint8 ROLES_FOUNDERS = 2;\n    uint8 ROLES_PRLS = 3;\n    uint8 ROLES_KYC_ADMINS = 4;\n\n    uint256 QUARTER_DURATION = 90 days;\n\n    bytes32 CONFIG_MINIMUM_LOCKED_DGD = \"min_dgd_participant\";\n    bytes32 CONFIG_MINIMUM_DGD_FOR_MODERATOR = \"min_dgd_moderator\";\n    bytes32 CONFIG_MINIMUM_REPUTATION_FOR_MODERATOR = \"min_reputation_moderator\";\n\n    bytes32 CONFIG_LOCKING_PHASE_DURATION = \"locking_phase_duration\";\n    bytes32 CONFIG_QUARTER_DURATION = \"quarter_duration\";\n    bytes32 CONFIG_VOTING_COMMIT_PHASE = \"voting_commit_phase\";\n    bytes32 CONFIG_VOTING_PHASE_TOTAL = \"voting_phase_total\";\n    bytes32 CONFIG_INTERIM_COMMIT_PHASE = \"interim_voting_commit_phase\";\n    bytes32 CONFIG_INTERIM_PHASE_TOTAL = \"interim_voting_phase_total\";\n\n    bytes32 CONFIG_DRAFT_QUORUM_FIXED_PORTION_NUMERATOR = \"draft_quorum_fixed_numerator\";\n    bytes32 CONFIG_DRAFT_QUORUM_FIXED_PORTION_DENOMINATOR = \"draft_quorum_fixed_denominator\";\n    bytes32 CONFIG_DRAFT_QUORUM_SCALING_FACTOR_NUMERATOR = \"draft_quorum_sfactor_numerator\";\n    bytes32 CONFIG_DRAFT_QUORUM_SCALING_FACTOR_DENOMINATOR = \"draft_quorum_sfactor_denominator\";\n    bytes32 CONFIG_VOTING_QUORUM_FIXED_PORTION_NUMERATOR = \"vote_quorum_fixed_numerator\";\n    bytes32 CONFIG_VOTING_QUORUM_FIXED_PORTION_DENOMINATOR = \"vote_quorum_fixed_denominator\";\n    bytes32 CONFIG_VOTING_QUORUM_SCALING_FACTOR_NUMERATOR = \"vote_quorum_sfactor_numerator\";\n    bytes32 CONFIG_VOTING_QUORUM_SCALING_FACTOR_DENOMINATOR = \"vote_quorum_sfactor_denominator\";\n    bytes32 CONFIG_FINAL_REWARD_SCALING_FACTOR_NUMERATOR = \"final_reward_sfactor_numerator\";\n    bytes32 CONFIG_FINAL_REWARD_SCALING_FACTOR_DENOMINATOR = \"final_reward_sfactor_denominator\";\n\n    bytes32 CONFIG_DRAFT_QUOTA_NUMERATOR = \"draft_quota_numerator\";\n    bytes32 CONFIG_DRAFT_QUOTA_DENOMINATOR = \"draft_quota_denominator\";\n    bytes32 CONFIG_VOTING_QUOTA_NUMERATOR = \"voting_quota_numerator\";\n    bytes32 CONFIG_VOTING_QUOTA_DENOMINATOR = \"voting_quota_denominator\";\n\n    bytes32 CONFIG_MINIMAL_QUARTER_POINT = \"minimal_qp\";\n    bytes32 CONFIG_QUARTER_POINT_SCALING_FACTOR = \"quarter_point_scaling_factor\";\n    bytes32 CONFIG_REPUTATION_POINT_SCALING_FACTOR = \"rep_point_scaling_factor\";\n\n    bytes32 CONFIG_MODERATOR_MINIMAL_QUARTER_POINT = \"minimal_mod_qp\";\n    bytes32 CONFIG_MODERATOR_QUARTER_POINT_SCALING_FACTOR = \"mod_qp_scaling_factor\";\n    bytes32 CONFIG_MODERATOR_REPUTATION_POINT_SCALING_FACTOR = \"mod_rep_point_scaling_factor\";\n\n    bytes32 CONFIG_QUARTER_POINT_DRAFT_VOTE = \"quarter_point_draft_vote\";\n    bytes32 CONFIG_QUARTER_POINT_VOTE = \"quarter_point_vote\";\n    bytes32 CONFIG_QUARTER_POINT_INTERIM_VOTE = \"quarter_point_interim_vote\";\n\n    /// this is per 10000 ETHs\n    bytes32 CONFIG_QUARTER_POINT_MILESTONE_COMPLETION_PER_10000ETH = \"q_p_milestone_completion\";\n\n    bytes32 CONFIG_BONUS_REPUTATION_NUMERATOR = \"bonus_reputation_numerator\";\n    bytes32 CONFIG_BONUS_REPUTATION_DENOMINATOR = \"bonus_reputation_denominator\";\n\n    bytes32 CONFIG_SPECIAL_PROPOSAL_COMMIT_PHASE = \"special_proposal_commit_phase\";\n    bytes32 CONFIG_SPECIAL_PROPOSAL_PHASE_TOTAL = \"special_proposal_phase_total\";\n\n    bytes32 CONFIG_SPECIAL_QUOTA_NUMERATOR = \"config_special_quota_numerator\";\n    bytes32 CONFIG_SPECIAL_QUOTA_DENOMINATOR = \"config_special_quota_denominator\";\n\n    bytes32 CONFIG_SPECIAL_PROPOSAL_QUORUM_NUMERATOR = \"special_quorum_numerator\";\n    bytes32 CONFIG_SPECIAL_PROPOSAL_QUORUM_DENOMINATOR = \"special_quorum_denominator\";\n\n    bytes32 CONFIG_MAXIMUM_REPUTATION_DEDUCTION = \"config_max_reputation_deduction\";\n    bytes32 CONFIG_PUNISHMENT_FOR_NOT_LOCKING = \"config_punishment_not_locking\";\n\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_QP_NUM = \"config_rep_per_extra_qp_num\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_QP_DEN = \"config_rep_per_extra_qp_den\";\n\n    bytes32 CONFIG_MAXIMUM_MODERATOR_REPUTATION_DEDUCTION = \"config_max_m_rp_deduction\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_NUM = \"config_rep_per_extra_m_qp_num\";\n    bytes32 CONFIG_REPUTATION_PER_EXTRA_MODERATOR_QP_DEN = \"config_rep_per_extra_m_qp_den\";\n\n    bytes32 CONFIG_PORTION_TO_MODERATORS_NUM = \"config_mod_portion_num\";\n    bytes32 CONFIG_PORTION_TO_MODERATORS_DEN = \"config_mod_portion_den\";\n\n    bytes32 CONFIG_DRAFT_VOTING_PHASE = \"config_draft_voting_phase\";\n\n    bytes32 CONFIG_REPUTATION_POINT_BOOST_FOR_BADGE = \"config_rp_boost_per_badge\";\n\n    bytes32 CONFIG_VOTE_CLAIMING_DEADLINE = \"config_claiming_deadline\";\n\n    bytes32 CONFIG_PREPROPOSAL_COLLATERAL = \"config_preproposal_collateral\";\n\n    bytes32 CONFIG_MAX_FUNDING_FOR_NON_DIGIX = \"config_max_funding_nonDigix\";\n    bytes32 CONFIG_MAX_MILESTONES_FOR_NON_DIGIX = \"config_max_milestones_nonDigix\";\n    bytes32 CONFIG_NON_DIGIX_PROPOSAL_CAP_PER_QUARTER = \"config_nonDigix_proposal_cap\";\n\n    bytes32 CONFIG_PROPOSAL_DEAD_DURATION = \"config_dead_duration\";\n    bytes32 CONFIG_CARBON_VOTE_REPUTATION_BONUS = \"config_cv_reputation\";\n}\n\n// File: contracts/storage/DaoIdentityStorage.sol\ncontract DaoIdentityStorage is ResolverClient, DaoConstants, DirectoryStorage {\n\n    // struct for KYC details\n    // doc is the IPFS doc hash for any information regarding this KYC\n    // id_expiration is the UTC timestamp at which this KYC will expire\n    // at any time after this, the user's KYC is invalid, and that user\n    // MUST re-KYC before doing any proposer related operation in DigixDAO\n    struct KycDetails {\n        bytes32 doc;\n        uint256 id_expiration;\n    }\n\n    // a mapping of address to the KYC details\n    mapping (address => KycDetails) kycInfo;\n\n    constructor(address _resolver)\n        public\n    {\n        require(init(CONTRACT_STORAGE_DAO_IDENTITY, _resolver));\n        require(initialize_directory());\n    }\n\n    function create_group(uint256 _role_id, bytes32 _name, bytes32 _document)\n        public\n        returns (bool _success, uint256 _group_id)\n    {\n        require(sender_is(CONTRACT_DAO_IDENTITY));\n        (_success, _group_id) = internal_create_group(_role_id, _name, _document);\n        require(_success);\n    }\n\n    function create_role(uint256 _role_id, bytes32 _name)\n        public\n        returns (bool _success)\n    {\n        require(sender_is(CONTRACT_DAO_IDENTITY));\n        _success = internal_create_role(_role_id, _name);\n        require(_success);\n    }\n\n    function update_add_user_to_group(uint256 _group_id, address _user, bytes32 _document)\n        public\n        returns (bool _success)\n    {\n        require(sender_is(CONTRACT_DAO_IDENTITY));\n        _success = internal_update_add_user_to_group(_group_id, _user, _document);\n        require(_success);\n    }\n\n    function update_remove_group_user(address _user)\n        public\n        returns (bool _success)\n    {\n        require(sender_is(CONTRACT_DAO_IDENTITY));\n        _success = internal_destroy_group_user(_user);\n        require(_success);\n    }\n\n    function update_kyc(address _user, bytes32 _doc, uint256 _id_expiration)\n        public\n    {\n        require(sender_is(CONTRACT_DAO_IDENTITY));\n        kycInfo[_user].doc = _doc;\n        kycInfo[_user].id_expiration = _id_expiration;\n    }\n\n    function read_kyc_info(address _user)\n        public\n        view\n        returns (bytes32 _doc, uint256 _id_expiration)\n    {\n        _doc = kycInfo[_user].doc;\n        _id_expiration = kycInfo[_user].id_expiration;\n    }\n\n    function is_kyc_approved(address _user)\n        public\n        view\n        returns (bool _approved)\n    {\n        uint256 _id_expiration;\n        (,_id_expiration) = read_kyc_info(_user);\n        _approved = _id_expiration > now;\n    }\n}\n\n// File: contracts/storage/DaoWhitelistingStorage.sol\n// This contract is basically created to restrict read access to\n// ethereum accounts, and whitelisted contracts\ncontract DaoWhitelistingStorage is ResolverClient, DaoConstants {\n\n    // we want to avoid the scenario in which an on-chain bribing contract\n    // can be deployed to distribute funds in a trustless way by verifying\n    // on-chain votes. This mapping marks whether a contract address is whitelisted\n    // to read from the read functions in DaoStorage, DaoSpecialStorage, etc.\n    mapping (address => bool) public whitelist;\n\n    constructor(address _resolver)\n        public\n    {\n        require(init(CONTRACT_STORAGE_DAO_WHITELISTING, _resolver));\n    }\n\n    function setWhitelisted(address _contractAddress, bool _senderIsAllowedToRead)\n        public\n    {\n        require(sender_is(CONTRACT_DAO_WHITELISTING));\n        whitelist[_contractAddress] = _senderIsAllowedToRead;\n    }\n}\n\n// File: contracts/common/DaoWhitelistingCommon.sol\ncontract DaoWhitelistingCommon is ResolverClient, DaoConstants {\n\n    function daoWhitelistingStorage()\n        internal\n        view\n        returns (DaoWhitelistingStorage _contract)\n    {\n        _contract = DaoWhitelistingStorage(get_contract(CONTRACT_STORAGE_DAO_WHITELISTING));\n    }\n\n    /**\n    @notice Check if a certain address is whitelisted to read sensitive information in the storage layer\n    @dev if the address is an account, it is allowed to read. If the address is a contract, it has to be in the whitelist\n    */\n    function senderIsAllowedToRead()\n        internal\n        view\n        returns (bool _senderIsAllowedToRead)\n    {\n        // msg.sender is allowed to read only if its an EOA or a whitelisted contract\n        _senderIsAllowedToRead = (msg.sender == tx.origin) || daoWhitelistingStorage().whitelist(msg.sender);\n    }\n}\n\n// File: contracts/common/IdentityCommon.sol\ncontract IdentityCommon is DaoWhitelistingCommon {\n\n    modifier if_root() {\n        require(identity_storage().read_user_role_id(msg.sender) == ROLES_ROOT);\n        _;\n    }\n\n    modifier if_founder() {\n        require(is_founder());\n        _;\n    }\n\n    function is_founder()\n        internal\n        view\n        returns (bool _isFounder)\n    {\n        _isFounder = identity_storage().read_user_role_id(msg.sender) == ROLES_FOUNDERS;\n    }\n\n    modifier if_prl() {\n        require(identity_storage().read_user_role_id(msg.sender) == ROLES_PRLS);\n        _;\n    }\n\n    modifier if_kyc_admin() {\n        require(identity_storage().read_user_role_id(msg.sender) == ROLES_KYC_ADMINS);\n        _;\n    }\n\n    function identity_storage()\n        internal\n        view\n        returns (DaoIdentityStorage _contract)\n    {\n        _contract = DaoIdentityStorage(get_contract(CONTRACT_STORAGE_DAO_IDENTITY));\n    }\n}\n\n// File: contracts/interactive/DaoIdentity.sol\n/**\n@title Contract to manage the admin roles in DAO (founders, prls, kyc admins)\n@author Digix Holdings\n*/\ncontract DaoIdentity is IdentityCommon {\n\n    /**\n    @notice Constructor (create initial roles, groups)\n    @param _resolver Address of Contract Resolver\n    */\n    constructor(address _resolver)\n        public\n    {\n        require(init(CONTRACT_DAO_IDENTITY, _resolver));\n        // create the three roles and the three corresponding groups\n        // the root role, and root group are already created, with only the contract deployer in it\n        // After deployment, the contract deployer will call addGroupUser to add a multi-sig to be another root\n        // The multi-sig will then call removeGroupUser to remove the contract deployer from root role\n        // From then on, the multi-sig will be the only root account\n        identity_storage().create_role(ROLES_FOUNDERS, \"founders\");\n        identity_storage().create_role(ROLES_PRLS, \"prls\");\n        identity_storage().create_role(ROLES_KYC_ADMINS, \"kycadmins\");\n        identity_storage().create_group(ROLES_FOUNDERS, \"founders_group\", \"\"); // group_id = 2\n        identity_storage().create_group(ROLES_PRLS, \"prls_group\", \"\"); // group_id = 3\n        identity_storage().create_group(ROLES_KYC_ADMINS, \"kycadmins_group\", \"\"); // group_id = 4\n    }\n\n    /**\n    @notice Function to add an address to a group (only root can call this function)\n    @param _group_id ID of the group to be added in\n    @param _user Ethereum address of the user\n    @param _doc hash of IPFS doc containing details of this user\n    */\n    function addGroupUser(uint256 _group_id, address _user, bytes32 _doc)\n        public\n        if_root()\n    {\n        identity_storage().update_add_user_to_group(_group_id, _user, _doc);\n    }\n\n    /**\n    @notice Function to remove a user from group (only root can call this)\n    @param _user Ethereum address of the user to be removed from their group\n    */\n    function removeGroupUser(address _user)\n        public\n        if_root()\n    {\n        identity_storage().update_remove_group_user(_user);\n    }\n\n    /**\n    @notice Function to update the KYC data of user (expiry data of valid KYC) (can only be called by the KYC ADMIN role)\n    @param _user Ethereum address of the user\n    @param _doc hash of the IPFS doc containing kyc information about this user\n    @param _id_expiration expiry date of the KYC\n    */\n    function updateKyc(address _user, bytes32 _doc, uint256 _id_expiration)\n        public\n        if_kyc_admin()\n    {\n        privateUpdateKyc(_user, _doc, _id_expiration);\n    }\n\n    /**\n    @notice Function to update the KYC data of multiple users (expiry data of valid KYC) (can only be called by the KYC ADMIN role)\n    @param _users Ethereum addresses of the users\n    @param _docs hashes of the IPFS docs containing kyc information about these users\n    @param _id_expirations expiry dates of the KYC docs for these users\n    */\n    function bulkUpdateKyc(address[] _users, bytes32[] _docs, uint256[] _id_expirations)\n        external\n        if_kyc_admin()\n    {\n        uint256 _n = _users.length;\n        for (uint256 _i = 0; _i < _n; _i++) {\n            privateUpdateKyc(_users[_i], _docs[_i], _id_expirations[_i]);\n        }\n    }\n\n    function privateUpdateKyc(address _user, bytes32 _doc, uint256 _id_expiration)\n        private\n    {\n        identity_storage().update_kyc(_user, _doc, _id_expiration);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_group_id\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_doc\",\"type\":\"bytes32\"}],\"name\":\"addGroupUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_doc\",\"type\":\"bytes32\"},{\"name\":\"_id_expiration\",\"type\":\"uint256\"}],\"name\":\"updateKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeGroupUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_docs\",\"type\":\"bytes32[]\"},{\"name\":\"_id_expirations\",\"type\":\"uint256[]\"}],\"name\":\"bulkUpdateKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000005f60ef7e1443f82ca7de947711f0966ca6e3b5"
}