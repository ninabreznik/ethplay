{
  "address": "0x1c7febf68dfdbf0c14543403a0749fa71d961b82",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Stable",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity ^0.4.25;\n    \n   // ----------------------------------------------------------------------------------------------\n   // SocialRemit.com\n   // Developer: Nechesov Andrey \n   // Contacts:  fb.com/Nechesov \n   // Stable Coin Algorithm: 1SREUR = 1EUR \n   // Send ETH directly on contract address and get SREUR tokens!\n   // Aprrove address of contract withdraw tokens from your account \n   // And call sreur_change_on_eth function, get ETH on your account\n   // ----------------------------------------------------------------------------------------------       \n  \n     \n  contract Stable {\n                  \n\n      using SafeMath for uint;      \n      \n      address public c = 0x7a0e91c4204355e0A6bBf746dc0B7E32dFEFDecf; \n      address public address_for_tokens; \n      address public owner;                 \n      uint public etheur = 225;                 \n      uint public etheur_time = 1559918545;   \n      uint eth_min = 10**14;              \n      uint eth_max = 10**24;\n      uint procent = 5;\n\n      constructor() public{\n        owner = msg.sender;            \n        address_for_tokens = address(this);\n      }\n      \n      function() payable public{ \n\n          uint tnow = now;                                 \n          uint _amount_eth = msg.value;\n          address _address = msg.sender;\n          uint _amount = 0;\n\n          require (tnow < etheur_time + 86400*14);\n          require(_amount_eth >= eth_min);\n          require(_amount_eth < eth_max);\n\n          uint procent_final = 100-procent;\n          uint etheur_price = etheur.mul(procent_final).div(100);\n          \n          _amount = _amount_eth.mul(etheur_price).mul(10**8).div(10**18);          \n          \n          require(transfer(_address, _amount));        \n      }\n\n      function sreur_change_on_eth(uint _amount_tokens) public returns (bool) {\n\n          uint tnow = now; \n\n          require (tnow < etheur_time + 86400*14);                                \n\n          address _address = msg.sender;\n          require(_amount_tokens >= 1);\n          require(_amount_tokens < 300000000);\n          uint _amount_eth = 0;\n\n          uint procent_final = 100+procent;\n          uint etheur_price = etheur.mul(procent_final).div(100);\n\n          _amount_eth = _amount_tokens.mul(10**8).mul(10**18).div(etheur_price.mul(10**8));\n\n          require(address(this).balance >= _amount_eth);\n\n          require(transfer_from(_address, address_for_tokens, _amount_tokens.mul(10**8)));\n\n          \n          _address.transfer(_amount_eth); \n\n          return true;\n      } \n\n      function add_money() onlyOwner payable public{ \n\n      }        \n      \n      function withdraw() onlyOwner public returns (bool) {\n          \n          owner.transfer(address(this).balance);\n          return true;\n      }\n\n      function withdraw_tokens(uint _amount) onlyOwner public returns (bool) {\n          \n          require(c.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, _amount.mul(10**8)));        \n\n          return true;\n      }   \n\n      function set_etheur(uint _etheur) onlyOwner public returns (bool) {         \n          etheur = _etheur;\n          etheur_time = now;\n          return true;\n      }\n\n      function set_procent(uint _procent) onlyOwner public returns (bool) {         \n          procent = _procent;\n          return true;\n      }\n\n      function set_owner(address _address) onlyOwner public returns (bool) {         \n          owner = _address;\n          return true;\n      }\n\n      function set_address_for_tokens(address _address) onlyOwner public returns (bool) {         \n          \n          address_for_tokens = _address;\n          return true;\n      }\n\n      function transfer(address _address,uint _amount) private returns (bool) {                 \n        \n        require(c.call(bytes4(keccak256(\"transfer(address,uint256)\")), _address, _amount));        \n\n        return true;\n      }\n\n      function transfer_from(address _address_from, address _address_to, uint _amount) private returns (bool) {                 \n        \n        require(c.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _address_from, _address_to, _amount));        \n\n        return true;\n      }\n\n      modifier onlyOwner() {          \n\n          require (msg.sender == owner);\n          \n          _;\n      }\n\n }\n\n \n  library SafeMath {\n\n    function mul(uint a, uint b) internal pure returns (uint) {      \n\n      uint c = a * b;\n      require(c / a == b);\n\n      return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n      require(b > 0); \n      uint256 c = a / b;      \n\n      return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n      require(b <= a);\n      uint c = a - b;\n\n      return c;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n      uint c = a + b;\n      require(c >= a);\n\n      return c;\n    }\n\n    function mod(uint a, uint b) internal pure returns (uint) {\n      require(b != 0);\n      return a % b;\n    }\n    \n  }",
  "bytecode": "6080604052737a0e91c4204355e0a6bbf746dc0b7e32dfefdecf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e1600355635cfa77d1600455655af3107a400060055569d3c21bcecceda1000000600655600560075534801561008e57600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f4f806101206000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324830247146101a55780633ccfd60b146101d05780634e7cfd6d146101ff5780636452409b1461024457806376b8e7961461029f5780637cb97b2b146102a95780637ef407ab146103045780638901deae1461035b5780638da5cb5b146103a057806391a29e0d146103f7578063c3da42b814610422578063d56a06af14610479578063e3c44ae4146104be575b600080600080600080429550349450339350600092506212750060045401861015156100f057600080fd5b600554851015151561010157600080fd5b6006548510151561011157600080fd5b600754606403915061014160646101338460035461050390919063ffffffff16565b61052e90919063ffffffff16565b9050610186670de0b6b3a76400006101786305f5e10061016a858a61050390919063ffffffff16565b61050390919063ffffffff16565b61052e90919063ffffffff16565b92506101928484610558565b151561019d57600080fd5b505050505050005b3480156101b157600080fd5b506101ba61067c565b6040518082815260200191505060405180910390f35b3480156101dc57600080fd5b506101e5610682565b604051808215151515815260200191505060405180910390f35b34801561020b57600080fd5b5061022a60048036038101908080359060200190929190505050610767565b604051808215151515815260200191505060405180910390f35b34801561025057600080fd5b50610285600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107d5565b604051808215151515815260200191505060405180910390f35b6102a761087d565b005b3480156102b557600080fd5b506102ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108db565b604051808215151515815260200191505060405180910390f35b34801561031057600080fd5b50610319610983565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036757600080fd5b50610386600480360381019080803590602001909291905050506109a9565b604051808215151515815260200191505060405180910390f35b3480156103ac57600080fd5b506103b5610b49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040357600080fd5b5061040c610b6f565b6040518082815260200191505060405180910390f35b34801561042e57600080fd5b50610437610b75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048557600080fd5b506104a460048036038101908080359060200190929190505050610b9a565b604051808215151515815260200191505060405180910390f35b3480156104ca57600080fd5b506104e960048036038101908080359060200190929190505050610c0f565b604051808215151515815260200191505060405180910390f35b600080828402905082848281151561051757fe5b0414151561052457600080fd5b8091505092915050565b60008060008311151561054057600080fd5b828481151561054b57fe5b0490508091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390207c0100000000000000000000000000000000000000000000000000000000900484846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303816000875af192505050151561067257600080fd5b6001905092915050565b60045481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561075f573d6000803e3d6000fd5b506001905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c557600080fd5b8160078190555060019050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561083357600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108d957600080fd5b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093957600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000804294506212750060045401851015156109ca57600080fd5b339350600187101515156109dd57600080fd5b6311e1a300871015156109ef57600080fd5b600092506007546064019150610a236064610a158460035461050390919063ffffffff16565b61052e90919063ffffffff16565b9050610a7e610a3f6305f5e1008361050390919063ffffffff16565b610a70670de0b6b3a7640000610a626305f5e1008c61050390919063ffffffff16565b61050390919063ffffffff16565b61052e90919063ffffffff16565b9250823073ffffffffffffffffffffffffffffffffffffffff163110151515610aa657600080fd5b610ae984600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ae46305f5e1008b61050390919063ffffffff16565b610da4565b1515610af457600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610b3a573d6000803e3d6000fd5b50600195505050505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bf857600080fd5b816003819055504260048190555060019050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390207c0100000000000000000000000000000000000000000000000000000000900433610d136305f5e1008661050390919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303816000875af1925050501515610d9b57600080fd5b60019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f7432353629000000000000000000000000000000000000000000000000000000815250602501905060405180910390207c010000000000000000000000000000000000000000000000000000000090048585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506000604051808303816000875af1925050501515610f1857600080fd5b6001905093925050505600a165627a7a723058206818af6ac2467c3ae37fcb1fd369bfa4e5f136f9907af2d63f9e96b6a40d40f60029"
}