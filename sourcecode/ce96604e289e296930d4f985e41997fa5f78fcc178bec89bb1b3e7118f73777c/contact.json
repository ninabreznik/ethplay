{
  "address": "0x6d5cac36c1ae39f41d52393b7a425d0a610ad9f2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "LLToken",
  "contractName": "LLToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-26\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private rentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!rentrancy_lock);\n    rentrancy_lock = true;\n    _;\n    rentrancy_lock = false;\n  }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner {\n    owner = pendingOwner;\n    pendingOwner = 0x0;\n  }\n}\n\ncontract Operational is Claimable {\n    address public operator;\n\n    function Operational(address _operator) {\n      operator = _operator;\n    }\n\n    modifier onlyOperator() {\n      require(msg.sender == operator);\n      _;\n    }\n\n    function transferOperator(address newOperator) onlyOwner {\n      require(newOperator != address(0));\n      operator = newOperator;\n    }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract LockableToken is StandardToken, ReentrancyGuard {\n\n    struct LockedBalance {\n        address owner;\n        uint256 value;\n        uint256 releaseTime;\n    }\n\n    mapping (uint => LockedBalance) public lockedBalances;\n    uint public lockedBalanceCount;\n\n    event TransferLockedToken(address indexed from, address indexed to, uint256 value, uint256 releaseTime);\n    event ReleaseLockedBalance(address indexed owner, uint256 value, uint256 releaseTime);\n\n    // ç» _to è½¬ç§» _value ä¸ªéå®å° _releaseTime ç token\n    function transferLockedToken(address _to, uint256 _value, uint256 _releaseTime) nonReentrant returns (bool) {\n        require(_releaseTime > now);\n        require(_releaseTime.sub(1 years) < now);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        lockedBalances[lockedBalanceCount] = LockedBalance({owner: _to, value: _value, releaseTime: _releaseTime});\n        lockedBalanceCount++;\n        TransferLockedToken(msg.sender, _to, _value, _releaseTime);\n        return true;\n    }\n\n    // æ¥ address çéå®ä½é¢\n    function lockedBalanceOf(address _owner) constant returns (uint256 value) {\n        for (uint i = 0; i < lockedBalanceCount; i++) {\n            LockedBalance lockedBalance = lockedBalances[i];\n            if (_owner == lockedBalance.owner) {\n                value = value.add(lockedBalance.value);\n            }\n        }\n        return value;\n    }\n\n    // è§£éææå·²å°éå®æ¶é´ç token\n    function releaseLockedBalance () returns (uint256 releaseAmount) {\n        uint index = 0;\n        while (index < lockedBalanceCount) {\n            if (now >= lockedBalances[index].releaseTime) {\n                releaseAmount += lockedBalances[index].value;\n                unlockBalanceByIndex(index);\n            } else {\n                index++;\n            }\n        }\n        return releaseAmount;\n    }\n\n    function unlockBalanceByIndex (uint index) internal {\n        LockedBalance lockedBalance = lockedBalances[index];\n        balances[lockedBalance.owner] = balances[lockedBalance.owner].add(lockedBalance.value);\n        ReleaseLockedBalance(lockedBalance.owner, lockedBalance.value, lockedBalance.releaseTime);\n        lockedBalances[index] = lockedBalances[lockedBalanceCount - 1];\n        delete lockedBalances[lockedBalanceCount - 1];\n        lockedBalanceCount--;\n    }\n\n}\n\nlibrary DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) constant returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) constant returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal returns (DateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = 0;//getHour(timestamp);\n\n                // Minute\n                dt.minute = 0;//getMinute(timestamp);\n\n                // Second\n                dt.second = 0;//getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = 0;//getWeekday(timestamp);\n\n        }\n\n        function getYear(uint timestamp) constant returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) constant returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) constant returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) constant returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) constant returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) constant returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n}\n\ncontract ReleaseableToken is Operational, LockableToken {\n    using SafeMath for uint;\n    using DateTime for uint256;\n    bool secondYearUpdate = false; // Limit æ´æ°å°ç¬¬äºå¹´\n    uint256 public releasedSupply; // å·²éæ¾çæ°é\n    uint256 public createTime; // åçº¦åå»ºæ¶é´\n    uint256 standardDecimals = 100000000; // ç±äºæ8ä½å°æ°ï¼ä¼ è¿æ¥çåæ°é½æ¯ä¸å¸¦åé¢çå°æ°ï¼è¦æä¹100000000çæä½æè½ä¿è¯æ°éçº§ä¸è´\n    uint256 public totalSupply = standardDecimals.mul(1000000000); // æ»é10äº¿\n    uint256 public limitSupplyPerYear = standardDecimals.mul(60000000); // æ¯å¹´éæ¾çLLTçéé¢ï¼ç¬¬ä¸å¹´6000ä¸\n    uint256 public dailyLimit = standardDecimals.mul(1000000); // æ¯å¤©éæ¾çéé¢\n\n    event ReleaseSupply(address receiver, uint256 value, uint256 releaseTime);\n    event UnfreezeAmount(address receiver, uint256 amount, uint256 unfreezeTime);\n\n    struct FrozenRecord {\n        uint256 amount; // å»ç»çæ°é\n        uint256 unfreezeTime; // è§£å»çæ¶é´\n    }\n\n    mapping (uint => FrozenRecord) public frozenRecords;\n    uint public frozenRecordsCount = 0;\n\n    function ReleaseableToken(\n                    uint256 initialSupply,\n                    uint256 initReleasedSupply,\n                    address operator\n                ) Operational(operator) {\n        totalSupply = initialSupply;\n        releasedSupply = initReleasedSupply;\n        createTime = now;\n        balances[msg.sender] = initReleasedSupply;\n    }\n\n    // å¨ timestamp æ¶é´ç¹éæ¾ releaseAmount ç token\n    function releaseSupply(uint256 releaseAmount, uint256 timestamp) onlyOperator returns(uint256 _actualRelease) {\n        require(timestamp >= createTime && timestamp <= now);\n        require(!judgeReleaseRecordExist(timestamp));\n        require(releaseAmount <= dailyLimit);\n        updateLimit();\n        require(limitSupplyPerYear > 0);\n        if (releaseAmount > limitSupplyPerYear) {\n            if (releasedSupply.add(limitSupplyPerYear) > totalSupply) {\n                releasedSupply = totalSupply;\n                releaseAmount = totalSupply.sub(releasedSupply);\n            } else {\n                releasedSupply = releasedSupply.add(limitSupplyPerYear);\n                releaseAmount = limitSupplyPerYear;\n            }\n            limitSupplyPerYear = 0;\n        } else {\n            if (releasedSupply.add(releaseAmount) > totalSupply) {\n                releasedSupply = totalSupply;\n                releaseAmount = totalSupply.sub(releasedSupply);\n            } else {\n                releasedSupply = releasedSupply.add(releaseAmount);\n            }\n            limitSupplyPerYear = limitSupplyPerYear.sub(releaseAmount);\n        }\n        frozenRecords[frozenRecordsCount] = FrozenRecord(releaseAmount, timestamp.add(26 * 1 weeks));\n        frozenRecordsCount++;\n        ReleaseSupply(msg.sender, releaseAmount, timestamp);\n        return releaseAmount;\n    }\n\n    // å¤æ­ timestamp è¿ä¸å¤©ææ²¡æå·²ç»éæ¾çè®°å½\n    function judgeReleaseRecordExist(uint256 timestamp) internal returns(bool _exist) {\n        bool exist = false;\n        if (frozenRecordsCount > 0) {\n            for (uint index = 0; index < frozenRecordsCount; index++) {\n                if ((frozenRecords[index].unfreezeTime.parseTimestamp().year == (timestamp.add(26 * 1 weeks)).parseTimestamp().year)\n                    && (frozenRecords[index].unfreezeTime.parseTimestamp().month == (timestamp.add(26 * 1 weeks)).parseTimestamp().month)\n                    && (frozenRecords[index].unfreezeTime.parseTimestamp().day == (timestamp.add(26 * 1 weeks)).parseTimestamp().day)) {\n                    exist = true;\n                }\n            }\n        }\n        return exist;\n    }\n\n    // æ´æ°æ¯å¹´éæ¾tokençéå¶æ°é\n    function updateLimit() internal {\n        if (createTime.add(1 years) < now && !secondYearUpdate) {\n            limitSupplyPerYear = standardDecimals.mul(120000000);\n            secondYearUpdate = true;\n        }\n        if (createTime.add(2 * 1 years) < now) {\n            if (releasedSupply < totalSupply) {\n                limitSupplyPerYear = totalSupply.sub(releasedSupply);\n            }\n        }\n    }\n\n    // è§£å» releaseSupply ä¸­éæ¾ç token\n    function unfreeze() onlyOperator returns(uint256 _unfreezeAmount) {\n        uint256 unfreezeAmount = 0;\n        uint index = 0;\n        while (index < frozenRecordsCount) {\n            if (frozenRecords[index].unfreezeTime < now) {\n                unfreezeAmount += frozenRecords[index].amount;\n                unfreezeByIndex(index);\n            } else {\n                index++;\n            }\n        }\n        return unfreezeAmount;\n    }\n\n    function unfreezeByIndex (uint index) internal {\n        FrozenRecord unfreezeRecord = frozenRecords[index];\n        balances[owner] = balances[owner].add(unfreezeRecord.amount);\n        UnfreezeAmount(owner, unfreezeRecord.amount, unfreezeRecord.unfreezeTime);\n        frozenRecords[index] = frozenRecords[frozenRecordsCount - 1];\n        delete frozenRecords[frozenRecordsCount - 1];\n        frozenRecordsCount--;\n    }\n\n    // è®¾ç½®æ¯å¤©éæ¾ token çéé¢\n    function setDailyLimit(uint256 _dailyLimit) onlyOwner {\n        dailyLimit = _dailyLimit;\n    }\n}\n\ncontract LLToken is ReleaseableToken {\n    string public standard = '2017082602';\n    string public name = 'LLToken';\n    string public symbol = 'LLT';\n    uint8 public decimals = 8;\n\n    function LLToken(\n                     uint256 initialSupply,\n                     uint256 initReleasedSupply,\n                     address operator\n                     ) ReleaseableToken(initialSupply, initReleasedSupply, operator) {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"transferLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLockedBalance\",\"outputs\":[{\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedBalanceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitSupplyPerYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"_unfreezeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"releaseSupply\",\"outputs\":[{\"name\":\"_actualRelease\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenRecordsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenRecords\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unfreezeTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"initReleasedSupply\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unfreezeTime\",\"type\":\"uint256\"}],\"name\":\"UnfreezeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"TransferLockedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseLockedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600660006101000a81548160ff0219169083151502179055506000600960006101000a81548160ff0219169083151502179055506305f5e100600c556200006b633b9aca00600c54620002fe64010000000002620025c3179091906401000000009004565b600d55620000976303938700600c54620002fe64010000000002620025c3179091906401000000009004565b600e55620000c2620f4240600c54620002fe64010000000002620025c3179091906401000000009004565b600f5560006011556040805190810160405280600a81526020017f3230313730383236303200000000000000000000000000000000000000000000815250601290805190602001906200011792919062000335565b506040805190810160405280600781526020017f4c4c546f6b656e00000000000000000000000000000000000000000000000000815250601390805190602001906200016592919062000335565b506040805190810160405280600381526020017f4c4c54000000000000000000000000000000000000000000000000000000000081525060149080519060200190620001b392919062000335565b506008601560006101000a81548160ff021916908360ff1602179055503415620001dc57600080fd5b60405160608062002ca5833981016040528080519060200190919080519060200190919080519060200190919050505b8282825b805b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5082600d8190555081600a8190555042600b8190555081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050505b505050620003e4565b600080828402905060008414806200032157508284828115156200031e57fe5b04145b15156200032a57fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037857805160ff1916838001178555620003a9565b82800160010185558215620003a9579182015b82811115620003a85782518255916020019190600101906200038b565b5b509050620003b89190620003bc565b5090565b620003e191905b80821115620003dd576000816000905550600101620003c3565b5090565b90565b6128b180620003f46000396000f3006060604052361561017e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101835780630851762a14610212578063095ea7b31461027557806318160ddd146102cf57806323b872dd146102f857806329605e7714610371578063313ce567146103aa578063323661f6146103d957806334f96971146104025780633972323a1461042b5780634e71e0c81461049c57806355dfc97c146104b1578063570ca735146104da578063593557361461052f5780635a3b7e421461057c57806361dcd7ab1461060b57806367eeba0c146106345780636a28f0001461065d57806370a08231146106865780638da5cb5b146106d357806395d89b4114610728578063a9059cbb146107b7578063b20d30a914610811578063b813c62714610834578063dd62ed3e1461085d578063e30c3978146108c9578063e3bb34451461091e578063ec00d2a41461095e578063f25efc4914610987578063f2fde38b146109c5575b600080fd5b341561018e57600080fd5b6101966109fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d75780820151818401525b6020810190506101bb565b50505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021d57600080fd5b61025b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610a9c565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b6102b5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ce8565b604051808215151515815260200191505060405180910390f35b34156102da57600080fd5b6102e2610e70565b6040518082815260200191505060405180910390f35b341561030357600080fd5b610357600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e76565b604051808215151515815260200191505060405180910390f35b341561037c57600080fd5b6103a8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611127565b005b34156103b557600080fd5b6103bd611204565b604051808260ff1660ff16815260200191505060405180910390f35b34156103e457600080fd5b6103ec611217565b6040518082815260200191505060405180910390f35b341561040d57600080fd5b610415611287565b6040518082815260200191505060405180910390f35b341561043657600080fd5b61044c600480803590602001909190505061128d565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34156104a757600080fd5b6104af6112d7565b005b34156104bc57600080fd5b6104c46113db565b6040518082815260200191505060405180910390f35b34156104e557600080fd5b6104ed6113e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561053a57600080fd5b610566600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611407565b6040518082815260200191505060405180910390f35b341561058757600080fd5b61058f6114ba565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d05780820151818401525b6020810190506105b4565b50505050905090810190601f1680156105fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061657600080fd5b61061e611558565b6040518082815260200191505060405180910390f35b341561063f57600080fd5b61064761155e565b6040518082815260200191505060405180910390f35b341561066857600080fd5b610670611564565b6040518082815260200191505060405180910390f35b341561069157600080fd5b6106bd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611637565b6040518082815260200191505060405180910390f35b34156106de57600080fd5b6106e6611681565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073357600080fd5b61073b6116a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561077c5780820151818401525b602081019050610760565b50505050905090810190601f1680156107a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107c257600080fd5b6107f7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611744565b604051808215151515815260200191505060405180910390f35b341561081c57600080fd5b61083260048080359060200190919050506118e0565b005b341561083f57600080fd5b610847611947565b6040518082815260200191505060405180910390f35b341561086857600080fd5b6108b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061194d565b6040518082815260200191505060405180910390f35b34156108d457600080fd5b6108dc6119d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561092957600080fd5b61094860048080359060200190919080359060200190919050506119fb565b6040518082815260200191505060405180910390f35b341561096957600080fd5b610971611c99565b6040518082815260200191505060405180910390f35b341561099257600080fd5b6109a86004808035906020019091905050611c9f565b604051808381526020018281526020019250505060405180910390f35b34156109d057600080fd5b6109fc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611cc3565b005b60138054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a945780601f10610a6957610100808354040283529160200191610a94565b820191906000526020600020905b815481529060010190602001808311610a7757829003601f168201915b505050505081565b6000600660009054906101000a900460ff16151515610aba57600080fd5b6001600660006101000a81548160ff0219169083151502179055504282111515610ae357600080fd5b42610afb6301e1338084611d6490919063ffffffff16565b101515610b0757600080fd5b610b5983600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d6490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506060604051908101604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525060076000600854815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506008600081548092919060010191905055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8ff82a97675f0e72452c37c968c2c6121849f421aab8583cb6978f1e8263b3ff8585604051808381526020018281526020019250505060405180910390a3600190505b6000600660006101000a81548160ff0219169083151502179055505b9392505050565b600080821480610d7457506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610d7f57600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600d5481565b600080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610f4a83600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d7e90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fdf83600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d6490919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110358382611d6490919063ffffffff16565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111be57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b601560009054906101000a900460ff1681565b600080600090505b60085481101561127f576007600082815260200190815260200160002060020154421015156112715760076000828152602001908152602001600020600101548201915061126c81611d9d565b61127a565b80806001019150505b61121f565b8191505b5090565b60085481565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b600e5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008091505b6008548210156114af576007600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156114a15761149e816001015484611d7e90919063ffffffff16565b92505b5b8180600101925050611410565b8292505b5050919050565b60128054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115505780601f1061152557610100808354040283529160200191611550565b820191906000526020600020905b81548152906001019060200180831161153357829003601f168201915b505050505081565b600b5481565b600f5481565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115c557600080fd5b60009150600090505b60115481101561162d57426010600083815260200190815260200160002060010154101561161f5760106000828152602001908152602001600020600001548201915061161a8161202a565b611628565b80806001019150505b6115ce565b8192505b5b505090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60148054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561173c5780601f106117115761010080835404028352916020019161173c565b820191906000526020600020905b81548152906001019060200180831161171f57829003601f168201915b505050505081565b600061179882600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d6490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061182d82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d7e90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193b57600080fd5b80600f819055505b5b50565b600a5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5957600080fd5b600b548210158015611a6b5750428211155b1515611a7657600080fd5b611a7f8261223d565b151515611a8b57600080fd5b600f548311151515611a9c57600080fd5b611aa4612379565b6000600e54111515611ab557600080fd5b600e54831115611b3657600d54611ad9600e54600a54611d7e90919063ffffffff16565b1115611b0657600d54600a81905550611aff600a54600d54611d6490919063ffffffff16565b9250611b29565b611b1d600e54600a54611d7e90919063ffffffff16565b600a81905550600e5492505b6000600e81905550611bb3565b600d54611b4e84600a54611d7e90919063ffffffff16565b1115611b7b57600d54600a81905550611b74600a54600d54611d6490919063ffffffff16565b9250611b97565b611b9083600a54611d7e90919063ffffffff16565b600a819055505b611bac83600e54611d6490919063ffffffff16565b600e819055505b6040805190810160405280848152602001611bda62eff10085611d7e90919063ffffffff16565b81525060106000601154815260200190815260200160002060008201518160000155602082015181600101559050506011600081548092919060010191905055507f3f9e3494cddacfc8ffad423303d89b42edd68c349155fc54854d5d6dbe0a5e39338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a18290505b5b92915050565b60115481565b60106020528060005260406000206000915090508060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d1e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000828211151515611d7257fe5b81830390505b92915050565b6000808284019050838110151515611d9257fe5b8091505b5092915050565b6000600760008381526020019081526020016000209050611e2e8160010154600460008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d7e90919063ffffffff16565b600460008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1f6c0a9bf76af8bc82d309c3041a10d100dafe019e5271d0e418fc57ffab3ab082600101548360020154604051808381526020018281526020019250505060405180910390a2600760006001600854038152602001908152602001600020600760008481526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155905050600760006001600854038152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090555050600860008154809291906001900391905055505b5050565b60006010600083815260200190815260200160002090506120b88160000154600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d7e90919063ffffffff16565b600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc34f1fead36337f1ed421262dd3660824fdc849a066c9ae4699ffcd1b6e0ba506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600001548360010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a160106000600160115403815260200190815260200160002060106000848152602001908152602001600020600082015481600001556001820154816001015590505060106000600160115403815260200190815260200160002060008082016000905560018201600090555050601160008154809291906001900391905055505b5050565b60008060008091506000601154111561236e57600090505b60115481101561236d5761227d61227862eff10086611d7e90919063ffffffff16565b61243b565b6000015161ffff166122a4601060008481526020019081526020016000206001015461243b565b6000015161ffff1614801561230157506122d26122cd62eff10086611d7e90919063ffffffff16565b61243b565b6020015160ff166122f8601060008481526020019081526020016000206001015461243b565b6020015160ff16145b8015612355575061232661232162eff10086611d7e90919063ffffffff16565b61243b565b6040015160ff1661234c601060008481526020019081526020016000206001015461243b565b6040015160ff16145b1561235f57600191505b5b8080600101915050612255565b5b8192505b5050919050565b426123936301e13380600b54611d7e90919063ffffffff16565b1080156123ad5750600960009054906101000a900460ff16155b156123ed576123cb6307270e00600c546125c390919063ffffffff16565b600e819055506001600960006101000a81548160ff0219169083151502179055505b426124076303c26700600b54611d7e90919063ffffffff16565b101561243857600d54600a54101561243757612430600a54600d54611d6490919063ffffffff16565b600e819055505b5b5b565b612443612831565b60008060008060009350612456866125f7565b856000019061ffff16908161ffff16815250506124786107b261ffff166126a3565b612489866000015161ffff166126a3565b039250826301e285000284019350826107b286600001510361ffff16036301e133800284019350600191505b600c8260ff1611151561250e576124d08286600001516126dd565b60ff16620151800290508584820111156124fb5781856020019060ff16908160ff168152505061250e565b80840193505b81806001019250506124b5565b600191505b612525856020015186600001516126dd565b60ff168260ff1611151561256d578584620151800111156125575781856040019060ff16908160ff168152505061256d565b62015180840193505b8180600101925050612513565b6000856060019060ff16908160ff16815250506000856080019060ff16908160ff168152505060008560a0019060ff16908160ff168152505060008560c0019060ff16908160ff16815250505b50505050919050565b600080828402905060008414806125e457508284828115156125e157fe5b04145b15156125ec57fe5b8091505b5092915050565b600080600080600092506301e133808581151561261057fe5b046107b261ffff1601915061262a6107b261ffff166126a3565b6126378361ffff166126a3565b039050806301e285000283019250806107b2830361ffff16036301e1338002830192505b848311156126975761266f600183036127b0565b15612682576301e285008303925061268c565b6301e13380830392505b60018203915061265b565b8193505b505050919050565b6000600182039150610190828115156126b857fe5b046064838115156126c557fe5b046004848115156126d257fe5b04030190505b919050565b600060018360ff1614806126f4575060038360ff16145b80612702575060058360ff16145b80612710575060078360ff16145b8061271e575060088360ff16145b8061272c5750600a8360ff16145b8061273a5750600c8360ff16145b1561274857601f90506127aa565b60048360ff16148061275d575060068360ff16145b8061276b575060098360ff16145b806127795750600b8360ff16145b1561278757601e90506127aa565b612790826127b0565b1561279e57601d90506127aa565b601c90506127aa565b5b5b5b92915050565b60008060048361ffff168115156127c357fe5b0661ffff161415156127d8576000905061282c565b600060648361ffff168115156127ea57fe5b0661ffff161415156127ff576001905061282c565b60006101908361ffff1681151561281257fe5b0661ffff16141515612827576000905061282c565b600190505b919050565b60e060405190810160405280600061ffff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff16815250905600a165627a7a723058206e78af9a981f3cde556ac0d854f5164f74a63e76e1814eb08c951aab8cd3711e0029000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000006379da05b60000000000000000000000000000f60428d2a287ab7f136c26a9603e753387dca91f",
  "constructorArguments": "000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000006379da05b60000000000000000000000000000f60428d2a287ab7f136c26a9603e753387dca91f"
}