{
  "address": "0x7a866752ef9cf54bee099826b908e3fe93b66c35",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MaryCash",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.16;\n\ncontract Token{\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns   (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n自定义的MaryCash代币\n */\ncontract MaryCash is Token {\n \n    /**\n    代币名称，例如\"MaryCash\"\n     */\n    string public name;  \n    /**\n    返回token使用的小数点后几位。比如如果设置为3，就是支持0.001表示.\n    */                 \n    uint8 public decimals; \n    /**\n    token简称, GAVC\n    */              \n    string public symbol;               \n \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    \n    /**\n    构造方法\n     */\n    function MaryCash(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n        // 设置初始总量\n        totalSupply = _initialAmount * 10 ** uint256(_decimalUnits); \n        /**\n        初始token数量给予消息发送者，因为是构造函数，所以这里也是合约的创建者        \n        */\n        balances[msg.sender] = totalSupply; \n        name = _tokenName;                   \n        decimals = _decimalUnits;          \n        symbol = _tokenSymbol;\n    }\n \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //默认totalSupply 不会超过最大值 (2^256 - 1).\n        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        require(_to != 0x0);\n        //从消息发送者账户中减去token数量_value\n        balances[msg.sender] -= _value;\n        //往接收账户增加token数量_value\n        balances[_to] += _value;\n        //触发转币交易事件\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        //接收账户增加token数量_value\n        balances[_to] += _value;\n        //支出账户_from减去token数量_value\n        balances[_from] -= _value; \n        //消息发送者可以从账户_from中转出的数量减少_value\n        allowed[_from][msg.sender] -= _value;\n        //触发转币交易事件\n        Transfer(_from, _to, _value);\n        return true;\n    }\n \n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) public returns (bool success) { \n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        //允许_spender从_owner中转出的token数\n        return allowed[_owner][_spender];\n    }   \n}",
  "bytecode": "6060604052341561000f57600080fd5b60405161085038038061085083398101604052808051919060200180518201919060200180519190602001805190910190505b60ff8216600a0a84026000818155600160a060020a03331681526004602052604090205560018380516100799291602001906100a7565b506002805460ff191660ff8416179055600381805161009c9291602001906100a7565b505b50505050610147565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e857805160ff1916838001178555610115565b82800160010185558215610115579182015b828111156101155782518255916020019190600101906100fa565b5b50610122929150610126565b5090565b61014491905b80821115610122576000815560010161012c565b5090565b90565b6106fa806101566000396000f300606060405236156100965763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009b578063095ea7b31461012657806318160ddd1461015c57806323b872dd14610181578063313ce567146101bd57806370a08231146101e657806395d89b4114610217578063a9059cbb146102a2578063dd62ed3e146102d8575b600080fd5b34156100a657600080fd5b6100ae61030f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100eb5780820151818401525b6020016100d2565b50505050905090810190601f1680156101185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013157600080fd5b610148600160a060020a03600435166024356103ad565b604051901515815260200160405180910390f35b341561016757600080fd5b61016f61041a565b60405190815260200160405180910390f35b341561018c57600080fd5b610148600160a060020a0360043581169060243516604435610420565b604051901515815260200160405180910390f35b34156101c857600080fd5b6101d061050a565b60405160ff909116815260200160405180910390f35b34156101f157600080fd5b61016f600160a060020a0360043516610513565b60405190815260200160405180910390f35b341561022257600080fd5b6100ae610532565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100eb5780820151818401525b6020016100d2565b50505050905090810190601f1680156101185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ad57600080fd5b610148600160a060020a03600435166024356105d0565b604051901515815260200160405180910390f35b34156102e357600080fd5b61016f600160a060020a03600435811690602435166106a1565b60405190815260200160405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a0383166000908152600460205260408120548290108015906104705750600160a060020a0380851660009081526005602090815260408083203390941683529290522054829010155b151561047b57600080fd5b600160a060020a03808416600081815260046020908152604080832080548801905588851680845281842080548990039055600583528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60025460ff1681565b600160a060020a0381166000908152600460205260409020545b919050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081565b600160a060020a0333166000908152600460205260408120548290108015906106125750600160a060020a038316600090815260046020526040902054828101115b151561061d57600080fd5b600160a060020a038316151561063257600080fd5b600160a060020a033381166000818152600460205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600560209081526040808320938516835292905220545b929150505600a165627a7a72305820d8ba9526d9d47eb379f1415f69273a0542d780ecedfccc0ec2f52e89c37409870029000000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000084d6172794361736800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d43540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000084d6172794361736800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d43540000000000000000000000000000000000000000000000000000000000"
}