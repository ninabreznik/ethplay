{
  "address": "0xb1518db22ecd0d6621ffe196b8c3046b3b5fed89",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Zeus",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\n//\n//             ZEUS SMART CONTRACT\n//\n// Earn on investment 4% daily!\n// Receive your 3% cash-back when invest with referrer!\n// Earn 3% from each referral deposit!\n//\n//\n// HOW TO TAKE PARTICIPANT:\n// Just send ETH to contract address (min. 0.01 ETH)\n//\n//\n// HOW TO RECEIVE MY DIVIDENDS?\n// Send 0 ETH to contract. No limits.\n//\n//\n// INTEREST\n// IF contract balance < 500 ETH = 4% per day\n// IF contract balance > 500 ETH = 3% per day\n// IF contract balance > 2000 ETH = 2% per day\n//\n//\n// DO NOT HOLD YOUR DIVIDENDS ON CONTRACT ACCOUNT!\n// Max one-time payout is your dividends for 3 days of work.\n// It would be better if your will request your dividends each day.\n//\n// For more information visit http://zeus-contract.com\n//\n// Telegram channel: https://t.me/gorgona_io\n//\n// For support and requests telegram: @ZAURMAHEAMEDSHUIN\n\npragma solidity ^0.4.24;\n\n\n// service which controls amount of investments per day\n// this service does not allow fast grow!\nlibrary GrowingControl {\n    using GrowingControl for data;\n\n    // base structure for control investments per day\n    struct data {\n        uint min;\n        uint max;\n\n        uint startAt;\n        uint maxAmountPerDay;\n        mapping(uint => uint) investmentsPerDay;\n    }\n\n    // increase day investments\n    function addInvestment(data storage control, uint amount) internal\n    {\n        control.investmentsPerDay[getCurrentDay()] += amount;\n    }\n\n    // get today current max investment\n    function getMaxInvestmentToday(data storage control) internal view returns (uint)\n    {\n        if (control.startAt == 0) {\n            return 10000 ether; // disabled controlling, allow 10000 eth\n        }\n\n        if (control.startAt > now) {\n            return 10000 ether; // not started, allow 10000 eth\n        }\n\n        return control.maxAmountPerDay - control.getTodayInvestment();\n    }\n\n    function getCurrentDay() internal view returns (uint)\n    {\n        return now / 24 hours;\n    }\n\n    // get amount of today investments\n    function getTodayInvestment(data storage control) internal view returns (uint)\n    {\n        return control.investmentsPerDay[getCurrentDay()];\n    }\n}\n\ncontract Zeus {\n    using GrowingControl for GrowingControl.data;\n\n    // contract owner set to 0x0000000000000000000000000000000000000000,\n    address owner = 0x0000000000000000000000000000000000000000;\n\n    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\n\n    // current interest\n    uint public currentInterest = 3;\n\n    // total deposited eth\n    uint public depositAmount;\n\n    // total paid out eth\n    uint public paidAmount;\n\n    // current round (restart)\n    uint public round = 1;\n\n    // last investment date\n    uint public lastPaymentDate;\n\n    // fee for advertising purposes\n    uint public advertFee = 10;\n\n    // project admins fee\n    uint public devFee = 5;\n\n    // maximum profit per investor (x2)\n    uint public profitThreshold = 2;\n\n    // addr of project admins (not owner of the contract)\n    address public devAddr;\n\n    // advert addr\n    address public advertAddr;\n\n    // investors addresses\n    address[] public addresses;\n\n    // mapping address to Investor\n    mapping(address => Investor) public investors;\n\n    // currently on restart phase or not?\n    bool public pause;\n\n    // Thunderstorm structure\n    struct Thunderstorm {\n        address addr;\n        uint deposit;\n        uint from;\n    }\n\n    // Investor structure\n    struct Investor\n    {\n        uint id;\n        uint deposit; // deposit amount\n        uint deposits; // deposits count\n        uint paidOut; // total paid out\n        uint date; // last date of investment or paid out\n        address referrer;\n    }\n\n    event Invest(address indexed addr, uint amount, address referrer);\n    event Payout(address indexed addr, uint amount, string eventType, address from);\n    event NextRoundStarted(uint indexed round, uint date, uint deposit);\n    event ThunderstormUpdate(address addr, string eventType);\n\n    Thunderstorm public thunderstorm;\n    GrowingControl.data private growingControl;\n\n    // only contract creator access\n    modifier onlyOwner {if (msg.sender == owner) _;}\n\n    constructor() public {\n        owner = msg.sender;\n        devAddr = msg.sender;\n\n        addresses.length = 1;\n\n        // set bounces for growingControl service\n        growingControl.min = 30 ether;\n        growingControl.max = 500 ether;\n        \n        advertAddr = 0x404648C63D19DB0d23203CB146C0b573D4E79E0c;\n    }\n\n    // change advert address, only admin access (works before ownership resignation)\n    function setAdvertAddr(address addr) onlyOwner public {\n        advertAddr = addr;\n    }\n    // set date which enables control of growing function (limitation of investments per day)\n    function setGrowingControlStartAt(uint startAt) onlyOwner public {\n        growingControl.startAt = startAt;\n    }\n\n    function getGrowingControlStartAt() public view returns (uint) {\n        return growingControl.startAt;\n    }\n\n    // set max of investments per day. Only devAddr have access to this function\n    function setGrowingMaxPerDay(uint maxAmountPerDay) public {\n        require(maxAmountPerDay >= growingControl.min && maxAmountPerDay <= growingControl.max, \"incorrect amount\");\n        require(msg.sender == devAddr, \"Only dev team have access to this function\");\n        growingControl.maxAmountPerDay = maxAmountPerDay;\n    }\n    \n    function getInvestorData(address[] _addr, uint[] _deposit, uint[] _date, address[] _referrer) onlyOwner public {\n        // add initiated investors\n        for (uint i = 0; i < _addr.length; i++) {\n            uint id = addresses.length;\n            if (investors[_addr[i]].deposit == 0) {\n                addresses.push(_addr[i]);\n                depositAmount += _deposit[i];\n            }\n\n            investors[_addr[i]] = Investor(id, _deposit[i], 1, 0, _date[i], _referrer[i]);\n\n        }\n        lastPaymentDate = now;\n    }\n\n    // main function, which accept new investments and do dividends payouts\n    // if you send 0 ETH to this function, you will receive your dividends\n    function() payable public {\n\n        // ensure that payment not from contract\n        if (isContract()) {\n            revert();\n        }\n\n        // if contract is on restarting phase - do some work before restart\n        if (pause) {\n            doRestart();\n            msg.sender.transfer(msg.value); // return all money to sender\n\n            return;\n        }\n\n        if (0 == msg.value) {\n            payDividends(); // do pay out\n            return;\n        }\n\n        require(msg.value >= MINIMUM_INVEST, \"Too small amount, minimum 0.01 ether\");\n        Investor storage user = investors[msg.sender];\n\n        if (user.id == 0) { // if no saved address, save it\n            user.id = addresses.push(msg.sender);\n            user.date = now;\n\n            // check referrer\n            address referrer = bytesToAddress(msg.data);\n            if (investors[referrer].deposit > 0 && referrer != msg.sender) {\n                user.referrer = referrer;\n            }\n        } else {\n            payDividends(); // else pay dividends before reinvest\n        }\n\n        // get max investment amount for the current day, according to sent amount\n        // all excesses will be returned to sender later\n        uint investment = min(growingControl.getMaxInvestmentToday(), msg.value);\n        require(investment > 0, \"Too much investments today\");\n\n        // update investor\n        user.deposit += investment;\n        user.deposits += 1;\n\n        emit Invest(msg.sender, investment, user.referrer);\n\n        depositAmount += investment;\n        lastPaymentDate = now;\n\n\n        if (devAddr.send(investment / 100 * devFee)) {\n            // project fee\n        }\n\n        if (advertAddr.send(investment / 100 * advertFee)) {\n            // advert fee\n        }\n\n        // referrer commission for all deposits\n        uint bonusAmount = investment / 100 * currentInterest;\n\n        // user have referrer\n        if (user.referrer > 0x0) {\n            if (user.referrer.send(bonusAmount)) { // pay referrer commission\n                emit Payout(user.referrer, bonusAmount, \"referral\", msg.sender);\n            }\n\n            if (user.deposits == 1) { // only the first deposit cashback\n                if (msg.sender.send(bonusAmount)) {\n                    emit Payout(msg.sender, bonusAmount, \"cash-back\", 0);\n                }\n            }\n        } else if (thunderstorm.addr > 0x0 && thunderstorm.from + 10 days > now) { // if investor does not have referrer, Thunderstorm takes the bonus\n            // also check Thunderstorm is active\n            if (thunderstorm.addr.send(bonusAmount)) { // pay bonus to current Thunderstorm\n                emit Payout(thunderstorm.addr, bonusAmount, \"thunderstorm\", msg.sender);\n            }\n        }\n\n        // check and maybe update current interest rate\n        considerCurrentInterest();\n        // add investment to the growingControl service\n        growingControl.addInvestment(investment);\n        // Thunderstorm has changed? do some checks\n        considerThunderstorm(investment);\n\n        // return excess eth (if growingControl is active)\n        if (msg.value > investment) {\n            msg.sender.transfer(msg.value - investment);\n        }\n    }\n\n    function getTodayInvestment() view public returns (uint)\n    {\n        return growingControl.getTodayInvestment();\n    }\n\n    function getMaximumInvestmentPerDay() view public returns (uint)\n    {\n        return growingControl.maxAmountPerDay;\n    }\n\n    function payDividends() private {\n        require(investors[msg.sender].id > 0, \"Investor not found\");\n        uint amount = getInvestorDividendsAmount(msg.sender);\n\n        if (amount == 0) {\n            return;\n        }\n\n        // save last paid out date\n        investors[msg.sender].date = now;\n\n        // save total paid out for investor\n        investors[msg.sender].paidOut += amount;\n\n        // save total paid out for contract\n        paidAmount += amount;\n\n        uint balance = address(this).balance;\n\n        // check contract balance, if not enough - do restart\n        if (balance < amount) {\n            pause = true;\n            amount = balance;\n        }\n\n        msg.sender.transfer(amount);\n        emit Payout(msg.sender, amount, \"payout\", 0);\n\n        // if investor has reached the limit (x2 profit) - delete him\n        if (investors[msg.sender].paidOut >= investors[msg.sender].deposit * profitThreshold) {\n            delete investors[msg.sender];\n        }\n    }\n\n    // remove all investors and prepare data for the new round!\n    function doRestart() private {\n        uint txs;\n\n        for (uint i = addresses.length - 1; i > 0; i--) {\n            delete investors[addresses[i]]; // remove investor\n            addresses.length -= 1; // decrease addr length\n            if (txs++ == 150) { // stop on 150 investors (to prevent out of gas exception)\n                return;\n            }\n        }\n\n        emit NextRoundStarted(round, now, depositAmount);\n        pause = false; // stop pause, play\n        round += 1; // increase round number\n        depositAmount = 0;\n        paidAmount = 0;\n        lastPaymentDate = now;\n    }\n\n    function getInvestorCount() public view returns (uint) {\n        return addresses.length - 1;\n    }\n\n    function considerCurrentInterest() internal\n    {\n        uint interest;\n\n        // if balance is over 2k ETH - set interest rate for 2%\n        if (depositAmount >= 2000 ether) {\n            interest = 2;\n        } else if (depositAmount >= 500 ether) { // if balance is more than 500 ETH - set interest rate for 3%\n            interest = 3;\n        } else {\n            interest = 4; // base = 4%\n        }\n\n        // if interest has not changed, return\n        if (interest >= currentInterest) {\n            return;\n        }\n\n        currentInterest = interest;\n    }\n\n    // Thunderstorm!\n    // make the biggest investment today - and receive ref-commissions from ALL investors who not have a referrer in the next 10 days\n    function considerThunderstorm(uint amount) internal {\n        // if current Thunderstorm dead, delete him\n        if (thunderstorm.addr > 0x0 && thunderstorm.from + 10 days < now) {\n            thunderstorm.addr = 0x0;\n            thunderstorm.deposit = 0;\n            emit ThunderstormUpdate(msg.sender, \"expired\");\n        }\n\n        // if the investment bigger than current Thunderstorm made - change Thunderstorm\n        if (amount > thunderstorm.deposit) {\n            thunderstorm = Thunderstorm(msg.sender, amount, now);\n            emit ThunderstormUpdate(msg.sender, \"change\");\n        }\n    }\n\n    // calculate total dividends for investor from the last investment/payout date\n    // be careful  - max. one-time amount can cover 5 days of work\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\n        uint time = min(now - investors[addr].date, 5 days);\n        return investors[addr].deposit / 100 * currentInterest * time / 1 days;\n    }\n\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    // check that there is no contract in the middle\n    function isContract() internal view returns (bool) {\n        return msg.sender != tx.origin;\n    }\n\n    // get min value from a and b\n    function min(uint a, uint b) public pure returns (uint) {\n        if (a < b) return a;\n        else return b;\n    }\n}",
  "bytecode": "608060405260008054600160a060020a031916905560036001908155600455600a6006556005600755600260085534801561003957600080fd5b506000805433600160a060020a031991821681179092556009805490911690911790556001610069600b826100af565b506801a055690d9db80000601155681b1ae4d6e2ef500000601255600a8054600160a060020a03191673404648c63d19db0d23203cb146c0b573d4e79e0c1790556100f9565b8154818355818111156100d3576000838152602090206100d39181019083016100d8565b505050565b6100f691905b808211156100f257600081556001016100de565b5090565b90565b61155e806101086000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312fa769f81146106f4578063146ca5311461071b5780633d4cfa6b14610730578063419759f5146107455780635c5e0aca1461075a5780636827e764146107745780636f4a61cd146107895780636f7bc9be1461079e5780637ae2b5c7146107fb5780637aeabb39146108165780638456cb591461082b5780638ce53e5b146108545780638d4feb0214610869578063960524e31461089a578063a699cd20146108af578063a816d0c0146108c4578063b1ad4c48146109c4578063c0b4d404146109e5578063c703f44c146109fd578063c9bde0b714610a12578063ce8804c914610a4f578063da09c72c14610a70578063e425136114610a85578063edf26d9b14610a9a578063f974821a14610ab2575b600080600080610156610ac7565b1561016057600080fd5b600d5460ff16156101a557610173610acf565b60405133903480156108fc02916000818181858888f1935050505015801561019f573d6000803e3d6000fd5b506106ee565b3415156101b9576101b4610be1565b6106ee565b662386f26fc1000034101561023d576040805160e560020a62461bcd028152602060048201526024808201527f546f6f20736d616c6c20616d6f756e742c206d696e696d756d20302e3031206560448201527f7468657200000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600c602052604090208054909450151561033857600b80546001810180835560009283527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99091018054600160a060020a031916331790558555426004860155604080516020601f369081018290048202830182019093528282526102db939192908190840183828082843750610d97945050505050565b600160a060020a0381166000908152600c60205260408120600101549194501080156103105750600160a060020a0383163314155b1561033357600584018054600160a060020a031916600160a060020a0385161790555b610340565b610340610be1565b61035361034d6011610d9e565b34610df2565b9150600082116103ad576040805160e560020a62461bcd02815260206004820152601a60248201527f546f6f206d75636820696e766573746d656e747320746f646179000000000000604482015290519081900360640190fd5b60018481018054840190556002850180549091019055600584015460408051848152600160a060020a039092166020830152805133927fee95ece288ef025c30f775af415a35412f49ed31d3bfce8a57b7273cd046e8cb92908290030190a2600280548301905542600555600954600754604051600160a060020a03909216916064850490910280156108fc02916000818181858888f15050600a54600654604051600160a060020a039092169450606487040280156108fc02935091506000818181858888f1505060015460058801546064870490910294506000600160a060020a03909116111592506105cf915050576005840154604051600160a060020a039091169082156108fc029083906000818181858888f193505050501561053c5760058401546040805183815233818301526060602082018190526008908201527f726566657272616c00000000000000000000000000000000000000000000000060808201529051600160a060020a03909216916000805160206115138339815191529181900360a00190a25b8360020154600114156105ca57604051339082156108fc029083906000818181858888f19350505050156105ca57604080518281526000818301526060602082018190526009908201527f636173682d6261636b0000000000000000000000000000000000000000000000608082015290513391600080516020611513833981519152919081900360a00190a25b610693565b600e546000600160a060020a039091161180156105f5575042600e60020154620d2f0001115b1561069357600e54604051600160a060020a039091169082156108fc029083906000818181858888f193505050501561069357600e54604080518381523381830152606060208201819052600c908201527f7468756e64657273746f726d000000000000000000000000000000000000000060808201529051600160a060020a03909216916000805160206115138339815191529181900360a00190a25b61069b610e0c565b6106ac60118363ffffffff610e5f16565b6106b582610e89565b813411156106ee5760405133903484900380156108fc02916000818181858888f193505050501580156106ec573d6000803e3d6000fd5b505b50505050005b34801561070057600080fd5b50610709610fda565b60408051918252519081900360200190f35b34801561072757600080fd5b50610709610fe0565b34801561073c57600080fd5b50610709610fe6565b34801561075157600080fd5b50610709610ff1565b34801561076657600080fd5b50610772600435610ff7565b005b34801561078057600080fd5b506107096110ee565b34801561079557600080fd5b506107096110f4565b3480156107aa57600080fd5b506107bf600160a060020a03600435166110fa565b6040805196875260208701959095528585019390935260608501919091526080840152600160a060020a031660a0830152519081900360c00190f35b34801561080757600080fd5b50610709600435602435610df2565b34801561082257600080fd5b50610709611138565b34801561083757600080fd5b5061084061113e565b604080519115158252519081900360200190f35b34801561086057600080fd5b50610709611147565b34801561087557600080fd5b5061087e61114d565b60408051600160a060020a039092168252519081900360200190f35b3480156108a657600080fd5b5061070961115c565b3480156108bb57600080fd5b50610709611166565b3480156108d057600080fd5b506040805160206004803580820135838102808601850190965280855261077295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061116c9650505050505050565b3480156109d057600080fd5b50610709600160a060020a0360043516611381565b3480156109f157600080fd5b506107726004356113e5565b348015610a0957600080fd5b506107096113fd565b348015610a1e57600080fd5b50610a27611403565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b348015610a5b57600080fd5b50610772600160a060020a036004351661141b565b348015610a7c57600080fd5b5061087e61144e565b348015610a9157600080fd5b5061070961145d565b348015610aa657600080fd5b5061087e60043561146e565b348015610abe57600080fd5b50610709611496565b333214155b90565b600b54600090600019015b6000811115610b7a57600c6000600b83815481101515610af657fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812081815560018101829055600281018290556003810182905560048101919091556005018054600160a060020a0319169055600b80546000190190610b5e90826114cb565b50600182019160961415610b7157610bdd565b60001901610ada565b60045460025460408051428152602081019290925280517f41e0e575fee9a84427a3daa1baf5afe4f8a7992a652413b3234b5dcdb485132f9281900390910190a2600d805460ff1916905560048054600101905560006002819055600355426005555b5050565b336000908152600c602052604081205481908110610c49576040805160e560020a62461bcd02815260206004820152601260248201527f496e766573746f72206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b610c5233611381565b9150811515610c6057610bdd565b50336000908152600c602052604090204260048201556003908101805483019055805482019055303181811015610ca257600d805460ff191660011790559050805b604051339083156108fc029084906000818181858888f19350505050158015610ccf573d6000803e3d6000fd5b50604080518381526000818301526060602082018190526006908201527f7061796f75740000000000000000000000000000000000000000000000000000608082015290513391600080516020611513833981519152919081900360a00190a2600854336000908152600c602052604090206001810154600390910154910211610bdd57336000908152600c6020526040812081815560018101829055600281018290556003810182905560048101919091556005018054600160a060020a03191690555050565b6014015190565b6000816002015460001415610dbe575069021e19e0c9bab2400000610ded565b4282600201541115610ddb575069021e19e0c9bab2400000610ded565b610de48261149c565b82600301540390505b919050565b600081831015610e03575081610e06565b50805b92915050565b6000686c6b935b8bbd400000600254101515610e2a57506002610e48565b600254681b1ae4d6e2ef50000011610e4457506003610e48565b5060045b6001548110610e5657610e5c565b60018190555b50565b80826004016000610e6e6114c2565b81526020810191909152604001600020805490910190555050565b600e546000600160a060020a03909116118015610eaf575042600e60020154620d2f0001105b15610f3057600e8054600160a060020a03191690556000600f5560408051338152602081018290526007818301527f6578706972656400000000000000000000000000000000000000000000000000606082015290517f1f8f8f6420dcd0a3b64c076e568e0d83bf7fef3b9e19919335b7b2432ffe20479181900360800190a15b600f54811115610e5c57604080516060818101835233808352602080840186905242938501849052600e8054600160a060020a03191683179055600f86905560109390935583519081529182018390526006828401527f6368616e676500000000000000000000000000000000000000000000000000009082015290517f1f8f8f6420dcd0a3b64c076e568e0d83bf7fef3b9e19919335b7b2432ffe20479181900360800190a150565b60035481565b60045481565b662386f26fc1000081565b60025481565b601154811080159061100b57506012548111155b1515611061576040805160e560020a62461bcd02815260206004820152601060248201527f696e636f727265637420616d6f756e7400000000000000000000000000000000604482015290519081900360640190fd5b600954600160a060020a031633146110e9576040805160e560020a62461bcd02815260206004820152602a60248201527f4f6e6c7920646576207465616d20686176652061636365737320746f2074686960448201527f732066756e6374696f6e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b601455565b60075481565b60065481565b600c602052600090815260409020805460018201546002830154600384015460048501546005909501549394929391929091600160a060020a031686565b60055481565b600d5460ff1681565b60145490565b600a54600160a060020a031681565b600b546000190190565b60135490565b600080548190600160a060020a031633141561137957600091505b85518210156113745750600b548551600c906000908890859081106111a857fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020600101546000141561124b57600b86838151811015156111ee57fe5b6020908102919091018101518254600181018455600093845291909220018054600160a060020a031916600160a060020a03909216919091179055845185908390811061123757fe5b602090810290910101516002805490910190555b60c060405190810160405280828152602001868481518110151561126b57fe5b9060200190602002015181526020016001815260200160008152602001858481518110151561129657fe5b90602001906020020151815260200184848151811015156112b357fe5b90602001906020020151600160a060020a0316815250600c600088858151811015156112db57fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a815481600160a060020a030219169083600160a060020a031602179055509050508180600101925050611187565b426005555b505050505050565b600160a060020a0381166000908152600c602052604081206004015481906113ae90420362069780610df2565b60018054600160a060020a0386166000908152600c6020526040902090910154919250620151809160649004028202049392505050565b600054600160a060020a0316331415610e5c57601355565b60015481565b600e54600f54601054600160a060020a039092169183565b600054600160a060020a0316331415610e5c57600a8054600160a060020a038316600160a060020a031990911617905550565b600954600160a060020a031681565b6000611469601161149c565b905090565b600b80548290811061147c57fe5b600091825260209091200154600160a060020a0316905081565b60085481565b60008160040160006114ac6114c2565b8152602001908152602001600020549050919050565b62015180420490565b8154818355818111156114ef576000838152602090206114ef9181019083016114f4565b505050565b610acc91905b8082111561150e57600081556001016114fa565b509056007dd4fc124e71a8ba77cb354c002b0299888dba1cc430437309427bec06fb0bb9a165627a7a72305820e31739836a33edacf18ec6055c15320017b3c12eb240ba1fcc3808963cf136100029"
}