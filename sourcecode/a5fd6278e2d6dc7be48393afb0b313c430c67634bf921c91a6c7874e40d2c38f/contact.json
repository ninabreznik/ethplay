{
  "address": "0x1e2f082cb8fd71890777ca55bd0ce1299975b25f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fund",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-11\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract Prosperity {\n\t/**\n     * Withdraws all of the callers earnings.\n     */\n\tfunction withdraw() public;\n\t\n\t/**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) public view returns(uint256);\n}\n\n\ncontract Fund {\n    using SafeMath for *;\n    \n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // administrators can:\n    // -> change add or remove devs\n    // they CANNOT:\n    // -> change contract addresses\n    // -> change fees\n    // -> disable withdrawals\n    // -> kill the contract\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrator_ == _customerAddress);\n        _;\n    }\n    \n    \n    /*================================\n    =            DATASETS            =\n    ================================*/\n    address internal administrator_;\n    address internal lending_;\n    address internal freeFund_;\n    address[] public devs_;\n\t\n\t// token exchange contract\n\tProsperity public tokenContract_;\n    \n    // distribution percentages\n    uint8 internal lendingShare_ = 50;\n    uint8 internal freeFundShare_ = 20;\n    uint8 internal devsShare_ = 30;\n    \n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n    constructor()\n        public \n    {\n        // set addresses\n        administrator_ = 0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1;\n        lending_ = 0x961FA070Ef41C2b68D1A50905Ea9198EF7Dbfbf8;\n        freeFund_ = 0x0cCA1e8Db144d2E4a8F2A80828E780a1DC9C5112;\n        \n        // Add devs\n        devs_.push(0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1); // Tobi\n        devs_.push(0x92be79705F4Fab97894833448Def30377bc7267A); // Fabi\n        devs_.push(0x000929719742ec6E0bFD0107959384F7Acd8F883); // Lukas\n        devs_.push(0x5289f0f0E8417c7475Ba33E92b1944279e183B0C); // Julian\n    }\n\t\n\tfunction() payable external {\n\t\t// prevent invalid or unintentional calls\n\t\t//require(msg.data.length == 0);\n\t}\n    \n    /**\n     * Distribute ether to lending, freeFund and devs\n     */\n    function pushEther()\n        public\n    {\n\t\t// get dividends (mainly referral)\n\t\tif (myDividends(true) > 0) {\n\t\t\ttokenContract_.withdraw();\n\t\t}\n\t\t\n\t\t// current balance (after withdraw)\n        uint256 _balance = getTotalBalance();\n        \n\t\t// distributed reinvestments\n        if (_balance > 0) {\n            uint256 _ethDevs      = _balance.mul(devsShare_).div(100);          // total of 30%\n            uint256 _ethFreeFund  = _balance.mul(freeFundShare_).div(100);      // total of 20%\n            uint256 _ethLending   = _balance.sub(_ethDevs).sub(_ethFreeFund);   // approx. 50%\n            \n            lending_.transfer(_ethLending);\n            freeFund_.transfer(_ethFreeFund);\n            \n            uint256 _devsCount = devs_.length;\n            for (uint8 i = 0; i < _devsCount; i++) {\n                uint256 _ethDevPortion = _ethDevs.div(_devsCount);\n                address _dev = devs_[i];\n                _dev.transfer(_ethDevPortion);\n            }\n        }\n    }\n    \n    /**\n     * Add a dev to the devs fund pool.\n     */\n    function addDev(address _dev)\n        onlyAdministrator()\n        public\n    {\n        // address must not be dev before, we do not want duplicates\n        require(!isDev(_dev), \"address is already dev\");\n        \n        devs_.push(_dev);\n    }\n    \n    /**\n     * Remove a dev from the devs fund pool.\n     */\n    function removeDev(address _dev)\n        onlyAdministrator()\n        public\n    {\n        // address must be dev before, we need a dev address to be able to remove him\n        require(isDev(_dev), \"address is not a dev\");\n        \n        // get index and delte dev\n        uint8 index = getDevIndex(_dev);\n        \n        // close gap in dev list\n        uint256 _devCount = getTotalDevs();\n        for (uint8 i = index; i < _devCount - 1; i++) {\n            devs_[i] = devs_[i+1];\n        }\n        delete devs_[devs_.length-1];\n        devs_.length--;\n    }\n    \n    \n    /**\n     * Check if given address is dev or not\n     */\n    function isDev(address _dealer) \n        public\n        view\n        returns(bool)\n    {\n        uint256 _devsCount = devs_.length;\n        \n        for (uint8 i = 0; i < _devsCount; i++) {\n            if (devs_[i] == _dealer) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    // VIEW FUNCTIONS\n    function getTotalBalance() \n        public\n        view\n        returns(uint256)\n    {\n        return address(this).balance;\n    }\n    \n    function getTotalDevs()\n        public \n        view \n        returns(uint256)\n    {\n        return devs_.length;\n    }\n\t\n\tfunction myDividends(bool _includeReferralBonus)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn tokenContract_.myDividends(_includeReferralBonus);\n\t}\n    \n    \n    // INTERNAL FUNCTIONS\n    /**\n     * Check index of given address\n     */\n    function getDevIndex(address _dev)\n        internal\n        view\n        returns(uint8)\n    {\n        uint256 _devsCount = devs_.length;\n        \n        for (uint8 i = 0; i < _devsCount; i++) {\n            if (devs_[i] == _dev) {\n                return i;\n            }\n        }\n    }\n\t\n\t// SETTER\n\t/**\n\t * Set the token contract\n\t */\n\tfunction setTokenContract(address _tokenContract)\n\t\tonlyAdministrator()\n\t\tpublic\n\t{\n\t\ttokenContract_ = Prosperity(_tokenContract);\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "bytecode": "60806040526004805460a060020a60ff021916743200000000000000000000000000000000000000001760a860020a60ff02191675140000000000000000000000000000000000000000001760b060020a60ff021916761e0000000000000000000000000000000000000000000017905534801561007c57600080fd5b5060008054600160a060020a03199081167328436c7453eba01c6ecbc8a9caa975f0ade6fff1908117835560018054831673961fa070ef41c2b68d1a50905ea9198ef7dbfbf8178155600280548416730cca1e8db144d2e4a8f2a80828e780a1dc9c5112179055600380548083018255948190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b94850180548516909317909255815480820183558401805484167392be79705f4fab97894833448def30377bc7267a17905581548082018355840180548416720929719742ec6e0bfd0107959384f7acd8f88317905581549081019091559091018054909116735289f0f0e8417c7475ba33e92b1944279e183b0c17905561097f8061019e6000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c3f64bf81146100a557806312b58349146100da5780635b1eca3814610101578063688abbf7146101165780638a68cf9c14610130578063b91d3ace14610161578063bbcd5bbe14610182578063c4026d7b146101a3578063d404d6c2146101c4578063ef1055b8146101d9575b005b3480156100b157600080fd5b506100c6600160a060020a03600435166101f1565b604080519115158252519081900360200190f35b3480156100e657600080fd5b506100ef610258565b60408051918252519081900360200190f35b34801561010d57600080fd5b506100ef61025e565b34801561012257600080fd5b506100ef6004351515610264565b34801561013c57600080fd5b50610145610301565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b506100a3600160a060020a0360043516610310565b34801561018e57600080fd5b506100a3600160a060020a03600435166103fe565b3480156101af57600080fd5b506100a3600160a060020a0360043516610447565b3480156101d057600080fd5b506100a36105d4565b3480156101e557600080fd5b50610145600435610817565b600354600090815b818160ff16101561024c5783600160a060020a031660038260ff1681548110151561022057fe5b600091825260209091200154600160a060020a031614156102445760019250610251565b6001016101f9565b600092505b5050919050565b30315b90565b60035490565b60048054604080517f688abbf70000000000000000000000000000000000000000000000000000000081528415159381019390935251600092600160a060020a039092169163688abbf791602480830192602092919082900301818787803b1580156102cf57600080fd5b505af11580156102e3573d6000803e3d6000fd5b505050506040513d60208110156102f957600080fd5b505192915050565b600454600160a060020a031681565b6000543390600160a060020a0316811461032957600080fd5b610332826101f1565b1561039e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6164647265737320697320616c72656164792064657600000000000000000000604482015290519081900360640190fd5b50600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000543390600160a060020a0316811461041757600080fd5b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054819081903390600160a060020a0316811461046557600080fd5b61046e856101f1565b15156104db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f61646472657373206973206e6f74206120646576000000000000000000000000604482015290519081900360640190fd5b6104e48561083f565b93506104ee61025e565b92508391505b600183038260ff161015610581576003805460ff600185011690811061051657fe5b60009182526020909120015460038054600160a060020a039092169160ff851690811061053f57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600191909101906104f4565b60038054600019810190811061059357fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905560038054906105cc90600019830161090c565b505050505050565b60008060008060008060008060006105ec6001610264565b11156106675760048054604080517f3ccfd60b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633ccfd60b92828201926000929082900301818387803b15801561064e57600080fd5b505af1158015610662573d6000803e3d6000fd5b505050505b61066f610258565b9750600088111561080d576004546106b8906064906106ac908b90760100000000000000000000000000000000000000000000900460ff16610899565b9063ffffffff6108d216565b6004549097506106ec906064906106ac908b907501000000000000000000000000000000000000000000900460ff16610899565b955061070e866107028a8a63ffffffff6108f516565b9063ffffffff6108f516565b600154604051919650600160a060020a03169086156108fc029087906000818181858888f19350505050158015610749573d6000803e3d6000fd5b50600254604051600160a060020a039091169087156108fc029088906000818181858888f19350505050158015610784573d6000803e3d6000fd5b506003549350600092505b838360ff16101561080d576107aa878563ffffffff6108d216565b915060038360ff168154811015156107be57fe5b6000918252602082200154604051600160a060020a039091169250829184156108fc02918591818181858888f19350505050158015610801573d6000803e3d6000fd5b5060019092019161078f565b5050505050505050565b600380548290811061082557fe5b600091825260209091200154600160a060020a0316905081565b600354600090815b818160ff1610156102515783600160a060020a031660038260ff1681548110151561086e57fe5b600091825260209091200154600160a060020a0316141561089157809250610251565b600101610847565b6000808315156108ac57600091506108cb565b508282028284828115156108bc57fe5b04146108c757600080fd5b8091505b5092915050565b6000808083116108e157600080fd5b82848115156108ec57fe5b04949350505050565b6000808383111561090557600080fd5b5050900390565b81548183558181111561093057600083815260209020610930918101908301610935565b505050565b61025b91905b8082111561094f576000815560010161093b565b50905600a165627a7a72305820dd9f1ea078bb9a01d32106d800cf4d9b0896134defefba5f1501af696f97b87a0029"
}