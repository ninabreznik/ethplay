{
  "address": "0x725803315519de78d232265a8f1040f054e70b98",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dao.Casino: Old Token",
  "contractName": "DaoCasinoToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-28\n*/\n\npragma solidity ^0.4.11;\n\n// ----------------------------------------------------------------------------\n// Dao.Casino Crowdsale Token Contract (Under Consideration)\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017\n// The MIT Licence (Under Consideration).\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths, borrowed from OpenZeppelin\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\n    // ------------------------------------------------------------------------\n    // Add a number to another number, checking for overflows\n    // ------------------------------------------------------------------------\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    // ------------------------------------------------------------------------\n    // Subtract a number from another number, checking for underflows\n    // ------------------------------------------------------------------------\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address _newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n \n    function acceptOwnership() {\n        if (msg.sender == newOwner) {\n            OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n        }\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals\n// https://github.com/ethereum/EIPs/issues/20\n// ----------------------------------------------------------------------------\ncontract ERC20Token is Owned {\n    using SafeMath for uint;\n\n    // ------------------------------------------------------------------------\n    // Total Supply\n    // ------------------------------------------------------------------------\n    uint256 _totalSupply = 0;\n\n    // ------------------------------------------------------------------------\n    // Balances for each account\n    // ------------------------------------------------------------------------\n    mapping(address => uint256) balances;\n\n    // ------------------------------------------------------------------------\n    // Owner of account approves the transfer of an amount to another account\n    // ------------------------------------------------------------------------\n    mapping(address => mapping (address => uint256)) allowed;\n\n    // ------------------------------------------------------------------------\n    // Get the total token supply\n    // ------------------------------------------------------------------------\n    function totalSupply() constant returns (uint256 totalSupply) {\n        totalSupply = _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the account balance of another account with address _owner\n    // ------------------------------------------------------------------------\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount                // User has balance\n            && _amount > 0                                 // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]     // Overflow check\n        ) {\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Allow _spender to withdraw from your account, multiple times, up to the\n    // _value amount. If this function is called again it overwrites the\n    // current allowance with _value.\n    // ------------------------------------------------------------------------\n    function approve(\n        address _spender,\n        uint256 _amount\n    ) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to the spender's account. The owner of the tokens must already\n    // have approve(...)-d this transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount                  // From a/c has balance\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[_from] = balances[_from].sub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n            balances[_to] = balances[_to].add(_amount);\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(\n        address _owner, \n        address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender,\n        uint256 _value);\n}\n\n\ncontract DaoCasinoToken is ERC20Token {\n\n    // ------------------------------------------------------------------------\n    // Token information\n    // ------------------------------------------------------------------------\n    string public constant symbol = \"BET\";\n    string public constant name = \"Dao.Casino\";\n    uint8 public constant decimals = 18;\n\n    // Do not use `now` here\n    uint256 public STARTDATE;\n    uint256 public ENDDATE;\n\n    // Cap USD 25mil @ 296.1470 ETH/USD\n    uint256 public CAP;\n\n    // Cannot have a constant address here - Solidity bug\n    // https://github.com/ethereum/solidity/issues/2441\n    address public multisig;\n\n    function DaoCasinoToken(uint256 _start, uint256 _end, uint256 _cap, address _multisig) {\n        STARTDATE = _start;\n        ENDDATE   = _end;\n        CAP       = _cap;\n        multisig  = _multisig;\n    }\n\n    // > new Date(\"2017-06-29T13:00:00\").getTime()/1000\n    // 1498741200\n\n    uint256 public totalEthers;\n\n    // ------------------------------------------------------------------------\n    // Tokens per ETH\n    // Day  1    : 2,000 BET = 1 Ether\n    // Days 2–14 : 1,800 BET = 1 Ether\n    // Days 15–17: 1,700 BET = 1 Ether\n    // Days 18–20: 1,600 BET = 1 Ether\n    // Days 21–23: 1,500 BET = 1 Ether\n    // Days 24–26: 1,400 BET = 1 Ether\n    // Days 27–28: 1,300 BET = 1 Ether\n    // ------------------------------------------------------------------------\n    function buyPrice() constant returns (uint256) {\n        return buyPriceAt(now);\n    }\n\n    function buyPriceAt(uint256 at) constant returns (uint256) {\n        if (at < STARTDATE) {\n            return 0;\n        } else if (at < (STARTDATE + 1 days)) {\n            return 2000;\n        } else if (at < (STARTDATE + 15 days)) {\n            return 1800;\n        } else if (at < (STARTDATE + 18 days)) {\n            return 1700;\n        } else if (at < (STARTDATE + 21 days)) {\n            return 1600;\n        } else if (at < (STARTDATE + 24 days)) {\n            return 1500;\n        } else if (at < (STARTDATE + 27 days)) {\n            return 1400;\n        } else if (at <= ENDDATE) {\n            return 1300;\n        } else {\n            return 0;\n        }\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Buy tokens from the contract\n    // ------------------------------------------------------------------------\n    function () payable {\n        proxyPayment(msg.sender);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Exchanges can buy on behalf of participant\n    // ------------------------------------------------------------------------\n    function proxyPayment(address participant) payable {\n        // No contributions before the start of the crowdsale\n        require(now >= STARTDATE);\n        // No contributions after the end of the crowdsale\n        require(now <= ENDDATE);\n        // No 0 contributions\n        require(msg.value > 0);\n\n        // Add ETH raised to total\n        totalEthers = totalEthers.add(msg.value);\n        // Cannot exceed cap\n        require(totalEthers <= CAP);\n\n        // What is the BET to ETH rate\n        uint256 _buyPrice = buyPrice();\n\n        // Calculate #BET - this is safe as _buyPrice is known\n        // and msg.value is restricted to valid values\n        uint tokens = msg.value * _buyPrice;\n\n        // Check tokens > 0\n        require(tokens > 0);\n        // Compute tokens for foundation 30%\n        // Number of tokens restricted so maths is safe\n        uint multisigTokens = tokens * 3 / 7;\n\n        // Add to total supply\n        _totalSupply = _totalSupply.add(tokens);\n        _totalSupply = _totalSupply.add(multisigTokens);\n\n        // Add to balances\n        balances[participant] = balances[participant].add(tokens);\n        balances[multisig] = balances[multisig].add(multisigTokens);\n\n        // Log events\n        TokensBought(participant, msg.value, totalEthers, tokens,\n            multisigTokens, _totalSupply, _buyPrice);\n        Transfer(0x0, participant, tokens);\n        Transfer(0x0, multisig, multisigTokens);\n\n        // Move the funds to a safe wallet\n        multisig.transfer(msg.value);\n    }\n    event TokensBought(address indexed buyer, uint256 ethers, \n        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \n        uint256 newTotalSupply, uint256 buyPrice);\n\n\n    // ------------------------------------------------------------------------\n    // Owner to add precommitment funding token balance before the crowdsale\n    // commences\n    // ------------------------------------------------------------------------\n    function addPrecommitment(address participant, uint balance) onlyOwner {\n        require(now < STARTDATE);\n        require(balance > 0);\n        balances[participant] = balances[participant].add(balance);\n        _totalSupply = _totalSupply.add(balance);\n        Transfer(0x0, participant, balance);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from owner's account to another account, with a\n    // check that the crowdsale is finalised\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _amount) returns (bool success) {\n        // Cannot transfer before crowdsale ends or cap reached\n        require(now > ENDDATE || totalEthers == CAP);\n        // Standard transfer\n        return super.transfer(_to, _amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Spender of tokens transfer an amount of tokens from the token owner's\n    // balance to another account, with a check that the crowdsale is\n    // finalised\n    // ------------------------------------------------------------------------\n    function transferFrom(address _from, address _to, uint _amount) \n        returns (bool success)\n    {\n        // Cannot transfer before crowdsale ends or cap reached\n        require(now > ENDDATE || totalEthers == CAP);\n        // Standard transferFrom\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint amount)\n      onlyOwner returns (bool success) \n    {\n        return ERC20Token(tokenAddress).transfer(owner, amount);\n    }\n}",
  "bytecode": "60606040526000600255341561001157fe5b60405160808061108383398101604090815281516020830151918301516060909301519092905b5b60008054600160a060020a03191633600160a060020a03161790555b60058490556006839055600782905560088054600160a060020a031916600160a060020a0383161790555b505050505b610fef806100946000396000f300606060405236156101305763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610142578063095ea7b3146101d25780630a4625af1461020557806318160ddd146102275780631db9ec2c1461024957806323b872dd1461026b578063313ce567146102a45780633818d907146102ca578063383e3a5d146102eb5780634783c35b1461031057806370a082311461033c57806379ba50971461036a5780637e4d5ea11461037c5780638620410b1461039e5780638da5cb5b146103c057806395d89b41146103ec578063a9059cbb1461047c578063d4ee1d90146104af578063dc39d06d146104db578063dd62ed3e1461050e578063ec81b48314610542578063f2fde38b14610564578063f48c305414610582575b6101405b61013d33610598565b5b565b005b341561014a57fe5b6101526107c4565b604080516020808252835181830152835191928392908301918501908083838215610198575b80518252602083111561019857601f199092019160209182019101610178565b505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101da57fe5b6101f1600160a060020a03600435166024356107fb565b604080519115158252519081900360200190f35b341561020d57fe5b610215610866565b60408051918252519081900360200190f35b341561022f57fe5b61021561086c565b60408051918252519081900360200190f35b341561025157fe5b610215610873565b60408051918252519081900360200190f35b341561027357fe5b6101f1600160a060020a0360043581169060243516604435610879565b604080519115158252519081900360200190f35b34156102ac57fe5b6102b46108af565b6040805160ff9092168252519081900360200190f35b34156102d257fe5b610140600160a060020a03600435166024356108b4565b005b34156102f357fe5b61021560043561097a565b60408051918252519081900360200190f35b341561031857fe5b610320610a41565b60408051600160a060020a039092168252519081900360200190f35b341561034457fe5b610215600160a060020a0360043516610a50565b60408051918252519081900360200190f35b341561037257fe5b610140610a6f565b005b341561038457fe5b610215610af6565b60408051918252519081900360200190f35b34156103a657fe5b610215610afc565b60408051918252519081900360200190f35b34156103c857fe5b610320610b0d565b60408051600160a060020a039092168252519081900360200190f35b34156103f457fe5b610152610b1c565b604080516020808252835181830152835191928392908301918501908083838215610198575b80518252602083111561019857601f199092019160209182019101610178565b505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561048457fe5b6101f1600160a060020a0360043516602435610b53565b604080519115158252519081900360200190f35b34156104b757fe5b610320610b87565b60408051600160a060020a039092168252519081900360200190f35b34156104e357fe5b6101f1600160a060020a0360043516602435610b96565b604080519115158252519081900360200190f35b341561051657fe5b610215600160a060020a0360043581169060243516610c45565b60408051918252519081900360200190f35b341561054a57fe5b610215610c72565b60408051918252519081900360200190f35b341561056c57fe5b610140600160a060020a0360043516610c78565b005b610140600160a060020a0360043516610598565b005b60006000600060055442101515156105b05760006000fd5b6006544211156105c05760006000fd5b600034116105ce5760006000fd5b6009546105e1903463ffffffff610cc116565b60098190556007549011156105f65760006000fd5b6105fe610afc565b92503483029150600082116106135760006000fd5b6007600383025b04905061063282600254610cc190919063ffffffff16565b6002819055610647908263ffffffff610cc116565b600255600160a060020a038416600090815260036020526040902054610673908363ffffffff610cc116565b600160a060020a0380861660009081526003602052604080822093909355600854909116815220546106ab908263ffffffff610cc116565b600854600160a060020a039081166000908152600360209081526040918290209390935560095460025482513481529485019190915283820186905260608401859052608084015260a0830186905251908616917f6bf42ea559224a77e2bc8d284b9f2eb6ed6b198a7ef7b742b41562c6a20b9adc919081900360c00190a2604080518381529051600160a060020a03861691600091600080516020610fa48339815191529181900360200190a3600854604080518381529051600160a060020a0390921691600091600080516020610fa4833981519152919081900360200190a3600854604051600160a060020a03909116903480156108fc02916000818181858888f1935050505015156107bd57fe5b5b50505050565b60408051808201909152600a81527f44616f2e436173696e6f00000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60095481565b6002545b90565b60065481565b600060065442118061088e5750600754600954145b151561089a5760006000fd5b6108a5848484610ce9565b90505b9392505050565b601281565b60005433600160a060020a039081169116146108d05760006000fd5b60055442106108df5760006000fd5b600081116108ed5760006000fd5b600160a060020a038216600090815260036020526040902054610916908263ffffffff610cc116565b600160a060020a038316600090815260036020526040902055600254610942908263ffffffff610cc116565b600255604080518281529051600160a060020a03841691600091600080516020610fa48339815191529181900360200190a35b5b5050565b600060055482101561098e57506000610a34565b60055462015180018210156109a657506107d0610a34565b6005546213c680018210156109be5750610708610a34565b6005546217bb00018210156109d657506106a4610a34565b600554621baf80018210156109ee5750610640610a34565b600554621fa40001821015610a0657506105dc610a34565b6005546223988001821015610a1e5750610578610a34565b6006548211610a305750610514610a34565b5060005b5b5b5b5b5b5b5b5b919050565b600854600160a060020a031681565b600160a060020a0381166000908152600360205260409020545b919050565b60015433600160a060020a039081169116141561013d5760015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b5b565b60055481565b6000610b074261097a565b90505b90565b600054600160a060020a031681565b60408051808201909152600381527f4245540000000000000000000000000000000000000000000000000000000000602082015281565b6000600654421180610b685750600754600954145b1515610b745760006000fd5b610b7e8383610e7e565b90505b92915050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610bb35760006000fd5b6000805460408051602090810184905281517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0393841660048201526024810187905291519287169363a9059cbb936044808501949192918390030190829087803b1515610c2657fe5b6102c65a03f11515610c3457fe5b5050604051519150505b5b92915050565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b92915050565b60075481565b60005433600160a060020a03908116911614610c945760006000fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000828201838110801590610cd65750828110155b1515610cde57fe5b8091505b5092915050565b600160a060020a038316600090815260036020526040812054829010801590610d395750600160a060020a0380851660009081526004602090815260408083203390941683529290522054829010155b8015610d455750600082115b8015610d6a5750600160a060020a038316600090815260036020526040902054828101115b15610e6e57600160a060020a038416600090815260036020526040902054610d98908363ffffffff610f8c16565b600160a060020a0380861660009081526003602090815260408083209490945560048152838220339093168252919091522054610ddb908363ffffffff610f8c16565b600160a060020a0380861660009081526004602090815260408083203385168452825280832094909455918616815260039091522054610e21908363ffffffff610cc116565b600160a060020a038085166000818152600360209081526040918290209490945580518681529051919392881692600080516020610fa483398151915292918290030190a35060016108a8565b5060006108a8565b5b9392505050565b600160a060020a033316600090815260036020526040812054829010801590610ea75750600082115b8015610ecc5750600160a060020a038316600090815260036020526040902054828101115b15610f7d57600160a060020a033316600090815260036020526040902054610efa908363ffffffff610f8c16565b600160a060020a033381166000908152600360205260408082209390935590851681522054610f2f908363ffffffff610cc116565b600160a060020a03808516600081815260036020908152604091829020949094558051868152905191933390931692600080516020610fa483398151915292918290030190a3506001610860565b506000610860565b5b92915050565b600082821115610f9857fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820834f725cfab653159f9ad84fcd59c9a3d04dedf2c263a2d7cf0dfdd3b3ba172100290000000000000000000000000000000000000000000000000000000059542230000000000000000000000000000000000000000000000000000000005954304000000000000000000000000000000000000000000000000073a5f2362c0a5000000000000000000000000000039704a4ecf78b0e1eef8f181a7838a0c68876ca",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000059542230000000000000000000000000000000000000000000000000000000005954304000000000000000000000000000000000000000000000000073a5f2362c0a5000000000000000000000000000039704a4ecf78b0e1eef8f181a7838a0c68876ca"
}