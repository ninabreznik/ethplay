{
  "address": "0xb711c57c3fab55b9a655508a70731f3a073634a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RegXAddr",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/Ownerable.sol\n\ncontract Ownerable {\n    /// @notice The address of the owner is the only address that can call\n    ///  a function with this modifier\n    modifier onlyOwner { require(msg.sender == owner); _; }\n\n    address public owner;\n\n    constructor() public { owner = msg.sender;}\n\n    /// @notice Changes the owner of the contract\n    /// @param _newOwner The new owner of the contract\n    function setOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\n// File: contracts/RegXAddr.sol\n\ncontract RegXAddr is Ownerable {\n\n  bool public registable;\n  ERC20Basic private atxToken;\n\n  address[] public ethAddrs;\n  mapping (address => address) public eth2xbc;\n\n  constructor () public {\n    atxToken = ERC20Basic(0x1A0F2aB46EC630F9FD638029027b552aFA64b94c);\n  }\n\n  function setRegistable(bool _registable) public onlyOwner {\n    registable = _registable;\n  }\n\n  function registeredCount() public view returns (uint256) {\n    return ethAddrs.length;\n  }\n  \n  function xbc2eth(address _xaddr) public view returns (address) {\n    require(_xaddr != 0x0);\n      \n    for(uint i=0; i<ethAddrs.length; i++) {\n      if(eth2xbc[ethAddrs[i]] == _xaddr) {\n\treturn ethAddrs[i];\n      }\n    }\n    return 0x0;\n  }\n\n  function registerXAddress (address _xaddr) public returns (bool){\n    require(registable);\n    require(_xaddr != 0x0);\n    require(msg.sender != 0x0);\n\n    uint256 atxBalance = atxToken.balanceOf(msg.sender);\n    require(atxBalance > 0);\n      \n    if(eth2xbc[msg.sender] == 0x0) {\n      ethAddrs.push(msg.sender);\n    }\n    eth2xbc[msg.sender] = _xaddr;\n\n    emit RegisterXAddress(msg.sender, _xaddr, atxBalance);\n    return true;\n  }\n\n  function reset() public onlyOwner {\n    for(uint i=0; i<ethAddrs.length; i++) {\n      delete eth2xbc[ ethAddrs[i] ];\n    }\n    delete ethAddrs;\n  }\n\n\n  event RegisterXAddress (address indexed ethaddr, address indexed xbcaddr, uint256 balance);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"registable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registeredCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registable\",\"type\":\"bool\"}],\"name\":\"setRegistable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xaddr\",\"type\":\"address\"}],\"name\":\"registerXAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_xaddr\",\"type\":\"address\"}],\"name\":\"xbc2eth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eth2xbc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethaddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"xbcaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RegisterXAddress\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731a0f2ab46ec630f9fd638029027b552afa64b94c600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bbc806100b56000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a82b670146100a957806313af4035146100d8578063210ff9bb1461011b5780633206843c14610146578063503079d214610175578063542b8306146101d0578063717076a1146102535780638da5cb5b146102c057806396b6689314610317578063d826f88f1461039a575b600080fd5b3480156100b557600080fd5b506100be6103b1565b604051808215151515815260200191505060405180910390f35b3480156100e457600080fd5b50610119600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103c4565b005b34801561012757600080fd5b50610130610462565b6040518082815260200191505060405180910390f35b34801561015257600080fd5b5061017360048036038101908080351515906020019092919050505061046f565b005b34801561018157600080fd5b506101b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104e7565b604051808215151515815260200191505060405180910390f35b3480156101dc57600080fd5b50610211600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061082c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025f57600080fd5b5061027e6004803603810190808035906020019092919050505061098c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cc57600080fd5b506102d56109ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032357600080fd5b50610358600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a657600080fd5b506103af610a22565b005b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561041f57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600280549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104ca57600080fd5b80600060146101000a81548160ff02191690831515021790555050565b600080600060149054906101000a900460ff16151561050557600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561052b57600080fd5b60003373ffffffffffffffffffffffffffffffffffffffff161415151561055157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b505050506040513d602081101561063857600080fd5b8101908080519060200190929190505050905060008111151561065a57600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561073f5760023390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1ef3ac306295447441e0db9896a6325c403e9d8b6cdf6b3e588a486a3ef798fe836040518082815260200191505060405180910390a36001915050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561085557600080fd5b600090505b600280549050811015610981578273ffffffffffffffffffffffffffffffffffffffff166003600060028481548110151561089157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109745760028181548110151561094257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150610986565b808060010191505061085a565b600091505b50919050565b60028181548110151561099b57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7f57600080fd5b600090505b600280549050811015610b395760036000600283815481101515610aa457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558080600101915050610a84565b60026000610b479190610b4a565b50565b5080546000825590600052602060002090810190610b689190610b6b565b50565b610b8d91905b80821115610b89576000816000905550600101610b71565b5090565b905600a165627a7a723058206fcc0bba24bef5ce6e7e13ff2a3baa5b7dd57f6fce2032a8dd1d9f1167d344ce0029"
}