{
  "address": "0xeb3a4973cc4d19709cced6594bddf43752aedf12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HistoricATD",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract HistoricATD is Ownable, Pausable {\n\n  /**\n    Constructor\n   */\n\n  // constructor() public {}\n\n  /**\n    Events\n   */\n\n  event Distributed(\n    uint256 indexed date,\n    address indexed lockedWallet,\n    address indexed unlockWallet,\n    uint256 ratioDTV,\n    uint256 ratioDecimals,\n    uint256 dailyTradedVolume,\n    uint256 amount,\n    bytes32 transaction\n  );\n\n  event TotalDistributed(\n    uint256 indexed date,\n    uint256 dailyTradedVolume,\n    uint256 amount,\n    bytes32 transaction\n  );\n\n  /**\n    Publics\n   */\n\n  function emitDistribute(\n    uint256[] memory dates,\n    uint256[] memory dailyTradedVolumes,\n    address[] memory lockedWallets,\n    address[] memory unlockWallets,\n    uint256[] memory ratioDTVs,\n    uint256[] memory ratioDecimals,\n    uint256[] memory amounts,\n    bytes32[] memory transactions\n  ) public whenNotPaused {\n    require(dates.length == dailyTradedVolumes.length, \"dailyTradedVolumes length is different\");\n    require(dates.length == lockedWallets.length, \"lockedWallets length is different\");\n    require(dates.length == unlockWallets.length, \"unlockWallets length is different\");\n    require(dates.length == ratioDTVs.length, \"ratioDTVs length is different\");\n    require(dates.length == ratioDecimals.length, \"ratioDecimals length is different\");\n    require(dates.length == amounts.length, \"amounts length is different\");\n    require(dates.length == transactions.length, \"transactions length is different\");\n    for (uint256 i = 0; i < dates.length; i++) {\n      emit Distributed(\n        dates[i],\n        lockedWallets[i],\n        unlockWallets[i],\n        ratioDTVs[i],\n        ratioDecimals[i],\n        dailyTradedVolumes[i],\n        amounts[i],\n        transactions[i]\n      );\n    }\n  }\n\n  function emitDistributeTotal(\n    uint256[] memory dates,\n    uint256[] memory dailyTradedVolumes,\n    uint256[] memory totals,\n    bytes32[] memory transactions\n  ) public whenNotPaused {\n    require(dates.length == dailyTradedVolumes.length, \"dailyTradedVolumes length is different\");\n    require(dates.length == totals.length, \"totals length is different\");\n    require(dates.length == transactions.length, \"transactions length is different\");\n    for (uint256 i = 0; i < dates.length; i++) {\n      emit TotalDistributed(dates[i], dailyTradedVolumes[i], totals[i], transactions[i]);\n    }\n  }\n\n  function destroy() public onlyOwner {\n    selfdestruct(msg.sender);\n  }\n\n  function removePauser(address account) public onlyOwner {\n    _removePauser(account);\n  }\n\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620000da33620000fb640100000000026401000000009004565b6000600260006101000a81548160ff021916908315150217905550620002bd565b6200011f816001620001656401000000000262001725179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001a257600080fd5b620001bd828262000228640100000000026401000000009004565b151515620001ca57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200026657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61188a80620002cd6000396000f3fe608060405234801561001057600080fd5b5060043610610107576000357c01000000000000000000000000000000000000000000000000000000009004806383197ef0116100a95780638f32d59b116100835780638f32d59b1461028e578063d63a489b146102b0578063dcedce5d14610524578063f2fde38b146109e957610107565b806383197ef0146102305780638456cb591461023a5780638da5cb5b1461024457610107565b80636b2c0f55116100e55780636b2c0f55146101945780636ef8d66d146101d8578063715018a6146101e257806382dc1ec4146101ec57610107565b80633f4ba83a1461010c57806346fbf68e146101165780635c975abb14610172575b600080fd5b610114610a2d565b005b6101586004803603602081101561012c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610adc565b604051808215151515815260200191505060405180910390f35b61017a610af9565b604051808215151515815260200191505060405180910390f35b6101d6600480360360208110156101aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b10565b005b6101e0610b2f565b005b6101ea610b3a565b005b61022e6004803603602081101561020257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c0c565b005b610238610c2c565b005b610242610c58565b005b61024c610d08565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610296610d31565b604051808215151515815260200191505060405180910390f35b610522600480360360808110156102c657600080fd5b81019080803590602001906401000000008111156102e357600080fd5b8201836020820111156102f557600080fd5b8035906020019184602083028401116401000000008311171561031757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561037757600080fd5b82018360208201111561038957600080fd5b803590602001918460208302840111640100000000831117156103ab57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561040b57600080fd5b82018360208201111561041d57600080fd5b8035906020019184602083028401116401000000008311171561043f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561049f57600080fd5b8201836020820111156104b157600080fd5b803590602001918460208302840111640100000000831117156104d357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610d88565b005b6109e7600480360361010081101561053b57600080fd5b810190808035906020019064010000000081111561055857600080fd5b82018360208201111561056a57600080fd5b8035906020019184602083028401116401000000008311171561058c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105ec57600080fd5b8201836020820111156105fe57600080fd5b8035906020019184602083028401116401000000008311171561062057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561068057600080fd5b82018360208201111561069257600080fd5b803590602001918460208302840111640100000000831117156106b457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561071457600080fd5b82018360208201111561072657600080fd5b8035906020019184602083028401116401000000008311171561074857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107a857600080fd5b8201836020820111156107ba57600080fd5b803590602001918460208302840111640100000000831117156107dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561083c57600080fd5b82018360208201111561084e57600080fd5b8035906020019184602083028401116401000000008311171561087057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108d057600080fd5b8201836020820111156108e257600080fd5b8035906020019184602083028401116401000000008311171561090457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561096457600080fd5b82018360208201111561097657600080fd5b8035906020019184602083028401116401000000008311171561099857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610fb9565b005b610a2b600480360360208110156109ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611415565b005b610a3633610adc565b1515610a4157600080fd5b600260009054906101000a900460ff161515610a5c57600080fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610af282600161143490919063ffffffff16565b9050919050565b6000600260009054906101000a900460ff16905090565b610b18610d31565b1515610b2357600080fd5b610b2c816114c8565b50565b610b38336114c8565b565b610b42610d31565b1515610b4d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610c1533610adc565b1515610c2057600080fd5b610c2981611522565b50565b610c34610d31565b1515610c3f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b610c6133610adc565b1515610c6c57600080fd5b600260009054906101000a900460ff16151515610c8857600080fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260009054906101000a900460ff16151515610da457600080fd5b82518451141515610e00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118186026913960400191505060405180910390fd5b81518451141515610e79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f746f74616c73206c656e67746820697320646966666572656e7400000000000081525060200191505060405180910390fd5b80518451141515610ef2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7472616e73616374696f6e73206c656e67746820697320646966666572656e7481525060200191505060405180910390fd5b60008090505b8451811015610fb2578481815181101515610f0f57fe5b906020019060200201517feb5b01e19523c7e0dff13682077293923e3f3607387bfbe021414ab2732878308583815181101515610f4857fe5b906020019060200201518584815181101515610f6057fe5b906020019060200201518585815181101515610f7857fe5b9060200190602002015160405180848152602001838152602001828152602001935050505060405180910390a28080600101915050610ef8565b5050505050565b600260009054906101000a900460ff16151515610fd557600080fd5b86518851141515611031576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118186026913960400191505060405180910390fd5b8551885114151561108d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806117f76021913960400191505060405180910390fd5b845188511415156110e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806117d66021913960400191505060405180910390fd5b83518851141515611162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f726174696f44545673206c656e67746820697320646966666572656e7400000081525060200191505060405180910390fd5b825188511415156111be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061183e6021913960400191505060405180910390fd5b81518851141515611237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f616d6f756e7473206c656e67746820697320646966666572656e74000000000081525060200191505060405180910390fd5b805188511415156112b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7472616e73616374696f6e73206c656e67746820697320646966666572656e7481525060200191505060405180910390fd5b60008090505b885181101561140a5785818151811015156112cd57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1687828151811015156112fb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168a8381518110151561132957fe5b906020019060200201517f5d5e1f1fec966d495fa241139e87ac32a06e00cb8363351aaab580ec00f145d3888581518110151561136257fe5b90602001906020020151888681518110151561137a57fe5b906020019060200201518d8781518110151561139257fe5b9060200190602002015189888151811015156113aa57fe5b9060200190602002015189898151811015156113c257fe5b90602001906020020151604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a480806001019150506112b6565b505050505050505050565b61141d610d31565b151561142857600080fd5b6114318161157c565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561147157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114dc81600161167690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61153681600161172590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115b857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116b257600080fd5b6116bc8282611434565b15156116c757600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561176157600080fd5b61176b8282611434565b15151561177757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe756e6c6f636b57616c6c657473206c656e67746820697320646966666572656e746c6f636b656457616c6c657473206c656e67746820697320646966666572656e746461696c79547261646564566f6c756d6573206c656e67746820697320646966666572656e74726174696f446563696d616c73206c656e67746820697320646966666572656e74a165627a7a723058203866ea6fc5a7e67a5623c6b61572c06fa9b131e13adf1d74b383a0177d18065e0029"
}