{
  "address": "0xb9b644bf102e019cc4d292520dd4a2ee1df867de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PresalePool",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-30\n*/\n\npragma solidity ^0.4.19;\n\n// Wolf Crypto presale pooling contract\n// written by @iamdefinitelyahuman\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20 {\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n}\n\n\ncontract WhiteList {\n   function checkMemberLevel (address addr) view public returns (uint) {}\n}\n\n\ncontract PresalePool {\n\n  // SafeMath is a library to ensure that math operations do not have overflow errors\n  // https://zeppelin-solidity.readthedocs.io/en/latest/safemath.html\n  using SafeMath for uint;\n  \n  // The contract has 3 stages:\n  // 1 - The initial state. The owner is able to add addresses to the whitelist, and any whitelisted addresses can deposit or withdraw eth to the contract.\n  // 2 - The owner has closed the contract for further deposits. Whitelisted addresses can still withdraw eth from the contract.\n  // 3 - The eth is sent from the contract to the receiver. Unused eth can be claimed by contributors immediately. Once tokens are sent to the contract,\n  //     the owner enables withdrawals and contributors can withdraw their tokens.\n  uint8 public contractStage = 1;\n  \n  // These variables are set at the time of contract creation\n  // address that creates the contract\n  address public owner;\n  // maximum eth amount (in wei) that can be sent by a whitelisted address\n  uint[] public contributionCaps;\n  // the % of tokens kept by the contract owner\n  uint public feePct;\n  // the address that the pool will be paid out to\n  address public receiverAddress;\n  \n  // These constant variables do not change with each contract deployment\n  // minimum eth amount (in wei) that can be sent by a whitelisted address\n  uint constant public contributionMin = 100000000000000000;\n  // maximum gas price allowed for deposits in stage 1\n  uint constant public maxGasPrice = 50000000000;\n  // whitelisting contract\n  WhiteList constant public whitelistContract = WhiteList(0x8D95B038cA80A986425FA240C3C17Fb2B6e9bc63);\n  \n  \n  // These variables are all initially set to 0 and will be set at some point during the contract\n  // epoch time that the next contribution caps become active\n  uint public nextCapTime;\n  // pending contribution caps\n  uint [] public nextContributionCaps;\n  // block number of the last change to the receiving address (set if receiving address is changed, stage 1 or 2)\n  uint public addressChangeBlock;\n  // amount of eth (in wei) present in the contract when it was submitted\n  uint public finalBalance;\n  // array containing eth amounts to be refunded in stage 3\n  uint[] public ethRefundAmount;\n  // default token contract to be used for withdrawing tokens in stage 3\n  address public activeToken;\n  \n  // data structure for holding the contribution amount, cap, eth refund status, and token withdrawal status for each whitelisted address\n  struct Contributor {\n    bool authorized;\n    uint ethRefund;\n    uint balance;\n    uint cap;\n    mapping (address => uint) tokensClaimed;\n  }\n  // mapping that holds the contributor struct for each whitelisted address\n  mapping (address => Contributor) whitelist;\n  \n  // data structure for holding information related to token withdrawals.\n  struct TokenAllocation {\n    ERC20 token;\n    uint[] pct;\n    uint balanceRemaining;\n  }\n  // mapping that holds the token allocation struct for each token address\n  mapping (address => TokenAllocation) distributionMap;\n  \n  \n  // modifier for functions that can only be accessed by the contract creator\n  modifier onlyOwner () {\n    require (msg.sender == owner);\n    _;\n  }\n  \n  // modifier to prevent re-entrancy exploits during contract > contract interaction\n  bool locked;\n  modifier noReentrancy() {\n    require(!locked);\n    locked = true;\n    _;\n    locked = false;\n  }\n  \n  // Events triggered throughout contract execution\n  // These can be watched via geth filters to keep up-to-date with the contract\n  event ContributorBalanceChanged (address contributor, uint totalBalance);\n  event ReceiverAddressSet ( address _addr);\n  event PoolSubmitted (address receiver, uint amount);\n  event WithdrawalsOpen (address tokenAddr);\n  event TokensWithdrawn (address receiver, address token, uint amount);\n  event EthRefundReceived (address sender, uint amount);\n  event EthRefunded (address receiver, uint amount);\n  event ERC223Received (address token, uint value);\n   \n  // These are internal functions used for calculating fees, eth and token allocations as %\n  // returns a value as a % accurate to 20 decimal points\n  function _toPct (uint numerator, uint denominator ) internal pure returns (uint) {\n    return numerator.mul(10 ** 20) / denominator;\n  }\n  \n  // returns % of any number, where % given was generated with toPct\n  function _applyPct (uint numerator, uint pct) internal pure returns (uint) {\n    return numerator.mul(pct) / (10 ** 20);\n  }\n  \n  // This function is called at the time of contract creation,\n  // it sets the initial variables and whitelists the contract owner.\n  function PresalePool(address receiverAddr, uint[] capAmounts, uint fee) public {\n    require (fee < 100);\n    require (capAmounts.length>1 && capAmounts.length<256);\n    for (uint8 i=1; i<capAmounts.length; i++) {\n      require (capAmounts[i] <= capAmounts[0]);\n    }\n    owner = msg.sender;\n    receiverAddress = receiverAddr;\n    contributionCaps = capAmounts;\n    feePct = _toPct(fee,100);\n    whitelist[msg.sender].authorized = true;\n  }\n  \n  // This function is called whenever eth is sent into the contract.\n  // The send will fail unless the contract is in stage one and the sender has been whitelisted.\n  // The amount sent is added to the balance in the Contributor struct associated with the sending address.\n  function () payable public {\n    if (contractStage == 1) {\n      _ethDeposit();\n    } else if (contractStage == 3) {\n      _ethRefund();\n    } else revert();\n  }\n  \n  // Internal function for handling eth deposits during contract stage one.\n  function _ethDeposit () internal {\n    assert (contractStage == 1);\n    require (tx.gasprice <= maxGasPrice);\n    require (this.balance <= contributionCaps[0]);\n    var c = whitelist[msg.sender];\n    uint newBalance = c.balance.add(msg.value);\n    require (newBalance >= contributionMin);\n    require (newBalance <= _checkCap(msg.sender));\n    c.balance = newBalance;\n    ContributorBalanceChanged(msg.sender, newBalance);\n  }\n  \n  // Internal function for handling eth refunds during stage three.\n  function _ethRefund () internal {\n    assert (contractStage == 3);\n    require (msg.sender == owner || msg.sender == receiverAddress);\n    require (msg.value >= contributionMin);\n    ethRefundAmount.push(msg.value);\n    EthRefundReceived(msg.sender, msg.value);\n  }\n  \n  // This function is called to withdraw eth or tokens from the contract.\n  // It can only be called by addresses that are whitelisted and show a balance greater than 0.\n  // If called during stages one or two, the full eth balance deposited into the contract is returned and the contributor's balance reset to 0.\n  // If called during stage three, the contributor's unused eth will be returned, as well as any available tokens.\n  // The token address may be provided optionally to withdraw tokens that are not currently the default token (airdrops).\n  function withdraw (address tokenAddr) public {\n    var c = whitelist[msg.sender];\n    require (c.balance > 0);\n    if (contractStage < 3) {\n      uint amountToTransfer = c.balance;\n      c.balance = 0;\n      msg.sender.transfer(amountToTransfer);\n      ContributorBalanceChanged(msg.sender, 0);\n    } else {\n      _withdraw(msg.sender,tokenAddr);\n    }  \n  }\n  \n  // This function allows the contract owner to force a withdrawal to any contributor.\n  function withdrawFor (address contributor, address tokenAddr) public onlyOwner {\n    require (contractStage == 3);\n    require (whitelist[contributor].balance > 0);\n    _withdraw(contributor,tokenAddr);\n  }\n  \n  // This internal function handles withdrawals during stage three.\n  // The associated events will fire to notify when a refund or token allocation is claimed.\n  function _withdraw (address receiver, address tokenAddr) internal {\n    assert (contractStage == 3);\n    var c = whitelist[receiver];\n    if (tokenAddr == 0x00) {\n      tokenAddr = activeToken;\n    }\n    var d = distributionMap[tokenAddr];\n    require ( (ethRefundAmount.length > c.ethRefund) || d.pct.length > c.tokensClaimed[tokenAddr] );\n    if (ethRefundAmount.length > c.ethRefund) {\n      uint pct = _toPct(c.balance,finalBalance);\n      uint ethAmount = 0;\n      for (uint i=c.ethRefund; i<ethRefundAmount.length; i++) {\n        ethAmount = ethAmount.add(_applyPct(ethRefundAmount[i],pct));\n      }\n      c.ethRefund = ethRefundAmount.length;\n      if (ethAmount > 0) {\n        receiver.transfer(ethAmount);\n        EthRefunded(receiver,ethAmount);\n      }\n    }\n    if (d.pct.length > c.tokensClaimed[tokenAddr]) {\n      uint tokenAmount = 0;\n      for (i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\n        tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\n      }\n      c.tokensClaimed[tokenAddr] = d.pct.length;\n      if (tokenAmount > 0) {\n        require(d.token.transfer(receiver,tokenAmount));\n        d.balanceRemaining = d.balanceRemaining.sub(tokenAmount);\n        TokensWithdrawn(receiver,tokenAddr,tokenAmount);\n      }  \n    }\n    \n  }\n  \n  // This function can only be executed by the owner, it adds an address to the whitelist.\n  // To execute, the contract must be in stage 1, the address cannot already be whitelisted, and the address cannot be a contract itself.\n  // Blocking contracts from being whitelisted prevents attacks from unexpected contract to contract interaction - very important!\n  function authorize (address addr, uint cap) public onlyOwner {\n    require (contractStage == 1);\n    _checkWhitelistContract(addr);\n    require (!whitelist[addr].authorized);\n    require ((cap > 0 && cap < contributionCaps.length) || (cap >= contributionMin && cap <= contributionCaps[0]) );\n    uint size;\n    assembly { size := extcodesize(addr) }\n    require (size == 0);\n    whitelist[addr].cap = cap;\n    whitelist[addr].authorized = true;\n  }\n  \n  // This function is used by the owner to authorize many addresses in a single call.\n  // Each address will be given the same cap, and the cap must be one of the standard levels.\n  function authorizeMany (address[] addr, uint cap) public onlyOwner {\n    require (addr.length < 255);\n    require (cap > 0 && cap < contributionCaps.length);\n    for (uint8 i=0; i<addr.length; i++) {\n      authorize(addr[i], cap);\n    }\n  }\n  \n  // This function is called by the owner to remove an address from the whitelist.\n  // It may only be executed during stages 1 and 2.  Any eth sent by the address is refunded and their personal cap is set to 0.\n  // It will throw if the address is still authorised in the whitelist contract.\n  function revoke (address addr) public onlyOwner {\n    require (contractStage < 3);\n    require (whitelist[addr].authorized);\n    require (whitelistContract.checkMemberLevel(addr) == 0);\n    whitelist[addr].authorized = false;\n    if (whitelist[addr].balance > 0) {\n      uint amountToTransfer = whitelist[addr].balance;\n      whitelist[addr].balance = 0;\n      addr.transfer(amountToTransfer);\n      ContributorBalanceChanged(addr, 0);\n    }\n  }\n  \n  // This function is called by the owner to modify the contribution cap of a whitelisted address.\n  // If the current contribution balance exceeds the new cap, the excess balance is refunded.\n  function modifyIndividualCap (address addr, uint cap) public onlyOwner {\n    require (contractStage < 3);\n    require (cap < contributionCaps.length || (cap >= contributionMin && cap <= contributionCaps[0]) );\n    _checkWhitelistContract(addr);\n    var c = whitelist[addr];\n    require (c.authorized);\n    uint amount = c.balance;\n    c.cap = cap;\n    uint capAmount = _checkCap(addr);\n    if (amount > capAmount) {\n      c.balance = capAmount;\n      addr.transfer(amount.sub(capAmount));\n      ContributorBalanceChanged(addr, capAmount);\n    }\n  }\n  \n  // This function is called by the owner to modify the cap for a contribution level.\n  // The cap cannot be decreased below the current balance or increased past the contract limit.\n  function modifyLevelCap (uint level, uint cap) public onlyOwner {\n    require (contractStage < 3);\n    require (level > 0 && level < contributionCaps.length);\n    require (this.balance <= cap && contributionCaps[0] >= cap);\n    contributionCaps[level] = cap;\n    nextCapTime = 0;\n  }\n  \n  // This function changes every level cap at once, with an optional delay.\n  // Modifying the caps immediately will cancel any delayed cap change.\n  function modifyAllLevelCaps (uint[] cap, uint time) public onlyOwner {\n    require (contractStage < 3);\n    require (cap.length == contributionCaps.length-1);\n    require (time == 0 || time>block.timestamp);\n    if (time == 0) {\n      for (uint8 i = 0; i < cap.length; i++) {\n        modifyLevelCap(i+1, cap[i]);\n      }\n    } else {\n      nextContributionCaps = contributionCaps;\n      nextCapTime = time;\n      for (i = 0; i < cap.length; i++) {\n        require (contributionCaps[i+1] <= cap[i] && contributionCaps[0] >= cap[i]);\n        nextContributionCaps[i+1] = cap[i];\n      }\n    }\n  }\n  \n  // This function can be called during stages one or two to modify the maximum balance of the contract.\n  // It can only be called by the owner. The amount cannot be set to lower than the current balance of the contract.\n  function modifyMaxContractBalance (uint amount) public onlyOwner {\n    require (contractStage < 3);\n    require (amount >= contributionMin);\n    require (amount >= this.balance);\n    contributionCaps[0] = amount;\n    nextCapTime = 0;\n    for (uint8 i=1; i<contributionCaps.length; i++) {\n      if (contributionCaps[i]>amount) contributionCaps[i]=amount;\n    }\n  }\n  \n  // This internal function returns the cap amount of a whitelisted address.\n  function _checkCap (address addr) internal returns (uint) {\n    _checkWhitelistContract(addr);\n    var c = whitelist[addr];\n    if (!c.authorized) return 0;\n    if (nextCapTime>0 && block.timestamp>nextCapTime) {\n      contributionCaps = nextContributionCaps;\n      nextCapTime = 0;\n    }\n    if (c.cap<contributionCaps.length) return contributionCaps[c.cap];\n    return c.cap; \n  }\n  \n  // This internal function checks if an address is whitelisted in the whitelist contract.\n  function _checkWhitelistContract (address addr) internal {\n    var c = whitelist[addr];\n    if (!c.authorized) {\n      var level = whitelistContract.checkMemberLevel(addr);\n      if (level == 0 || level >= contributionCaps.length) return;\n      c.cap = level;\n      c.authorized = true;\n    }\n  }\n  \n  // This callable function returns the total pool cap, current balance and remaining balance to be filled.\n  function checkPoolBalance () view public returns (uint poolCap, uint balance, uint remaining) {\n    if (contractStage == 1) {\n      remaining = contributionCaps[0].sub(this.balance);\n    } else {\n      remaining = 0;\n    }\n    return (contributionCaps[0],this.balance,remaining);\n  }\n  \n  // This callable function returns the balance, contribution cap, and remaining available balance of any contributor.\n  function checkContributorBalance (address addr) view public returns (uint balance, uint cap, uint remaining) {\n    var c = whitelist[addr];\n    if (!c.authorized) {\n      cap = whitelistContract.checkMemberLevel(addr);\n      if (cap == 0) return (0,0,0);\n    } else {\n      cap = c.cap;\n    }\n    balance = c.balance;\n    if (contractStage == 1) {\n      if (cap<contributionCaps.length) { \n        if (nextCapTime == 0 || nextCapTime > block.timestamp) {\n          cap = contributionCaps[cap];\n        } else {\n          cap = nextContributionCaps[cap];\n        }\n      }\n      remaining = cap.sub(balance);\n      if (contributionCaps[0].sub(this.balance) < remaining) remaining = contributionCaps[0].sub(this.balance);\n    } else {\n      remaining = 0;\n    }\n    return (balance, cap, remaining);\n  }\n  \n  // This callable function returns the token balance that a contributor can currently claim.\n  function checkAvailableTokens (address addr, address tokenAddr) view public returns (uint tokenAmount) {\n    var c = whitelist[addr];\n    var d = distributionMap[tokenAddr];\n    for (uint i = c.tokensClaimed[tokenAddr]; i < d.pct.length; i++) {\n      tokenAmount = tokenAmount.add(_applyPct(c.balance, d.pct[i]));\n    }\n    return tokenAmount;\n  }\n  \n  // This function closes further contributions to the contract, advancing it to stage two.\n  // It can only be called by the owner.  After this call has been made, whitelisted addresses\n  // can still remove their eth from the contract but cannot contribute any more.\n  function closeContributions () public onlyOwner {\n    require (contractStage == 1);\n    contractStage = 2;\n  }\n  \n  // This function reopens the contract to contributions and further whitelisting, returning it to stage one.\n  // It can only be called by the owner during stage two.\n  function reopenContributions () public onlyOwner {\n    require (contractStage == 2);\n    contractStage = 1;\n  }\n  \n  // This function sets the receiving address that the contract will send the pooled eth to.\n  // It can only be called by the contract owner if the receiver address has not already been set.\n  // After making this call, the contract will be unable to send the pooled eth for 6000 blocks.\n  // This limitation is so that if the owner acts maliciously in making the change, all whitelisted\n  // addresses have ~24 hours to withdraw their eth from the contract.\n  function setReceiverAddress (address addr) public onlyOwner {\n    require (addr != 0x00 && receiverAddress == 0x00);\n    require (contractStage < 3);\n    receiverAddress = addr;\n    addressChangeBlock = block.number;\n    ReceiverAddressSet(addr);\n  }\n\n  // This function sends the pooled eth to the receiving address, calculates the % of unused eth to be returned,\n  // and advances the contract to stage three. It can only be called by the contract owner during stages one or two.\n  // The amount to send (given in wei) must be specified during the call. As this function can only be executed once,\n  // it is VERY IMPORTANT not to get the amount wrong.\n  function submitPool (uint amountInWei) public onlyOwner noReentrancy {\n    require (contractStage < 3);\n    require (receiverAddress != 0x00);\n    require (block.number >= addressChangeBlock.add(6000));\n    require (contributionMin <= amountInWei && amountInWei <= this.balance);\n    finalBalance = this.balance;\n    require (receiverAddress.call.value(amountInWei).gas(msg.gas.sub(5000))());\n    if (this.balance > 0) ethRefundAmount.push(this.balance);\n    contractStage = 3;\n    PoolSubmitted(receiverAddress, amountInWei);\n  }\n  \n  // This function opens the contract up for token withdrawals.\n  // It can only be called by the owner during stage 3.  The owner specifies the address of an ERC20 token\n  // contract that this contract has a balance in, and optionally a bool to prevent this token from being\n  // the default withdrawal (in the event of an airdrop, for example).\n  function enableTokenWithdrawals (address tokenAddr, bool notDefault) public onlyOwner noReentrancy {\n    require (contractStage == 3);\n    if (notDefault) {\n      require (activeToken != 0x00);\n    } else {\n      activeToken = tokenAddr;\n    }\n    var d = distributionMap[tokenAddr];    \n    if (d.pct.length==0) d.token = ERC20(tokenAddr);\n    uint amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    require (amount > 0);\n    if (feePct > 0) {\n      require (d.token.transfer(owner,_applyPct(amount,feePct)));\n    }\n    amount = d.token.balanceOf(this).sub(d.balanceRemaining);\n    d.balanceRemaining = d.token.balanceOf(this);\n    d.pct.push(_toPct(amount,finalBalance));\n  }\n  \n  // This is a standard function required for ERC223 compatibility.\n  function tokenFallback (address from, uint value, bytes data) public {\n    ERC223Received (from, value);\n  }\n  \n}",
  "bytecode": "60606040526000805460ff1916600117905534156200001d57600080fd5b604051620022ec380380620022ec8339810160405280805191906020018051820191906020018051915060009050606482106200005957600080fd5b600183511180156200006d57506101008351105b15156200007957600080fd5b5060015b82518160ff161015620000d157826000815181106200009857fe5b90602001906020020151838260ff1681518110620000b257fe5b906020019060200201511115620000c857600080fd5b6001016200007d565b60008054600160a060020a033381166101000261010060a860020a03199092169190911790915560038054918616600160a060020a0319909216919091179055600183805162000126929160200190620001e4565b506200014282606464010000000062001b486200017282021704565b600255505050600160a060020a0333166000908152600a60205260409020805460ff191660011790555062000254565b600081620001988468056bc75e2d6310000064010000000062001f80620001aa82021704565b811515620001a257fe5b049392505050565b600080831515620001bf5760009150620001dd565b50828202828482811515620001d057fe5b0414620001d957fe5b8091505b5092915050565b82805482825590600052602060002090810192821562000222579160200282015b828111156200022257825182559160200191906001019062000205565b506200023092915062000234565b5090565b6200025191905b808211156200023057600081556001016200023b565b90565b61208880620002646000396000f30060606040526004361061017c5763ffffffff60e060020a600035041663021bc97481146101b45780630370ca41146101eb57806316fed3e2146102145780632129e25a1461024357806333e7ed61146102685780633de39c111461027e5780634a5df250146102915780634fbc7e11146102a757806351cff8d9146102cb57806352f1e07b146102ea578063732c227f14610300578063737c2d8c1461031657806374a8f1031461033b5780637c02e1ea1461035a5780638279c7db1461036d57806384900b041461038c57806386a17f291461039f5780638796d43d146103b85780638c60e806146103cb5780638da5cb5b146103de578063a02cf937146103f1578063abccb04314610404578063adb5735c1461041a578063aee0abaa1461043f578063b9c009f014610490578063bcc13d1d146104af578063be189035146104c2578063c0ee0b8a146104e4578063c1dbd9b214610549578063cd3367071461056b578063ece2ea401461057e578063fb73a59314610591575b60005460ff1660011415610197576101926105e2565b6101b2565b60005460ff16600314156101ad576101926106d0565b600080fd5b005b34156101bf57600080fd5b6101c7610799565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156101f657600080fd5b6101fe61081b565b60405160ff909116815260200160405180910390f35b341561021f57600080fd5b610227610824565b604051600160a060020a03909116815260200160405180910390f35b341561024e57600080fd5b610256610833565b60405190815260200160405180910390f35b341561027357600080fd5b6101b2600435610839565b341561028957600080fd5b6102566109e2565b341561029c57600080fd5b6102566004356109eb565b34156102b257600080fd5b6101b2600160a060020a03600435166024351515610a0a565b34156102d657600080fd5b6101b2600160a060020a0360043516610d56565b34156102f557600080fd5b610256600435610e16565b341561030b57600080fd5b610256600435610e24565b341561032157600080fd5b610256600160a060020a0360043581169060243516610e32565b341561034657600080fd5b6101b2600160a060020a0360043516610ec1565b341561036557600080fd5b610256611052565b341561037857600080fd5b6101b2600160a060020a0360043516611058565b341561039757600080fd5b610227611124565b34156103aa57600080fd5b6101b260043560243561113c565b34156103c357600080fd5b6102276111f1565b34156103d657600080fd5b6101b2611200565b34156103e957600080fd5b610227611241565b34156103fc57600080fd5b610256611255565b341561040f57600080fd5b6101b260043561125b565b341561042557600080fd5b6101b2600160a060020a036004358116906024351661133c565b341561044a57600080fd5b6101b26004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061139e92505050565b341561049b57600080fd5b6101c7600160a060020a0360043516611423565b34156104ba57600080fd5b6102566115c8565b34156104cd57600080fd5b6101b2600160a060020a03600435166024356115d4565b34156104ef57600080fd5b6101b260048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061172d95505050505050565b341561055457600080fd5b6101b2600160a060020a0360043516602435611776565b341561057657600080fd5b6101b2611869565b341561058957600080fd5b6102566118aa565b341561059c57600080fd5b6101b2600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506118b092505050565b60008054819060ff166001146105f457fe5b640ba43b74003a111561060657600080fd5b60018054600090811061061557fe5b600091825260209091200154600160a060020a03301631111561063757600080fd5b600160a060020a0333166000908152600a602052604090206002810154909250610667903463ffffffff611a4516565b905067016345785d8a000081101561067e57600080fd5b61068733611a5f565b81111561069357600080fd5b6002820181905560008051602061203d8339815191523382604051600160a060020a03909216825260208201526040908101905180910390a15050565b60005460ff166003146106df57fe5b60005433600160a060020a0390811661010090920416148061070f575060035433600160a060020a039081169116145b151561071a57600080fd5b67016345785d8a000034101561072f57600080fd5b60088054600181016107418382611fab565b50600091825260209091203491018190557fa6b266978e1d6bcae9b5baa4078b3b92fc622b302cca549cf2ebf2e4723aca3c903390604051600160a060020a03909216825260208201526040908101905180910390a1565b600080548190819060ff16600114156107e9576107e230600160a060020a031631600160008154811015156107ca57fe5b6000918252602090912001549063ffffffff611b0916565b90506107ed565b5060005b6001805460009081106107fc57fe5b6000918252602090912001549330600160a060020a0316319350909150565b60005460ff1681565b600354600160a060020a031681565b60075481565b60005433600160a060020a03908116610100909204161461085957600080fd5b600c5460ff161561086957600080fd5b600c805460ff19166001179055600054600360ff919091161061088b57600080fd5b600354600160a060020a031615156108a257600080fd5b6006546108b79061177063ffffffff611a4516565b4310156108c357600080fd5b8067016345785d8a0000111580156108e5575030600160a060020a0316318111155b15156108f057600080fd5b600160a060020a033081163160075560035416816109176113885a9063ffffffff611b0916565b90604051600060405180830381858888f19350505050151561093857600080fd5b600030600160a060020a031631111561097757600880546001810161095d8382611fab565b5060009182526020909120600160a060020a033016319101555b6000805460ff19166003908117909155547f166428c0f697cf2ebca7e4045ddec0f48bb4914f5ffac8765da1551e2881a51990600160a060020a031682604051600160a060020a03909216825260208201526040908101905180910390a150600c805460ff19169055565b640ba43b740081565b60058054829081106109f957fe5b600091825260209091200154905081565b60008054819033600160a060020a039081166101009092041614610a2d57600080fd5b600c5460ff1615610a3d57600080fd5b600c8054600160ff1990911617905560005460ff16600314610a5e57600080fd5b8215610a8057600954600160a060020a03161515610a7b57600080fd5b610aa9565b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555b600160a060020a0384166000908152600b6020526040902060018101549092501515610af657815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161782555b60028201548254610b7f9190600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b5857600080fd5b6102c65a03f11515610b6957600080fd5b505050604051805191905063ffffffff611b0916565b905060008111610b8e57600080fd5b60006002541115610c37578154600054600254600160a060020a039283169263a9059cbb9261010090041690610bc5908590611b1b565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c1157600080fd5b6102c65a03f11515610c2257600080fd5b505050604051805190501515610c3757600080fd5b60028201548254610c999190600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b5857600080fd5b8254909150600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610cf457600080fd5b6102c65a03f11515610d0557600080fd5b50505060405180516002840155506001808301805490918101610d288382611fab565b91600052602060002090016000610d4184600754611b48565b9091555050600c805460ff1916905550505050565b600160a060020a0333166000908152600a602052604081206002810154909190819011610d8257600080fd5b600054600360ff9091161015610e0757506002810180546000909155600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610dcf57600080fd5b60008051602061203d833981519152336000604051600160a060020a03909216825260208201526040908101905180910390a1610e11565b610e113384611b64565b505050565b60088054829081106109f957fe5b60018054829081106109f957fe5b600160a060020a038083166000908152600a602090815260408083209385168352600b8252808320600485019092528220549192915b6001820154811015610eb857610eae610ea184600201548460010184815481101515610e9057fe5b906000526020600020900154611b1b565b859063ffffffff611a4516565b9350600101610e68565b50505092915050565b6000805433600160a060020a039081166101009092041614610ee257600080fd5b600054600360ff90911610610ef657600080fd5b600160a060020a0382166000908152600a602052604090205460ff161515610f1d57600080fd5b738d95b038ca80a986425fa240c3c17fb2b6e9bc6363417ba8408360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f7f57600080fd5b6102c65a03f11515610f9057600080fd5b5050506040518051159050610fa457600080fd5b600160a060020a0382166000908152600a60205260408120805460ff1916815560020154111561104e5750600160a060020a0381166000818152600a6020526040808220600201805492905590919082156108fc0290839051600060405180830381858888f19350505050151561101a57600080fd5b60008051602061203d833981519152826000604051600160a060020a03909216825260208201526040908101905180910390a15b5050565b60065481565b60005433600160a060020a03908116610100909204161461107857600080fd5b600160a060020a038116158015906110995750600354600160a060020a0316155b15156110a457600080fd5b600054600360ff909116106110b857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055436006557f17528c7f18bea16a4db7e968a53fe806a68a29800c78185e7d52d343dd8004ba81604051600160a060020a03909116815260200160405180910390a150565b738d95b038ca80a986425fa240c3c17fb2b6e9bc6381565b60005433600160a060020a03908116610100909204161461115c57600080fd5b600054600360ff9091161061117057600080fd5b600082118015611181575060015482105b151561118c57600080fd5b8030600160a060020a031631111580156111c1575080600160008154811015156111b257fe5b90600052602060002090015410155b15156111cc57600080fd5b806001838154811015156111dc57fe5b60009182526020822001919091556004555050565b600954600160a060020a031681565b60005433600160a060020a03908116610100909204161461122057600080fd5b60005460ff1660011461123257600080fd5b6000805460ff19166002179055565b6000546101009004600160a060020a031681565b60025481565b6000805433600160a060020a03908116610100909204161461127c57600080fd5b600054600360ff9091161061129057600080fd5b67016345785d8a00008210156112a557600080fd5b600160a060020a033016318210156112bc57600080fd5b81600160008154811015156112cd57fe5b60009182526020822001919091556004555060015b60015460ff8216101561104e578160018260ff1681548110151561130257fe5b9060005260206000209001541115611334578160018260ff1681548110151561132757fe5b6000918252602090912001555b6001016112e2565b60005433600160a060020a03908116610100909204161461135c57600080fd5b60005460ff1660031461136e57600080fd5b600160a060020a0382166000908152600a60205260408120600201541161139457600080fd5b61104e8282611b64565b6000805433600160a060020a0390811661010090920416146113bf57600080fd5b60ff8351106113cd57600080fd5b6000821180156113de575060015482105b15156113e957600080fd5b5060005b82518160ff161015610e115761141b838260ff168151811061140b57fe5b9060200190602002015183611776565b6001016113ed565b600160a060020a0381166000908152600a6020526040812080548291829160ff1615156114e357738d95b038ca80a986425fa240c3c17fb2b6e9bc6363417ba8408660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156114ac57600080fd5b6102c65a03f115156114bd57600080fd5b50505060405180519350508215156114de57600093508392508291506115c0565b6114eb565b806003015492505b600281015460005490945060ff16600114156115bb5760015483101561155e57600454158061151b575042600454115b1561154157600180548490811061152e57fe5b906000526020600020900154925061155e565b600580548490811061154f57fe5b90600052602060002090015492505b61156e838563ffffffff611b0916565b91508161158f30600160a060020a031631600160008154811015156107ca57fe5b10156115b6576115b330600160a060020a031631600160008154811015156107ca57fe5b91505b6115c0565b600091505b509193909250565b67016345785d8a000081565b600080548190819033600160a060020a0390811661010090920416146115f957600080fd5b600054600360ff9091161061160d57600080fd5b60015484108061164a575067016345785d8a0000841015801561164a575060018054600090811061163a57fe5b9060005260206000209001548411155b151561165557600080fd5b61165e85611eb0565b600160a060020a0385166000908152600a60205260409020805490935060ff16151561168957600080fd5b60028301546003840185905591506116a085611a5f565b9050808211156117265760028301819055600160a060020a0385166108fc6116ce848463ffffffff611b0916565b9081150290604051600060405180830381858888f1935050505015156116f357600080fd5b60008051602061203d8339815191528582604051600160a060020a03909216825260208201526040908101905180910390a15b5050505050565b7f121b68c1c3978d37f853f81c5ba5a0d2d36bb308e0765a3d6eb906c01ebdfe888383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b6000805433600160a060020a03908116610100909204161461179757600080fd5b60005460ff166001146117a957600080fd5b6117b283611eb0565b600160a060020a0383166000908152600a602052604090205460ff16156117d857600080fd5b6000821180156117e9575060015482105b80611821575067016345785d8a00008210158015611821575060018054600090811061181157fe5b9060005260206000209001548211155b151561182c57600080fd5b50813b801561183a57600080fd5b50600160a060020a039091166000908152600a602052604090206003810191909155805460ff19166001179055565b60005433600160a060020a03908116610100909204161461188957600080fd5b60005460ff1660021461189b57600080fd5b6000805460ff19166001179055565b60045481565b6000805433600160a060020a0390811661010090920416146118d157600080fd5b600054600360ff909116106118e557600080fd5b600154600019018351146118f857600080fd5b81158061190457504282115b151561190f57600080fd5b81151561195b575060005b82518160ff1610156119565761194e8160010160ff16848360ff168151811061193f57fe5b9060200190602002015161113c565b60010161191a565b610e11565b6001805461196b91600591611fcf565b5050600481905560005b82518160ff161015610e1157828160ff168151811061199057fe5b906020019060200201516001805460ff848301169081106119ad57fe5b906000526020600020900154111580156119f95750828160ff16815181106119d157fe5b906020019060200201516001805460009081106119ea57fe5b90600052602060002090015410155b1515611a0457600080fd5b828160ff1681518110611a1357fe5b906020019060200201516005805460ff6001850116908110611a3157fe5b600091825260209091200155600101611975565b600082820183811015611a5457fe5b8091505b5092915050565b600080611a6b83611eb0565b50600160a060020a0382166000908152600a60205260409020805460ff161515611a985760009150611b03565b6000600454118015611aab575060045442115b15611ac75760058054611ac091600191611fcf565b5060006004555b60015460038201541015611afb5760018160030154815481101515611ae857fe5b9060005260206000209001549150611b03565b806003015491505b50919050565b600082821115611b1557fe5b50900390565b600068056bc75e2d63100000611b37848463ffffffff611f8016565b811515611b4057fe5b049392505050565b600081611b378468056bc75e2d6310000063ffffffff611f8016565b600080548190819081908190819060ff16600314611b7e57fe5b600160a060020a038089166000908152600a60205260409020965087161515611bb057600954600160a060020a031696505b600160a060020a0387166000908152600b602052604090206001870154600854919650901180611bfd5750600160a060020a03871660009081526004870160205260409020546001860154115b1515611c0857600080fd5b60018601546008541115611d0657611c268660020154600754611b48565b935060009250856001015491505b600854821015611c7f57611c72611c65600884815481101515611c5357fe5b90600052602060002090015486611b1b565b849063ffffffff611a4516565b9250600190910190611c34565b60085460018701556000831115611d0657600160a060020a03881683156108fc0284604051600060405180830381858888f193505050501515611cc157600080fd5b7fffab3269bdaceca4d1bbc53e74b982ac2b306687e17e21f1e499e7fdf6751ac88884604051600160a060020a03909216825260208201526040908101905180910390a15b600160a060020a038716600090815260048701602052604090205460018601541115611ea6575050600160a060020a0385166000908152600485016020526040812054905b6001850154821015611d8d57611d80611d7387600201548760010185815481101515610e9057fe5b829063ffffffff611a4516565b6001909201919050611d4b565b6001850154600160a060020a0388166000908152600488016020526040812091909155811115611ea6578454600160a060020a031663a9059cbb898360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611e1557600080fd5b6102c65a03f11515611e2657600080fd5b505050604051805190501515611e3b57600080fd5b6002850154611e50908263ffffffff611b0916565b60028601557f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a4888883604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b5050505050505050565b600160a060020a0381166000908152600a60205260408120805490919060ff161515610e1157738d95b038ca80a986425fa240c3c17fb2b6e9bc6363417ba8408460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f3857600080fd5b6102c65a03f11515611f4957600080fd5b5050506040518051915050801580611f6357506001548110155b15611f6d57610e11565b6003820155805460ff1916600117905550565b600080831515611f935760009150611a58565b50828202828482811515611fa357fe5b0414611a5457fe5b815481835581811511610e1157600083815260209020610e1191810190830161201f565b82805482825590600052602060002090810192821561200f5760005260206000209182015b8281111561200f578254825591600101919060010190611ff4565b5061201b92915061201f565b5090565b61203991905b8082111561201b5760008155600101612025565b905600bd5304e38e372b10ebf161f6b67eeaf9f4e25653126622b0e2497484850d10f4a165627a7a7230582094f7c8efa2616031dea7547df4b87bfb6cb7c97e5d287265b597afe10caa2b1f0029000000000000000000000000a322b168c6f67f40311259b31e7db5c5601cd9080000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000133e9d5b211fac00000000000000000000000000000000000000000000000000133e9d5b211fac00000000000000000000000000000000000000000000000000133e9d5b211fac0000",
  "constructorArguments": "000000000000000000000000a322b168c6f67f40311259b31e7db5c5601cd9080000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000133e9d5b211fac00000000000000000000000000000000000000000000000000133e9d5b211fac00000000000000000000000000000000000000000000000000133e9d5b211fac0000"
}