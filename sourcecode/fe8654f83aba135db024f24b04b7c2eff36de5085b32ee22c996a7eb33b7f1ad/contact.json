{
  "address": "0x01e45b8d0c51f05f17385dd3416fe3aa5bfd89ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "COINBIG",
  "compilerVersion": "v0.4.17-nightly.2017.8.24+commit.12d9f79",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-27\n*/\n\npragma solidity ^0.4.11;\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply() constant returns (uint256 totalSupply);\n  function balanceOf(address who) constant returns (uint256);\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool ok);\n  function transferFrom(address from, address to, uint256 value) returns (bool ok);\n  function approve(address spender, uint256 value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, SafeMath {\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n  uint256 public _totalSupply;\n  address public _creator;\n  bool bIsFreezeAll = false;\n\n  function totalSupply() constant returns (uint256 totalSupply) {\n\ttotalSupply = _totalSupply;\n  }\n\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    require(bIsFreezeAll == false);\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    require(bIsFreezeAll == false);\n    var _allowance = allowed[_from][msg.sender];\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n\trequire(bIsFreezeAll == false);\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function freezeAll()\n  {\n\trequire(msg.sender == _creator);\n\tbIsFreezeAll = !bIsFreezeAll;\n  }\n}\n\ncontract COINBIG is StandardToken {\n\n  string public name = \"COINBIG\";\n  string public symbol = \"CB\";\n  uint256 public constant decimals = 18;\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * 10 ** decimals;\t\n\n  \n  function COINBIG() {\n    _totalSupply = INITIAL_SUPPLY;\n\t_creator = 0xfCe1155052AF6c8CB04EDA1CeBB390132E2F0012;\n\tbalances[_creator] = INITIAL_SUPPLY;\n\tbIsFreezeAll = false;\n  }\n  \n  function destroy() {\n\trequire(msg.sender == _creator);\n\tsuicide(_creator);\n  }\n\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600781527f434f494e424947000000000000000000000000000000000000000000000000006020820152600490805161005b929160200190610118565b5060408051908101604052600281527f4342000000000000000000000000000000000000000000000000000000000000602082015260059080516100a3929160200190610118565b5034156100af57600080fd5b5b6b204fce5e3e25026110000000600281905560038054600160a060020a03191673fce1155052af6c8cb04eda1cebb390132e2f001217808255600160a060020a0316600090815260208190526040902091909155805460a060020a60ff02191690555b6101b8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015957805160ff1916838001178555610186565b82800160010185558215610186579182015b8281111561018657825182559160200191906001019061016b565b5b50610193929150610197565b5090565b6101b591905b80821115610193576000815560010161019d565b5090565b90565b610907806101c76000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d2578063095ea7b31461015d57806318160ddd1461019357806323b872dd146101b85780632ff2e9dc146101f4578063313ce567146102195780633eaaf86b1461023e57806370a082311461026357806383197ef01461029457806395d89b41146102a957806399464c8914610334578063a9059cbb14610349578063bc8bde641461037f578063dd62ed3e146103ae575b600080fd5b34156100dd57600080fd5b6100e56103e5565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016857600080fd5b61017f600160a060020a0360043516602435610483565b604051901515815260200160405180910390f35b341561019e57600080fd5b6101a6610507565b60405190815260200160405180910390f35b34156101c357600080fd5b61017f600160a060020a036004358116906024351660443561050e565b604051901515815260200160405180910390f35b34156101ff57600080fd5b6101a661062a565b60405190815260200160405180910390f35b341561022457600080fd5b6101a661063a565b60405190815260200160405180910390f35b341561024957600080fd5b6101a661063f565b60405190815260200160405180910390f35b341561026e57600080fd5b6101a6600160a060020a0360043516610645565b60405190815260200160405180910390f35b341561029f57600080fd5b6102a7610664565b005b34156102b457600080fd5b6100e561068f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033f57600080fd5b6102a761072d565b005b341561035457600080fd5b61017f600160a060020a036004351660243561077b565b604051901515815260200160405180910390f35b341561038a57600080fd5b610392610860565b604051600160a060020a03909116815260200160405180910390f35b34156103b957600080fd5b6101a6600160a060020a036004358116906024351661086f565b60405190815260200160405180910390f35b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b505050505081565b60035460009060a060020a900460ff161561049d57600080fd5b600160a060020a03338116600081815260016020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6002545b90565b600354600090819060a060020a900460ff161561052a57600080fd5b50600160a060020a0380851660009081526001602090815260408083203385168452825280832054938716835290829052902054610568908461089c565b600160a060020a03808616600090815260208190526040808220939093559087168152205461059790846108c4565b600160a060020a0386166000908152602081905260409020556105ba81846108c4565b600160a060020a03808716600081815260016020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b6b204fce5e3e2502611000000081565b601281565b60025481565b600160a060020a0381166000908152602081905260409020545b919050565b60035433600160a060020a0390811691161461067f57600080fd5b600354600160a060020a0316ff5b565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b505050505081565b60035433600160a060020a0390811691161461074857600080fd5b6003805474ff000000000000000000000000000000000000000019811660a060020a9182900460ff16159091021790555b565b60035460009060a060020a900460ff161561079557600080fd5b600160a060020a0333166000908152602081905260409020546107b890836108c4565b600160a060020a0333811660009081526020819052604080822093909355908516815220546107e7908361089c565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b92915050565b600354600160a060020a031681565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b60008282018381108015906108b15750828110155b15156108b957fe5b8091505b5092915050565b6000828211156108d057fe5b508082035b929150505600a165627a7a72305820b9faf736accd8c8eadda38d1a1d17310698aacbed9ec9ad0f547590d212a6eee0029"
}