{
  "address": "0xe25cf98071bd482e2830f7daa668132b3c75a5cf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sports3D",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\npragma solidity ^0.4.20;\n\ncontract Sports3D {\n\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"Sports3D\";\n    string public symbol = \"TICKETS\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 25% dividends for TICKETS purchase\n    uint8 constant internal entryFee_ = 25;\n\n    /// @dev 10% dividends for TICKETS transfer\n    uint8 constant internal transferFee_ = 10;\n\n    /// @dev 15% dividends for TICKETS selling\n    uint8 constant internal exitFee_ = 15;\n\n    /// @dev 35% masternode\n    uint8 constant internal refferalFee_ = 35;\n\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000007 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev Collect 100 TICKETS to activate your link\n    uint256 public stakingRequirement = 100e18;\n    \n    address internal devFeeAddress = 0x4c326AB6Ee2b1D6BB001231Ea76b8C7093474eD0;\n\n    \n    address internal admin;\n    mapping(address => bool) internal ambassadors_;\n\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1.1 ether;\n    uint256 constant internal ambassadorQuota_ = 5000 ether;\n    bool public onlyAmbassadors = true;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    \n    uint ACTIVATION_TIME = 1548010801;\n    \n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if(onlyAmbassadors){\n            require(\n                // is the customer in the ambassador list?\n                (ambassadors_[msg.sender] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[msg.sender] + _amountOfEthereum) <= ambassadorMaxPurchase_)\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[msg.sender] = SafeMath.add(ambassadorAccumulatedQuota_[msg.sender], _amountOfEthereum);\n        \n            // execute\n            _;\n        }else{\n            onlyAmbassadors=false;\n            _;\n        }\n        \n    }\n    \n    \n    function Sports3D() public{\n        admin=msg.sender;\n        ambassadors_[0xd558E92330bF2473371D5cd8D04555FEfd6eDa31] = true; //\n        ambassadors_[0x267fa9F2F846da2c7A07eCeCc52dF7F493589098] = true; // \n        ambassadors_[0x4f574642be8C00BD916803c4BC1EC1FC05efa5cF] = true; // \n        ambassadors_[0xB1dB0FB75Df1cfb37FD7fF0D7189Ddd0A68C9AAF] = true; //\n        ambassadors_[0x7A5C4cAF90e9211D7D474918F764eBdC2f9Ec1a3] = true; //\n        ambassadors_[0x77dD6596171174C8A21Ad859847ddAdDb8D11460] = true; //\n        ambassadors_[0xa19D77de5eC68f9c3D8Ece09448130D9e92332ad] = true; //\n        ambassadors_[0x17c1cF2eeFda3f339996c67cd18d4389D132D033] = true; //\n        ambassadors_[0xEc31176d4df0509115abC8065A8a3F8275aafF2b] = true; //\n        ambassadors_[0x2C605D4430Cc955BEdD4CB9d5B2F5fB9Cf143d2E] = true; //\n        \n        \n        \n        \n\n    }\n    \n  function disableAmbassadorPhase() public{\n        require(admin==msg.sender);\n        onlyAmbassadors=false;\n    }\n    \n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n         onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n         onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _devFee = SafeMath.div(SafeMath.mul(_ethereum, 1), 200);\n        \n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _devFee);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        devFeeAddress.transfer(_devFee);\n        // fire event\n         onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n       \n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     *  Remember, there's a 4% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // liquify 5% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n        // fire event\n         Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return this.balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum)\n       internal returns (uint256) {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 5), 200));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 200));\n        \n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n         onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        devFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600881527f53706f7274733344000000000000000000000000000000000000000000000000602082015260009080516200004d929160200190620002ce565b5060408051908101604052600781527f5449434b455453000000000000000000000000000000000000000000000000006020820152600190805162000097929160200190620002ce565b5068056bc75e2d6310000060025560038054600160a060020a031916734c326ab6ee2b1d6bb001231ea76b8c7093474ed0179055600b805460ff19166001179055635c44c531600d553415620000ec57600080fd5b60048054600160a060020a03191633600160a060020a031617905560056020527f6d5b60d44cd0efb7c25f53664606da9d26d45a8ab2bee0a96a962fef6c1b8ce8805460ff1990811660019081179092557faad15bf1c8c13b64d6caec7a83e7ec4f0b1ee76fbaf81c6a2cb6881d4e1aaa2180548216831790557fc9790418654300bf83255b0071f7bc88c54b21ee21b9a6d6e02741cbbfa50cc180548216831790557f1ebd806f4216f653ebfbad3a857bb2ec803d0da41801260b95b14356e984e3c280548216831790557f6c2a5ac2f17e09f6009f03ff9498df9cecdc98eaa6ab46b2af0d3b6bf5f71ee580548216831790557fe780e0e944f22f9ef038305b3b258db47dd5f0065f63d2230da08cb79fd62fee80548216831790557f58689a98c4a41bb448e9d0319757991f60a6ca9ef092406db68066f6a5a15aee80548216831790557fedfcaada3be154526ceeb27fd69d15307837a67fce83a5e23122253aef5731ec80548216831790557f0cf4c472954f557739a01e431a227e8b4bab49c2c78a6905ba59c43428123f7d8054821683179055732c605d4430cc955bedd4cb9d5b2f5fb9cf143d2e6000527ffe967786dd4997e267883e5e82c5319dcddb34b9f23f274c29bff7af01aaeaf28054909116909117905562000373565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031157805160ff191683800117855562000341565b8280016001018555821562000341579182015b828111156200034157825182559160200191906001019062000324565b506200034f92915062000353565b5090565b6200037091905b808211156200034f57600081556001016200035a565b90565b6114ae80620003836000396000f3006060604052600436106101265763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013457806306fdde031461016557806310d0ffdd146101ef57806318160ddd14610205578063226093731461021857806327defa1f1461022e578063313ce56714610255578063330ae38f1461027e5780633ccfd60b146102935780634b750334146102a657806356d399e8146102b9578063688abbf7146102cc5780636b2f4632146102e457806370a08231146102f75780638620410b14610316578063949e8acd1461032957806395d89b411461033c578063a9059cbb1461034f578063e4849b3214610371578063e9fad8ee14610387578063f088d5471461039a578063fdb5a03e146103ae575b6101313460006103c1565b50005b341561013f57600080fd5b610153600160a060020a0360043516610aa5565b60405190815260200160405180910390f35b341561017057600080fd5b610178610adb565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b457808201518382015260200161019c565b50505050905090810190601f1680156101e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fa57600080fd5b610153600435610b79565b341561021057600080fd5b610153610bac565b341561022357600080fd5b610153600435610bb2565b341561023957600080fd5b610241610bee565b604051901515815260200160405180910390f35b341561026057600080fd5b610268610bf7565b60405160ff909116815260200160405180910390f35b341561028957600080fd5b610291610bfc565b005b341561029e57600080fd5b610291610c23565b34156102b157600080fd5b610153610cea565b34156102c457600080fd5b610153610d41565b34156102d757600080fd5b6101536004351515610d47565b34156102ef57600080fd5b610153610d8a565b341561030257600080fd5b610153600160a060020a0360043516610d98565b341561032157600080fd5b610153610db3565b341561033457600080fd5b610153610dfe565b341561034757600080fd5b610178610e10565b341561035a57600080fd5b610241600160a060020a0360043516602435610e7b565b341561037c57600080fd5b610291600435611021565b341561039257600080fd5b6102916111e1565b610153600160a060020a0360043516611218565b34156103b957600080fd5b610291611224565b60008060008060008060008060008a600d54421015156103e657600b805460ff191690555b600b5460ff161561079757600160a060020a03331660009081526005602052604090205460ff16151560011480156104415750600160a060020a0333166000908152600c6020526040902054670f43fc2c04ee000090820111155b151561044c57600080fd5b600160a060020a0333166000908152600c602052604090205461046f90826112da565b33600160a060020a0381166000908152600c602052604090209190915598506104a361049c8d60196112f4565b606461131f565b97506104b361049c8960236112f4565b96506104bf8888611336565b95506104cb8c89611336565b94506104e4856104df61049c8f60016112f4565b611336565b94506104ff856104df6104f88f60056112f4565b60c861131f565b9450610513856104df61049c8f60016112f4565b9450610527856104df61049c8f60016112f4565b945061053b856104df61049c8f60016112f4565b945061054f856104df6104f88f60016112f4565b945061055a85611348565b9350604060020a8602925060008411801561057f575060095461057d85826112da565b115b151561058a57600080fd5b600160a060020a038b16158015906105b4575088600160a060020a03168b600160a060020a031614155b80156105da5750600254600160a060020a038c1660009081526006602052604090205410155b1561062057600160a060020a038b1660009081526007602052604090205461060290886112da565b600160a060020a038c16600090815260076020526040902055610636565b61062a86886112da565b9550604060020a860292505b600060095411156106905761064d600954856112da565b6009819055604060020a870281151561066257fe5b600a8054929091049091019055600954604060020a870281151561068257fe5b048402830383039250610696565b60098490555b600160a060020a0389166000908152600660205260409020546106b990856112da565b600160a060020a03808b16600081815260066020908152604080832095909555600a546008909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8742610723610db3565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc61076a61049c8f60016112f4565b9081150290604051600060405180830381858888f19350505050151561078f57600080fd5b839950610a96565b600b805460ff191690553398506107b261049c8d60196112f4565b97506107c261049c8960236112f4565b96506107ce8888611336565b95506107da8c89611336565b94506107ee856104df61049c8f60016112f4565b9450610802856104df6104f88f60056112f4565b9450610816856104df61049c8f60016112f4565b945061082a856104df61049c8f60016112f4565b945061083e856104df61049c8f60016112f4565b9450610852856104df6104f88f60016112f4565b945061085d85611348565b9350604060020a86029250600084118015610882575060095461088085826112da565b115b151561088d57600080fd5b600160a060020a038b16158015906108b7575088600160a060020a03168b600160a060020a031614155b80156108dd5750600254600160a060020a038c1660009081526006602052604090205410155b1561092357600160a060020a038b1660009081526007602052604090205461090590886112da565b600160a060020a038c16600090815260076020526040902055610939565b61092d86886112da565b9550604060020a860292505b6000600954111561099357610950600954856112da565b6009819055604060020a870281151561096557fe5b600a8054929091049091019055600954604060020a870281151561098557fe5b048402830383039250610999565b60098490555b600160a060020a0389166000908152600660205260409020546109bc90856112da565b600160a060020a03808b16600081815260066020908152604080832095909555600a546008909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8742610a26610db3565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc610a6d61049c8f60016112f4565b9081150290604051600060405180830381858888f193505050501515610a9257600080fd5b8399505b50505050505050505092915050565b600160a060020a0316600090815260086020908152604080832054600690925290912054600a54604060020a9102919091030490565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b505050505081565b6000808080610b8c61049c8660196112f4565b9250610b988584611336565b9150610ba382611348565b95945050505050565b60095490565b6000806000806009548511151515610bc957600080fd5b610bd2856113e1565b9250610be261049c84600f6112f4565b9150610ba38383611336565b600b5460ff1681565b601281565b60045433600160a060020a03908116911614610c1757600080fd5b600b805460ff19169055565b6000806000610c326001610d47565b11610c3c57600080fd5b339150610c496000610d47565b600160a060020a03831660008181526008602090815260408083208054604060020a870201905560079091528082208054929055920192509082156108fc0290839051600060405180830381858888f193505050501515610ca957600080fd5b81600160a060020a03167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc8260405190815260200160405180910390a25050565b60008060008060095460001415610d08576406fc23ac009350610d3b565b610d19670de0b6b3a76400006113e1565b9250610d2961049c84600f6112f4565b9150610d358383611336565b90508093505b50505090565b60025481565b60003382610d5d57610d5881610aa5565b610d81565b600160a060020a038116600090815260076020526040902054610d7f82610aa5565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a031660009081526006602052604090205490565b60008060008060095460001415610dd157642794ca24009350610d3b565b610de2670de0b6b3a76400006113e1565b9250610df261049c8460196112f4565b9150610d3583836112da565b600033610e0a81610d98565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b715780601f10610b4657610100808354040283529160200191610b71565b600080600080600080610e8c610dfe565b11610e9657600080fd5b33600160a060020a038116600090815260066020526040902054909450861115610ebf57600080fd5b6000610ecb6001610d47565b1115610ed957610ed9610c23565b610ee761049c87600a6112f4565b9250610ef38684611336565b9150610efe836113e1565b9050610f0c60095484611336565b600955600160a060020a038416600090815260066020526040902054610f329087611336565b600160a060020a038086166000908152600660205260408082209390935590891681522054610f6190836112da565b600160a060020a03888116600081815260066020908152604080832095909555600a8054948a16835260089091528482208054948c02909403909355825491815292909220805492850290920190915554600954610fd09190604060020a8402811515610fca57fe5b046112da565b600a55600160a060020a038088169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060019695505050505050565b600080600080600080600080611035610dfe565b1161103f57600080fd5b33600160a060020a03811660009081526006602052604090205490975088111561106857600080fd5b879550611074866113e1565b945061108461049c86600f6112f4565b93506110946104f88660016112f4565b92506110a96110a38686611336565b84611336565b91506110b760095487611336565b600955600160a060020a0387166000908152600660205260409020546110dd9087611336565b600160a060020a038816600090815260066020908152604080832093909355600a5460089091529181208054928902604060020a86020192839003905560095491925090111561114457611140600a54600954604060020a8702811515610fca57fe5b600a555b600354600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561117757600080fd5b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8784426111ad610db3565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a25050505050505050565b33600160a060020a0381166000908152600660205260408120549081111561120c5761120c81611021565b611214610c23565b5050565b6000610d8434836103c1565b6000806000806112346001610d47565b1161123e57600080fd5b6112486000610d47565b33600160a060020a03811660009081526008602090815260408083208054604060020a8702019055600790915281208054908290559092019450925061128f9084906103c1565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458848360405191825260208201526040908101905180910390a2505050565b6000828201838110156112e957fe5b8091505b5092915050565b60008083151561130757600091506112ed565b5082820282848281151561131757fe5b04146112e957fe5b600080828481151561132d57fe5b04949350505050565b60008282111561134257fe5b50900390565b6009546000906c01431e0fae6d7217caa000000090829064104c533c006113ce6113c8731885d12ec9ad4d4c1f4d378616ef8000000000008802690109a12906aff61000006002860a02017029246dec1181b372bd378abb0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161144d565b85611336565b8115156113d757fe5b0403949350505050565b600954600090670de0b6b3a764000083810191810190839061143a6406fc23ac0082850464104c533c0002018702600283670de0b6b3a763ffff1982890a8b9003010464104c533c000281151561143457fe5b04611336565b81151561144357fe5b0495945050505050565b80600260018201045b81811015610d8457809150600281828581151561146f57fe5b040181151561147a57fe5b0490506114565600a165627a7a7230582094d85577a2d47e6b2ebd1825e7cb3f3847d6fe2adee4c4cbb75487fd912508e40029"
}