{
  "address": "0xe50da5083404c5ecedb4b01fffe6125266a39c17",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Papyrus Token",
  "contractName": "PapyrusToken",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\npragma solidity ^0.4.24;\n\n\n/// @title ERC-20 interface\n/// @dev Full ERC-20 interface is described at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\ninterface ERC20 {\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n\n\n/// @title ERC-677 (excluding ERC-20) interface\n/// @dev Full ERC-677 interface is discussed at https://github.com/ethereum/EIPs/issues/677.\ninterface ERC677 {\n\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    function transferAndCall(address to, uint256 value, bytes data) external returns (bool);\n}\n\n\n/// @title ERC-677 mint/burn/claim extension interface\n/// @dev Extension of ERC-677 interface for allowing using a token in Token Bridge.\ninterface ERC677Bridgeable {\n\n    event Mint(address indexed receiver, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n\n    function mint(address receiver, uint256 value) external returns (bool);\n    function burn(uint256 value) external;\n    function claimTokens(address token, address to) external;\n}\n\n\n/// @title SafeMath\n/// @dev Math operations with safety checks that throw on error.\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/// @title SafeOwnable\n/// @dev The SafeOwnable contract has an owner address, and provides basic authorization control\n/// functions, this simplifies the implementation of \"user permissions\".\ncontract SafeOwnable {\n\n    // EVENTS\n\n    event OwnershipProposed(address indexed previousOwner, address indexed newOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev The SafeOwnable constructor sets the original `owner` of the contract to the sender account.\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /// @dev Allows the current owner to propose control of the contract to a new owner.\n    /// @param newOwner The address to propose ownership to.\n    function proposeOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0) && newOwner != _owner);\n        _ownerCandidate = newOwner;\n        emit OwnershipProposed(_owner, _ownerCandidate);\n    }\n\n    /// @dev Allows the current owner candidate to accept proposed ownership and set actual owner of a contract.\n    function acceptOwnership() public onlyOwnerCandidate {\n        emit OwnershipTransferred(_owner, _ownerCandidate);\n        _owner = _ownerCandidate;\n        _ownerCandidate = address(0);\n    }\n\n    /// @dev Returns the address of the owner.\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /// @dev Returns the address of the owner candidate.\n    function ownerCandidate() public view returns (address) {\n        return _ownerCandidate;\n    }\n\n    // MODIFIERS\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the owner candidate.\n    modifier onlyOwnerCandidate() {\n        require(msg.sender == _ownerCandidate);\n        _;\n    }\n\n    // FIELDS\n\n    address internal _owner;\n    address internal _ownerCandidate;\n}\n\n\n/// @title Standard ERC-20 token\n/// @dev Implementation of the basic ERC-20 token.\ncontract TokenERC20 is ERC20 {\n    using SafeMath for uint256;\n\n    // PUBLIC FUNCTIONS\n\n    /// @dev Transfers tokens to a specified address.\n    /// @param to The address to transfer tokens to.\n    /// @param value The amount of tokens to be transferred.\n    /// @return A boolean that indicates if the operation was successful.\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Transfers tokens from one address to another.\n    /// @param from The address to transfer tokens from.\n    /// @param to The address to transfer tokens to.\n    /// @param value The amount of tokens to be transferred.\n    /// @return A boolean that indicates if the operation was successful.\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _decreaseAllowance(from, msg.sender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Approves a specified address to spend a specified amount of tokens on behalf of msg.sender.\n    /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n    /// and the new allowance by an unfortunate transaction ordering. One possible solution to mitigate this\n    /// rare condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @param spender Address which will be allowed to spend the tokens.\n    /// @param value Amount of tokens to allow to be spent.\n    /// @return A boolean that indicates if the operation was successful.\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Increases the amount of tokens that an owner allowed to spent by the spender.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// is better to use this function to avoid 2 calls (and wait until the first transaction is mined).\n    /// @param spender The address which will spend the tokens.\n    /// @param value The amount of tokens to increase the allowance by.\n    /// @return A boolean that indicates if the operation was successful.\n    function increaseAllowance(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n        _increaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Decreases the amount of tokens that an owner allowed to spent by the spender.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// is better to use this function to avoid 2 calls (and wait until the first transaction is mined).\n    /// @param spender The address which will spend the tokens.\n    /// @param value The amount of tokens to decrease the allowance by.\n    /// @return A boolean that indicates if the operation was successful.\n    function decreaseAllowance(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n        _decreaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Returns total amount of tokens in existence.\n    /// @return A uint256 representing the amount of tokens in existence.\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @dev Gets the balance of a specified address.\n    /// @param owner The address to query the balance of.\n    /// @return A uint256 representing the amount of tokens owned by the specified address.\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @dev Function to check the amount of tokens that an owner allowed to spend by the spender.\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address which will spend the tokens.\n    /// @return A uint256 representing the amount of tokens still available to spend by the spender.\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Transfers tokens from one address to another address.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        require(value <= _balances[from]);\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /// @dev Increases the amount of tokens that an owner allowed to spent by the spender.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// is better to use this function to avoid 2 calls (and wait until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address which will spend the tokens.\n    /// @param value The amount of tokens to increase the allowance by.\n    function _increaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0);\n        _allowances[owner][spender] = _allowances[owner][spender].add(value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Decreases the amount of tokens that an owner allowed to spent by the spender.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// is better to use this function to avoid 2 calls (and wait until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address which will spend the tokens.\n    /// @param value The amount of tokens to decrease the allowance by.\n    function _decreaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0 && value <= _allowances[owner][spender]);\n        _allowances[owner][spender] = _allowances[owner][spender].sub(value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Internal function that mints specified amount of tokens and assigns it to an address.\n    /// This encapsulates the modification of balances such that the proper events are emitted.\n    /// @param receiver The address that will receive the minted tokens.\n    /// @param value The amount of tokens that will be minted.\n    function _mint(address receiver, uint256 value) internal {\n        require(receiver != address(0));\n        require(value > 0);\n        _balances[receiver] = _balances[receiver].add(value);\n        _totalSupply = _totalSupply.add(value);\n        //_totalMinted = _totalMinted.add(value);\n        emit Transfer(address(0), receiver, value);\n    }\n\n    /// @dev Internal function that burns specified amount of tokens of a given address.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of tokens that will be burnt.\n    function _burn(address burner, uint256 value) internal {\n        require(burner != address(0));\n        require(value > 0 && value <= _balances[burner]);\n        _balances[burner] = _balances[burner].sub(value);\n        _totalSupply = _totalSupply.sub(value);\n        emit Transfer(burner, address(0), value);\n    }\n\n    /// @dev Internal function that burns specified amount of tokens of a given address,\n    /// deducting from the sender's allowance for said account. Uses the internal burn function.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of tokens that will be burnt.\n    function _burnFrom(address burner, uint256 value) internal {\n        _decreaseAllowance(burner, msg.sender, value);\n        _burn(burner, value);\n    }\n\n    // FIELDS\n\n    uint256 internal _totalSupply;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping(address => uint256)) internal _allowances;\n}\n\n\n/// @title Papyrus Token contract (PPR).\ncontract PapyrusToken is SafeOwnable, TokenERC20, ERC677, ERC677Bridgeable {\n\n    // EVENTS\n\n    event ControlByOwnerRevoked();\n    event MintableChanged(bool mintable);\n    event TransferableChanged(bool transferable);\n    event ContractFallbackCallFailed(address from, address to, uint256 value);\n    event BridgeContractChanged(address indexed previousBridgeContract, address indexed newBridgeContract);\n\n    // PUBLIC FUNCTIONS\n\n    constructor() public {\n        _totalSupply = PPR_INITIAL_SUPPLY;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /// @dev Transfers tokens to a specified address with additional data if the recipient is a contact.\n    /// @param to The address to transfer tokens to.\n    /// @param value The amount of tokens to be transferred.\n    /// @param data The extra data to be passed to the receiving contract.\n    /// @return A boolean that indicates if the operation was successful.\n    function transferAndCall(address to, uint256 value, bytes data) external canTransfer returns (bool) {\n        require(to != address(this));\n        require(super.transfer(to, value));\n        emit Transfer(msg.sender, to, value, data);\n        if (isContract(to)) {\n            require(contractFallback(msg.sender, to, value, data));\n        }\n        return true;\n    }\n\n    /// @dev Transfers tokens to a specified address.\n    /// @param to The address to transfer tokens to.\n    /// @param value The amount of tokens to be transferred.\n    /// @return A boolean that indicates if the operation was successful.\n    function transfer(address to, uint256 value) public canTransfer returns (bool) {\n        require(super.transfer(to, value));\n        if (isContract(to) && !contractFallback(msg.sender, to, value, new bytes(0))) {\n            if (to == _bridgeContract) {\n                revert();\n            }\n            emit ContractFallbackCallFailed(msg.sender, to, value);\n        }\n        return true;\n    }\n\n    /// @dev Transfers tokens from one address to another.\n    /// @param from The address to transfer tokens from.\n    /// @param to The address to transfer tokens to.\n    /// @param value The amount of tokens to be transferred.\n    /// @return A boolean that indicates if the operation was successful.\n    function transferFrom(address from, address to, uint256 value) public canTransfer returns (bool) {\n        require(super.transferFrom(from, to, value));\n        if (isContract(to) && !contractFallback(from, to, value, new bytes(0))) {\n            if (to == _bridgeContract) {\n                revert();\n            }\n            emit ContractFallbackCallFailed(from, to, value);\n        }\n        return true;\n    }\n\n    /// @dev Transfers tokens to a specified addresses (optimized version for initial sending tokens).\n    /// @param recipients Addresses to transfer tokens to.\n    /// @param values Amounts of tokens to be transferred.\n    /// @return A boolean that indicates if the operation was successful.\n    function airdrop(address[] recipients, uint256[] values) public canTransfer returns (bool) {\n        require(recipients.length == values.length);\n        uint256 senderBalance = _balances[msg.sender];\n        for (uint256 i = 0; i < values.length; i++) {\n            uint256 value = values[i];\n            address to = recipients[i];\n            require(senderBalance >= value);\n            if (msg.sender != recipients[i]) {\n                senderBalance = senderBalance - value;\n                _balances[to] += value;\n            }\n            emit Transfer(msg.sender, to, value);\n        }\n        _balances[msg.sender] = senderBalance;\n        return true;\n    }\n\n    /// @dev Mints specified amount of tokens and assigns it to a specified address.\n    /// @param receiver The address that will receive the minted tokens.\n    /// @param value The amount of tokens that will be minted.\n    function mint(address receiver, uint256 value) public canMint returns (bool) {\n        _mint(receiver, value);\n        _totalMinted = _totalMinted.add(value);\n        emit Mint(receiver, value);\n        return true;\n    }\n\n    /// @dev Burns specified amount of tokens of the sender.\n    /// @param value The amount of token to be burnt.\n    function burn(uint256 value) public canBurn {\n        _burn(msg.sender, value);\n        _totalBurnt = _totalBurnt.add(value);\n        emit Burn(msg.sender, value);\n    }\n\n    /// @dev Burns specified amount of tokens of the specified account.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of token to be burnt.\n    function burnByOwner(address burner, uint256 value) public canBurnByOwner {\n        _burn(burner, value);\n        _totalBurnt = _totalBurnt.add(value);\n        emit Burn(burner, value);\n    }\n\n    /// @dev Transfers funds stored on the token contract to specified recipient (required by token bridge).\n    function claimTokens(address token, address to) public onlyOwnerOrBridgeContract {\n        require(to != address(0));\n        if (token == address(0)) {\n            to.transfer(address(this).balance);\n        } else {\n            ERC20 erc20 = ERC20(token);\n            uint256 balance = erc20.balanceOf(address(this));\n            require(erc20.transfer(to, balance));\n        }\n    }\n\n    /// @dev Revokes control by owner so it is not possible to burn tokens from any account by contract owner.\n    function revokeControlByOwner() public onlyOwner {\n        require(_controllable);\n        _controllable = false;\n        emit ControlByOwnerRevoked();\n    }\n\n    /// @dev Changes ability to mint tokens by permissioned accounts.\n    function setMintable(bool mintable) public onlyOwner {\n        require(_mintable != mintable);\n        _mintable = mintable;\n        emit MintableChanged(_mintable);\n    }\n\n    /// @dev Changes ability to transfer tokens by token holders.\n    function setTransferable(bool transferable) public onlyOwner {\n        require(_transferable != transferable);\n        _transferable = transferable;\n        emit TransferableChanged(_transferable);\n    }\n\n    /// @dev Changes address of token bridge contract.\n    function setBridgeContract(address bridgeContract) public onlyOwner {\n        require(_controllable);\n        require(bridgeContract != address(0) && bridgeContract != _bridgeContract && isContract(bridgeContract));\n        emit BridgeContractChanged(_bridgeContract, bridgeContract);\n        _bridgeContract = bridgeContract;\n    }\n\n    /// @dev Turn off renounceOwnership() method from Ownable contract.\n    function renounceOwnership() public pure {\n        revert();\n    }\n\n    /// @dev Returns a boolean flag representing ability to burn tokens from any account by contract owner.\n    /// @return A boolean that indicates if tokens can be burnt from any account by contract owner.\n    function controllableByOwner() public view returns (bool) {\n        return _controllable;\n    }\n\n    /// @dev Returns a boolean flag representing token mint ability.\n    /// @return A boolean that indicates if tokens can be mintable by permissioned accounts.\n    function mintable() public view returns (bool) {\n        return _mintable;\n    }\n\n    /// @dev Returns a boolean flag representing token transfer ability.\n    /// @return A boolean that indicates if tokens can be transferred by token holders.\n    function transferable() public view returns (bool) {\n        return _transferable;\n    }\n\n    /// @dev Returns an address of token bridge contract.\n    /// @return An address of token bridge contract.\n    function bridgeContract() public view returns (address) {\n        return _bridgeContract;\n    }\n\n    /// @dev Returns total amount of minted tokens.\n    /// @return A uint256 representing the amount of tokens were mint during token lifetime.\n    function totalMinted() public view returns (uint256) {\n        return _totalMinted;\n    }\n\n    /// @dev Returns total amount of burnt tokens.\n    /// @return A uint256 representing the amount of tokens were burnt during token lifetime.\n    function totalBurnt() public view returns (uint256) {\n        return _totalBurnt;\n    }\n\n    /// @dev Returns version of token interfaces (required by token bridge).\n    function getTokenInterfacesVersion() public pure returns (uint64, uint64, uint64) {\n        uint64 major = 2;\n        uint64 minor = 0;\n        uint64 patch = 0;\n        return (major, minor, patch);\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Calls method onTokenTransfer() on specified contract address `receiver`.\n    /// @return A boolean that indicates if the operation was successful.\n    function contractFallback(address from, address receiver, uint256 value, bytes data) private returns (bool) {\n        return receiver.call(abi.encodeWithSignature(\"onTokenTransfer(address,uint256,bytes)\", from, value, data));\n    }\n\n    /// @dev Determines if specified address is contract address.\n    /// @return A boolean that indicates if specified address is contract address.\n    function isContract(address account) private view returns (bool) {\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(account) }\n        return codeSize > 0;\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwnerOrBridgeContract() {\n        require(msg.sender == _owner || msg.sender == _bridgeContract);\n        _;\n    }\n\n    modifier canMint() {\n        require(_mintable);\n        require(msg.sender == _owner || msg.sender == _bridgeContract);\n        _;\n    }\n\n    modifier canBurn() {\n        require(msg.sender == _owner || msg.sender == _bridgeContract);\n        _;\n    }\n\n    modifier canBurnByOwner() {\n        require(msg.sender == _owner && _controllable);\n        _;\n    }\n\n    modifier canTransfer() {\n        require(_transferable || msg.sender == _owner);\n        _;\n    }\n\n    // FIELDS\n\n    // Standard fields used to describe the token\n    string public constant name = \"Papyrus Token\";\n    string public constant symbol = \"PPR\";\n    uint8 public constant decimals = 18;\n\n    // At the start of the token existence it is fully controllable by owner\n    bool private _controllable = true;\n\n    // At the start of the token existence it is mintable\n    bool private _mintable = true;\n\n    // At the start of the token existence it is not transferable\n    bool private _transferable = false;\n\n    // Address of token bridge contract\n    address private _bridgeContract;\n\n    // Total amount of tokens minted during token lifetime\n    uint256 private _totalMinted;\n    // Total amount of tokens burnt during token lifetime\n    uint256 private _totalBurnt;\n\n    // Amount of initially supplied tokens is constant and equals to 1,000,000,000 PPR\n    uint256 private constant PPR_INITIAL_SUPPLY = 10**27;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bridgeContract\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInterfacesVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllableByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revokeControlByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ControlByOwnerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"MintableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"TransferableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContractFallbackCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBridgeContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBridgeContract\",\"type\":\"address\"}],\"name\":\"BridgeContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526005805462ff00001961ff001960ff19909216600117919091166101001716905534801561003157600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36b033b2e3c9fd0803ce80000006002819055336000818152600360209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36119a9806100e56000396000f3006080604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101a5578063095ea7b31461022f5780630b26cf6614610267578063111a18d31461028a57806318160ddd146102ae57806323b872dd146102d5578063285d70d4146102ff578063313ce5671461031957806339509351146103445780634000aea01461036857806340c10f191461039957806342966c68146103bd5780634bf365df146103d55780635f504a82146103ea578063672434821461041b57806369ffa08a146104a957806370a08231146104d0578063710bf322146104f1578063715018a61461051257806379ba509714610527578063859ba28c1461053c5780638da5cb5b1461057d57806392ff0d311461059257806395d89b41146105a7578063966ff650146105bc5780639cd23707146105d1578063a2309ff8146105eb578063a457c2d714610600578063a9059cbb14610624578063c706775514610648578063cd5965831461065d578063ce793a2014610672578063dd62ed3e14610687575b600080fd5b3480156101b157600080fd5b506101ba6106ae565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f45781810151838201526020016101dc565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023b57600080fd5b50610253600160a060020a03600435166024356106e5565b604080519115158252519081900360200190f35b34801561027357600080fd5b50610288600160a060020a036004351661074b565b005b34801561029657600080fd5b50610288600160a060020a0360043516602435610835565b3480156102ba57600080fd5b506102c36108bf565b60408051918252519081900360200190f35b3480156102e157600080fd5b50610253600160a060020a03600435811690602435166044356108c5565b34801561030b57600080fd5b5061028860043515156109ba565b34801561032557600080fd5b5061032e610a47565b6040805160ff9092168252519081900360200190f35b34801561035057600080fd5b50610253600160a060020a0360043516602435610a4c565b34801561037457600080fd5b5061025360048035600160a060020a0316906024803591604435918201910135610a77565b3480156103a557600080fd5b50610253600160a060020a0360043516602435610b9d565b3480156103c957600080fd5b50610288600435610c53565b3480156103e157600080fd5b50610253610ce1565b3480156103f657600080fd5b506103ff610cef565b60408051600160a060020a039092168252519081900360200190f35b34801561042757600080fd5b506040805160206004803580820135838102808601850190965280855261025395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610cfe9650505050505050565b3480156104b557600080fd5b50610288600160a060020a0360043581169060243516610e47565b3480156104dc57600080fd5b506102c3600160a060020a036004351661101c565b3480156104fd57600080fd5b50610288600160a060020a0360043516611037565b34801561051e57600080fd5b506102886101a0565b34801561053357600080fd5b506102886110e2565b34801561054857600080fd5b5061055161116a565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b34801561058957600080fd5b506103ff611174565b34801561059e57600080fd5b50610253611183565b3480156105b357600080fd5b506101ba611192565b3480156105c857600080fd5b506102c36111c9565b3480156105dd57600080fd5b5061028860043515156111cf565b3480156105f757600080fd5b506102c361125f565b34801561060c57600080fd5b50610253600160a060020a0360043516602435611265565b34801561063057600080fd5b50610253600160a060020a0360043516602435611287565b34801561065457600080fd5b50610253611375565b34801561066957600080fd5b506103ff61137e565b34801561067e57600080fd5b50610288611394565b34801561069357600080fd5b506102c3600160a060020a03600435811690602435166113f1565b60408051808201909152600d81527f5061707972757320546f6b656e00000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600054600160a060020a0316331461076257600080fd5b60055460ff16151561077357600080fd5b600160a060020a038116158015906107a05750600554600160a060020a0382811663010000009092041614155b80156107b057506107b08161141c565b15156107bb57600080fd5b600554604051600160a060020a03808416926301000000900416907f6bc3d5f48e77b5ff80e5e6583401d7b5bc6f5b5023984f33ff6d04fed1e839e690600090a360058054600160a060020a0390921663010000000276ffffffffffffffffffffffffffffffffffffffff00000019909216919091179055565b600054600160a060020a031633148015610851575060055460ff165b151561085c57600080fd5b6108668282611424565b600754610879908263ffffffff6114f716565b600755604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60025490565b60055460009062010000900460ff16806108e95750600054600160a060020a031633145b15156108f457600080fd5b6108ff84848461150d565b151561090a57600080fd5b6109138361141c565b801561093e57506040805160008082526020820190925261093c91869186918691905b50611525565b155b156109b057600554600160a060020a03848116630100000090920416141561096557600080fd5b60408051600160a060020a0380871682528516602082015280820184905290517f11249f0fc79fc134a15a10d1da8291b79515bf987e036ced05b9ec119614070b9181900360600190a15b5060019392505050565b600054600160a060020a031633146109d157600080fd5b60055460ff61010090910416151581151514156109ed57600080fd5b6005805482151561010090810261ff00199092169190911791829055604080519190920460ff161515815290517f46c335b7f4282279447634dab2ba206ffb5ac6ce9744a5957353fced8b6044dc9181900360200190a150565b601281565b6000600160a060020a0383161515610a6357600080fd5b610a6e338484611690565b50600192915050565b60055460009062010000900460ff1680610a9b5750600054600160a060020a031633145b1515610aa657600080fd5b600160a060020a038516301415610abc57600080fd5b610ac68585611739565b1515610ad157600080fd5b84600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16868686604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a3610b468561141c565b15610b9257610b8733868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843750611525945050505050565b1515610b9257600080fd5b506001949350505050565b600554600090610100900460ff161515610bb657600080fd5b600054600160a060020a0316331480610be0575060055463010000009004600160a060020a031633145b1515610beb57600080fd5b610bf58383611746565b600654610c08908363ffffffff6114f716565b600655604080518381529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a250600192915050565b600054600160a060020a0316331480610c7d575060055463010000009004600160a060020a031633145b1515610c8857600080fd5b610c923382611424565b600754610ca5908263ffffffff6114f716565b60075560408051828152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250565b600554610100900460ff1690565b600154600160a060020a031690565b6000806000806000600560029054906101000a900460ff1680610d2b5750600054600160a060020a031633145b1515610d3657600080fd5b8551875114610d4457600080fd5b33600090815260036020526040812054945092505b8551831015610e28578583815181101515610d7057fe5b9060200190602002015191508683815181101515610d8a57fe5b60209081029091010151905081841015610da357600080fd5b8683815181101515610db157fe5b6020908102919091010151600160a060020a03163314610def57600160a060020a038116600090815260036020526040902080548301905592819003925b604080518381529051600160a060020a03831691339160008051602061195e8339815191529181900360200190a3600190920191610d59565b5050336000908152600360205260409020919091555060019392505050565b600080548190600160a060020a0316331480610e74575060055463010000009004600160a060020a031633145b1515610e7f57600080fd5b600160a060020a0383161515610e9457600080fd5b600160a060020a0384161515610ee057604051600160a060020a03841690303180156108fc02916000818181858888f19350505050158015610eda573d6000803e3d6000fd5b50611016565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6020811015610f6e57600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820184905291519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610fdf57600080fd5b505af1158015610ff3573d6000803e3d6000fd5b505050506040513d602081101561100957600080fd5b5051151561101657600080fd5b50505050565b600160a060020a031660009081526003602052604090205490565b600054600160a060020a0316331461104e57600080fd5b600160a060020a038116158015906110745750600054600160a060020a03828116911614155b151561107f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560008054604051938316939216917fb51454ce8c7f26becd312a46c4815553887f2ec876a0b8dc813b87f62edf6f809190a350565b600154600160a060020a031633146110f957600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6002600080909192565b600054600160a060020a031690565b60055462010000900460ff1690565b60408051808201909152600381527f5050520000000000000000000000000000000000000000000000000000000000602082015281565b60075490565b600054600160a060020a031633146111e657600080fd5b60055460ff62010000909104161515811515141561120357600080fd5b600580548215156201000090810262ff0000199092169190911791829055604080519190920460ff161515815290517f6488c20eb299903c41aa1b53c3ad5a3140aca395935e57cc52c1cc8dae8d9e179181900360200190a150565b60065490565b6000600160a060020a038316151561127c57600080fd5b610a6e3384846117f3565b60055460009062010000900460ff16806112ab5750600054600160a060020a031633145b15156112b657600080fd5b6112c08383611739565b15156112cb57600080fd5b6112d48361141c565b80156112fd5750604080516000808252602082019092526112fb9133918691869190610936565b155b15610a6e57600554600160a060020a03848116630100000090920416141561132457600080fd5b60408051338152600160a060020a038516602082015280820184905290517f11249f0fc79fc134a15a10d1da8291b79515bf987e036ced05b9ec119614070b9181900360600190a150600192915050565b60055460ff1690565b60055463010000009004600160a060020a031690565b600054600160a060020a031633146113ab57600080fd5b60055460ff1615156113bc57600080fd5b6005805460ff191690556040517f8f985c5eed42f02e8b4264b5a49167ee86ef75b7c9439e5a09f2891543740c7e90600090a1565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6000903b1190565b600160a060020a038216151561143957600080fd5b6000811180156114615750600160a060020a0382166000908152600360205260409020548111155b151561146c57600080fd5b600160a060020a038216600090815260036020526040902054611495908263ffffffff61186916565b600160a060020a0383166000908152600360205260409020556002546114c1908263ffffffff61186916565b600255604080518281529051600091600160a060020a0385169160008051602061195e8339815191529181900360200190a35050565b60008282018381101561150657fe5b9392505050565b600061151a8433846117f3565b6109b084848461187b565b600083600160a060020a03168584846040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561159257818101518382015260200161157a565b50505050905090810190601f1680156115bf5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa4c0ed36000000000000000000000000000000000000000000000000000000001781529051825192975095508594509250905080838360005b8381101561164657818101518382015260200161162e565b50505050905090810190601f1680156116735780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1979650505050505050565b6000811161169d57600080fd5b600160a060020a038084166000908152600460209081526040808320938616835292905220546116d3908263ffffffff6114f716565b600160a060020a0384811660008181526004602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000610a6e33848461187b565b600160a060020a038216151561175b57600080fd5b6000811161176857600080fd5b600160a060020a038216600090815260036020526040902054611791908263ffffffff6114f716565b600160a060020a0383166000908152600360205260409020556002546117bd908263ffffffff6114f716565b600255604080518281529051600160a060020a0384169160009160008051602061195e8339815191529181900360200190a35050565b6000811180156118285750600160a060020a038084166000908152600460209081526040808320938616835292905220548111155b151561183357600080fd5b600160a060020a038084166000908152600460209081526040808320938616835292905220546116d3908263ffffffff61186916565b60008282111561187557fe5b50900390565b600160a060020a038216151561189057600080fd5b600160a060020a0383166000908152600360205260409020548111156118b557600080fd5b600160a060020a0383166000908152600360205260409020546118de908263ffffffff61186916565b600160a060020a038085166000908152600360205260408082209390935590841681522054611913908263ffffffff6114f716565b600160a060020a03808416600081815260036020908152604091829020949094558051858152905191939287169260008051602061195e83398151915292918290030190a35050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582080517aaa47a8ce9b8bcaeaf5823e5733ef1c3374a773b03d9d99c17b0fe48cf80029"
}