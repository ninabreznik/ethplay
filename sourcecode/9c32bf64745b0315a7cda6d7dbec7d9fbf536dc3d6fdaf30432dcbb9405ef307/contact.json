{
  "address": "0x082b013c5963b9a3f40b7ec86bf17aa65aa94637",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PrivateToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "900",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-16\n*/\n\npragma solidity ^0.4.13;\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n        allowed[msg.sender][_spender] = 0;\n        } else {\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract DepositFromPrivateToken is StandardToken {\n   using SafeMath for uint256;\n\n   PrivateToken public privateToken;\n\n   modifier onlyPrivateToken() {\n     require(msg.sender == address(privateToken));\n     _;\n   }\n\n   /**\n   * @dev Deposit is the function should only be called from PrivateToken\n   * When the user wants to deposit their private Token to Origin Token. They should\n   * let the Private Token invoke this function.\n   * @param _depositor address. The person who wants to deposit.\n   */\n\n   function deposit(address _depositor, uint256 _value) public onlyPrivateToken returns(bool){\n     require(_value != 0);\n     balances[_depositor] = balances[_depositor].add(_value);\n     emit Transfer(privateToken, _depositor, _value);\n     return true;\n   }\n }\n\ncontract BCNTToken is DepositFromPrivateToken{\n    using SafeMath for uint256;\n\n    string public constant name = \"Bincentive Token\"; // solium-disable-line uppercase\n    string public constant symbol = \"BCNT\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n    mapping(bytes => bool) internal signatures;\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n\n    /**\n    * @notice Submit a presigned transfer\n    * @param _signature bytes The signature, issued by the owner.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n    */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce,\n        uint256 _validUntil\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(signatures[_signature] == false);\n        require(block.number <= _validUntil);\n\n        bytes32 hashedTx = ECRecovery.toEthSignedMessageHash(\n          transferPreSignedHashing(address(this), _to, _value, _fee, _nonce, _validUntil)\n        );\n\n        address from = ECRecovery.recover(hashedTx, _signature);\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\n    * @param _token address The address of the token.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n    */\n    function transferPreSignedHashing(\n        address _token,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce,\n        uint256 _validUntil\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"0d2d1bf5\": transferPreSigned(address,address,uint256,uint256,uint256,uint256) */\n        return keccak256(\n            abi.encodePacked(\n                bytes4(0x0d2d1bf5),\n                _token,\n                _to,\n                _value,\n                _fee,\n                _nonce,\n                _validUntil\n            )\n        );\n    }\n\n    /**\n    * @dev Constructor that gives _owner all of existing tokens.\n    */\n    constructor(address _admin) public {\n        totalSupply_ = INITIAL_SUPPLY;\n        privateToken = new PrivateToken(\n          _admin, \"Bincentive Private Token\", \"BCNP\", decimals, INITIAL_SUPPLY\n       );\n    }\n}\n\ncontract PrivateToken is StandardToken {\n    using SafeMath for uint256;\n\n    string public name; // solium-disable-line uppercase\n    string public symbol; // solium-disable-line uppercase\n    uint8 public decimals; // solium-disable-line uppercase\n\n    address public admin;\n    bool public isPublic;\n    uint256 public unLockTime;\n    DepositFromPrivateToken originToken;\n\n    event StartPublicSale(uint256 unlockTime);\n    event Deposit(address indexed from, uint256 value);\n    /**\n    *  @dev check if msg.sender is allowed to deposit Origin token.\n    */\n    function isDepositAllowed() internal view{\n      // If the tokens isn't public yet all transfering are limited to origin tokens\n      require(isPublic);\n      require(msg.sender == admin || block.timestamp > unLockTime);\n    }\n\n    /**\n    * @dev Deposit msg.sender's origin token to real token\n    */\n    function deposit(address _depositor) public returns (bool){\n      isDepositAllowed();\n      uint256 _value;\n      _value = balances[_depositor];\n      require(_value > 0);\n      balances[_depositor] = 0;\n      require(originToken.deposit(_depositor, _value));\n      emit Deposit(_depositor, _value);\n\n      // This event is for those apps calculate balance from events rather than balanceOf\n      emit Transfer(_depositor, address(0), _value);\n    }\n\n    /**\n    *  @dev Start Public sale and allow admin to deposit the token.\n    *  normal users could deposit their tokens after the tokens unlocked\n    */\n    function startPublicSale(uint256 _unLockTime) public onlyAdmin {\n      require(!isPublic);\n      isPublic = true;\n      unLockTime = _unLockTime;\n      emit StartPublicSale(_unLockTime);\n    }\n\n    /**\n    *  @dev unLock the origin token and start the public sale.\n    */\n    function unLock() public onlyAdmin{\n      require(isPublic);\n      unLockTime = block.timestamp;\n    }\n\n    modifier onlyAdmin() {\n      require(msg.sender == admin);\n      _;\n    }\n\n    constructor(address _admin, string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n      originToken = DepositFromPrivateToken(msg.sender);\n      admin = _admin;\n      name = _name;\n      symbol = _symbol;\n      decimals = _decimals;\n      totalSupply_ = _totalSupply;\n      balances[admin] = _totalSupply;\n      emit Transfer(address(0), admin, _totalSupply);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610e51380380610e518339810160409081528151602080840151928401516060850151608086015160078054600160a060020a0319163317905560058054600160a060020a0387166101000261010060a860020a0319909116179055948601805194969095920193909261008d91600391870190610122565b5082516100a1906004906020860190610122565b506005805460ff191660ff841617808255600183905561010090819004600160a060020a039081166000908152602081815260408083208790559454855187815295519490049092169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350505050506101bd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016357805160ff1916838001178555610190565b82800160010185558215610190579182015b82811115610190578251825591602001919060010190610175565b5061019c9291506101a0565b5090565b6101ba91905b8082111561019c57600081556001016101a6565b90565b610c85806101cc6000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce56714610208578063661884631461023357806370a082311461025757806374817d9b1461027857806395d89b4114610292578063a9059cbb146102a7578063d73dd623146102cb578063dc9a1535146102ef578063dd62ed3e14610304578063ed10e33c1461032b578063f340fa0114610340578063f851a44014610361578063facc790514610392575b600080fd5b34801561010157600080fd5b5061010a6103a7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610435565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc61049b565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104a1565b34801561021457600080fd5b5061021d610618565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101a3600160a060020a0360043516602435610621565b34801561026357600080fd5b506101cc600160a060020a0360043516610711565b34801561028457600080fd5b5061029060043561072c565b005b34801561029e57600080fd5b5061010a6107ec565b3480156102b357600080fd5b506101a3600160a060020a0360043516602435610847565b3480156102d757600080fd5b506101a3600160a060020a0360043516602435610928565b3480156102fb57600080fd5b506101a36109c1565b34801561031057600080fd5b506101cc600160a060020a03600435811690602435166109e3565b34801561033757600080fd5b50610290610a0e565b34801561034c57600080fd5b506101a3600160a060020a0360043516610a5a565b34801561036d57600080fd5b50610376610bc4565b60408051600160a060020a039092168252519081900360200190f35b34801561039e57600080fd5b506101cc610bd8565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042d5780601f106104025761010080835404028352916020019161042d565b820191906000526020600020905b81548152906001019060200180831161041057829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a03831615156104b857600080fd5b600160a060020a0384166000908152602081905260409020548211156104dd57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561050d57600080fd5b600160a060020a038416600090815260208190526040902054610536908363ffffffff610bde16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461056b908363ffffffff610bf016565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546105ad908363ffffffff610bde16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60055460ff1681565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561067657336000908152600260209081526040808320600160a060020a03881684529091528120556106ab565b610686818463ffffffff610bde16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b6005546101009004600160a060020a0316331461074857600080fd5b6005547501000000000000000000000000000000000000000000900460ff161561077157600080fd5b600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000017905560068190556040805182815290517f02e1e1c38268e2c2e32fe988eed0396306d58317d9754c8b2d7b64fea354aed99181900360200190a150565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042d5780601f106104025761010080835404028352916020019161042d565b6000600160a060020a038316151561085e57600080fd5b3360009081526020819052604090205482111561087a57600080fd5b3360009081526020819052604090205461089a908363ffffffff610bde16565b3360009081526020819052604080822092909255600160a060020a038516815220546108cc908363ffffffff610bf016565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a038616845290915281205461095c908363ffffffff610bf016565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6005547501000000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6005546101009004600160a060020a03163314610a2a57600080fd5b6005547501000000000000000000000000000000000000000000900460ff161515610a5457600080fd5b42600655565b600080610a65610c03565b50600160a060020a038216600090815260208190526040812054908111610a8b57600080fd5b600160a060020a0380841660008181526020818152604080832083905560075481517f47e7ef2400000000000000000000000000000000000000000000000000000000815260048101959095526024850187905290519416936347e7ef2493604480820194918390030190829087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050506040513d6020811015610b3157600080fd5b50511515610b3e57600080fd5b604080518281529051600160a060020a038516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2604080518281529051600091600160a060020a038616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350919050565b6005546101009004600160a060020a031681565b60065481565b600082821115610bea57fe5b50900390565b81810182811015610bfd57fe5b92915050565b6005547501000000000000000000000000000000000000000000900460ff161515610c2d57600080fd5b6005546101009004600160a060020a0316331480610c4c575060065442115b1515610c5757600080fd5b5600a165627a7a7230582086a4ff769a47da44a354610d6d18f8830c7bcd442e1fe8d90a934214c9ec7d7e00290000000000000000000000002409f378a6dbb78bd4111e54dc66a1cc8f0d398f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006766572696679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037665720000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000002409f378a6dbb78bd4111e54dc66a1cc8f0d398f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006766572696679000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037665720000000000000000000000000000000000000000000000000000000000"
}