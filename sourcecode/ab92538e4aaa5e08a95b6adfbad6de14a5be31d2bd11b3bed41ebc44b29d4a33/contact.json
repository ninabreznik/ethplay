{
  "address": "0xfb66e636f9a9b09c9f1eb8f6b99f4dba2657b695",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MarsTokenV1",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.25;\n\n// File: contracts/openzeppelin/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/openzeppelin/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/openzeppelin/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    require(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(_b > 0);\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    require(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract from https://github.com/zeppelinos/labs/blob/master/upgradeability_ownership/contracts/ownership/Ownable.sol\n * branch: master commit: 3887ab77b8adafba4a26ace002f3a684c1a3388b modified to:\n * 1) Add emit prefix to OwnershipTransferred event (7/13/18)\n * 2) Replace constructor with constructor syntax (7/13/18)\n * 3) consolidate OwnableStorage into this contract\n */\ncontract Ownable {\n\n  // Owner of the contract\n  address private _owner;\n\n  /**\n  * @dev Event to show ownership has been transferred\n  * @param previousOwner representing the address of the previous owner\n  * @param newOwner representing the address of the new owner\n  */\n  event OwnershipTransferred(address previousOwner, address newOwner);\n\n  /**\n  * @dev The constructor sets the original owner of the contract to the sender account.\n  */\n  constructor() public {\n    setOwner(msg.sender);\n  }\n\n  /**\n * @dev Tells the address of the owner\n * @return the address of the owner\n */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Sets a new owner address\n   */\n  function setOwner(address newOwner) internal {\n    _owner = newOwner;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(msg.sender == owner());\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner(), newOwner);\n    setOwner(newOwner);\n  }\n}\n\n// File: contracts/Blacklistable.sol\n\n/**\n * @title Blacklistable Token\n * @dev Allows accounts to be blacklisted by a \"blacklister\" role\n*/\ncontract Blacklistable is Ownable {\n\n  address public blacklister;\n  mapping(address => bool) internal blacklisted;\n\n  event Blacklisted(address indexed _account);\n  event UnBlacklisted(address indexed _account);\n  event BlacklisterChanged(address indexed newBlacklister);\n\n  /**\n   * @dev Throws if called by any account other than the blacklister\n  */\n  modifier onlyBlacklister() {\n    require(msg.sender == blacklister);\n    _;\n  }\n\n  /**\n   * @dev Throws if argument account is blacklisted\n   * @param _account The address to check\n  */\n  modifier notBlacklisted(address _account) {\n    require(blacklisted[_account] == false);\n    _;\n  }\n\n  /**\n   * @dev Checks if account is blacklisted\n   * @param _account The address to check\n  */\n  function isBlacklisted(address _account) public view returns (bool) {\n    return blacklisted[_account];\n  }\n\n  /**\n   * @dev Adds account to blacklist\n   * @param _account The address to blacklist\n  */\n  function blacklist(address _account) public onlyBlacklister {\n    blacklisted[_account] = true;\n    emit Blacklisted(_account);\n  }\n\n  /**\n   * @dev Removes account from blacklist\n   * @param _account The address to remove from the blacklist\n  */\n  function unBlacklist(address _account) public onlyBlacklister {\n    blacklisted[_account] = false;\n    emit UnBlacklisted(_account);\n  }\n\n  function updateBlacklister(address _newBlacklister) public onlyOwner {\n    require(_newBlacklister != address(0));\n    blacklister = _newBlacklister;\n    emit BlacklisterChanged(blacklister);\n  }\n}\n\n// File: contracts/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n * Based on openzeppelin tag v1.10.0 commit: feb665136c0dae9912e08397c1a21c4af3651ef3\n * Modifications:\n * 1) Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\n * 2) Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\n * 3) Removed whenPaused (6/14/2018)\n * 4) Switches ownable library to use zeppelinos (7/12/18)\n * 5) Remove constructor (7/13/18)\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  event PauserChanged(address indexed newAddress);\n\n\n  address public pauser;\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev throws if called by any account other than the pauser\n   */\n  modifier onlyPauser() {\n    require(msg.sender == pauser);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser {\n    paused = false;\n    emit Unpause();\n  }\n\n  /**\n   * @dev update the pauser role\n   */\n  function updatePauser(address _newPauser) public onlyOwner {\n    require(_newPauser != address(0));\n    pauser = _newPauser;\n    emit PauserChanged(pauser);\n  }\n\n}\n\n// File: contracts/sheets/DelegateContract.sol\n\ncontract DelegateContract is Ownable {\n  address delegate_;\n\n  event LogicContractChanged(address indexed newAddress);\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyFromAccept() {\n    require(msg.sender == delegate_);\n    _;\n  }\n\n  function setLogicContractAddress(address _addr) public onlyOwner {\n    delegate_ = _addr;\n    emit LogicContractChanged(_addr);\n  }\n\n  function isDelegate(address _addr) public view returns(bool) {\n    return _addr == delegate_;\n  }\n}\n\n// File: contracts/sheets/AllowanceSheet.sol\n\n// A wrapper around the allowanceOf mapping.\ncontract AllowanceSheet is DelegateContract {\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) public allowanceOf;\n\n  function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyFromAccept {\n    allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\n  }\n\n  function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyFromAccept {\n    allowanceOf[_tokenHolder][_spender] = _value;\n  }\n}\n\n// File: contracts/sheets/BalanceSheet.sol\n\n// A wrapper around the balanceOf mapping.\ncontract BalanceSheet is DelegateContract, AllowanceSheet {\n  using SafeMath for uint256;\n\n  uint256 internal totalSupply_ = 0;\n\n  mapping (address => uint256) public balanceOf;\n\n  function addBalance(address _addr, uint256 _value) public onlyFromAccept {\n    balanceOf[_addr] = balanceOf[_addr].add(_value);\n  }\n\n  function subBalance(address _addr, uint256 _value) public onlyFromAccept {\n    balanceOf[_addr] = balanceOf[_addr].sub(_value);\n  }\n\n  function increaseSupply(uint256 _amount) public onlyFromAccept {\n    totalSupply_ = totalSupply_.add(_amount);\n  }\n\n  function decreaseSupply(uint256 _amount) public onlyFromAccept {\n    totalSupply_ = totalSupply_.sub(_amount);\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n}\n\n// File: contracts\\MarsTokenV1.sol\n\n/**\n * @title MarsToken\n * @dev ERC20 Token backed by fiat reserves\n */\ncontract MarsTokenV1 is Ownable, ERC20, Pausable, Blacklistable {\n  using SafeMath for uint256;\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  string public currency;\n  address public masterMinter;\n\n  //mapping(address => uint256) internal balances;\n  //mapping(address => mapping(address => uint256)) internal allowed;\n  //uint256 internal totalSupply_ = 0;\n  mapping(address => bool) internal minters;\n  mapping(address => uint256) internal minterAllowed;\n\n  event Mint(address indexed minter, address indexed to, uint256 amount);\n  event Burn(address indexed burner, uint256 amount);\n  event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\n  event MinterRemoved(address indexed oldMinter);\n  event MasterMinterChanged(address indexed newMasterMinter);\n  event DestroyedBlackFunds(address indexed _account, uint256 _balance);\n\n  BalanceSheet public balances;\n  event BalanceSheetSet(address indexed sheet);\n\n  /**\n  * @dev ownership of the balancesheet contract\n  * @param _sheet The address to of the balancesheet.\n  */\n  function setBalanceSheet(address _sheet) public onlyOwner returns (bool) {\n    balances = BalanceSheet(_sheet);\n    emit BalanceSheetSet(_sheet);\n    return true;\n  }\n\n  constructor(\n    string _name,\n    string _symbol,\n    string _currency,\n    uint8 _decimals,\n    address _masterMinter,\n    address _pauser,\n    address _blacklister\n  ) public {\n    require(_masterMinter != address(0));\n    require(_pauser != address(0));\n    require(_blacklister != address(0));\n\n    name = _name;\n    symbol = _symbol;\n    currency = _currency;\n    decimals = _decimals;\n    masterMinter = _masterMinter;\n    pauser = _pauser;\n    blacklister = _blacklister;\n    setOwner(msg.sender);\n  }\n\n  /**\n  * @dev Throws if called by any account other than a minter\n  */\n  modifier onlyMinters() {\n    require(minters[msg.sender] == true);\n    _;\n  }\n\n  /**\n  * @dev Function to mint tokens\n  * @param _to The address that will receive the minted tokens.\n  * @param _amount The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.\n  * @return A boolean that indicates if the operation was successful.\n  */\n  function mint(address _to, uint256 _amount) public whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool) {\n    require(_to != address(0));\n    require(_amount > 0);\n\n    uint256 mintingAllowedAmount = minterAllowed[msg.sender];\n    require(_amount <= mintingAllowedAmount);\n\n    //totalSupply_ = totalSupply_.add(_amount);\n    balances.increaseSupply(_amount);\n    //balances[_to] = balances[_to].add(_amount);\n    balances.addBalance(_to, _amount);\n    minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\n    emit Mint(msg.sender, _to, _amount);\n    emit Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the masterMinter\n  */\n  modifier onlyMasterMinter() {\n    require(msg.sender == masterMinter);\n    _;\n  }\n\n  /**\n  * @dev Get minter allowance for an account\n  * @param minter The address of the minter\n  */\n  function minterAllowance(address minter) public view returns (uint256) {\n    return minterAllowed[minter];\n  }\n\n  /**\n  * @dev Checks if account is a minter\n  * @param account The address to check\n  */\n  function isMinter(address account) public view returns (bool) {\n    return minters[account];\n  }\n\n  /**\n  * @dev Get allowed amount for an account\n  * @param owner address The account owner\n  * @param spender address The account spender\n  */\n  function allowance(address owner, address spender) public view returns (uint256) {\n    //return allowed[owner][spender];\n    return balances.allowanceOf(owner,spender);\n  }\n\n  /**\n  * @dev Get totalSupply of token\n  */\n  function totalSupply() public view returns (uint256) {\n    return balances.totalSupply();\n  }\n\n  /**\n  * @dev Get token balance of an account\n  * @param account address The account\n  */\n  function balanceOf(address account) public view returns (uint256) {\n    //return balances[account];\n    return balances.balanceOf(account);\n  }\n\n  /**\n  * @dev Adds blacklisted check to approve\n  * @return True if the operation was successful.\n  */\n  function approve(address _spender, uint256 _value) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) returns (bool) {\n    require(_spender != address(0));\n    //allowed[msg.sender][_spender] = _value;\n    balances.setAllowance(msg.sender, _spender, _value);\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n  * @dev Transfer tokens from one address to another.\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint256 the amount of tokens to be transferred\n  * @return bool success\n  */\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances.balanceOf(_from));\n    require(_value <= balances.allowanceOf(_from, msg.sender));\n\n    //allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    balances.subAllowance(_from, msg.sender, _value);\n    //balances[_from] = balances[_from].sub(_value);\n    balances.subBalance(_from, _value);\n    //balances[_to] = balances[_to].add(_value);\n    balances.addBalance(_to, _value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  * @return bool success\n  */\n  function transfer(address _to, uint256 _value) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances.balanceOf(msg.sender));\n\n    //balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances.subBalance(msg.sender, _value);\n    //balances[_to] = balances[_to].add(_value);\n    balances.addBalance(_to, _value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Function to add/update a new minter\n  * @param minter The address of the minter\n  * @param minterAllowedAmount The minting amount allowed for the minter\n  * @return True if the operation was successful.\n  */\n  function configureMinter(address minter, uint256 minterAllowedAmount) public whenNotPaused onlyMasterMinter notBlacklisted(minter) returns (bool) {\n    minters[minter] = true;\n    minterAllowed[minter] = minterAllowedAmount;\n    emit MinterConfigured(minter, minterAllowedAmount);\n    return true;\n  }\n\n  /**\n  * @dev Function to remove a minter\n  * @param minter The address of the minter to remove\n  * @return True if the operation was successful.\n  */\n  function removeMinter(address minter) public onlyMasterMinter returns (bool) {\n    minters[minter] = false;\n    minterAllowed[minter] = 0;\n    emit MinterRemoved(minter);\n    return true;\n  }\n\n  /**\n  * @dev allows a minter to burn some of its own tokens\n  * Validates that caller is a minter and that sender is not blacklisted\n  * amount is less than or equal to the minter's account balance\n  * @param _amount uint256 the amount of tokens to be burned\n  */\n  function burn(uint256 _amount) public whenNotPaused onlyMinters notBlacklisted(msg.sender) {\n    uint256 balance = balances.balanceOf(msg.sender);\n    require(_amount > 0);\n    require(balance >= _amount);\n\n    //totalSupply_ = totalSupply_.sub(_amount);\n    balances.decreaseSupply(_amount);\n    //balances[msg.sender] = balance.sub(_amount);\n    balances.subBalance(msg.sender, _amount);\n    emit Burn(msg.sender, _amount);\n    emit Transfer(msg.sender, address(0), _amount);\n  }\n\n  function updateMasterMinter(address _newMasterMinter) public onlyOwner {\n    require(_newMasterMinter != address(0));\n    masterMinter = _newMasterMinter;\n    emit MasterMinterChanged(masterMinter);\n  }\n\n  /**\n   * @dev Destroy funds of account from blacklist\n   * @param _account The address to destory funds\n  */\n  function destroyBlackFunds(address _account) public onlyOwner {\n    require(blacklisted[_account]);\n    uint256 _balance = balances.balanceOf(_account);\n    balances.subBalance(_account, _balance);\n    balances.decreaseSupply(_balance);\n    emit DestroyedBlackFunds(_account, _balance);\n    emit Transfer(_account, address(0), _balance);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sheet\",\"type\":\"address\"}],\"name\":\"setBalanceSheet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"minterAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMasterMinter\",\"type\":\"address\"}],\"name\":\"updateMasterMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_masterMinter\",\"type\":\"address\"},{\"name\":\"_pauser\",\"type\":\"address\"},{\"name\":\"_blacklister\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newMasterMinter\",\"type\":\"address\"}],\"name\":\"MasterMinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sheet\",\"type\":\"address\"}],\"name\":\"BalanceSheetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000012000000000000000000000000f1099b24521d65f4208060b4151c05144f92bc73000000000000000000000000f1099b24521d65f4208060b4151c05144f92bc73000000000000000000000000f1099b24521d65f4208060b4151c05144f92bc73000000000000000000000000000000000000000000000000000000000000000431534744000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004315347440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043153474400000000000000000000000000000000000000000000000000000000"
}