{
  "address": "0x77a4a5b3007efa19b5d049b914a1271367e27fe4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Outing Token",
  "contractName": "OutingToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-07\n*/\n\npragma solidity ^0.4.19;\n\ncontract ERC20 {\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function totalSupply() external constant returns (uint);\n\n    function balanceOf(address _owner) external constant returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n\n    function allowance(address _owner, address _spender) external constant returns (uint256);\n\n}\n\nlibrary SafeMath {\n\n    /*\n        @return sum of a and b\n    */\n    function ADD (uint256 a, uint256 b) pure internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /*\n        @return difference of a and b\n    */\n    function SUB (uint256 a, uint256 b) pure internal returns (uint256) {\n        assert(a >= b);\n        return a - b;\n    }\n    \n}\n\ncontract Ownable {\n\n\n    address owner;\n\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n\n    function Ownable() public {\n        owner = msg.sender;\n        OwnershipTransferred (address(0), owner);\n    }\n\n    function transferOwnership(address _newOwner)\n        public\n        onlyOwner\n        notZeroAddress(_newOwner)\n    {\n        owner = _newOwner;\n        OwnershipTransferred(msg.sender, _newOwner);\n    }\n\n    //Only owner can call function\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n}\n\n/*\n\tTrustable saves trusted addresses\n*/\ncontract Trustable is Ownable {\n\n\n    //Only trusted addresses are able to transfer tokens during the Crowdsale\n    mapping (address => bool) trusted;\n\n    event AddTrusted (address indexed _trustable);\n    event RemoveTrusted (address indexed _trustable);\n\n    function Trustable() public {\n        trusted[msg.sender] = true;\n        AddTrusted(msg.sender);\n    }\n\n    //Add new trusted address\n    function addTrusted(address _address)\n        external\n        onlyOwner\n        notZeroAddress(_address)\n    {\n        trusted[_address] = true;\n        AddTrusted(_address);\n    }\n\n    //Remove address from a trusted list\n    function removeTrusted(address _address)\n        external\n        onlyOwner\n        notZeroAddress(_address)\n    {\n        trusted[_address] = false;\n        RemoveTrusted(_address);\n    }\n\n}\n\ncontract Pausable is Trustable {\n\n\n    //To check if Token is paused\n    bool public paused;\n    //Block number on pause\n    uint256 public pauseBlockNumber;\n    //Block number on resume\n    uint256 public resumeBlockNumber;\n\n    event Pause(uint256 _blockNumber);\n    event Unpause(uint256 _blockNumber);\n\n    function pause()\n        public\n        onlyOwner\n        whenNotPaused\n    {\n        paused = true;\n        pauseBlockNumber = block.number;\n        resumeBlockNumber = 0;\n        Pause(pauseBlockNumber);\n    }\n\n    function unpause()\n        public\n        onlyOwner\n        whenPaused\n    {\n        paused = false;\n        resumeBlockNumber = block.number;\n        pauseBlockNumber = 0;\n        Unpause(resumeBlockNumber);\n    }\n\n    modifier whenNotPaused {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n}\n\n/*\n\tContract determines token\n*/\ncontract Token is ERC20, Pausable{\n\n\n    using SafeMath for uint256;\n\n    //Total amount of Outing\n    uint256 _totalSupply = 56000000000000000; \n\n    //Balances for each account\n    mapping (address => uint256)  balances;\n    //Owner of the account approves the transfer of an amount to another account\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //Notifies users about the amount burnt\n    event Burn(address indexed _from, uint256 _value);\n    //Notifies users about end block change\n    event CrowdsaleEndChanged (uint256 _crowdsaleEnd, uint256 _newCrowdsaleEnd);\n\n    //return _totalSupply of the Token\n    function totalSupply() external constant returns (uint256 totalTokenSupply) {\n        totalTokenSupply = _totalSupply;\n    }\n\n    //What is the balance of a particular account?\n    function balanceOf(address _owner)\n        external\n        constant\n        returns (uint256 balance)\n    {\n        return balances[_owner];\n    }\n\n    //Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount)\n        external\n        notZeroAddress(_to)\n        whenNotPaused\n        returns (bool success)\n    {\n        balances[msg.sender] = balances[msg.sender].SUB(_amount);\n        balances[_to] = balances[_to].ADD(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount)\n        external\n        notZeroAddress(_to)\n        whenNotPaused\n        returns (bool success)\n    {\n        //Require allowance to be not too big\n        require(allowed[_from][msg.sender] >= _amount);\n        balances[_from] = balances[_from].SUB(_amount);\n        balances[_to] = balances[_to].ADD(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount)\n        external\n        whenNotPaused\n        notZeroAddress(_spender)\n        returns (bool success)\n    {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    //Return how many tokens left that you can spend from\n    function allowance(address _owner, address _spender)\n        external\n        constant\n        returns (uint256 remaining)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue)\n        external\n        whenNotPaused\n        returns (bool success)\n    {\n        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\n        require(increased <= balances[msg.sender]);\n        //Cannot approve more coins then you have\n        allowed[msg.sender][_spender] = increased;\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\n        external\n        whenNotPaused\n        returns (bool success)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function burn(uint256 _value) external returns (bool success) {\n        require(trusted[msg.sender]);\n        //Subtract from the sender\n        balances[msg.sender] = balances[msg.sender].SUB(_value);\n        //Update _totalSupply\n        _totalSupply = _totalSupply.SUB(_value);\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n}\n\n/*\n\tContract defines specific token\n*/\ncontract OutingToken is Token{\n\n    //Name of the token\n    string public constant name = \"Outing\";\n    //Symbol of the token\n    string public constant symbol = \"OTG\";\n    //Number of decimals of Outing\n    uint8 public constant decimals = 8;\n\n    //Tokens allocation\n    //Outing Reserve wallet that will be unlocked after 0.5 year after ICO\n    address public constant OUTINGRESERVE = 0xB8E6C4Eab5BC0eAF1f3D8A9a59a8A26112a56fE2;\n    //Team wallet that will be unlocked after 1 year after ICO\n\n    address public constant TEAM = 0x0702dd2f7DC2FF1dCc6beC2De9D1e6e0d467AfaC;\n    //0.5 year after ICO\n    uint256 public UNLOCK_OUTINGRESERVE = now + 262800 minutes;\n    //1 year after ICO\n    uint256 public UNLOCK_TEAM = now + 525600 minutes;\n    //outing reserve wallet balance\n    uint256 public outingreserveBalance;\n    //team wallet balance\n    uint256 public teamBalance;\n\n    //56%\n    uint256 private constant OUTINGRESERVE_THOUSANDTH = 560;\n    //7%\n    uint256 private constant TEAM_THOUSANDTH = 70;\n    //37%\n    uint256 private constant ICO_THOUSANDTH = 370;\n    //100%\n    uint256 private constant DENOMINATOR = 1000;\n\n    function OutingToken() public {\n        //36% of _totalSupply\n        balances[msg.sender] = _totalSupply * ICO_THOUSANDTH / DENOMINATOR;\n        //56% of _totalSupply\n        outingreserveBalance = _totalSupply * OUTINGRESERVE_THOUSANDTH / DENOMINATOR;\n        //8% of _totalSupply\n        teamBalance = _totalSupply * TEAM_THOUSANDTH / DENOMINATOR;\n\n        Transfer (this, msg.sender, balances[msg.sender]);\n    }\n\n    //Check if team wallet is unlocked\n    function unlockTokens(address _address) external {\n        if (_address == OUTINGRESERVE) {\n            require(UNLOCK_OUTINGRESERVE <= now);\n            require (outingreserveBalance > 0);\n            balances[OUTINGRESERVE] = outingreserveBalance;\n            outingreserveBalance = 0;\n            Transfer (this, OUTINGRESERVE, balances[OUTINGRESERVE]);\n        } else if (_address == TEAM) {\n            require(UNLOCK_TEAM <= now);\n            require (teamBalance > 0);\n            balances[TEAM] = teamBalance;\n            teamBalance = 0;\n            Transfer (this, TEAM, balances[TEAM]);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_OUTINGRESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resumeBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OUTINGRESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outingreserveBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_crowdsaleEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCrowdsaleEnd\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"AddTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_trustable\",\"type\":\"address\"}],\"name\":\"RemoveTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405266c6f3b40b6c000060055562f099c042016008556301e133804201600955341561002d57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f7e68a74e401ebc07759bb17a3ef2f0a948e8a175c7c779be9fe9a3334e06585860405160405180910390a26103e86101726005540281151561019657fe5b04600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e8610230600554028115156101ed57fe5b04600a819055506103e860466005540281151561020657fe5b04600b819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3612081806102c06000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f257806318160ddd1461024c57806323b872dd14610275578063313ce567146102ee5780633f4ba83a1461031d57806342966c68146103325780634f052b821461036d5780635c975abb1461039657806366188463146103c357806370a082311461041d5780638456cb591461046a57806389e852171461047f57806395d89b41146104a8578063a378785814610536578063a9059cbb1461055f578063bd945430146105b9578063c120d1a41461060e578063c264786f14610637578063c8cfd49014610660578063cb67f94814610689578063cecdc6aa146106c2578063d4d0d6e614610717578063d55e62a014610750578063d73dd62314610789578063dd62ed3e146107e3578063f2fde38b1461084f575b600080fd5b341561016f57600080fd5b610177610888565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b757808201518184015260208101905061019c565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fd57600080fd5b610232600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c1565b604051808215151515815260200191505060405180910390f35b341561025757600080fd5b61025f610a0d565b6040518082815260200191505060405180910390f35b341561028057600080fd5b6102d4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a17565b604051808215151515815260200191505060405180910390f35b34156102f957600080fd5b610301610da7565b604051808260ff1660ff16815260200191505060405180910390f35b341561032857600080fd5b610330610dac565b005b341561033d57600080fd5b6103536004808035906020019091905050610e87565b604051808215151515815260200191505060405180910390f35b341561037857600080fd5b610380610fe8565b6040518082815260200191505060405180910390f35b34156103a157600080fd5b6103a9610fee565b604051808215151515815260200191505060405180910390f35b34156103ce57600080fd5b610403600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611001565b604051808215151515815260200191505060405180910390f35b341561042857600080fd5b610454600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112ae565b6040518082815260200191505060405180910390f35b341561047557600080fd5b61047d6112f7565b005b341561048a57600080fd5b6104926113d3565b6040518082815260200191505060405180910390f35b34156104b357600080fd5b6104bb6113d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104fb5780820151818401526020810190506104e0565b50505050905090810190601f1680156105285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054157600080fd5b610549611412565b6040518082815260200191505060405180910390f35b341561056a57600080fd5b61059f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611418565b604051808215151515815260200191505060405180910390f35b34156105c457600080fd5b6105cc61160d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061957600080fd5b610621611625565b6040518082815260200191505060405180910390f35b341561064257600080fd5b61064a61162b565b6040518082815260200191505060405180910390f35b341561066b57600080fd5b610673611631565b6040518082815260200191505060405180910390f35b341561069457600080fd5b6106c0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611637565b005b34156106cd57600080fd5b6106d5611971565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561072257600080fd5b61074e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611989565b005b341561075b57600080fd5b610787600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611abf565b005b341561079457600080fd5b6107c9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bf6565b604051808215151515815260200191505060405180910390f35b34156107ee57600080fd5b610839600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e61565b6040518082815260200191505060405180910390f35b341561085a57600080fd5b610886600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ee8565b005b6040805190810160405280600681526020017f4f7574696e67000000000000000000000000000000000000000000000000000081525081565b6000600260009054906101000a900460ff161515156108df57600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561091c57600080fd5b82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000600554905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a5657600080fd5b600260009054906101000a900460ff16151515610a7257600080fd5b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610afd57600080fd5b610b4f83600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461201e90919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be483600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203790919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cb683600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461201e90919063ffffffff16565b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0757600080fd5b600260009054906101000a900460ff161515610e2257600080fd5b6000600260006101000a81548160ff0219169083151502179055504360048190555060006003819055507faaa520fdd7d2c83061d632fa017b0432407e798818af63ea908589fceda39ab76004546040518082815260200191505060405180910390a1565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610ee157600080fd5b610f3382600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461201e90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8b8260055461201e90919063ffffffff16565b6005819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60085481565b600260009054906101000a900460ff1681565b600080600260009054906101000a900460ff1615151561102057600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561112e576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c2565b611141838261201e90919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561135257600080fd5b600260009054906101000a900460ff1615151561136e57600080fd5b6001600260006101000a81548160ff0219169083151502179055504360038190555060006004819055507f68b095021b1f40fe513109f513c66692f0b3219aee674a69f4efc57badb8201d6003546040518082815260200191505060405180910390a1565b600b5481565b6040805190810160405280600381526020017f4f5447000000000000000000000000000000000000000000000000000000000081525081565b60045481565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561145757600080fd5b600260009054906101000a900460ff1615151561147357600080fd5b6114c583600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461201e90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061155a83600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203790919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b73b8e6c4eab5bc0eaf1f3d8a9a59a8a26112a56fe281565b600a5481565b60035481565b60095481565b73b8e6c4eab5bc0eaf1f3d8a9a59a8a26112a56fe273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117d457426008541115151561169057600080fd5b6000600a541115156116a157600080fd5b600a546006600073b8e6c4eab5bc0eaf1f3d8a9a59a8a26112a56fe273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a8190555073b8e6c4eab5bc0eaf1f3d8a9a59a8a26112a56fe273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006600073b8e6c4eab5bc0eaf1f3d8a9a59a8a26112a56fe273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a361196e565b730702dd2f7dc2ff1dcc6bec2de9d1e6e0d467afac73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561196d57426009541115151561182d57600080fd5b6000600b5411151561183e57600080fd5b600b5460066000730702dd2f7dc2ff1dcc6bec2de9d1e6e0d467afac73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b81905550730702dd2f7dc2ff1dcc6bec2de9d1e6e0d467afac73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60066000730702dd2f7dc2ff1dcc6bec2de9d1e6e0d467afac73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35b5b50565b730702dd2f7dc2ff1dcc6bec2de9d1e6e0d467afac81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e457600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a2157600080fd5b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f7e68a74e401ebc07759bb17a3ef2f0a948e8a175c7c779be9fe9a3334e06585860405160405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b1a57600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611b5757600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f13b377d47c62a2a971810cc847edb6ff452ed5c2dc04094da2e7e45f6c29897060405160405180910390a25050565b600080600260009054906101000a900460ff16151515611c1557600080fd5b611ca483600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203790919063ffffffff16565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611cf457600080fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4357600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f8057600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081831015151561202c57fe5b818303905092915050565b600080828401905083811015151561204b57fe5b80915050929150505600a165627a7a723058209476798d5a34ff64b70f34c162ad76fa2eadd5e34d5ce7195795bee6e9376ca00029"
}