{
  "address": "0x049bd8c3adc3fe7d3fc2a44541d955a537c2a484",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Oracle",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/interfaces/ChainlinkRequestInterface.sol\n\npragma solidity 0.4.24;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 payment,\n    bytes32 id,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 version,\n    bytes data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n\n// File: contracts/interfaces/OracleInterface.sol\n\npragma solidity 0.4.24;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  ) external returns (bool);\n  function getAuthorizationStatus(address node) external view returns (bool);\n  function setFulfillmentPermission(address node, bool allowed) external;\n  function withdraw(address recipient, uint256 amount) external;\n  function withdrawable() external view returns (uint256);\n}\n\n// File: contracts/interfaces/LinkTokenInterface.sol\n\npragma solidity 0.4.24;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external returns (bool success);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external returns (uint256 balance);\n  function decimals() external returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external returns (string tokenName);\n  function symbol() external returns (string tokenSymbol);\n  function totalSupply() external returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n\n// File: contracts/Oracle.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n/**\n * @title The Chainlink Oracle contract\n * @notice Node operators can deploy this contract to fulfill requests sent to them\n */\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable {\n  using SafeMath for uint256;\n\n  uint256 constant public EXPIRY_TIME = 5 minutes;\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\n  // We initialize fields to 1 instead of 0 so that the first invocation\n  // does not cost more gas.\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\n  uint256 constant private SELECTOR_LENGTH = 4;\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\n  // solium-disable-next-line zeppelin/no-arithmetic-operations\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\n\n  LinkTokenInterface internal LinkToken;\n  mapping(bytes32 => bytes32) private commitments;\n  mapping(address => bool) private authorizedNodes;\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\n\n  event OracleRequest(\n    bytes32 indexed specId,\n    address requester,\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddr,\n    bytes4 callbackFunctionId,\n    uint256 cancelExpiration,\n    uint256 dataVersion,\n    bytes data\n  );\n\n  event CancelOracleRequest(\n    bytes32 indexed requestId\n  );\n\n  /**\n   * @notice Deploy with the address of the LINK token\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\n   * @param _link The address of the LINK token\n   */\n  constructor(address _link) Ownable() public {\n    LinkToken = LinkTokenInterface(_link);\n  }\n\n  /**\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\n   * values to ensure correctness. Calls oracleRequest.\n   * @param _sender Address of the sender\n   * @param _amount Amount of LINK sent (specified in wei)\n   * @param _data Payload of the transaction\n   */\n  function onTokenTransfer(\n    address _sender,\n    uint256 _amount,\n    bytes _data\n  )\n    public\n    onlyLINK\n    validRequestLength(_data)\n    permittedFunctionsForLINK(_data)\n  {\n    assembly {\n      // solium-disable-next-line security/no-low-level-calls\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\n      // solium-disable-next-line security/no-low-level-calls\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\n    }\n    // solium-disable-next-line security/no-low-level-calls\n    require(address(this).delegatecall(_data), \"Unable to create request\"); // calls oracleRequest\n  }\n\n  /**\n   * @notice Creates the Chainlink request\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\n   * Emits OracleRequest event for the Chainlink node to detect.\n   * @param _sender The sender of the request\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _specId The Job Specification ID\n   * @param _callbackAddress The callback address for the response\n   * @param _callbackFunctionId The callback function ID for the response\n   * @param _nonce The nonce sent by the requester\n   * @param _dataVersion The specified data version\n   * @param _data The CBOR payload of the request\n   */\n  function oracleRequest(\n    address _sender,\n    uint256 _payment,\n    bytes32 _specId,\n    address _callbackAddress,\n    bytes4 _callbackFunctionId,\n    uint256 _nonce,\n    uint256 _dataVersion,\n    bytes _data\n  )\n    external\n    onlyLINK\n    checkCallbackAddress(_callbackAddress)\n  {\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\n    require(commitments[requestId] == 0, \"Must use a unique ID\");\n    uint256 expiration = now.add(EXPIRY_TIME);\n\n    commitments[requestId] = keccak256(\n      abi.encodePacked(\n        _payment,\n        _callbackAddress,\n        _callbackFunctionId,\n        expiration\n      )\n    );\n\n    emit OracleRequest(\n      _specId,\n      _sender,\n      requestId,\n      _payment,\n      _callbackAddress,\n      _callbackFunctionId,\n      expiration,\n      _dataVersion,\n      _data);\n  }\n\n  /**\n   * @notice Called by the Chainlink node to fulfill requests\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\n   * Will call the callback address' callback function without bubbling up error\n   * checking in a `require` so that the node can get paid.\n   * @param _requestId The fulfillment request ID that must match the requester's\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\n   * @param _callbackAddress The callback address to call for fulfillment\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\n   * @param _data The data to return to the consuming contract\n   * @return Status if the external call was successful\n   */\n  function fulfillOracleRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    address _callbackAddress,\n    bytes4 _callbackFunctionId,\n    uint256 _expiration,\n    bytes32 _data\n  )\n    external\n    onlyAuthorizedNode\n    isValidRequest(_requestId)\n    returns (bool)\n  {\n    bytes32 paramsHash = keccak256(\n      abi.encodePacked(\n        _payment,\n        _callbackAddress,\n        _callbackFunctionId,\n        _expiration\n      )\n    );\n    require(commitments[_requestId] == paramsHash, \"Params do not match request ID\");\n    withdrawableTokens = withdrawableTokens.add(_payment);\n    delete commitments[_requestId];\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\n    // All updates to the oracle's fulfillment should come before calling the\n    // callback(addr+functionId) as it is untrusted.\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\n    return _callbackAddress.call(_callbackFunctionId, _requestId, _data); // solium-disable-line security/no-low-level-calls\n  }\n\n  /**\n   * @notice Use this to check if a node is authorized for fulfilling requests\n   * @param _node The address of the Chainlink node\n   * @return The authorization status of the node\n   */\n  function getAuthorizationStatus(address _node) external view returns (bool) {\n    return authorizedNodes[_node];\n  }\n\n  /**\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\n   * @param _node The address of the Chainlink node\n   * @param _allowed Bool value to determine if the node can fulfill requests\n   */\n  function setFulfillmentPermission(address _node, bool _allowed) external onlyOwner {\n    authorizedNodes[_node] = _allowed;\n  }\n\n  /**\n   * @notice Allows the node operator to withdraw earned LINK to a given address\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\n   * @param _recipient The address to send the LINK token to\n   * @param _amount The amount to send (specified in wei)\n   */\n  function withdraw(address _recipient, uint256 _amount)\n    external\n    onlyOwner\n    hasAvailableFunds(_amount)\n  {\n    withdrawableTokens = withdrawableTokens.sub(_amount);\n    assert(LinkToken.transfer(_recipient, _amount));\n  }\n\n  /**\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\n   * @return The amount of withdrawable LINK on the contract\n   */\n  function withdrawable() external view onlyOwner returns (uint256) {\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\n  }\n\n  /**\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\n   * sent for the request back to the requester's address.\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\n   * Emits CancelOracleRequest event.\n   * @param _requestId The request ID\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _callbackFunc The requester's specified callback address\n   * @param _expiration The time of the expiration for the request\n   */\n  function cancelOracleRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    bytes4 _callbackFunc,\n    uint256 _expiration\n  ) external {\n    bytes32 paramsHash = keccak256(\n      abi.encodePacked(\n        _payment,\n        msg.sender,\n        _callbackFunc,\n        _expiration)\n    );\n    require(paramsHash == commitments[_requestId], \"Params do not match request ID\");\n    require(_expiration <= now, \"Request is not expired\");\n\n    delete commitments[_requestId];\n    emit CancelOracleRequest(_requestId);\n\n    assert(LinkToken.transfer(msg.sender, _payment));\n  }\n\n  // MODIFIERS\n\n  /**\n   * @dev Reverts if amount requested is greater than withdrawable balance\n   * @param _amount The given amount to compare to `withdrawableTokens`\n   */\n  modifier hasAvailableFunds(uint256 _amount) {\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \"Amount requested is greater than withdrawable balance\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if request ID does not exist\n   * @param _requestId The given request ID to check in stored `commitments`\n   */\n  modifier isValidRequest(bytes32 _requestId) {\n    require(commitments[_requestId] != 0, \"Must have a valid requestId\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\n   */\n  modifier onlyAuthorizedNode() {\n    require(authorizedNodes[msg.sender] || msg.sender == owner, \"Not an authorized node to fulfill requests\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier onlyLINK() {\n    require(msg.sender == address(LinkToken), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\n   * @param _data The data payload of the request\n   */\n  modifier permittedFunctionsForLINK(bytes _data) {\n    bytes4 funcSelector;\n    assembly {\n      // solium-disable-next-line security/no-low-level-calls\n      funcSelector := mload(add(_data, 32))\n    }\n    require(funcSelector == this.oracleRequest.selector, \"Must use whitelisted functions\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the callback address is the LINK token\n   * @param _to The callback address\n   */\n  modifier checkCallbackAddress(address _to) {\n    require(_to != address(LinkToken), \"Cannot callback to LINK\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given payload is less than needed to create a request\n   * @param _data The request payload\n   */\n  modifier validRequestLength(bytes _data) {\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\n    _;\n  }\n\n}",
  "bytecode": "6080604052600160045534801561001557600080fd5b50604051602080611215833981016040525160008054600160a060020a0319908116331790915560018054600160a060020a03909316929091169190911790556111b1806100646000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634042994681146100be5780634ab0d190146101115780634b6022821461015f57806350188301146101865780636ee4d5531461019b578063715018a6146101c65780637fcd56db146101db5780638da5cb5b14610201578063a4c0ed3614610232578063d3e9c3141461029b578063f2fde38b146102bc578063f3fef3a3146102dd575b600080fd5b3480156100ca57600080fd5b5061010f600160a060020a03600480358216916024803592604435926064351691600160e060020a0319608435169160a4359160c4359160e435918201910135610301565b005b34801561011d57600080fd5b5061014b600435602435600160a060020a0360443516600160e060020a03196064351660843560a4356106c5565b604080519115158252519081900360200190f35b34801561016b57600080fd5b506101746109d8565b60408051918252519081900360200190f35b34801561019257600080fd5b506101746109de565b3480156101a757600080fd5b5061010f600435602435600160e060020a031960443516606435610a0f565b3480156101d257600080fd5b5061010f610c55565b3480156101e757600080fd5b5061010f600160a060020a03600435166024351515610cc1565b34801561020d57600080fd5b50610216610d03565b60408051600160a060020a039092168252519081900360200190f35b34801561023e57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261010f948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d129650505050505050565b3480156102a757600080fd5b5061014b600160a060020a0360043516610f37565b3480156102c857600080fd5b5061010f600160a060020a0360043516610f55565b3480156102e957600080fd5b5061010f600160a060020a0360043516602435610f78565b6001546000908190600160a060020a03163314610368576040805160e560020a62461bcd02815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b6001548890600160a060020a03808316911614156103d0576040805160e560020a62461bcd02815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b8b876040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106104485780518252601f199092019160209182019101610429565b51815160209384036101000a600019018019909216911617905260408051929094018290039091206000818152600290925292902054919650501591506104db9050576040805160e560020a62461bcd02815260206004820152601460248201527f4d75737420757365206120756e69717565204944000000000000000000000000604482015290519081900360640190fd5b6104ed4261012c63ffffffff6110e316565b6040805160208082018f90526c01000000000000000000000000600160a060020a038e160282840152600160e060020a03198c1660548301526058808301859052835180840390910181526078909201928390528151939550909282918401908083835b602083106105705780518252601f199092019160209182019101610551565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600260008560001916600019168152602001908152602001600020816000191690555089600019167fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d858e8d8d888d8d8d604051808a600160a060020a0316600160a060020a03168152602001896000191660001916815260200188815260200187600160a060020a0316600160a060020a03168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200185815260200184815260200180602001828103825284848281815260200192508082843760405192018290039c50909a5050505050505050505050a2505050505050505050505050565b33600090815260036020526040812054819060ff16806106ef5750600054600160a060020a031633145b151561076b576040805160e560020a62461bcd02815260206004820152602a60248201527f4e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c60448201527f6c20726571756573747300000000000000000000000000000000000000000000606482015290519081900360840190fd5b600088815260026020526040902054889015156107d2576040805160e560020a62461bcd02815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018b90526c01000000000000000000000000600160a060020a038b160282840152600160e060020a031989166054830152605880830189905283518084039091018152607890920192839052815191929182918401908083835b602083106108535780518252601f199092019160209182019101610834565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008f815260029092529290205491955050841491506108e79050576040805160e560020a62461bcd02815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b6004546108fa908963ffffffff6110e316565b60045560008981526002602052604081205562061a805a1015610967576040805160e560020a62461bcd02815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b6040805163ffffffff7c0100000000000000000000000000000000000000000000000000000000808a04918216028252600482018c9052602482018790529151600160a060020a038a169291604480820192600092909190829003018183875af19c9b505050505050505050505050565b61012c81565b60008054600160a060020a031633146109f657600080fd5b600454610a0a90600163ffffffff6110f616565b905090565b6040805160208082018690526c01000000000000000000000000330282840152600160e060020a0319851660548301526058808301859052835180840390910181526078909201928390528151600093918291908401908083835b60208310610a895780518252601f199092019160209182019101610a6a565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008b81526002909252929020549194505083149150610b1d9050576040805160e560020a62461bcd02815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b75576040805160e560020a62461bcd02815260206004820152601660248201527f52657175657374206973206e6f74206578706972656400000000000000000000604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018790529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015610c1a57600080fd5b505af1158015610c2e573d6000803e3d6000fd5b505050506040513d6020811015610c4457600080fd5b50511515610c4e57fe5b5050505050565b600054600160a060020a03163314610c6c57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610cd857600080fd5b600160a060020a03919091166000908152600360205260409020805460ff1916911515919091179055565b600054600160a060020a031681565b600154600160a060020a03163314610d74576040805160e560020a62461bcd02815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b8051819060441115610dd0576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642072657175657374206c656e67746800000000000000000000604482015290519081900360640190fd5b60208201518290600160e060020a031981167f404299460000000000000000000000000000000000000000000000000000000014610e58576040805160e560020a62461bcd02815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b85602485015284604485015230600160a060020a03168460405180828051906020019080838360005b83811015610e99578181015183820152602001610e81565b50505050905090810190601f168015610ec65780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150501515610f2f576040805160e560020a62461bcd02815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b505050505050565b600160a060020a031660009081526003602052604090205460ff1690565b600054600160a060020a03163314610f6c57600080fd5b610f7581611108565b50565b600054600160a060020a03163314610f8f57600080fd5b80610fa181600163ffffffff6110e316565b6004541015611020576040805160e560020a62461bcd02815260206004820152603560248201527f416d6f756e74207265717565737465642069732067726561746572207468616e60448201527f20776974686472617761626c652062616c616e63650000000000000000000000606482015290519081900360840190fd5b600454611033908363ffffffff6110f616565b6004908155600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b1580156110aa57600080fd5b505af11580156110be573d6000803e3d6000fd5b505050506040513d60208110156110d457600080fd5b505115156110de57fe5b505050565b818101828110156110f057fe5b92915050565b60008282111561110257fe5b50900390565b600160a060020a038116151561111d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820b665cef74ed35e0e8ba95e80400a1e06066d1f84e86da3f3a2e170ba94db04b00029000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca",
  "constructorArguments": "000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca"
}