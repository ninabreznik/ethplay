{
  "address": "0x88735c50abbb3658ca4d03e37240ff99a9426b75",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GRAPE",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-10\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization\n *      control functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the\n     *      sender account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n/**\n * @title ERC223\n * @dev ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n  uint public totalSupply;\n\n    // ERC223 functions\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n    function totalSupply() public view returns (uint256 _supply);\n    function balanceOf(address who) public view returns (uint);\n\n    // ERC223 functions and events\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n\n/**\n * @title ContractReceiver\n * @dev Contract that is working with ERC223 tokens\n */\n contract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /**\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent (analogue of msg.value)\n         * tkn.data is data of token transaction (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n    }\n}\n\n\n/**\n * @title GRAPE\n * @author GRAPE\n * @dev GRAPE is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract GRAPE is ERC223, Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"GRAPE\";\n    string public symbol = \"GRP\";\n    uint8 public decimals = 8;\n    uint256 public initialSupply = 60e9 * 1e8;\n    uint256 public totalSupply;\n    uint256 public distributeAmount = 0;\n    bool public mintingFinished = false;\n\n    mapping (address => uint) balances;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public unlockUnixTime;\n\n    event FrozenFunds(address indexed target, bool frozen);\n    event LockedFunds(address indexed target, uint256 locked);\n    event Burn(address indexed burner, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    function GRAPE() public {\n        totalSupply = initialSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name() public view returns (string _name) {\n        return name;\n    }\n\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n      return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint256 size){\n      assert(msg.data.length >= size + 4);\n      _;\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens\n     * @param targets Addresses to be frozen\n     * @param isFrozen either to freeze it or not\n     */\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\n      require(targets.length > 0);\n\n      for (uint i = 0; i < targets.length; i++) {\n        require(targets[i] != 0x0);\n        frozenAccount[targets[i]] = isFrozen;\n        FrozenFunds(targets[i], isFrozen);\n      }\n    }\n\n    /**\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n     * @param targets Addresses to be locked funds\n     * @param unixTimes Unix times when locking up will be finished\n     */\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\n      require(targets.length > 0\n              && targets.length == unixTimes.length);\n\n      for(uint i = 0; i < targets.length; i++){\n        require(unlockUnixTime[targets[i]] < unixTimes[i]);\n        unlockUnixTime[targets[i]] = unixTimes[i];\n        LockedFunds(targets[i], unixTimes[i]);\n      }\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n      require(_value > 0\n              && frozenAccount[msg.sender] == false\n              && frozenAccount[_to] == false\n              && now > unlockUnixTime[msg.sender]\n              && now > unlockUnixTime[_to]);\n\n      if(isContract(_to)) {\n          if (balanceOf(msg.sender) < _value) revert();\n          balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n          balances[_to] = SafeMath.add(balanceOf(_to), _value);\n          assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n          Transfer(msg.sender, _to, _value, _data);\n          Transfer(msg.sender, _to, _value);\n          return true;\n      }\n      else {\n          return transferToAddress(_to, _value, _data);\n      }\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n      require(_value > 0\n              && frozenAccount[msg.sender] == false\n              && frozenAccount[_to] == false\n              && now > unlockUnixTime[msg.sender]\n              && now > unlockUnixTime[_to]);\n\n      if(isContract(_to)) {\n          return transferToContract(_to, _value, _data);\n      }\n      else {\n          return transferToAddress(_to, _value, _data);\n      }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) public returns (bool success) {\n      require(_value > 0\n              && frozenAccount[msg.sender] == false\n              && frozenAccount[_to] == false\n              && now > unlockUnixTime[msg.sender]\n              && now > unlockUnixTime[_to]);\n\n      //standard function transfer similar to ERC20 transfer with no _data\n      //added due to backwards compatibility reasons\n      bytes memory empty;\n      if(isContract(_to)) {\n          return transferToContract(_to, _value, empty);\n      }\n      else {\n          return transferToAddress(_to, _value, empty);\n      }\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n        // retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n    // function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n      if (balanceOf(msg.sender) < _value) revert();\n      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n      Transfer(msg.sender, _to, _value, _data);\n      Transfer(msg.sender, _to, _value);\n      return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n      if (balanceOf(msg.sender) < _value) revert();\n      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n      ContractReceiver receiver = ContractReceiver(_to);\n      receiver.tokenFallback(msg.sender, _value, _data);\n      Transfer(msg.sender, _to, _value, _data);\n      Transfer(msg.sender, _to, _value);\n      return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _from The address that will burn the tokens.\n     * @param _unitAmount The amount of token to be burned.\n     */\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n      require(_unitAmount > 0\n              && balanceOf(_from) >= _unitAmount);\n\n      balances[_from] = SafeMath.sub(balances[_from], _unitAmount);\n      totalSupply = SafeMath.sub(totalSupply, _unitAmount);\n      Burn(_from, _unitAmount);\n    }\n\n    modifier canMint() {\n      require(!mintingFinished);\n      _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _unitAmount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n      require(_unitAmount > 0);\n\n      totalSupply = SafeMath.add(totalSupply, _unitAmount);\n      balances[_to] = SafeMath.add(balances[_to], _unitAmount);\n      Mint(_to, _unitAmount);\n      Transfer(address(0), _to, _unitAmount);\n      return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n      mintingFinished = true;\n      MintFinished();\n      return true;\n    }\n\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided amount\n     */\n    function distributeAirdrop(address[] addresses, uint256 amount) public returns (bool) {\n      require(amount > 0\n              && addresses.length > 0\n              && frozenAccount[msg.sender] == false\n              && now > unlockUnixTime[msg.sender]);\n\n      amount = SafeMath.mul(amount, 1e8);\n      uint256 totalAmount = SafeMath.mul(amount, addresses.length);\n      require(balances[msg.sender] >= totalAmount);\n\n      for (uint i = 0; i < addresses.length; i++) {\n          require(addresses[i] != 0x0\n                && frozenAccount[addresses[i]] == false\n                && now > unlockUnixTime[addresses[i]]);\n\n          balances[addresses[i]] = SafeMath.add(balances[addresses[i]], amount);\n          Transfer(msg.sender, addresses[i], amount);\n      }\n      balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n      return true;\n    }\n\n    /**\n     * @dev Function to collect tokens from the list of addresses\n     */\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\n      require(addresses.length > 0\n              && addresses.length == amounts.length);\n\n      uint256 totalAmount = 0;\n\n      for (uint i = 0; i < addresses.length; i++) {\n        require(amounts[i] > 0\n                && addresses[i] != 0x0\n                && frozenAccount[addresses[i]] == false\n                && now > unlockUnixTime[addresses[i]]);\n\n        amounts[i] = SafeMath.mul(amounts[i], 1e8);\n        require(balances[addresses[i]] >= amounts[i]);\n        balances[addresses[i]] = SafeMath.sub(balances[addresses[i]], amounts[i]);\n        totalAmount = SafeMath.add(totalAmount, amounts[i]);\n        Transfer(addresses[i], msg.sender, amounts[i]);\n      }\n        balances[msg.sender] = SafeMath.add(balances[msg.sender], totalAmount);\n        return true;\n      }\n\n    function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\n      distributeAmount = _unitAmount;\n    }\n\n    /**\n     * @dev Function to distribute tokens to the msg.sender automatically\n     *      If distributeAmount is 0, this function doesn't work\n     */\n    function autoDistribute() payable public {\n      require(distributeAmount > 0\n              && balanceOf(owner) >= distributeAmount\n              && frozenAccount[msg.sender] == false\n              && now > unlockUnixTime[msg.sender]);\n      if (msg.value > 0) owner.transfer(msg.value);\n\n      balances[owner] = SafeMath.sub(balances[owner], distributeAmount);\n      balances[msg.sender] = SafeMath.add(balances[msg.sender], distributeAmount);\n      Transfer(owner, msg.sender, distributeAmount);\n    }\n\n    /**\n     * @dev token fallback function\n     */\n    function() payable public {\n      autoDistribute();\n    }\n}\n\n/*\n * Powered by coingrape\n */",
  "bytecode": "606060405260408051908101604052600581527f4752415045000000000000000000000000000000000000000000000000000000602082015260029080516200004d92916020019062000106565b506040805190810160405260038082527f475250000000000000000000000000000000000000000000000000000000000060208301529080516200009692916020019062000106565b5060048054600860ff1991821681179092556753444835ec580000600555600060075581541690553415620000ca57600080fd5b60018054600160a060020a03191633600160a060020a0316908117909155600554600681905560009182526009602052604090912055620001ab565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b620001a891905b8082111562000187576000815560010162000192565b90565b611d0480620001bb6000396000f3006060604052600436106101245763ffffffff60e060020a60003504166305d2035b811461012e57806306fdde031461015557806318160ddd146101df578063313ce56714610204578063378dc3dc1461022d57806340c10f19146102405780634f25eced1461026257806364ddc6051461027557806370a08231146103045780637d64bcb4146103235780638da5cb5b14610336578063945946251461036557806395d89b41146103b65780639dc29fac146103c9578063a8f11eb914610124578063a9059cbb146103eb578063b414d4b61461040d578063be45fd621461042c578063c341b9f614610491578063cbbe974b146104e4578063d39b1d4814610503578063f0dc417114610519578063f2fde38b146105a8578063f6368f8a146105c7575b61012c61066e565b005b341561013957600080fd5b6101416107d0565b604051901515815260200160405180910390f35b341561016057600080fd5b6101686107d9565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a457808201518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ea57600080fd5b6101f2610881565b60405190815260200160405180910390f35b341561020f57600080fd5b610217610887565b60405160ff909116815260200160405180910390f35b341561023857600080fd5b6101f2610890565b341561024b57600080fd5b610141600160a060020a0360043516602435610896565b341561026d57600080fd5b6101f261098b565b341561028057600080fd5b61012c60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061099195505050505050565b341561030f57600080fd5b6101f2600160a060020a0360043516610aeb565b341561032e57600080fd5b610141610b06565b341561034157600080fd5b610349610b73565b604051600160a060020a03909116815260200160405180910390f35b341561037057600080fd5b61014160046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610b8292505050565b34156103c157600080fd5b610168610dfd565b34156103d457600080fd5b61012c600160a060020a0360043516602435610e70565b34156103f657600080fd5b610141600160a060020a0360043516602435610f3b565b341561041857600080fd5b610141600160a060020a0360043516611016565b341561043757600080fd5b61014160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061102b95505050505050565b341561049c57600080fd5b61012c60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506110fd9050565b34156104ef57600080fd5b6101f2600160a060020a03600435166111ff565b341561050e57600080fd5b61012c600435611211565b341561052457600080fd5b61014160046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061123195505050505050565b34156105b357600080fd5b61012c600160a060020a0360043516611518565b34156105d257600080fd5b61014160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506115b395505050505050565b6000600754118015610696575060075460015461069390600160a060020a0316610aeb565b10155b80156106bb5750600160a060020a0333166000908152600a602052604090205460ff16155b80156106de5750600160a060020a0333166000908152600b602052604090205442115b15156106e957600080fd5b600034111561072657600154600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561072657600080fd5b600154600160a060020a031660009081526009602052604090205460075461074e91906118d9565b600154600160a060020a0390811660009081526009602052604080822093909355339091168152205460075461078491906118eb565b600160a060020a0333811660008181526009602052604090819020939093556001546007549193921691600080516020611cb983398151915291905190815260200160405180910390a3565b60085460ff1681565b6107e1611ca6565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108775780601f1061084c57610100808354040283529160200191610877565b820191906000526020600020905b81548152906001019060200180831161085a57829003601f168201915b5050505050905090565b60065490565b60045460ff1690565b60055481565b60015460009033600160a060020a039081169116146108b457600080fd5b60085460ff16156108c457600080fd5b600082116108d157600080fd5b6108dd600654836118eb565b600655600160a060020a03831660009081526009602052604090205461090390836118eb565b600160a060020a0384166000818152600960205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020611cb98339815191528460405190815260200160405180910390a350600192915050565b60075481565b60015460009033600160a060020a039081169116146109af57600080fd5b600083511180156109c1575081518351145b15156109cc57600080fd5b5060005b8251811015610ae6578181815181106109e557fe5b90602001906020020151600b60008584815181106109ff57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205410610a2d57600080fd5b818181518110610a3957fe5b90602001906020020151600b6000858481518110610a5357fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055828181518110610a8357fe5b90602001906020020151600160a060020a03167f1bd6fb9fa2c39ce5d0d2afa1eaba998963eb5f553fd862c94f131aa9e35c1577838381518110610ac357fe5b9060200190602002015160405190815260200160405180910390a26001016109d0565b505050565b600160a060020a031660009081526009602052604090205490565b60015460009033600160a060020a03908116911614610b2457600080fd5b60085460ff1615610b3457600080fd5b6008805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600154600160a060020a031681565b60008060008084118015610b97575060008551115b8015610bbc5750600160a060020a0333166000908152600a602052604090205460ff16155b8015610bdf5750600160a060020a0333166000908152600b602052604090205442115b1515610bea57600080fd5b610bf8846305f5e1006118fa565b9350610c058486516118fa565b600160a060020a03331660009081526009602052604090205490925082901015610c2e57600080fd5b5060005b8451811015610db657848181518110610c4757fe5b90602001906020020151600160a060020a031615801590610c9c5750600a6000868381518110610c7357fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff16155b8015610ce15750600b6000868381518110610cb357fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b1515610cec57600080fd5b610d3060096000878481518110610cff57fe5b90602001906020020151600160a060020a0316600160a060020a0316815260200190815260200160002054856118eb565b60096000878481518110610d4057fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055848181518110610d7057fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611cb98339815191528660405190815260200160405180910390a3600101610c32565b600160a060020a033316600090815260096020526040902054610dd990836118d9565b33600160a060020a0316600090815260096020526040902055506001949350505050565b610e05611ca6565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108775780601f1061084c57610100808354040283529160200191610877565b60015433600160a060020a03908116911614610e8b57600080fd5b600081118015610ea3575080610ea083610aeb565b10155b1515610eae57600080fd5b600160a060020a038216600090815260096020526040902054610ed190826118d9565b600160a060020a038316600090815260096020526040902055600654610ef790826118d9565b600655600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a25050565b6000610f45611ca6565b600083118015610f6e5750600160a060020a0333166000908152600a602052604090205460ff16155b8015610f935750600160a060020a0384166000908152600a602052604090205460ff16155b8015610fb65750600160a060020a0333166000908152600b602052604090205442115b8015610fd95750600160a060020a0384166000908152600b602052604090205442115b1515610fe457600080fd5b610fed84611925565b1561100457610ffd84848361192d565b915061100f565b610ffd848483611b53565b5092915050565b600a6020526000908152604090205460ff1681565b600080831180156110555750600160a060020a0333166000908152600a602052604090205460ff16155b801561107a5750600160a060020a0384166000908152600a602052604090205460ff16155b801561109d5750600160a060020a0333166000908152600b602052604090205442115b80156110c05750600160a060020a0384166000908152600b602052604090205442115b15156110cb57600080fd5b6110d484611925565b156110eb576110e484848461192d565b90506110f6565b6110e4848484611b53565b9392505050565b60015460009033600160a060020a0390811691161461111b57600080fd5b600083511161112957600080fd5b5060005b8251811015610ae65782818151811061114257fe5b90602001906020020151600160a060020a0316151561116057600080fd5b81600a600085848151811061117157fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790558281815181106111af57fe5b90602001906020020151600160a060020a03167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051901515815260200160405180910390a260010161112d565b600b6020526000908152604090205481565b60015433600160a060020a0390811691161461122c57600080fd5b600755565b6001546000908190819033600160a060020a0390811691161461125357600080fd5b60008551118015611265575083518551145b151561127057600080fd5b5060009050805b84518110156114f557600084828151811061128e57fe5b906020019060200201511180156112c257508481815181106112ac57fe5b90602001906020020151600160a060020a031615155b80156113025750600a60008683815181106112d957fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff16155b80156113475750600b600086838151811061131957fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205442115b151561135257600080fd5b61137584828151811061136157fe5b906020019060200201516305f5e1006118fa565b84828151811061138157fe5b6020908102909101015283818151811061139757fe5b90602001906020020151600960008784815181106113b157fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205410156113e057600080fd5b611439600960008784815181106113f357fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000205485838151811061142a57fe5b906020019060200201516118d9565b6009600087848151811061144957fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205561148c8285838151811061147d57fe5b906020019060200201516118eb565b915033600160a060020a03168582815181106114a457fe5b90602001906020020151600160a060020a0316600080516020611cb98339815191528684815181106114d257fe5b9060200190602002015160405190815260200160405180910390a3600101611277565b600160a060020a033316600090815260096020526040902054610dd990836118eb565b60015433600160a060020a0390811691161461153357600080fd5b600160a060020a038116151561154857600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080841180156115dd5750600160a060020a0333166000908152600a602052604090205460ff16155b80156116025750600160a060020a0385166000908152600a602052604090205460ff16155b80156116255750600160a060020a0333166000908152600b602052604090205442115b80156116485750600160a060020a0385166000908152600b602052604090205442115b151561165357600080fd5b61165c85611925565b156118c3578361166b33610aeb565b101561167657600080fd5b61168861168233610aeb565b856118d9565b600160a060020a0333166000908152600960205260409020556116b36116ad86610aeb565b856118eb565b600160a060020a0386166000818152600960205260408082209390935590918490518082805190602001908083835b602083106117015780518252601f1990920191602091820191016116e2565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b8381101561179257808201518382015260200161177a565b50505050905090810190601f1680156117bf5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f1935050505015156117e357fe5b826040518082805190602001908083835b602083106118135780518252601f1990920191602091820191016117f4565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a484600160a060020a031633600160a060020a0316600080516020611cb98339815191528660405190815260200160405180910390a35060016118d1565b6118ce858585611b53565b90505b949350505050565b6000828211156118e557fe5b50900390565b6000828201838110156110f657fe5b60008083151561190d576000915061100f565b5082820282848281151561191d57fe5b04146110f657fe5b6000903b1190565b6000808361193a33610aeb565b101561194557600080fd5b61195161168233610aeb565b600160a060020a0333166000908152600960205260409020556119766116ad86610aeb565b600160a060020a03861660008181526009602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a0f5780820151838201526020016119f7565b50505050905090810190601f168015611a3c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611a5c57600080fd5b6102c65a03f11515611a6d57600080fd5b505050826040518082805190602001908083835b60208310611aa05780518252601f199092019160209182019101611a81565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a484600160a060020a031633600160a060020a0316600080516020611cb98339815191528660405190815260200160405180910390a3506001949350505050565b600082611b5f33610aeb565b1015611b6a57600080fd5b611b7c611b7633610aeb565b846118d9565b600160a060020a033316600090815260096020526040902055611ba7611ba185610aeb565b846118eb565b600160a060020a03851660009081526009602052604090819020919091558290518082805190602001908083835b60208310611bf45780518252601f199092019160209182019101611bd5565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a483600160a060020a031633600160a060020a0316600080516020611cb98339815191528560405190815260200160405180910390a35060019392505050565b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582028dd1ee1ae228ab518d05f91a41b95198ed7a92c88e56e304254812db90eadd60029"
}