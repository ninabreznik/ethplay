{
  "address": "0xa5d1e58ece1fc438d64e65769d2ab730143a4caf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Robomed Token",
  "contractName": "RobomedIco",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-24\n*/\n\npragma solidity ^0.4.11;\n\n\n\n\n/**\n * @title Math\n * @dev Assorted math operations y\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n\n  function balanceOf(address who) constant public returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant public returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant public returns (uint);\n\n  function name() constant public returns (string _name);\n  function symbol() constant public returns (string _symbol);\n  function decimals() constant public returns (uint8 _decimals);\n  function totalSupply() constant public returns (uint256 _supply);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\n\n\n\n/*\n* Contract that is working with ERC223 tokens\n*/\n\ncontract ContractReceiver {\n\n  string public functionName;\n  address public sender;\n  uint public value;\n  bytes public data;\n\n  function tokenFallback(address _from, uint _value, bytes _data) public {\n\n    sender = _from;\n    value = _value;\n    data = _data;\n    functionName = \"tokenFallback\";\n    //uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n    //tkn.sig = bytes4(u);\n\n    /* tkn variable is analogue of msg variable of Ether transaction\n    *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n    *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n    *  tkn.data is data of token transaction   (analogue of msg.data)\n    *  tkn.sig is 4 bytes signature of function\n    *  if data of token transaction is a function execution\n    */\n  }\n\n  function customFallback(address _from, uint _value, bytes _data) public {\n    tokenFallback(_from, _value, _data);\n    functionName = \"customFallback\";\n  }\n}\n\n\n\n\n\n\n\ncontract RobomedIco is ERC223, ERC20 {\n\n    using SafeMath for uint256;\n\n    string public name = \"RobomedToken\";\n\n    string public symbol = \"RBM\";\n\n    uint8 public decimals = 18;\n\n    //addresses\n\n    /*\n     * ADDR_OWNER - владелец контракта - распределяет вип токены, начисляет баунти и team, осуществляет переход по стадиям\n     */\n    address public constant ADDR_OWNER = 0x21F6C4D926B705aD244Ec33271559dA8c562400F;\n\n    /*\n    * ADDR_WITHDRAWAL1, ADDR_WITHDRAWAL2 - участники контракта, которые совместно выводят eth после наступления PostIco\n    */\n    address public constant ADDR_WITHDRAWAL1 = 0x0dD97e6259a7de196461B36B028456a97e3268bE;\n\n    /*\n    * ADDR_WITHDRAWAL1, ADDR_WITHDRAWAL2 - участники контракта, которые совместно выводят eth после наступления PostIco\n    */\n    address public constant ADDR_WITHDRAWAL2 = 0x8c5B02144F7664D37FDfd4a2f90148d08A04838D;\n\n    /**\n    * Адрес на который кладуться токены для раздачи по Baunty\n    */\n    address public constant ADDR_BOUNTY_TOKENS_ACCOUNT = 0x6542393623Db0D7F27fDEd83e6feDBD767BfF9b4;\n\n    /**\n    * Адрес на который кладуться токены для раздачи Team\n    */\n    address public constant ADDR_TEAM_TOKENS_ACCOUNT = 0x28c6bCAB2204CEd29677fEE6607E872E3c40d783;\n\n\n\n    //VipPlacement constants\n\n\n    /**\n     * Количество токенов для стадии VipPlacement\n    */\n    uint256 public constant INITIAL_COINS_FOR_VIPPLACEMENT =507937500 * 10 ** 18;\n\n    /**\n     * Длительность стадии VipPlacement\n    */\n    uint256 public constant DURATION_VIPPLACEMENT = 1 seconds;// 1 minutes;//  1 days;\n\n    //end VipPlacement constants\n\n    //PreSale constants\n\n    /**\n     * Количество токенов для стадии PreSale\n    */\n    uint256 public constant EMISSION_FOR_PRESALE = 76212500 * 10 ** 18;\n\n    /**\n     * Длительность стадии PreSale\n    */\n    uint256 public constant DURATION_PRESALE = 1 days;//2 minutes;//1 days;\n\n    /**\n     * Курс стадии PreSale\n    */\n    uint256 public constant RATE_PRESALE = 2702;\n\n    //end PreSale constants\n\n    //SaleStage1 constants\n\n    /**\n     * Общая длительность стадий Sale с SaleStage1 по SaleStage7 включительно\n    */\n    uint256 public constant DURATION_SALESTAGES = 10 days; //2 minutes;//30 days;\n\n    /**\n     * Курс стадии SaleStage1\n    */\n    uint256 public constant RATE_SALESTAGE1 = 2536;\n\n    /**\n     * Эмиссия токенов для стадии SaleStage1\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE1 = 40835000 * 10 ** 18;\n\n    //end SaleStage1 constants\n\n    //SaleStage2 constants\n\n    /**\n     * Курс стадии SaleStage2\n    */\n    uint256 public constant RATE_SALESTAGE2 = 2473;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage2\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE2 = 40835000 * 10 ** 18;\n\n    //end SaleStage2 constants\n\n    //SaleStage3 constants\n\n    /**\n     * Курс стадии SaleStage3\n    */\n    uint256 public constant RATE_SALESTAGE3 = 2390;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage3\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE3 = 40835000 * 10 ** 18;\n    //end SaleStage3 constants\n\n    //SaleStage4 constants\n\n    /**\n     * Курс стадии SaleStage4\n    */\n    uint256 public constant RATE_SALESTAGE4 = 2349;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage4\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE4 = 40835000 * 10 ** 18;\n\n    //end SaleStage4 constants\n\n\n    //SaleStage5 constants\n\n    /**\n     * Курс стадии SaleStage5\n    */\n    uint256 public constant RATE_SALESTAGE5 = 2286;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage5\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE5 = 40835000 * 10 ** 18;\n\n    //end SaleStage5 constants\n\n\n\n    //SaleStage6 constants\n\n    /**\n     * Курс стадии SaleStage6\n    */\n    uint256 public constant RATE_SALESTAGE6 = 2224;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage6\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE6 = 40835000 * 10 ** 18;\n\n    //end SaleStage6 constants\n\n\n    //SaleStage7 constants\n\n    /**\n     * Курс стадии SaleStage7\n    */\n    uint256 public constant RATE_SALESTAGE7 = 2182;\n\n    /**\n    * Эмиссия токенов для стадии SaleStage7\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGE7 = 40835000 * 10 ** 18;\n\n    //end SaleStage7 constants\n\n\n    //SaleStageLast constants\n\n    /**\n     * Длительность стадии SaleStageLast\n    */\n    uint256 public constant DURATION_SALESTAGELAST = 1 days;// 20 minutes;//10 days;\n\n    /**\n     * Курс стадии SaleStageLast\n    */\n    uint256 public constant RATE_SALESTAGELAST = 2078;\n\n    /**\n    * Эмиссия токенов для стадии SaleStageLast\n    */\n    uint256 public constant EMISSION_FOR_SALESTAGELAST = 302505000 * 10 ** 18;\n    //end SaleStageLast constants\n\n    //PostIco constants\n\n    /**\n     * Длительность периода на который нельзя использовать team токены, полученные при распределении\n    */\n    uint256 public constant DURATION_NONUSETEAM = 180 days;//10 days;\n\n    /**\n     * Длительность периода на который нельзя восстановить нераспроданные unsoldTokens токены,\n     * отсчитывается после наступления PostIco\n    */\n    uint256 public constant DURATION_BEFORE_RESTORE_UNSOLD = 270 days;\n\n    //end PostIco constants\n\n    /**\n    * Эмиссия токенов для BOUNTY\n    */\n    uint256 public constant EMISSION_FOR_BOUNTY = 83750000 * 10 ** 18;\n\n    /**\n    * Эмиссия токенов для TEAM\n    */\n    uint256 public constant EMISSION_FOR_TEAM = 418750000 * 10 ** 18;\n\n    /**\n    * Кол-во токенов, которое будет начислено каждому участнику команды\n    */\n    uint256 public constant TEAM_MEMBER_VAL = 2000000 * 10 ** 18;\n\n    /**\n      * Перечисление состояний контракта\n      */\n    enum IcoStates {\n\n    /**\n     * Состояние для которого выполняется заданная эмиссия на кошелёк владельца,\n     * далее все выпущенные токены распределяются владельцем из своего кошелька на произвольные кошельки, распределение может происходить всегда.\n     * Владелец не может распределить из своего кошелька, количество превышающее INITIAL_COINS_FOR_VIPPLACEMENT до прекращения ICO\n     * Состояние завершается по наступлению времени endDateOfVipPlacement\n     */\n    VipPlacement,\n\n    /**\n       * Состояние для которого выполняется заданная эмиссия в свободный пул freeMoney.\n       * далее все выпущенные свободные токены покупаются всеми желающими вплоть до endDateOfPreSale,\n       * не выкупленные токены будут уничтожены\n       * Состояние завершается по наступлению времени endDateOfPreSale.\n       * С момента наступления PreSale покупка токенов становиться разрешена\n       */\n    PreSale,\n\n    /**\n     * Состояние представляющее из себя подстадию продаж,\n     * при наступлении данного состояния выпускается заданное количество токенов,\n     * количество свободных токенов приравнивается к этой эмиссии\n     * Состояние завершается при выкупе всех свободных токенов или по наступлению времени startDateOfSaleStageLast.\n     * Если выкупаются все свободные токены - переход осуществляется на следующую стадию -\n     * например [с SaleStage1 на SaleStage2] или [с SaleStage2 на SaleStage3]\n     * Если наступает время startDateOfSaleStageLast, то независимо от выкупленных токенов переходим на стостояние SaleStageLast\n    */\n    SaleStage1,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage2,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage3,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage4,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage5,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage6,\n\n    /**\n     * Аналогично SaleStage1\n     */\n    SaleStage7,\n\n    /**\n     * Состояние представляющее из себя последнюю подстадию продаж,\n     * при наступлении данного состояния выпускается заданное количество токенов,\n     * количество свободных токенов приравнивается к этой эмиссии,\n     * плюс остатки нераспроданных токенов со стадий SaleStage1,SaleStage2,SaleStage3,SaleStage4,SaleStage5,SaleStage6,SaleStage7\n     * Состояние завершается по наступлению времени endDateOfSaleStageLast.\n    */\n    SaleStageLast,\n\n    /**\n     * Состояние наступающее после завершения Ico,\n     * при наступлении данного состояния свободные токены сохраняются в unsoldTokens,\n     * также происходит бонусное распределение дополнительных токенов Bounty и Team,\n     * С момента наступления PostIco покупка токенов невозможна\n    */\n    PostIco\n\n    }\n\n\n    /**\n    * Здесь храним балансы токенов\n    */\n    mapping (address => uint256)  balances;\n\n    mapping (address => mapping (address => uint256))  allowed;\n\n    /**\n    * Здесь храним начисленные премиальные токены, могут быть выведены на кошелёк начиная с даты startDateOfUseTeamTokens\n    */\n    mapping (address => uint256) teamBalances;\n\n    /**\n    * Владелец контракта - распределяет вип токены, начисляет баунти и team, осуществляет переход по стадиям,\n    */\n    address public owner;\n\n\n    /**\n    * Участник контракта -  выводит eth после наступления PostIco, совместно с withdrawal2\n    */\n    address public withdrawal1;\n\n    /**\n    * Участник контракта - только при его участии может быть выведены eth после наступления PostIco, совместно с withdrawal1\n    */\n    address public withdrawal2;\n\n\n\n\n    /**\n    * Адрес на счёте которого находятся нераспределённые bounty токены\n    */\n    address public bountyTokensAccount;\n\n    /**\n    * Адрес на счёте которого находятся нераспределённые team токены\n    */\n    address public teamTokensAccount;\n\n    /**\n    *Адрес на который инициирован вывод eth (владельцем)\n    */\n    address public withdrawalTo;\n\n    /**\n    * Количество eth который предполагается выводить на адрес withdrawalTo\n    */\n    uint256 public withdrawalValue;\n\n    /**\n     * Количество нераспределённых токенов bounty\n     * */\n    uint256 public bountyTokensNotDistributed;\n\n    /**\n     * Количество нераспределённых токенов team\n     * */\n    uint256 public teamTokensNotDistributed;\n\n    /**\n      * Текущее состояние\n      */\n    IcoStates public currentState;\n\n    /**\n    * Количество собранного эфира\n    */\n    uint256 public totalBalance;\n\n    /**\n    * Количество свободных токенов (никто ими не владеет)\n    */\n    uint256 public freeMoney = 0;\n\n    /**\n     * Общее количество выпущенных токенов\n     * */\n    uint256 public totalSupply = 0;\n\n    /**\n     * Общее количество купленных токенов\n     * */\n    uint256 public totalBought = 0;\n\n\n\n    /**\n     * Количество не распределённых токенов от стадии VipPlacement\n     */\n    uint256 public vipPlacementNotDistributed;\n\n    /**\n     * Дата окончания стадии VipPlacement\n    */\n    uint256 public endDateOfVipPlacement;\n\n    /**\n     * Дата окончания стадии PreSale\n    */\n    uint256 public endDateOfPreSale = 0;\n\n    /**\n     * Дата начала стадии SaleStageLast\n    */\n    uint256 public startDateOfSaleStageLast;\n\n    /**\n     * Дата окончания стадии SaleStageLast\n    */\n    uint256 public endDateOfSaleStageLast = 0;\n\n\n    /**\n     * Остаток нераспроданных токенов для состояний с SaleStage1 по SaleStage7, которые переходят в свободные на момент наступления SaleStageLast\n     */\n    uint256 public remForSalesBeforeStageLast = 0;\n\n    /**\n    * Дата, начиная с которой можно получить team токены непосредственно на кошелёк\n    */\n    uint256 public startDateOfUseTeamTokens = 0;\n\n    /**\n    * Дата, начиная с которой можно восстановить-перевести нераспроданные токены unsoldTokens\n    */\n    uint256 public startDateOfRestoreUnsoldTokens = 0;\n\n    /**\n    * Количество нераспроданных токенов на момент наступления PostIco\n    */\n    uint256 public unsoldTokens = 0;\n\n    /**\n     * How many token units a buyer gets per wei\n     */\n    uint256 public rate = 0;\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the withdrawal1.\n     */\n    modifier onlyWithdrawal1() {\n        require(msg.sender == withdrawal1);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the withdrawal2.\n     */\n    modifier onlyWithdrawal2() {\n        require(msg.sender == withdrawal2);\n        _;\n    }\n\n    /**\n     * Модификатор позволяющий выполнять вызов,\n     * только если состояние PostIco или выше\n     */\n    modifier afterIco() {\n        require(uint(currentState) >= uint(IcoStates.PostIco));\n        _;\n    }\n\n\n    /**\n    * Модификатор проверяющий допустимость операций transfer\n    */\n    modifier checkForTransfer(address _from, address _to, uint256 _value)  {\n\n        //проверяем размер перевода\n        require(_value > 0);\n\n        //проверяем кошелёк назначения\n        require(_to != 0x0 && _to != _from);\n\n        //на стадиях перед ico переводить может только владелец\n        require(currentState == IcoStates.PostIco || _from == owner);\n\n        //операции на bounty и team не допустимы до окончания ico\n        require(currentState == IcoStates.PostIco || (_to != bountyTokensAccount && _to != teamTokensAccount));\n\n        _;\n    }\n\n\n\n    /**\n     * Событие изменения состояния контракта\n     */\n    event StateChanged(IcoStates state);\n\n\n    /**\n     * Событие покупки токенов\n     */\n    event Buy(address beneficiary, uint256 boughtTokens, uint256 ethValue);\n\n    /**\n    * @dev Конструктор\n    */\n    function RobomedIco() public {\n\n        //проверяем, что все указанные адреса не равны 0, также они отличаются от создающего контракт\n        //по сути контракт создаёт некое 3-ее лицо не имеющее в дальнейшем ни каких особенных прав\n        //так же действует условие что все перичисленные адреса разные (нельзя быть одновременно владельцем и кошельком для токенов - например)\n        require(ADDR_OWNER != 0x0 && ADDR_OWNER != msg.sender);\n        require(ADDR_WITHDRAWAL1 != 0x0 && ADDR_WITHDRAWAL1 != msg.sender);\n        require(ADDR_WITHDRAWAL2 != 0x0 && ADDR_WITHDRAWAL2 != msg.sender);\n        require(ADDR_BOUNTY_TOKENS_ACCOUNT != 0x0 && ADDR_BOUNTY_TOKENS_ACCOUNT != msg.sender);\n        require(ADDR_TEAM_TOKENS_ACCOUNT != 0x0 && ADDR_TEAM_TOKENS_ACCOUNT != msg.sender);\n\n        require(ADDR_BOUNTY_TOKENS_ACCOUNT != ADDR_TEAM_TOKENS_ACCOUNT);\n        require(ADDR_OWNER != ADDR_TEAM_TOKENS_ACCOUNT);\n        require(ADDR_OWNER != ADDR_BOUNTY_TOKENS_ACCOUNT);\n        require(ADDR_WITHDRAWAL1 != ADDR_OWNER);\n        require(ADDR_WITHDRAWAL1 != ADDR_BOUNTY_TOKENS_ACCOUNT);\n        require(ADDR_WITHDRAWAL1 != ADDR_TEAM_TOKENS_ACCOUNT);\n        require(ADDR_WITHDRAWAL2 != ADDR_OWNER);\n        require(ADDR_WITHDRAWAL2 != ADDR_BOUNTY_TOKENS_ACCOUNT);\n        require(ADDR_WITHDRAWAL2 != ADDR_TEAM_TOKENS_ACCOUNT);\n        require(ADDR_WITHDRAWAL2 != ADDR_WITHDRAWAL1);\n\n        //выставляем адреса\n        //test\n        owner = ADDR_OWNER;\n        withdrawal1 = ADDR_WITHDRAWAL1;\n        withdrawal2 = ADDR_WITHDRAWAL2;\n        bountyTokensAccount = ADDR_BOUNTY_TOKENS_ACCOUNT;\n        teamTokensAccount = ADDR_TEAM_TOKENS_ACCOUNT;\n\n        //устанавливаем начальное значение на предопределённых аккаунтах\n        balances[owner] = INITIAL_COINS_FOR_VIPPLACEMENT;\n        balances[bountyTokensAccount] = EMISSION_FOR_BOUNTY;\n        balances[teamTokensAccount] = EMISSION_FOR_TEAM;\n\n        //нераспределённые токены\n        bountyTokensNotDistributed = EMISSION_FOR_BOUNTY;\n        teamTokensNotDistributed = EMISSION_FOR_TEAM;\n        vipPlacementNotDistributed = INITIAL_COINS_FOR_VIPPLACEMENT;\n\n        currentState = IcoStates.VipPlacement;\n        totalSupply = INITIAL_COINS_FOR_VIPPLACEMENT + EMISSION_FOR_BOUNTY + EMISSION_FOR_TEAM;\n\n        endDateOfVipPlacement = now.add(DURATION_VIPPLACEMENT);\n        remForSalesBeforeStageLast = 0;\n\n\n        //set team for members\n        owner = msg.sender;\n        //ildar\n        transferTeam(0xa19DC4c158169bC45b17594d3F15e4dCb36CC3A3, TEAM_MEMBER_VAL);\n        //vova\n        transferTeam(0xdf66490Fe9F2ada51967F71d6B5e26A9D77065ED, TEAM_MEMBER_VAL);\n        //kirill\n        transferTeam(0xf0215C6A553AD8E155Da69B2657BeaBC51d187c5, TEAM_MEMBER_VAL);\n        //evg\n        transferTeam(0x6c1666d388302385AE5c62993824967a097F14bC, TEAM_MEMBER_VAL);\n        //igor\n        transferTeam(0x82D550dC74f8B70B202aB5b63DAbe75E6F00fb36, TEAM_MEMBER_VAL);\n        owner = ADDR_OWNER;\n    }\n\n    /**\n    * Function to access name of token .\n    */\n    function name() public constant returns (string) {\n        return name;\n    }\n\n    /**\n    * Function to access symbol of token .\n    */\n    function symbol() public constant returns (string) {\n        return symbol;\n    }\n\n    /**\n    * Function to access decimals of token .\n    */\n    function decimals() public constant returns (uint8) {\n        return decimals;\n    }\n\n\n    /**\n    * Function to access total supply of tokens .\n    */\n    function totalSupply() public constant returns (uint256) {\n        return totalSupply;\n    }\n\n    /**\n    * Метод получающий количество начисленных премиальных токенов\n    */\n    function teamBalanceOf(address _owner) public constant returns (uint256){\n        return teamBalances[_owner];\n    }\n\n    /**\n    * Метод зачисляющий предварительно распределённые team токены на кошелёк\n    */\n    function accrueTeamTokens() public afterIco {\n        //зачисление возможно только после определённой даты\n        require(startDateOfUseTeamTokens <= now);\n\n        //добавляем в общее количество выпущенных\n        totalSupply = totalSupply.add(teamBalances[msg.sender]);\n\n        //зачисляем на кошелёк и обнуляем не начисленные\n        balances[msg.sender] = balances[msg.sender].add(teamBalances[msg.sender]);\n        teamBalances[msg.sender] = 0;\n    }\n\n    /**\n    * Метод проверяющий возможность восстановления нераспроданных токенов\n    */\n    function canRestoreUnsoldTokens() public constant returns (bool) {\n        //восстановление возможно только после ico\n        if (currentState != IcoStates.PostIco) return false;\n\n        //восстановление возможно только после определённой даты\n        if (startDateOfRestoreUnsoldTokens > now) return false;\n\n        //восстановление возможно только если есть что восстанавливать\n        if (unsoldTokens == 0) return false;\n\n        return true;\n    }\n\n    /**\n    * Метод выполняющий восстановление нераспроданных токенов\n    */\n    function restoreUnsoldTokens(address _to) public onlyOwner {\n        require(_to != 0x0);\n        require(canRestoreUnsoldTokens());\n\n        balances[_to] = balances[_to].add(unsoldTokens);\n        totalSupply = totalSupply.add(unsoldTokens);\n        unsoldTokens = 0;\n    }\n\n    /**\n     * Метод переводящий контракт в следующее доступное состояние,\n     * Для выяснения возможности перехода можно использовать метод canGotoState\n    */\n    function gotoNextState() public onlyOwner returns (bool)  {\n\n        if (gotoPreSale() || gotoSaleStage1() || gotoSaleStageLast() || gotoPostIco()) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n    * Инициация снятия эфира на указанный кошелёк\n    */\n    function initWithdrawal(address _to, uint256 _value) public afterIco onlyWithdrawal1 {\n        withdrawalTo = _to;\n        withdrawalValue = _value;\n    }\n\n    /**\n    * Подтверждение снятия эфира на указанный кошелёк\n    */\n    function approveWithdrawal(address _to, uint256 _value) public afterIco onlyWithdrawal2 {\n        require(_to != 0x0 && _value > 0);\n        require(_to == withdrawalTo);\n        require(_value == withdrawalValue);\n\n        totalBalance = totalBalance.sub(_value);\n        withdrawalTo.transfer(_value);\n\n        withdrawalTo = 0x0;\n        withdrawalValue = 0;\n    }\n\n\n\n    /**\n     * Метод проверяющий возможность перехода в указанное состояние\n     */\n    function canGotoState(IcoStates toState) public constant returns (bool){\n        if (toState == IcoStates.PreSale) {\n            return (currentState == IcoStates.VipPlacement && endDateOfVipPlacement <= now);\n        }\n        else if (toState == IcoStates.SaleStage1) {\n            return (currentState == IcoStates.PreSale && endDateOfPreSale <= now);\n        }\n        else if (toState == IcoStates.SaleStage2) {\n            return (currentState == IcoStates.SaleStage1 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStage3) {\n            return (currentState == IcoStates.SaleStage2 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStage4) {\n            return (currentState == IcoStates.SaleStage3 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStage5) {\n            return (currentState == IcoStates.SaleStage4 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStage6) {\n            return (currentState == IcoStates.SaleStage5 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStage7) {\n            return (currentState == IcoStates.SaleStage6 && freeMoney == 0 && startDateOfSaleStageLast > now);\n        }\n        else if (toState == IcoStates.SaleStageLast) {\n            //переход на состояние SaleStageLast возможен только из состояний SaleStages\n            if (\n            currentState != IcoStates.SaleStage1\n            &&\n            currentState != IcoStates.SaleStage2\n            &&\n            currentState != IcoStates.SaleStage3\n            &&\n            currentState != IcoStates.SaleStage4\n            &&\n            currentState != IcoStates.SaleStage5\n            &&\n            currentState != IcoStates.SaleStage6\n            &&\n            currentState != IcoStates.SaleStage7) return false;\n\n            //переход осуществляется если на состоянии SaleStage7 не осталось свободных токенов\n            //или на одном из состояний SaleStages наступило время startDateOfSaleStageLast\n            if (!(currentState == IcoStates.SaleStage7 && freeMoney == 0) && startDateOfSaleStageLast > now) {\n                return false;\n            }\n\n            return true;\n        }\n        else if (toState == IcoStates.PostIco) {\n            return (currentState == IcoStates.SaleStageLast && endDateOfSaleStageLast <= now);\n        }\n    }\n\n    /**\n    * Fallback функция - из неё по сути просто происходит вызов покупки токенов для отправителя\n    */\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * Метод покупки токенов\n     */\n    function buyTokens(address beneficiary) public payable {\n        require(beneficiary != 0x0);\n        require(msg.value != 0);\n\n        //нельзя покупать на токены bounty и team\n        require(beneficiary != bountyTokensAccount && beneficiary != teamTokensAccount);\n\n        //выставляем остаток средств\n        //в процессе покупки будем его уменьшать на каждой итерации - итерация - покупка токенов на определённой стадии\n        //суть - если покупающий переводит количество эфира,\n        //большее чем возможное количество свободных токенов на определённой стадии,\n        //то выполняется переход на следующую стадию (курс тоже меняется)\n        //и на остаток идёт покупка на новой стадии и т.д.\n        //если же в процессе покупке все свободные токены израсходуются (со всех допустимых стадий)\n        //будет выкинуто исключение\n        uint256 remVal = msg.value;\n\n        //увеличиваем количество эфира пришедшего к нам\n        totalBalance = totalBalance.add(msg.value);\n\n        //общее количество токенов которые купили за этот вызов\n        uint256 boughtTokens = 0;\n\n        while (remVal > 0) {\n            //покупать токены можно только на указанных стадиях\n            require(\n            currentState != IcoStates.VipPlacement\n            &&\n            currentState != IcoStates.PostIco);\n\n            //выполняем покупку для вызывающего\n            //смотрим, есть ли у нас такое количество свободных токенов на текущей стадии\n            uint256 tokens = remVal.mul(rate);\n            if (tokens > freeMoney) {\n                remVal = remVal.sub(freeMoney.div(rate));\n                tokens = freeMoney;\n            }\n            else\n            {\n                remVal = 0;\n                //если остаток свободных токенов меньше чем курс - отдаём их покупателю\n                uint256 remFreeTokens = freeMoney.sub(tokens);\n                if (0 < remFreeTokens && remFreeTokens < rate) {\n                    tokens = freeMoney;\n                }\n            }\n            assert(tokens > 0);\n\n            freeMoney = freeMoney.sub(tokens);\n            totalBought = totalBought.add(tokens);\n            balances[beneficiary] = balances[beneficiary].add(tokens);\n            boughtTokens = boughtTokens.add(tokens);\n\n            //если покупка была выполнена на любой из стадий Sale кроме последней\n            if (\n            uint(currentState) >= uint(IcoStates.SaleStage1)\n            &&\n            uint(currentState) <= uint(IcoStates.SaleStage7)) {\n\n                //уменьшаем количество остатка по токенам которые необходимо продать на этих стадиях\n                remForSalesBeforeStageLast = remForSalesBeforeStageLast.sub(tokens);\n\n                //пробуем перейти между SaleStages\n                transitionBetweenSaleStages();\n            }\n\n        }\n\n        Buy(beneficiary, boughtTokens, msg.value);\n\n    }\n\n    /**\n    * Метод выполняющий выдачу баунти-токенов на указанный адрес\n    */\n    function transferBounty(address _to, uint256 _value) public onlyOwner {\n        //проверяем кошелёк назначения\n        require(_to != 0x0 && _to != msg.sender);\n\n        //уменьшаем количество нераспределённых\n        bountyTokensNotDistributed = bountyTokensNotDistributed.sub(_value);\n\n        //переводим с акаунта баунти на акаунт назначения\n        balances[_to] = balances[_to].add(_value);\n        balances[bountyTokensAccount] = balances[bountyTokensAccount].sub(_value);\n\n        Transfer(bountyTokensAccount, _to, _value);\n    }\n\n    /**\n    * Метод выполняющий выдачу баунти-токенов на указанный адрес\n    */\n    function transferTeam(address _to, uint256 _value) public onlyOwner {\n        //проверяем кошелёк назначения\n        require(_to != 0x0 && _to != msg.sender);\n\n        //уменьшаем количество нераспределённых\n        teamTokensNotDistributed = teamTokensNotDistributed.sub(_value);\n\n        //переводим с акаунта team на team акаунт назначения\n        teamBalances[_to] = teamBalances[_to].add(_value);\n        balances[teamTokensAccount] = balances[teamTokensAccount].sub(_value);\n\n        //убираем токены из общего количества выпущенных\n        totalSupply = totalSupply.sub(_value);\n    }\n\n    /**\n    * Function that is called when a user or another contract wants to transfer funds .\n    */\n    function transfer(address _to, uint _value, bytes _data) checkForTransfer(msg.sender, _to, _value) public returns (bool) {\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        }\n        else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n\n    /**\n    * @dev transfer token for a specified address\n    * Standard function transfer similar to ERC20 transfer with no _data .\n    * Added due to backwards compatibility reasons .\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) checkForTransfer(msg.sender, _to, _value) public returns (bool) {\n\n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        }\n        else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    /**\n    * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    */\n    function isContract(address _addr) private view returns (bool) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    /**\n    * function that is called when transaction target is an address\n    */\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n    * function that is called when transaction target is a contract\n    */\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    function _transfer(address _from, address _to, uint _value) private {\n        require(balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (currentState != IcoStates.PostIco) {\n            //общая сумма переводов от владельца (до завершения) ico не может превышать InitialCoinsFor_VipPlacement\n            vipPlacementNotDistributed = vipPlacementNotDistributed.sub(_value);\n        }\n    }\n\n\n\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public afterIco returns (bool) {\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public afterIco returns (bool) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * Вспомогательный метод выставляющий количество свободных токенов, рейт и добавляющий количество эмитированных\n    */\n    function setMoney(uint256 _freeMoney, uint256 _emission, uint256 _rate) private {\n        freeMoney = _freeMoney;\n        totalSupply = totalSupply.add(_emission);\n        rate = _rate;\n    }\n\n    /**\n     * Метод переводящий контракт в состояние PreSale\n     */\n    function gotoPreSale() private returns (bool) {\n\n        //проверяем возможность перехода\n        if (!canGotoState(IcoStates.PreSale)) return false;\n\n        //да нужно переходить\n\n        //переходим в PreSale\n        currentState = IcoStates.PreSale;\n\n\n        //выставляем состояние токенов\n        setMoney(EMISSION_FOR_PRESALE, EMISSION_FOR_PRESALE, RATE_PRESALE);\n\n        //устанавливаем дату окончания PreSale\n        endDateOfPreSale = now.add(DURATION_PRESALE);\n\n        //разим событие изменения состояния\n        StateChanged(IcoStates.PreSale);\n        return true;\n    }\n\n    /**\n    * Метод переводящий контракт в состояние SaleStage1\n    */\n    function gotoSaleStage1() private returns (bool) {\n        //проверяем возможность перехода\n        if (!canGotoState(IcoStates.SaleStage1)) return false;\n\n        //да нужно переходить\n\n        //переходим в SaleStage1\n        currentState = IcoStates.SaleStage1;\n\n        //непроданные токены сгорают\n        totalSupply = totalSupply.sub(freeMoney);\n\n        //выставляем состояние токенов\n        setMoney(EMISSION_FOR_SALESTAGE1, EMISSION_FOR_SALESTAGE1, RATE_SALESTAGE1);\n\n        //определяем количество токенов которое можно продать на всех стадиях Sale кроме последней\n        remForSalesBeforeStageLast =\n        EMISSION_FOR_SALESTAGE1 +\n        EMISSION_FOR_SALESTAGE2 +\n        EMISSION_FOR_SALESTAGE3 +\n        EMISSION_FOR_SALESTAGE4 +\n        EMISSION_FOR_SALESTAGE5 +\n        EMISSION_FOR_SALESTAGE6 +\n        EMISSION_FOR_SALESTAGE7;\n\n\n        //устанавливаем дату начала последней стадии продаж\n        startDateOfSaleStageLast = now.add(DURATION_SALESTAGES);\n\n        //разим событие изменения состояния\n        StateChanged(IcoStates.SaleStage1);\n        return true;\n    }\n\n    /**\n     * Метод выполняющий переход между состояниями Sale\n     */\n    function transitionBetweenSaleStages() private {\n        //переход между состояниями SaleStages возможен только если находимся в одном из них, кроме последнего\n        if (\n        currentState != IcoStates.SaleStage1\n        &&\n        currentState != IcoStates.SaleStage2\n        &&\n        currentState != IcoStates.SaleStage3\n        &&\n        currentState != IcoStates.SaleStage4\n        &&\n        currentState != IcoStates.SaleStage5\n        &&\n        currentState != IcoStates.SaleStage6\n        &&\n        currentState != IcoStates.SaleStage7) return;\n\n        //если есть возможность сразу переходим в состояние StageLast\n        if (gotoSaleStageLast()) {\n            return;\n        }\n\n        //смотрим в какое состояние можем перейти и выполняем переход\n        if (canGotoState(IcoStates.SaleStage2)) {\n            currentState = IcoStates.SaleStage2;\n            setMoney(EMISSION_FOR_SALESTAGE2, EMISSION_FOR_SALESTAGE2, RATE_SALESTAGE2);\n            StateChanged(IcoStates.SaleStage2);\n        }\n        else if (canGotoState(IcoStates.SaleStage3)) {\n            currentState = IcoStates.SaleStage3;\n            setMoney(EMISSION_FOR_SALESTAGE3, EMISSION_FOR_SALESTAGE3, RATE_SALESTAGE3);\n            StateChanged(IcoStates.SaleStage3);\n        }\n        else if (canGotoState(IcoStates.SaleStage4)) {\n            currentState = IcoStates.SaleStage4;\n            setMoney(EMISSION_FOR_SALESTAGE4, EMISSION_FOR_SALESTAGE4, RATE_SALESTAGE4);\n            StateChanged(IcoStates.SaleStage4);\n        }\n        else if (canGotoState(IcoStates.SaleStage5)) {\n            currentState = IcoStates.SaleStage5;\n            setMoney(EMISSION_FOR_SALESTAGE5, EMISSION_FOR_SALESTAGE5, RATE_SALESTAGE5);\n            StateChanged(IcoStates.SaleStage5);\n        }\n        else if (canGotoState(IcoStates.SaleStage6)) {\n            currentState = IcoStates.SaleStage6;\n            setMoney(EMISSION_FOR_SALESTAGE6, EMISSION_FOR_SALESTAGE6, RATE_SALESTAGE6);\n            StateChanged(IcoStates.SaleStage6);\n        }\n        else if (canGotoState(IcoStates.SaleStage7)) {\n            currentState = IcoStates.SaleStage7;\n            setMoney(EMISSION_FOR_SALESTAGE7, EMISSION_FOR_SALESTAGE7, RATE_SALESTAGE7);\n            StateChanged(IcoStates.SaleStage7);\n        }\n    }\n\n    /**\n      * Метод переводящий контракт в состояние SaleStageLast\n      */\n    function gotoSaleStageLast() private returns (bool) {\n        if (!canGotoState(IcoStates.SaleStageLast)) return false;\n\n        //ок переходим на состояние SaleStageLast\n        currentState = IcoStates.SaleStageLast;\n\n        //выставляем состояние токенов, с учётом всех остатков\n        setMoney(remForSalesBeforeStageLast + EMISSION_FOR_SALESTAGELAST, EMISSION_FOR_SALESTAGELAST, RATE_SALESTAGELAST);\n\n\n        //устанавливаем дату окончания SaleStageLast\n        endDateOfSaleStageLast = now.add(DURATION_SALESTAGELAST);\n\n        StateChanged(IcoStates.SaleStageLast);\n        return true;\n    }\n\n\n\n    /**\n      * Метод переводящий контракт в состояние PostIco\n      */\n    function gotoPostIco() private returns (bool) {\n        if (!canGotoState(IcoStates.PostIco)) return false;\n\n        //ок переходим на состояние PostIco\n        currentState = IcoStates.PostIco;\n\n        //выставляем дату после которой можно использовать премиальные токены\n        startDateOfUseTeamTokens = now + DURATION_NONUSETEAM;\n\n        //выставляем дату после которой можно зачислять оставшиеся (не распроданные) токены, на произвольный кошелёк\n        startDateOfRestoreUnsoldTokens = now + DURATION_BEFORE_RESTORE_UNSOLD;\n\n        //запоминаем количество нераспроданных токенов\n        unsoldTokens = freeMoney;\n\n        //уничтожаем свободные токены\n        totalSupply = totalSupply.sub(freeMoney);\n        setMoney(0, 0, 0);\n\n        StateChanged(IcoStates.PostIco);\n        return true;\n    }\n\n\n}",
  "bytecode": ""
}